
lab_work.elf:     file format elf32-littlenios2
lab_work.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0004018c

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x0000f4bc memsz 0x0000f4bc flags r-x
    LOAD off    0x000104dc vaddr 0x0004f4dc paddr 0x0004ff94 align 2**12
         filesz 0x00000ab8 memsz 0x00000ab8 flags rw-
    LOAD off    0x00011a4c vaddr 0x00050a4c paddr 0x00050a4c align 2**12
         filesz 0x00000000 memsz 0x0000018c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000016c  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ee10  0004018c  0004018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000540  0004ef9c  0004ef9c  0000ff9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000ab8  0004f4dc  0004ff94  000104dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000018c  00050a4c  00050a4c  00011a4c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_ram   00000000  00050bd8  00050bd8  00010f94  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00010f94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000db8  00000000  00000000  00010fb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026c28  00000000  00000000  00011d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009f05  00000000  00000000  00038998  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000bbb7  00000000  00000000  0004289d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001fec  00000000  00000000  0004e454  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000396c  00000000  00000000  00050440  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001a374  00000000  00000000  00053dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  0006e120  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001690  00000000  00000000  0006e180  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00072b62  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  00072b65  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00072b6f  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00072b70  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  00072b71  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  00072b75  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00072b79  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  00072b7d  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  00072b86  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  00072b8f  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  00072b98  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000037  00000000  00000000  00072ba0  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e2e  00000000  00000000  00072bd7  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0005228a  00000000  00000000  00076a05  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
0004018c l    d  .text	00000000 .text
0004ef9c l    d  .rodata	00000000 .rodata
0004f4dc l    d  .rwdata	00000000 .rwdata
00050a4c l    d  .bss	00000000 .bss
00050bd8 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab_work_bsp//obj/HAL/src/crt0.o
000401d4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Bridge_code.c
00000000 l    df *ABS*	00000000 Si114x_functions.c
000404a4 l     F .text	00000134 _sendCmd
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 main.c
00050a98 l     O .bss	0000000c ps_exit_time.3723
00050aa4 l     O .bss	0000000c ps_entry_time.3722
00050a4c l     O .bss	00000003 ps_state.3724
00000000 l    df *ABS*	00000000 mem_verify.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000414c0 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0004f23a l     O .rodata	00000010 zeroes.4181
0004f24a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00043adc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0004565c l     F .text	00000008 __fp_lock
00045664 l     F .text	00000008 __fp_unlock
00045678 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0004f4dc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0004f920 l     O .rwdata	00000020 lc_ctype_charset
0004f900 l     O .rwdata	00000020 lc_message_charset
0004f940 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0004f27c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00048b08 l     F .text	000000fc __sprint_r.part.0
0004f3b0 l     O .rodata	00000010 blanks.4125
0004f3a0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0004db6c l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0004ff84 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0004ff28 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0004e5e8 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0004e874 l     F .text	00000070 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00050a94 g     O .bss	00000004 alt_instruction_exception_handler
00041794 g     F .text	00000018 putchar
00047fe0 g     F .text	00000074 _mprec_log10
000480cc g     F .text	0000008c __any_on
0004a5c8 g     F .text	00000054 _isatty_r
0004f288 g     O .rodata	00000028 __mprec_tinytens
0004df78 g     F .text	00000050 alt_main
000417ac g     F .text	000000b8 _puts_r
00050ad8 g     O .bss	00000100 alt_irq
0004a61c g     F .text	0000005c _lseek_r
0004ff94 g       *ABS*	00000000 __flash_rwdata_start
0004c5ec g     F .text	00000084 .hidden __eqdf2
00040730 g     F .text	0000009c Si114xPauseAll
00040258 g     F .text	00000080 Si114xReadFromRegister
00050bd8 g       *ABS*	00000000 __alt_heap_start
00041750 g     F .text	0000003c printf
0004a6d4 g     F .text	0000009c _wcrtomb_r
00048a00 g     F .text	0000005c __sseek
000459ac g     F .text	00000010 __sinit
00049f9c g     F .text	00000154 __swbuf_r
00046424 g     F .text	0000007c _setlocale_r
00045818 g     F .text	00000064 __sfmoreglue
0004dfcc g     F .text	00000004 __malloc_unlock
00046f4c g     F .text	0000015c memmove
00045994 g     F .text	00000018 _cleanup
00040654 g     F .text	000000dc Si114xParamSet
000471cc g     F .text	000000a8 _Balloc
000405e8 g     F .text	00000008 Si114xAlsForce
0004c670 g     F .text	000000e0 .hidden __gtdf2
0004eafc g     F .text	00000008 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004a570 g     F .text	00000058 _fstat_r
00050a68 g     O .bss	00000004 errno
0004897c g     F .text	00000008 __seofread
00050a80 g     O .bss	00000004 alt_argv
00057f54 g       *ABS*	00000000 _gp
0004e3e4 g     F .text	00000004 usleep
0004fd80 g     O .rwdata	00000180 alt_fd_list
0004178c g     F .text	00000008 _putchar_r
0004eb04 g     F .text	00000078 alt_find_dev
000415ec g     F .text	00000138 memcpy
00041044 g     F .text	00000344 TMEM_Verify
0004566c g     F .text	0000000c _cleanup_r
0004d8ac g     F .text	000000d0 .hidden __floatsidf
0004e8e4 g     F .text	00000078 alt_io_redirect
0004c750 g     F .text	000000e0 .hidden __ltdf2
000402d8 g     F .text	00000100 Si114xBlockWrite
00041864 g     F .text	00000014 puts
0004eccc g     F .text	00000074 alt_exception_cause_generated_bad_addr
00040a90 g     F .text	00000038 I2C_start
00048860 g     F .text	00000074 __fpclassifyd
00047f3c g     F .text	000000a4 __ratio
00049f78 g     F .text	00000024 __vfiprintf_internal
0004e548 g     F .text	0000006c altera_avalon_jtag_uart_read
00041724 g     F .text	0000002c _printf_r
000415dc g     F .text	00000008 .hidden __udivsi3
0004dd54 g     F .text	0000008c isatty
0004f2d8 g     O .rodata	000000c8 __mprec_tens
000464a0 g     F .text	0000000c __locale_charset
00050a74 g     O .bss	00000008 alt_timezone
00040918 g     F .text	00000098 Compress
0004ec7c g     F .text	00000050 alt_icache_flush
00050a64 g     O .bss	00000004 __malloc_top_pad
0004ff5c g     O .rwdata	00000004 __mb_cur_max
000464d0 g     F .text	0000000c _localeconv_r
000475cc g     F .text	0000003c __i2b
00045e10 g     F .text	000004a4 __sfvwrite_r
000488d4 g     F .text	00000054 _sbrk_r
0004a678 g     F .text	0000005c _read_r
0004ff6c g     O .rwdata	00000004 alt_max_fd
0004a280 g     F .text	00000100 _fclose_r
0004562c g     F .text	00000030 fflush
00050a60 g     O .bss	00000004 __malloc_max_sbrked_mem
0004b484 g     F .text	0000089c .hidden __adddf3
00047ce4 g     F .text	0000011c __b2d
0004aef4 g     F .text	00000590 .hidden __umoddi3
0004def4 g     F .text	00000084 lseek
0004ff54 g     O .rwdata	00000004 _global_impure_ptr
000482c0 g     F .text	000005a0 _realloc_r
00050bd8 g       *ABS*	00000000 __bss_end
0004e80c g     F .text	00000068 alt_iic_isr_register
0004e2ec g     F .text	000000f8 alt_tick
0004a934 g     F .text	000005c0 .hidden __udivdi3
0004a394 g     F .text	00000184 _fputwc_r
0004f2b0 g     O .rodata	00000028 __mprec_bigtens
000473b0 g     F .text	00000104 __s2b
0004d97c g     F .text	000000a4 .hidden __floatunsidf
00047a8c g     F .text	00000060 __mcmp
000459cc g     F .text	00000018 __fp_lock_all
0004e7f4 g     F .text	00000018 alt_ic_irq_enabled
0004e2b8 g     F .text	00000034 alt_alarm_stop
00050a90 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	00000064 alt_irq_handler
0004ff00 g     O .rwdata	00000028 alt_dev_null
0004db54 g     F .text	00000018 alt_dcache_flush_all
000474b4 g     F .text	00000068 __hi0bits
000407cc g     F .text	00000108 Si114xReset
0004d824 g     F .text	00000088 .hidden __fixdfsi
0004ff94 g       *ABS*	00000000 __ram_rwdata_end
0004ff70 g     O .rwdata	00000008 alt_dev_list
0004e3e8 g     F .text	000000e4 write
00048158 g     F .text	000000a0 _putc_r
0004f4dc g       *ABS*	00000000 __ram_rodata_end
0004db74 g     F .text	00000080 fstat
0004c750 g     F .text	000000e0 .hidden __ledf2
00047804 g     F .text	00000140 __pow5mult
00048c1c g     F .text	0000135c ___vfiprintf_internal_r
00050a58 g     O .bss	00000004 __nlocale_changed
000415e4 g     F .text	00000008 .hidden __umodsi3
00050bd8 g       *ABS*	00000000 end
000401d8 g     F .text	00000004 delay_10ms
00040160 g     F .exceptions	0000002c alt_instruction_exception_entry
000664c0 g       *ABS*	00000000 __alt_stack_pointer
0004e624 g     F .text	00000050 alt_avalon_timer_sc_init
0004da20 g     F .text	00000064 .hidden __clzsi2
0004e5b4 g     F .text	00000034 altera_avalon_jtag_uart_write
000459bc g     F .text	00000004 __sfp_lock_acquire
00046e64 g     F .text	000000e8 memchr
0004198c g     F .text	00001ffc ___vfprintf_internal_r
00045b20 g     F .text	000002f0 _free_r
0004dfd0 g     F .text	0000017c alt_printf
000464ac g     F .text	00000010 __locale_mb_cur_max
0004edf4 g     F .text	00000194 __call_exitprocs
000405f8 g     F .text	00000008 Si114xPsAlsAuto
00050a54 g     O .bss	00000004 __mlocale_changed
0004ff60 g     O .rwdata	00000004 __malloc_sbrk_base
0004018c g     F .text	0000004c _start
00050a8c g     O .bss	00000004 _alt_tick_rate
00041890 g     F .text	00000064 rand
000405e0 g     F .text	00000008 Si114xPsForce
00047944 g     F .text	00000148 __lshift
00050a88 g     O .bss	00000004 _alt_nticks
0004e160 g     F .text	000000e8 read
0004e4ec g     F .text	0000003c alt_sys_init
00047608 g     F .text	000001fc __multiply
0004f4dc g       *ABS*	00000000 __ram_rwdata_start
0004ef9c g       *ABS*	00000000 __ram_rodata_start
00050ab0 g     O .bss	00000028 __malloc_current_mallinfo
000409b8 g     F .text	00000040 si114x_set_ucoef
00047e00 g     F .text	0000013c __d2b
000408d4 g     F .text	00000044 Uncompress
000405d8 g     F .text	00000008 Si114xNop
0004e528 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
000405f0 g     F .text	00000008 Si114xPsAlsForce
0004ec2c g     F .text	00000050 alt_get_fd
0004e674 g     F .text	00000078 alt_busy_sleep
0004a168 g     F .text	00000054 _close_r
0004ed78 g     F .text	0000007c memcmp
00050bd8 g       *ABS*	00000000 __alt_stack_base
000439ac g     F .text	00000130 __swsetup_r
0004bd20 g     F .text	000008cc .hidden __divdf3
0004587c g     F .text	00000118 __sfp
00048054 g     F .text	00000078 __copybits
0004f978 g     O .rwdata	00000408 __malloc_av_
000459c8 g     F .text	00000004 __sinit_lock_release
0004c830 g     F .text	00000724 .hidden __muldf3
00048928 g     F .text	00000054 __sread
0004eb7c g     F .text	000000b0 alt_find_file
0004e6ec g     F .text	00000078 alt_dev_llist_insert
0004dfc8 g     F .text	00000004 __malloc_lock
0004e26c g     F .text	0000004c sbrk
00045404 g     F .text	00000228 _fflush_r
0004a1bc g     F .text	000000c4 _calloc_r
0004dbf4 g     F .text	00000160 gettimeofday
00050a4c g       *ABS*	00000000 __bss_start
000470a8 g     F .text	00000124 memset
00040c2c g     F .text	00000418 main
00050a7c g     O .bss	00000004 alt_envp
00050a5c g     O .bss	00000004 __malloc_max_total_mem
0004e538 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0004a0f0 g     F .text	0000001c __swbuf
00041878 g     F .text	00000018 srand
00048a5c g     F .text	00000008 __sclose
000664c0 g       *ABS*	00000000 __alt_heap_limit
0004a380 g     F .text	00000014 fclose
00043cdc g     F .text	00001728 _dtoa_r
000466bc g     F .text	000007a8 _malloc_r
0004a848 g     F .text	00000030 __ascii_wctomb
0004ff80 g     O .rwdata	00000004 alt_errno
000462b4 g     F .text	000000b8 _fwalk
000481f8 g     F .text	000000c8 putc
0004152c g     F .text	00000054 .hidden __divsi3
000459fc g     F .text	00000124 _malloc_trim_r
00040ac8 g     F .text	00000030 I2C_read
00048a64 g     F .text	000000a4 strcmp
0004ef9c g       *ABS*	00000000 __flash_rodata_start
0004c5ec g     F .text	00000084 .hidden __nedf2
0004e4cc g     F .text	00000020 alt_irq_init
0004e248 g     F .text	00000024 alt_release_fd
0004f3c0 g     O .rodata	00000100 .hidden __clz_tab
00050a50 g     O .bss	00000004 _PathLocale
000403d8 g     F .text	000000cc Si114xBlockRead
0004a10c g     F .text	0000005c _write_r
000464dc g     F .text	0000001c setlocale
0004ff58 g     O .rwdata	00000004 _impure_ptr
00050a84 g     O .bss	00000004 alt_argc
000464c8 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
00047c84 g     F .text	00000060 __ulp
000459e4 g     F .text	00000018 __fp_unlock_all
000409b0 g     F .text	00000008 si114x_get_calibration
0004ff78 g     O .rwdata	00000008 alt_fs_list
00040b38 g     F .text	000000f4 DECA_si1143_irq_pop
00050a6c g     O .bss	00000008 alt_resettime
000409f8 g     F .text	00000098 I2C_init
00040020 g       *ABS*	00000000 __ram_exceptions_start
000464f8 g     F .text	0000000c localeconv
000401dc g     F .text	0000007c Si114xWriteToRegister
0004e770 g     F .text	00000004 alt_ic_isr_register
0004ff94 g       *ABS*	00000000 _edata
00050bd8 g       *ABS*	00000000 _end
0004018c g       *ABS*	00000000 __ram_exceptions_end
0004e7b4 g     F .text	00000040 alt_ic_irq_disable
00048984 g     F .text	0000007c __swrite
0004ff64 g     O .rwdata	00000004 __malloc_trim_threshold
000464bc g     F .text	0000000c __locale_msgcharset
0004ed40 g     F .text	00000038 exit
00040600 g     F .text	00000054 Si114xParamRead
0004636c g     F .text	000000b8 _fwalk_reent
00047aec g     F .text	00000198 __mdiff
00041580 g     F .text	0000005c .hidden __modsi3
00041388 g     F .text	00000138 TMEM_QuickVerify
000664c0 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000459c0 g     F .text	00000004 __sfp_lock_release
00040000 g       *ABS*	00000000 __alt_mem_onchip_ram
0004ef88 g     F .text	00000014 _exit
0004a8d4 g     F .text	00000060 .hidden __muldi3
00046504 g     F .text	000001b8 __smakebuf_r
000418f4 g     F .text	00000098 strlen
0004e95c g     F .text	000001a0 open
0004c670 g     F .text	000000e0 .hidden __gedf2
0004e14c g     F .text	00000014 alt_putchar
0004ff68 g     O .rwdata	00000004 __wctomb
00048c04 g     F .text	00000018 __sprint_r
0004e764 g     F .text	0000000c alt_icache_flush_all
0004ff90 g     O .rwdata	00000004 alt_priority_mask
0004e774 g     F .text	00000040 alt_ic_irq_enable
00043988 g     F .text	00000024 __vfprintf_internal
0004a878 g     F .text	0000005c _wctomb_r
0004cf54 g     F .text	000008d0 .hidden __subdf3
0004751c g     F .text	000000b0 __lo0bits
0004ff88 g     O .rwdata	00000008 alt_alarm_list
0004a770 g     F .text	000000d8 wcrtomb
0004da84 g     F .text	000000d0 close
0004dde0 g     F .text	00000114 alt_load
00040af8 g     F .text	00000040 I2C_write
0004a518 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
000459c4 g     F .text	00000004 __sinit_lock_acquire
0004729c g     F .text	00000114 __multadd
00047274 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffd9b44>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08406314 	ori	at,at,396
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__reset-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   4008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401600 	call	40160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defffe04 	addi	sp,sp,-8
   40100:	dfc00115 	stw	ra,4(sp)
   40104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40108:	000b313a 	rdctl	r5,ipending
   4010c:	04000174 	movhi	r16,5
   40110:	8402b604 	addi	r16,r16,2776
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40114:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
   40118:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4011c:	1000051e 	bne	r2,zero,40134 <alt_irq_handler+0x38>
   40120:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   40124:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40128:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
   4012c:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   40130:	203ffc26 	beq	r4,zero,40124 <__alt_data_end+0xfffd9c64>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   40134:	180690fa 	slli	r3,r3,3
   40138:	80c7883a 	add	r3,r16,r3
   4013c:	18800017 	ldw	r2,0(r3)
   40140:	19000117 	ldw	r4,4(r3)
   40144:	103ee83a 	callr	r2
   40148:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   4014c:	283ff11e 	bne	r5,zero,40114 <__alt_data_end+0xfffd9c54>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   40150:	dfc00117 	ldw	ra,4(sp)
   40154:	dc000017 	ldw	r16,0(sp)
   40158:	dec00204 	addi	sp,sp,8
   4015c:	f800283a 	ret

00040160 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   40160:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   40164:	000531fa 	rdctl	r2,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   40168:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   4016c:	d0e2d017 	ldw	r3,-29888(gp)
   40170:	18000326 	beq	r3,zero,40180 <alt_instruction_exception_entry+0x20>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   40174:	11001f0c 	andi	r4,r2,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   40178:	2008d0ba 	srli	r4,r4,2
   4017c:	1800683a 	jmp	r3
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40180:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
   40184:	0005883a 	mov	r2,zero
   40188:	f800283a 	ret

Disassembly of section .text:

0004018c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   4018c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40190:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   40194:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40198:	00bffd16 	blt	zero,r2,40190 <__alt_data_end+0xfffd9cd0>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   4019c:	06c001b4 	movhi	sp,6
    ori sp, sp, %lo(__alt_stack_pointer)
   401a0:	ded93014 	ori	sp,sp,25792
    movhi gp, %hi(_gp)
   401a4:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   401a8:	d69fd514 	ori	gp,gp,32596
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   401ac:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   401b0:	10829314 	ori	r2,r2,2636

    movhi r3, %hi(__bss_end)
   401b4:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   401b8:	18c2f614 	ori	r3,r3,3032

    beq r2, r3, 1f
   401bc:	10c00326 	beq	r2,r3,401cc <_start+0x40>

0:
    stw zero, (r2)
   401c0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   401c4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   401c8:	10fffd36 	bltu	r2,r3,401c0 <__alt_data_end+0xfffd9d00>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   401cc:	004dde00 	call	4dde0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   401d0:	004df780 	call	4df78 <alt_main>

000401d4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   401d4:	003fff06 	br	401d4 <__alt_data_end+0xfffd9d14>

000401d8 <delay_10ms>:
#include "i2c_opencores.h"
#include "si114x_functions.h"
#include <stdio.h>


void delay_10ms(void){
   401d8:	f800283a 	ret

000401dc <Si114xWriteToRegister>:
//alt_u32 I2C_read(alt_u32 base,alt_u32 last)


// Byte Write Access to Si114x I2C Registers

s16 Si114xWriteToRegister (HANDLE si114x_handle, u8 address, u8 value){
   401dc:	defffd04 	addi	sp,sp,-12
	DevAdd = Si114x_7BitSLAVEADDRESS;
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   401e0:	01000234 	movhi	r4,8
//alt_u32 I2C_read(alt_u32 base,alt_u32 last)


// Byte Write Access to Si114x I2C Registers

s16 Si114xWriteToRegister (HANDLE si114x_handle, u8 address, u8 value){
   401e4:	dc400115 	stw	r17,4(sp)
   401e8:	dc000015 	stw	r16,0(sp)
   401ec:	3023883a 	mov	r17,r6
   401f0:	2821883a 	mov	r16,r5
	DevAdd = Si114x_7BitSLAVEADDRESS;
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   401f4:	21040004 	addi	r4,r4,4096
   401f8:	01401684 	movi	r5,90
   401fc:	000d883a 	mov	r6,zero
//alt_u32 I2C_read(alt_u32 base,alt_u32 last)


// Byte Write Access to Si114x I2C Registers

s16 Si114xWriteToRegister (HANDLE si114x_handle, u8 address, u8 value){
   40200:	dfc00215 	stw	ra,8(sp)
	DevAdd = Si114x_7BitSLAVEADDRESS;
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   40204:	0040a900 	call	40a90 <I2C_start>
   40208:	1000061e 	bne	r2,zero,40224 <Si114xWriteToRegister+0x48>
		StepsComplete++;
	}

	RequiredSteps++;
	if( StepsComplete == RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) address, (alt_u32) FALSE) == I2C_ACK){
   4020c:	01000234 	movhi	r4,8
   40210:	21040004 	addi	r4,r4,4096
   40214:	81403fcc 	andi	r5,r16,255
   40218:	000d883a 	mov	r6,zero
   4021c:	0040af80 	call	40af8 <I2C_write>
   40220:	10000626 	beq	r2,zero,4023c <Si114xWriteToRegister+0x60>
//alt_u32 I2C_read(alt_u32 base,alt_u32 last)


// Byte Write Access to Si114x I2C Registers

s16 Si114xWriteToRegister (HANDLE si114x_handle, u8 address, u8 value){
   40224:	0005883a 	mov	r2,zero
		}
	}
	RequiredSteps++;
	//printf("Write Required Steps: %i, Steps Completed: %i\n", RequiredSteps, StepsComplete);
	return( StepsComplete==RequiredSteps );
}
   40228:	dfc00217 	ldw	ra,8(sp)
   4022c:	dc400117 	ldw	r17,4(sp)
   40230:	dc000017 	ldw	r16,0(sp)
   40234:	dec00304 	addi	sp,sp,12
   40238:	f800283a 	ret
		}
	}

	RequiredSteps++;
	if( StepsComplete==RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) value, (alt_u32) TRUE) == I2C_ACK){
   4023c:	01000234 	movhi	r4,8
   40240:	21040004 	addi	r4,r4,4096
   40244:	89403fcc 	andi	r5,r17,255
   40248:	01803fc4 	movi	r6,255
   4024c:	0040af80 	call	40af8 <I2C_write>
   40250:	1005003a 	cmpeq	r2,r2,zero
   40254:	003ff406 	br	40228 <__alt_data_end+0xfffd9d68>

00040258 <Si114xReadFromRegister>:
	return( StepsComplete==RequiredSteps );
}


// Byte Read Access to Si114x I2C Registers
s16 Si114xReadFromRegister(HANDLE si114x_handle, u8 address) {
   40258:	defffe04 	addi	sp,sp,-8
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );


	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   4025c:	01000234 	movhi	r4,8
	return( StepsComplete==RequiredSteps );
}


// Byte Read Access to Si114x I2C Registers
s16 Si114xReadFromRegister(HANDLE si114x_handle, u8 address) {
   40260:	dc000015 	stw	r16,0(sp)
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );


	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   40264:	21040004 	addi	r4,r4,4096
	return( StepsComplete==RequiredSteps );
}


// Byte Read Access to Si114x I2C Registers
s16 Si114xReadFromRegister(HANDLE si114x_handle, u8 address) {
   40268:	2821883a 	mov	r16,r5
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );


	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   4026c:	000d883a 	mov	r6,zero
   40270:	01401684 	movi	r5,90
	return( StepsComplete==RequiredSteps );
}


// Byte Read Access to Si114x I2C Registers
s16 Si114xReadFromRegister(HANDLE si114x_handle, u8 address) {
   40274:	dfc00115 	stw	ra,4(sp)
	//printf("AvalonBase: %X \n DeviceBase: %X\n", AvalonBase, DevAdd );


	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   40278:	0040a900 	call	40a90 <I2C_start>
   4027c:	1000061e 	bne	r2,zero,40298 <Si114xReadFromRegister+0x40>
		StepsComplete++;
	}

	RequiredSteps++;
	if( StepsComplete == RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) address, (alt_u32) FALSE) == I2C_ACK){
   40280:	01000234 	movhi	r4,8
   40284:	21040004 	addi	r4,r4,4096
   40288:	81403fcc 	andi	r5,r16,255
   4028c:	000d883a 	mov	r6,zero
   40290:	0040af80 	call	40af8 <I2C_write>
   40294:	10000526 	beq	r2,zero,402ac <Si114xReadFromRegister+0x54>

	if( StepsComplete == RequiredSteps ){
		return ValueRead;
	}
	else{
		return -1;
   40298:	00bfffc4 	movi	r2,-1
	}

}
   4029c:	dfc00117 	ldw	ra,4(sp)
   402a0:	dc000017 	ldw	r16,0(sp)
   402a4:	dec00204 	addi	sp,sp,8
   402a8:	f800283a 	ret
			StepsComplete++;
		}
	}
	RequiredSteps++;
	if( StepsComplete == RequiredSteps ){
		if(I2C_start( AvalonBase, DevAdd, I2C_READ ) == I2C_ACK){
   402ac:	01000234 	movhi	r4,8
   402b0:	21040004 	addi	r4,r4,4096
   402b4:	01401684 	movi	r5,90
   402b8:	01800044 	movi	r6,1
   402bc:	0040a900 	call	40a90 <I2C_start>
   402c0:	103ff51e 	bne	r2,zero,40298 <__alt_data_end+0xfffd9dd8>
			StepsComplete++;
		}
	}
	RequiredSteps++;
	if( StepsComplete == RequiredSteps ){
		ValueRead = I2C_read( AvalonBase, (alt_u32) TRUE);
   402c4:	01000234 	movhi	r4,8
   402c8:	21040004 	addi	r4,r4,4096
   402cc:	01403fc4 	movi	r5,255
   402d0:	0040ac80 	call	40ac8 <I2C_read>
   402d4:	003ff106 	br	4029c <__alt_data_end+0xfffd9ddc>

000402d8 <Si114xBlockWrite>:
	}

}

// Block Write Access to Si114x I2C Registers
s16 Si114xBlockWrite(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   402d8:	defff904 	addi	sp,sp,-28
	AvalonBase = I2C_BASEADDRESS;
	DevAdd = Si114x_7BitSLAVEADDRESS;

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   402dc:	01000234 	movhi	r4,8
	}

}

// Block Write Access to Si114x I2C Registers
s16 Si114xBlockWrite(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   402e0:	dc800215 	stw	r18,8(sp)
   402e4:	dc400115 	stw	r17,4(sp)
   402e8:	2825883a 	mov	r18,r5
   402ec:	3023883a 	mov	r17,r6
	AvalonBase = I2C_BASEADDRESS;
	DevAdd = Si114x_7BitSLAVEADDRESS;

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   402f0:	21040004 	addi	r4,r4,4096
   402f4:	01401684 	movi	r5,90
   402f8:	000d883a 	mov	r6,zero
	}

}

// Block Write Access to Si114x I2C Registers
s16 Si114xBlockWrite(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   402fc:	dc000015 	stw	r16,0(sp)
   40300:	dfc00615 	stw	ra,24(sp)
   40304:	dd400515 	stw	r21,20(sp)
   40308:	dd000415 	stw	r20,16(sp)
   4030c:	dcc00315 	stw	r19,12(sp)
   40310:	3821883a 	mov	r16,r7
	AvalonBase = I2C_BASEADDRESS;
	DevAdd = Si114x_7BitSLAVEADDRESS;

	StepsComplete = 0;
	RequiredSteps = 0;
	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   40314:	0040a900 	call	40a90 <I2C_start>
   40318:	10001e26 	beq	r2,zero,40394 <Si114xBlockWrite+0xbc>
   4031c:	0025883a 	mov	r18,zero
   40320:	04c00084 	movi	r19,2
   40324:	054000c4 	movi	r21,3
		if( I2C_write( AvalonBase, (alt_u8) address, (alt_u32) FALSE) == I2C_ACK){
			StepsComplete++;
		}
	}

	BytesRemaining = (int)length;
   40328:	8c403fcc 	andi	r17,r17,255
   4032c:	9c27c83a 	sub	r19,r19,r16
	while ( (++RequiredSteps == StepsComplete) && (BytesRemaining > 1) ){
   40330:	05000044 	movi	r20,1
   40334:	ac2bc83a 	sub	r21,r21,r16
   40338:	00000706 	br	40358 <Si114xBlockWrite+0x80>
   4033c:	a4401e0e 	bge	r20,r17,403b8 <Si114xBlockWrite+0xe0>
		if( I2C_write( AvalonBase, (alt_u8) (*values++), (alt_u32) FALSE) == I2C_ACK){
   40340:	81400003 	ldbu	r5,0(r16)
   40344:	0040af80 	call	40af8 <I2C_write>
   40348:	1000021e 	bne	r2,zero,40354 <Si114xBlockWrite+0x7c>
   4034c:	ac25883a 	add	r18,r21,r16
			StepsComplete++;
			BytesRemaining--;
   40350:	8c7fffc4 	addi	r17,r17,-1
   40354:	84000044 	addi	r16,r16,1
		}
	}

	BytesRemaining = (int)length;
	while ( (++RequiredSteps == StepsComplete) && (BytesRemaining > 1) ){
		if( I2C_write( AvalonBase, (alt_u8) (*values++), (alt_u32) FALSE) == I2C_ACK){
   40358:	01000234 	movhi	r4,8
   4035c:	9c07883a 	add	r3,r19,r16
   40360:	21040004 	addi	r4,r4,4096
   40364:	000d883a 	mov	r6,zero
			StepsComplete++;
		}
	}

	BytesRemaining = (int)length;
	while ( (++RequiredSteps == StepsComplete) && (BytesRemaining > 1) ){
   40368:	90fff426 	beq	r18,r3,4033c <__alt_data_end+0xfffd9e7c>
			BytesRemaining--;
		}
	}

	return( (s16)((int)(BytesRemaining) ));
}
   4036c:	8805883a 	mov	r2,r17
   40370:	dfc00617 	ldw	ra,24(sp)
   40374:	dd400517 	ldw	r21,20(sp)
   40378:	dd000417 	ldw	r20,16(sp)
   4037c:	dcc00317 	ldw	r19,12(sp)
   40380:	dc800217 	ldw	r18,8(sp)
   40384:	dc400117 	ldw	r17,4(sp)
   40388:	dc000017 	ldw	r16,0(sp)
   4038c:	dec00704 	addi	sp,sp,28
   40390:	f800283a 	ret
		StepsComplete++;
	}

	RequiredSteps++;
	if( StepsComplete==RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) address, (alt_u32) FALSE) == I2C_ACK){
   40394:	01000234 	movhi	r4,8
   40398:	91403fcc 	andi	r5,r18,255
   4039c:	21040004 	addi	r4,r4,4096
   403a0:	000d883a 	mov	r6,zero
   403a4:	0040af80 	call	40af8 <I2C_write>
			StepsComplete++;
   403a8:	1024c03a 	cmpne	r18,r2,zero
   403ac:	00800084 	movi	r2,2
   403b0:	14a5c83a 	sub	r18,r2,r18
   403b4:	003fda06 	br	40320 <__alt_data_end+0xfffd9e60>

	//RequiredSteps++;
	//printf("Block Write Required Steps: %i, Steps Completed: %i\n", RequiredSteps, StepsComplete);

	if( StepsComplete==RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) *values, (alt_u32) TRUE) == I2C_ACK){
   403b8:	81400003 	ldbu	r5,0(r16)
   403bc:	01000234 	movhi	r4,8
   403c0:	21040004 	addi	r4,r4,4096
   403c4:	01803fc4 	movi	r6,255
   403c8:	0040af80 	call	40af8 <I2C_write>
   403cc:	103fe71e 	bne	r2,zero,4036c <__alt_data_end+0xfffd9eac>
			BytesRemaining--;
   403d0:	8c7fffc4 	addi	r17,r17,-1
   403d4:	003fe506 	br	4036c <__alt_data_end+0xfffd9eac>

000403d8 <Si114xBlockRead>:
	return( (s16)((int)(BytesRemaining) ));
}


// Block Read Access to Si114x I2C Registers
s16 Si114xBlockRead(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   403d8:	defffb04 	addi	sp,sp,-20

	StepsComplete = 0;
	RequiredSteps = 0;
	BytesRemaining = (int)length;

	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   403dc:	01000234 	movhi	r4,8
	return( (s16)((int)(BytesRemaining) ));
}


// Block Read Access to Si114x I2C Registers
s16 Si114xBlockRead(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   403e0:	dcc00315 	stw	r19,12(sp)
   403e4:	dc800215 	stw	r18,8(sp)
   403e8:	2827883a 	mov	r19,r5
   403ec:	3025883a 	mov	r18,r6

	StepsComplete = 0;
	RequiredSteps = 0;
	BytesRemaining = (int)length;

	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   403f0:	21040004 	addi	r4,r4,4096
   403f4:	000d883a 	mov	r6,zero
   403f8:	01401684 	movi	r5,90
	return( (s16)((int)(BytesRemaining) ));
}


// Block Read Access to Si114x I2C Registers
s16 Si114xBlockRead(HANDLE si114x_handle, u8 address, u8 length, u8 *values) {
   403fc:	dc400115 	stw	r17,4(sp)
   40400:	dc000015 	stw	r16,0(sp)
   40404:	dfc00415 	stw	ra,16(sp)
   40408:	3823883a 	mov	r17,r7
	AvalonBase = I2C_BASEADDRESS;
	DevAdd = Si114x_7BitSLAVEADDRESS;

	StepsComplete = 0;
	RequiredSteps = 0;
	BytesRemaining = (int)length;
   4040c:	94003fcc 	andi	r16,r18,255

	if(I2C_start( AvalonBase, DevAdd, I2C_WRITE ) == I2C_ACK){
   40410:	0040a900 	call	40a90 <I2C_start>
   40414:	1000181e 	bne	r2,zero,40478 <Si114xBlockRead+0xa0>
		StepsComplete++;
	}

	RequiredSteps++;
	if( StepsComplete==RequiredSteps ){
		if( I2C_write( AvalonBase, (alt_u8) address, (alt_u32) FALSE) == I2C_ACK){
   40418:	01000234 	movhi	r4,8
   4041c:	21040004 	addi	r4,r4,4096
   40420:	99403fcc 	andi	r5,r19,255
   40424:	000d883a 	mov	r6,zero
   40428:	0040af80 	call	40af8 <I2C_write>
   4042c:	1000121e 	bne	r2,zero,40478 <Si114xBlockRead+0xa0>
			StepsComplete++;
		}
	}
	RequiredSteps++;
	if( StepsComplete==RequiredSteps ){
		if(I2C_start( AvalonBase, DevAdd, I2C_READ ) == I2C_ACK){
   40430:	01000234 	movhi	r4,8
   40434:	21040004 	addi	r4,r4,4096
   40438:	01401684 	movi	r5,90
   4043c:	01800044 	movi	r6,1
   40440:	0040a900 	call	40a90 <I2C_start>
   40444:	10000c1e 	bne	r2,zero,40478 <Si114xBlockRead+0xa0>

	RequiredSteps++;
	//printf("BlockRead Required Steps: %i, Steps Completed: %i\n", RequiredSteps, StepsComplete);

	if( StepsComplete==RequiredSteps ){
		while ((BytesRemaining-- > 0) ){
   40448:	80bfffc4 	addi	r2,r16,-1
   4044c:	80001326 	beq	r16,zero,4049c <Si114xBlockRead+0xc4>
   40450:	1021883a 	mov	r16,r2
   40454:	04ffffc4 	movi	r19,-1
			*values++ = (u8)I2C_read( AvalonBase, (alt_u32) (BytesRemaining == 0) );
   40458:	01000234 	movhi	r4,8
   4045c:	800b003a 	cmpeq	r5,r16,zero
   40460:	21040004 	addi	r4,r4,4096
   40464:	0040ac80 	call	40ac8 <I2C_read>
   40468:	88800005 	stb	r2,0(r17)

	RequiredSteps++;
	//printf("BlockRead Required Steps: %i, Steps Completed: %i\n", RequiredSteps, StepsComplete);

	if( StepsComplete==RequiredSteps ){
		while ((BytesRemaining-- > 0) ){
   4046c:	843fffc4 	addi	r16,r16,-1
   40470:	8c400044 	addi	r17,r17,1
   40474:	84fff81e 	bne	r16,r19,40458 <__alt_data_end+0xfffd9f98>
			*values++ = (u8)I2C_read( AvalonBase, (alt_u32) (BytesRemaining == 0) );
		}
	}

	return( (s16)((int)(length - BytesRemaining) ));
   40478:	90803fcc 	andi	r2,r18,255
   4047c:	1405c83a 	sub	r2,r2,r16

}
   40480:	dfc00417 	ldw	ra,16(sp)
   40484:	dcc00317 	ldw	r19,12(sp)
   40488:	dc800217 	ldw	r18,8(sp)
   4048c:	dc400117 	ldw	r17,4(sp)
   40490:	dc000017 	ldw	r16,0(sp)
   40494:	dec00504 	addi	sp,sp,20
   40498:	f800283a 	ret

	RequiredSteps++;
	//printf("BlockRead Required Steps: %i, Steps Completed: %i\n", RequiredSteps, StepsComplete);

	if( StepsComplete==RequiredSteps ){
		while ((BytesRemaining-- > 0) ){
   4049c:	1021883a 	mov	r16,r2
   404a0:	003ff506 	br	40478 <__alt_data_end+0xfffd9fb8>

000404a4 <_sendCmd>:
    return retval;
}


static s16 _sendCmd(HANDLE si114x_handle, u8 command)
{
   404a4:	defffb04 	addi	sp,sp,-20
   404a8:	dcc00315 	stw	r19,12(sp)
   404ac:	2827883a 	mov	r19,r5

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
   404b0:	01400804 	movi	r5,32
    return retval;
}


static s16 _sendCmd(HANDLE si114x_handle, u8 command)
{
   404b4:	dc800215 	stw	r18,8(sp)
   404b8:	dc000015 	stw	r16,0(sp)
   404bc:	dfc00415 	stw	ra,16(sp)
   404c0:	dc400115 	stw	r17,4(sp)
   404c4:	2021883a 	mov	r16,r4

    s16  response; 
    s16  retval; 

    // Get the response register contents
    if ((response=Si114xReadFromRegister(si114x_handle, REG_RESPONSE))<0)
   404c8:	00402580 	call	40258 <Si114xReadFromRegister>
   404cc:	1025883a 	mov	r18,r2
   404d0:	90bfffcc 	andi	r2,r18,65535
   404d4:	10a0001c 	xori	r2,r2,32768
   404d8:	10a00004 	addi	r2,r2,-32768
   404dc:	10001916 	blt	r2,zero,40544 <_sendCmd+0xa0>
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
   404e0:	04400044 	movi	r17,1
    // Double-check the response register is consistent
    while(1)
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 
   404e4:	9cc03fcc 	andi	r19,r19,255
   404e8:	00000106 	br	404f0 <_sendCmd+0x4c>
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
        if (retval <  0) return retval;
   404ec:	18001616 	blt	r3,zero,40548 <_sendCmd+0xa4>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
   404f0:	8009883a 	mov	r4,r16
   404f4:	01400c04 	movi	r5,48
   404f8:	00402580 	call	40258 <Si114xReadFromRegister>
        if (retval == 1) break;
   404fc:	10ffffcc 	andi	r3,r2,65535
   40500:	18e0001c 	xori	r3,r3,32768
   40504:	18e00004 	addi	r3,r3,-32768
   40508:	1c7ff81e 	bne	r3,r17,404ec <__alt_data_end+0xfffda02c>
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
        if(retval==response) break;
   4050c:	94bfffcc 	andi	r18,r18,65535
   40510:	94a0001c 	xori	r18,r18,32768
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   40514:	8009883a 	mov	r4,r16
   40518:	01400804 	movi	r5,32
        if(retval==response) break;
   4051c:	94a00004 	addi	r18,r18,-32768
    // Double-check the response register is consistent
    while(1)
    {
        if((retval=_waitUntilSleep(si114x_handle)) != 0) return retval;

        if(command==0) break; // Skip if the command is NOP 
   40520:	98002426 	beq	r19,zero,405b4 <_sendCmd+0x110>

        retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   40524:	00402580 	call	40258 <Si114xReadFromRegister>
        if(retval==response) break;
   40528:	10ffffcc 	andi	r3,r2,65535
   4052c:	18e0001c 	xori	r3,r3,32768
   40530:	18e00004 	addi	r3,r3,-32768
   40534:	1c800b26 	beq	r3,r18,40564 <_sendCmd+0xc0>
        else if(retval<0) return retval;
   40538:	18000316 	blt	r3,zero,40548 <_sendCmd+0xa4>
   4053c:	1025883a 	mov	r18,r2
   40540:	003feb06 	br	404f0 <__alt_data_end+0xfffda030>
   40544:	9005883a 	mov	r2,r18
        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
        if (retval != response) break;
        else if(retval<0) return retval;
    }
    return 0;
}
   40548:	dfc00417 	ldw	ra,16(sp)
   4054c:	dcc00317 	ldw	r19,12(sp)
   40550:	dc800217 	ldw	r18,8(sp)
   40554:	dc400117 	ldw	r17,4(sp)
   40558:	dc000017 	ldw	r16,0(sp)
   4055c:	dec00504 	addi	sp,sp,20
   40560:	f800283a 	ret
        else if(retval<0) return retval;
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
   40564:	8009883a 	mov	r4,r16
   40568:	01400604 	movi	r5,24
   4056c:	980d883a 	mov	r6,r19
   40570:	00401dc0 	call	401dc <Si114xWriteToRegister>
   40574:	1007883a 	mov	r3,r2
   40578:	18bfffcc 	andi	r2,r3,65535
   4057c:	10a0001c 	xori	r2,r2,32768
   40580:	10a00004 	addi	r2,r2,-32768
   40584:	1000091e 	bne	r2,zero,405ac <_sendCmd+0x108>
    while(1)
    {

        if(command==0) break; // Skip if the command is NOP

        retval= Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   40588:	8009883a 	mov	r4,r16
   4058c:	01400804 	movi	r5,32
   40590:	00402580 	call	40258 <Si114xReadFromRegister>
        if (retval != response) break;
   40594:	10bfffcc 	andi	r2,r2,65535
   40598:	10a0001c 	xori	r2,r2,32768
   4059c:	10a00004 	addi	r2,r2,-32768
   405a0:	14bff926 	beq	r2,r18,40588 <__alt_data_end+0xfffda0c8>
        else if(retval<0) return retval;
    }
    return 0;
   405a4:	0005883a 	mov	r2,zero
   405a8:	003fe706 	br	40548 <__alt_data_end+0xfffda088>
        else if(retval<0) return retval;
        else response = retval;
    }

    // Send the Command
    if ((retval=Si114xWriteToRegister(si114x_handle, REG_COMMAND, command)) !=0) 
   405ac:	1805883a 	mov	r2,r3
   405b0:	003fe506 	br	40548 <__alt_data_end+0xfffda088>
   405b4:	8009883a 	mov	r4,r16
   405b8:	01400604 	movi	r5,24
   405bc:	000d883a 	mov	r6,zero
   405c0:	00401dc0 	call	401dc <Si114xWriteToRegister>
   405c4:	10ffffcc 	andi	r3,r2,65535
   405c8:	18e0001c 	xori	r3,r3,32768
   405cc:	18e00004 	addi	r3,r3,-32768
   405d0:	183ff426 	beq	r3,zero,405a4 <__alt_data_end+0xfffda0e4>
   405d4:	003fdc06 	br	40548 <__alt_data_end+0xfffda088>

000405d8 <Si114xNop>:
        else if(retval<0) return retval;
    }
    return 0;
}

s16 Si114xNop       (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x00);}
   405d8:	000b883a 	mov	r5,zero
   405dc:	00404a41 	jmpi	404a4 <_sendCmd>

000405e0 <Si114xPsForce>:

s16 Si114xPsForce   (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x05);}
   405e0:	01400144 	movi	r5,5
   405e4:	00404a41 	jmpi	404a4 <_sendCmd>

000405e8 <Si114xAlsForce>:

s16 Si114xAlsForce  (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x06);}
   405e8:	01400184 	movi	r5,6
   405ec:	00404a41 	jmpi	404a4 <_sendCmd>

000405f0 <Si114xPsAlsForce>:

s16 Si114xPsAlsForce(HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x07);}
   405f0:	014001c4 	movi	r5,7
   405f4:	00404a41 	jmpi	404a4 <_sendCmd>

000405f8 <Si114xPsAlsAuto>:

s16 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}
   405f8:	014003c4 	movi	r5,15
   405fc:	00404a41 	jmpi	404a4 <_sendCmd>

00040600 <Si114xParamRead>:

s16 Si114xParamRead(HANDLE si114x_handle, u8 address)
{
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
   40600:	294007cc 	andi	r5,r5,31

s16 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}


s16 Si114xParamRead(HANDLE si114x_handle, u8 address)
{
   40604:	defffe04 	addi	sp,sp,-8
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
   40608:	29402014 	ori	r5,r5,128

s16 Si114xPsAlsAuto (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x0F);}


s16 Si114xParamRead(HANDLE si114x_handle, u8 address)
{
   4060c:	dc000015 	stw	r16,0(sp)
   40610:	dfc00115 	stw	ra,4(sp)
   40614:	2021883a 	mov	r16,r4
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
   40618:	00404a40 	call	404a4 <_sendCmd>
   4061c:	10ffffcc 	andi	r3,r2,65535
   40620:	18e0001c 	xori	r3,r3,32768
   40624:	18e00004 	addi	r3,r3,-32768
   40628:	18000426 	beq	r3,zero,4063c <Si114xParamRead+0x3c>
    return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
}
   4062c:	dfc00117 	ldw	ra,4(sp)
   40630:	dc000017 	ldw	r16,0(sp)
   40634:	dec00204 	addi	sp,sp,8
   40638:	f800283a 	ret
{
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
    return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
   4063c:	8009883a 	mov	r4,r16
   40640:	01400b84 	movi	r5,46
}
   40644:	dfc00117 	ldw	ra,4(sp)
   40648:	dc000017 	ldw	r16,0(sp)
   4064c:	dec00204 	addi	sp,sp,8
{
    // returns Parameter[address]
    s16 retval;
    u8 cmd = 0x80 + (address & 0x1F);
    if((retval=_sendCmd(si114x_handle, cmd ))!=0) return retval;
    return Si114xReadFromRegister(si114x_handle, REG_PARAM_RD);
   40650:	00402581 	jmpi	40258 <Si114xReadFromRegister>

00040654 <Si114xParamSet>:

//-----------------------------------------------------------------------------
// Si114xParamSet writes to the PARAM_WR and CMD register 
//
s16 Si114xParamSet(HANDLE si114x_handle, u8 address, u8 value)
{
   40654:	defffa04 	addi	sp,sp,-24
   40658:	dcc00415 	stw	r19,16(sp)
   4065c:	dc800315 	stw	r18,12(sp)
   40660:	dc400215 	stw	r17,8(sp)
   40664:	dc000115 	stw	r16,4(sp)
   40668:	dfc00515 	stw	ra,20(sp)
   4066c:	2021883a 	mov	r16,r4
   40670:	2825883a 	mov	r18,r5
   40674:	3027883a 	mov	r19,r6
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
        if (retval == 1) break;
   40678:	04400044 	movi	r17,1
   4067c:	00000106 	br	40684 <Si114xParamSet+0x30>
        if (retval <  0) return retval;
   40680:	18002416 	blt	r3,zero,40714 <Si114xParamSet+0xc0>
    s16 retval;
    // This loops until the Si114x is known to be in its sleep state
    // or if an i2c error occurs
    while (1)
    {
        retval = Si114xReadFromRegister(si114x_handle, REG_CHIP_STAT);
   40684:	8009883a 	mov	r4,r16
   40688:	01400c04 	movi	r5,48
   4068c:	00402580 	call	40258 <Si114xReadFromRegister>
        if (retval == 1) break;
   40690:	10ffffcc 	andi	r3,r2,65535
   40694:	18e0001c 	xori	r3,r3,32768
   40698:	18e00004 	addi	r3,r3,-32768
   4069c:	1c7ff81e 	bne	r3,r17,40680 <__alt_data_end+0xfffda1c0>
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   406a0:	8009883a 	mov	r4,r16
   406a4:	01400804 	movi	r5,32
   406a8:	00402580 	call	40258 <Si114xReadFromRegister>

    buffer[0]= value;
    buffer[1]= 0xA0 + (address & 0x1F);
   406ac:	948007cc 	andi	r18,r18,31
   406b0:	94bfe804 	addi	r18,r18,-96

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
   406b4:	8009883a 	mov	r4,r16
   406b8:	014005c4 	movi	r5,23
   406bc:	01800084 	movi	r6,2
   406c0:	d80f883a 	mov	r7,sp
    u8      buffer[2];
    s16     response;

    if((retval = _waitUntilSleep(si114x_handle))!=0) return retval;

    response = Si114xReadFromRegister(si114x_handle, REG_RESPONSE);
   406c4:	1023883a 	mov	r17,r2

    buffer[0]= value;
   406c8:	dcc00005 	stb	r19,0(sp)
    buffer[1]= 0xA0 + (address & 0x1F);
   406cc:	dc800045 	stb	r18,1(sp)

    retval=Si114xBlockWrite(si114x_handle, REG_PARAM_WR, 2, buffer);
   406d0:	00402d80 	call	402d8 <Si114xBlockWrite>
    if (retval != 0) return retval;
   406d4:	10ffffcc 	andi	r3,r2,65535
   406d8:	18e0001c 	xori	r3,r3,32768
   406dc:	18e00004 	addi	r3,r3,-32768
   406e0:	18000c1e 	bne	r3,zero,40714 <Si114xParamSet+0xc0>
   406e4:	8c7fffcc 	andi	r17,r17,65535
   406e8:	8c60001c 	xori	r17,r17,32768
   406ec:	8c600004 	addi	r17,r17,-32768

    // Wait for command to finish
    while(( retval=Si114xReadFromRegister(si114x_handle, REG_RESPONSE)) == response ) ; 
   406f0:	8009883a 	mov	r4,r16
   406f4:	01400804 	movi	r5,32
   406f8:	00402580 	call	40258 <Si114xReadFromRegister>
   406fc:	10ffffcc 	andi	r3,r2,65535
   40700:	18e0001c 	xori	r3,r3,32768
   40704:	18e00004 	addi	r3,r3,-32768
   40708:	1c7ff926 	beq	r3,r17,406f0 <__alt_data_end+0xfffda230>
   4070c:	00c0010e 	bge	zero,r3,40714 <Si114xParamSet+0xc0>
   40710:	0005883a 	mov	r2,zero

    if(retval < 0)
        return retval;
    else
        return 0;
}
   40714:	dfc00517 	ldw	ra,20(sp)
   40718:	dcc00417 	ldw	r19,16(sp)
   4071c:	dc800317 	ldw	r18,12(sp)
   40720:	dc400217 	ldw	r17,8(sp)
   40724:	dc000117 	ldw	r16,4(sp)
   40728:	dec00604 	addi	sp,sp,24
   4072c:	f800283a 	ret

00040730 <Si114xPauseAll>:
{
    return _sendCmd(si114x_handle,0x0B);
}

s16 Si114xPauseAll(HANDLE si114x_handle)
{
   40730:	defffd04 	addi	sp,sp,-12
   40734:	dc400115 	stw	r17,4(sp)
   40738:	dc000015 	stw	r16,0(sp)
   4073c:	dfc00215 	stw	ra,8(sp)
   40740:	2021883a 	mov	r16,r4
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
   40744:	04400044 	movi	r17,1
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
   40748:	8009883a 	mov	r4,r16
   4074c:	01400804 	movi	r5,32
   40750:	00402580 	call	40258 <Si114xReadFromRegister>
   40754:	10bfffcc 	andi	r2,r2,65535
   40758:	10a0001c 	xori	r2,r2,32768
   4075c:	10a00004 	addi	r2,r2,-32768

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
   40760:	8009883a 	mov	r4,r16
    while (1) 
    {
        // Keep sending nops until the response is zero
        while (1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==0)
   40764:	1000161e 	bne	r2,zero,407c0 <Si114xPauseAll+0x90>

//-----------------------------------------------------------------------------
// use this to pause measurements
static s16 _PsAlsPause (HANDLE si114x_handle) 
{
    return _sendCmd(si114x_handle,0x0B);
   40768:	014002c4 	movi	r5,11
   4076c:	00404a40 	call	404a4 <_sendCmd>
        _PsAlsPause(si114x_handle);

        // Wait for response
        while(1) 
        {
            if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))!=0)
   40770:	8009883a 	mov	r4,r16
   40774:	01400804 	movi	r5,32
   40778:	00402580 	call	40258 <Si114xReadFromRegister>
   4077c:	10bfffcc 	andi	r2,r2,65535
   40780:	10a0001c 	xori	r2,r2,32768
   40784:	10a00004 	addi	r2,r2,-32768
   40788:	103ff926 	beq	r2,zero,40770 <__alt_data_end+0xfffda2b0>
                break;
        }

        // When the PsAlsPause() response is good, we expect it to be a '1'.
        if ((Si114xReadFromRegister(si114x_handle, REG_RESPONSE))==1)
   4078c:	8009883a 	mov	r4,r16
   40790:	01400804 	movi	r5,32
   40794:	00402580 	call	40258 <Si114xReadFromRegister>
   40798:	10bfffcc 	andi	r2,r2,65535
   4079c:	10a0001c 	xori	r2,r2,32768
   407a0:	10a00004 	addi	r2,r2,-32768
   407a4:	147fe81e 	bne	r2,r17,40748 <__alt_data_end+0xfffda288>
            break;  // otherwise, start over.
    }
    return 1;
}
   407a8:	00800044 	movi	r2,1
   407ac:	dfc00217 	ldw	ra,8(sp)
   407b0:	dc400117 	ldw	r17,4(sp)
   407b4:	dc000017 	ldw	r16,0(sp)
   407b8:	dec00304 	addi	sp,sp,12
   407bc:	f800283a 	ret
        else if(retval<0) return retval;
    }
    return 0;
}

s16 Si114xNop       (HANDLE si114x_handle) {return _sendCmd(si114x_handle,0x00);}
   407c0:	000b883a 	mov	r5,zero
   407c4:	00404a40 	call	404a4 <_sendCmd>
   407c8:	003fdf06 	br	40748 <__alt_data_end+0xfffda288>

000407cc <Si114xReset>:
    return 0;
}


s16 Si114xReset(HANDLE si114x_handle)
{
   407cc:	defffc04 	addi	sp,sp,-16
   407d0:	dfc00315 	stw	ra,12(sp)
   407d4:	dc800215 	stw	r18,8(sp)
   407d8:	dc400115 	stw	r17,4(sp)
   407dc:	dc000015 	stw	r16,0(sp)
   407e0:	2023883a 	mov	r17,r4
    //
    delay_10ms();
    delay_10ms();
    delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   407e4:	04800204 	movi	r18,8
    // Do not access the Si114x earlier than 25 ms from power-up. 
    // Uncomment the following lines if Si114xReset() is the first
    // instruction encountered, and if your system MCU boots up too 
    // quickly. 
    //
    delay_10ms();
   407e8:	00401d80 	call	401d8 <delay_10ms>
    delay_10ms();
   407ec:	00401d80 	call	401d8 <delay_10ms>
    delay_10ms();
   407f0:	00401d80 	call	401d8 <delay_10ms>

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   407f4:	900b883a 	mov	r5,r18
   407f8:	000d883a 	mov	r6,zero
   407fc:	8809883a 	mov	r4,r17
   40800:	00401dc0 	call	401dc <Si114xWriteToRegister>

    retval+=Si114xPauseAll(si114x_handle);
   40804:	8809883a 	mov	r4,r17
    //
    delay_10ms();
    delay_10ms();
    delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   40808:	1021883a 	mov	r16,r2

    retval+=Si114xPauseAll(si114x_handle);
   4080c:	00407300 	call	40730 <Si114xPauseAll>

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   40810:	8809883a 	mov	r4,r17
   40814:	900b883a 	mov	r5,r18
   40818:	000d883a 	mov	r6,zero
    delay_10ms();
    delay_10ms();

    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);

    retval+=Si114xPauseAll(si114x_handle);
   4081c:	1421883a 	add	r16,r2,r16

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   40820:	00401dc0 	call	401dc <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   40824:	8809883a 	mov	r4,r17
   40828:	01400104 	movi	r5,4
   4082c:	000d883a 	mov	r6,zero

    retval+=Si114xPauseAll(si114x_handle);

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
   40830:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   40834:	00401dc0 	call	401dc <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   40838:	8809883a 	mov	r4,r17
   4083c:	01400144 	movi	r5,5
   40840:	000d883a 	mov	r6,zero
    retval+=Si114xPauseAll(si114x_handle);

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
   40844:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   40848:	00401dc0 	call	401dc <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   4084c:	8809883a 	mov	r4,r17
   40850:	01400184 	movi	r5,6
   40854:	000d883a 	mov	r6,zero

    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
   40858:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   4085c:	00401dc0 	call	401dc <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   40860:	8809883a 	mov	r4,r17
   40864:	014000c4 	movi	r5,3
   40868:	000d883a 	mov	r6,zero
    // The clearing of the registers could be redundant, but it is okay.
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
   4086c:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   40870:	00401dc0 	call	401dc <Si114xWriteToRegister>
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   40874:	8809883a 	mov	r4,r17
   40878:	01400844 	movi	r5,33
   4087c:	01803fc4 	movi	r6,255
    // This is to make sure that these registers are cleared.
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
   40880:	80a1883a 	add	r16,r16,r2
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   40884:	00401dc0 	call	401dc <Si114xWriteToRegister>

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
   40888:	8809883a 	mov	r4,r17
   4088c:	01400604 	movi	r5,24
   40890:	01800044 	movi	r6,1
    retval+=Si114xWriteToRegister(si114x_handle, REG_MEAS_RATE,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_ENABLE, 0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE1,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_MODE2,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_INT_CFG  ,  0x00);
    retval+=Si114xWriteToRegister(si114x_handle, REG_IRQ_STATUS, 0xFF);
   40894:	80a1883a 	add	r16,r16,r2

    // Perform the Reset Command
    retval+=Si114xWriteToRegister(si114x_handle, REG_COMMAND, 1);
   40898:	00401dc0 	call	401dc <Si114xWriteToRegister>
   4089c:	80a1883a 	add	r16,r16,r2


    // Delay for 10 ms. This delay is needed to allow the Si114x
    // to perform internal reset sequence. 
    delay_10ms();
   408a0:	00401d80 	call	401d8 <delay_10ms>
    delay_10ms();
   408a4:	00401d80 	call	401d8 <delay_10ms>

    // Write Hardware Key
    retval+=Si114xWriteToRegister(si114x_handle, REG_HW_KEY, HW_KEY_VAL0);
   408a8:	8809883a 	mov	r4,r17
   408ac:	014001c4 	movi	r5,7
   408b0:	018005c4 	movi	r6,23
   408b4:	00401dc0 	call	401dc <Si114xWriteToRegister>
    return retval;
}
   408b8:	8085883a 	add	r2,r16,r2
   408bc:	dfc00317 	ldw	ra,12(sp)
   408c0:	dc800217 	ldw	r18,8(sp)
   408c4:	dc400117 	ldw	r17,4(sp)
   408c8:	dc000017 	ldw	r16,0(sp)
   408cc:	dec00404 	addi	sp,sp,16
   408d0:	f800283a 	ret

000408d4 <Uncompress>:
    // evaluating the value with the integer bit is zero (0.F). So, we round up
    // if the fraction represents a value of 1/2 or greater. Since the fraction
    // is 4 bits, an input of less than 8/16 is less than half. If less than
    // half, return zero. Otherwise, we know that we will return a 1 later.
    //
    if ( input < 8 ) return 0;  
   408d4:	20803fcc 	andi	r2,r4,255
   408d8:	00c001c4 	movi	r3,7
   408dc:	18800c2e 	bgeu	r3,r2,40910 <Uncompress+0x3c>
    
    exponent = (input & 0xF0 ) >> 4;      // extracts the exponent
    output = 0x10  | (input & 0x0F);      // extracts the fraction and adds 
                                          // in the implicit integer

    if ( exponent >= 4 ) return ( output << (exponent-4) );
   408e0:	1004d13a 	srli	r2,r2,4
    // left/right accordingly. The result will be the same as the floating
    // point concept described above.
    //
    
    exponent = (input & 0xF0 ) >> 4;      // extracts the exponent
    output = 0x10  | (input & 0x0F);      // extracts the fraction and adds 
   408e4:	210003cc 	andi	r4,r4,15
                                          // in the implicit integer

    if ( exponent >= 4 ) return ( output << (exponent-4) );
   408e8:	00c000c4 	movi	r3,3
    // left/right accordingly. The result will be the same as the floating
    // point concept described above.
    //
    
    exponent = (input & 0xF0 ) >> 4;      // extracts the exponent
    output = 0x10  | (input & 0x0F);      // extracts the fraction and adds 
   408ec:	21000414 	ori	r4,r4,16
                                          // in the implicit integer

    if ( exponent >= 4 ) return ( output << (exponent-4) );
   408f0:	18800436 	bltu	r3,r2,40904 <Uncompress+0x30>
    return( output >> (4-exponent) );
   408f4:	00c00104 	movi	r3,4
   408f8:	1885c83a 	sub	r2,r3,r2
   408fc:	2085d83a 	sra	r2,r4,r2
   40900:	f800283a 	ret
    
    exponent = (input & 0xF0 ) >> 4;      // extracts the exponent
    output = 0x10  | (input & 0x0F);      // extracts the fraction and adds 
                                          // in the implicit integer

    if ( exponent >= 4 ) return ( output << (exponent-4) );
   40904:	10bfff04 	addi	r2,r2,-4
   40908:	2084983a 	sll	r2,r4,r2
   4090c:	f800283a 	ret
    // evaluating the value with the integer bit is zero (0.F). So, we round up
    // if the fraction represents a value of 1/2 or greater. Since the fraction
    // is 4 bits, an input of less than 8/16 is less than half. If less than
    // half, return zero. Otherwise, we know that we will return a 1 later.
    //
    if ( input < 8 ) return 0;  
   40910:	0005883a 	mov	r2,zero
    output = 0x10  | (input & 0x0F);      // extracts the fraction and adds 
                                          // in the implicit integer

    if ( exponent >= 4 ) return ( output << (exponent-4) );
    return( output >> (4-exponent) );
}
   40914:	f800283a 	ret

00040918 <Compress>:
{
    u32 tmp         = 0;
    u32 exponent    = 0;
    u32 significand = 0;

    if(input==0)
   40918:	213fffcc 	andi	r4,r4,65535
   4091c:	20001926 	beq	r4,zero,40984 <Compress+0x6c>
    // error introduced throught the gradual underflow
    //     Answer for 0x0000 is from 0x00 to 0x07
    //     Answer for 0x0001 is from 0x08 to 0x0F
    // We will just 'pick one' answer.
    if (input == 0x0000) return 0x00; 
    if (input == 0x0001) return 0x08; 
   40920:	01800044 	movi	r6,1
   40924:	21801926 	beq	r4,r6,4098c <Compress+0x74>


    // Now we have the denorm cases out of the way, the exponent should be at
    // least one at this point. 
    exponent = 0;
    tmp = input;
   40928:	2005883a 	mov	r2,r4
    if (input == 0x0001) return 0x08; 


    // Now we have the denorm cases out of the way, the exponent should be at
    // least one at this point. 
    exponent = 0;
   4092c:	000b883a 	mov	r5,zero
   40930:	00000106 	br	40938 <Compress+0x20>
    tmp = input;
    while (1) 
    {
        tmp >>= 1;  // Shift until there is only the integer in the lease significant position 
        exponent += 1;
   40934:	180b883a 	mov	r5,r3
    // least one at this point. 
    exponent = 0;
    tmp = input;
    while (1) 
    {
        tmp >>= 1;  // Shift until there is only the integer in the lease significant position 
   40938:	1004d07a 	srli	r2,r2,1
        exponent += 1;
   4093c:	28c00044 	addi	r3,r5,1
        if (tmp == 1) 
   40940:	11bffc1e 	bne	r2,r6,40934 <__alt_data_end+0xfffda474>
    // Once exponent is found, look for the four fractional bits.
    //
    // If the exponent is between 1 to 4, we do not need to do any kind of
    // fractional rounding. Take care of those cases first 

    if (exponent < 5) // shift left to align the significant and return the 
   40944:	00800104 	movi	r2,4
   40948:	10c0122e 	bgeu	r2,r3,40994 <Compress+0x7c>
    // so, it is best that we also look at the 5th fractional bit and update
    // the 4th fractional bit as necessary. During rounding, it is possible for
    // a carry to occur. If this happens, simply add one to the exponent, and
    // shift the signficand by one to get to the same bit positioning. 

    significand = input >> (exponent - 5);
   4094c:	28bfff04 	addi	r2,r5,-4
   40950:	2089d83a 	sra	r4,r4,r2
    //
    //                ^    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    //               int            fraction        
    //

    if (significand & 1) // Check if we need to round up
   40954:	2080004c 	andi	r2,r4,1
   40958:	10000526 	beq	r2,zero,40970 <Compress+0x58>
    {                
        
        significand += 2;   // Increment the 4th fraction (in bit1 position)               
   4095c:	21000084 	addi	r4,r4,2
        
        // We then check if a carry occurred due to the addition. If a carry
        // did occur, it would have bumped up the number such that bit6 would
        // be set. Bit6 is 0x0040.
        if (significand & 0x0040)         // Check for a carry
   40960:	2080100c 	andi	r2,r4,64
   40964:	10000226 	beq	r2,zero,40970 <Compress+0x58>
        {       
            exponent += 1;                // A carry occurred. Increment the exponent
            significand >>= 1;            // shift the signficand right by one
   40968:	2008d07a 	srli	r4,r4,1
        // We then check if a carry occurred due to the addition. If a carry
        // did occur, it would have bumped up the number such that bit6 would
        // be set. Bit6 is 0x0040.
        if (significand & 0x0040)         // Check for a carry
        {       
            exponent += 1;                // A carry occurred. Increment the exponent
   4096c:	28c00084 	addi	r3,r5,2
            significand >>= 1;            // shift the signficand right by one
        }
    }

    // Rounding is done... Encode value and return.
    return ( (exponent << 4) | ( (significand >> 1) & 0xF ) );  
   40970:	2008d07a 	srli	r4,r4,1
   40974:	1806913a 	slli	r3,r3,4
   40978:	208003cc 	andi	r2,r4,15
   4097c:	10c4b03a 	or	r2,r2,r3
   40980:	f800283a 	ret
    u32 tmp         = 0;
    u32 exponent    = 0;
    u32 significand = 0;

    if(input==0)
      return 0;      
   40984:	0005883a 	mov	r2,zero
   40988:	f800283a 	ret
    // error introduced throught the gradual underflow
    //     Answer for 0x0000 is from 0x00 to 0x07
    //     Answer for 0x0001 is from 0x08 to 0x0F
    // We will just 'pick one' answer.
    if (input == 0x0000) return 0x00; 
    if (input == 0x0001) return 0x08; 
   4098c:	00800204 	movi	r2,8
        }
    }

    // Rounding is done... Encode value and return.
    return ( (exponent << 4) | ( (significand >> 1) & 0xF ) );  
}
   40990:	f800283a 	ret
    // fractional rounding. Take care of those cases first 

    if (exponent < 5) // shift left to align the significant and return the 
                      // result
    { 
        significand = ( input << (4 - exponent) ) ;
   40994:	008000c4 	movi	r2,3
   40998:	1145c83a 	sub	r2,r2,r5
   4099c:	2084983a 	sll	r2,r4,r2
        return ( (exponent << 4) | ( significand & 0xF ) );
   409a0:	1806913a 	slli	r3,r3,4
   409a4:	108003cc 	andi	r2,r2,15
   409a8:	10c4b03a 	or	r2,r2,r3
   409ac:	f800283a 	ret

000409b0 <si114x_get_calibration>:

s16 si114x_get_calibration( HANDLE si114x_handle, SI114X_CAL_S *si114x_cal, char security)
{
    // although the SI114x_CAL_S structure is not filled up properly, the set_ucoef() function will not use it.
    return 0;
}
   409b0:	0005883a 	mov	r2,zero
   409b4:	f800283a 	ret

000409b8 <si114x_set_ucoef>:

s16 si114x_set_ucoef( HANDLE si114x_handle, u8 *input_ucoef, SI114X_CAL_S *si114x_cal )
{
   409b8:	defffe04 	addi	sp,sp,-8
   s16 response;
   u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
   409bc:	00801ec4 	movi	r2,123
   409c0:	d8800005 	stb	r2,0(sp)
   409c4:	00801ac4 	movi	r2,107
   409c8:	d8800045 	stb	r2,1(sp)
    
   // This will write 4 bytes starting with I2C address 0x13
    response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
   409cc:	014004c4 	movi	r5,19
   409d0:	01800104 	movi	r6,4
   409d4:	d80f883a 	mov	r7,sp
}

s16 si114x_set_ucoef( HANDLE si114x_handle, u8 *input_ucoef, SI114X_CAL_S *si114x_cal )
{
   s16 response;
   u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
   409d8:	00800044 	movi	r2,1
    // although the SI114x_CAL_S structure is not filled up properly, the set_ucoef() function will not use it.
    return 0;
}

s16 si114x_set_ucoef( HANDLE si114x_handle, u8 *input_ucoef, SI114X_CAL_S *si114x_cal )
{
   409dc:	dfc00115 	stw	ra,4(sp)
   s16 response;
   u8 code ucoef[4] = { 0x7B, 0x6B, 0x01, 0x00 } ;
   409e0:	d8800085 	stb	r2,2(sp)
   409e4:	d80000c5 	stb	zero,3(sp)
    
   // This will write 4 bytes starting with I2C address 0x13
    response = Si114xBlockWrite( si114x_handle, REG_UCOEF0, 4, &ucoef[0] );
   409e8:	00402d80 	call	402d8 <Si114xBlockWrite>
    return response;
}
   409ec:	dfc00117 	ldw	ra,4(sp)
   409f0:	dec00204 	addi	sp,sp,8
   409f4:	f800283a 	ret

000409f8 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
   409f8:	defffa04 	addi	sp,sp,-24
   409fc:	dcc00415 	stw	r19,16(sp)
   40a00:	2827883a 	mov	r19,r5
  alt_u32 prescale = (clk/( 5 * speed))-1;
   40a04:	31400164 	muli	r5,r6,5
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
   40a08:	dc400215 	stw	r17,8(sp)
   40a0c:	2023883a 	mov	r17,r4
  alt_u32 prescale = (clk/( 5 * speed))-1;
   40a10:	9809883a 	mov	r4,r19
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
   40a14:	dfc00515 	stw	ra,20(sp)
   40a18:	dc800315 	stw	r18,12(sp)
   40a1c:	dc000115 	stw	r16,4(sp)
   40a20:	3025883a 	mov	r18,r6
  alt_u32 prescale = (clk/( 5 * speed))-1;
   40a24:	00415dc0 	call	415dc <__udivsi3>
   40a28:	143fffc4 	addi	r16,r2,-1
//#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
   40a2c:	01000174 	movhi	r4,5
   40a30:	213be704 	addi	r4,r4,-4196
   40a34:	dc000015 	stw	r16,0(sp)
   40a38:	880b883a 	mov	r5,r17
   40a3c:	980d883a 	mov	r6,r19
   40a40:	900f883a 	mov	r7,r18
   40a44:	00417500 	call	41750 <printf>
//#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
   40a48:	88800204 	addi	r2,r17,8
   40a4c:	10000035 	stwio	zero,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
   40a50:	00c00044 	movi	r3,1
   40a54:	88c00435 	stwio	r3,16(r17)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
   40a58:	80c03fcc 	andi	r3,r16,255
   40a5c:	88c00035 	stwio	r3,0(r17)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
   40a60:	8020d23a 	srli	r16,r16,8
   40a64:	84003fcc 	andi	r16,r16,255
   40a68:	8c000135 	stwio	r16,4(r17)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
   40a6c:	00c02004 	movi	r3,128
   40a70:	10c00035 	stwio	r3,0(r2)

}
   40a74:	dfc00517 	ldw	ra,20(sp)
   40a78:	dcc00417 	ldw	r19,16(sp)
   40a7c:	dc800317 	ldw	r18,12(sp)
   40a80:	dc400217 	ldw	r17,8(sp)
   40a84:	dc000117 	ldw	r16,4(sp)
   40a88:	dec00604 	addi	sp,sp,24
   40a8c:	f800283a 	ret

00040a90 <I2C_start>:
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
   40a90:	294b883a 	add	r5,r5,r5
   40a94:	3180004c 	andi	r6,r6,1
   40a98:	298d883a 	add	r6,r5,r6
   40a9c:	21800335 	stwio	r6,12(r4)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
   40aa0:	21000404 	addi	r4,r4,16
   40aa4:	00802404 	movi	r2,144
   40aa8:	20800035 	stwio	r2,0(r4)

          /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
   40aac:	20800037 	ldwio	r2,0(r4)
   40ab0:	1080008c 	andi	r2,r2,2
   40ab4:	103ffd1e 	bne	r2,zero,40aac <__alt_data_end+0xfffda5ec>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   40ab8:	20800037 	ldwio	r2,0(r4)
   40abc:	1004d1fa 	srli	r2,r2,7
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   }
}
   40ac0:	1080004c 	andi	r2,r2,1
   40ac4:	f800283a 	ret

00040ac8 <I2C_read>:
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
   40ac8:	20c00404 	addi	r3,r4,16
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
   40acc:	28000726 	beq	r5,zero,40aec <I2C_read+0x24>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
   40ad0:	00801a04 	movi	r2,104
   40ad4:	18800035 	stwio	r2,0(r3)
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
  }
          /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
   40ad8:	18800037 	ldwio	r2,0(r3)
   40adc:	1080008c 	andi	r2,r2,2
   40ae0:	103ffd1e 	bne	r2,zero,40ad8 <__alt_data_end+0xfffda618>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));

}
   40ae4:	20800337 	ldwio	r2,12(r4)
   40ae8:	f800283a 	ret
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
   40aec:	00800804 	movi	r2,32
   40af0:	18800035 	stwio	r2,0(r3)
   40af4:	003ff806 	br	40ad8 <__alt_data_end+0xfffda618>

00040af8 <I2C_write>:
{
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
   40af8:	29403fcc 	andi	r5,r5,255
   40afc:	21400335 	stwio	r5,12(r4)

  if( last)
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
   40b00:	21000404 	addi	r4,r4,16
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);

  if( last)
   40b04:	30000926 	beq	r6,zero,40b2c <I2C_write+0x34>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
   40b08:	00801404 	movi	r2,80
   40b0c:	20800035 	stwio	r2,0(r4)
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
  }
           /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
   40b10:	20800037 	ldwio	r2,0(r4)
   40b14:	1080008c 	andi	r2,r2,2
   40b18:	103ffd1e 	bne	r2,zero,40b10 <__alt_data_end+0xfffda650>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   40b1c:	20800037 	ldwio	r2,0(r4)
   40b20:	1004d1fa 	srli	r2,r2,7
        printf("\tACK\n");
#endif
       return (I2C_ACK);
   }

}
   40b24:	1080004c 	andi	r2,r2,1
   40b28:	f800283a 	ret
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
   40b2c:	00800404 	movi	r2,16
   40b30:	20800035 	stwio	r2,0(r4)
   40b34:	003ff606 	br	40b10 <__alt_data_end+0xfffda650>

00040b38 <DECA_si1143_irq_pop>:
 *	 board handle
 *   New sample data received from the sensor.
 * @return
 *   returns a positive number if successful, 0 otherwise
 *****************************************************************************/
int DECA_si1143_irq_pop(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples) {
   40b38:	defff704 	addi	sp,sp,-36
   40b3c:	dc400715 	stw	r17,28(sp)
   40b40:	dc000615 	stw	r16,24(sp)
   40b44:	2023883a 	mov	r17,r4
   40b48:	2821883a 	mov	r16,r5

	s16 SI114x_ret_val = -1;
	u8 SI114x_ret_val_array[16];
	u8 *SI114x_ptr = (u8*) &SI114x_ret_val_array;
	struct timeval timestmp;
	gettimeofday( &timestmp, NULL );
   40b4c:	d9000404 	addi	r4,sp,16
   40b50:	000b883a 	mov	r5,zero
 *	 board handle
 *   New sample data received from the sensor.
 * @return
 *   returns a positive number if successful, 0 otherwise
 *****************************************************************************/
int DECA_si1143_irq_pop(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples) {
   40b54:	dfc00815 	stw	ra,32(sp)

	s16 SI114x_ret_val = -1;
	u8 SI114x_ret_val_array[16];
	u8 *SI114x_ptr = (u8*) &SI114x_ret_val_array;
	struct timeval timestmp;
	gettimeofday( &timestmp, NULL );
   40b58:	004dbf40 	call	4dbf4 <gettimeofday>

	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
   40b5c:	8809883a 	mov	r4,r17
   40b60:	d80f883a 	mov	r7,sp
   40b64:	01400844 	movi	r5,33
   40b68:	01800344 	movi	r6,13
   40b6c:	00403d80 	call	403d8 <Si114xBlockRead>
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
   40b70:	d9000303 	ldbu	r4,12(sp)
	samples->timestamp = (u32)( timestmp.tv_usec + ( 1000000 * timestmp.tv_sec ) );
   40b74:	dc400417 	ldw	r17,16(sp)
   40b78:	00c003f4 	movhi	r3,15
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
   40b7c:	2014923a 	slli	r10,r4,8
   40b80:	d90002c3 	ldbu	r4,11(sp)
	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
   40b84:	da400083 	ldbu	r9,2(sp)
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
   40b88:	da000103 	ldbu	r8,4(sp)
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
   40b8c:	d9c00183 	ldbu	r7,6(sp)
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
   40b90:	d9800203 	ldbu	r6,8(sp)
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
   40b94:	d9400283 	ldbu	r5,10(sp)
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
	samples->timestamp = (u32)( timestmp.tv_usec + ( 1000000 * timestmp.tv_sec ) );
   40b98:	18d09004 	addi	r3,r3,16960
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
   40b9c:	5108b03a 	or	r4,r10,r4
	samples->timestamp = (u32)( timestmp.tv_usec + ( 1000000 * timestmp.tv_sec ) );
   40ba0:	88c7383a 	mul	r3,r17,r3
   40ba4:	da800517 	ldw	r10,20(sp)
	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
   40ba8:	481e923a 	slli	r15,r9,8
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
   40bac:	401c923a 	slli	r14,r8,8
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
   40bb0:	381a923a 	slli	r13,r7,8
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
   40bb4:	3018923a 	slli	r12,r6,8
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
   40bb8:	2816923a 	slli	r11,r5,8
	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
   40bbc:	da400043 	ldbu	r9,1(sp)
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
   40bc0:	da0000c3 	ldbu	r8,3(sp)
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
   40bc4:	d9c00143 	ldbu	r7,5(sp)
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
   40bc8:	d98001c3 	ldbu	r6,7(sp)
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
   40bcc:	d9400243 	ldbu	r5,9(sp)
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
	samples->timestamp = (u32)( timestmp.tv_usec + ( 1000000 * timestmp.tv_sec ) );
   40bd0:	50c7883a 	add	r3,r10,r3
	//printf("PS3 Data: %x\n", samples->ps3 );
	//printf("IR Data: %x\n", samples->ir );
	//printf("VIS Data: %x\n", samples->vis );

	return SI114x_ret_val;
}
   40bd4:	10bfffcc 	andi	r2,r2,65535

	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
   40bd8:	da800003 	ldbu	r10,0(sp)
	//printf("PS3 Data: %x\n", samples->ps3 );
	//printf("IR Data: %x\n", samples->ir );
	//printf("VIS Data: %x\n", samples->vis );

	return SI114x_ret_val;
}
   40bdc:	10a0001c 	xori	r2,r2,32768
	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
   40be0:	7a52b03a 	or	r9,r15,r9
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
   40be4:	7210b03a 	or	r8,r14,r8
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
   40be8:	69ceb03a 	or	r7,r13,r7
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
   40bec:	618cb03a 	or	r6,r12,r6
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
   40bf0:	594ab03a 	or	r5,r11,r5
	//printf("PS3 Data: %x\n", samples->ps3 );
	//printf("IR Data: %x\n", samples->ir );
	//printf("VIS Data: %x\n", samples->vis );

	return SI114x_ret_val;
}
   40bf4:	10a00004 	addi	r2,r2,-32768

	// block read to get measurement values
	SI114x_ret_val = Si114xBlockRead(si114x_handle, REG_IRQ_STATUS, 0xD, SI114x_ptr );
	
	// put measurements in the samples data structure and add a timestamp for the algorithm
	samples->irqstat = SI114x_ret_val_array[0];
   40bf8:	82800245 	stb	r10,9(r16)
	samples->vis = ( ( (u16)SI114x_ret_val_array[2] << 8 ) | SI114x_ret_val_array[1] );
   40bfc:	8240028d 	sth	r9,10(r16)
	samples->ir = ( ( (u16)SI114x_ret_val_array[4] << 8 ) | SI114x_ret_val_array[3] );
   40c00:	8200030d 	sth	r8,12(r16)
	samples->ps1 = ( ( (u16)SI114x_ret_val_array[6] << 8 ) | SI114x_ret_val_array[5] );
   40c04:	81c0038d 	sth	r7,14(r16)
	samples->ps2 = ( ( (u16)SI114x_ret_val_array[8] << 8 ) | SI114x_ret_val_array[7] );
   40c08:	8180040d 	sth	r6,16(r16)
	samples->ps3 = ( ( (u16)SI114x_ret_val_array[10] << 8 ) | SI114x_ret_val_array[9] );
   40c0c:	8140048d 	sth	r5,18(r16)
	samples->aux = ( ( (u16)SI114x_ret_val_array[12] << 8 ) | SI114x_ret_val_array[11] );
   40c10:	8100050d 	sth	r4,20(r16)
	samples->timestamp = (u32)( timestmp.tv_usec + ( 1000000 * timestmp.tv_sec ) );
   40c14:	80c00115 	stw	r3,4(r16)
	//printf("PS3 Data: %x\n", samples->ps3 );
	//printf("IR Data: %x\n", samples->ir );
	//printf("VIS Data: %x\n", samples->vis );

	return SI114x_ret_val;
}
   40c18:	dfc00817 	ldw	ra,32(sp)
   40c1c:	dc400717 	ldw	r17,28(sp)
   40c20:	dc000617 	ldw	r16,24(sp)
   40c24:	dec00904 	addi	sp,sp,36
   40c28:	f800283a 	ret

00040c2c <main>:
	gesture_t  gest = NONE;
	HANDLE si114x_handle;
	si114x_handle = 0;

	// main program
	alt_printf("\nGesture Sensor program starting... Please wait...\n\n");
   40c2c:	01000174 	movhi	r4,5
// function declarations
int DECA_si1143_irq_pop(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples);
static gesture_t ProcessSi1143Samples(SI114X_IRQ_SAMPLE *samples);
 
int main()
{
   40c30:	defff304 	addi	sp,sp,-52
	gesture_t  gest = NONE;
	HANDLE si114x_handle;
	si114x_handle = 0;

	// main program
	alt_printf("\nGesture Sensor program starting... Please wait...\n\n");
   40c34:	213bff04 	addi	r4,r4,-4100
// function declarations
int DECA_si1143_irq_pop(HANDLE si114x_handle, SI114X_IRQ_SAMPLE *samples);
static gesture_t ProcessSi1143Samples(SI114X_IRQ_SAMPLE *samples);
 
int main()
{
   40c38:	dfc00c15 	stw	ra,48(sp)
   40c3c:	dcc00b15 	stw	r19,44(sp)
   40c40:	dc800a15 	stw	r18,40(sp)
   40c44:	dc400915 	stw	r17,36(sp)
   40c48:	dc000815 	stw	r16,32(sp)
	gesture_t  gest = NONE;
	HANDLE si114x_handle;
	si114x_handle = 0;

	// main program
	alt_printf("\nGesture Sensor program starting... Please wait...\n\n");
   40c4c:	004dfd00 	call	4dfd0 <alt_printf>
	
	// initializing the I2C bus @ addr = I2C_OPENCORES_0_BASE
	alt_printf("Initializing I2C bus...\n");
   40c50:	01000174 	movhi	r4,5
   40c54:	213c0d04 	addi	r4,r4,-4044
   40c58:	004dfd00 	call	4dfd0 <alt_printf>
	I2C_init(I2C_OPENCORES_0_BASE, (alt_32) 50000000, (alt_32) 200000);
   40c5c:	0140bef4 	movhi	r5,763
   40c60:	018000f4 	movhi	r6,3
   40c64:	01000234 	movhi	r4,8
   40c68:	297c2004 	addi	r5,r5,-3968
   40c6c:	31835004 	addi	r6,r6,3392
   40c70:	21040004 	addi	r4,r4,4096
   40c74:	00409f80 	call	409f8 <I2C_init>
	
	// reset the Si1143 Gesture IC
	alt_printf("Resetting Si1143 Gesture Sensor...\n");
   40c78:	01000174 	movhi	r4,5
   40c7c:	213c1404 	addi	r4,r4,-4016
   40c80:	004dfd00 	call	4dfd0 <alt_printf>
	SI114x_ret_val = Si114xReset(si114x_handle);
   40c84:	0009883a 	mov	r4,zero
   40c88:	00407cc0 	call	407cc <Si114xReset>
	if ( SI114x_ret_val != 0 )	// if reset is successful...
   40c8c:	10bfffcc 	andi	r2,r2,65535
   40c90:	10a0001c 	xori	r2,r2,32768
   40c94:	10a00004 	addi	r2,r2,-32768
   40c98:	1000c926 	beq	r2,zero,40fc0 <main+0x394>
	{
		alt_printf("Si1143 Reset completed successfully!\n");
   40c9c:	01000174 	movhi	r4,5
   40ca0:	213c1d04 	addi	r4,r4,-3980
   40ca4:	004dfd00 	call	4dfd0 <alt_printf>
		
		// set IR LED current values to a default level
		alt_printf("Setting LED current values...\n");
   40ca8:	01000174 	movhi	r4,5
   40cac:	213c2704 	addi	r4,r4,-3940
   40cb0:	004dfd00 	call	4dfd0 <alt_printf>
		u8 i21, i3;
		i21 = 0xbb; // current = LEDI_202;
		i3  = 0x0b;
		SI114x_ret_val+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
   40cb4:	0009883a 	mov	r4,zero
   40cb8:	014003c4 	movi	r5,15
   40cbc:	01802ec4 	movi	r6,187
   40cc0:	00401dc0 	call	401dc <Si114xWriteToRegister>
		SI114x_ret_val+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
   40cc4:	01400404 	movi	r5,16
   40cc8:	018002c4 	movi	r6,11
   40ccc:	0009883a 	mov	r4,zero
   40cd0:	00401dc0 	call	401dc <Si114xWriteToRegister>
	{
		alt_printf("Si1143 Reset failed... Exiting...\n");
		return -1;
	}
	// gesture recognition loop
	alt_printf("Entering main loop...\n Loop exits after 32 gestures are recognized.\n");
   40cd4:	01000174 	movhi	r4,5
   40cd8:	213c2f04 	addi	r4,r4,-3908
   40cdc:	004dfd00 	call	4dfd0 <alt_printf>
   40ce0:	04800174 	movhi	r18,5
   40ce4:	04000174 	movhi	r16,5
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   40ce8:	04c80034 	movhi	r19,8192
	}
	// gesture recognition loop
	alt_printf("Entering main loop...\n Loop exits after 32 gestures are recognized.\n");
	// have Si1143 measure all three proximity channels, the visual channel, and the IR channel
	s16_tasklist = PS1_TASK + PS2_TASK + PS3_TASK + ALS_VIS_TASK + ALS_IR_TASK;
	SI114x_ret_val+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, s16_tasklist);
   40cec:	0009883a 	mov	r4,zero
   40cf0:	01400044 	movi	r5,1
   40cf4:	01800dc4 	movi	r6,55
 
int main()
{
	// variable declarations
	int s16_tasklist = -1;
	int gest_cnt = 0;
   40cf8:	0023883a 	mov	r17,zero
   40cfc:	9482a604 	addi	r18,r18,2712
   40d00:	8402a904 	addi	r16,r16,2724
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   40d04:	9cffffc4 	addi	r19,r19,-1
	}
	// gesture recognition loop
	alt_printf("Entering main loop...\n Loop exits after 32 gestures are recognized.\n");
	// have Si1143 measure all three proximity channels, the visual channel, and the IR channel
	s16_tasklist = PS1_TASK + PS2_TASK + PS3_TASK + ALS_VIS_TASK + ALS_IR_TASK;
	SI114x_ret_val+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, s16_tasklist);
   40d08:	00406540 	call	40654 <Si114xParamSet>

	while ( gest_cnt <= 32 ){
		// make measurement
		SI114x_ret_val = Si114xPsAlsForce(si114x_handle);
   40d0c:	0009883a 	mov	r4,zero
   40d10:	00405f00 	call	405f0 <Si114xPsAlsForce>
		//usleep(10000);	// uncomment if you need a pause in measurements
		if ( SI114x_ret_val > 0 ){	// if measurement is successful...
   40d14:	10bfffcc 	andi	r2,r2,65535
   40d18:	10a0001c 	xori	r2,r2,32768
   40d1c:	10a00004 	addi	r2,r2,-32768
   40d20:	0080470e 	bge	zero,r2,40e40 <main+0x214>
			// retrieve data from sensor and put it in struct "samples"
			DECA_si1143_irq_pop(si114x_handle, &samples);
   40d24:	0009883a 	mov	r4,zero
   40d28:	d80b883a 	mov	r5,sp
   40d2c:	0040b380 	call	40b38 <DECA_si1143_irq_pop>
  u32 diff_y2 ;
  u32 ps_time[3] ;
  u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
  /*save new samples into ps array */
  ps[0] = samples->ps1;
   40d30:	d980038b 	ldhu	r6,14(sp)
  ps[1] = samples->ps2;
   40d34:	da40040b 	ldhu	r9,16(sp)
  ps[2] = samples->ps3;
   40d38:	dac0048b 	ldhu	r11,18(sp)
    if (ps[array_counter] >= PS_THRESHOLD)
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
        ps_entry_time[array_counter] = samples->timestamp;
   40d3c:	3005883a 	mov	r2,r6
      }
    }
    else
    {
      if (ps_state[array_counter] == 1)
   40d40:	02800044 	movi	r10,1
  u32 diff_y2 ;
  u32 ps_time[3] ;
  u32 ps_avg;
  gesture_t  ret = NONE;  /*gesture result return value */
  /*save new samples into ps array */
  ps[0] = samples->ps1;
   40d44:	d980060d 	sth	r6,24(sp)
  ps[1] = samples->ps2;
   40d48:	da40068d 	sth	r9,26(sp)
  ps[2] = samples->ps3;
   40d4c:	dac0070d 	sth	r11,28(sp)
  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
  {
    /* If measurement higher than the ps_threshold value, */
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
   40d50:	0200aec4 	movi	r8,699
   40d54:	10bfffcc 	andi	r2,r2,65535
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
        ps_entry_time[array_counter] = samples->timestamp;
   40d58:	db400117 	ldw	r13,4(sp)
   40d5c:	d9400684 	addi	r5,sp,26
   40d60:	d122be04 	addi	r4,gp,-29960
   40d64:	0007883a 	mov	r3,zero
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
    {
      if (ps_state[array_counter] == 0)
      {
        ps_state[array_counter]      = 1;
   40d68:	501d883a 	mov	r14,r10
  ps[0] = samples->ps1;
  ps[1] = samples->ps2;
  ps[2] = samples->ps3;

  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
   40d6c:	01c00304 	movi	r7,12
  {
    /* If measurement higher than the ps_threshold value, */
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
   40d70:	40800c2e 	bgeu	r8,r2,40da4 <main+0x178>
    {
      if (ps_state[array_counter] == 0)
   40d74:	20800003 	ldbu	r2,0(r4)
   40d78:	1c19883a 	add	r12,r3,r16
   40d7c:	1000021e 	bne	r2,zero,40d88 <main+0x15c>
      {
        ps_state[array_counter]      = 1;
   40d80:	23800005 	stb	r14,0(r4)
        ps_entry_time[array_counter] = samples->timestamp;
   40d84:	63400015 	stw	r13,0(r12)
   40d88:	18c00104 	addi	r3,r3,4
   40d8c:	21000044 	addi	r4,r4,1
  ps[0] = samples->ps1;
  ps[1] = samples->ps2;
  ps[2] = samples->ps3;

  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
   40d90:	19c00c26 	beq	r3,r7,40dc4 <main+0x198>
   40d94:	2880000b 	ldhu	r2,0(r5)
   40d98:	29400084 	addi	r5,r5,2
  {
    /* If measurement higher than the ps_threshold value, */
    /*   record the time of entry and change the state to look for the exit time */
    if (ps[array_counter] >= PS_THRESHOLD)
   40d9c:	10bfffcc 	andi	r2,r2,65535
   40da0:	40bff436 	bltu	r8,r2,40d74 <__alt_data_end+0xfffda8b4>
        ps_entry_time[array_counter] = samples->timestamp;
      }
    }
    else
    {
      if (ps_state[array_counter] == 1)
   40da4:	20800003 	ldbu	r2,0(r4)
   40da8:	12bff71e 	bne	r2,r10,40d88 <__alt_data_end+0xfffda8c8>
   40dac:	90c5883a 	add	r2,r18,r3
      {
        ps_state[array_counter]     = 0;
   40db0:	20000005 	stb	zero,0(r4)
        ps_exit_time[array_counter] = samples->timestamp;
   40db4:	13400015 	stw	r13,0(r2)
   40db8:	18c00104 	addi	r3,r3,4
   40dbc:	21000044 	addi	r4,r4,1
  ps[0] = samples->ps1;
  ps[1] = samples->ps2;
  ps[2] = samples->ps3;

  /* Check state of all three measurements */
  for (array_counter = 0; array_counter < 3; array_counter++)
   40dc0:	19fff41e 	bne	r3,r7,40d94 <__alt_data_end+0xfffda8d4>
      }
    }
  }

  /* If there is no object in front of the board, look at history to see if a gesture occured */
  if ((ps[0] < PS_THRESHOLD) && (ps[1] < PS_THRESHOLD) && (ps[2] < PS_THRESHOLD))
   40dc4:	31bfffcc 	andi	r6,r6,65535
   40dc8:	0080aec4 	movi	r2,699
   40dcc:	11801236 	bltu	r2,r6,40e18 <main+0x1ec>
   40dd0:	4a7fffcc 	andi	r9,r9,65535
   40dd4:	12401036 	bltu	r2,r9,40e18 <main+0x1ec>
   40dd8:	5affffcc 	andi	r11,r11,65535
   40ddc:	12c00e36 	bltu	r2,r11,40e18 <main+0x1ec>
  {
    /* If the ps_max values are high enough and there exit entry and exit times, */
    /*   then begin processing gestures */
    if ((ps_entry_time[0] != 0) && (ps_entry_time[1] != 0) && (ps_entry_time[2] != 0)
   40de0:	80c00017 	ldw	r3,0(r16)
   40de4:	00800174 	movhi	r2,5
   40de8:	1082a904 	addi	r2,r2,2724
   40dec:	18000226 	beq	r3,zero,40df8 <main+0x1cc>
   40df0:	11000117 	ldw	r4,4(r2)
   40df4:	2000161e 	bne	r4,zero,40e50 <main+0x224>
   40df8:	00800174 	movhi	r2,5
   40dfc:	1082a604 	addi	r2,r2,2712
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40e00:	10000015 	stw	zero,0(r2)
      ps_entry_time[array_counter] = 0;
   40e04:	80000015 	stw	zero,0(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40e08:	10000115 	stw	zero,4(r2)
      ps_entry_time[array_counter] = 0;
   40e0c:	80000115 	stw	zero,4(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40e10:	10000215 	stw	zero,8(r2)
      ps_entry_time[array_counter] = 0;
   40e14:	80000215 	stw	zero,8(r16)
	alt_printf("Entering main loop...\n Loop exits after 32 gestures are recognized.\n");
	// have Si1143 measure all three proximity channels, the visual channel, and the IR channel
	s16_tasklist = PS1_TASK + PS2_TASK + PS3_TASK + ALS_VIS_TASK + ALS_IR_TASK;
	SI114x_ret_val+=Si114xParamSet(si114x_handle, PARAM_CH_LIST, s16_tasklist);

	while ( gest_cnt <= 32 ){
   40e18:	00800804 	movi	r2,32
   40e1c:	147fbb0e 	bge	r2,r17,40d0c <__alt_data_end+0xfffda84c>
			if ( gest == TAP ) alt_printf("TAP detected!\n");
		}
		else alt_printf("Unable to force measurement...\n");
	}

	return 0;
   40e20:	0005883a 	mov	r2,zero
}
   40e24:	dfc00c17 	ldw	ra,48(sp)
   40e28:	dcc00b17 	ldw	r19,44(sp)
   40e2c:	dc800a17 	ldw	r18,40(sp)
   40e30:	dc400917 	ldw	r17,36(sp)
   40e34:	dc000817 	ldw	r16,32(sp)
   40e38:	dec00d04 	addi	sp,sp,52
   40e3c:	f800283a 	ret
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
			if ( gest == LEFT ) alt_printf("LEFT swipe detected!\n");
			if ( gest == RIGHT ) alt_printf("RIGHT swipe detected!\n");
			if ( gest == TAP ) alt_printf("TAP detected!\n");
		}
		else alt_printf("Unable to force measurement...\n");
   40e40:	01000174 	movhi	r4,5
   40e44:	213c5b04 	addi	r4,r4,-3732
   40e48:	004dfd00 	call	4dfd0 <alt_printf>
   40e4c:	003ff206 	br	40e18 <__alt_data_end+0xfffda958>
  /* If there is no object in front of the board, look at history to see if a gesture occured */
  if ((ps[0] < PS_THRESHOLD) && (ps[1] < PS_THRESHOLD) && (ps[2] < PS_THRESHOLD))
  {
    /* If the ps_max values are high enough and there exit entry and exit times, */
    /*   then begin processing gestures */
    if ((ps_entry_time[0] != 0) && (ps_entry_time[1] != 0) && (ps_entry_time[2] != 0)
   40e50:	11400217 	ldw	r5,8(r2)
   40e54:	283fe826 	beq	r5,zero,40df8 <__alt_data_end+0xfffda938>
        && (ps_exit_time[0] != 0) && (ps_exit_time[1] != 0) && (ps_exit_time[2] != 0))
   40e58:	91800017 	ldw	r6,0(r18)
   40e5c:	00800174 	movhi	r2,5
   40e60:	1082a604 	addi	r2,r2,2712
   40e64:	303fe626 	beq	r6,zero,40e00 <__alt_data_end+0xfffda940>
   40e68:	11c00117 	ldw	r7,4(r2)
   40e6c:	383fe426 	beq	r7,zero,40e00 <__alt_data_end+0xfffda940>
   40e70:	12400217 	ldw	r9,8(r2)
   40e74:	483fe226 	beq	r9,zero,40e00 <__alt_data_end+0xfffda940>
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
   40e78:	023f0034 	movhi	r8,64512
   40e7c:	41800536 	bltu	r8,r6,40e94 <main+0x268>
   40e80:	41c00436 	bltu	r8,r7,40e94 <main+0x268>
   40e84:	42400336 	bltu	r8,r9,40e94 <main+0x268>
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
   40e88:	40c00236 	bltu	r8,r3,40e94 <main+0x268>
   40e8c:	41000136 	bltu	r8,r4,40e94 <main+0x268>
   40e90:	41400c2e 	bgeu	r8,r5,40ec4 <main+0x298>
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   40e94:	34cd883a 	add	r6,r6,r19
        ps_exit_time[1] += 0x1FFFFFFFL;
   40e98:	3ccf883a 	add	r7,r7,r19
        ps_exit_time[2] += 0x1FFFFFFFL;
   40e9c:	4cd3883a 	add	r9,r9,r19

        ps_entry_time[0] += 0x1FFFFFFFL;
   40ea0:	1cc7883a 	add	r3,r3,r19
        ps_entry_time[1] += 0x1FFFFFFFL;
   40ea4:	24c9883a 	add	r4,r4,r19
        ps_entry_time[2] += 0x1FFFFFFFL;
   40ea8:	2ccb883a 	add	r5,r5,r19
    {
      /* Make sure no timestamps overflowed, indicated possibility if any of them are close to overflowing */
      if ((ps_exit_time[0] > 0xFC000000L) || (ps_exit_time[1] > 0xFC000000L) || (ps_exit_time[2] > 0xFC000000L)
          || (ps_entry_time[0] > 0xFC000000L) || (ps_entry_time[1] > 0xFC000000L) || (ps_entry_time[2] > 0xFC000000L))
      {         /* If any of them are close to overflowing, overflow them all so they all have the same reference */
        ps_exit_time[0] += 0x1FFFFFFFL;
   40eac:	91800015 	stw	r6,0(r18)
        ps_exit_time[1] += 0x1FFFFFFFL;
   40eb0:	91c00115 	stw	r7,4(r18)
        ps_exit_time[2] += 0x1FFFFFFFL;
   40eb4:	92400215 	stw	r9,8(r18)

        ps_entry_time[0] += 0x1FFFFFFFL;
   40eb8:	80c00015 	stw	r3,0(r16)
        ps_entry_time[1] += 0x1FFFFFFFL;
   40ebc:	81000115 	stw	r4,4(r16)
        ps_entry_time[2] += 0x1FFFFFFFL;
   40ec0:	81400215 	stw	r5,8(r16)
      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   40ec4:	81400117 	ldw	r5,4(r16)
      ps_time[1] = ps_time[1] + ps_entry_time[1];

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   40ec8:	80c00217 	ldw	r3,8(r16)
      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   40ecc:	92800117 	ldw	r10,4(r18)
      ps_time[1] = ps_time[1] + ps_entry_time[1];

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   40ed0:	92400217 	ldw	r9,8(r18)
        ps_entry_time[2] += 0x1FFFFFFFL;
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
   40ed4:	81000017 	ldw	r4,0(r16)
   40ed8:	92c00017 	ldw	r11,0(r18)
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   40edc:	5155c83a 	sub	r10,r10,r5
      ps_time[1] = ps_time[1] + ps_entry_time[1];

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   40ee0:	48d3c83a 	sub	r9,r9,r3
        ps_entry_time[2] += 0x1FFFFFFFL;
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
   40ee4:	5917c83a 	sub	r11,r11,r4
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
   40ee8:	5010d07a 	srli	r8,r10,1
      ps_time[1] = ps_time[1] + ps_entry_time[1];

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
   40eec:	480ed07a 	srli	r7,r9,1
        ps_entry_time[2] += 0x1FFFFFFFL;
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
   40ef0:	580cd07a 	srli	r6,r11,1
      ps_time[0] = ps_time[0] + ps_entry_time[0];

      ps_time[1] = (ps_exit_time[1] - ps_entry_time[1]) / 2;
      ps_time[1] = ps_time[1] + ps_entry_time[1];
   40ef4:	414b883a 	add	r5,r8,r5

      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
      ps_time[2] = ps_time[2] + ps_entry_time[2];
   40ef8:	38c7883a 	add	r3,r7,r3
      }

      /* Calculate the midpoint (between entry and exit times) of each waveform */
      /*  the order of these midpoints helps determine the gesture */
      ps_time[0] = (ps_exit_time[0] - ps_entry_time[0]) / 2;
      ps_time[0] = ps_time[0] + ps_entry_time[0];
   40efc:	3109883a 	add	r4,r6,r4
      ps_time[2] = (ps_exit_time[2] - ps_entry_time[2]) / 2;
      ps_time[2] = ps_time[2] + ps_entry_time[2];

      /* The diff_x and diff_y values help determine a gesture by comparing the */
      /*  LED measurements that are on a single axis */
      if (ps_time[1] > ps_time[2])
   40f00:	1940412e 	bgeu	r3,r5,41008 <main+0x3dc>
      {
        diff_x = ps_time[1] - ps_time[2];
   40f04:	28cdc83a 	sub	r6,r5,r3
      }
      else
      {
        diff_x = ps_time[2] - ps_time[1];
      }
      if( ps_time[0] > ps_time[1] )
   40f08:	2900432e 	bgeu	r5,r4,41018 <main+0x3ec>
      {
        diff_y1 = ps_time[0] - ps_time[1];
   40f0c:	214fc83a 	sub	r7,r4,r5
	  else
      {
        diff_y1 = ps_time[1] - ps_time[0];
      }

      if( ps_time[0] > ps_time[2] )
   40f10:	19003f2e 	bgeu	r3,r4,41010 <main+0x3e4>
      {
        diff_y2 = ps_time[0] - ps_time[2];
   40f14:	20d1c83a 	sub	r8,r4,r3

      /* Take the average of all three midpoints to make a comparison point for each midpoint */
      ps_avg = (u32) ps_time[0] + (u32) ps_time[1] + (u32) ps_time[2];
      ps_avg = ps_avg / 3;

      if ((ps_exit_time[0] - ps_entry_time[0]) > 10 || (ps_exit_time[1] - ps_entry_time[1]) > 10 || (ps_exit_time[2] - ps_entry_time[2]) > 10)
   40f18:	03000284 	movi	r12,10
   40f1c:	62c00236 	bltu	r12,r11,40f28 <main+0x2fc>
   40f20:	62800136 	bltu	r12,r10,40f28 <main+0x2fc>
   40f24:	627fb62e 	bgeu	r12,r9,40e00 <__alt_data_end+0xfffda940>
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
   40f28:	21402a2e 	bgeu	r4,r5,40fd4 <main+0x3a8>
   40f2c:	31c01536 	bltu	r6,r7,40f84 <main+0x358>
   40f30:	19004236 	bltu	r3,r4,4103c <main+0x410>
   40f34:	32001336 	bltu	r6,r8,40f84 <main+0x358>
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
        {           /* A down gesture occured if the bottom LED had its midpoint last */
          ret = DOWN;
        }
        else if((ps_time[0] < ps_time[1]) && (ps_time[2] < ps_time[1]) && (diff_x > ((diff_y1+diff_y2)/2)))
   40f38:	1940392e 	bgeu	r3,r5,41020 <main+0x3f4>
   40f3c:	41d3883a 	add	r9,r8,r7
   40f40:	4812d07a 	srli	r9,r9,1
   40f44:	4980362e 	bgeu	r9,r6,41020 <main+0x3f4>
        {           /* A left gesture occured if the left LED had its midpoint last */
          ret = LEFT;
   40f48:	008000c4 	movi	r2,3
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f4c:	90000015 	stw	zero,0(r18)
      ps_entry_time[array_counter] = 0;
   40f50:	80000015 	stw	zero,0(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f54:	90000115 	stw	zero,4(r18)
      ps_entry_time[array_counter] = 0;
   40f58:	80000115 	stw	zero,4(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f5c:	90000215 	stw	zero,8(r18)
      ps_entry_time[array_counter] = 0;
   40f60:	80000215 	stw	zero,8(r16)
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
			if ( gest == LEFT ) alt_printf("LEFT swipe detected!\n");
   40f64:	00c000c4 	movi	r3,3
			DECA_si1143_irq_pop(si114x_handle, &samples);
			// process data in gesture algorithm
			gest = ProcessSi1143Samples(&samples);
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
   40f68:	8c400044 	addi	r17,r17,1
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
			if ( gest == LEFT ) alt_printf("LEFT swipe detected!\n");
   40f6c:	10c0101e 	bne	r2,r3,40fb0 <main+0x384>
   40f70:	01000174 	movhi	r4,5
   40f74:	213c5504 	addi	r4,r4,-3756
   40f78:	004dfd00 	call	4dfd0 <alt_printf>
   40f7c:	003fa606 	br	40e18 <__alt_data_end+0xfffda958>
      ps_avg = (u32) ps_time[0] + (u32) ps_time[1] + (u32) ps_time[2];
      ps_avg = ps_avg / 3;

      if ((ps_exit_time[0] - ps_entry_time[0]) > 10 || (ps_exit_time[1] - ps_entry_time[1]) > 10 || (ps_exit_time[2] - ps_entry_time[2]) > 10)
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
   40f80:	3200272e 	bgeu	r6,r8,41020 <main+0x3f4>
			// process data in gesture algorithm
			gest = ProcessSi1143Samples(&samples);
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
   40f84:	01000174 	movhi	r4,5
   40f88:	213c4a04 	addi	r4,r4,-3800
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f8c:	90000015 	stw	zero,0(r18)
      ps_entry_time[array_counter] = 0;
   40f90:	80000015 	stw	zero,0(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f94:	90000115 	stw	zero,4(r18)
      ps_entry_time[array_counter] = 0;
   40f98:	80000115 	stw	zero,4(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40f9c:	90000215 	stw	zero,8(r18)
      ps_entry_time[array_counter] = 0;
   40fa0:	80000215 	stw	zero,8(r16)
			DECA_si1143_irq_pop(si114x_handle, &samples);
			// process data in gesture algorithm
			gest = ProcessSi1143Samples(&samples);
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
   40fa4:	8c400044 	addi	r17,r17,1
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
   40fa8:	004dfd00 	call	4dfd0 <alt_printf>
   40fac:	003f9a06 	br	40e18 <__alt_data_end+0xfffda958>
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
			if ( gest == LEFT ) alt_printf("LEFT swipe detected!\n");
			if ( gest == RIGHT ) alt_printf("RIGHT swipe detected!\n");
   40fb0:	01000174 	movhi	r4,5
   40fb4:	213c6304 	addi	r4,r4,-3700
   40fb8:	004dfd00 	call	4dfd0 <alt_printf>
   40fbc:	003f9606 	br	40e18 <__alt_data_end+0xfffda958>
		SI114x_ret_val+=Si114xWriteToRegister(si114x_handle, REG_PS_LED21, i21);
		SI114x_ret_val+=Si114xWriteToRegister(si114x_handle, REG_PS_LED3 , i3);
	}
	else	// if reset fails, exit
	{
		alt_printf("Si1143 Reset failed... Exiting...\n");
   40fc0:	01000174 	movhi	r4,5
   40fc4:	213c4104 	addi	r4,r4,-3836
   40fc8:	004dfd00 	call	4dfd0 <alt_printf>
		return -1;
   40fcc:	00bfffc4 	movi	r2,-1
   40fd0:	003f9406 	br	40e24 <__alt_data_end+0xfffda964>
      ps_avg = (u32) ps_time[0] + (u32) ps_time[1] + (u32) ps_time[2];
      ps_avg = ps_avg / 3;

      if ((ps_exit_time[0] - ps_entry_time[0]) > 10 || (ps_exit_time[1] - ps_entry_time[1]) > 10 || (ps_exit_time[2] - ps_entry_time[2]) > 10)
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
   40fd4:	193fea2e 	bgeu	r3,r4,40f80 <__alt_data_end+0xfffdaac0>
        {           /* An up gesture occured if the bottom LED had its midpoint first */
          ret = UP;
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
   40fd8:	3200112e 	bgeu	r6,r8,41020 <main+0x3f4>
			gest = ProcessSi1143Samples(&samples);
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
   40fdc:	01000174 	movhi	r4,5
   40fe0:	213c4f04 	addi	r4,r4,-3780
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40fe4:	90000015 	stw	zero,0(r18)
      ps_entry_time[array_counter] = 0;
   40fe8:	80000015 	stw	zero,0(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40fec:	90000115 	stw	zero,4(r18)
      ps_entry_time[array_counter] = 0;
   40ff0:	80000115 	stw	zero,4(r16)
        }
      }
    }
    for (array_counter = 0; array_counter < 3; array_counter++)
    {
      ps_exit_time[array_counter]  = 0;
   40ff4:	90000215 	stw	zero,8(r18)
      ps_entry_time[array_counter] = 0;
   40ff8:	80000215 	stw	zero,8(r16)
			DECA_si1143_irq_pop(si114x_handle, &samples);
			// process data in gesture algorithm
			gest = ProcessSi1143Samples(&samples);
			
			// report the gesture and increment counter
			if ( gest != NONE ) gest_cnt++;
   40ffc:	8c400044 	addi	r17,r17,1
			if ( gest == UP ) alt_printf("UP swipe detected!\n");
			if ( gest == DOWN ) alt_printf("DOWN swipe detected!\n");
   41000:	004dfd00 	call	4dfd0 <alt_printf>
   41004:	003f8406 	br	40e18 <__alt_data_end+0xfffda958>
      {
        diff_x = ps_time[1] - ps_time[2];
      }
      else
      {
        diff_x = ps_time[2] - ps_time[1];
   41008:	194dc83a 	sub	r6,r3,r5
   4100c:	003fbe06 	br	40f08 <__alt_data_end+0xfffdaa48>
      {
        diff_y2 = ps_time[0] - ps_time[2];
      }
	  else
      {
        diff_y2 = ps_time[2] - ps_time[0];
   41010:	1911c83a 	sub	r8,r3,r4
   41014:	003fc006 	br	40f18 <__alt_data_end+0xfffdaa58>
      {
        diff_y1 = ps_time[0] - ps_time[1];
      }
	  else
      {
        diff_y1 = ps_time[1] - ps_time[0];
   41018:	290fc83a 	sub	r7,r5,r4
   4101c:	003fbc06 	br	40f10 <__alt_data_end+0xfffdaa50>
        }
        else if((ps_time[0] < ps_time[1]) && (ps_time[2] < ps_time[1]) && (diff_x > ((diff_y1+diff_y2)/2)))
        {           /* A left gesture occured if the left LED had its midpoint last */
          ret = LEFT;
        }
        else if( (ps_time[0] < ps_time[2]) && (ps_time[1] < ps_time[2])  && (diff_x > ((diff_y1+diff_y2)/2)))
   41020:	20ff772e 	bgeu	r4,r3,40e00 <__alt_data_end+0xfffda940>
   41024:	28ff762e 	bgeu	r5,r3,40e00 <__alt_data_end+0xfffda940>
   41028:	41c7883a 	add	r3,r8,r7
   4102c:	1806d07a 	srli	r3,r3,1
   41030:	19bf732e 	bgeu	r3,r6,40e00 <__alt_data_end+0xfffda940>
        {           /* A right gesture occured if the right LED had midpoint later than the right LED */
          ret = RIGHT;
   41034:	00800104 	movi	r2,4
   41038:	003fc406 	br	40f4c <__alt_data_end+0xfffdaa8c>
      {
        if( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] <= ps_time[2]) && (diff_y2 > diff_x) ) )
        {           /* An up gesture occured if the bottom LED had its midpoint first */
          ret = UP;
        }
        else if  ( ( (ps_time[0] < ps_time[1]) &&  (diff_y1 > diff_x) ) || ( (ps_time[0] > ps_time[2]) && (diff_y2 > diff_x) ) )
   4103c:	323fe736 	bltu	r6,r8,40fdc <__alt_data_end+0xfffdab1c>
   41040:	003fbd06 	br	40f38 <__alt_data_end+0xfffdaa78>

00041044 <TMEM_Verify>:
#include "terasic_includes.h"
#include "mem_verify.h"



bool TMEM_Verify(alt_u32 BaseAddr, alt_u32 ByteLen, alt_u32 InitValue, bool bShowMessage){
   41044:	def7ea04 	addi	sp,sp,-8280
   41048:	dcc80f15 	stw	r19,8252(sp)
   4104c:	2827883a 	mov	r19,r5
   41050:	dd881215 	stw	r22,8264(sp)
   41054:	01400284 	movi	r5,10
   41058:	202d883a 	mov	r22,r4
   4105c:	9809883a 	mov	r4,r19
   41060:	ddc81315 	stw	r23,8268(sp)
   41064:	dc080c15 	stw	r16,8240(sp)
   41068:	dfc81515 	stw	ra,8276(sp)
   4106c:	df081415 	stw	fp,8272(sp)
   41070:	dd481115 	stw	r21,8260(sp)
   41074:	dd081015 	stw	r20,8256(sp)
   41078:	dc880e15 	stw	r18,8248(sp)
   4107c:	dc480d15 	stw	r17,8244(sp)
   41080:	3021883a 	mov	r16,r6
   41084:	382f883a 	mov	r23,r7
   41088:	00415dc0 	call	415dc <__udivsi3>
   4108c:	d8c80204 	addi	r3,sp,8200
   41090:	d9480c04 	addi	r5,sp,8240
   41094:	1009883a 	mov	r4,r2

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
        szProgress[i] = ByteLen/10*(i+1);     
   41098:	19000015 	stw	r4,0(r3)
   4109c:	18c00104 	addi	r3,r3,4
   410a0:	2089883a 	add	r4,r4,r2
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
   410a4:	197ffc1e 	bne	r3,r5,41098 <__alt_data_end+0xfffdabd8>
   410a8:	00800044 	movi	r2,1
   410ac:	d9c40004 	addi	r7,sp,4096
   410b0:	d9440104 	addi	r5,sp,4100
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
        if (i == 0)
   410b4:	1011883a 	mov	r8,r2
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
   410b8:	02410044 	movi	r9,1025
        if (i == 0)
   410bc:	1200a626 	beq	r2,r8,41358 <TMEM_Verify+0x314>
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
   410c0:	38c00017 	ldw	r3,0(r7)
   410c4:	18c00364 	muli	r3,r3,13
   410c8:	28c00015 	stw	r3,0(r5)
    }
    
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
   410cc:	12400426 	beq	r2,r9,410e0 <TMEM_Verify+0x9c>
   410d0:	10800044 	addi	r2,r2,1
   410d4:	39c00104 	addi	r7,r7,4
   410d8:	29400104 	addi	r5,r5,4
   410dc:	003ff706 	br	410bc <__alt_data_end+0xfffdabfc>
        if (i == 0)
            szData[i] = InitValue;
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
   410e0:	00aaaaf4 	movhi	r2,43691
   410e4:	10aaaa84 	addi	r2,r2,-21846
   410e8:	d8880115 	stw	r2,8196(sp)
    szData[nItemNum-2] = 0x55555555;
   410ec:	00955574 	movhi	r2,21845
   410f0:	10955544 	addi	r2,r2,21845
   410f4:	d8880015 	stw	r2,8192(sp)
    szData[nItemNum-3] = 0x00000000;
    szData[nItemNum-4] = 0xFFFFFFFF;
   410f8:	00bfffc4 	movi	r2,-1
        else     
            szData[i] = szData[i-1] * 13;
    }
    szData[nItemNum-1] = 0xAAAAAAAA;
    szData[nItemNum-2] = 0x55555555;
    szData[nItemNum-3] = 0x00000000;
   410fc:	d807ff15 	stw	zero,8188(sp)
    szData[nItemNum-4] = 0xFFFFFFFF;
   41100:	d887fe15 	stw	r2,8184(sp)
    
    if (bShowMessage)
   41104:	b800871e 	bne	r23,zero,41324 <TMEM_Verify+0x2e0>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
   41108:	b029883a 	mov	r20,r22
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
   4110c:	98008226 	beq	r19,zero,41318 <TMEM_Verify+0x2d4>
    alt_u32 *pDes, *pSrc, nItemNum, nPos;

    int nProgressIndex=0;
    alt_u32 szProgress[10];
    
    for(i=0;i<10;i++){
   41110:	002b883a 	mov	r21,zero
   41114:	0023883a 	mov	r17,zero
   41118:	04040104 	movi	r16,4100
        memcpy(pDes, szData, nAccessLen);
        pDes += nAccessLen/4;
        nPos += nAccessLen;
        
        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   4111c:	04800244 	movi	r18,9
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
        nRemainedLen = ByteLen - nPos;
   41120:	9c45c83a 	sub	r2,r19,r17
        if (nAccessLen > nRemainedLen)
            nAccessLen = nRemainedLen;
        memcpy(pDes, szData, nAccessLen);
   41124:	b009883a 	mov	r4,r22
   41128:	d9440104 	addi	r5,sp,4100
   4112c:	1400010e 	bge	r2,r16,41134 <TMEM_Verify+0xf0>
   41130:	1021883a 	mov	r16,r2
   41134:	800d883a 	mov	r6,r16
   41138:	00415ec0 	call	415ec <memcpy>
        pDes += nAccessLen/4;
   4113c:	8007883a 	mov	r3,r16
   41140:	80007316 	blt	r16,zero,41310 <TMEM_Verify+0x2cc>
   41144:	00bfff04 	movi	r2,-4
   41148:	1884703a 	and	r2,r3,r2
        nPos += nAccessLen;
   4114c:	8c23883a 	add	r17,r17,r16
    while(nPos < ByteLen){
        nRemainedLen = ByteLen - nPos;
        if (nAccessLen > nRemainedLen)
            nAccessLen = nRemainedLen;
        memcpy(pDes, szData, nAccessLen);
        pDes += nAccessLen/4;
   41150:	b0ad883a 	add	r22,r22,r2
        nPos += nAccessLen;
        
        if (bShowMessage){
   41154:	b8000626 	beq	r23,zero,41170 <TMEM_Verify+0x12c>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   41158:	ad45883a 	add	r2,r21,r21
   4115c:	1085883a 	add	r2,r2,r2
   41160:	d885883a 	add	r2,sp,r2
   41164:	95400216 	blt	r18,r21,41170 <TMEM_Verify+0x12c>
   41168:	10880217 	ldw	r2,8200(r2)
   4116c:	88802e2e 	bgeu	r17,r2,41228 <TMEM_Verify+0x1e4>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
   41170:	8cffeb36 	bltu	r17,r19,41120 <__alt_data_end+0xfffdac60>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
   41174:	004db540 	call	4db54 <alt_dcache_flush_all>
    
    if (bShowMessage){
   41178:	b800791e 	bne	r23,zero,41360 <TMEM_Verify+0x31c>
        nProgressIndex = 0;
   4117c:	04440104 	movi	r17,4100
   41180:	0025883a 	mov	r18,zero
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
        nRemainedLen = ByteLen - nPos;
   41184:	9c85c83a 	sub	r2,r19,r18
   41188:	1440010e 	bge	r2,r17,41190 <TMEM_Verify+0x14c>
   4118c:	1023883a 	mov	r17,r2
        if (nAccessLen > nRemainedLen)
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
   41190:	d809883a 	mov	r4,sp
   41194:	a00b883a 	mov	r5,r20
   41198:	880d883a 	mov	r6,r17
   4119c:	00415ec0 	call	415ec <memcpy>
        // verify
        nItemNum = nAccessLen / 4;
   411a0:	8811883a 	mov	r8,r17
   411a4:	88005816 	blt	r17,zero,41308 <TMEM_Verify+0x2c4>
   411a8:	402dd0ba 	srai	r22,r8,2
        for(i=0;i<nItemNum && bPass;i++){
   411ac:	b0002b26 	beq	r22,zero,4125c <TMEM_Verify+0x218>
            if (szRead[i] != szData[i]){
                if (bShowMessage){
                   printf("verify ng, read=%08Xh, expected=%08Xh, i=%Xh\n", (int)szRead[i], (int)szData[i], (int)(nPos/4+i));
   411b0:	9020d0ba 	srli	r16,r18,2
   411b4:	0007883a 	mov	r3,zero
   411b8:	873fffc4 	addi	fp,r16,-1
   411bc:	b739883a 	add	fp,r22,fp
   411c0:	d8c5883a 	add	r2,sp,r3
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
            if (szRead[i] != szData[i]){
   411c4:	d9040104 	addi	r4,sp,4100
   411c8:	11400017 	ldw	r5,0(r2)
   411cc:	20c5883a 	add	r2,r4,r3
   411d0:	11800017 	ldw	r6,0(r2)
   411d4:	29801d26 	beq	r5,r6,4124c <TMEM_Verify+0x208>
                if (bShowMessage){
   411d8:	b8000a1e 	bne	r23,zero,41204 <TMEM_Verify+0x1c0>
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
   411dc:	87001026 	beq	r16,fp,41220 <TMEM_Verify+0x1dc>
        }
        //
        pSrc += nItemNum;
        nPos += nAccessLen;

        if (bShowMessage){
   411e0:	b8004426 	beq	r23,zero,412f4 <TMEM_Verify+0x2b0>
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
   411e4:	b591883a 	add	r8,r22,r22
   411e8:	4211883a 	add	r8,r8,r8
        nPos += nAccessLen;

        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   411ec:	01000244 	movi	r4,9
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
   411f0:	a229883a 	add	r20,r20,r8
        nPos += nAccessLen;
   411f4:	9465883a 	add	r18,r18,r17

        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   411f8:	25403e16 	blt	r4,r21,412f4 <TMEM_Verify+0x2b0>
   411fc:	0021883a 	mov	r16,zero
   41200:	00001e06 	br	4127c <TMEM_Verify+0x238>
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
            if (szRead[i] != szData[i]){
                if (bShowMessage){
                   printf("verify ng, read=%08Xh, expected=%08Xh, i=%Xh\n", (int)szRead[i], (int)szData[i], (int)(nPos/4+i));
   41204:	01000174 	movhi	r4,5
   41208:	213c7204 	addi	r4,r4,-3640
   4120c:	800f883a 	mov	r7,r16
   41210:	00417500 	call	41750 <printf>
                   usleep(50);
   41214:	01000c84 	movi	r4,50
   41218:	004e3e40 	call	4e3e4 <usleep>
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
   4121c:	873ff01e 	bne	r16,fp,411e0 <__alt_data_end+0xfffdad20>
   41220:	0021883a 	mov	r16,zero
   41224:	00000e06 	br	41260 <TMEM_Verify+0x21c>
        pDes += nAccessLen/4;
        nPos += nAccessLen;
        
        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
                nProgressIndex++;
   41228:	ad400044 	addi	r21,r21,1
                printf("%02d%% ", nProgressIndex*10);
   4122c:	a94002a4 	muli	r5,r21,10
   41230:	01000174 	movhi	r4,5
   41234:	213c6c04 	addi	r4,r4,-3664
   41238:	00417500 	call	41750 <printf>
                usleep(50);
   4123c:	01000c84 	movi	r4,50
   41240:	004e3e40 	call	4e3e4 <usleep>
        printf("write...\n");
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
   41244:	8cffb636 	bltu	r17,r19,41120 <__alt_data_end+0xfffdac60>
   41248:	003fca06 	br	41174 <__alt_data_end+0xfffdacb4>
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
        for(i=0;i<nItemNum && bPass;i++){
   4124c:	87000326 	beq	r16,fp,4125c <TMEM_Verify+0x218>
   41250:	18c00104 	addi	r3,r3,4
   41254:	84000044 	addi	r16,r16,1
   41258:	003fd906 	br	411c0 <__alt_data_end+0xfffdad00>
   4125c:	04000044 	movi	r16,1
                }   
                bPass = FALSE;
            }    
        }
        //
        pSrc += nItemNum;
   41260:	b591883a 	add	r8,r22,r22
   41264:	4211883a 	add	r8,r8,r8
   41268:	a229883a 	add	r20,r20,r8
        nPos += nAccessLen;
   4126c:	9465883a 	add	r18,r18,r17

        if (bShowMessage){
   41270:	b8000726 	beq	r23,zero,41290 <TMEM_Verify+0x24c>
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   41274:	00800244 	movi	r2,9
   41278:	15400516 	blt	r2,r21,41290 <TMEM_Verify+0x24c>
   4127c:	ad45883a 	add	r2,r21,r21
   41280:	1085883a 	add	r2,r2,r2
   41284:	d885883a 	add	r2,sp,r2
   41288:	10880217 	ldw	r2,8200(r2)
   4128c:	9080112e 	bgeu	r18,r2,412d4 <TMEM_Verify+0x290>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
   41290:	80001826 	beq	r16,zero,412f4 <TMEM_Verify+0x2b0>
   41294:	94ffbb36 	bltu	r18,r19,41184 <__alt_data_end+0xfffdacc4>
   41298:	04000044 	movi	r16,1
                usleep(50);
            }
        }            
    }     
    
    if (bShowMessage)
   4129c:	b800171e 	bne	r23,zero,412fc <TMEM_Verify+0x2b8>
        printf("\n");
   
    
    return bPass;
}
   412a0:	8005883a 	mov	r2,r16
   412a4:	dfc81517 	ldw	ra,8276(sp)
   412a8:	df081417 	ldw	fp,8272(sp)
   412ac:	ddc81317 	ldw	r23,8268(sp)
   412b0:	dd881217 	ldw	r22,8264(sp)
   412b4:	dd481117 	ldw	r21,8260(sp)
   412b8:	dd081017 	ldw	r20,8256(sp)
   412bc:	dcc80f17 	ldw	r19,8252(sp)
   412c0:	dc880e17 	ldw	r18,8248(sp)
   412c4:	dc480d17 	ldw	r17,8244(sp)
   412c8:	dc080c17 	ldw	r16,8240(sp)
   412cc:	dec81604 	addi	sp,sp,8280
   412d0:	f800283a 	ret
        pSrc += nItemNum;
        nPos += nAccessLen;

        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
                nProgressIndex++;
   412d4:	ad400044 	addi	r21,r21,1
                printf("%02d%% ", nProgressIndex*10);
   412d8:	a94002a4 	muli	r5,r21,10
   412dc:	01000174 	movhi	r4,5
   412e0:	213c6c04 	addi	r4,r4,-3664
   412e4:	00417500 	call	41750 <printf>
                usleep(50);
   412e8:	01000c84 	movi	r4,50
   412ec:	004e3e40 	call	4e3e4 <usleep>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
   412f0:	803fe81e 	bne	r16,zero,41294 <__alt_data_end+0xfffdadd4>
        //
        pSrc += nItemNum;
        nPos += nAccessLen;

        if (bShowMessage){
            if (nProgressIndex <= 9 && nPos >= szProgress[nProgressIndex]){
   412f4:	0021883a 	mov	r16,zero
                usleep(50);
            }
        }            
    }     
    
    if (bShowMessage)
   412f8:	b83fe926 	beq	r23,zero,412a0 <__alt_data_end+0xfffdade0>
        printf("\n");
   412fc:	01000284 	movi	r4,10
   41300:	00417940 	call	41794 <putchar>
   41304:	003fe606 	br	412a0 <__alt_data_end+0xfffdade0>
        if (nAccessLen > nRemainedLen)
            nAccessLen = nRemainedLen;
       // memset(szRead, 0xAA, nAccessLen); // reset content    
        memcpy(szRead, pSrc, nAccessLen);
        // verify
        nItemNum = nAccessLen / 4;
   41308:	8a0000c4 	addi	r8,r17,3
   4130c:	003fa606 	br	411a8 <__alt_data_end+0xfffdace8>
    while(nPos < ByteLen){
        nRemainedLen = ByteLen - nPos;
        if (nAccessLen > nRemainedLen)
            nAccessLen = nRemainedLen;
        memcpy(pDes, szData, nAccessLen);
        pDes += nAccessLen/4;
   41310:	80c000c4 	addi	r3,r16,3
   41314:	003f8b06 	br	41144 <__alt_data_end+0xfffdac84>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
   41318:	004db540 	call	4db54 <alt_dcache_flush_all>
   4131c:	04000044 	movi	r16,1
   41320:	003fdf06 	br	412a0 <__alt_data_end+0xfffdade0>
    szData[nItemNum-2] = 0x55555555;
    szData[nItemNum-3] = 0x00000000;
    szData[nItemNum-4] = 0xFFFFFFFF;
    
    if (bShowMessage)
        printf("write...\n");
   41324:	01000174 	movhi	r4,5
   41328:	213c6904 	addi	r4,r4,-3676
    // write
    pDes = (alt_u32 *)BaseAddr;
   4132c:	b029883a 	mov	r20,r22
    szData[nItemNum-2] = 0x55555555;
    szData[nItemNum-3] = 0x00000000;
    szData[nItemNum-4] = 0xFFFFFFFF;
    
    if (bShowMessage)
        printf("write...\n");
   41330:	00418640 	call	41864 <puts>
    // write
    pDes = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szData);
    nPos = 0;
    while(nPos < ByteLen){
   41334:	983f761e 	bne	r19,zero,41110 <__alt_data_end+0xfffdac50>
                usleep(50);
            }
        }            
    } 
    
    alt_dcache_flush_all();
   41338:	004db540 	call	4db54 <alt_dcache_flush_all>
    
    if (bShowMessage){
        nProgressIndex = 0;
        printf("\nread/verify...\n");
   4133c:	01000174 	movhi	r4,5
   41340:	213c6e04 	addi	r4,r4,-3656
   41344:	00418640 	call	41864 <puts>
        usleep(50);
   41348:	01000c84 	movi	r4,50
   4134c:	04000044 	movi	r16,1
   41350:	004e3e40 	call	4e3e4 <usleep>
   41354:	003fe906 	br	412fc <__alt_data_end+0xfffdae3c>
    
    
    nItemNum = sizeof(szData)/sizeof(szData[0]);
    for(i=0;i<nItemNum;i++){
        if (i == 0)
            szData[i] = InitValue;
   41358:	dc040115 	stw	r16,4100(sp)
   4135c:	003f5c06 	br	410d0 <__alt_data_end+0xfffdac10>
    
    alt_dcache_flush_all();
    
    if (bShowMessage){
        nProgressIndex = 0;
        printf("\nread/verify...\n");
   41360:	01000174 	movhi	r4,5
   41364:	213c6e04 	addi	r4,r4,-3656
   41368:	00418640 	call	41864 <puts>
        usleep(50);
   4136c:	01000c84 	movi	r4,50
   41370:	004e3e40 	call	4e3e4 <usleep>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
   41374:	98000226 	beq	r19,zero,41380 <TMEM_Verify+0x33c>
    } 
    
    alt_dcache_flush_all();
    
    if (bShowMessage){
        nProgressIndex = 0;
   41378:	002b883a 	mov	r21,zero
   4137c:	003f7f06 	br	4117c <__alt_data_end+0xfffdacbc>
    
    // read & verify
    pSrc = (alt_u32 *)BaseAddr;
    nAccessLen = sizeof(szRead);
    nPos = 0;
    while(bPass && nPos < ByteLen){
   41380:	04000044 	movi	r16,1
   41384:	003fdd06 	br	412fc <__alt_data_end+0xfffdae3c>

00041388 <TMEM_QuickVerify>:
   
    
    return bPass;
}

bool TMEM_QuickVerify(alt_u32 BaseAddr, alt_u32 DataSize, alt_u32 DataWidth, alt_u32 AddrWidth){
   41388:	defffb04 	addi	sp,sp,-20
   4138c:	dcc00315 	stw	r19,12(sp)
   41390:	dc400115 	stw	r17,4(sp)
   41394:	dfc00415 	stw	ra,16(sp)
   41398:	dc800215 	stw	r18,8(sp)
   4139c:	dc000015 	stw	r16,0(sp)
   413a0:	2023883a 	mov	r17,r4
   413a4:	2827883a 	mov	r19,r5
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   413a8:	38003f26 	beq	r7,zero,414a8 <TMEM_QuickVerify+0x120>
   413ac:	0009883a 	mov	r4,zero
   413b0:	00800044 	movi	r2,1
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
   413b4:	01402a84 	movi	r5,170
   413b8:	00000106 	br	413c0 <TMEM_QuickVerify+0x38>
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   413bc:	80001726 	beq	r16,zero,4141c <TMEM_QuickVerify+0x94>
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
   413c0:	1085883a 	add	r2,r2,r2
   413c4:	1087883a 	add	r3,r2,r2
   413c8:	1c47883a 	add	r3,r3,r17
   413cc:	19400035 	stwio	r5,0(r3)
        //if (*(pMem + mask) != TestPattern)
        Read32 = IORD(BaseAddr, mask);
   413d0:	1c000037 	ldwio	r16,0(r3)
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   413d4:	21000044 	addi	r4,r4,1
        //*(pMem + mask) = TestPattern;
        IOWR(BaseAddr, mask, TestPattern);
        //if (*(pMem + mask) != TestPattern)
        Read32 = IORD(BaseAddr, mask);
        if (Read32 != TestPattern)
            bPass = FALSE;
   413d8:	84002aa0 	cmpeqi	r16,r16,170
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   413dc:	21fff71e 	bne	r4,r7,413bc <__alt_data_end+0xfffdaefc>
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
   413e0:	30001a26 	beq	r6,zero,4144c <TMEM_QuickVerify+0xc4>
   413e4:	80000d26 	beq	r16,zero,4141c <TMEM_QuickVerify+0x94>
    int i;
    
    //alt_u32 *pMem = (alt_u32 *)BaseAddr;
    // test address line
    mask = 0x01;
    for(i=0;i<AddrWidth && bPass;i++){
   413e8:	8807883a 	mov	r3,r17
   413ec:	0009883a 	mov	r4,zero
   413f0:	00800044 	movi	r2,1
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
        //*(pMem+i/32) = mask;
        Addr32 = i*13;
        IOWR(BaseAddr, Addr32, mask);
   413f4:	18800035 	stwio	r2,0(r3)
        Read32 = IORD(BaseAddr, Addr32);
   413f8:	1c000037 	ldwio	r16,0(r3)
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
   413fc:	80a1003a 	cmpeq	r16,r16,r2
            bPass = FALSE;
        mask <<= 1;
   41400:	1085883a 	add	r2,r2,r2
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
   41404:	21000044 	addi	r4,r4,1
        Read32 = IORD(BaseAddr, Addr32);
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
            bPass = FALSE;
        mask <<= 1;
        if (mask == 0x00)
   41408:	1000011e 	bne	r2,zero,41410 <TMEM_QuickVerify+0x88>
            mask = 0x01;    
   4140c:	00800044 	movi	r2,1
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
   41410:	21800e2e 	bgeu	r4,r6,4144c <TMEM_QuickVerify+0xc4>
   41414:	18c00d04 	addi	r3,r3,52
   41418:	803ff61e 	bne	r16,zero,413f4 <__alt_data_end+0xfffdaf34>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4141c:	00800174 	movhi	r2,5
   41420:	1082a204 	addi	r2,r2,2696
   41424:	11000017 	ldw	r4,0(r2)
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
   41428:	00418780 	call	41878 <srand>
   4142c:	0005883a 	mov	r2,zero
            bPass = FALSE;        
        
    }
    
    return bPass;
}
   41430:	dfc00417 	ldw	ra,16(sp)
   41434:	dcc00317 	ldw	r19,12(sp)
   41438:	dc800217 	ldw	r18,8(sp)
   4143c:	dc400117 	ldw	r17,4(sp)
   41440:	dc000017 	ldw	r16,0(sp)
   41444:	dec00504 	addi	sp,sp,20
   41448:	f800283a 	ret
   4144c:	00800174 	movhi	r2,5
   41450:	1082a204 	addi	r2,r2,2696
   41454:	11000017 	ldw	r4,0(r2)
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
   41458:	00418780 	call	41878 <srand>
    for(i=0;i<TestNum && bPass;i++){
   4145c:	803ff326 	beq	r16,zero,4142c <__alt_data_end+0xfffdaf6c>
   41460:	9826d0ba 	srli	r19,r19,2
        //if (*(pMem+i/32) != mask)
        if (Read32 != mask)
            bPass = FALSE;
        mask <<= 1;
        if (mask == 0x00)
            mask = 0x01;    
   41464:	04800234 	movhi	r18,8
    }
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
        TestAddr32 = rand()%(DataSize/4);
   41468:	00418900 	call	41890 <rand>
   4146c:	1009883a 	mov	r4,r2
   41470:	980b883a 	mov	r5,r19
   41474:	00415e40 	call	415e4 <__umodsi3>
   41478:	1021883a 	mov	r16,r2
        TestData32 = rand();
        IOWR(BaseAddr, TestAddr32, TestData32);
   4147c:	8421883a 	add	r16,r16,r16
   41480:	8421883a 	add	r16,r16,r16
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
        TestAddr32 = rand()%(DataSize/4);
        TestData32 = rand();
   41484:	00418900 	call	41890 <rand>
        IOWR(BaseAddr, TestAddr32, TestData32);
   41488:	8461883a 	add	r16,r16,r17
   4148c:	80800035 	stwio	r2,0(r16)
        Read32 = IORD(BaseAddr, TestAddr32);
   41490:	80c00037 	ldwio	r3,0(r16)
        if (Read32 != TestData32)
   41494:	10ffe51e 	bne	r2,r3,4142c <__alt_data_end+0xfffdaf6c>
   41498:	94bfffc4 	addi	r18,r18,-1
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
    for(i=0;i<TestNum && bPass;i++){
   4149c:	903ff21e 	bne	r18,zero,41468 <__alt_data_end+0xfffdafa8>
   414a0:	00800044 	movi	r2,1
   414a4:	003fe206 	br	41430 <__alt_data_end+0xfffdaf70>
        mask <<= 1;    
    }
    
    // test data line
    mask = 0x01;
    for(i=0;i<DataWidth && bPass;i++){
   414a8:	303fcf1e 	bne	r6,zero,413e8 <__alt_data_end+0xfffdaf28>
   414ac:	00800174 	movhi	r2,5
   414b0:	1082a204 	addi	r2,r2,2696
   414b4:	11000017 	ldw	r4,0(r2)
        if (mask == 0x00)
            mask = 0x01;    
    }
    
    // random data test
    srand(alt_nticks());
   414b8:	00418780 	call	41878 <srand>
   414bc:	003fe806 	br	41460 <__alt_data_end+0xfffdafa0>

000414c0 <udivmodsi4>:
   414c0:	2900182e 	bgeu	r5,r4,41524 <udivmodsi4+0x64>
   414c4:	28001716 	blt	r5,zero,41524 <udivmodsi4+0x64>
   414c8:	00800804 	movi	r2,32
   414cc:	00c00044 	movi	r3,1
   414d0:	00000206 	br	414dc <udivmodsi4+0x1c>
   414d4:	10001126 	beq	r2,zero,4151c <udivmodsi4+0x5c>
   414d8:	28000516 	blt	r5,zero,414f0 <udivmodsi4+0x30>
   414dc:	294b883a 	add	r5,r5,r5
   414e0:	10bfffc4 	addi	r2,r2,-1
   414e4:	18c7883a 	add	r3,r3,r3
   414e8:	293ffa36 	bltu	r5,r4,414d4 <__alt_data_end+0xfffdb014>
   414ec:	18000b26 	beq	r3,zero,4151c <udivmodsi4+0x5c>
   414f0:	0005883a 	mov	r2,zero
   414f4:	21400236 	bltu	r4,r5,41500 <udivmodsi4+0x40>
   414f8:	2149c83a 	sub	r4,r4,r5
   414fc:	10c4b03a 	or	r2,r2,r3
   41500:	1806d07a 	srli	r3,r3,1
   41504:	280ad07a 	srli	r5,r5,1
   41508:	183ffa1e 	bne	r3,zero,414f4 <__alt_data_end+0xfffdb034>
   4150c:	3000011e 	bne	r6,zero,41514 <udivmodsi4+0x54>
   41510:	f800283a 	ret
   41514:	2005883a 	mov	r2,r4
   41518:	f800283a 	ret
   4151c:	0005883a 	mov	r2,zero
   41520:	003ffa06 	br	4150c <__alt_data_end+0xfffdb04c>
   41524:	00c00044 	movi	r3,1
   41528:	003ff106 	br	414f0 <__alt_data_end+0xfffdb030>

0004152c <__divsi3>:
   4152c:	defffe04 	addi	sp,sp,-8
   41530:	dfc00115 	stw	ra,4(sp)
   41534:	dc000015 	stw	r16,0(sp)
   41538:	20000b16 	blt	r4,zero,41568 <__divsi3+0x3c>
   4153c:	0021883a 	mov	r16,zero
   41540:	28000c16 	blt	r5,zero,41574 <__divsi3+0x48>
   41544:	000d883a 	mov	r6,zero
   41548:	00414c00 	call	414c0 <udivmodsi4>
   4154c:	0407c83a 	sub	r3,zero,r16
   41550:	1884f03a 	xor	r2,r3,r2
   41554:	1405883a 	add	r2,r2,r16
   41558:	dfc00117 	ldw	ra,4(sp)
   4155c:	dc000017 	ldw	r16,0(sp)
   41560:	dec00204 	addi	sp,sp,8
   41564:	f800283a 	ret
   41568:	0109c83a 	sub	r4,zero,r4
   4156c:	04000044 	movi	r16,1
   41570:	283ff40e 	bge	r5,zero,41544 <__alt_data_end+0xfffdb084>
   41574:	014bc83a 	sub	r5,zero,r5
   41578:	8400005c 	xori	r16,r16,1
   4157c:	003ff106 	br	41544 <__alt_data_end+0xfffdb084>

00041580 <__modsi3>:
   41580:	defffd04 	addi	sp,sp,-12
   41584:	dfc00215 	stw	ra,8(sp)
   41588:	dc400115 	stw	r17,4(sp)
   4158c:	dc000015 	stw	r16,0(sp)
   41590:	20000c16 	blt	r4,zero,415c4 <__modsi3+0x44>
   41594:	0023883a 	mov	r17,zero
   41598:	0021883a 	mov	r16,zero
   4159c:	28000d16 	blt	r5,zero,415d4 <__modsi3+0x54>
   415a0:	01800044 	movi	r6,1
   415a4:	00414c00 	call	414c0 <udivmodsi4>
   415a8:	1404f03a 	xor	r2,r2,r16
   415ac:	8885883a 	add	r2,r17,r2
   415b0:	dfc00217 	ldw	ra,8(sp)
   415b4:	dc400117 	ldw	r17,4(sp)
   415b8:	dc000017 	ldw	r16,0(sp)
   415bc:	dec00304 	addi	sp,sp,12
   415c0:	f800283a 	ret
   415c4:	0109c83a 	sub	r4,zero,r4
   415c8:	04400044 	movi	r17,1
   415cc:	043fffc4 	movi	r16,-1
   415d0:	283ff30e 	bge	r5,zero,415a0 <__alt_data_end+0xfffdb0e0>
   415d4:	014bc83a 	sub	r5,zero,r5
   415d8:	003ff106 	br	415a0 <__alt_data_end+0xfffdb0e0>

000415dc <__udivsi3>:
   415dc:	000d883a 	mov	r6,zero
   415e0:	00414c01 	jmpi	414c0 <udivmodsi4>

000415e4 <__umodsi3>:
   415e4:	01800044 	movi	r6,1
   415e8:	00414c01 	jmpi	414c0 <udivmodsi4>

000415ec <memcpy>:
   415ec:	deffff04 	addi	sp,sp,-4
   415f0:	dc000015 	stw	r16,0(sp)
   415f4:	00c003c4 	movi	r3,15
   415f8:	2005883a 	mov	r2,r4
   415fc:	1980432e 	bgeu	r3,r6,4170c <memcpy+0x120>
   41600:	2146b03a 	or	r3,r4,r5
   41604:	18c000cc 	andi	r3,r3,3
   41608:	1800421e 	bne	r3,zero,41714 <memcpy+0x128>
   4160c:	343ffc04 	addi	r16,r6,-16
   41610:	8020d13a 	srli	r16,r16,4
   41614:	28c00104 	addi	r3,r5,4
   41618:	23400104 	addi	r13,r4,4
   4161c:	801e913a 	slli	r15,r16,4
   41620:	2b000204 	addi	r12,r5,8
   41624:	22c00204 	addi	r11,r4,8
   41628:	7bc00504 	addi	r15,r15,20
   4162c:	2a800304 	addi	r10,r5,12
   41630:	22400304 	addi	r9,r4,12
   41634:	2bdf883a 	add	r15,r5,r15
   41638:	2811883a 	mov	r8,r5
   4163c:	200f883a 	mov	r7,r4
   41640:	41000017 	ldw	r4,0(r8)
   41644:	39c00404 	addi	r7,r7,16
   41648:	18c00404 	addi	r3,r3,16
   4164c:	393ffc15 	stw	r4,-16(r7)
   41650:	1bbffc17 	ldw	r14,-16(r3)
   41654:	6b400404 	addi	r13,r13,16
   41658:	5ac00404 	addi	r11,r11,16
   4165c:	6bbffc15 	stw	r14,-16(r13)
   41660:	63800017 	ldw	r14,0(r12)
   41664:	4a400404 	addi	r9,r9,16
   41668:	42000404 	addi	r8,r8,16
   4166c:	5bbffc15 	stw	r14,-16(r11)
   41670:	53800017 	ldw	r14,0(r10)
   41674:	63000404 	addi	r12,r12,16
   41678:	52800404 	addi	r10,r10,16
   4167c:	4bbffc15 	stw	r14,-16(r9)
   41680:	1bffef1e 	bne	r3,r15,41640 <__alt_data_end+0xfffdb180>
   41684:	81c00044 	addi	r7,r16,1
   41688:	380e913a 	slli	r7,r7,4
   4168c:	310003cc 	andi	r4,r6,15
   41690:	02c000c4 	movi	r11,3
   41694:	11c7883a 	add	r3,r2,r7
   41698:	29cb883a 	add	r5,r5,r7
   4169c:	59001f2e 	bgeu	r11,r4,4171c <memcpy+0x130>
   416a0:	1813883a 	mov	r9,r3
   416a4:	2811883a 	mov	r8,r5
   416a8:	200f883a 	mov	r7,r4
   416ac:	42800017 	ldw	r10,0(r8)
   416b0:	4a400104 	addi	r9,r9,4
   416b4:	39ffff04 	addi	r7,r7,-4
   416b8:	4abfff15 	stw	r10,-4(r9)
   416bc:	42000104 	addi	r8,r8,4
   416c0:	59fffa36 	bltu	r11,r7,416ac <__alt_data_end+0xfffdb1ec>
   416c4:	213fff04 	addi	r4,r4,-4
   416c8:	2008d0ba 	srli	r4,r4,2
   416cc:	318000cc 	andi	r6,r6,3
   416d0:	21000044 	addi	r4,r4,1
   416d4:	2109883a 	add	r4,r4,r4
   416d8:	2109883a 	add	r4,r4,r4
   416dc:	1907883a 	add	r3,r3,r4
   416e0:	290b883a 	add	r5,r5,r4
   416e4:	30000626 	beq	r6,zero,41700 <memcpy+0x114>
   416e8:	198d883a 	add	r6,r3,r6
   416ec:	29c00003 	ldbu	r7,0(r5)
   416f0:	18c00044 	addi	r3,r3,1
   416f4:	29400044 	addi	r5,r5,1
   416f8:	19ffffc5 	stb	r7,-1(r3)
   416fc:	19bffb1e 	bne	r3,r6,416ec <__alt_data_end+0xfffdb22c>
   41700:	dc000017 	ldw	r16,0(sp)
   41704:	dec00104 	addi	sp,sp,4
   41708:	f800283a 	ret
   4170c:	2007883a 	mov	r3,r4
   41710:	003ff406 	br	416e4 <__alt_data_end+0xfffdb224>
   41714:	2007883a 	mov	r3,r4
   41718:	003ff306 	br	416e8 <__alt_data_end+0xfffdb228>
   4171c:	200d883a 	mov	r6,r4
   41720:	003ff006 	br	416e4 <__alt_data_end+0xfffdb224>

00041724 <_printf_r>:
   41724:	defffd04 	addi	sp,sp,-12
   41728:	dfc00015 	stw	ra,0(sp)
   4172c:	d9800115 	stw	r6,4(sp)
   41730:	d9c00215 	stw	r7,8(sp)
   41734:	280d883a 	mov	r6,r5
   41738:	21400217 	ldw	r5,8(r4)
   4173c:	d9c00104 	addi	r7,sp,4
   41740:	004198c0 	call	4198c <___vfprintf_internal_r>
   41744:	dfc00017 	ldw	ra,0(sp)
   41748:	dec00304 	addi	sp,sp,12
   4174c:	f800283a 	ret

00041750 <printf>:
   41750:	defffc04 	addi	sp,sp,-16
   41754:	dfc00015 	stw	ra,0(sp)
   41758:	d9400115 	stw	r5,4(sp)
   4175c:	d9800215 	stw	r6,8(sp)
   41760:	d9c00315 	stw	r7,12(sp)
   41764:	00800174 	movhi	r2,5
   41768:	10bfd604 	addi	r2,r2,-168
   4176c:	10800017 	ldw	r2,0(r2)
   41770:	200b883a 	mov	r5,r4
   41774:	d9800104 	addi	r6,sp,4
   41778:	11000217 	ldw	r4,8(r2)
   4177c:	00439880 	call	43988 <__vfprintf_internal>
   41780:	dfc00017 	ldw	ra,0(sp)
   41784:	dec00404 	addi	sp,sp,16
   41788:	f800283a 	ret

0004178c <_putchar_r>:
   4178c:	21800217 	ldw	r6,8(r4)
   41790:	00481581 	jmpi	48158 <_putc_r>

00041794 <putchar>:
   41794:	00800174 	movhi	r2,5
   41798:	10bfd604 	addi	r2,r2,-168
   4179c:	200b883a 	mov	r5,r4
   417a0:	11000017 	ldw	r4,0(r2)
   417a4:	21800217 	ldw	r6,8(r4)
   417a8:	00481581 	jmpi	48158 <_putc_r>

000417ac <_puts_r>:
   417ac:	defff604 	addi	sp,sp,-40
   417b0:	dc000715 	stw	r16,28(sp)
   417b4:	2021883a 	mov	r16,r4
   417b8:	2809883a 	mov	r4,r5
   417bc:	dc400815 	stw	r17,32(sp)
   417c0:	dfc00915 	stw	ra,36(sp)
   417c4:	2823883a 	mov	r17,r5
   417c8:	00418f40 	call	418f4 <strlen>
   417cc:	00c00174 	movhi	r3,5
   417d0:	18ffd604 	addi	r3,r3,-168
   417d4:	18c00017 	ldw	r3,0(r3)
   417d8:	11000044 	addi	r4,r2,1
   417dc:	d8800115 	stw	r2,4(sp)
   417e0:	18c00217 	ldw	r3,8(r3)
   417e4:	01400174 	movhi	r5,5
   417e8:	297c5404 	addi	r5,r5,-3760
   417ec:	1880030b 	ldhu	r2,12(r3)
   417f0:	d9400215 	stw	r5,8(sp)
   417f4:	d9000615 	stw	r4,24(sp)
   417f8:	01400044 	movi	r5,1
   417fc:	01000084 	movi	r4,2
   41800:	d9000515 	stw	r4,20(sp)
   41804:	dc400015 	stw	r17,0(sp)
   41808:	d9400315 	stw	r5,12(sp)
   4180c:	dec00415 	stw	sp,16(sp)
   41810:	1108000c 	andi	r4,r2,8192
   41814:	2000061e 	bne	r4,zero,41830 <_puts_r+0x84>
   41818:	19401917 	ldw	r5,100(r3)
   4181c:	0137ffc4 	movi	r4,-8193
   41820:	10880014 	ori	r2,r2,8192
   41824:	2908703a 	and	r4,r5,r4
   41828:	1880030d 	sth	r2,12(r3)
   4182c:	19001915 	stw	r4,100(r3)
   41830:	81400217 	ldw	r5,8(r16)
   41834:	8009883a 	mov	r4,r16
   41838:	d9800404 	addi	r6,sp,16
   4183c:	0045e100 	call	45e10 <__sfvwrite_r>
   41840:	1000061e 	bne	r2,zero,4185c <_puts_r+0xb0>
   41844:	00800284 	movi	r2,10
   41848:	dfc00917 	ldw	ra,36(sp)
   4184c:	dc400817 	ldw	r17,32(sp)
   41850:	dc000717 	ldw	r16,28(sp)
   41854:	dec00a04 	addi	sp,sp,40
   41858:	f800283a 	ret
   4185c:	00bfffc4 	movi	r2,-1
   41860:	003ff906 	br	41848 <__alt_data_end+0xfffdb388>

00041864 <puts>:
   41864:	00800174 	movhi	r2,5
   41868:	10bfd604 	addi	r2,r2,-168
   4186c:	200b883a 	mov	r5,r4
   41870:	11000017 	ldw	r4,0(r2)
   41874:	00417ac1 	jmpi	417ac <_puts_r>

00041878 <srand>:
   41878:	00800174 	movhi	r2,5
   4187c:	10bfd604 	addi	r2,r2,-168
   41880:	10800017 	ldw	r2,0(r2)
   41884:	11002915 	stw	r4,164(r2)
   41888:	10002a15 	stw	zero,168(r2)
   4188c:	f800283a 	ret

00041890 <rand>:
   41890:	00800174 	movhi	r2,5
   41894:	defffe04 	addi	sp,sp,-8
   41898:	10bfd604 	addi	r2,r2,-168
   4189c:	dc000015 	stw	r16,0(sp)
   418a0:	14000017 	ldw	r16,0(r2)
   418a4:	dfc00115 	stw	ra,4(sp)
   418a8:	01932574 	movhi	r6,19605
   418ac:	81002917 	ldw	r4,164(r16)
   418b0:	81402a17 	ldw	r5,168(r16)
   418b4:	01d614b4 	movhi	r7,22610
   418b8:	319fcb44 	addi	r6,r6,32557
   418bc:	39fd0b44 	addi	r7,r7,-3027
   418c0:	004a8d40 	call	4a8d4 <__muldi3>
   418c4:	11000044 	addi	r4,r2,1
   418c8:	2085803a 	cmpltu	r2,r4,r2
   418cc:	10c7883a 	add	r3,r2,r3
   418d0:	00a00034 	movhi	r2,32768
   418d4:	10bfffc4 	addi	r2,r2,-1
   418d8:	1884703a 	and	r2,r3,r2
   418dc:	81002915 	stw	r4,164(r16)
   418e0:	80c02a15 	stw	r3,168(r16)
   418e4:	dfc00117 	ldw	ra,4(sp)
   418e8:	dc000017 	ldw	r16,0(sp)
   418ec:	dec00204 	addi	sp,sp,8
   418f0:	f800283a 	ret

000418f4 <strlen>:
   418f4:	208000cc 	andi	r2,r4,3
   418f8:	10002026 	beq	r2,zero,4197c <strlen+0x88>
   418fc:	20800007 	ldb	r2,0(r4)
   41900:	10002026 	beq	r2,zero,41984 <strlen+0x90>
   41904:	2005883a 	mov	r2,r4
   41908:	00000206 	br	41914 <strlen+0x20>
   4190c:	10c00007 	ldb	r3,0(r2)
   41910:	18001826 	beq	r3,zero,41974 <strlen+0x80>
   41914:	10800044 	addi	r2,r2,1
   41918:	10c000cc 	andi	r3,r2,3
   4191c:	183ffb1e 	bne	r3,zero,4190c <__alt_data_end+0xfffdb44c>
   41920:	10c00017 	ldw	r3,0(r2)
   41924:	01ffbff4 	movhi	r7,65279
   41928:	39ffbfc4 	addi	r7,r7,-257
   4192c:	00ca303a 	nor	r5,zero,r3
   41930:	01a02074 	movhi	r6,32897
   41934:	19c7883a 	add	r3,r3,r7
   41938:	31a02004 	addi	r6,r6,-32640
   4193c:	1946703a 	and	r3,r3,r5
   41940:	1986703a 	and	r3,r3,r6
   41944:	1800091e 	bne	r3,zero,4196c <strlen+0x78>
   41948:	10800104 	addi	r2,r2,4
   4194c:	10c00017 	ldw	r3,0(r2)
   41950:	19cb883a 	add	r5,r3,r7
   41954:	00c6303a 	nor	r3,zero,r3
   41958:	28c6703a 	and	r3,r5,r3
   4195c:	1986703a 	and	r3,r3,r6
   41960:	183ff926 	beq	r3,zero,41948 <__alt_data_end+0xfffdb488>
   41964:	00000106 	br	4196c <strlen+0x78>
   41968:	10800044 	addi	r2,r2,1
   4196c:	10c00007 	ldb	r3,0(r2)
   41970:	183ffd1e 	bne	r3,zero,41968 <__alt_data_end+0xfffdb4a8>
   41974:	1105c83a 	sub	r2,r2,r4
   41978:	f800283a 	ret
   4197c:	2005883a 	mov	r2,r4
   41980:	003fe706 	br	41920 <__alt_data_end+0xfffdb460>
   41984:	0005883a 	mov	r2,zero
   41988:	f800283a 	ret

0004198c <___vfprintf_internal_r>:
   4198c:	defeb604 	addi	sp,sp,-1320
   41990:	dfc14915 	stw	ra,1316(sp)
   41994:	ddc14715 	stw	r23,1308(sp)
   41998:	dd814615 	stw	r22,1304(sp)
   4199c:	282f883a 	mov	r23,r5
   419a0:	202d883a 	mov	r22,r4
   419a4:	d9812a15 	stw	r6,1192(sp)
   419a8:	d9c12d15 	stw	r7,1204(sp)
   419ac:	df014815 	stw	fp,1312(sp)
   419b0:	dd414515 	stw	r21,1300(sp)
   419b4:	dd014415 	stw	r20,1296(sp)
   419b8:	dcc14315 	stw	r19,1292(sp)
   419bc:	dc814215 	stw	r18,1288(sp)
   419c0:	dc414115 	stw	r17,1284(sp)
   419c4:	dc014015 	stw	r16,1280(sp)
   419c8:	00464d00 	call	464d0 <_localeconv_r>
   419cc:	10800017 	ldw	r2,0(r2)
   419d0:	1009883a 	mov	r4,r2
   419d4:	d8813515 	stw	r2,1236(sp)
   419d8:	00418f40 	call	418f4 <strlen>
   419dc:	d8813815 	stw	r2,1248(sp)
   419e0:	b0000226 	beq	r22,zero,419ec <___vfprintf_internal_r+0x60>
   419e4:	b0800e17 	ldw	r2,56(r22)
   419e8:	10010426 	beq	r2,zero,41dfc <___vfprintf_internal_r+0x470>
   419ec:	b8c0030b 	ldhu	r3,12(r23)
   419f0:	1908000c 	andi	r4,r3,8192
   419f4:	1805883a 	mov	r2,r3
   419f8:	2000071e 	bne	r4,zero,41a18 <___vfprintf_internal_r+0x8c>
   419fc:	b9001917 	ldw	r4,100(r23)
   41a00:	18880014 	ori	r2,r3,8192
   41a04:	00f7ffc4 	movi	r3,-8193
   41a08:	20c8703a 	and	r4,r4,r3
   41a0c:	b880030d 	sth	r2,12(r23)
   41a10:	1007883a 	mov	r3,r2
   41a14:	b9001915 	stw	r4,100(r23)
   41a18:	1100020c 	andi	r4,r2,8
   41a1c:	2000a726 	beq	r4,zero,41cbc <___vfprintf_internal_r+0x330>
   41a20:	b9000417 	ldw	r4,16(r23)
   41a24:	2000a526 	beq	r4,zero,41cbc <___vfprintf_internal_r+0x330>
   41a28:	1080068c 	andi	r2,r2,26
   41a2c:	01000284 	movi	r4,10
   41a30:	1100ab26 	beq	r2,r4,41ce0 <___vfprintf_internal_r+0x354>
   41a34:	dac10e04 	addi	r11,sp,1080
   41a38:	db010dc4 	addi	r12,sp,1079
   41a3c:	d8800404 	addi	r2,sp,16
   41a40:	05000174 	movhi	r20,5
   41a44:	dac12815 	stw	r11,1184(sp)
   41a48:	5b17c83a 	sub	r11,r11,r12
   41a4c:	a53c8e84 	addi	r20,r20,-3526
   41a50:	db012915 	stw	r12,1188(sp)
   41a54:	d8811e15 	stw	r2,1144(sp)
   41a58:	d8012015 	stw	zero,1152(sp)
   41a5c:	d8011f15 	stw	zero,1148(sp)
   41a60:	d8013315 	stw	zero,1228(sp)
   41a64:	d8013715 	stw	zero,1244(sp)
   41a68:	d8013915 	stw	zero,1252(sp)
   41a6c:	d8013b15 	stw	zero,1260(sp)
   41a70:	d8013a15 	stw	zero,1256(sp)
   41a74:	d8012f15 	stw	zero,1212(sp)
   41a78:	1011883a 	mov	r8,r2
   41a7c:	dac13c15 	stw	r11,1264(sp)
   41a80:	db012a17 	ldw	r12,1192(sp)
   41a84:	60800007 	ldb	r2,0(r12)
   41a88:	1000df26 	beq	r2,zero,41e08 <___vfprintf_internal_r+0x47c>
   41a8c:	00c00944 	movi	r3,37
   41a90:	10c0dd26 	beq	r2,r3,41e08 <___vfprintf_internal_r+0x47c>
   41a94:	6021883a 	mov	r16,r12
   41a98:	00000106 	br	41aa0 <___vfprintf_internal_r+0x114>
   41a9c:	10c08426 	beq	r2,r3,41cb0 <___vfprintf_internal_r+0x324>
   41aa0:	84000044 	addi	r16,r16,1
   41aa4:	80800007 	ldb	r2,0(r16)
   41aa8:	103ffc1e 	bne	r2,zero,41a9c <__alt_data_end+0xfffdb5dc>
   41aac:	dac12a17 	ldw	r11,1192(sp)
   41ab0:	82e3c83a 	sub	r17,r16,r11
   41ab4:	88000f26 	beq	r17,zero,41af4 <___vfprintf_internal_r+0x168>
   41ab8:	d8c12017 	ldw	r3,1152(sp)
   41abc:	d8811f17 	ldw	r2,1148(sp)
   41ac0:	dac12a17 	ldw	r11,1192(sp)
   41ac4:	1c47883a 	add	r3,r3,r17
   41ac8:	10800044 	addi	r2,r2,1
   41acc:	d8c12015 	stw	r3,1152(sp)
   41ad0:	42c00015 	stw	r11,0(r8)
   41ad4:	44400115 	stw	r17,4(r8)
   41ad8:	d8811f15 	stw	r2,1148(sp)
   41adc:	00c001c4 	movi	r3,7
   41ae0:	1880b416 	blt	r3,r2,41db4 <___vfprintf_internal_r+0x428>
   41ae4:	42000204 	addi	r8,r8,8
   41ae8:	db012f17 	ldw	r12,1212(sp)
   41aec:	6459883a 	add	r12,r12,r17
   41af0:	db012f15 	stw	r12,1212(sp)
   41af4:	80800007 	ldb	r2,0(r16)
   41af8:	1000b526 	beq	r2,zero,41dd0 <___vfprintf_internal_r+0x444>
   41afc:	80800044 	addi	r2,r16,1
   41b00:	84000047 	ldb	r16,1(r16)
   41b04:	d8012785 	stb	zero,1182(sp)
   41b08:	000d883a 	mov	r6,zero
   41b0c:	027fffc4 	movi	r9,-1
   41b10:	d8012e15 	stw	zero,1208(sp)
   41b14:	0023883a 	mov	r17,zero
   41b18:	01001604 	movi	r4,88
   41b1c:	01400244 	movi	r5,9
   41b20:	02800a84 	movi	r10,42
   41b24:	01c01b04 	movi	r7,108
   41b28:	10c00044 	addi	r3,r2,1
   41b2c:	80bff804 	addi	r2,r16,-32
   41b30:	2082f236 	bltu	r4,r2,426fc <___vfprintf_internal_r+0xd70>
   41b34:	100490ba 	slli	r2,r2,2
   41b38:	02c00134 	movhi	r11,4
   41b3c:	5ac6d304 	addi	r11,r11,6988
   41b40:	12c5883a 	add	r2,r2,r11
   41b44:	10800017 	ldw	r2,0(r2)
   41b48:	1000683a 	jmp	r2
   41b4c:	00042544 	movi	zero,4245
   41b50:	000426fc 	xorhi	zero,zero,4251
   41b54:	000426fc 	xorhi	zero,zero,4251
   41b58:	00042564 	muli	zero,zero,4245
   41b5c:	000426fc 	xorhi	zero,zero,4251
   41b60:	000426fc 	xorhi	zero,zero,4251
   41b64:	000426fc 	xorhi	zero,zero,4251
   41b68:	000426fc 	xorhi	zero,zero,4251
   41b6c:	000426fc 	xorhi	zero,zero,4251
   41b70:	000426fc 	xorhi	zero,zero,4251
   41b74:	000426c0 	call	426c <__reset-0x3bd94>
   41b78:	000426ec 	andhi	zero,zero,4251
   41b7c:	000426fc 	xorhi	zero,zero,4251
   41b80:	00041e10 	cmplti	zero,zero,4216
   41b84:	00041e20 	cmpeqi	zero,zero,4216
   41b88:	000426fc 	xorhi	zero,zero,4251
   41b8c:	00041e60 	cmpeqi	zero,zero,4217
   41b90:	00042354 	movui	zero,4237
   41b94:	00042354 	movui	zero,4237
   41b98:	00042354 	movui	zero,4237
   41b9c:	00042354 	movui	zero,4237
   41ba0:	00042354 	movui	zero,4237
   41ba4:	00042354 	movui	zero,4237
   41ba8:	00042354 	movui	zero,4237
   41bac:	00042354 	movui	zero,4237
   41bb0:	00042354 	movui	zero,4237
   41bb4:	000426fc 	xorhi	zero,zero,4251
   41bb8:	000426fc 	xorhi	zero,zero,4251
   41bbc:	000426fc 	xorhi	zero,zero,4251
   41bc0:	000426fc 	xorhi	zero,zero,4251
   41bc4:	000426fc 	xorhi	zero,zero,4251
   41bc8:	000426fc 	xorhi	zero,zero,4251
   41bcc:	000426fc 	xorhi	zero,zero,4251
   41bd0:	000426fc 	xorhi	zero,zero,4251
   41bd4:	000426fc 	xorhi	zero,zero,4251
   41bd8:	000426fc 	xorhi	zero,zero,4251
   41bdc:	00042388 	cmpgei	zero,zero,4238
   41be0:	00041e70 	cmpltui	zero,zero,4217
   41be4:	000426fc 	xorhi	zero,zero,4251
   41be8:	00041e70 	cmpltui	zero,zero,4217
   41bec:	000426fc 	xorhi	zero,zero,4251
   41bf0:	000426fc 	xorhi	zero,zero,4251
   41bf4:	000426fc 	xorhi	zero,zero,4251
   41bf8:	000426fc 	xorhi	zero,zero,4251
   41bfc:	00041f14 	movui	zero,4220
   41c00:	000426fc 	xorhi	zero,zero,4251
   41c04:	000426fc 	xorhi	zero,zero,4251
   41c08:	00041f24 	muli	zero,zero,4220
   41c0c:	000426fc 	xorhi	zero,zero,4251
   41c10:	000426fc 	xorhi	zero,zero,4251
   41c14:	000426fc 	xorhi	zero,zero,4251
   41c18:	000426fc 	xorhi	zero,zero,4251
   41c1c:	000426fc 	xorhi	zero,zero,4251
   41c20:	00042320 	cmpeqi	zero,zero,4236
   41c24:	000426fc 	xorhi	zero,zero,4251
   41c28:	000426fc 	xorhi	zero,zero,4251
   41c2c:	000423d0 	cmplti	zero,zero,4239
   41c30:	000426fc 	xorhi	zero,zero,4251
   41c34:	000426fc 	xorhi	zero,zero,4251
   41c38:	000426fc 	xorhi	zero,zero,4251
   41c3c:	000426fc 	xorhi	zero,zero,4251
   41c40:	000426fc 	xorhi	zero,zero,4251
   41c44:	000426fc 	xorhi	zero,zero,4251
   41c48:	000426fc 	xorhi	zero,zero,4251
   41c4c:	000426fc 	xorhi	zero,zero,4251
   41c50:	000426fc 	xorhi	zero,zero,4251
   41c54:	000426fc 	xorhi	zero,zero,4251
   41c58:	000425c4 	movi	zero,4247
   41c5c:	00042574 	movhi	zero,4245
   41c60:	00041e70 	cmpltui	zero,zero,4217
   41c64:	00041e70 	cmpltui	zero,zero,4217
   41c68:	00041e70 	cmpltui	zero,zero,4217
   41c6c:	000425b4 	movhi	zero,4246
   41c70:	00042574 	movhi	zero,4245
   41c74:	000426fc 	xorhi	zero,zero,4251
   41c78:	000426fc 	xorhi	zero,zero,4251
   41c7c:	000424bc 	xorhi	zero,zero,4242
   41c80:	000426fc 	xorhi	zero,zero,4251
   41c84:	000424d0 	cmplti	zero,zero,4243
   41c88:	00042504 	movi	zero,4244
   41c8c:	00042604 	movi	zero,4248
   41c90:	0004242c 	andhi	zero,zero,4240
   41c94:	000426fc 	xorhi	zero,zero,4251
   41c98:	0004264c 	andi	zero,zero,4249
   41c9c:	000426fc 	xorhi	zero,zero,4251
   41ca0:	0004243c 	xorhi	zero,zero,4240
   41ca4:	000426fc 	xorhi	zero,zero,4251
   41ca8:	000426fc 	xorhi	zero,zero,4251
   41cac:	0004247c 	xorhi	zero,zero,4241
   41cb0:	db012a17 	ldw	r12,1192(sp)
   41cb4:	8323c83a 	sub	r17,r16,r12
   41cb8:	003f7e06 	br	41ab4 <__alt_data_end+0xfffdb5f4>
   41cbc:	b009883a 	mov	r4,r22
   41cc0:	b80b883a 	mov	r5,r23
   41cc4:	00439ac0 	call	439ac <__swsetup_r>
   41cc8:	10002d1e 	bne	r2,zero,41d80 <___vfprintf_internal_r+0x3f4>
   41ccc:	b8c0030b 	ldhu	r3,12(r23)
   41cd0:	01000284 	movi	r4,10
   41cd4:	1805883a 	mov	r2,r3
   41cd8:	1080068c 	andi	r2,r2,26
   41cdc:	113f551e 	bne	r2,r4,41a34 <__alt_data_end+0xfffdb574>
   41ce0:	b880038b 	ldhu	r2,14(r23)
   41ce4:	113fffcc 	andi	r4,r2,65535
   41ce8:	2120001c 	xori	r4,r4,32768
   41cec:	21200004 	addi	r4,r4,-32768
   41cf0:	203f5016 	blt	r4,zero,41a34 <__alt_data_end+0xfffdb574>
   41cf4:	bac01917 	ldw	r11,100(r23)
   41cf8:	ba800717 	ldw	r10,28(r23)
   41cfc:	ba400917 	ldw	r9,36(r23)
   41d00:	d9812a17 	ldw	r6,1192(sp)
   41d04:	d9c12d17 	ldw	r7,1204(sp)
   41d08:	02010004 	movi	r8,1024
   41d0c:	18ffff4c 	andi	r3,r3,65533
   41d10:	d881078d 	sth	r2,1054(sp)
   41d14:	b009883a 	mov	r4,r22
   41d18:	d8800404 	addi	r2,sp,16
   41d1c:	d9410404 	addi	r5,sp,1040
   41d20:	d8c1070d 	sth	r3,1052(sp)
   41d24:	dac11d15 	stw	r11,1140(sp)
   41d28:	da810b15 	stw	r10,1068(sp)
   41d2c:	da410d15 	stw	r9,1076(sp)
   41d30:	d8810415 	stw	r2,1040(sp)
   41d34:	d8810815 	stw	r2,1056(sp)
   41d38:	da010615 	stw	r8,1048(sp)
   41d3c:	da010915 	stw	r8,1060(sp)
   41d40:	d8010a15 	stw	zero,1064(sp)
   41d44:	004198c0 	call	4198c <___vfprintf_internal_r>
   41d48:	1021883a 	mov	r16,r2
   41d4c:	10000416 	blt	r2,zero,41d60 <___vfprintf_internal_r+0x3d4>
   41d50:	b009883a 	mov	r4,r22
   41d54:	d9410404 	addi	r5,sp,1040
   41d58:	00454040 	call	45404 <_fflush_r>
   41d5c:	1006ee1e 	bne	r2,zero,43918 <___vfprintf_internal_r+0x1f8c>
   41d60:	d881070b 	ldhu	r2,1052(sp)
   41d64:	1080100c 	andi	r2,r2,64
   41d68:	10000326 	beq	r2,zero,41d78 <___vfprintf_internal_r+0x3ec>
   41d6c:	b880030b 	ldhu	r2,12(r23)
   41d70:	10801014 	ori	r2,r2,64
   41d74:	b880030d 	sth	r2,12(r23)
   41d78:	8005883a 	mov	r2,r16
   41d7c:	00000106 	br	41d84 <___vfprintf_internal_r+0x3f8>
   41d80:	00bfffc4 	movi	r2,-1
   41d84:	dfc14917 	ldw	ra,1316(sp)
   41d88:	df014817 	ldw	fp,1312(sp)
   41d8c:	ddc14717 	ldw	r23,1308(sp)
   41d90:	dd814617 	ldw	r22,1304(sp)
   41d94:	dd414517 	ldw	r21,1300(sp)
   41d98:	dd014417 	ldw	r20,1296(sp)
   41d9c:	dcc14317 	ldw	r19,1292(sp)
   41da0:	dc814217 	ldw	r18,1288(sp)
   41da4:	dc414117 	ldw	r17,1284(sp)
   41da8:	dc014017 	ldw	r16,1280(sp)
   41dac:	dec14a04 	addi	sp,sp,1320
   41db0:	f800283a 	ret
   41db4:	b009883a 	mov	r4,r22
   41db8:	b80b883a 	mov	r5,r23
   41dbc:	d9811e04 	addi	r6,sp,1144
   41dc0:	0048c040 	call	48c04 <__sprint_r>
   41dc4:	1000081e 	bne	r2,zero,41de8 <___vfprintf_internal_r+0x45c>
   41dc8:	da000404 	addi	r8,sp,16
   41dcc:	003f4606 	br	41ae8 <__alt_data_end+0xfffdb628>
   41dd0:	d8812017 	ldw	r2,1152(sp)
   41dd4:	10000426 	beq	r2,zero,41de8 <___vfprintf_internal_r+0x45c>
   41dd8:	b009883a 	mov	r4,r22
   41ddc:	b80b883a 	mov	r5,r23
   41de0:	d9811e04 	addi	r6,sp,1144
   41de4:	0048c040 	call	48c04 <__sprint_r>
   41de8:	b880030b 	ldhu	r2,12(r23)
   41dec:	1080100c 	andi	r2,r2,64
   41df0:	103fe31e 	bne	r2,zero,41d80 <__alt_data_end+0xfffdb8c0>
   41df4:	d8812f17 	ldw	r2,1212(sp)
   41df8:	003fe206 	br	41d84 <__alt_data_end+0xfffdb8c4>
   41dfc:	b009883a 	mov	r4,r22
   41e00:	00459ac0 	call	459ac <__sinit>
   41e04:	003ef906 	br	419ec <__alt_data_end+0xfffdb52c>
   41e08:	dc012a17 	ldw	r16,1192(sp)
   41e0c:	003f3906 	br	41af4 <__alt_data_end+0xfffdb634>
   41e10:	1805883a 	mov	r2,r3
   41e14:	8c400114 	ori	r17,r17,4
   41e18:	1c000007 	ldb	r16,0(r3)
   41e1c:	003f4206 	br	41b28 <__alt_data_end+0xfffdb668>
   41e20:	1c000007 	ldb	r16,0(r3)
   41e24:	18800044 	addi	r2,r3,1
   41e28:	8286b326 	beq	r16,r10,438f8 <___vfprintf_internal_r+0x1f6c>
   41e2c:	82fff404 	addi	r11,r16,-48
   41e30:	1007883a 	mov	r3,r2
   41e34:	0013883a 	mov	r9,zero
   41e38:	2aff3c36 	bltu	r5,r11,41b2c <__alt_data_end+0xfffdb66c>
   41e3c:	1c000007 	ldb	r16,0(r3)
   41e40:	4a4002a4 	muli	r9,r9,10
   41e44:	18c00044 	addi	r3,r3,1
   41e48:	5a53883a 	add	r9,r11,r9
   41e4c:	82fff404 	addi	r11,r16,-48
   41e50:	2afffa2e 	bgeu	r5,r11,41e3c <__alt_data_end+0xfffdb97c>
   41e54:	483f350e 	bge	r9,zero,41b2c <__alt_data_end+0xfffdb66c>
   41e58:	027fffc4 	movi	r9,-1
   41e5c:	003f3306 	br	41b2c <__alt_data_end+0xfffdb66c>
   41e60:	8c402014 	ori	r17,r17,128
   41e64:	1805883a 	mov	r2,r3
   41e68:	1c000007 	ldb	r16,0(r3)
   41e6c:	003f2e06 	br	41b28 <__alt_data_end+0xfffdb668>
   41e70:	db012d17 	ldw	r12,1204(sp)
   41e74:	dac12d17 	ldw	r11,1204(sp)
   41e78:	d8c12a15 	stw	r3,1192(sp)
   41e7c:	63000017 	ldw	r12,0(r12)
   41e80:	5ac00117 	ldw	r11,4(r11)
   41e84:	d9812785 	stb	r6,1182(sp)
   41e88:	6009883a 	mov	r4,r12
   41e8c:	580b883a 	mov	r5,r11
   41e90:	db013715 	stw	r12,1244(sp)
   41e94:	da013f15 	stw	r8,1276(sp)
   41e98:	da413e15 	stw	r9,1272(sp)
   41e9c:	dac13915 	stw	r11,1252(sp)
   41ea0:	00488600 	call	48860 <__fpclassifyd>
   41ea4:	db012d17 	ldw	r12,1204(sp)
   41ea8:	04800044 	movi	r18,1
   41eac:	da013f17 	ldw	r8,1276(sp)
   41eb0:	64c00204 	addi	r19,r12,8
   41eb4:	da413e17 	ldw	r9,1272(sp)
   41eb8:	d9013717 	ldw	r4,1244(sp)
   41ebc:	d9413917 	ldw	r5,1252(sp)
   41ec0:	1484581e 	bne	r2,r18,43024 <___vfprintf_internal_r+0x1698>
   41ec4:	000d883a 	mov	r6,zero
   41ec8:	000f883a 	mov	r7,zero
   41ecc:	004c7500 	call	4c750 <__ledf2>
   41ed0:	da013f17 	ldw	r8,1276(sp)
   41ed4:	1005ef16 	blt	r2,zero,43694 <___vfprintf_internal_r+0x1d08>
   41ed8:	dd412783 	ldbu	r21,1182(sp)
   41edc:	008011c4 	movi	r2,71
   41ee0:	14053b0e 	bge	r2,r16,433d0 <___vfprintf_internal_r+0x1a44>
   41ee4:	00c00174 	movhi	r3,5
   41ee8:	18fc7f04 	addi	r3,r3,-3588
   41eec:	d8c13115 	stw	r3,1220(sp)
   41ef0:	02c000c4 	movi	r11,3
   41ef4:	00bfdfc4 	movi	r2,-129
   41ef8:	dac12b15 	stw	r11,1196(sp)
   41efc:	88a2703a 	and	r17,r17,r2
   41f00:	dcc12d15 	stw	r19,1204(sp)
   41f04:	5825883a 	mov	r18,r11
   41f08:	d8013215 	stw	zero,1224(sp)
   41f0c:	d8013415 	stw	zero,1232(sp)
   41f10:	00003206 	br	41fdc <___vfprintf_internal_r+0x650>
   41f14:	8c400214 	ori	r17,r17,8
   41f18:	1805883a 	mov	r2,r3
   41f1c:	1c000007 	ldb	r16,0(r3)
   41f20:	003f0106 	br	41b28 <__alt_data_end+0xfffdb668>
   41f24:	8c400414 	ori	r17,r17,16
   41f28:	d8c12a15 	stw	r3,1192(sp)
   41f2c:	88c0080c 	andi	r3,r17,32
   41f30:	d8812d17 	ldw	r2,1204(sp)
   41f34:	18017726 	beq	r3,zero,42514 <___vfprintf_internal_r+0xb88>
   41f38:	db012d17 	ldw	r12,1204(sp)
   41f3c:	14c00017 	ldw	r19,0(r2)
   41f40:	17000117 	ldw	fp,4(r2)
   41f44:	63000204 	addi	r12,r12,8
   41f48:	db012d15 	stw	r12,1204(sp)
   41f4c:	0005883a 	mov	r2,zero
   41f50:	9f06b03a 	or	r3,r19,fp
   41f54:	d8012785 	stb	zero,1182(sp)
   41f58:	da413215 	stw	r9,1224(sp)
   41f5c:	002b883a 	mov	r21,zero
   41f60:	48000216 	blt	r9,zero,41f6c <___vfprintf_internal_r+0x5e0>
   41f64:	013fdfc4 	movi	r4,-129
   41f68:	8922703a 	and	r17,r17,r4
   41f6c:	1801ed1e 	bne	r3,zero,42724 <___vfprintf_internal_r+0xd98>
   41f70:	4802e026 	beq	r9,zero,42af4 <___vfprintf_internal_r+0x1168>
   41f74:	10803fcc 	andi	r2,r2,255
   41f78:	00c00044 	movi	r3,1
   41f7c:	10c20f26 	beq	r2,r3,427bc <___vfprintf_internal_r+0xe30>
   41f80:	00c00084 	movi	r3,2
   41f84:	10c2fd26 	beq	r2,r3,42b7c <___vfprintf_internal_r+0x11f0>
   41f88:	d8c10e04 	addi	r3,sp,1080
   41f8c:	9808d0fa 	srli	r4,r19,3
   41f90:	e00a977a 	slli	r5,fp,29
   41f94:	e038d0fa 	srli	fp,fp,3
   41f98:	9cc001cc 	andi	r19,r19,7
   41f9c:	98800c04 	addi	r2,r19,48
   41fa0:	18ffffc4 	addi	r3,r3,-1
   41fa4:	2926b03a 	or	r19,r5,r4
   41fa8:	18800005 	stb	r2,0(r3)
   41fac:	9f08b03a 	or	r4,r19,fp
   41fb0:	203ff61e 	bne	r4,zero,41f8c <__alt_data_end+0xfffdbacc>
   41fb4:	8900004c 	andi	r4,r17,1
   41fb8:	d8c13115 	stw	r3,1220(sp)
   41fbc:	2003791e 	bne	r4,zero,42da4 <___vfprintf_internal_r+0x1418>
   41fc0:	dac12817 	ldw	r11,1184(sp)
   41fc4:	58e5c83a 	sub	r18,r11,r3
   41fc8:	9005883a 	mov	r2,r18
   41fcc:	9240010e 	bge	r18,r9,41fd4 <___vfprintf_internal_r+0x648>
   41fd0:	4805883a 	mov	r2,r9
   41fd4:	d8812b15 	stw	r2,1196(sp)
   41fd8:	d8013415 	stw	zero,1232(sp)
   41fdc:	a8803fcc 	andi	r2,r21,255
   41fe0:	1080201c 	xori	r2,r2,128
   41fe4:	10bfe004 	addi	r2,r2,-128
   41fe8:	10000326 	beq	r2,zero,41ff8 <___vfprintf_internal_r+0x66c>
   41fec:	db012b17 	ldw	r12,1196(sp)
   41ff0:	63000044 	addi	r12,r12,1
   41ff4:	db012b15 	stw	r12,1196(sp)
   41ff8:	88c0008c 	andi	r3,r17,2
   41ffc:	d8c12c15 	stw	r3,1200(sp)
   42000:	18000326 	beq	r3,zero,42010 <___vfprintf_internal_r+0x684>
   42004:	dac12b17 	ldw	r11,1196(sp)
   42008:	5ac00084 	addi	r11,r11,2
   4200c:	dac12b15 	stw	r11,1196(sp)
   42010:	8b00210c 	andi	r12,r17,132
   42014:	db013015 	stw	r12,1216(sp)
   42018:	6001c01e 	bne	r12,zero,4271c <___vfprintf_internal_r+0xd90>
   4201c:	dac12e17 	ldw	r11,1208(sp)
   42020:	db012b17 	ldw	r12,1196(sp)
   42024:	5b39c83a 	sub	fp,r11,r12
   42028:	0701bc0e 	bge	zero,fp,4271c <___vfprintf_internal_r+0xd90>
   4202c:	02400404 	movi	r9,16
   42030:	d8c12017 	ldw	r3,1152(sp)
   42034:	d8811f17 	ldw	r2,1148(sp)
   42038:	4f05220e 	bge	r9,fp,434c4 <___vfprintf_internal_r+0x1b38>
   4203c:	01400174 	movhi	r5,5
   42040:	297c9284 	addi	r5,r5,-3510
   42044:	d9413615 	stw	r5,1240(sp)
   42048:	482b883a 	mov	r21,r9
   4204c:	04c001c4 	movi	r19,7
   42050:	00000306 	br	42060 <___vfprintf_internal_r+0x6d4>
   42054:	e73ffc04 	addi	fp,fp,-16
   42058:	42000204 	addi	r8,r8,8
   4205c:	af00130e 	bge	r21,fp,420ac <___vfprintf_internal_r+0x720>
   42060:	02c00174 	movhi	r11,5
   42064:	18c00404 	addi	r3,r3,16
   42068:	10800044 	addi	r2,r2,1
   4206c:	5afc9284 	addi	r11,r11,-3510
   42070:	42c00015 	stw	r11,0(r8)
   42074:	45400115 	stw	r21,4(r8)
   42078:	d8c12015 	stw	r3,1152(sp)
   4207c:	d8811f15 	stw	r2,1148(sp)
   42080:	98bff40e 	bge	r19,r2,42054 <__alt_data_end+0xfffdbb94>
   42084:	b009883a 	mov	r4,r22
   42088:	b80b883a 	mov	r5,r23
   4208c:	d9811e04 	addi	r6,sp,1144
   42090:	0048c040 	call	48c04 <__sprint_r>
   42094:	103f541e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42098:	e73ffc04 	addi	fp,fp,-16
   4209c:	d8c12017 	ldw	r3,1152(sp)
   420a0:	d8811f17 	ldw	r2,1148(sp)
   420a4:	da000404 	addi	r8,sp,16
   420a8:	af3fed16 	blt	r21,fp,42060 <__alt_data_end+0xfffdbba0>
   420ac:	db013617 	ldw	r12,1240(sp)
   420b0:	e0c7883a 	add	r3,fp,r3
   420b4:	10800044 	addi	r2,r2,1
   420b8:	43000015 	stw	r12,0(r8)
   420bc:	47000115 	stw	fp,4(r8)
   420c0:	d8c12015 	stw	r3,1152(sp)
   420c4:	d8811f15 	stw	r2,1148(sp)
   420c8:	010001c4 	movi	r4,7
   420cc:	2082f416 	blt	r4,r2,42ca0 <___vfprintf_internal_r+0x1314>
   420d0:	d8812787 	ldb	r2,1182(sp)
   420d4:	42000204 	addi	r8,r8,8
   420d8:	10000c26 	beq	r2,zero,4210c <___vfprintf_internal_r+0x780>
   420dc:	d8811f17 	ldw	r2,1148(sp)
   420e0:	d9012784 	addi	r4,sp,1182
   420e4:	18c00044 	addi	r3,r3,1
   420e8:	10800044 	addi	r2,r2,1
   420ec:	41000015 	stw	r4,0(r8)
   420f0:	01000044 	movi	r4,1
   420f4:	41000115 	stw	r4,4(r8)
   420f8:	d8c12015 	stw	r3,1152(sp)
   420fc:	d8811f15 	stw	r2,1148(sp)
   42100:	010001c4 	movi	r4,7
   42104:	20828d16 	blt	r4,r2,42b3c <___vfprintf_internal_r+0x11b0>
   42108:	42000204 	addi	r8,r8,8
   4210c:	dac12c17 	ldw	r11,1200(sp)
   42110:	58000c26 	beq	r11,zero,42144 <___vfprintf_internal_r+0x7b8>
   42114:	d8811f17 	ldw	r2,1148(sp)
   42118:	d9012704 	addi	r4,sp,1180
   4211c:	18c00084 	addi	r3,r3,2
   42120:	10800044 	addi	r2,r2,1
   42124:	41000015 	stw	r4,0(r8)
   42128:	01000084 	movi	r4,2
   4212c:	41000115 	stw	r4,4(r8)
   42130:	d8c12015 	stw	r3,1152(sp)
   42134:	d8811f15 	stw	r2,1148(sp)
   42138:	010001c4 	movi	r4,7
   4213c:	20828716 	blt	r4,r2,42b5c <___vfprintf_internal_r+0x11d0>
   42140:	42000204 	addi	r8,r8,8
   42144:	db013017 	ldw	r12,1216(sp)
   42148:	00802004 	movi	r2,128
   4214c:	6081e926 	beq	r12,r2,428f4 <___vfprintf_internal_r+0xf68>
   42150:	db013217 	ldw	r12,1224(sp)
   42154:	64abc83a 	sub	r21,r12,r18
   42158:	0540260e 	bge	zero,r21,421f4 <___vfprintf_internal_r+0x868>
   4215c:	07000404 	movi	fp,16
   42160:	d8811f17 	ldw	r2,1148(sp)
   42164:	e5443d0e 	bge	fp,r21,4325c <___vfprintf_internal_r+0x18d0>
   42168:	01400174 	movhi	r5,5
   4216c:	297c8e84 	addi	r5,r5,-3526
   42170:	d9412c15 	stw	r5,1200(sp)
   42174:	04c001c4 	movi	r19,7
   42178:	00000306 	br	42188 <___vfprintf_internal_r+0x7fc>
   4217c:	ad7ffc04 	addi	r21,r21,-16
   42180:	42000204 	addi	r8,r8,8
   42184:	e540110e 	bge	fp,r21,421cc <___vfprintf_internal_r+0x840>
   42188:	18c00404 	addi	r3,r3,16
   4218c:	10800044 	addi	r2,r2,1
   42190:	45000015 	stw	r20,0(r8)
   42194:	47000115 	stw	fp,4(r8)
   42198:	d8c12015 	stw	r3,1152(sp)
   4219c:	d8811f15 	stw	r2,1148(sp)
   421a0:	98bff60e 	bge	r19,r2,4217c <__alt_data_end+0xfffdbcbc>
   421a4:	b009883a 	mov	r4,r22
   421a8:	b80b883a 	mov	r5,r23
   421ac:	d9811e04 	addi	r6,sp,1144
   421b0:	0048c040 	call	48c04 <__sprint_r>
   421b4:	103f0c1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   421b8:	ad7ffc04 	addi	r21,r21,-16
   421bc:	d8c12017 	ldw	r3,1152(sp)
   421c0:	d8811f17 	ldw	r2,1148(sp)
   421c4:	da000404 	addi	r8,sp,16
   421c8:	e57fef16 	blt	fp,r21,42188 <__alt_data_end+0xfffdbcc8>
   421cc:	dac12c17 	ldw	r11,1200(sp)
   421d0:	1d47883a 	add	r3,r3,r21
   421d4:	10800044 	addi	r2,r2,1
   421d8:	42c00015 	stw	r11,0(r8)
   421dc:	45400115 	stw	r21,4(r8)
   421e0:	d8c12015 	stw	r3,1152(sp)
   421e4:	d8811f15 	stw	r2,1148(sp)
   421e8:	010001c4 	movi	r4,7
   421ec:	20824b16 	blt	r4,r2,42b1c <___vfprintf_internal_r+0x1190>
   421f0:	42000204 	addi	r8,r8,8
   421f4:	8880400c 	andi	r2,r17,256
   421f8:	1001761e 	bne	r2,zero,427d4 <___vfprintf_internal_r+0xe48>
   421fc:	d8811f17 	ldw	r2,1148(sp)
   42200:	db013117 	ldw	r12,1220(sp)
   42204:	1c87883a 	add	r3,r3,r18
   42208:	10800044 	addi	r2,r2,1
   4220c:	43000015 	stw	r12,0(r8)
   42210:	44800115 	stw	r18,4(r8)
   42214:	d8c12015 	stw	r3,1152(sp)
   42218:	d8811f15 	stw	r2,1148(sp)
   4221c:	010001c4 	movi	r4,7
   42220:	20822616 	blt	r4,r2,42abc <___vfprintf_internal_r+0x1130>
   42224:	42000204 	addi	r8,r8,8
   42228:	8c40010c 	andi	r17,r17,4
   4222c:	88003126 	beq	r17,zero,422f4 <___vfprintf_internal_r+0x968>
   42230:	db012e17 	ldw	r12,1208(sp)
   42234:	dac12b17 	ldw	r11,1196(sp)
   42238:	62e1c83a 	sub	r16,r12,r11
   4223c:	04002d0e 	bge	zero,r16,422f4 <___vfprintf_internal_r+0x968>
   42240:	04400404 	movi	r17,16
   42244:	d8811f17 	ldw	r2,1148(sp)
   42248:	8c04df0e 	bge	r17,r16,435c8 <___vfprintf_internal_r+0x1c3c>
   4224c:	01000174 	movhi	r4,5
   42250:	213c9284 	addi	r4,r4,-3510
   42254:	d9013615 	stw	r4,1240(sp)
   42258:	048001c4 	movi	r18,7
   4225c:	00000306 	br	4226c <___vfprintf_internal_r+0x8e0>
   42260:	843ffc04 	addi	r16,r16,-16
   42264:	42000204 	addi	r8,r8,8
   42268:	8c00130e 	bge	r17,r16,422b8 <___vfprintf_internal_r+0x92c>
   4226c:	01400174 	movhi	r5,5
   42270:	18c00404 	addi	r3,r3,16
   42274:	10800044 	addi	r2,r2,1
   42278:	297c9284 	addi	r5,r5,-3510
   4227c:	41400015 	stw	r5,0(r8)
   42280:	44400115 	stw	r17,4(r8)
   42284:	d8c12015 	stw	r3,1152(sp)
   42288:	d8811f15 	stw	r2,1148(sp)
   4228c:	90bff40e 	bge	r18,r2,42260 <__alt_data_end+0xfffdbda0>
   42290:	b009883a 	mov	r4,r22
   42294:	b80b883a 	mov	r5,r23
   42298:	d9811e04 	addi	r6,sp,1144
   4229c:	0048c040 	call	48c04 <__sprint_r>
   422a0:	103ed11e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   422a4:	843ffc04 	addi	r16,r16,-16
   422a8:	d8c12017 	ldw	r3,1152(sp)
   422ac:	d8811f17 	ldw	r2,1148(sp)
   422b0:	da000404 	addi	r8,sp,16
   422b4:	8c3fed16 	blt	r17,r16,4226c <__alt_data_end+0xfffdbdac>
   422b8:	dac13617 	ldw	r11,1240(sp)
   422bc:	1c07883a 	add	r3,r3,r16
   422c0:	10800044 	addi	r2,r2,1
   422c4:	42c00015 	stw	r11,0(r8)
   422c8:	44000115 	stw	r16,4(r8)
   422cc:	d8c12015 	stw	r3,1152(sp)
   422d0:	d8811f15 	stw	r2,1148(sp)
   422d4:	010001c4 	movi	r4,7
   422d8:	2080060e 	bge	r4,r2,422f4 <___vfprintf_internal_r+0x968>
   422dc:	b009883a 	mov	r4,r22
   422e0:	b80b883a 	mov	r5,r23
   422e4:	d9811e04 	addi	r6,sp,1144
   422e8:	0048c040 	call	48c04 <__sprint_r>
   422ec:	103ebe1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   422f0:	d8c12017 	ldw	r3,1152(sp)
   422f4:	d8812b17 	ldw	r2,1196(sp)
   422f8:	db012e17 	ldw	r12,1208(sp)
   422fc:	1300010e 	bge	r2,r12,42304 <___vfprintf_internal_r+0x978>
   42300:	6005883a 	mov	r2,r12
   42304:	dac12f17 	ldw	r11,1212(sp)
   42308:	5897883a 	add	r11,r11,r2
   4230c:	dac12f15 	stw	r11,1212(sp)
   42310:	1801f21e 	bne	r3,zero,42adc <___vfprintf_internal_r+0x1150>
   42314:	d8011f15 	stw	zero,1148(sp)
   42318:	da000404 	addi	r8,sp,16
   4231c:	003dd806 	br	41a80 <__alt_data_end+0xfffdb5c0>
   42320:	8c400414 	ori	r17,r17,16
   42324:	d8c12a15 	stw	r3,1192(sp)
   42328:	88c0080c 	andi	r3,r17,32
   4232c:	d8812d17 	ldw	r2,1204(sp)
   42330:	18004626 	beq	r3,zero,4244c <___vfprintf_internal_r+0xac0>
   42334:	dac12d17 	ldw	r11,1204(sp)
   42338:	14c00017 	ldw	r19,0(r2)
   4233c:	17000117 	ldw	fp,4(r2)
   42340:	5ac00204 	addi	r11,r11,8
   42344:	dac12d15 	stw	r11,1204(sp)
   42348:	00800044 	movi	r2,1
   4234c:	9f06b03a 	or	r3,r19,fp
   42350:	003f0006 	br	41f54 <__alt_data_end+0xfffdba94>
   42354:	1805883a 	mov	r2,r3
   42358:	d8012e15 	stw	zero,1208(sp)
   4235c:	82fff404 	addi	r11,r16,-48
   42360:	0019883a 	mov	r12,zero
   42364:	14000007 	ldb	r16,0(r2)
   42368:	630002a4 	muli	r12,r12,10
   4236c:	18c00044 	addi	r3,r3,1
   42370:	1805883a 	mov	r2,r3
   42374:	62d9883a 	add	r12,r12,r11
   42378:	82fff404 	addi	r11,r16,-48
   4237c:	2afff92e 	bgeu	r5,r11,42364 <__alt_data_end+0xfffdbea4>
   42380:	db012e15 	stw	r12,1208(sp)
   42384:	003de906 	br	41b2c <__alt_data_end+0xfffdb66c>
   42388:	8c400414 	ori	r17,r17,16
   4238c:	d8c12a15 	stw	r3,1192(sp)
   42390:	d9812785 	stb	r6,1182(sp)
   42394:	8880080c 	andi	r2,r17,32
   42398:	d8c12d17 	ldw	r3,1204(sp)
   4239c:	10007a26 	beq	r2,zero,42588 <___vfprintf_internal_r+0xbfc>
   423a0:	db012d17 	ldw	r12,1204(sp)
   423a4:	18800117 	ldw	r2,4(r3)
   423a8:	1cc00017 	ldw	r19,0(r3)
   423ac:	63000204 	addi	r12,r12,8
   423b0:	db012d15 	stw	r12,1204(sp)
   423b4:	1039883a 	mov	fp,r2
   423b8:	10031016 	blt	r2,zero,42ffc <___vfprintf_internal_r+0x1670>
   423bc:	dd412783 	ldbu	r21,1182(sp)
   423c0:	da413215 	stw	r9,1224(sp)
   423c4:	00800044 	movi	r2,1
   423c8:	9f06b03a 	or	r3,r19,fp
   423cc:	003ee406 	br	41f60 <__alt_data_end+0xfffdbaa0>
   423d0:	03000174 	movhi	r12,5
   423d4:	633c8204 	addi	r12,r12,-3576
   423d8:	d8c12a15 	stw	r3,1192(sp)
   423dc:	d9812785 	stb	r6,1182(sp)
   423e0:	db013b15 	stw	r12,1260(sp)
   423e4:	88c0080c 	andi	r3,r17,32
   423e8:	d8812d17 	ldw	r2,1204(sp)
   423ec:	18002b26 	beq	r3,zero,4249c <___vfprintf_internal_r+0xb10>
   423f0:	dac12d17 	ldw	r11,1204(sp)
   423f4:	14c00017 	ldw	r19,0(r2)
   423f8:	17000117 	ldw	fp,4(r2)
   423fc:	5ac00204 	addi	r11,r11,8
   42400:	dac12d15 	stw	r11,1204(sp)
   42404:	8880004c 	andi	r2,r17,1
   42408:	10025b26 	beq	r2,zero,42d78 <___vfprintf_internal_r+0x13ec>
   4240c:	9f06b03a 	or	r3,r19,fp
   42410:	18037026 	beq	r3,zero,431d4 <___vfprintf_internal_r+0x1848>
   42414:	00800c04 	movi	r2,48
   42418:	d8812705 	stb	r2,1180(sp)
   4241c:	dc012745 	stb	r16,1181(sp)
   42420:	8c400094 	ori	r17,r17,2
   42424:	00800084 	movi	r2,2
   42428:	003eca06 	br	41f54 <__alt_data_end+0xfffdba94>
   4242c:	8c400814 	ori	r17,r17,32
   42430:	1805883a 	mov	r2,r3
   42434:	1c000007 	ldb	r16,0(r3)
   42438:	003dbb06 	br	41b28 <__alt_data_end+0xfffdb668>
   4243c:	d8c12a15 	stw	r3,1192(sp)
   42440:	88c0080c 	andi	r3,r17,32
   42444:	d8812d17 	ldw	r2,1204(sp)
   42448:	183fba1e 	bne	r3,zero,42334 <__alt_data_end+0xfffdbe74>
   4244c:	88c0040c 	andi	r3,r17,16
   42450:	18024c1e 	bne	r3,zero,42d84 <___vfprintf_internal_r+0x13f8>
   42454:	88c0100c 	andi	r3,r17,64
   42458:	18024a26 	beq	r3,zero,42d84 <___vfprintf_internal_r+0x13f8>
   4245c:	dac12d17 	ldw	r11,1204(sp)
   42460:	14c0000b 	ldhu	r19,0(r2)
   42464:	0039883a 	mov	fp,zero
   42468:	5ac00104 	addi	r11,r11,4
   4246c:	dac12d15 	stw	r11,1204(sp)
   42470:	00800044 	movi	r2,1
   42474:	9807883a 	mov	r3,r19
   42478:	003eb606 	br	41f54 <__alt_data_end+0xfffdba94>
   4247c:	00800174 	movhi	r2,5
   42480:	10bc8704 	addi	r2,r2,-3556
   42484:	d8c12a15 	stw	r3,1192(sp)
   42488:	d8813b15 	stw	r2,1260(sp)
   4248c:	d9812785 	stb	r6,1182(sp)
   42490:	88c0080c 	andi	r3,r17,32
   42494:	d8812d17 	ldw	r2,1204(sp)
   42498:	183fd51e 	bne	r3,zero,423f0 <__alt_data_end+0xfffdbf30>
   4249c:	88c0040c 	andi	r3,r17,16
   424a0:	18034126 	beq	r3,zero,431a8 <___vfprintf_internal_r+0x181c>
   424a4:	db012d17 	ldw	r12,1204(sp)
   424a8:	14c00017 	ldw	r19,0(r2)
   424ac:	0039883a 	mov	fp,zero
   424b0:	63000104 	addi	r12,r12,4
   424b4:	db012d15 	stw	r12,1204(sp)
   424b8:	003fd206 	br	42404 <__alt_data_end+0xfffdbf44>
   424bc:	1c000007 	ldb	r16,0(r3)
   424c0:	81c3d626 	beq	r16,r7,4341c <___vfprintf_internal_r+0x1a90>
   424c4:	8c400414 	ori	r17,r17,16
   424c8:	1805883a 	mov	r2,r3
   424cc:	003d9606 	br	41b28 <__alt_data_end+0xfffdb668>
   424d0:	d8c12a15 	stw	r3,1192(sp)
   424d4:	d9812785 	stb	r6,1182(sp)
   424d8:	8880080c 	andi	r2,r17,32
   424dc:	10033f26 	beq	r2,zero,431dc <___vfprintf_internal_r+0x1850>
   424e0:	db012d17 	ldw	r12,1204(sp)
   424e4:	dac12f17 	ldw	r11,1212(sp)
   424e8:	60800017 	ldw	r2,0(r12)
   424ec:	5807d7fa 	srai	r3,r11,31
   424f0:	63000104 	addi	r12,r12,4
   424f4:	db012d15 	stw	r12,1204(sp)
   424f8:	12c00015 	stw	r11,0(r2)
   424fc:	10c00115 	stw	r3,4(r2)
   42500:	003d5f06 	br	41a80 <__alt_data_end+0xfffdb5c0>
   42504:	d8c12a15 	stw	r3,1192(sp)
   42508:	88c0080c 	andi	r3,r17,32
   4250c:	d8812d17 	ldw	r2,1204(sp)
   42510:	183e891e 	bne	r3,zero,41f38 <__alt_data_end+0xfffdba78>
   42514:	88c0040c 	andi	r3,r17,16
   42518:	1801ea1e 	bne	r3,zero,42cc4 <___vfprintf_internal_r+0x1338>
   4251c:	88c0100c 	andi	r3,r17,64
   42520:	1801e826 	beq	r3,zero,42cc4 <___vfprintf_internal_r+0x1338>
   42524:	db012d17 	ldw	r12,1204(sp)
   42528:	14c0000b 	ldhu	r19,0(r2)
   4252c:	0039883a 	mov	fp,zero
   42530:	63000104 	addi	r12,r12,4
   42534:	db012d15 	stw	r12,1204(sp)
   42538:	0005883a 	mov	r2,zero
   4253c:	9807883a 	mov	r3,r19
   42540:	003e8406 	br	41f54 <__alt_data_end+0xfffdba94>
   42544:	30803fcc 	andi	r2,r6,255
   42548:	1080201c 	xori	r2,r2,128
   4254c:	10bfe004 	addi	r2,r2,-128
   42550:	10031d1e 	bne	r2,zero,431c8 <___vfprintf_internal_r+0x183c>
   42554:	1805883a 	mov	r2,r3
   42558:	01800804 	movi	r6,32
   4255c:	1c000007 	ldb	r16,0(r3)
   42560:	003d7106 	br	41b28 <__alt_data_end+0xfffdb668>
   42564:	8c400054 	ori	r17,r17,1
   42568:	1805883a 	mov	r2,r3
   4256c:	1c000007 	ldb	r16,0(r3)
   42570:	003d6d06 	br	41b28 <__alt_data_end+0xfffdb668>
   42574:	d8c12a15 	stw	r3,1192(sp)
   42578:	d9812785 	stb	r6,1182(sp)
   4257c:	8880080c 	andi	r2,r17,32
   42580:	d8c12d17 	ldw	r3,1204(sp)
   42584:	103f861e 	bne	r2,zero,423a0 <__alt_data_end+0xfffdbee0>
   42588:	8880040c 	andi	r2,r17,16
   4258c:	1001f31e 	bne	r2,zero,42d5c <___vfprintf_internal_r+0x13d0>
   42590:	8880100c 	andi	r2,r17,64
   42594:	1001f126 	beq	r2,zero,42d5c <___vfprintf_internal_r+0x13d0>
   42598:	1cc0000f 	ldh	r19,0(r3)
   4259c:	db012d17 	ldw	r12,1204(sp)
   425a0:	9839d7fa 	srai	fp,r19,31
   425a4:	63000104 	addi	r12,r12,4
   425a8:	db012d15 	stw	r12,1204(sp)
   425ac:	e005883a 	mov	r2,fp
   425b0:	003f8106 	br	423b8 <__alt_data_end+0xfffdbef8>
   425b4:	8c401014 	ori	r17,r17,64
   425b8:	1805883a 	mov	r2,r3
   425bc:	1c000007 	ldb	r16,0(r3)
   425c0:	003d5906 	br	41b28 <__alt_data_end+0xfffdb668>
   425c4:	db012d17 	ldw	r12,1204(sp)
   425c8:	d8c12a15 	stw	r3,1192(sp)
   425cc:	00c00044 	movi	r3,1
   425d0:	60800017 	ldw	r2,0(r12)
   425d4:	63000104 	addi	r12,r12,4
   425d8:	d8c12b15 	stw	r3,1196(sp)
   425dc:	d8012785 	stb	zero,1182(sp)
   425e0:	d8810405 	stb	r2,1040(sp)
   425e4:	db012d15 	stw	r12,1204(sp)
   425e8:	dac10404 	addi	r11,sp,1040
   425ec:	1825883a 	mov	r18,r3
   425f0:	d8013215 	stw	zero,1224(sp)
   425f4:	d8013415 	stw	zero,1232(sp)
   425f8:	dac13115 	stw	r11,1220(sp)
   425fc:	0005883a 	mov	r2,zero
   42600:	003e7d06 	br	41ff8 <__alt_data_end+0xfffdbb38>
   42604:	db012d17 	ldw	r12,1204(sp)
   42608:	00800c04 	movi	r2,48
   4260c:	d8812705 	stb	r2,1180(sp)
   42610:	64c00017 	ldw	r19,0(r12)
   42614:	00801e04 	movi	r2,120
   42618:	d8812745 	stb	r2,1181(sp)
   4261c:	00800174 	movhi	r2,5
   42620:	10bc8704 	addi	r2,r2,-3556
   42624:	63000104 	addi	r12,r12,4
   42628:	d8c12a15 	stw	r3,1192(sp)
   4262c:	d8813b15 	stw	r2,1260(sp)
   42630:	0039883a 	mov	fp,zero
   42634:	8c400094 	ori	r17,r17,2
   42638:	db012d15 	stw	r12,1204(sp)
   4263c:	00800084 	movi	r2,2
   42640:	04001e04 	movi	r16,120
   42644:	9807883a 	mov	r3,r19
   42648:	003e4206 	br	41f54 <__alt_data_end+0xfffdba94>
   4264c:	dac12d17 	ldw	r11,1204(sp)
   42650:	db012d17 	ldw	r12,1204(sp)
   42654:	d8c12a15 	stw	r3,1192(sp)
   42658:	5ac00017 	ldw	r11,0(r11)
   4265c:	d8012785 	stb	zero,1182(sp)
   42660:	64c00104 	addi	r19,r12,4
   42664:	dac13115 	stw	r11,1220(sp)
   42668:	5803e826 	beq	r11,zero,4360c <___vfprintf_internal_r+0x1c80>
   4266c:	d9013117 	ldw	r4,1220(sp)
   42670:	48037a16 	blt	r9,zero,4345c <___vfprintf_internal_r+0x1ad0>
   42674:	480d883a 	mov	r6,r9
   42678:	000b883a 	mov	r5,zero
   4267c:	da013f15 	stw	r8,1276(sp)
   42680:	da413e15 	stw	r9,1272(sp)
   42684:	0046e640 	call	46e64 <memchr>
   42688:	da013f17 	ldw	r8,1276(sp)
   4268c:	da413e17 	ldw	r9,1272(sp)
   42690:	10044426 	beq	r2,zero,437a4 <___vfprintf_internal_r+0x1e18>
   42694:	d8c13117 	ldw	r3,1220(sp)
   42698:	10e5c83a 	sub	r18,r2,r3
   4269c:	4c834416 	blt	r9,r18,433b0 <___vfprintf_internal_r+0x1a24>
   426a0:	9005883a 	mov	r2,r18
   426a4:	90037216 	blt	r18,zero,43470 <___vfprintf_internal_r+0x1ae4>
   426a8:	dd412783 	ldbu	r21,1182(sp)
   426ac:	d8812b15 	stw	r2,1196(sp)
   426b0:	dcc12d15 	stw	r19,1204(sp)
   426b4:	d8013215 	stw	zero,1224(sp)
   426b8:	d8013415 	stw	zero,1232(sp)
   426bc:	003e4706 	br	41fdc <__alt_data_end+0xfffdbb1c>
   426c0:	dac12d17 	ldw	r11,1204(sp)
   426c4:	db012d17 	ldw	r12,1204(sp)
   426c8:	5ac00017 	ldw	r11,0(r11)
   426cc:	dac12e15 	stw	r11,1208(sp)
   426d0:	62c00104 	addi	r11,r12,4
   426d4:	db012e17 	ldw	r12,1208(sp)
   426d8:	60034a16 	blt	r12,zero,43404 <___vfprintf_internal_r+0x1a78>
   426dc:	dac12d15 	stw	r11,1204(sp)
   426e0:	1805883a 	mov	r2,r3
   426e4:	1c000007 	ldb	r16,0(r3)
   426e8:	003d0f06 	br	41b28 <__alt_data_end+0xfffdb668>
   426ec:	1805883a 	mov	r2,r3
   426f0:	01800ac4 	movi	r6,43
   426f4:	1c000007 	ldb	r16,0(r3)
   426f8:	003d0b06 	br	41b28 <__alt_data_end+0xfffdb668>
   426fc:	d8c12a15 	stw	r3,1192(sp)
   42700:	d9812785 	stb	r6,1182(sp)
   42704:	803db226 	beq	r16,zero,41dd0 <__alt_data_end+0xfffdb910>
   42708:	00c00044 	movi	r3,1
   4270c:	d8c12b15 	stw	r3,1196(sp)
   42710:	dc010405 	stb	r16,1040(sp)
   42714:	d8012785 	stb	zero,1182(sp)
   42718:	003fb306 	br	425e8 <__alt_data_end+0xfffdc128>
   4271c:	d8c12017 	ldw	r3,1152(sp)
   42720:	003e6d06 	br	420d8 <__alt_data_end+0xfffdbc18>
   42724:	10803fcc 	andi	r2,r2,255
   42728:	00c00044 	movi	r3,1
   4272c:	10fe141e 	bne	r2,r3,41f80 <__alt_data_end+0xfffdbac0>
   42730:	e000021e 	bne	fp,zero,4273c <___vfprintf_internal_r+0xdb0>
   42734:	00800244 	movi	r2,9
   42738:	14c0202e 	bgeu	r2,r19,427bc <___vfprintf_internal_r+0xe30>
   4273c:	dc012b15 	stw	r16,1196(sp)
   42740:	dc412c15 	stw	r17,1200(sp)
   42744:	9821883a 	mov	r16,r19
   42748:	e023883a 	mov	r17,fp
   4274c:	dc810e04 	addi	r18,sp,1080
   42750:	4027883a 	mov	r19,r8
   42754:	4839883a 	mov	fp,r9
   42758:	8009883a 	mov	r4,r16
   4275c:	880b883a 	mov	r5,r17
   42760:	01800284 	movi	r6,10
   42764:	000f883a 	mov	r7,zero
   42768:	004aef40 	call	4aef4 <__umoddi3>
   4276c:	10800c04 	addi	r2,r2,48
   42770:	94bfffc4 	addi	r18,r18,-1
   42774:	8009883a 	mov	r4,r16
   42778:	880b883a 	mov	r5,r17
   4277c:	01800284 	movi	r6,10
   42780:	000f883a 	mov	r7,zero
   42784:	90800005 	stb	r2,0(r18)
   42788:	004a9340 	call	4a934 <__udivdi3>
   4278c:	1021883a 	mov	r16,r2
   42790:	10c4b03a 	or	r2,r2,r3
   42794:	1823883a 	mov	r17,r3
   42798:	103fef1e 	bne	r2,zero,42758 <__alt_data_end+0xfffdc298>
   4279c:	dac12817 	ldw	r11,1184(sp)
   427a0:	dc813115 	stw	r18,1220(sp)
   427a4:	dc012b17 	ldw	r16,1196(sp)
   427a8:	9811883a 	mov	r8,r19
   427ac:	dc412c17 	ldw	r17,1200(sp)
   427b0:	e013883a 	mov	r9,fp
   427b4:	5ca5c83a 	sub	r18,r11,r18
   427b8:	003e0306 	br	41fc8 <__alt_data_end+0xfffdbb08>
   427bc:	9cc00c04 	addi	r19,r19,48
   427c0:	d8c10dc4 	addi	r3,sp,1079
   427c4:	dcc10dc5 	stb	r19,1079(sp)
   427c8:	dc813c17 	ldw	r18,1264(sp)
   427cc:	d8c13115 	stw	r3,1220(sp)
   427d0:	003dfd06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   427d4:	00801944 	movi	r2,101
   427d8:	1400710e 	bge	r2,r16,429a0 <___vfprintf_internal_r+0x1014>
   427dc:	d9013717 	ldw	r4,1244(sp)
   427e0:	d9413917 	ldw	r5,1252(sp)
   427e4:	000d883a 	mov	r6,zero
   427e8:	000f883a 	mov	r7,zero
   427ec:	d8c13d15 	stw	r3,1268(sp)
   427f0:	da013f15 	stw	r8,1276(sp)
   427f4:	004c5ec0 	call	4c5ec <__eqdf2>
   427f8:	d8c13d17 	ldw	r3,1268(sp)
   427fc:	da013f17 	ldw	r8,1276(sp)
   42800:	1000ef1e 	bne	r2,zero,42bc0 <___vfprintf_internal_r+0x1234>
   42804:	d8811f17 	ldw	r2,1148(sp)
   42808:	01000174 	movhi	r4,5
   4280c:	213c8e04 	addi	r4,r4,-3528
   42810:	18c00044 	addi	r3,r3,1
   42814:	10800044 	addi	r2,r2,1
   42818:	41000015 	stw	r4,0(r8)
   4281c:	01000044 	movi	r4,1
   42820:	41000115 	stw	r4,4(r8)
   42824:	d8c12015 	stw	r3,1152(sp)
   42828:	d8811f15 	stw	r2,1148(sp)
   4282c:	010001c4 	movi	r4,7
   42830:	20828e16 	blt	r4,r2,4326c <___vfprintf_internal_r+0x18e0>
   42834:	42000204 	addi	r8,r8,8
   42838:	d8812617 	ldw	r2,1176(sp)
   4283c:	dac13317 	ldw	r11,1228(sp)
   42840:	12c00216 	blt	r2,r11,4284c <___vfprintf_internal_r+0xec0>
   42844:	8880004c 	andi	r2,r17,1
   42848:	103e7726 	beq	r2,zero,42228 <__alt_data_end+0xfffdbd68>
   4284c:	db013817 	ldw	r12,1248(sp)
   42850:	d8811f17 	ldw	r2,1148(sp)
   42854:	dac13517 	ldw	r11,1236(sp)
   42858:	1b07883a 	add	r3,r3,r12
   4285c:	10800044 	addi	r2,r2,1
   42860:	42c00015 	stw	r11,0(r8)
   42864:	43000115 	stw	r12,4(r8)
   42868:	d8c12015 	stw	r3,1152(sp)
   4286c:	d8811f15 	stw	r2,1148(sp)
   42870:	010001c4 	movi	r4,7
   42874:	2082ed16 	blt	r4,r2,4342c <___vfprintf_internal_r+0x1aa0>
   42878:	42000204 	addi	r8,r8,8
   4287c:	db013317 	ldw	r12,1228(sp)
   42880:	643fffc4 	addi	r16,r12,-1
   42884:	043e680e 	bge	zero,r16,42228 <__alt_data_end+0xfffdbd68>
   42888:	04800404 	movi	r18,16
   4288c:	d8811f17 	ldw	r2,1148(sp)
   42890:	94007e0e 	bge	r18,r16,42a8c <___vfprintf_internal_r+0x1100>
   42894:	01400174 	movhi	r5,5
   42898:	297c8e84 	addi	r5,r5,-3526
   4289c:	d9412c15 	stw	r5,1200(sp)
   428a0:	054001c4 	movi	r21,7
   428a4:	00000306 	br	428b4 <___vfprintf_internal_r+0xf28>
   428a8:	42000204 	addi	r8,r8,8
   428ac:	843ffc04 	addi	r16,r16,-16
   428b0:	9400790e 	bge	r18,r16,42a98 <___vfprintf_internal_r+0x110c>
   428b4:	18c00404 	addi	r3,r3,16
   428b8:	10800044 	addi	r2,r2,1
   428bc:	45000015 	stw	r20,0(r8)
   428c0:	44800115 	stw	r18,4(r8)
   428c4:	d8c12015 	stw	r3,1152(sp)
   428c8:	d8811f15 	stw	r2,1148(sp)
   428cc:	a8bff60e 	bge	r21,r2,428a8 <__alt_data_end+0xfffdc3e8>
   428d0:	b009883a 	mov	r4,r22
   428d4:	b80b883a 	mov	r5,r23
   428d8:	d9811e04 	addi	r6,sp,1144
   428dc:	0048c040 	call	48c04 <__sprint_r>
   428e0:	103d411e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   428e4:	d8c12017 	ldw	r3,1152(sp)
   428e8:	d8811f17 	ldw	r2,1148(sp)
   428ec:	da000404 	addi	r8,sp,16
   428f0:	003fee06 	br	428ac <__alt_data_end+0xfffdc3ec>
   428f4:	dac12e17 	ldw	r11,1208(sp)
   428f8:	db012b17 	ldw	r12,1196(sp)
   428fc:	5b2bc83a 	sub	r21,r11,r12
   42900:	057e130e 	bge	zero,r21,42150 <__alt_data_end+0xfffdbc90>
   42904:	07000404 	movi	fp,16
   42908:	d8811f17 	ldw	r2,1148(sp)
   4290c:	e543640e 	bge	fp,r21,436a0 <___vfprintf_internal_r+0x1d14>
   42910:	01400174 	movhi	r5,5
   42914:	297c8e84 	addi	r5,r5,-3526
   42918:	d9412c15 	stw	r5,1200(sp)
   4291c:	04c001c4 	movi	r19,7
   42920:	00000306 	br	42930 <___vfprintf_internal_r+0xfa4>
   42924:	ad7ffc04 	addi	r21,r21,-16
   42928:	42000204 	addi	r8,r8,8
   4292c:	e540110e 	bge	fp,r21,42974 <___vfprintf_internal_r+0xfe8>
   42930:	18c00404 	addi	r3,r3,16
   42934:	10800044 	addi	r2,r2,1
   42938:	45000015 	stw	r20,0(r8)
   4293c:	47000115 	stw	fp,4(r8)
   42940:	d8c12015 	stw	r3,1152(sp)
   42944:	d8811f15 	stw	r2,1148(sp)
   42948:	98bff60e 	bge	r19,r2,42924 <__alt_data_end+0xfffdc464>
   4294c:	b009883a 	mov	r4,r22
   42950:	b80b883a 	mov	r5,r23
   42954:	d9811e04 	addi	r6,sp,1144
   42958:	0048c040 	call	48c04 <__sprint_r>
   4295c:	103d221e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42960:	ad7ffc04 	addi	r21,r21,-16
   42964:	d8c12017 	ldw	r3,1152(sp)
   42968:	d8811f17 	ldw	r2,1148(sp)
   4296c:	da000404 	addi	r8,sp,16
   42970:	e57fef16 	blt	fp,r21,42930 <__alt_data_end+0xfffdc470>
   42974:	dac12c17 	ldw	r11,1200(sp)
   42978:	1d47883a 	add	r3,r3,r21
   4297c:	10800044 	addi	r2,r2,1
   42980:	42c00015 	stw	r11,0(r8)
   42984:	45400115 	stw	r21,4(r8)
   42988:	d8c12015 	stw	r3,1152(sp)
   4298c:	d8811f15 	stw	r2,1148(sp)
   42990:	010001c4 	movi	r4,7
   42994:	20819116 	blt	r4,r2,42fdc <___vfprintf_internal_r+0x1650>
   42998:	42000204 	addi	r8,r8,8
   4299c:	003dec06 	br	42150 <__alt_data_end+0xfffdbc90>
   429a0:	db013317 	ldw	r12,1228(sp)
   429a4:	00800044 	movi	r2,1
   429a8:	18c00044 	addi	r3,r3,1
   429ac:	1301530e 	bge	r2,r12,42efc <___vfprintf_internal_r+0x1570>
   429b0:	dc011f17 	ldw	r16,1148(sp)
   429b4:	dac13117 	ldw	r11,1220(sp)
   429b8:	00800044 	movi	r2,1
   429bc:	84000044 	addi	r16,r16,1
   429c0:	40800115 	stw	r2,4(r8)
   429c4:	42c00015 	stw	r11,0(r8)
   429c8:	d8c12015 	stw	r3,1152(sp)
   429cc:	dc011f15 	stw	r16,1148(sp)
   429d0:	008001c4 	movi	r2,7
   429d4:	14016b16 	blt	r2,r16,42f84 <___vfprintf_internal_r+0x15f8>
   429d8:	42000204 	addi	r8,r8,8
   429dc:	db013817 	ldw	r12,1248(sp)
   429e0:	dac13517 	ldw	r11,1236(sp)
   429e4:	84000044 	addi	r16,r16,1
   429e8:	1b07883a 	add	r3,r3,r12
   429ec:	42c00015 	stw	r11,0(r8)
   429f0:	43000115 	stw	r12,4(r8)
   429f4:	d8c12015 	stw	r3,1152(sp)
   429f8:	dc011f15 	stw	r16,1148(sp)
   429fc:	008001c4 	movi	r2,7
   42a00:	14016916 	blt	r2,r16,42fa8 <___vfprintf_internal_r+0x161c>
   42a04:	44800204 	addi	r18,r8,8
   42a08:	d9013717 	ldw	r4,1244(sp)
   42a0c:	d9413917 	ldw	r5,1252(sp)
   42a10:	000d883a 	mov	r6,zero
   42a14:	000f883a 	mov	r7,zero
   42a18:	d8c13d15 	stw	r3,1268(sp)
   42a1c:	004c5ec0 	call	4c5ec <__eqdf2>
   42a20:	d8c13d17 	ldw	r3,1268(sp)
   42a24:	db013317 	ldw	r12,1228(sp)
   42a28:	1000ae26 	beq	r2,zero,42ce4 <___vfprintf_internal_r+0x1358>
   42a2c:	dac13117 	ldw	r11,1220(sp)
   42a30:	60bfffc4 	addi	r2,r12,-1
   42a34:	1887883a 	add	r3,r3,r2
   42a38:	59000044 	addi	r4,r11,1
   42a3c:	84000044 	addi	r16,r16,1
   42a40:	90800115 	stw	r2,4(r18)
   42a44:	91000015 	stw	r4,0(r18)
   42a48:	d8c12015 	stw	r3,1152(sp)
   42a4c:	dc011f15 	stw	r16,1148(sp)
   42a50:	008001c4 	movi	r2,7
   42a54:	14014216 	blt	r2,r16,42f60 <___vfprintf_internal_r+0x15d4>
   42a58:	94800204 	addi	r18,r18,8
   42a5c:	dac13a17 	ldw	r11,1256(sp)
   42a60:	dd4122c4 	addi	r21,sp,1163
   42a64:	84000044 	addi	r16,r16,1
   42a68:	58c7883a 	add	r3,r11,r3
   42a6c:	95400015 	stw	r21,0(r18)
   42a70:	92c00115 	stw	r11,4(r18)
   42a74:	d8c12015 	stw	r3,1152(sp)
   42a78:	dc011f15 	stw	r16,1148(sp)
   42a7c:	008001c4 	movi	r2,7
   42a80:	14000e16 	blt	r2,r16,42abc <___vfprintf_internal_r+0x1130>
   42a84:	92000204 	addi	r8,r18,8
   42a88:	003de706 	br	42228 <__alt_data_end+0xfffdbd68>
   42a8c:	01000174 	movhi	r4,5
   42a90:	213c8e84 	addi	r4,r4,-3526
   42a94:	d9012c15 	stw	r4,1200(sp)
   42a98:	dac12c17 	ldw	r11,1200(sp)
   42a9c:	1c07883a 	add	r3,r3,r16
   42aa0:	44000115 	stw	r16,4(r8)
   42aa4:	42c00015 	stw	r11,0(r8)
   42aa8:	10800044 	addi	r2,r2,1
   42aac:	d8c12015 	stw	r3,1152(sp)
   42ab0:	d8811f15 	stw	r2,1148(sp)
   42ab4:	010001c4 	movi	r4,7
   42ab8:	20bdda0e 	bge	r4,r2,42224 <__alt_data_end+0xfffdbd64>
   42abc:	b009883a 	mov	r4,r22
   42ac0:	b80b883a 	mov	r5,r23
   42ac4:	d9811e04 	addi	r6,sp,1144
   42ac8:	0048c040 	call	48c04 <__sprint_r>
   42acc:	103cc61e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42ad0:	d8c12017 	ldw	r3,1152(sp)
   42ad4:	da000404 	addi	r8,sp,16
   42ad8:	003dd306 	br	42228 <__alt_data_end+0xfffdbd68>
   42adc:	b009883a 	mov	r4,r22
   42ae0:	b80b883a 	mov	r5,r23
   42ae4:	d9811e04 	addi	r6,sp,1144
   42ae8:	0048c040 	call	48c04 <__sprint_r>
   42aec:	103e0926 	beq	r2,zero,42314 <__alt_data_end+0xfffdbe54>
   42af0:	003cbd06 	br	41de8 <__alt_data_end+0xfffdb928>
   42af4:	10803fcc 	andi	r2,r2,255
   42af8:	1000651e 	bne	r2,zero,42c90 <___vfprintf_internal_r+0x1304>
   42afc:	8880004c 	andi	r2,r17,1
   42b00:	10013226 	beq	r2,zero,42fcc <___vfprintf_internal_r+0x1640>
   42b04:	00800c04 	movi	r2,48
   42b08:	d8c10dc4 	addi	r3,sp,1079
   42b0c:	d8810dc5 	stb	r2,1079(sp)
   42b10:	dc813c17 	ldw	r18,1264(sp)
   42b14:	d8c13115 	stw	r3,1220(sp)
   42b18:	003d2b06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   42b1c:	b009883a 	mov	r4,r22
   42b20:	b80b883a 	mov	r5,r23
   42b24:	d9811e04 	addi	r6,sp,1144
   42b28:	0048c040 	call	48c04 <__sprint_r>
   42b2c:	103cae1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42b30:	d8c12017 	ldw	r3,1152(sp)
   42b34:	da000404 	addi	r8,sp,16
   42b38:	003dae06 	br	421f4 <__alt_data_end+0xfffdbd34>
   42b3c:	b009883a 	mov	r4,r22
   42b40:	b80b883a 	mov	r5,r23
   42b44:	d9811e04 	addi	r6,sp,1144
   42b48:	0048c040 	call	48c04 <__sprint_r>
   42b4c:	103ca61e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42b50:	d8c12017 	ldw	r3,1152(sp)
   42b54:	da000404 	addi	r8,sp,16
   42b58:	003d6c06 	br	4210c <__alt_data_end+0xfffdbc4c>
   42b5c:	b009883a 	mov	r4,r22
   42b60:	b80b883a 	mov	r5,r23
   42b64:	d9811e04 	addi	r6,sp,1144
   42b68:	0048c040 	call	48c04 <__sprint_r>
   42b6c:	103c9e1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42b70:	d8c12017 	ldw	r3,1152(sp)
   42b74:	da000404 	addi	r8,sp,16
   42b78:	003d7206 	br	42144 <__alt_data_end+0xfffdbc84>
   42b7c:	d9413b17 	ldw	r5,1260(sp)
   42b80:	d8c10e04 	addi	r3,sp,1080
   42b84:	988003cc 	andi	r2,r19,15
   42b88:	e008973a 	slli	r4,fp,28
   42b8c:	2885883a 	add	r2,r5,r2
   42b90:	9826d13a 	srli	r19,r19,4
   42b94:	10800003 	ldbu	r2,0(r2)
   42b98:	e038d13a 	srli	fp,fp,4
   42b9c:	18ffffc4 	addi	r3,r3,-1
   42ba0:	24e6b03a 	or	r19,r4,r19
   42ba4:	18800005 	stb	r2,0(r3)
   42ba8:	9f04b03a 	or	r2,r19,fp
   42bac:	103ff51e 	bne	r2,zero,42b84 <__alt_data_end+0xfffdc6c4>
   42bb0:	db012817 	ldw	r12,1184(sp)
   42bb4:	d8c13115 	stw	r3,1220(sp)
   42bb8:	60e5c83a 	sub	r18,r12,r3
   42bbc:	003d0206 	br	41fc8 <__alt_data_end+0xfffdbb08>
   42bc0:	dc012617 	ldw	r16,1176(sp)
   42bc4:	0401b10e 	bge	zero,r16,4328c <___vfprintf_internal_r+0x1900>
   42bc8:	db013117 	ldw	r12,1220(sp)
   42bcc:	dac13317 	ldw	r11,1228(sp)
   42bd0:	62e1883a 	add	r16,r12,r11
   42bd4:	db013417 	ldw	r12,1232(sp)
   42bd8:	5825883a 	mov	r18,r11
   42bdc:	62c0010e 	bge	r12,r11,42be4 <___vfprintf_internal_r+0x1258>
   42be0:	6025883a 	mov	r18,r12
   42be4:	04800b0e 	bge	zero,r18,42c14 <___vfprintf_internal_r+0x1288>
   42be8:	d8811f17 	ldw	r2,1148(sp)
   42bec:	dac13117 	ldw	r11,1220(sp)
   42bf0:	1c87883a 	add	r3,r3,r18
   42bf4:	10800044 	addi	r2,r2,1
   42bf8:	42c00015 	stw	r11,0(r8)
   42bfc:	44800115 	stw	r18,4(r8)
   42c00:	d8c12015 	stw	r3,1152(sp)
   42c04:	d8811f15 	stw	r2,1148(sp)
   42c08:	010001c4 	movi	r4,7
   42c0c:	20824f16 	blt	r4,r2,4354c <___vfprintf_internal_r+0x1bc0>
   42c10:	42000204 	addi	r8,r8,8
   42c14:	90024b16 	blt	r18,zero,43544 <___vfprintf_internal_r+0x1bb8>
   42c18:	db013417 	ldw	r12,1232(sp)
   42c1c:	64a5c83a 	sub	r18,r12,r18
   42c20:	0480730e 	bge	zero,r18,42df0 <___vfprintf_internal_r+0x1464>
   42c24:	05400404 	movi	r21,16
   42c28:	d8811f17 	ldw	r2,1148(sp)
   42c2c:	ac817d0e 	bge	r21,r18,43224 <___vfprintf_internal_r+0x1898>
   42c30:	01400174 	movhi	r5,5
   42c34:	297c8e84 	addi	r5,r5,-3526
   42c38:	d9412c15 	stw	r5,1200(sp)
   42c3c:	070001c4 	movi	fp,7
   42c40:	00000306 	br	42c50 <___vfprintf_internal_r+0x12c4>
   42c44:	42000204 	addi	r8,r8,8
   42c48:	94bffc04 	addi	r18,r18,-16
   42c4c:	ac81780e 	bge	r21,r18,43230 <___vfprintf_internal_r+0x18a4>
   42c50:	18c00404 	addi	r3,r3,16
   42c54:	10800044 	addi	r2,r2,1
   42c58:	45000015 	stw	r20,0(r8)
   42c5c:	45400115 	stw	r21,4(r8)
   42c60:	d8c12015 	stw	r3,1152(sp)
   42c64:	d8811f15 	stw	r2,1148(sp)
   42c68:	e0bff60e 	bge	fp,r2,42c44 <__alt_data_end+0xfffdc784>
   42c6c:	b009883a 	mov	r4,r22
   42c70:	b80b883a 	mov	r5,r23
   42c74:	d9811e04 	addi	r6,sp,1144
   42c78:	0048c040 	call	48c04 <__sprint_r>
   42c7c:	103c5a1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42c80:	d8c12017 	ldw	r3,1152(sp)
   42c84:	d8811f17 	ldw	r2,1148(sp)
   42c88:	da000404 	addi	r8,sp,16
   42c8c:	003fee06 	br	42c48 <__alt_data_end+0xfffdc788>
   42c90:	dac10e04 	addi	r11,sp,1080
   42c94:	0025883a 	mov	r18,zero
   42c98:	dac13115 	stw	r11,1220(sp)
   42c9c:	003cca06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   42ca0:	b009883a 	mov	r4,r22
   42ca4:	b80b883a 	mov	r5,r23
   42ca8:	d9811e04 	addi	r6,sp,1144
   42cac:	0048c040 	call	48c04 <__sprint_r>
   42cb0:	103c4d1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42cb4:	d8c12017 	ldw	r3,1152(sp)
   42cb8:	d8812787 	ldb	r2,1182(sp)
   42cbc:	da000404 	addi	r8,sp,16
   42cc0:	003d0506 	br	420d8 <__alt_data_end+0xfffdbc18>
   42cc4:	dac12d17 	ldw	r11,1204(sp)
   42cc8:	14c00017 	ldw	r19,0(r2)
   42ccc:	0039883a 	mov	fp,zero
   42cd0:	5ac00104 	addi	r11,r11,4
   42cd4:	dac12d15 	stw	r11,1204(sp)
   42cd8:	0005883a 	mov	r2,zero
   42cdc:	9807883a 	mov	r3,r19
   42ce0:	003c9c06 	br	41f54 <__alt_data_end+0xfffdba94>
   42ce4:	657fffc4 	addi	r21,r12,-1
   42ce8:	057f5c0e 	bge	zero,r21,42a5c <__alt_data_end+0xfffdc59c>
   42cec:	07000404 	movi	fp,16
   42cf0:	e5408f0e 	bge	fp,r21,42f30 <___vfprintf_internal_r+0x15a4>
   42cf4:	01000174 	movhi	r4,5
   42cf8:	213c8e84 	addi	r4,r4,-3526
   42cfc:	d9012c15 	stw	r4,1200(sp)
   42d00:	01c001c4 	movi	r7,7
   42d04:	00000306 	br	42d14 <___vfprintf_internal_r+0x1388>
   42d08:	94800204 	addi	r18,r18,8
   42d0c:	ad7ffc04 	addi	r21,r21,-16
   42d10:	e5408a0e 	bge	fp,r21,42f3c <___vfprintf_internal_r+0x15b0>
   42d14:	18c00404 	addi	r3,r3,16
   42d18:	84000044 	addi	r16,r16,1
   42d1c:	95000015 	stw	r20,0(r18)
   42d20:	97000115 	stw	fp,4(r18)
   42d24:	d8c12015 	stw	r3,1152(sp)
   42d28:	dc011f15 	stw	r16,1148(sp)
   42d2c:	3c3ff60e 	bge	r7,r16,42d08 <__alt_data_end+0xfffdc848>
   42d30:	b009883a 	mov	r4,r22
   42d34:	b80b883a 	mov	r5,r23
   42d38:	d9811e04 	addi	r6,sp,1144
   42d3c:	d9c13d15 	stw	r7,1268(sp)
   42d40:	0048c040 	call	48c04 <__sprint_r>
   42d44:	d9c13d17 	ldw	r7,1268(sp)
   42d48:	103c271e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42d4c:	d8c12017 	ldw	r3,1152(sp)
   42d50:	dc011f17 	ldw	r16,1148(sp)
   42d54:	dc800404 	addi	r18,sp,16
   42d58:	003fec06 	br	42d0c <__alt_data_end+0xfffdc84c>
   42d5c:	1cc00017 	ldw	r19,0(r3)
   42d60:	dac12d17 	ldw	r11,1204(sp)
   42d64:	9839d7fa 	srai	fp,r19,31
   42d68:	5ac00104 	addi	r11,r11,4
   42d6c:	dac12d15 	stw	r11,1204(sp)
   42d70:	e005883a 	mov	r2,fp
   42d74:	003d9006 	br	423b8 <__alt_data_end+0xfffdbef8>
   42d78:	00800084 	movi	r2,2
   42d7c:	9f06b03a 	or	r3,r19,fp
   42d80:	003c7406 	br	41f54 <__alt_data_end+0xfffdba94>
   42d84:	db012d17 	ldw	r12,1204(sp)
   42d88:	14c00017 	ldw	r19,0(r2)
   42d8c:	0039883a 	mov	fp,zero
   42d90:	63000104 	addi	r12,r12,4
   42d94:	db012d15 	stw	r12,1204(sp)
   42d98:	00800044 	movi	r2,1
   42d9c:	9807883a 	mov	r3,r19
   42da0:	003c6c06 	br	41f54 <__alt_data_end+0xfffdba94>
   42da4:	10803fcc 	andi	r2,r2,255
   42da8:	1080201c 	xori	r2,r2,128
   42dac:	10bfe004 	addi	r2,r2,-128
   42db0:	01000c04 	movi	r4,48
   42db4:	1101a526 	beq	r2,r4,4344c <___vfprintf_internal_r+0x1ac0>
   42db8:	dac13117 	ldw	r11,1220(sp)
   42dbc:	db012817 	ldw	r12,1184(sp)
   42dc0:	193fffc5 	stb	r4,-1(r3)
   42dc4:	5affffc4 	addi	r11,r11,-1
   42dc8:	dac13115 	stw	r11,1220(sp)
   42dcc:	62e5c83a 	sub	r18,r12,r11
   42dd0:	003c7d06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   42dd4:	b009883a 	mov	r4,r22
   42dd8:	b80b883a 	mov	r5,r23
   42ddc:	d9811e04 	addi	r6,sp,1144
   42de0:	0048c040 	call	48c04 <__sprint_r>
   42de4:	103c001e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42de8:	d8c12017 	ldw	r3,1152(sp)
   42dec:	da000404 	addi	r8,sp,16
   42df0:	db013117 	ldw	r12,1220(sp)
   42df4:	dac13417 	ldw	r11,1232(sp)
   42df8:	d8812617 	ldw	r2,1176(sp)
   42dfc:	62e5883a 	add	r18,r12,r11
   42e00:	db013317 	ldw	r12,1228(sp)
   42e04:	13000216 	blt	r2,r12,42e10 <___vfprintf_internal_r+0x1484>
   42e08:	8900004c 	andi	r4,r17,1
   42e0c:	20000c26 	beq	r4,zero,42e40 <___vfprintf_internal_r+0x14b4>
   42e10:	dac13817 	ldw	r11,1248(sp)
   42e14:	d9011f17 	ldw	r4,1148(sp)
   42e18:	db013517 	ldw	r12,1236(sp)
   42e1c:	1ac7883a 	add	r3,r3,r11
   42e20:	21000044 	addi	r4,r4,1
   42e24:	43000015 	stw	r12,0(r8)
   42e28:	42c00115 	stw	r11,4(r8)
   42e2c:	d8c12015 	stw	r3,1152(sp)
   42e30:	d9011f15 	stw	r4,1148(sp)
   42e34:	014001c4 	movi	r5,7
   42e38:	2901cc16 	blt	r5,r4,4356c <___vfprintf_internal_r+0x1be0>
   42e3c:	42000204 	addi	r8,r8,8
   42e40:	dac13317 	ldw	r11,1228(sp)
   42e44:	8489c83a 	sub	r4,r16,r18
   42e48:	5885c83a 	sub	r2,r11,r2
   42e4c:	1021883a 	mov	r16,r2
   42e50:	2080010e 	bge	r4,r2,42e58 <___vfprintf_internal_r+0x14cc>
   42e54:	2021883a 	mov	r16,r4
   42e58:	04000a0e 	bge	zero,r16,42e84 <___vfprintf_internal_r+0x14f8>
   42e5c:	d9011f17 	ldw	r4,1148(sp)
   42e60:	1c07883a 	add	r3,r3,r16
   42e64:	44800015 	stw	r18,0(r8)
   42e68:	21000044 	addi	r4,r4,1
   42e6c:	44000115 	stw	r16,4(r8)
   42e70:	d8c12015 	stw	r3,1152(sp)
   42e74:	d9011f15 	stw	r4,1148(sp)
   42e78:	014001c4 	movi	r5,7
   42e7c:	2901d616 	blt	r5,r4,435d8 <___vfprintf_internal_r+0x1c4c>
   42e80:	42000204 	addi	r8,r8,8
   42e84:	8001df16 	blt	r16,zero,43604 <___vfprintf_internal_r+0x1c78>
   42e88:	1421c83a 	sub	r16,r2,r16
   42e8c:	043ce60e 	bge	zero,r16,42228 <__alt_data_end+0xfffdbd68>
   42e90:	04800404 	movi	r18,16
   42e94:	d8811f17 	ldw	r2,1148(sp)
   42e98:	943efc0e 	bge	r18,r16,42a8c <__alt_data_end+0xfffdc5cc>
   42e9c:	01400174 	movhi	r5,5
   42ea0:	297c8e84 	addi	r5,r5,-3526
   42ea4:	d9412c15 	stw	r5,1200(sp)
   42ea8:	054001c4 	movi	r21,7
   42eac:	00000306 	br	42ebc <___vfprintf_internal_r+0x1530>
   42eb0:	42000204 	addi	r8,r8,8
   42eb4:	843ffc04 	addi	r16,r16,-16
   42eb8:	943ef70e 	bge	r18,r16,42a98 <__alt_data_end+0xfffdc5d8>
   42ebc:	18c00404 	addi	r3,r3,16
   42ec0:	10800044 	addi	r2,r2,1
   42ec4:	45000015 	stw	r20,0(r8)
   42ec8:	44800115 	stw	r18,4(r8)
   42ecc:	d8c12015 	stw	r3,1152(sp)
   42ed0:	d8811f15 	stw	r2,1148(sp)
   42ed4:	a8bff60e 	bge	r21,r2,42eb0 <__alt_data_end+0xfffdc9f0>
   42ed8:	b009883a 	mov	r4,r22
   42edc:	b80b883a 	mov	r5,r23
   42ee0:	d9811e04 	addi	r6,sp,1144
   42ee4:	0048c040 	call	48c04 <__sprint_r>
   42ee8:	103bbf1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42eec:	d8c12017 	ldw	r3,1152(sp)
   42ef0:	d8811f17 	ldw	r2,1148(sp)
   42ef4:	da000404 	addi	r8,sp,16
   42ef8:	003fee06 	br	42eb4 <__alt_data_end+0xfffdc9f4>
   42efc:	8888703a 	and	r4,r17,r2
   42f00:	203eab1e 	bne	r4,zero,429b0 <__alt_data_end+0xfffdc4f0>
   42f04:	dc011f17 	ldw	r16,1148(sp)
   42f08:	db013117 	ldw	r12,1220(sp)
   42f0c:	40800115 	stw	r2,4(r8)
   42f10:	84000044 	addi	r16,r16,1
   42f14:	43000015 	stw	r12,0(r8)
   42f18:	d8c12015 	stw	r3,1152(sp)
   42f1c:	dc011f15 	stw	r16,1148(sp)
   42f20:	008001c4 	movi	r2,7
   42f24:	14000e16 	blt	r2,r16,42f60 <___vfprintf_internal_r+0x15d4>
   42f28:	44800204 	addi	r18,r8,8
   42f2c:	003ecb06 	br	42a5c <__alt_data_end+0xfffdc59c>
   42f30:	00800174 	movhi	r2,5
   42f34:	10bc8e84 	addi	r2,r2,-3526
   42f38:	d8812c15 	stw	r2,1200(sp)
   42f3c:	dac12c17 	ldw	r11,1200(sp)
   42f40:	1d47883a 	add	r3,r3,r21
   42f44:	84000044 	addi	r16,r16,1
   42f48:	92c00015 	stw	r11,0(r18)
   42f4c:	95400115 	stw	r21,4(r18)
   42f50:	d8c12015 	stw	r3,1152(sp)
   42f54:	dc011f15 	stw	r16,1148(sp)
   42f58:	008001c4 	movi	r2,7
   42f5c:	143ebe0e 	bge	r2,r16,42a58 <__alt_data_end+0xfffdc598>
   42f60:	b009883a 	mov	r4,r22
   42f64:	b80b883a 	mov	r5,r23
   42f68:	d9811e04 	addi	r6,sp,1144
   42f6c:	0048c040 	call	48c04 <__sprint_r>
   42f70:	103b9d1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42f74:	d8c12017 	ldw	r3,1152(sp)
   42f78:	dc011f17 	ldw	r16,1148(sp)
   42f7c:	dc800404 	addi	r18,sp,16
   42f80:	003eb606 	br	42a5c <__alt_data_end+0xfffdc59c>
   42f84:	b009883a 	mov	r4,r22
   42f88:	b80b883a 	mov	r5,r23
   42f8c:	d9811e04 	addi	r6,sp,1144
   42f90:	0048c040 	call	48c04 <__sprint_r>
   42f94:	103b941e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42f98:	d8c12017 	ldw	r3,1152(sp)
   42f9c:	dc011f17 	ldw	r16,1148(sp)
   42fa0:	da000404 	addi	r8,sp,16
   42fa4:	003e8d06 	br	429dc <__alt_data_end+0xfffdc51c>
   42fa8:	b009883a 	mov	r4,r22
   42fac:	b80b883a 	mov	r5,r23
   42fb0:	d9811e04 	addi	r6,sp,1144
   42fb4:	0048c040 	call	48c04 <__sprint_r>
   42fb8:	103b8b1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42fbc:	d8c12017 	ldw	r3,1152(sp)
   42fc0:	dc011f17 	ldw	r16,1148(sp)
   42fc4:	dc800404 	addi	r18,sp,16
   42fc8:	003e8f06 	br	42a08 <__alt_data_end+0xfffdc548>
   42fcc:	db010e04 	addi	r12,sp,1080
   42fd0:	0025883a 	mov	r18,zero
   42fd4:	db013115 	stw	r12,1220(sp)
   42fd8:	003bfb06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   42fdc:	b009883a 	mov	r4,r22
   42fe0:	b80b883a 	mov	r5,r23
   42fe4:	d9811e04 	addi	r6,sp,1144
   42fe8:	0048c040 	call	48c04 <__sprint_r>
   42fec:	103b7e1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   42ff0:	d8c12017 	ldw	r3,1152(sp)
   42ff4:	da000404 	addi	r8,sp,16
   42ff8:	003c5506 	br	42150 <__alt_data_end+0xfffdbc90>
   42ffc:	04e7c83a 	sub	r19,zero,r19
   43000:	9804c03a 	cmpne	r2,r19,zero
   43004:	0739c83a 	sub	fp,zero,fp
   43008:	e0b9c83a 	sub	fp,fp,r2
   4300c:	05400b44 	movi	r21,45
   43010:	dd412785 	stb	r21,1182(sp)
   43014:	da413215 	stw	r9,1224(sp)
   43018:	00800044 	movi	r2,1
   4301c:	9f06b03a 	or	r3,r19,fp
   43020:	003bcf06 	br	41f60 <__alt_data_end+0xfffdbaa0>
   43024:	da013f15 	stw	r8,1276(sp)
   43028:	da413e15 	stw	r9,1272(sp)
   4302c:	00488600 	call	48860 <__fpclassifyd>
   43030:	da013f17 	ldw	r8,1276(sp)
   43034:	da413e17 	ldw	r9,1272(sp)
   43038:	1000ce26 	beq	r2,zero,43374 <___vfprintf_internal_r+0x19e8>
   4303c:	057ff7c4 	movi	r21,-33
   43040:	00bfffc4 	movi	r2,-1
   43044:	856a703a 	and	r21,r16,r21
   43048:	4881f026 	beq	r9,r2,4380c <___vfprintf_internal_r+0x1e80>
   4304c:	008011c4 	movi	r2,71
   43050:	a881e526 	beq	r21,r2,437e8 <___vfprintf_internal_r+0x1e5c>
   43054:	db013917 	ldw	r12,1252(sp)
   43058:	8ac04014 	ori	r11,r17,256
   4305c:	dac12d15 	stw	r11,1204(sp)
   43060:	6001e416 	blt	r12,zero,437f4 <___vfprintf_internal_r+0x1e68>
   43064:	dc813917 	ldw	r18,1252(sp)
   43068:	d8012b05 	stb	zero,1196(sp)
   4306c:	00801984 	movi	r2,102
   43070:	80811826 	beq	r16,r2,434d4 <___vfprintf_internal_r+0x1b48>
   43074:	00801184 	movi	r2,70
   43078:	80811626 	beq	r16,r2,434d4 <___vfprintf_internal_r+0x1b48>
   4307c:	00801144 	movi	r2,69
   43080:	a881e026 	beq	r21,r2,43804 <___vfprintf_internal_r+0x1e78>
   43084:	4839883a 	mov	fp,r9
   43088:	d8812604 	addi	r2,sp,1176
   4308c:	d8800115 	stw	r2,4(sp)
   43090:	d9413717 	ldw	r5,1244(sp)
   43094:	d8812504 	addi	r2,sp,1172
   43098:	d8800215 	stw	r2,8(sp)
   4309c:	d8812104 	addi	r2,sp,1156
   430a0:	df000015 	stw	fp,0(sp)
   430a4:	d8800315 	stw	r2,12(sp)
   430a8:	b009883a 	mov	r4,r22
   430ac:	900d883a 	mov	r6,r18
   430b0:	01c00084 	movi	r7,2
   430b4:	da013f15 	stw	r8,1276(sp)
   430b8:	da413e15 	stw	r9,1272(sp)
   430bc:	0043cdc0 	call	43cdc <_dtoa_r>
   430c0:	d8813115 	stw	r2,1220(sp)
   430c4:	008019c4 	movi	r2,103
   430c8:	da013f17 	ldw	r8,1276(sp)
   430cc:	da413e17 	ldw	r9,1272(sp)
   430d0:	80800226 	beq	r16,r2,430dc <___vfprintf_internal_r+0x1750>
   430d4:	008011c4 	movi	r2,71
   430d8:	8081101e 	bne	r16,r2,4351c <___vfprintf_internal_r+0x1b90>
   430dc:	8880004c 	andi	r2,r17,1
   430e0:	1001df26 	beq	r2,zero,43860 <___vfprintf_internal_r+0x1ed4>
   430e4:	db013117 	ldw	r12,1220(sp)
   430e8:	6715883a 	add	r10,r12,fp
   430ec:	d9013717 	ldw	r4,1244(sp)
   430f0:	900b883a 	mov	r5,r18
   430f4:	000d883a 	mov	r6,zero
   430f8:	000f883a 	mov	r7,zero
   430fc:	da013f15 	stw	r8,1276(sp)
   43100:	da413e15 	stw	r9,1272(sp)
   43104:	da813d15 	stw	r10,1268(sp)
   43108:	004c5ec0 	call	4c5ec <__eqdf2>
   4310c:	da013f17 	ldw	r8,1276(sp)
   43110:	da413e17 	ldw	r9,1272(sp)
   43114:	da813d17 	ldw	r10,1268(sp)
   43118:	10016526 	beq	r2,zero,436b0 <___vfprintf_internal_r+0x1d24>
   4311c:	d8812117 	ldw	r2,1156(sp)
   43120:	1280062e 	bgeu	r2,r10,4313c <___vfprintf_internal_r+0x17b0>
   43124:	01000c04 	movi	r4,48
   43128:	10c00044 	addi	r3,r2,1
   4312c:	d8c12115 	stw	r3,1156(sp)
   43130:	11000005 	stb	r4,0(r2)
   43134:	d8812117 	ldw	r2,1156(sp)
   43138:	12bffb36 	bltu	r2,r10,43128 <__alt_data_end+0xfffdcc68>
   4313c:	db013117 	ldw	r12,1220(sp)
   43140:	1305c83a 	sub	r2,r2,r12
   43144:	d8813315 	stw	r2,1228(sp)
   43148:	008011c4 	movi	r2,71
   4314c:	a8814a26 	beq	r21,r2,43678 <___vfprintf_internal_r+0x1cec>
   43150:	00801944 	movi	r2,101
   43154:	14020a0e 	bge	r2,r16,43980 <___vfprintf_internal_r+0x1ff4>
   43158:	00801984 	movi	r2,102
   4315c:	8081b626 	beq	r16,r2,43838 <___vfprintf_internal_r+0x1eac>
   43160:	db012617 	ldw	r12,1176(sp)
   43164:	db013415 	stw	r12,1232(sp)
   43168:	db013417 	ldw	r12,1232(sp)
   4316c:	dac13317 	ldw	r11,1228(sp)
   43170:	62c1a816 	blt	r12,r11,43814 <___vfprintf_internal_r+0x1e88>
   43174:	8c40004c 	andi	r17,r17,1
   43178:	8801ca1e 	bne	r17,zero,438a4 <___vfprintf_internal_r+0x1f18>
   4317c:	6005883a 	mov	r2,r12
   43180:	6001b516 	blt	r12,zero,43858 <___vfprintf_internal_r+0x1ecc>
   43184:	dc813417 	ldw	r18,1232(sp)
   43188:	df012b07 	ldb	fp,1196(sp)
   4318c:	e001321e 	bne	fp,zero,43658 <___vfprintf_internal_r+0x1ccc>
   43190:	dc412d17 	ldw	r17,1204(sp)
   43194:	dd412783 	ldbu	r21,1182(sp)
   43198:	d8812b15 	stw	r2,1196(sp)
   4319c:	dcc12d15 	stw	r19,1204(sp)
   431a0:	d8013215 	stw	zero,1224(sp)
   431a4:	003b8d06 	br	41fdc <__alt_data_end+0xfffdbb1c>
   431a8:	88c0100c 	andi	r3,r17,64
   431ac:	18008226 	beq	r3,zero,433b8 <___vfprintf_internal_r+0x1a2c>
   431b0:	dac12d17 	ldw	r11,1204(sp)
   431b4:	14c0000b 	ldhu	r19,0(r2)
   431b8:	0039883a 	mov	fp,zero
   431bc:	5ac00104 	addi	r11,r11,4
   431c0:	dac12d15 	stw	r11,1204(sp)
   431c4:	003c8f06 	br	42404 <__alt_data_end+0xfffdbf44>
   431c8:	1c000007 	ldb	r16,0(r3)
   431cc:	1805883a 	mov	r2,r3
   431d0:	003a5506 	br	41b28 <__alt_data_end+0xfffdb668>
   431d4:	00800084 	movi	r2,2
   431d8:	003b5e06 	br	41f54 <__alt_data_end+0xfffdba94>
   431dc:	8880040c 	andi	r2,r17,16
   431e0:	1000091e 	bne	r2,zero,43208 <___vfprintf_internal_r+0x187c>
   431e4:	8c40100c 	andi	r17,r17,64
   431e8:	88000726 	beq	r17,zero,43208 <___vfprintf_internal_r+0x187c>
   431ec:	db012d17 	ldw	r12,1204(sp)
   431f0:	dac12f17 	ldw	r11,1212(sp)
   431f4:	60800017 	ldw	r2,0(r12)
   431f8:	63000104 	addi	r12,r12,4
   431fc:	db012d15 	stw	r12,1204(sp)
   43200:	12c0000d 	sth	r11,0(r2)
   43204:	003a1e06 	br	41a80 <__alt_data_end+0xfffdb5c0>
   43208:	db012d17 	ldw	r12,1204(sp)
   4320c:	dac12f17 	ldw	r11,1212(sp)
   43210:	60800017 	ldw	r2,0(r12)
   43214:	63000104 	addi	r12,r12,4
   43218:	db012d15 	stw	r12,1204(sp)
   4321c:	12c00015 	stw	r11,0(r2)
   43220:	003a1706 	br	41a80 <__alt_data_end+0xfffdb5c0>
   43224:	01000174 	movhi	r4,5
   43228:	213c8e84 	addi	r4,r4,-3526
   4322c:	d9012c15 	stw	r4,1200(sp)
   43230:	dac12c17 	ldw	r11,1200(sp)
   43234:	1c87883a 	add	r3,r3,r18
   43238:	10800044 	addi	r2,r2,1
   4323c:	42c00015 	stw	r11,0(r8)
   43240:	44800115 	stw	r18,4(r8)
   43244:	d8c12015 	stw	r3,1152(sp)
   43248:	d8811f15 	stw	r2,1148(sp)
   4324c:	010001c4 	movi	r4,7
   43250:	20bee016 	blt	r4,r2,42dd4 <__alt_data_end+0xfffdc914>
   43254:	42000204 	addi	r8,r8,8
   43258:	003ee506 	br	42df0 <__alt_data_end+0xfffdc930>
   4325c:	01000174 	movhi	r4,5
   43260:	213c8e84 	addi	r4,r4,-3526
   43264:	d9012c15 	stw	r4,1200(sp)
   43268:	003bd806 	br	421cc <__alt_data_end+0xfffdbd0c>
   4326c:	b009883a 	mov	r4,r22
   43270:	b80b883a 	mov	r5,r23
   43274:	d9811e04 	addi	r6,sp,1144
   43278:	0048c040 	call	48c04 <__sprint_r>
   4327c:	103ada1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   43280:	d8c12017 	ldw	r3,1152(sp)
   43284:	da000404 	addi	r8,sp,16
   43288:	003d6b06 	br	42838 <__alt_data_end+0xfffdc378>
   4328c:	d8811f17 	ldw	r2,1148(sp)
   43290:	03000174 	movhi	r12,5
   43294:	01000044 	movi	r4,1
   43298:	18c00044 	addi	r3,r3,1
   4329c:	10800044 	addi	r2,r2,1
   432a0:	633c8e04 	addi	r12,r12,-3528
   432a4:	41000115 	stw	r4,4(r8)
   432a8:	43000015 	stw	r12,0(r8)
   432ac:	d8c12015 	stw	r3,1152(sp)
   432b0:	d8811f15 	stw	r2,1148(sp)
   432b4:	010001c4 	movi	r4,7
   432b8:	20804916 	blt	r4,r2,433e0 <___vfprintf_internal_r+0x1a54>
   432bc:	42000204 	addi	r8,r8,8
   432c0:	8000041e 	bne	r16,zero,432d4 <___vfprintf_internal_r+0x1948>
   432c4:	dac13317 	ldw	r11,1228(sp)
   432c8:	5800021e 	bne	r11,zero,432d4 <___vfprintf_internal_r+0x1948>
   432cc:	8880004c 	andi	r2,r17,1
   432d0:	103bd526 	beq	r2,zero,42228 <__alt_data_end+0xfffdbd68>
   432d4:	db013817 	ldw	r12,1248(sp)
   432d8:	d8811f17 	ldw	r2,1148(sp)
   432dc:	dac13517 	ldw	r11,1236(sp)
   432e0:	1b07883a 	add	r3,r3,r12
   432e4:	10800044 	addi	r2,r2,1
   432e8:	42c00015 	stw	r11,0(r8)
   432ec:	43000115 	stw	r12,4(r8)
   432f0:	d8c12015 	stw	r3,1152(sp)
   432f4:	d8811f15 	stw	r2,1148(sp)
   432f8:	010001c4 	movi	r4,7
   432fc:	20813016 	blt	r4,r2,437c0 <___vfprintf_internal_r+0x1e34>
   43300:	42000204 	addi	r8,r8,8
   43304:	0421c83a 	sub	r16,zero,r16
   43308:	0400630e 	bge	zero,r16,43498 <___vfprintf_internal_r+0x1b0c>
   4330c:	04800404 	movi	r18,16
   43310:	94009f0e 	bge	r18,r16,43590 <___vfprintf_internal_r+0x1c04>
   43314:	01000174 	movhi	r4,5
   43318:	213c8e84 	addi	r4,r4,-3526
   4331c:	d9012c15 	stw	r4,1200(sp)
   43320:	054001c4 	movi	r21,7
   43324:	00000306 	br	43334 <___vfprintf_internal_r+0x19a8>
   43328:	42000204 	addi	r8,r8,8
   4332c:	843ffc04 	addi	r16,r16,-16
   43330:	94009a0e 	bge	r18,r16,4359c <___vfprintf_internal_r+0x1c10>
   43334:	18c00404 	addi	r3,r3,16
   43338:	10800044 	addi	r2,r2,1
   4333c:	45000015 	stw	r20,0(r8)
   43340:	44800115 	stw	r18,4(r8)
   43344:	d8c12015 	stw	r3,1152(sp)
   43348:	d8811f15 	stw	r2,1148(sp)
   4334c:	a8bff60e 	bge	r21,r2,43328 <__alt_data_end+0xfffdce68>
   43350:	b009883a 	mov	r4,r22
   43354:	b80b883a 	mov	r5,r23
   43358:	d9811e04 	addi	r6,sp,1144
   4335c:	0048c040 	call	48c04 <__sprint_r>
   43360:	103aa11e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   43364:	d8c12017 	ldw	r3,1152(sp)
   43368:	d8811f17 	ldw	r2,1148(sp)
   4336c:	da000404 	addi	r8,sp,16
   43370:	003fee06 	br	4332c <__alt_data_end+0xfffdce6c>
   43374:	008011c4 	movi	r2,71
   43378:	1400b316 	blt	r2,r16,43648 <___vfprintf_internal_r+0x1cbc>
   4337c:	03000174 	movhi	r12,5
   43380:	633c8004 	addi	r12,r12,-3584
   43384:	db013115 	stw	r12,1220(sp)
   43388:	00c000c4 	movi	r3,3
   4338c:	00bfdfc4 	movi	r2,-129
   43390:	d8c12b15 	stw	r3,1196(sp)
   43394:	88a2703a 	and	r17,r17,r2
   43398:	dd412783 	ldbu	r21,1182(sp)
   4339c:	dcc12d15 	stw	r19,1204(sp)
   433a0:	1825883a 	mov	r18,r3
   433a4:	d8013215 	stw	zero,1224(sp)
   433a8:	d8013415 	stw	zero,1232(sp)
   433ac:	003b0b06 	br	41fdc <__alt_data_end+0xfffdbb1c>
   433b0:	4825883a 	mov	r18,r9
   433b4:	003cba06 	br	426a0 <__alt_data_end+0xfffdc1e0>
   433b8:	db012d17 	ldw	r12,1204(sp)
   433bc:	14c00017 	ldw	r19,0(r2)
   433c0:	0039883a 	mov	fp,zero
   433c4:	63000104 	addi	r12,r12,4
   433c8:	db012d15 	stw	r12,1204(sp)
   433cc:	003c0d06 	br	42404 <__alt_data_end+0xfffdbf44>
   433d0:	00800174 	movhi	r2,5
   433d4:	10bc7e04 	addi	r2,r2,-3592
   433d8:	d8813115 	stw	r2,1220(sp)
   433dc:	003ac406 	br	41ef0 <__alt_data_end+0xfffdba30>
   433e0:	b009883a 	mov	r4,r22
   433e4:	b80b883a 	mov	r5,r23
   433e8:	d9811e04 	addi	r6,sp,1144
   433ec:	0048c040 	call	48c04 <__sprint_r>
   433f0:	103a7d1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   433f4:	dc012617 	ldw	r16,1176(sp)
   433f8:	d8c12017 	ldw	r3,1152(sp)
   433fc:	da000404 	addi	r8,sp,16
   43400:	003faf06 	br	432c0 <__alt_data_end+0xfffdce00>
   43404:	db012e17 	ldw	r12,1208(sp)
   43408:	1805883a 	mov	r2,r3
   4340c:	dac12d15 	stw	r11,1204(sp)
   43410:	0319c83a 	sub	r12,zero,r12
   43414:	db012e15 	stw	r12,1208(sp)
   43418:	003a7e06 	br	41e14 <__alt_data_end+0xfffdb954>
   4341c:	18800044 	addi	r2,r3,1
   43420:	8c400814 	ori	r17,r17,32
   43424:	1c000047 	ldb	r16,1(r3)
   43428:	0039bf06 	br	41b28 <__alt_data_end+0xfffdb668>
   4342c:	b009883a 	mov	r4,r22
   43430:	b80b883a 	mov	r5,r23
   43434:	d9811e04 	addi	r6,sp,1144
   43438:	0048c040 	call	48c04 <__sprint_r>
   4343c:	103a6a1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   43440:	d8c12017 	ldw	r3,1152(sp)
   43444:	da000404 	addi	r8,sp,16
   43448:	003d0c06 	br	4287c <__alt_data_end+0xfffdc3bc>
   4344c:	db012817 	ldw	r12,1184(sp)
   43450:	d8c13117 	ldw	r3,1220(sp)
   43454:	60e5c83a 	sub	r18,r12,r3
   43458:	003adb06 	br	41fc8 <__alt_data_end+0xfffdbb08>
   4345c:	da013f15 	stw	r8,1276(sp)
   43460:	00418f40 	call	418f4 <strlen>
   43464:	1025883a 	mov	r18,r2
   43468:	da013f17 	ldw	r8,1276(sp)
   4346c:	903c8e0e 	bge	r18,zero,426a8 <__alt_data_end+0xfffdc1e8>
   43470:	0005883a 	mov	r2,zero
   43474:	003c8c06 	br	426a8 <__alt_data_end+0xfffdc1e8>
   43478:	b009883a 	mov	r4,r22
   4347c:	b80b883a 	mov	r5,r23
   43480:	d9811e04 	addi	r6,sp,1144
   43484:	0048c040 	call	48c04 <__sprint_r>
   43488:	103a571e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   4348c:	d8c12017 	ldw	r3,1152(sp)
   43490:	d8811f17 	ldw	r2,1148(sp)
   43494:	da000404 	addi	r8,sp,16
   43498:	db013317 	ldw	r12,1228(sp)
   4349c:	dac13117 	ldw	r11,1220(sp)
   434a0:	10800044 	addi	r2,r2,1
   434a4:	60c7883a 	add	r3,r12,r3
   434a8:	42c00015 	stw	r11,0(r8)
   434ac:	43000115 	stw	r12,4(r8)
   434b0:	d8c12015 	stw	r3,1152(sp)
   434b4:	d8811f15 	stw	r2,1148(sp)
   434b8:	010001c4 	movi	r4,7
   434bc:	20bb590e 	bge	r4,r2,42224 <__alt_data_end+0xfffdbd64>
   434c0:	003d7e06 	br	42abc <__alt_data_end+0xfffdc5fc>
   434c4:	01000174 	movhi	r4,5
   434c8:	213c9284 	addi	r4,r4,-3510
   434cc:	d9013615 	stw	r4,1240(sp)
   434d0:	003af606 	br	420ac <__alt_data_end+0xfffdbbec>
   434d4:	d8812604 	addi	r2,sp,1176
   434d8:	d8800115 	stw	r2,4(sp)
   434dc:	d9413717 	ldw	r5,1244(sp)
   434e0:	d8812504 	addi	r2,sp,1172
   434e4:	d8800215 	stw	r2,8(sp)
   434e8:	d8812104 	addi	r2,sp,1156
   434ec:	da400015 	stw	r9,0(sp)
   434f0:	d8800315 	stw	r2,12(sp)
   434f4:	b009883a 	mov	r4,r22
   434f8:	900d883a 	mov	r6,r18
   434fc:	01c000c4 	movi	r7,3
   43500:	da013f15 	stw	r8,1276(sp)
   43504:	da413e15 	stw	r9,1272(sp)
   43508:	0043cdc0 	call	43cdc <_dtoa_r>
   4350c:	da413e17 	ldw	r9,1272(sp)
   43510:	da013f17 	ldw	r8,1276(sp)
   43514:	d8813115 	stw	r2,1220(sp)
   43518:	4839883a 	mov	fp,r9
   4351c:	dac13117 	ldw	r11,1220(sp)
   43520:	00801184 	movi	r2,70
   43524:	5f15883a 	add	r10,r11,fp
   43528:	a8bef01e 	bne	r21,r2,430ec <__alt_data_end+0xfffdcc2c>
   4352c:	59000007 	ldb	r4,0(r11)
   43530:	00800c04 	movi	r2,48
   43534:	2080e026 	beq	r4,r2,438b8 <___vfprintf_internal_r+0x1f2c>
   43538:	d8c12617 	ldw	r3,1176(sp)
   4353c:	50d5883a 	add	r10,r10,r3
   43540:	003eea06 	br	430ec <__alt_data_end+0xfffdcc2c>
   43544:	0025883a 	mov	r18,zero
   43548:	003db306 	br	42c18 <__alt_data_end+0xfffdc758>
   4354c:	b009883a 	mov	r4,r22
   43550:	b80b883a 	mov	r5,r23
   43554:	d9811e04 	addi	r6,sp,1144
   43558:	0048c040 	call	48c04 <__sprint_r>
   4355c:	103a221e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   43560:	d8c12017 	ldw	r3,1152(sp)
   43564:	da000404 	addi	r8,sp,16
   43568:	003daa06 	br	42c14 <__alt_data_end+0xfffdc754>
   4356c:	b009883a 	mov	r4,r22
   43570:	b80b883a 	mov	r5,r23
   43574:	d9811e04 	addi	r6,sp,1144
   43578:	0048c040 	call	48c04 <__sprint_r>
   4357c:	103a1a1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   43580:	d8812617 	ldw	r2,1176(sp)
   43584:	d8c12017 	ldw	r3,1152(sp)
   43588:	da000404 	addi	r8,sp,16
   4358c:	003e2c06 	br	42e40 <__alt_data_end+0xfffdc980>
   43590:	03000174 	movhi	r12,5
   43594:	633c8e84 	addi	r12,r12,-3526
   43598:	db012c15 	stw	r12,1200(sp)
   4359c:	dac12c17 	ldw	r11,1200(sp)
   435a0:	1c07883a 	add	r3,r3,r16
   435a4:	10800044 	addi	r2,r2,1
   435a8:	42c00015 	stw	r11,0(r8)
   435ac:	44000115 	stw	r16,4(r8)
   435b0:	d8c12015 	stw	r3,1152(sp)
   435b4:	d8811f15 	stw	r2,1148(sp)
   435b8:	010001c4 	movi	r4,7
   435bc:	20bfae16 	blt	r4,r2,43478 <__alt_data_end+0xfffdcfb8>
   435c0:	42000204 	addi	r8,r8,8
   435c4:	003fb406 	br	43498 <__alt_data_end+0xfffdcfd8>
   435c8:	03000174 	movhi	r12,5
   435cc:	633c9284 	addi	r12,r12,-3510
   435d0:	db013615 	stw	r12,1240(sp)
   435d4:	003b3806 	br	422b8 <__alt_data_end+0xfffdbdf8>
   435d8:	b009883a 	mov	r4,r22
   435dc:	b80b883a 	mov	r5,r23
   435e0:	d9811e04 	addi	r6,sp,1144
   435e4:	0048c040 	call	48c04 <__sprint_r>
   435e8:	1039ff1e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   435ec:	d8812617 	ldw	r2,1176(sp)
   435f0:	db013317 	ldw	r12,1228(sp)
   435f4:	d8c12017 	ldw	r3,1152(sp)
   435f8:	da000404 	addi	r8,sp,16
   435fc:	6085c83a 	sub	r2,r12,r2
   43600:	003e2006 	br	42e84 <__alt_data_end+0xfffdc9c4>
   43604:	0021883a 	mov	r16,zero
   43608:	003e1f06 	br	42e88 <__alt_data_end+0xfffdc9c8>
   4360c:	00800184 	movi	r2,6
   43610:	1240012e 	bgeu	r2,r9,43618 <___vfprintf_internal_r+0x1c8c>
   43614:	1013883a 	mov	r9,r2
   43618:	4825883a 	mov	r18,r9
   4361c:	4805883a 	mov	r2,r9
   43620:	48009e16 	blt	r9,zero,4389c <___vfprintf_internal_r+0x1f10>
   43624:	d8812b15 	stw	r2,1196(sp)
   43628:	00800174 	movhi	r2,5
   4362c:	10bc8c04 	addi	r2,r2,-3536
   43630:	d8813115 	stw	r2,1220(sp)
   43634:	dcc12d15 	stw	r19,1204(sp)
   43638:	d8013215 	stw	zero,1224(sp)
   4363c:	d8013415 	stw	zero,1232(sp)
   43640:	0005883a 	mov	r2,zero
   43644:	003a6c06 	br	41ff8 <__alt_data_end+0xfffdbb38>
   43648:	00800174 	movhi	r2,5
   4364c:	10bc8104 	addi	r2,r2,-3580
   43650:	d8813115 	stw	r2,1220(sp)
   43654:	003f4c06 	br	43388 <__alt_data_end+0xfffdcec8>
   43658:	00c00b44 	movi	r3,45
   4365c:	d8812b15 	stw	r2,1196(sp)
   43660:	dc412d17 	ldw	r17,1204(sp)
   43664:	d8c12785 	stb	r3,1182(sp)
   43668:	dcc12d15 	stw	r19,1204(sp)
   4366c:	d8013215 	stw	zero,1224(sp)
   43670:	00800b44 	movi	r2,45
   43674:	003a5d06 	br	41fec <__alt_data_end+0xfffdbb2c>
   43678:	d8c12617 	ldw	r3,1176(sp)
   4367c:	00bfff44 	movi	r2,-3
   43680:	18800d16 	blt	r3,r2,436b8 <___vfprintf_internal_r+0x1d2c>
   43684:	48c00c16 	blt	r9,r3,436b8 <___vfprintf_internal_r+0x1d2c>
   43688:	d8c13415 	stw	r3,1232(sp)
   4368c:	040019c4 	movi	r16,103
   43690:	003eb506 	br	43168 <__alt_data_end+0xfffdcca8>
   43694:	05400b44 	movi	r21,45
   43698:	dd412785 	stb	r21,1182(sp)
   4369c:	003a0f06 	br	41edc <__alt_data_end+0xfffdba1c>
   436a0:	01000174 	movhi	r4,5
   436a4:	213c8e84 	addi	r4,r4,-3526
   436a8:	d9012c15 	stw	r4,1200(sp)
   436ac:	003cb106 	br	42974 <__alt_data_end+0xfffdc4b4>
   436b0:	5005883a 	mov	r2,r10
   436b4:	003ea106 	br	4313c <__alt_data_end+0xfffdcc7c>
   436b8:	843fff84 	addi	r16,r16,-2
   436bc:	1f3fffc4 	addi	fp,r3,-1
   436c0:	df012615 	stw	fp,1176(sp)
   436c4:	dc0122c5 	stb	r16,1163(sp)
   436c8:	e0009516 	blt	fp,zero,43920 <___vfprintf_internal_r+0x1f94>
   436cc:	00800ac4 	movi	r2,43
   436d0:	d8812305 	stb	r2,1164(sp)
   436d4:	00800244 	movi	r2,9
   436d8:	1700690e 	bge	r2,fp,43880 <___vfprintf_internal_r+0x1ef4>
   436dc:	dd4122c4 	addi	r21,sp,1163
   436e0:	dc012c15 	stw	r16,1200(sp)
   436e4:	8825883a 	mov	r18,r17
   436e8:	a821883a 	mov	r16,r21
   436ec:	4023883a 	mov	r17,r8
   436f0:	e009883a 	mov	r4,fp
   436f4:	01400284 	movi	r5,10
   436f8:	00415800 	call	41580 <__modsi3>
   436fc:	10800c04 	addi	r2,r2,48
   43700:	843fffc4 	addi	r16,r16,-1
   43704:	e009883a 	mov	r4,fp
   43708:	01400284 	movi	r5,10
   4370c:	80800005 	stb	r2,0(r16)
   43710:	004152c0 	call	4152c <__divsi3>
   43714:	1039883a 	mov	fp,r2
   43718:	00800244 	movi	r2,9
   4371c:	173ff416 	blt	r2,fp,436f0 <__alt_data_end+0xfffdd230>
   43720:	8811883a 	mov	r8,r17
   43724:	e0800c04 	addi	r2,fp,48
   43728:	9023883a 	mov	r17,r18
   4372c:	8025883a 	mov	r18,r16
   43730:	913fffc4 	addi	r4,r18,-1
   43734:	90bfffc5 	stb	r2,-1(r18)
   43738:	dc012c17 	ldw	r16,1200(sp)
   4373c:	25408e2e 	bgeu	r4,r21,43978 <___vfprintf_internal_r+0x1fec>
   43740:	d9412384 	addi	r5,sp,1166
   43744:	2c8bc83a 	sub	r5,r5,r18
   43748:	d8c12344 	addi	r3,sp,1165
   4374c:	a94b883a 	add	r5,r21,r5
   43750:	00000106 	br	43758 <___vfprintf_internal_r+0x1dcc>
   43754:	20800003 	ldbu	r2,0(r4)
   43758:	18800005 	stb	r2,0(r3)
   4375c:	18c00044 	addi	r3,r3,1
   43760:	21000044 	addi	r4,r4,1
   43764:	197ffb1e 	bne	r3,r5,43754 <__alt_data_end+0xfffdd294>
   43768:	d8812304 	addi	r2,sp,1164
   4376c:	1485c83a 	sub	r2,r2,r18
   43770:	d8c12344 	addi	r3,sp,1165
   43774:	1885883a 	add	r2,r3,r2
   43778:	dac13317 	ldw	r11,1228(sp)
   4377c:	156bc83a 	sub	r21,r2,r21
   43780:	dd413a15 	stw	r21,1256(sp)
   43784:	00800044 	movi	r2,1
   43788:	5d65883a 	add	r18,r11,r21
   4378c:	12c0770e 	bge	r2,r11,4396c <___vfprintf_internal_r+0x1fe0>
   43790:	94800044 	addi	r18,r18,1
   43794:	9005883a 	mov	r2,r18
   43798:	90007216 	blt	r18,zero,43964 <___vfprintf_internal_r+0x1fd8>
   4379c:	d8013415 	stw	zero,1232(sp)
   437a0:	003e7906 	br	43188 <__alt_data_end+0xfffdccc8>
   437a4:	da412b15 	stw	r9,1196(sp)
   437a8:	dd412783 	ldbu	r21,1182(sp)
   437ac:	4825883a 	mov	r18,r9
   437b0:	dcc12d15 	stw	r19,1204(sp)
   437b4:	d8013215 	stw	zero,1224(sp)
   437b8:	d8013415 	stw	zero,1232(sp)
   437bc:	003a0706 	br	41fdc <__alt_data_end+0xfffdbb1c>
   437c0:	b009883a 	mov	r4,r22
   437c4:	b80b883a 	mov	r5,r23
   437c8:	d9811e04 	addi	r6,sp,1144
   437cc:	0048c040 	call	48c04 <__sprint_r>
   437d0:	1039851e 	bne	r2,zero,41de8 <__alt_data_end+0xfffdb928>
   437d4:	dc012617 	ldw	r16,1176(sp)
   437d8:	d8c12017 	ldw	r3,1152(sp)
   437dc:	d8811f17 	ldw	r2,1148(sp)
   437e0:	da000404 	addi	r8,sp,16
   437e4:	003ec706 	br	43304 <__alt_data_end+0xfffdce44>
   437e8:	483e1a1e 	bne	r9,zero,43054 <__alt_data_end+0xfffdcb94>
   437ec:	9013883a 	mov	r9,r18
   437f0:	003e1806 	br	43054 <__alt_data_end+0xfffdcb94>
   437f4:	00c00b44 	movi	r3,45
   437f8:	64a0003c 	xorhi	r18,r12,32768
   437fc:	d8c12b05 	stb	r3,1196(sp)
   43800:	003e1a06 	br	4306c <__alt_data_end+0xfffdcbac>
   43804:	4f000044 	addi	fp,r9,1
   43808:	003e1f06 	br	43088 <__alt_data_end+0xfffdcbc8>
   4380c:	02400184 	movi	r9,6
   43810:	003e1006 	br	43054 <__alt_data_end+0xfffdcb94>
   43814:	d8c13417 	ldw	r3,1232(sp)
   43818:	00c04b0e 	bge	zero,r3,43948 <___vfprintf_internal_r+0x1fbc>
   4381c:	04800044 	movi	r18,1
   43820:	dac13317 	ldw	r11,1228(sp)
   43824:	92e5883a 	add	r18,r18,r11
   43828:	9005883a 	mov	r2,r18
   4382c:	903e560e 	bge	r18,zero,43188 <__alt_data_end+0xfffdccc8>
   43830:	0005883a 	mov	r2,zero
   43834:	003e5406 	br	43188 <__alt_data_end+0xfffdccc8>
   43838:	d8c12617 	ldw	r3,1176(sp)
   4383c:	d8c13415 	stw	r3,1232(sp)
   43840:	00c03b0e 	bge	zero,r3,43930 <___vfprintf_internal_r+0x1fa4>
   43844:	4800081e 	bne	r9,zero,43868 <___vfprintf_internal_r+0x1edc>
   43848:	8c40004c 	andi	r17,r17,1
   4384c:	8800061e 	bne	r17,zero,43868 <___vfprintf_internal_r+0x1edc>
   43850:	1805883a 	mov	r2,r3
   43854:	183e4b0e 	bge	r3,zero,43184 <__alt_data_end+0xfffdccc4>
   43858:	0005883a 	mov	r2,zero
   4385c:	003e4906 	br	43184 <__alt_data_end+0xfffdccc4>
   43860:	d8812117 	ldw	r2,1156(sp)
   43864:	003e3506 	br	4313c <__alt_data_end+0xfffdcc7c>
   43868:	dac13417 	ldw	r11,1232(sp)
   4386c:	4a400044 	addi	r9,r9,1
   43870:	5a65883a 	add	r18,r11,r9
   43874:	9005883a 	mov	r2,r18
   43878:	903e430e 	bge	r18,zero,43188 <__alt_data_end+0xfffdccc8>
   4387c:	003fec06 	br	43830 <__alt_data_end+0xfffdd370>
   43880:	00800c04 	movi	r2,48
   43884:	e0c00c04 	addi	r3,fp,48
   43888:	d8812345 	stb	r2,1165(sp)
   4388c:	d8c12385 	stb	r3,1166(sp)
   43890:	d88123c4 	addi	r2,sp,1167
   43894:	dd4122c4 	addi	r21,sp,1163
   43898:	003fb706 	br	43778 <__alt_data_end+0xfffdd2b8>
   4389c:	0005883a 	mov	r2,zero
   438a0:	003f6006 	br	43624 <__alt_data_end+0xfffdd164>
   438a4:	db013417 	ldw	r12,1232(sp)
   438a8:	64800044 	addi	r18,r12,1
   438ac:	9005883a 	mov	r2,r18
   438b0:	903e350e 	bge	r18,zero,43188 <__alt_data_end+0xfffdccc8>
   438b4:	003fde06 	br	43830 <__alt_data_end+0xfffdd370>
   438b8:	d9013717 	ldw	r4,1244(sp)
   438bc:	900b883a 	mov	r5,r18
   438c0:	000d883a 	mov	r6,zero
   438c4:	000f883a 	mov	r7,zero
   438c8:	da013f15 	stw	r8,1276(sp)
   438cc:	da413e15 	stw	r9,1272(sp)
   438d0:	da813d15 	stw	r10,1268(sp)
   438d4:	004c5ec0 	call	4c5ec <__eqdf2>
   438d8:	da013f17 	ldw	r8,1276(sp)
   438dc:	da413e17 	ldw	r9,1272(sp)
   438e0:	da813d17 	ldw	r10,1268(sp)
   438e4:	103f1426 	beq	r2,zero,43538 <__alt_data_end+0xfffdd078>
   438e8:	00800044 	movi	r2,1
   438ec:	1707c83a 	sub	r3,r2,fp
   438f0:	d8c12615 	stw	r3,1176(sp)
   438f4:	003f1106 	br	4353c <__alt_data_end+0xfffdd07c>
   438f8:	dac12d17 	ldw	r11,1204(sp)
   438fc:	5a400017 	ldw	r9,0(r11)
   43900:	5ac00104 	addi	r11,r11,4
   43904:	dac12d15 	stw	r11,1204(sp)
   43908:	483ec60e 	bge	r9,zero,43424 <__alt_data_end+0xfffdcf64>
   4390c:	027fffc4 	movi	r9,-1
   43910:	1c000047 	ldb	r16,1(r3)
   43914:	00388406 	br	41b28 <__alt_data_end+0xfffdb668>
   43918:	043fffc4 	movi	r16,-1
   4391c:	00391006 	br	41d60 <__alt_data_end+0xfffdb8a0>
   43920:	00800b44 	movi	r2,45
   43924:	0739c83a 	sub	fp,zero,fp
   43928:	d8812305 	stb	r2,1164(sp)
   4392c:	003f6906 	br	436d4 <__alt_data_end+0xfffdd214>
   43930:	4800081e 	bne	r9,zero,43954 <___vfprintf_internal_r+0x1fc8>
   43934:	8c40004c 	andi	r17,r17,1
   43938:	8800061e 	bne	r17,zero,43954 <___vfprintf_internal_r+0x1fc8>
   4393c:	00800044 	movi	r2,1
   43940:	1025883a 	mov	r18,r2
   43944:	003e1006 	br	43188 <__alt_data_end+0xfffdccc8>
   43948:	04800084 	movi	r18,2
   4394c:	90e5c83a 	sub	r18,r18,r3
   43950:	003fb306 	br	43820 <__alt_data_end+0xfffdd360>
   43954:	4c800084 	addi	r18,r9,2
   43958:	9005883a 	mov	r2,r18
   4395c:	903e0a0e 	bge	r18,zero,43188 <__alt_data_end+0xfffdccc8>
   43960:	003fb306 	br	43830 <__alt_data_end+0xfffdd370>
   43964:	0005883a 	mov	r2,zero
   43968:	003f8c06 	br	4379c <__alt_data_end+0xfffdd2dc>
   4396c:	88a2703a 	and	r17,r17,r2
   43970:	883f8826 	beq	r17,zero,43794 <__alt_data_end+0xfffdd2d4>
   43974:	003f8606 	br	43790 <__alt_data_end+0xfffdd2d0>
   43978:	d8812344 	addi	r2,sp,1165
   4397c:	003f7e06 	br	43778 <__alt_data_end+0xfffdd2b8>
   43980:	d8c12617 	ldw	r3,1176(sp)
   43984:	003f4d06 	br	436bc <__alt_data_end+0xfffdd1fc>

00043988 <__vfprintf_internal>:
   43988:	2007883a 	mov	r3,r4
   4398c:	01000174 	movhi	r4,5
   43990:	213fd604 	addi	r4,r4,-168
   43994:	21000017 	ldw	r4,0(r4)
   43998:	2805883a 	mov	r2,r5
   4399c:	300f883a 	mov	r7,r6
   439a0:	180b883a 	mov	r5,r3
   439a4:	100d883a 	mov	r6,r2
   439a8:	004198c1 	jmpi	4198c <___vfprintf_internal_r>

000439ac <__swsetup_r>:
   439ac:	00800174 	movhi	r2,5
   439b0:	defffd04 	addi	sp,sp,-12
   439b4:	10bfd604 	addi	r2,r2,-168
   439b8:	dc400115 	stw	r17,4(sp)
   439bc:	2023883a 	mov	r17,r4
   439c0:	11000017 	ldw	r4,0(r2)
   439c4:	dc000015 	stw	r16,0(sp)
   439c8:	dfc00215 	stw	ra,8(sp)
   439cc:	2821883a 	mov	r16,r5
   439d0:	20000226 	beq	r4,zero,439dc <__swsetup_r+0x30>
   439d4:	20c00e17 	ldw	r3,56(r4)
   439d8:	18002e26 	beq	r3,zero,43a94 <__swsetup_r+0xe8>
   439dc:	8080030b 	ldhu	r2,12(r16)
   439e0:	10c0020c 	andi	r3,r2,8
   439e4:	100d883a 	mov	r6,r2
   439e8:	18000f26 	beq	r3,zero,43a28 <__swsetup_r+0x7c>
   439ec:	80c00417 	ldw	r3,16(r16)
   439f0:	18001526 	beq	r3,zero,43a48 <__swsetup_r+0x9c>
   439f4:	1100004c 	andi	r4,r2,1
   439f8:	20001c1e 	bne	r4,zero,43a6c <__swsetup_r+0xc0>
   439fc:	1080008c 	andi	r2,r2,2
   43a00:	1000261e 	bne	r2,zero,43a9c <__swsetup_r+0xf0>
   43a04:	80800517 	ldw	r2,20(r16)
   43a08:	80800215 	stw	r2,8(r16)
   43a0c:	18001c26 	beq	r3,zero,43a80 <__swsetup_r+0xd4>
   43a10:	0005883a 	mov	r2,zero
   43a14:	dfc00217 	ldw	ra,8(sp)
   43a18:	dc400117 	ldw	r17,4(sp)
   43a1c:	dc000017 	ldw	r16,0(sp)
   43a20:	dec00304 	addi	sp,sp,12
   43a24:	f800283a 	ret
   43a28:	3080040c 	andi	r2,r6,16
   43a2c:	10001726 	beq	r2,zero,43a8c <__swsetup_r+0xe0>
   43a30:	3080010c 	andi	r2,r6,4
   43a34:	10001b1e 	bne	r2,zero,43aa4 <__swsetup_r+0xf8>
   43a38:	80c00417 	ldw	r3,16(r16)
   43a3c:	30800214 	ori	r2,r6,8
   43a40:	8080030d 	sth	r2,12(r16)
   43a44:	183feb1e 	bne	r3,zero,439f4 <__alt_data_end+0xfffdd534>
   43a48:	1140a00c 	andi	r5,r2,640
   43a4c:	01008004 	movi	r4,512
   43a50:	293fe826 	beq	r5,r4,439f4 <__alt_data_end+0xfffdd534>
   43a54:	8809883a 	mov	r4,r17
   43a58:	800b883a 	mov	r5,r16
   43a5c:	00465040 	call	46504 <__smakebuf_r>
   43a60:	8080030b 	ldhu	r2,12(r16)
   43a64:	80c00417 	ldw	r3,16(r16)
   43a68:	003fe206 	br	439f4 <__alt_data_end+0xfffdd534>
   43a6c:	80800517 	ldw	r2,20(r16)
   43a70:	80000215 	stw	zero,8(r16)
   43a74:	0085c83a 	sub	r2,zero,r2
   43a78:	80800615 	stw	r2,24(r16)
   43a7c:	183fe41e 	bne	r3,zero,43a10 <__alt_data_end+0xfffdd550>
   43a80:	8080030b 	ldhu	r2,12(r16)
   43a84:	1080200c 	andi	r2,r2,128
   43a88:	103fe226 	beq	r2,zero,43a14 <__alt_data_end+0xfffdd554>
   43a8c:	00bfffc4 	movi	r2,-1
   43a90:	003fe006 	br	43a14 <__alt_data_end+0xfffdd554>
   43a94:	00459ac0 	call	459ac <__sinit>
   43a98:	003fd006 	br	439dc <__alt_data_end+0xfffdd51c>
   43a9c:	0005883a 	mov	r2,zero
   43aa0:	003fd906 	br	43a08 <__alt_data_end+0xfffdd548>
   43aa4:	81400c17 	ldw	r5,48(r16)
   43aa8:	28000626 	beq	r5,zero,43ac4 <__swsetup_r+0x118>
   43aac:	80801004 	addi	r2,r16,64
   43ab0:	28800326 	beq	r5,r2,43ac0 <__swsetup_r+0x114>
   43ab4:	8809883a 	mov	r4,r17
   43ab8:	0045b200 	call	45b20 <_free_r>
   43abc:	8180030b 	ldhu	r6,12(r16)
   43ac0:	80000c15 	stw	zero,48(r16)
   43ac4:	80c00417 	ldw	r3,16(r16)
   43ac8:	00bff6c4 	movi	r2,-37
   43acc:	118c703a 	and	r6,r2,r6
   43ad0:	80000115 	stw	zero,4(r16)
   43ad4:	80c00015 	stw	r3,0(r16)
   43ad8:	003fd806 	br	43a3c <__alt_data_end+0xfffdd57c>

00043adc <quorem>:
   43adc:	defff704 	addi	sp,sp,-36
   43ae0:	dc800215 	stw	r18,8(sp)
   43ae4:	20800417 	ldw	r2,16(r4)
   43ae8:	2c800417 	ldw	r18,16(r5)
   43aec:	dfc00815 	stw	ra,32(sp)
   43af0:	ddc00715 	stw	r23,28(sp)
   43af4:	dd800615 	stw	r22,24(sp)
   43af8:	dd400515 	stw	r21,20(sp)
   43afc:	dd000415 	stw	r20,16(sp)
   43b00:	dcc00315 	stw	r19,12(sp)
   43b04:	dc400115 	stw	r17,4(sp)
   43b08:	dc000015 	stw	r16,0(sp)
   43b0c:	14807116 	blt	r2,r18,43cd4 <quorem+0x1f8>
   43b10:	94bfffc4 	addi	r18,r18,-1
   43b14:	94ad883a 	add	r22,r18,r18
   43b18:	b5ad883a 	add	r22,r22,r22
   43b1c:	2c400504 	addi	r17,r5,20
   43b20:	8da9883a 	add	r20,r17,r22
   43b24:	25400504 	addi	r21,r4,20
   43b28:	282f883a 	mov	r23,r5
   43b2c:	adad883a 	add	r22,r21,r22
   43b30:	a1400017 	ldw	r5,0(r20)
   43b34:	2021883a 	mov	r16,r4
   43b38:	b1000017 	ldw	r4,0(r22)
   43b3c:	29400044 	addi	r5,r5,1
   43b40:	00415dc0 	call	415dc <__udivsi3>
   43b44:	1027883a 	mov	r19,r2
   43b48:	10002c26 	beq	r2,zero,43bfc <quorem+0x120>
   43b4c:	a813883a 	mov	r9,r21
   43b50:	8811883a 	mov	r8,r17
   43b54:	0009883a 	mov	r4,zero
   43b58:	000d883a 	mov	r6,zero
   43b5c:	41c00017 	ldw	r7,0(r8)
   43b60:	49400017 	ldw	r5,0(r9)
   43b64:	42000104 	addi	r8,r8,4
   43b68:	38bfffcc 	andi	r2,r7,65535
   43b6c:	14c5383a 	mul	r2,r2,r19
   43b70:	380ed43a 	srli	r7,r7,16
   43b74:	28ffffcc 	andi	r3,r5,65535
   43b78:	2085883a 	add	r2,r4,r2
   43b7c:	1008d43a 	srli	r4,r2,16
   43b80:	3ccf383a 	mul	r7,r7,r19
   43b84:	198d883a 	add	r6,r3,r6
   43b88:	10ffffcc 	andi	r3,r2,65535
   43b8c:	30c7c83a 	sub	r3,r6,r3
   43b90:	280ad43a 	srli	r5,r5,16
   43b94:	21c9883a 	add	r4,r4,r7
   43b98:	180dd43a 	srai	r6,r3,16
   43b9c:	20bfffcc 	andi	r2,r4,65535
   43ba0:	288bc83a 	sub	r5,r5,r2
   43ba4:	298b883a 	add	r5,r5,r6
   43ba8:	280e943a 	slli	r7,r5,16
   43bac:	18ffffcc 	andi	r3,r3,65535
   43bb0:	2008d43a 	srli	r4,r4,16
   43bb4:	38ceb03a 	or	r7,r7,r3
   43bb8:	49c00015 	stw	r7,0(r9)
   43bbc:	280dd43a 	srai	r6,r5,16
   43bc0:	4a400104 	addi	r9,r9,4
   43bc4:	a23fe52e 	bgeu	r20,r8,43b5c <__alt_data_end+0xfffdd69c>
   43bc8:	b0800017 	ldw	r2,0(r22)
   43bcc:	10000b1e 	bne	r2,zero,43bfc <quorem+0x120>
   43bd0:	b0bfff04 	addi	r2,r22,-4
   43bd4:	a880082e 	bgeu	r21,r2,43bf8 <quorem+0x11c>
   43bd8:	b0ffff17 	ldw	r3,-4(r22)
   43bdc:	18000326 	beq	r3,zero,43bec <quorem+0x110>
   43be0:	00000506 	br	43bf8 <quorem+0x11c>
   43be4:	10c00017 	ldw	r3,0(r2)
   43be8:	1800031e 	bne	r3,zero,43bf8 <quorem+0x11c>
   43bec:	10bfff04 	addi	r2,r2,-4
   43bf0:	94bfffc4 	addi	r18,r18,-1
   43bf4:	a8bffb36 	bltu	r21,r2,43be4 <__alt_data_end+0xfffdd724>
   43bf8:	84800415 	stw	r18,16(r16)
   43bfc:	8009883a 	mov	r4,r16
   43c00:	b80b883a 	mov	r5,r23
   43c04:	0047a8c0 	call	47a8c <__mcmp>
   43c08:	10002616 	blt	r2,zero,43ca4 <quorem+0x1c8>
   43c0c:	9cc00044 	addi	r19,r19,1
   43c10:	a80d883a 	mov	r6,r21
   43c14:	000b883a 	mov	r5,zero
   43c18:	31000017 	ldw	r4,0(r6)
   43c1c:	88800017 	ldw	r2,0(r17)
   43c20:	31800104 	addi	r6,r6,4
   43c24:	20ffffcc 	andi	r3,r4,65535
   43c28:	194b883a 	add	r5,r3,r5
   43c2c:	10ffffcc 	andi	r3,r2,65535
   43c30:	28c7c83a 	sub	r3,r5,r3
   43c34:	1004d43a 	srli	r2,r2,16
   43c38:	2008d43a 	srli	r4,r4,16
   43c3c:	180bd43a 	srai	r5,r3,16
   43c40:	18ffffcc 	andi	r3,r3,65535
   43c44:	2089c83a 	sub	r4,r4,r2
   43c48:	2149883a 	add	r4,r4,r5
   43c4c:	2004943a 	slli	r2,r4,16
   43c50:	8c400104 	addi	r17,r17,4
   43c54:	200bd43a 	srai	r5,r4,16
   43c58:	10c6b03a 	or	r3,r2,r3
   43c5c:	30ffff15 	stw	r3,-4(r6)
   43c60:	a47fed2e 	bgeu	r20,r17,43c18 <__alt_data_end+0xfffdd758>
   43c64:	9485883a 	add	r2,r18,r18
   43c68:	1085883a 	add	r2,r2,r2
   43c6c:	a887883a 	add	r3,r21,r2
   43c70:	18800017 	ldw	r2,0(r3)
   43c74:	10000b1e 	bne	r2,zero,43ca4 <quorem+0x1c8>
   43c78:	18bfff04 	addi	r2,r3,-4
   43c7c:	a880082e 	bgeu	r21,r2,43ca0 <quorem+0x1c4>
   43c80:	18ffff17 	ldw	r3,-4(r3)
   43c84:	18000326 	beq	r3,zero,43c94 <quorem+0x1b8>
   43c88:	00000506 	br	43ca0 <quorem+0x1c4>
   43c8c:	10c00017 	ldw	r3,0(r2)
   43c90:	1800031e 	bne	r3,zero,43ca0 <quorem+0x1c4>
   43c94:	10bfff04 	addi	r2,r2,-4
   43c98:	94bfffc4 	addi	r18,r18,-1
   43c9c:	a8bffb36 	bltu	r21,r2,43c8c <__alt_data_end+0xfffdd7cc>
   43ca0:	84800415 	stw	r18,16(r16)
   43ca4:	9805883a 	mov	r2,r19
   43ca8:	dfc00817 	ldw	ra,32(sp)
   43cac:	ddc00717 	ldw	r23,28(sp)
   43cb0:	dd800617 	ldw	r22,24(sp)
   43cb4:	dd400517 	ldw	r21,20(sp)
   43cb8:	dd000417 	ldw	r20,16(sp)
   43cbc:	dcc00317 	ldw	r19,12(sp)
   43cc0:	dc800217 	ldw	r18,8(sp)
   43cc4:	dc400117 	ldw	r17,4(sp)
   43cc8:	dc000017 	ldw	r16,0(sp)
   43ccc:	dec00904 	addi	sp,sp,36
   43cd0:	f800283a 	ret
   43cd4:	0005883a 	mov	r2,zero
   43cd8:	003ff306 	br	43ca8 <__alt_data_end+0xfffdd7e8>

00043cdc <_dtoa_r>:
   43cdc:	20801017 	ldw	r2,64(r4)
   43ce0:	deffde04 	addi	sp,sp,-136
   43ce4:	dd401d15 	stw	r21,116(sp)
   43ce8:	dcc01b15 	stw	r19,108(sp)
   43cec:	dc801a15 	stw	r18,104(sp)
   43cf0:	dc401915 	stw	r17,100(sp)
   43cf4:	dc001815 	stw	r16,96(sp)
   43cf8:	dfc02115 	stw	ra,132(sp)
   43cfc:	df002015 	stw	fp,128(sp)
   43d00:	ddc01f15 	stw	r23,124(sp)
   43d04:	dd801e15 	stw	r22,120(sp)
   43d08:	dd001c15 	stw	r20,112(sp)
   43d0c:	d9c00315 	stw	r7,12(sp)
   43d10:	2021883a 	mov	r16,r4
   43d14:	302b883a 	mov	r21,r6
   43d18:	2825883a 	mov	r18,r5
   43d1c:	dc402417 	ldw	r17,144(sp)
   43d20:	3027883a 	mov	r19,r6
   43d24:	10000826 	beq	r2,zero,43d48 <_dtoa_r+0x6c>
   43d28:	21801117 	ldw	r6,68(r4)
   43d2c:	00c00044 	movi	r3,1
   43d30:	100b883a 	mov	r5,r2
   43d34:	1986983a 	sll	r3,r3,r6
   43d38:	11800115 	stw	r6,4(r2)
   43d3c:	10c00215 	stw	r3,8(r2)
   43d40:	00472740 	call	47274 <_Bfree>
   43d44:	80001015 	stw	zero,64(r16)
   43d48:	a8002d16 	blt	r21,zero,43e00 <_dtoa_r+0x124>
   43d4c:	88000015 	stw	zero,0(r17)
   43d50:	a8dffc2c 	andhi	r3,r21,32752
   43d54:	009ffc34 	movhi	r2,32752
   43d58:	18801b26 	beq	r3,r2,43dc8 <_dtoa_r+0xec>
   43d5c:	9009883a 	mov	r4,r18
   43d60:	980b883a 	mov	r5,r19
   43d64:	000d883a 	mov	r6,zero
   43d68:	000f883a 	mov	r7,zero
   43d6c:	004c5ec0 	call	4c5ec <__eqdf2>
   43d70:	10002a1e 	bne	r2,zero,43e1c <_dtoa_r+0x140>
   43d74:	d8c02317 	ldw	r3,140(sp)
   43d78:	d9002517 	ldw	r4,148(sp)
   43d7c:	00800044 	movi	r2,1
   43d80:	18800015 	stw	r2,0(r3)
   43d84:	2001a226 	beq	r4,zero,44410 <_dtoa_r+0x734>
   43d88:	00800174 	movhi	r2,5
   43d8c:	10bc8e44 	addi	r2,r2,-3527
   43d90:	20800015 	stw	r2,0(r4)
   43d94:	10bfffc4 	addi	r2,r2,-1
   43d98:	dfc02117 	ldw	ra,132(sp)
   43d9c:	df002017 	ldw	fp,128(sp)
   43da0:	ddc01f17 	ldw	r23,124(sp)
   43da4:	dd801e17 	ldw	r22,120(sp)
   43da8:	dd401d17 	ldw	r21,116(sp)
   43dac:	dd001c17 	ldw	r20,112(sp)
   43db0:	dcc01b17 	ldw	r19,108(sp)
   43db4:	dc801a17 	ldw	r18,104(sp)
   43db8:	dc401917 	ldw	r17,100(sp)
   43dbc:	dc001817 	ldw	r16,96(sp)
   43dc0:	dec02204 	addi	sp,sp,136
   43dc4:	f800283a 	ret
   43dc8:	d8c02317 	ldw	r3,140(sp)
   43dcc:	0089c3c4 	movi	r2,9999
   43dd0:	18800015 	stw	r2,0(r3)
   43dd4:	90017c26 	beq	r18,zero,443c8 <_dtoa_r+0x6ec>
   43dd8:	00800174 	movhi	r2,5
   43ddc:	10bc9a04 	addi	r2,r2,-3480
   43de0:	d9002517 	ldw	r4,148(sp)
   43de4:	203fec26 	beq	r4,zero,43d98 <__alt_data_end+0xfffdd8d8>
   43de8:	10c000c7 	ldb	r3,3(r2)
   43dec:	18017d1e 	bne	r3,zero,443e4 <_dtoa_r+0x708>
   43df0:	10c000c4 	addi	r3,r2,3
   43df4:	d9802517 	ldw	r6,148(sp)
   43df8:	30c00015 	stw	r3,0(r6)
   43dfc:	003fe606 	br	43d98 <__alt_data_end+0xfffdd8d8>
   43e00:	04e00034 	movhi	r19,32768
   43e04:	9cffffc4 	addi	r19,r19,-1
   43e08:	00800044 	movi	r2,1
   43e0c:	ace6703a 	and	r19,r21,r19
   43e10:	88800015 	stw	r2,0(r17)
   43e14:	982b883a 	mov	r21,r19
   43e18:	003fcd06 	br	43d50 <__alt_data_end+0xfffdd890>
   43e1c:	d8800204 	addi	r2,sp,8
   43e20:	a822d53a 	srli	r17,r21,20
   43e24:	d8800015 	stw	r2,0(sp)
   43e28:	8009883a 	mov	r4,r16
   43e2c:	900b883a 	mov	r5,r18
   43e30:	980d883a 	mov	r6,r19
   43e34:	d9c00104 	addi	r7,sp,4
   43e38:	0047e000 	call	47e00 <__d2b>
   43e3c:	1039883a 	mov	fp,r2
   43e40:	88016a1e 	bne	r17,zero,443ec <_dtoa_r+0x710>
   43e44:	dd000217 	ldw	r20,8(sp)
   43e48:	dc400117 	ldw	r17,4(sp)
   43e4c:	00befbc4 	movi	r2,-1041
   43e50:	a463883a 	add	r17,r20,r17
   43e54:	8882ea16 	blt	r17,r2,44a00 <_dtoa_r+0xd24>
   43e58:	00bf0384 	movi	r2,-1010
   43e5c:	1445c83a 	sub	r2,r2,r17
   43e60:	89010484 	addi	r4,r17,1042
   43e64:	a8aa983a 	sll	r21,r21,r2
   43e68:	9108d83a 	srl	r4,r18,r4
   43e6c:	a908b03a 	or	r4,r21,r4
   43e70:	004d97c0 	call	4d97c <__floatunsidf>
   43e74:	017f8434 	movhi	r5,65040
   43e78:	01800044 	movi	r6,1
   43e7c:	1009883a 	mov	r4,r2
   43e80:	194b883a 	add	r5,r3,r5
   43e84:	8c7fffc4 	addi	r17,r17,-1
   43e88:	d9800f15 	stw	r6,60(sp)
   43e8c:	000d883a 	mov	r6,zero
   43e90:	01cffe34 	movhi	r7,16376
   43e94:	004cf540 	call	4cf54 <__subdf3>
   43e98:	0198dbf4 	movhi	r6,25455
   43e9c:	01cff4f4 	movhi	r7,16339
   43ea0:	1009883a 	mov	r4,r2
   43ea4:	180b883a 	mov	r5,r3
   43ea8:	3190d844 	addi	r6,r6,17249
   43eac:	39e1e9c4 	addi	r7,r7,-30809
   43eb0:	004c8300 	call	4c830 <__muldf3>
   43eb4:	01a2d874 	movhi	r6,35681
   43eb8:	01cff1f4 	movhi	r7,16327
   43ebc:	180b883a 	mov	r5,r3
   43ec0:	31b22cc4 	addi	r6,r6,-14157
   43ec4:	39e28a04 	addi	r7,r7,-30168
   43ec8:	1009883a 	mov	r4,r2
   43ecc:	004b4840 	call	4b484 <__adddf3>
   43ed0:	8809883a 	mov	r4,r17
   43ed4:	102d883a 	mov	r22,r2
   43ed8:	182b883a 	mov	r21,r3
   43edc:	004d8ac0 	call	4d8ac <__floatsidf>
   43ee0:	019427f4 	movhi	r6,20639
   43ee4:	01cff4f4 	movhi	r7,16339
   43ee8:	1009883a 	mov	r4,r2
   43eec:	180b883a 	mov	r5,r3
   43ef0:	319e7ec4 	addi	r6,r6,31227
   43ef4:	39d104c4 	addi	r7,r7,17427
   43ef8:	004c8300 	call	4c830 <__muldf3>
   43efc:	b009883a 	mov	r4,r22
   43f00:	a80b883a 	mov	r5,r21
   43f04:	100d883a 	mov	r6,r2
   43f08:	180f883a 	mov	r7,r3
   43f0c:	004b4840 	call	4b484 <__adddf3>
   43f10:	1009883a 	mov	r4,r2
   43f14:	180b883a 	mov	r5,r3
   43f18:	102d883a 	mov	r22,r2
   43f1c:	182b883a 	mov	r21,r3
   43f20:	004d8240 	call	4d824 <__fixdfsi>
   43f24:	b009883a 	mov	r4,r22
   43f28:	a80b883a 	mov	r5,r21
   43f2c:	000d883a 	mov	r6,zero
   43f30:	000f883a 	mov	r7,zero
   43f34:	d8800515 	stw	r2,20(sp)
   43f38:	004c7500 	call	4c750 <__ledf2>
   43f3c:	10023116 	blt	r2,zero,44804 <_dtoa_r+0xb28>
   43f40:	d8c00517 	ldw	r3,20(sp)
   43f44:	00800584 	movi	r2,22
   43f48:	10c21f36 	bltu	r2,r3,447c8 <_dtoa_r+0xaec>
   43f4c:	180490fa 	slli	r2,r3,3
   43f50:	00c00174 	movhi	r3,5
   43f54:	18fcb604 	addi	r3,r3,-3368
   43f58:	1885883a 	add	r2,r3,r2
   43f5c:	11000017 	ldw	r4,0(r2)
   43f60:	11400117 	ldw	r5,4(r2)
   43f64:	900d883a 	mov	r6,r18
   43f68:	980f883a 	mov	r7,r19
   43f6c:	004c6700 	call	4c670 <__gedf2>
   43f70:	0082a70e 	bge	zero,r2,44a10 <_dtoa_r+0xd34>
   43f74:	d9000517 	ldw	r4,20(sp)
   43f78:	d8000c15 	stw	zero,48(sp)
   43f7c:	213fffc4 	addi	r4,r4,-1
   43f80:	d9000515 	stw	r4,20(sp)
   43f84:	a463c83a 	sub	r17,r20,r17
   43f88:	8dbfffc4 	addi	r22,r17,-1
   43f8c:	b0021916 	blt	r22,zero,447f4 <_dtoa_r+0xb18>
   43f90:	d8000815 	stw	zero,32(sp)
   43f94:	d8800517 	ldw	r2,20(sp)
   43f98:	10020e16 	blt	r2,zero,447d4 <_dtoa_r+0xaf8>
   43f9c:	b0ad883a 	add	r22,r22,r2
   43fa0:	d8800a15 	stw	r2,40(sp)
   43fa4:	d8000915 	stw	zero,36(sp)
   43fa8:	d8c00317 	ldw	r3,12(sp)
   43fac:	00800244 	movi	r2,9
   43fb0:	10c11a36 	bltu	r2,r3,4441c <_dtoa_r+0x740>
   43fb4:	00800144 	movi	r2,5
   43fb8:	10c4fc0e 	bge	r2,r3,453ac <_dtoa_r+0x16d0>
   43fbc:	18ffff04 	addi	r3,r3,-4
   43fc0:	d8c00315 	stw	r3,12(sp)
   43fc4:	0029883a 	mov	r20,zero
   43fc8:	d9800317 	ldw	r6,12(sp)
   43fcc:	008000c4 	movi	r2,3
   43fd0:	3083bd26 	beq	r6,r2,44ec8 <_dtoa_r+0x11ec>
   43fd4:	1183670e 	bge	r2,r6,44d74 <_dtoa_r+0x1098>
   43fd8:	d8c00317 	ldw	r3,12(sp)
   43fdc:	00800104 	movi	r2,4
   43fe0:	1882e726 	beq	r3,r2,44b80 <_dtoa_r+0xea4>
   43fe4:	00800144 	movi	r2,5
   43fe8:	1884f21e 	bne	r3,r2,453b4 <_dtoa_r+0x16d8>
   43fec:	00800044 	movi	r2,1
   43ff0:	d8800b15 	stw	r2,44(sp)
   43ff4:	d8c02217 	ldw	r3,136(sp)
   43ff8:	d9000517 	ldw	r4,20(sp)
   43ffc:	1907883a 	add	r3,r3,r4
   44000:	19800044 	addi	r6,r3,1
   44004:	d8c00d15 	stw	r3,52(sp)
   44008:	d9800615 	stw	r6,24(sp)
   4400c:	0183c30e 	bge	zero,r6,44f1c <_dtoa_r+0x1240>
   44010:	d9800617 	ldw	r6,24(sp)
   44014:	3023883a 	mov	r17,r6
   44018:	80001115 	stw	zero,68(r16)
   4401c:	008005c4 	movi	r2,23
   44020:	1184f62e 	bgeu	r2,r6,453fc <_dtoa_r+0x1720>
   44024:	00c00044 	movi	r3,1
   44028:	00800104 	movi	r2,4
   4402c:	1085883a 	add	r2,r2,r2
   44030:	11000504 	addi	r4,r2,20
   44034:	180b883a 	mov	r5,r3
   44038:	18c00044 	addi	r3,r3,1
   4403c:	313ffb2e 	bgeu	r6,r4,4402c <__alt_data_end+0xfffddb6c>
   44040:	81401115 	stw	r5,68(r16)
   44044:	8009883a 	mov	r4,r16
   44048:	00471cc0 	call	471cc <_Balloc>
   4404c:	d8800715 	stw	r2,28(sp)
   44050:	80801015 	stw	r2,64(r16)
   44054:	00800384 	movi	r2,14
   44058:	1440fd36 	bltu	r2,r17,44450 <_dtoa_r+0x774>
   4405c:	a000fc26 	beq	r20,zero,44450 <_dtoa_r+0x774>
   44060:	d8800517 	ldw	r2,20(sp)
   44064:	0083b90e 	bge	zero,r2,44f4c <_dtoa_r+0x1270>
   44068:	d8c00517 	ldw	r3,20(sp)
   4406c:	108003cc 	andi	r2,r2,15
   44070:	100490fa 	slli	r2,r2,3
   44074:	182fd13a 	srai	r23,r3,4
   44078:	00c00174 	movhi	r3,5
   4407c:	18fcb604 	addi	r3,r3,-3368
   44080:	1885883a 	add	r2,r3,r2
   44084:	b8c0040c 	andi	r3,r23,16
   44088:	12c00017 	ldw	r11,0(r2)
   4408c:	12800117 	ldw	r10,4(r2)
   44090:	18039726 	beq	r3,zero,44ef0 <_dtoa_r+0x1214>
   44094:	00800174 	movhi	r2,5
   44098:	10bcac04 	addi	r2,r2,-3408
   4409c:	11800817 	ldw	r6,32(r2)
   440a0:	11c00917 	ldw	r7,36(r2)
   440a4:	9009883a 	mov	r4,r18
   440a8:	980b883a 	mov	r5,r19
   440ac:	da801615 	stw	r10,88(sp)
   440b0:	dac01515 	stw	r11,84(sp)
   440b4:	004bd200 	call	4bd20 <__divdf3>
   440b8:	da801617 	ldw	r10,88(sp)
   440bc:	dac01517 	ldw	r11,84(sp)
   440c0:	bdc003cc 	andi	r23,r23,15
   440c4:	044000c4 	movi	r17,3
   440c8:	d8800e15 	stw	r2,56(sp)
   440cc:	182b883a 	mov	r21,r3
   440d0:	b8001126 	beq	r23,zero,44118 <_dtoa_r+0x43c>
   440d4:	05000174 	movhi	r20,5
   440d8:	a53cac04 	addi	r20,r20,-3408
   440dc:	5805883a 	mov	r2,r11
   440e0:	5007883a 	mov	r3,r10
   440e4:	b980004c 	andi	r6,r23,1
   440e8:	1009883a 	mov	r4,r2
   440ec:	b82fd07a 	srai	r23,r23,1
   440f0:	180b883a 	mov	r5,r3
   440f4:	30000426 	beq	r6,zero,44108 <_dtoa_r+0x42c>
   440f8:	a1800017 	ldw	r6,0(r20)
   440fc:	a1c00117 	ldw	r7,4(r20)
   44100:	8c400044 	addi	r17,r17,1
   44104:	004c8300 	call	4c830 <__muldf3>
   44108:	a5000204 	addi	r20,r20,8
   4410c:	b83ff51e 	bne	r23,zero,440e4 <__alt_data_end+0xfffddc24>
   44110:	1017883a 	mov	r11,r2
   44114:	1815883a 	mov	r10,r3
   44118:	d9000e17 	ldw	r4,56(sp)
   4411c:	a80b883a 	mov	r5,r21
   44120:	580d883a 	mov	r6,r11
   44124:	500f883a 	mov	r7,r10
   44128:	004bd200 	call	4bd20 <__divdf3>
   4412c:	1029883a 	mov	r20,r2
   44130:	182b883a 	mov	r21,r3
   44134:	d9800c17 	ldw	r6,48(sp)
   44138:	30000626 	beq	r6,zero,44154 <_dtoa_r+0x478>
   4413c:	a009883a 	mov	r4,r20
   44140:	a80b883a 	mov	r5,r21
   44144:	000d883a 	mov	r6,zero
   44148:	01cffc34 	movhi	r7,16368
   4414c:	004c7500 	call	4c750 <__ledf2>
   44150:	10043216 	blt	r2,zero,4521c <_dtoa_r+0x1540>
   44154:	8809883a 	mov	r4,r17
   44158:	004d8ac0 	call	4d8ac <__floatsidf>
   4415c:	1009883a 	mov	r4,r2
   44160:	180b883a 	mov	r5,r3
   44164:	a00d883a 	mov	r6,r20
   44168:	a80f883a 	mov	r7,r21
   4416c:	004c8300 	call	4c830 <__muldf3>
   44170:	000d883a 	mov	r6,zero
   44174:	1009883a 	mov	r4,r2
   44178:	180b883a 	mov	r5,r3
   4417c:	01d00734 	movhi	r7,16412
   44180:	004b4840 	call	4b484 <__adddf3>
   44184:	1023883a 	mov	r17,r2
   44188:	d9800617 	ldw	r6,24(sp)
   4418c:	00bf3034 	movhi	r2,64704
   44190:	1885883a 	add	r2,r3,r2
   44194:	d8800e15 	stw	r2,56(sp)
   44198:	30032e26 	beq	r6,zero,44e54 <_dtoa_r+0x1178>
   4419c:	d8c00517 	ldw	r3,20(sp)
   441a0:	da800617 	ldw	r10,24(sp)
   441a4:	d8c01215 	stw	r3,72(sp)
   441a8:	d9000b17 	ldw	r4,44(sp)
   441ac:	2003b026 	beq	r4,zero,45070 <_dtoa_r+0x1394>
   441b0:	50bfffc4 	addi	r2,r10,-1
   441b4:	100490fa 	slli	r2,r2,3
   441b8:	00c00174 	movhi	r3,5
   441bc:	18fcb604 	addi	r3,r3,-3368
   441c0:	1885883a 	add	r2,r3,r2
   441c4:	11800017 	ldw	r6,0(r2)
   441c8:	11c00117 	ldw	r7,4(r2)
   441cc:	d8800717 	ldw	r2,28(sp)
   441d0:	0009883a 	mov	r4,zero
   441d4:	014ff834 	movhi	r5,16352
   441d8:	da801615 	stw	r10,88(sp)
   441dc:	15c00044 	addi	r23,r2,1
   441e0:	004bd200 	call	4bd20 <__divdf3>
   441e4:	d9c00e17 	ldw	r7,56(sp)
   441e8:	880d883a 	mov	r6,r17
   441ec:	1009883a 	mov	r4,r2
   441f0:	180b883a 	mov	r5,r3
   441f4:	004cf540 	call	4cf54 <__subdf3>
   441f8:	a80b883a 	mov	r5,r21
   441fc:	a009883a 	mov	r4,r20
   44200:	d8c01015 	stw	r3,64(sp)
   44204:	d8800e15 	stw	r2,56(sp)
   44208:	004d8240 	call	4d824 <__fixdfsi>
   4420c:	1009883a 	mov	r4,r2
   44210:	d8801715 	stw	r2,92(sp)
   44214:	004d8ac0 	call	4d8ac <__floatsidf>
   44218:	a009883a 	mov	r4,r20
   4421c:	a80b883a 	mov	r5,r21
   44220:	100d883a 	mov	r6,r2
   44224:	180f883a 	mov	r7,r3
   44228:	004cf540 	call	4cf54 <__subdf3>
   4422c:	da001717 	ldw	r8,92(sp)
   44230:	1829883a 	mov	r20,r3
   44234:	d8c00717 	ldw	r3,28(sp)
   44238:	d9000e17 	ldw	r4,56(sp)
   4423c:	d9401017 	ldw	r5,64(sp)
   44240:	42000c04 	addi	r8,r8,48
   44244:	1023883a 	mov	r17,r2
   44248:	1a000005 	stb	r8,0(r3)
   4424c:	880d883a 	mov	r6,r17
   44250:	a00f883a 	mov	r7,r20
   44254:	402b883a 	mov	r21,r8
   44258:	004c6700 	call	4c670 <__gedf2>
   4425c:	00844516 	blt	zero,r2,45374 <_dtoa_r+0x1698>
   44260:	0009883a 	mov	r4,zero
   44264:	014ffc34 	movhi	r5,16368
   44268:	880d883a 	mov	r6,r17
   4426c:	a00f883a 	mov	r7,r20
   44270:	004cf540 	call	4cf54 <__subdf3>
   44274:	d9000e17 	ldw	r4,56(sp)
   44278:	d9401017 	ldw	r5,64(sp)
   4427c:	100d883a 	mov	r6,r2
   44280:	180f883a 	mov	r7,r3
   44284:	004c6700 	call	4c670 <__gedf2>
   44288:	da801617 	ldw	r10,88(sp)
   4428c:	00843616 	blt	zero,r2,45368 <_dtoa_r+0x168c>
   44290:	00800044 	movi	r2,1
   44294:	12806e0e 	bge	r2,r10,44450 <_dtoa_r+0x774>
   44298:	d9000717 	ldw	r4,28(sp)
   4429c:	dd801315 	stw	r22,76(sp)
   442a0:	dc001115 	stw	r16,68(sp)
   442a4:	2295883a 	add	r10,r4,r10
   442a8:	dcc01415 	stw	r19,80(sp)
   442ac:	502d883a 	mov	r22,r10
   442b0:	dcc01017 	ldw	r19,64(sp)
   442b4:	b821883a 	mov	r16,r23
   442b8:	dc801015 	stw	r18,64(sp)
   442bc:	dc800e17 	ldw	r18,56(sp)
   442c0:	00000906 	br	442e8 <_dtoa_r+0x60c>
   442c4:	004cf540 	call	4cf54 <__subdf3>
   442c8:	1009883a 	mov	r4,r2
   442cc:	180b883a 	mov	r5,r3
   442d0:	900d883a 	mov	r6,r18
   442d4:	980f883a 	mov	r7,r19
   442d8:	004c7500 	call	4c750 <__ledf2>
   442dc:	10040e16 	blt	r2,zero,45318 <_dtoa_r+0x163c>
   442e0:	b821883a 	mov	r16,r23
   442e4:	bd841026 	beq	r23,r22,45328 <_dtoa_r+0x164c>
   442e8:	9009883a 	mov	r4,r18
   442ec:	980b883a 	mov	r5,r19
   442f0:	000d883a 	mov	r6,zero
   442f4:	01d00934 	movhi	r7,16420
   442f8:	004c8300 	call	4c830 <__muldf3>
   442fc:	000d883a 	mov	r6,zero
   44300:	01d00934 	movhi	r7,16420
   44304:	8809883a 	mov	r4,r17
   44308:	a00b883a 	mov	r5,r20
   4430c:	1025883a 	mov	r18,r2
   44310:	1827883a 	mov	r19,r3
   44314:	004c8300 	call	4c830 <__muldf3>
   44318:	180b883a 	mov	r5,r3
   4431c:	1009883a 	mov	r4,r2
   44320:	1823883a 	mov	r17,r3
   44324:	1029883a 	mov	r20,r2
   44328:	004d8240 	call	4d824 <__fixdfsi>
   4432c:	1009883a 	mov	r4,r2
   44330:	102b883a 	mov	r21,r2
   44334:	004d8ac0 	call	4d8ac <__floatsidf>
   44338:	a009883a 	mov	r4,r20
   4433c:	880b883a 	mov	r5,r17
   44340:	100d883a 	mov	r6,r2
   44344:	180f883a 	mov	r7,r3
   44348:	004cf540 	call	4cf54 <__subdf3>
   4434c:	ad400c04 	addi	r21,r21,48
   44350:	1009883a 	mov	r4,r2
   44354:	180b883a 	mov	r5,r3
   44358:	900d883a 	mov	r6,r18
   4435c:	980f883a 	mov	r7,r19
   44360:	85400005 	stb	r21,0(r16)
   44364:	1023883a 	mov	r17,r2
   44368:	1829883a 	mov	r20,r3
   4436c:	004c7500 	call	4c750 <__ledf2>
   44370:	bdc00044 	addi	r23,r23,1
   44374:	0009883a 	mov	r4,zero
   44378:	014ffc34 	movhi	r5,16368
   4437c:	880d883a 	mov	r6,r17
   44380:	a00f883a 	mov	r7,r20
   44384:	103fcf0e 	bge	r2,zero,442c4 <__alt_data_end+0xfffdde04>
   44388:	d9801217 	ldw	r6,72(sp)
   4438c:	dc001117 	ldw	r16,68(sp)
   44390:	d9800515 	stw	r6,20(sp)
   44394:	8009883a 	mov	r4,r16
   44398:	e00b883a 	mov	r5,fp
   4439c:	00472740 	call	47274 <_Bfree>
   443a0:	d8c00517 	ldw	r3,20(sp)
   443a4:	d9002317 	ldw	r4,140(sp)
   443a8:	d9802517 	ldw	r6,148(sp)
   443ac:	b8000005 	stb	zero,0(r23)
   443b0:	18800044 	addi	r2,r3,1
   443b4:	20800015 	stw	r2,0(r4)
   443b8:	30027226 	beq	r6,zero,44d84 <_dtoa_r+0x10a8>
   443bc:	35c00015 	stw	r23,0(r6)
   443c0:	d8800717 	ldw	r2,28(sp)
   443c4:	003e7406 	br	43d98 <__alt_data_end+0xfffdd8d8>
   443c8:	00800434 	movhi	r2,16
   443cc:	10bfffc4 	addi	r2,r2,-1
   443d0:	a8aa703a 	and	r21,r21,r2
   443d4:	a83e801e 	bne	r21,zero,43dd8 <__alt_data_end+0xfffdd918>
   443d8:	00800174 	movhi	r2,5
   443dc:	10bc9704 	addi	r2,r2,-3492
   443e0:	003e7f06 	br	43de0 <__alt_data_end+0xfffdd920>
   443e4:	10c00204 	addi	r3,r2,8
   443e8:	003e8206 	br	43df4 <__alt_data_end+0xfffdd934>
   443ec:	01400434 	movhi	r5,16
   443f0:	297fffc4 	addi	r5,r5,-1
   443f4:	994a703a 	and	r5,r19,r5
   443f8:	9009883a 	mov	r4,r18
   443fc:	8c7f0044 	addi	r17,r17,-1023
   44400:	294ffc34 	orhi	r5,r5,16368
   44404:	dd000217 	ldw	r20,8(sp)
   44408:	d8000f15 	stw	zero,60(sp)
   4440c:	003e9f06 	br	43e8c <__alt_data_end+0xfffdd9cc>
   44410:	00800174 	movhi	r2,5
   44414:	10bc8e04 	addi	r2,r2,-3528
   44418:	003e5f06 	br	43d98 <__alt_data_end+0xfffdd8d8>
   4441c:	80001115 	stw	zero,68(r16)
   44420:	8009883a 	mov	r4,r16
   44424:	000b883a 	mov	r5,zero
   44428:	00471cc0 	call	471cc <_Balloc>
   4442c:	01bfffc4 	movi	r6,-1
   44430:	d8800715 	stw	r2,28(sp)
   44434:	80801015 	stw	r2,64(r16)
   44438:	00800044 	movi	r2,1
   4443c:	d9800615 	stw	r6,24(sp)
   44440:	d8800b15 	stw	r2,44(sp)
   44444:	d8002215 	stw	zero,136(sp)
   44448:	d9800d15 	stw	r6,52(sp)
   4444c:	d8000315 	stw	zero,12(sp)
   44450:	d8800117 	ldw	r2,4(sp)
   44454:	10008e16 	blt	r2,zero,44690 <_dtoa_r+0x9b4>
   44458:	d9000517 	ldw	r4,20(sp)
   4445c:	00c00384 	movi	r3,14
   44460:	19008b16 	blt	r3,r4,44690 <_dtoa_r+0x9b4>
   44464:	200490fa 	slli	r2,r4,3
   44468:	00c00174 	movhi	r3,5
   4446c:	d9802217 	ldw	r6,136(sp)
   44470:	18fcb604 	addi	r3,r3,-3368
   44474:	1885883a 	add	r2,r3,r2
   44478:	14400017 	ldw	r17,0(r2)
   4447c:	15000117 	ldw	r20,4(r2)
   44480:	3001c716 	blt	r6,zero,44ba0 <_dtoa_r+0xec4>
   44484:	880d883a 	mov	r6,r17
   44488:	a00f883a 	mov	r7,r20
   4448c:	9009883a 	mov	r4,r18
   44490:	980b883a 	mov	r5,r19
   44494:	004bd200 	call	4bd20 <__divdf3>
   44498:	180b883a 	mov	r5,r3
   4449c:	1009883a 	mov	r4,r2
   444a0:	004d8240 	call	4d824 <__fixdfsi>
   444a4:	1009883a 	mov	r4,r2
   444a8:	102d883a 	mov	r22,r2
   444ac:	004d8ac0 	call	4d8ac <__floatsidf>
   444b0:	1009883a 	mov	r4,r2
   444b4:	180b883a 	mov	r5,r3
   444b8:	880d883a 	mov	r6,r17
   444bc:	a00f883a 	mov	r7,r20
   444c0:	004c8300 	call	4c830 <__muldf3>
   444c4:	9009883a 	mov	r4,r18
   444c8:	980b883a 	mov	r5,r19
   444cc:	100d883a 	mov	r6,r2
   444d0:	180f883a 	mov	r7,r3
   444d4:	004cf540 	call	4cf54 <__subdf3>
   444d8:	d9000717 	ldw	r4,28(sp)
   444dc:	d9800617 	ldw	r6,24(sp)
   444e0:	180b883a 	mov	r5,r3
   444e4:	b0c00c04 	addi	r3,r22,48
   444e8:	20c00005 	stb	r3,0(r4)
   444ec:	25c00044 	addi	r23,r4,1
   444f0:	01000044 	movi	r4,1
   444f4:	1011883a 	mov	r8,r2
   444f8:	2807883a 	mov	r3,r5
   444fc:	31003d26 	beq	r6,r4,445f4 <_dtoa_r+0x918>
   44500:	000d883a 	mov	r6,zero
   44504:	01d00934 	movhi	r7,16420
   44508:	1009883a 	mov	r4,r2
   4450c:	004c8300 	call	4c830 <__muldf3>
   44510:	1009883a 	mov	r4,r2
   44514:	180b883a 	mov	r5,r3
   44518:	000d883a 	mov	r6,zero
   4451c:	000f883a 	mov	r7,zero
   44520:	1027883a 	mov	r19,r2
   44524:	182b883a 	mov	r21,r3
   44528:	004c5ec0 	call	4c5ec <__eqdf2>
   4452c:	103f9926 	beq	r2,zero,44394 <__alt_data_end+0xfffdded4>
   44530:	d8c00617 	ldw	r3,24(sp)
   44534:	d9000717 	ldw	r4,28(sp)
   44538:	b825883a 	mov	r18,r23
   4453c:	18bfffc4 	addi	r2,r3,-1
   44540:	20ad883a 	add	r22,r4,r2
   44544:	dc000315 	stw	r16,12(sp)
   44548:	00000a06 	br	44574 <_dtoa_r+0x898>
   4454c:	004c8300 	call	4c830 <__muldf3>
   44550:	1009883a 	mov	r4,r2
   44554:	180b883a 	mov	r5,r3
   44558:	000d883a 	mov	r6,zero
   4455c:	000f883a 	mov	r7,zero
   44560:	1027883a 	mov	r19,r2
   44564:	182b883a 	mov	r21,r3
   44568:	b825883a 	mov	r18,r23
   4456c:	004c5ec0 	call	4c5ec <__eqdf2>
   44570:	10022626 	beq	r2,zero,44e0c <_dtoa_r+0x1130>
   44574:	880d883a 	mov	r6,r17
   44578:	a00f883a 	mov	r7,r20
   4457c:	9809883a 	mov	r4,r19
   44580:	a80b883a 	mov	r5,r21
   44584:	004bd200 	call	4bd20 <__divdf3>
   44588:	180b883a 	mov	r5,r3
   4458c:	1009883a 	mov	r4,r2
   44590:	004d8240 	call	4d824 <__fixdfsi>
   44594:	1009883a 	mov	r4,r2
   44598:	1021883a 	mov	r16,r2
   4459c:	004d8ac0 	call	4d8ac <__floatsidf>
   445a0:	1009883a 	mov	r4,r2
   445a4:	180b883a 	mov	r5,r3
   445a8:	880d883a 	mov	r6,r17
   445ac:	a00f883a 	mov	r7,r20
   445b0:	004c8300 	call	4c830 <__muldf3>
   445b4:	9809883a 	mov	r4,r19
   445b8:	a80b883a 	mov	r5,r21
   445bc:	100d883a 	mov	r6,r2
   445c0:	180f883a 	mov	r7,r3
   445c4:	004cf540 	call	4cf54 <__subdf3>
   445c8:	82000c04 	addi	r8,r16,48
   445cc:	92000005 	stb	r8,0(r18)
   445d0:	1009883a 	mov	r4,r2
   445d4:	180b883a 	mov	r5,r3
   445d8:	000d883a 	mov	r6,zero
   445dc:	01d00934 	movhi	r7,16420
   445e0:	1011883a 	mov	r8,r2
   445e4:	bdc00044 	addi	r23,r23,1
   445e8:	95bfd81e 	bne	r18,r22,4454c <__alt_data_end+0xfffde08c>
   445ec:	802d883a 	mov	r22,r16
   445f0:	dc000317 	ldw	r16,12(sp)
   445f4:	4009883a 	mov	r4,r8
   445f8:	180b883a 	mov	r5,r3
   445fc:	400d883a 	mov	r6,r8
   44600:	180f883a 	mov	r7,r3
   44604:	004b4840 	call	4b484 <__adddf3>
   44608:	8809883a 	mov	r4,r17
   4460c:	a00b883a 	mov	r5,r20
   44610:	100d883a 	mov	r6,r2
   44614:	180f883a 	mov	r7,r3
   44618:	1027883a 	mov	r19,r2
   4461c:	1825883a 	mov	r18,r3
   44620:	004c7500 	call	4c750 <__ledf2>
   44624:	10000816 	blt	r2,zero,44648 <_dtoa_r+0x96c>
   44628:	8809883a 	mov	r4,r17
   4462c:	a00b883a 	mov	r5,r20
   44630:	980d883a 	mov	r6,r19
   44634:	900f883a 	mov	r7,r18
   44638:	004c5ec0 	call	4c5ec <__eqdf2>
   4463c:	103f551e 	bne	r2,zero,44394 <__alt_data_end+0xfffdded4>
   44640:	b580004c 	andi	r22,r22,1
   44644:	b03f5326 	beq	r22,zero,44394 <__alt_data_end+0xfffdded4>
   44648:	bd7fffc3 	ldbu	r21,-1(r23)
   4464c:	b8bfffc4 	addi	r2,r23,-1
   44650:	1007883a 	mov	r3,r2
   44654:	01400e44 	movi	r5,57
   44658:	d9800717 	ldw	r6,28(sp)
   4465c:	00000506 	br	44674 <_dtoa_r+0x998>
   44660:	18ffffc4 	addi	r3,r3,-1
   44664:	30825e26 	beq	r6,r2,44fe0 <_dtoa_r+0x1304>
   44668:	1d400003 	ldbu	r21,0(r3)
   4466c:	102f883a 	mov	r23,r2
   44670:	10bfffc4 	addi	r2,r2,-1
   44674:	a9003fcc 	andi	r4,r21,255
   44678:	2100201c 	xori	r4,r4,128
   4467c:	213fe004 	addi	r4,r4,-128
   44680:	217ff726 	beq	r4,r5,44660 <__alt_data_end+0xfffde1a0>
   44684:	aa000044 	addi	r8,r21,1
   44688:	12000005 	stb	r8,0(r2)
   4468c:	003f4106 	br	44394 <__alt_data_end+0xfffdded4>
   44690:	d8c00b17 	ldw	r3,44(sp)
   44694:	18006726 	beq	r3,zero,44834 <_dtoa_r+0xb58>
   44698:	d9000317 	ldw	r4,12(sp)
   4469c:	00c00044 	movi	r3,1
   446a0:	19016a0e 	bge	r3,r4,44c4c <_dtoa_r+0xf70>
   446a4:	d8800617 	ldw	r2,24(sp)
   446a8:	d8c00917 	ldw	r3,36(sp)
   446ac:	157fffc4 	addi	r21,r2,-1
   446b0:	1d420716 	blt	r3,r21,44ed0 <_dtoa_r+0x11f4>
   446b4:	1d6bc83a 	sub	r21,r3,r21
   446b8:	d8800617 	ldw	r2,24(sp)
   446bc:	1002c716 	blt	r2,zero,451dc <_dtoa_r+0x1500>
   446c0:	dd000817 	ldw	r20,32(sp)
   446c4:	d8800617 	ldw	r2,24(sp)
   446c8:	d9800817 	ldw	r6,32(sp)
   446cc:	8009883a 	mov	r4,r16
   446d0:	01400044 	movi	r5,1
   446d4:	308d883a 	add	r6,r6,r2
   446d8:	d9800815 	stw	r6,32(sp)
   446dc:	b0ad883a 	add	r22,r22,r2
   446e0:	00475cc0 	call	475cc <__i2b>
   446e4:	1023883a 	mov	r17,r2
   446e8:	a0000826 	beq	r20,zero,4470c <_dtoa_r+0xa30>
   446ec:	0580070e 	bge	zero,r22,4470c <_dtoa_r+0xa30>
   446f0:	b005883a 	mov	r2,r22
   446f4:	a5812016 	blt	r20,r22,44b78 <_dtoa_r+0xe9c>
   446f8:	d8c00817 	ldw	r3,32(sp)
   446fc:	a0a9c83a 	sub	r20,r20,r2
   44700:	b0adc83a 	sub	r22,r22,r2
   44704:	1887c83a 	sub	r3,r3,r2
   44708:	d8c00815 	stw	r3,32(sp)
   4470c:	d9000917 	ldw	r4,36(sp)
   44710:	0100140e 	bge	zero,r4,44764 <_dtoa_r+0xa88>
   44714:	d9800b17 	ldw	r6,44(sp)
   44718:	3001e526 	beq	r6,zero,44eb0 <_dtoa_r+0x11d4>
   4471c:	05400e0e 	bge	zero,r21,44758 <_dtoa_r+0xa7c>
   44720:	880b883a 	mov	r5,r17
   44724:	8009883a 	mov	r4,r16
   44728:	a80d883a 	mov	r6,r21
   4472c:	00478040 	call	47804 <__pow5mult>
   44730:	e00d883a 	mov	r6,fp
   44734:	8009883a 	mov	r4,r16
   44738:	100b883a 	mov	r5,r2
   4473c:	1023883a 	mov	r17,r2
   44740:	00476080 	call	47608 <__multiply>
   44744:	102f883a 	mov	r23,r2
   44748:	e00b883a 	mov	r5,fp
   4474c:	8009883a 	mov	r4,r16
   44750:	00472740 	call	47274 <_Bfree>
   44754:	b839883a 	mov	fp,r23
   44758:	d8800917 	ldw	r2,36(sp)
   4475c:	154dc83a 	sub	r6,r2,r21
   44760:	3001281e 	bne	r6,zero,44c04 <_dtoa_r+0xf28>
   44764:	05c00044 	movi	r23,1
   44768:	8009883a 	mov	r4,r16
   4476c:	b80b883a 	mov	r5,r23
   44770:	00475cc0 	call	475cc <__i2b>
   44774:	d8c00a17 	ldw	r3,40(sp)
   44778:	102b883a 	mov	r21,r2
   4477c:	00c0310e 	bge	zero,r3,44844 <_dtoa_r+0xb68>
   44780:	8009883a 	mov	r4,r16
   44784:	100b883a 	mov	r5,r2
   44788:	180d883a 	mov	r6,r3
   4478c:	00478040 	call	47804 <__pow5mult>
   44790:	d9000317 	ldw	r4,12(sp)
   44794:	102b883a 	mov	r21,r2
   44798:	b9011f0e 	bge	r23,r4,44c18 <_dtoa_r+0xf3c>
   4479c:	0027883a 	mov	r19,zero
   447a0:	a8800417 	ldw	r2,16(r21)
   447a4:	10800104 	addi	r2,r2,4
   447a8:	1085883a 	add	r2,r2,r2
   447ac:	1085883a 	add	r2,r2,r2
   447b0:	a885883a 	add	r2,r21,r2
   447b4:	11000017 	ldw	r4,0(r2)
   447b8:	00474b40 	call	474b4 <__hi0bits>
   447bc:	00c00804 	movi	r3,32
   447c0:	1885c83a 	sub	r2,r3,r2
   447c4:	00002506 	br	4485c <_dtoa_r+0xb80>
   447c8:	01800044 	movi	r6,1
   447cc:	d9800c15 	stw	r6,48(sp)
   447d0:	003dec06 	br	43f84 <__alt_data_end+0xfffddac4>
   447d4:	d8c00817 	ldw	r3,32(sp)
   447d8:	d9000517 	ldw	r4,20(sp)
   447dc:	d8000a15 	stw	zero,40(sp)
   447e0:	1907c83a 	sub	r3,r3,r4
   447e4:	010dc83a 	sub	r6,zero,r4
   447e8:	d8c00815 	stw	r3,32(sp)
   447ec:	d9800915 	stw	r6,36(sp)
   447f0:	003ded06 	br	43fa8 <__alt_data_end+0xfffddae8>
   447f4:	05adc83a 	sub	r22,zero,r22
   447f8:	dd800815 	stw	r22,32(sp)
   447fc:	002d883a 	mov	r22,zero
   44800:	003de406 	br	43f94 <__alt_data_end+0xfffddad4>
   44804:	d9000517 	ldw	r4,20(sp)
   44808:	004d8ac0 	call	4d8ac <__floatsidf>
   4480c:	1009883a 	mov	r4,r2
   44810:	180b883a 	mov	r5,r3
   44814:	b00d883a 	mov	r6,r22
   44818:	a80f883a 	mov	r7,r21
   4481c:	004c5ec0 	call	4c5ec <__eqdf2>
   44820:	103dc726 	beq	r2,zero,43f40 <__alt_data_end+0xfffdda80>
   44824:	d8800517 	ldw	r2,20(sp)
   44828:	10bfffc4 	addi	r2,r2,-1
   4482c:	d8800515 	stw	r2,20(sp)
   44830:	003dc306 	br	43f40 <__alt_data_end+0xfffdda80>
   44834:	dd400917 	ldw	r21,36(sp)
   44838:	dd000817 	ldw	r20,32(sp)
   4483c:	0023883a 	mov	r17,zero
   44840:	003fa906 	br	446e8 <__alt_data_end+0xfffde228>
   44844:	d9800317 	ldw	r6,12(sp)
   44848:	b981670e 	bge	r23,r6,44de8 <_dtoa_r+0x110c>
   4484c:	0027883a 	mov	r19,zero
   44850:	d8c00a17 	ldw	r3,40(sp)
   44854:	183fd21e 	bne	r3,zero,447a0 <__alt_data_end+0xfffde2e0>
   44858:	00800044 	movi	r2,1
   4485c:	1585883a 	add	r2,r2,r22
   44860:	108007cc 	andi	r2,r2,31
   44864:	10005f26 	beq	r2,zero,449e4 <_dtoa_r+0xd08>
   44868:	00c00804 	movi	r3,32
   4486c:	1887c83a 	sub	r3,r3,r2
   44870:	01000104 	movi	r4,4
   44874:	20c2dd0e 	bge	r4,r3,453ec <_dtoa_r+0x1710>
   44878:	d9000817 	ldw	r4,32(sp)
   4487c:	00c00704 	movi	r3,28
   44880:	1885c83a 	sub	r2,r3,r2
   44884:	2089883a 	add	r4,r4,r2
   44888:	d9000815 	stw	r4,32(sp)
   4488c:	a0a9883a 	add	r20,r20,r2
   44890:	b0ad883a 	add	r22,r22,r2
   44894:	d8800817 	ldw	r2,32(sp)
   44898:	0080050e 	bge	zero,r2,448b0 <_dtoa_r+0xbd4>
   4489c:	e00b883a 	mov	r5,fp
   448a0:	8009883a 	mov	r4,r16
   448a4:	100d883a 	mov	r6,r2
   448a8:	00479440 	call	47944 <__lshift>
   448ac:	1039883a 	mov	fp,r2
   448b0:	0580050e 	bge	zero,r22,448c8 <_dtoa_r+0xbec>
   448b4:	a80b883a 	mov	r5,r21
   448b8:	8009883a 	mov	r4,r16
   448bc:	b00d883a 	mov	r6,r22
   448c0:	00479440 	call	47944 <__lshift>
   448c4:	102b883a 	mov	r21,r2
   448c8:	d8c00c17 	ldw	r3,48(sp)
   448cc:	1801161e 	bne	r3,zero,44d28 <_dtoa_r+0x104c>
   448d0:	d8c00617 	ldw	r3,24(sp)
   448d4:	00c12d0e 	bge	zero,r3,44d8c <_dtoa_r+0x10b0>
   448d8:	d8c00b17 	ldw	r3,44(sp)
   448dc:	1800571e 	bne	r3,zero,44a3c <_dtoa_r+0xd60>
   448e0:	dc800717 	ldw	r18,28(sp)
   448e4:	dcc00617 	ldw	r19,24(sp)
   448e8:	9029883a 	mov	r20,r18
   448ec:	00000206 	br	448f8 <_dtoa_r+0xc1c>
   448f0:	004729c0 	call	4729c <__multadd>
   448f4:	1039883a 	mov	fp,r2
   448f8:	e009883a 	mov	r4,fp
   448fc:	a80b883a 	mov	r5,r21
   44900:	0043adc0 	call	43adc <quorem>
   44904:	10800c04 	addi	r2,r2,48
   44908:	90800005 	stb	r2,0(r18)
   4490c:	94800044 	addi	r18,r18,1
   44910:	9507c83a 	sub	r3,r18,r20
   44914:	8009883a 	mov	r4,r16
   44918:	e00b883a 	mov	r5,fp
   4491c:	01800284 	movi	r6,10
   44920:	000f883a 	mov	r7,zero
   44924:	1cfff216 	blt	r3,r19,448f0 <__alt_data_end+0xfffde430>
   44928:	1011883a 	mov	r8,r2
   4492c:	d8800617 	ldw	r2,24(sp)
   44930:	00822e0e 	bge	zero,r2,451ec <_dtoa_r+0x1510>
   44934:	d9000717 	ldw	r4,28(sp)
   44938:	0025883a 	mov	r18,zero
   4493c:	20af883a 	add	r23,r4,r2
   44940:	e00b883a 	mov	r5,fp
   44944:	01800044 	movi	r6,1
   44948:	8009883a 	mov	r4,r16
   4494c:	da001715 	stw	r8,92(sp)
   44950:	00479440 	call	47944 <__lshift>
   44954:	1009883a 	mov	r4,r2
   44958:	a80b883a 	mov	r5,r21
   4495c:	1039883a 	mov	fp,r2
   44960:	0047a8c0 	call	47a8c <__mcmp>
   44964:	da001717 	ldw	r8,92(sp)
   44968:	00816e0e 	bge	zero,r2,44f24 <_dtoa_r+0x1248>
   4496c:	b93fffc3 	ldbu	r4,-1(r23)
   44970:	b8bfffc4 	addi	r2,r23,-1
   44974:	1007883a 	mov	r3,r2
   44978:	01800e44 	movi	r6,57
   4497c:	d9c00717 	ldw	r7,28(sp)
   44980:	00000506 	br	44998 <_dtoa_r+0xcbc>
   44984:	18ffffc4 	addi	r3,r3,-1
   44988:	38811926 	beq	r7,r2,44df0 <_dtoa_r+0x1114>
   4498c:	19000003 	ldbu	r4,0(r3)
   44990:	102f883a 	mov	r23,r2
   44994:	10bfffc4 	addi	r2,r2,-1
   44998:	21403fcc 	andi	r5,r4,255
   4499c:	2940201c 	xori	r5,r5,128
   449a0:	297fe004 	addi	r5,r5,-128
   449a4:	29bff726 	beq	r5,r6,44984 <__alt_data_end+0xfffde4c4>
   449a8:	21000044 	addi	r4,r4,1
   449ac:	11000005 	stb	r4,0(r2)
   449b0:	8009883a 	mov	r4,r16
   449b4:	a80b883a 	mov	r5,r21
   449b8:	00472740 	call	47274 <_Bfree>
   449bc:	883e7526 	beq	r17,zero,44394 <__alt_data_end+0xfffdded4>
   449c0:	90000426 	beq	r18,zero,449d4 <_dtoa_r+0xcf8>
   449c4:	94400326 	beq	r18,r17,449d4 <_dtoa_r+0xcf8>
   449c8:	8009883a 	mov	r4,r16
   449cc:	900b883a 	mov	r5,r18
   449d0:	00472740 	call	47274 <_Bfree>
   449d4:	8009883a 	mov	r4,r16
   449d8:	880b883a 	mov	r5,r17
   449dc:	00472740 	call	47274 <_Bfree>
   449e0:	003e6c06 	br	44394 <__alt_data_end+0xfffdded4>
   449e4:	00800704 	movi	r2,28
   449e8:	d9800817 	ldw	r6,32(sp)
   449ec:	a0a9883a 	add	r20,r20,r2
   449f0:	b0ad883a 	add	r22,r22,r2
   449f4:	308d883a 	add	r6,r6,r2
   449f8:	d9800815 	stw	r6,32(sp)
   449fc:	003fa506 	br	44894 <__alt_data_end+0xfffde3d4>
   44a00:	013efb84 	movi	r4,-1042
   44a04:	246bc83a 	sub	r21,r4,r17
   44a08:	9548983a 	sll	r4,r18,r21
   44a0c:	003d1806 	br	43e70 <__alt_data_end+0xfffdd9b0>
   44a10:	d8000c15 	stw	zero,48(sp)
   44a14:	003d5b06 	br	43f84 <__alt_data_end+0xfffddac4>
   44a18:	880b883a 	mov	r5,r17
   44a1c:	8009883a 	mov	r4,r16
   44a20:	01800284 	movi	r6,10
   44a24:	000f883a 	mov	r7,zero
   44a28:	004729c0 	call	4729c <__multadd>
   44a2c:	1023883a 	mov	r17,r2
   44a30:	d8800d17 	ldw	r2,52(sp)
   44a34:	0082550e 	bge	zero,r2,4538c <_dtoa_r+0x16b0>
   44a38:	d8800615 	stw	r2,24(sp)
   44a3c:	0500050e 	bge	zero,r20,44a54 <_dtoa_r+0xd78>
   44a40:	880b883a 	mov	r5,r17
   44a44:	8009883a 	mov	r4,r16
   44a48:	a00d883a 	mov	r6,r20
   44a4c:	00479440 	call	47944 <__lshift>
   44a50:	1023883a 	mov	r17,r2
   44a54:	98016a1e 	bne	r19,zero,45000 <_dtoa_r+0x1324>
   44a58:	8829883a 	mov	r20,r17
   44a5c:	d9000617 	ldw	r4,24(sp)
   44a60:	dcc00717 	ldw	r19,28(sp)
   44a64:	9480004c 	andi	r18,r18,1
   44a68:	20bfffc4 	addi	r2,r4,-1
   44a6c:	9885883a 	add	r2,r19,r2
   44a70:	d8800415 	stw	r2,16(sp)
   44a74:	dc800615 	stw	r18,24(sp)
   44a78:	e009883a 	mov	r4,fp
   44a7c:	a80b883a 	mov	r5,r21
   44a80:	0043adc0 	call	43adc <quorem>
   44a84:	e009883a 	mov	r4,fp
   44a88:	880b883a 	mov	r5,r17
   44a8c:	102f883a 	mov	r23,r2
   44a90:	0047a8c0 	call	47a8c <__mcmp>
   44a94:	8009883a 	mov	r4,r16
   44a98:	a80b883a 	mov	r5,r21
   44a9c:	a00d883a 	mov	r6,r20
   44aa0:	102d883a 	mov	r22,r2
   44aa4:	0047aec0 	call	47aec <__mdiff>
   44aa8:	1007883a 	mov	r3,r2
   44aac:	10800317 	ldw	r2,12(r2)
   44ab0:	bc800c04 	addi	r18,r23,48
   44ab4:	1000971e 	bne	r2,zero,44d14 <_dtoa_r+0x1038>
   44ab8:	180b883a 	mov	r5,r3
   44abc:	e009883a 	mov	r4,fp
   44ac0:	d8c01515 	stw	r3,84(sp)
   44ac4:	0047a8c0 	call	47a8c <__mcmp>
   44ac8:	d8c01517 	ldw	r3,84(sp)
   44acc:	8009883a 	mov	r4,r16
   44ad0:	d8801515 	stw	r2,84(sp)
   44ad4:	180b883a 	mov	r5,r3
   44ad8:	00472740 	call	47274 <_Bfree>
   44adc:	d8801517 	ldw	r2,84(sp)
   44ae0:	1000041e 	bne	r2,zero,44af4 <_dtoa_r+0xe18>
   44ae4:	d9800317 	ldw	r6,12(sp)
   44ae8:	3000021e 	bne	r6,zero,44af4 <_dtoa_r+0xe18>
   44aec:	d8c00617 	ldw	r3,24(sp)
   44af0:	18007626 	beq	r3,zero,44ccc <_dtoa_r+0xff0>
   44af4:	b0005b16 	blt	r22,zero,44c64 <_dtoa_r+0xf88>
   44af8:	b000041e 	bne	r22,zero,44b0c <_dtoa_r+0xe30>
   44afc:	d9000317 	ldw	r4,12(sp)
   44b00:	2000021e 	bne	r4,zero,44b0c <_dtoa_r+0xe30>
   44b04:	d8c00617 	ldw	r3,24(sp)
   44b08:	18005626 	beq	r3,zero,44c64 <_dtoa_r+0xf88>
   44b0c:	00814d16 	blt	zero,r2,45044 <_dtoa_r+0x1368>
   44b10:	d8c00417 	ldw	r3,16(sp)
   44b14:	9d800044 	addi	r22,r19,1
   44b18:	9c800005 	stb	r18,0(r19)
   44b1c:	b02f883a 	mov	r23,r22
   44b20:	98c14c26 	beq	r19,r3,45054 <_dtoa_r+0x1378>
   44b24:	e00b883a 	mov	r5,fp
   44b28:	8009883a 	mov	r4,r16
   44b2c:	01800284 	movi	r6,10
   44b30:	000f883a 	mov	r7,zero
   44b34:	004729c0 	call	4729c <__multadd>
   44b38:	1039883a 	mov	fp,r2
   44b3c:	8d006d26 	beq	r17,r20,44cf4 <_dtoa_r+0x1018>
   44b40:	880b883a 	mov	r5,r17
   44b44:	01800284 	movi	r6,10
   44b48:	000f883a 	mov	r7,zero
   44b4c:	8009883a 	mov	r4,r16
   44b50:	004729c0 	call	4729c <__multadd>
   44b54:	a00b883a 	mov	r5,r20
   44b58:	8009883a 	mov	r4,r16
   44b5c:	01800284 	movi	r6,10
   44b60:	000f883a 	mov	r7,zero
   44b64:	1023883a 	mov	r17,r2
   44b68:	004729c0 	call	4729c <__multadd>
   44b6c:	1029883a 	mov	r20,r2
   44b70:	b027883a 	mov	r19,r22
   44b74:	003fc006 	br	44a78 <__alt_data_end+0xfffde5b8>
   44b78:	a005883a 	mov	r2,r20
   44b7c:	003ede06 	br	446f8 <__alt_data_end+0xfffde238>
   44b80:	01000044 	movi	r4,1
   44b84:	d9000b15 	stw	r4,44(sp)
   44b88:	d9802217 	ldw	r6,136(sp)
   44b8c:	0180dc0e 	bge	zero,r6,44f00 <_dtoa_r+0x1224>
   44b90:	3023883a 	mov	r17,r6
   44b94:	d9800d15 	stw	r6,52(sp)
   44b98:	d9800615 	stw	r6,24(sp)
   44b9c:	003d1e06 	br	44018 <__alt_data_end+0xfffddb58>
   44ba0:	d8800617 	ldw	r2,24(sp)
   44ba4:	00be3716 	blt	zero,r2,44484 <__alt_data_end+0xfffddfc4>
   44ba8:	1000be1e 	bne	r2,zero,44ea4 <_dtoa_r+0x11c8>
   44bac:	8809883a 	mov	r4,r17
   44bb0:	a00b883a 	mov	r5,r20
   44bb4:	000d883a 	mov	r6,zero
   44bb8:	01d00534 	movhi	r7,16404
   44bbc:	004c8300 	call	4c830 <__muldf3>
   44bc0:	1009883a 	mov	r4,r2
   44bc4:	180b883a 	mov	r5,r3
   44bc8:	900d883a 	mov	r6,r18
   44bcc:	980f883a 	mov	r7,r19
   44bd0:	004c6700 	call	4c670 <__gedf2>
   44bd4:	002b883a 	mov	r21,zero
   44bd8:	0023883a 	mov	r17,zero
   44bdc:	10007a16 	blt	r2,zero,44dc8 <_dtoa_r+0x10ec>
   44be0:	d9002217 	ldw	r4,136(sp)
   44be4:	ddc00717 	ldw	r23,28(sp)
   44be8:	0108303a 	nor	r4,zero,r4
   44bec:	d9000515 	stw	r4,20(sp)
   44bf0:	8009883a 	mov	r4,r16
   44bf4:	a80b883a 	mov	r5,r21
   44bf8:	00472740 	call	47274 <_Bfree>
   44bfc:	883f751e 	bne	r17,zero,449d4 <__alt_data_end+0xfffde514>
   44c00:	003de406 	br	44394 <__alt_data_end+0xfffdded4>
   44c04:	e00b883a 	mov	r5,fp
   44c08:	8009883a 	mov	r4,r16
   44c0c:	00478040 	call	47804 <__pow5mult>
   44c10:	1039883a 	mov	fp,r2
   44c14:	003ed306 	br	44764 <__alt_data_end+0xfffde2a4>
   44c18:	903ee01e 	bne	r18,zero,4479c <__alt_data_end+0xfffde2dc>
   44c1c:	00800434 	movhi	r2,16
   44c20:	10bfffc4 	addi	r2,r2,-1
   44c24:	9884703a 	and	r2,r19,r2
   44c28:	103f081e 	bne	r2,zero,4484c <__alt_data_end+0xfffde38c>
   44c2c:	9cdffc2c 	andhi	r19,r19,32752
   44c30:	983f0626 	beq	r19,zero,4484c <__alt_data_end+0xfffde38c>
   44c34:	d8800817 	ldw	r2,32(sp)
   44c38:	b5800044 	addi	r22,r22,1
   44c3c:	04c00044 	movi	r19,1
   44c40:	10800044 	addi	r2,r2,1
   44c44:	d8800815 	stw	r2,32(sp)
   44c48:	003f0106 	br	44850 <__alt_data_end+0xfffde390>
   44c4c:	d9800f17 	ldw	r6,60(sp)
   44c50:	30016826 	beq	r6,zero,451f4 <_dtoa_r+0x1518>
   44c54:	10810cc4 	addi	r2,r2,1075
   44c58:	dd400917 	ldw	r21,36(sp)
   44c5c:	dd000817 	ldw	r20,32(sp)
   44c60:	003e9906 	br	446c8 <__alt_data_end+0xfffde208>
   44c64:	9011883a 	mov	r8,r18
   44c68:	4007883a 	mov	r3,r8
   44c6c:	e02d883a 	mov	r22,fp
   44c70:	0080100e 	bge	zero,r2,44cb4 <_dtoa_r+0xfd8>
   44c74:	01800044 	movi	r6,1
   44c78:	8009883a 	mov	r4,r16
   44c7c:	e00b883a 	mov	r5,fp
   44c80:	da001515 	stw	r8,84(sp)
   44c84:	da001715 	stw	r8,92(sp)
   44c88:	00479440 	call	47944 <__lshift>
   44c8c:	1009883a 	mov	r4,r2
   44c90:	a80b883a 	mov	r5,r21
   44c94:	102d883a 	mov	r22,r2
   44c98:	0047a8c0 	call	47a8c <__mcmp>
   44c9c:	d8c01517 	ldw	r3,84(sp)
   44ca0:	da001717 	ldw	r8,92(sp)
   44ca4:	0081a50e 	bge	zero,r2,4533c <_dtoa_r+0x1660>
   44ca8:	00800e44 	movi	r2,57
   44cac:	40817b26 	beq	r8,r2,4529c <_dtoa_r+0x15c0>
   44cb0:	40c00044 	addi	r3,r8,1
   44cb4:	8825883a 	mov	r18,r17
   44cb8:	9dc00044 	addi	r23,r19,1
   44cbc:	98c00005 	stb	r3,0(r19)
   44cc0:	a023883a 	mov	r17,r20
   44cc4:	b039883a 	mov	fp,r22
   44cc8:	003f3906 	br	449b0 <__alt_data_end+0xfffde4f0>
   44ccc:	00800e44 	movi	r2,57
   44cd0:	9011883a 	mov	r8,r18
   44cd4:	90817226 	beq	r18,r2,452a0 <_dtoa_r+0x15c4>
   44cd8:	0580010e 	bge	zero,r22,44ce0 <_dtoa_r+0x1004>
   44cdc:	ba000c44 	addi	r8,r23,49
   44ce0:	8825883a 	mov	r18,r17
   44ce4:	9dc00044 	addi	r23,r19,1
   44ce8:	9a000005 	stb	r8,0(r19)
   44cec:	a023883a 	mov	r17,r20
   44cf0:	003f2f06 	br	449b0 <__alt_data_end+0xfffde4f0>
   44cf4:	880b883a 	mov	r5,r17
   44cf8:	8009883a 	mov	r4,r16
   44cfc:	01800284 	movi	r6,10
   44d00:	000f883a 	mov	r7,zero
   44d04:	004729c0 	call	4729c <__multadd>
   44d08:	1023883a 	mov	r17,r2
   44d0c:	1029883a 	mov	r20,r2
   44d10:	003f9706 	br	44b70 <__alt_data_end+0xfffde6b0>
   44d14:	8009883a 	mov	r4,r16
   44d18:	180b883a 	mov	r5,r3
   44d1c:	00472740 	call	47274 <_Bfree>
   44d20:	00800044 	movi	r2,1
   44d24:	003f7306 	br	44af4 <__alt_data_end+0xfffde634>
   44d28:	e009883a 	mov	r4,fp
   44d2c:	a80b883a 	mov	r5,r21
   44d30:	0047a8c0 	call	47a8c <__mcmp>
   44d34:	103ee60e 	bge	r2,zero,448d0 <__alt_data_end+0xfffde410>
   44d38:	8009883a 	mov	r4,r16
   44d3c:	e00b883a 	mov	r5,fp
   44d40:	01800284 	movi	r6,10
   44d44:	000f883a 	mov	r7,zero
   44d48:	004729c0 	call	4729c <__multadd>
   44d4c:	d9000517 	ldw	r4,20(sp)
   44d50:	d9800b17 	ldw	r6,44(sp)
   44d54:	1039883a 	mov	fp,r2
   44d58:	213fffc4 	addi	r4,r4,-1
   44d5c:	d9000515 	stw	r4,20(sp)
   44d60:	303f2d1e 	bne	r6,zero,44a18 <__alt_data_end+0xfffde558>
   44d64:	d9000d17 	ldw	r4,52(sp)
   44d68:	0101780e 	bge	zero,r4,4534c <_dtoa_r+0x1670>
   44d6c:	d9000615 	stw	r4,24(sp)
   44d70:	003edb06 	br	448e0 <__alt_data_end+0xfffde420>
   44d74:	00800084 	movi	r2,2
   44d78:	30818e1e 	bne	r6,r2,453b4 <_dtoa_r+0x16d8>
   44d7c:	d8000b15 	stw	zero,44(sp)
   44d80:	003f8106 	br	44b88 <__alt_data_end+0xfffde6c8>
   44d84:	d8800717 	ldw	r2,28(sp)
   44d88:	003c0306 	br	43d98 <__alt_data_end+0xfffdd8d8>
   44d8c:	d9000317 	ldw	r4,12(sp)
   44d90:	00800084 	movi	r2,2
   44d94:	113ed00e 	bge	r2,r4,448d8 <__alt_data_end+0xfffde418>
   44d98:	d8c00617 	ldw	r3,24(sp)
   44d9c:	183f901e 	bne	r3,zero,44be0 <__alt_data_end+0xfffde720>
   44da0:	a80b883a 	mov	r5,r21
   44da4:	8009883a 	mov	r4,r16
   44da8:	01800144 	movi	r6,5
   44dac:	000f883a 	mov	r7,zero
   44db0:	004729c0 	call	4729c <__multadd>
   44db4:	e009883a 	mov	r4,fp
   44db8:	100b883a 	mov	r5,r2
   44dbc:	102b883a 	mov	r21,r2
   44dc0:	0047a8c0 	call	47a8c <__mcmp>
   44dc4:	00bf860e 	bge	zero,r2,44be0 <__alt_data_end+0xfffde720>
   44dc8:	d9800717 	ldw	r6,28(sp)
   44dcc:	00800c44 	movi	r2,49
   44dd0:	30800005 	stb	r2,0(r6)
   44dd4:	d8800517 	ldw	r2,20(sp)
   44dd8:	35c00044 	addi	r23,r6,1
   44ddc:	10800044 	addi	r2,r2,1
   44de0:	d8800515 	stw	r2,20(sp)
   44de4:	003f8206 	br	44bf0 <__alt_data_end+0xfffde730>
   44de8:	903e981e 	bne	r18,zero,4484c <__alt_data_end+0xfffde38c>
   44dec:	003f8b06 	br	44c1c <__alt_data_end+0xfffde75c>
   44df0:	d9800517 	ldw	r6,20(sp)
   44df4:	d8c00717 	ldw	r3,28(sp)
   44df8:	00800c44 	movi	r2,49
   44dfc:	31800044 	addi	r6,r6,1
   44e00:	d9800515 	stw	r6,20(sp)
   44e04:	18800005 	stb	r2,0(r3)
   44e08:	003ee906 	br	449b0 <__alt_data_end+0xfffde4f0>
   44e0c:	dc000317 	ldw	r16,12(sp)
   44e10:	003d6006 	br	44394 <__alt_data_end+0xfffdded4>
   44e14:	8809883a 	mov	r4,r17
   44e18:	004d8ac0 	call	4d8ac <__floatsidf>
   44e1c:	a009883a 	mov	r4,r20
   44e20:	a80b883a 	mov	r5,r21
   44e24:	100d883a 	mov	r6,r2
   44e28:	180f883a 	mov	r7,r3
   44e2c:	004c8300 	call	4c830 <__muldf3>
   44e30:	1009883a 	mov	r4,r2
   44e34:	180b883a 	mov	r5,r3
   44e38:	000d883a 	mov	r6,zero
   44e3c:	01d00734 	movhi	r7,16412
   44e40:	004b4840 	call	4b484 <__adddf3>
   44e44:	1023883a 	mov	r17,r2
   44e48:	00bf3034 	movhi	r2,64704
   44e4c:	1885883a 	add	r2,r3,r2
   44e50:	d8800e15 	stw	r2,56(sp)
   44e54:	a009883a 	mov	r4,r20
   44e58:	a80b883a 	mov	r5,r21
   44e5c:	000d883a 	mov	r6,zero
   44e60:	01d00534 	movhi	r7,16404
   44e64:	004cf540 	call	4cf54 <__subdf3>
   44e68:	d9c00e17 	ldw	r7,56(sp)
   44e6c:	1009883a 	mov	r4,r2
   44e70:	180b883a 	mov	r5,r3
   44e74:	880d883a 	mov	r6,r17
   44e78:	102b883a 	mov	r21,r2
   44e7c:	1829883a 	mov	r20,r3
   44e80:	004c6700 	call	4c670 <__gedf2>
   44e84:	00807716 	blt	zero,r2,45064 <_dtoa_r+0x1388>
   44e88:	d8800e17 	ldw	r2,56(sp)
   44e8c:	a809883a 	mov	r4,r21
   44e90:	a00b883a 	mov	r5,r20
   44e94:	11e0003c 	xorhi	r7,r2,32768
   44e98:	880d883a 	mov	r6,r17
   44e9c:	004c7500 	call	4c750 <__ledf2>
   44ea0:	103d6b0e 	bge	r2,zero,44450 <__alt_data_end+0xfffddf90>
   44ea4:	002b883a 	mov	r21,zero
   44ea8:	0023883a 	mov	r17,zero
   44eac:	003f4c06 	br	44be0 <__alt_data_end+0xfffde720>
   44eb0:	d9800917 	ldw	r6,36(sp)
   44eb4:	e00b883a 	mov	r5,fp
   44eb8:	8009883a 	mov	r4,r16
   44ebc:	00478040 	call	47804 <__pow5mult>
   44ec0:	1039883a 	mov	fp,r2
   44ec4:	003e2706 	br	44764 <__alt_data_end+0xfffde2a4>
   44ec8:	d8000b15 	stw	zero,44(sp)
   44ecc:	003c4906 	br	43ff4 <__alt_data_end+0xfffddb34>
   44ed0:	d9000917 	ldw	r4,36(sp)
   44ed4:	d9800a17 	ldw	r6,40(sp)
   44ed8:	dd400915 	stw	r21,36(sp)
   44edc:	a905c83a 	sub	r2,r21,r4
   44ee0:	308d883a 	add	r6,r6,r2
   44ee4:	d9800a15 	stw	r6,40(sp)
   44ee8:	002b883a 	mov	r21,zero
   44eec:	003df206 	br	446b8 <__alt_data_end+0xfffde1f8>
   44ef0:	dc800e15 	stw	r18,56(sp)
   44ef4:	982b883a 	mov	r21,r19
   44ef8:	04400084 	movi	r17,2
   44efc:	003c7406 	br	440d0 <__alt_data_end+0xfffddc10>
   44f00:	04400044 	movi	r17,1
   44f04:	dc400d15 	stw	r17,52(sp)
   44f08:	dc400615 	stw	r17,24(sp)
   44f0c:	dc402215 	stw	r17,136(sp)
   44f10:	80001115 	stw	zero,68(r16)
   44f14:	000b883a 	mov	r5,zero
   44f18:	003c4a06 	br	44044 <__alt_data_end+0xfffddb84>
   44f1c:	3023883a 	mov	r17,r6
   44f20:	003ffb06 	br	44f10 <__alt_data_end+0xfffdea50>
   44f24:	1000021e 	bne	r2,zero,44f30 <_dtoa_r+0x1254>
   44f28:	4200004c 	andi	r8,r8,1
   44f2c:	403e8f1e 	bne	r8,zero,4496c <__alt_data_end+0xfffde4ac>
   44f30:	01000c04 	movi	r4,48
   44f34:	00000106 	br	44f3c <_dtoa_r+0x1260>
   44f38:	102f883a 	mov	r23,r2
   44f3c:	b8bfffc4 	addi	r2,r23,-1
   44f40:	10c00007 	ldb	r3,0(r2)
   44f44:	193ffc26 	beq	r3,r4,44f38 <__alt_data_end+0xfffdea78>
   44f48:	003e9906 	br	449b0 <__alt_data_end+0xfffde4f0>
   44f4c:	d9000517 	ldw	r4,20(sp)
   44f50:	012fc83a 	sub	r23,zero,r4
   44f54:	b800ad26 	beq	r23,zero,4520c <_dtoa_r+0x1530>
   44f58:	b88003cc 	andi	r2,r23,15
   44f5c:	100490fa 	slli	r2,r2,3
   44f60:	00c00174 	movhi	r3,5
   44f64:	18fcb604 	addi	r3,r3,-3368
   44f68:	1885883a 	add	r2,r3,r2
   44f6c:	11800017 	ldw	r6,0(r2)
   44f70:	11c00117 	ldw	r7,4(r2)
   44f74:	b82fd13a 	srai	r23,r23,4
   44f78:	9009883a 	mov	r4,r18
   44f7c:	980b883a 	mov	r5,r19
   44f80:	004c8300 	call	4c830 <__muldf3>
   44f84:	1029883a 	mov	r20,r2
   44f88:	182b883a 	mov	r21,r3
   44f8c:	b800f426 	beq	r23,zero,45360 <_dtoa_r+0x1684>
   44f90:	02000174 	movhi	r8,5
   44f94:	423cac04 	addi	r8,r8,-3408
   44f98:	8029883a 	mov	r20,r16
   44f9c:	04400084 	movi	r17,2
   44fa0:	4021883a 	mov	r16,r8
   44fa4:	b980004c 	andi	r6,r23,1
   44fa8:	1009883a 	mov	r4,r2
   44fac:	b82fd07a 	srai	r23,r23,1
   44fb0:	180b883a 	mov	r5,r3
   44fb4:	30000426 	beq	r6,zero,44fc8 <_dtoa_r+0x12ec>
   44fb8:	81800017 	ldw	r6,0(r16)
   44fbc:	81c00117 	ldw	r7,4(r16)
   44fc0:	8c400044 	addi	r17,r17,1
   44fc4:	004c8300 	call	4c830 <__muldf3>
   44fc8:	84000204 	addi	r16,r16,8
   44fcc:	b83ff51e 	bne	r23,zero,44fa4 <__alt_data_end+0xfffdeae4>
   44fd0:	a021883a 	mov	r16,r20
   44fd4:	182b883a 	mov	r21,r3
   44fd8:	1029883a 	mov	r20,r2
   44fdc:	003c5506 	br	44134 <__alt_data_end+0xfffddc74>
   44fe0:	d9800517 	ldw	r6,20(sp)
   44fe4:	d9000717 	ldw	r4,28(sp)
   44fe8:	00c00c04 	movi	r3,48
   44fec:	31800044 	addi	r6,r6,1
   44ff0:	d9800515 	stw	r6,20(sp)
   44ff4:	20c00005 	stb	r3,0(r4)
   44ff8:	02000c44 	movi	r8,49
   44ffc:	003da206 	br	44688 <__alt_data_end+0xfffde1c8>
   45000:	89400117 	ldw	r5,4(r17)
   45004:	8009883a 	mov	r4,r16
   45008:	00471cc0 	call	471cc <_Balloc>
   4500c:	89800417 	ldw	r6,16(r17)
   45010:	11000304 	addi	r4,r2,12
   45014:	89400304 	addi	r5,r17,12
   45018:	31800084 	addi	r6,r6,2
   4501c:	318d883a 	add	r6,r6,r6
   45020:	318d883a 	add	r6,r6,r6
   45024:	1027883a 	mov	r19,r2
   45028:	00415ec0 	call	415ec <memcpy>
   4502c:	8009883a 	mov	r4,r16
   45030:	980b883a 	mov	r5,r19
   45034:	01800044 	movi	r6,1
   45038:	00479440 	call	47944 <__lshift>
   4503c:	1029883a 	mov	r20,r2
   45040:	003e8606 	br	44a5c <__alt_data_end+0xfffde59c>
   45044:	00800e44 	movi	r2,57
   45048:	90809526 	beq	r18,r2,452a0 <_dtoa_r+0x15c4>
   4504c:	92000044 	addi	r8,r18,1
   45050:	003f2306 	br	44ce0 <__alt_data_end+0xfffde820>
   45054:	9011883a 	mov	r8,r18
   45058:	8825883a 	mov	r18,r17
   4505c:	a023883a 	mov	r17,r20
   45060:	003e3706 	br	44940 <__alt_data_end+0xfffde480>
   45064:	002b883a 	mov	r21,zero
   45068:	0023883a 	mov	r17,zero
   4506c:	003f5606 	br	44dc8 <__alt_data_end+0xfffde908>
   45070:	51bfffc4 	addi	r6,r10,-1
   45074:	300490fa 	slli	r2,r6,3
   45078:	00c00174 	movhi	r3,5
   4507c:	18fcb604 	addi	r3,r3,-3368
   45080:	1885883a 	add	r2,r3,r2
   45084:	d9c00e17 	ldw	r7,56(sp)
   45088:	11000017 	ldw	r4,0(r2)
   4508c:	11400117 	ldw	r5,4(r2)
   45090:	d8800717 	ldw	r2,28(sp)
   45094:	d9801015 	stw	r6,64(sp)
   45098:	880d883a 	mov	r6,r17
   4509c:	da801615 	stw	r10,88(sp)
   450a0:	15c00044 	addi	r23,r2,1
   450a4:	004c8300 	call	4c830 <__muldf3>
   450a8:	a80b883a 	mov	r5,r21
   450ac:	a009883a 	mov	r4,r20
   450b0:	d8c01115 	stw	r3,68(sp)
   450b4:	d8800e15 	stw	r2,56(sp)
   450b8:	004d8240 	call	4d824 <__fixdfsi>
   450bc:	1009883a 	mov	r4,r2
   450c0:	1023883a 	mov	r17,r2
   450c4:	004d8ac0 	call	4d8ac <__floatsidf>
   450c8:	a009883a 	mov	r4,r20
   450cc:	a80b883a 	mov	r5,r21
   450d0:	100d883a 	mov	r6,r2
   450d4:	180f883a 	mov	r7,r3
   450d8:	004cf540 	call	4cf54 <__subdf3>
   450dc:	1813883a 	mov	r9,r3
   450e0:	d8c00717 	ldw	r3,28(sp)
   450e4:	8c400c04 	addi	r17,r17,48
   450e8:	1011883a 	mov	r8,r2
   450ec:	1c400005 	stb	r17,0(r3)
   450f0:	da801617 	ldw	r10,88(sp)
   450f4:	00800044 	movi	r2,1
   450f8:	50802326 	beq	r10,r2,45188 <_dtoa_r+0x14ac>
   450fc:	d8800717 	ldw	r2,28(sp)
   45100:	b82b883a 	mov	r21,r23
   45104:	dc001315 	stw	r16,76(sp)
   45108:	12a9883a 	add	r20,r2,r10
   4510c:	4807883a 	mov	r3,r9
   45110:	4005883a 	mov	r2,r8
   45114:	dc801415 	stw	r18,80(sp)
   45118:	000d883a 	mov	r6,zero
   4511c:	01d00934 	movhi	r7,16420
   45120:	1009883a 	mov	r4,r2
   45124:	180b883a 	mov	r5,r3
   45128:	004c8300 	call	4c830 <__muldf3>
   4512c:	180b883a 	mov	r5,r3
   45130:	1009883a 	mov	r4,r2
   45134:	1821883a 	mov	r16,r3
   45138:	1025883a 	mov	r18,r2
   4513c:	004d8240 	call	4d824 <__fixdfsi>
   45140:	1009883a 	mov	r4,r2
   45144:	1023883a 	mov	r17,r2
   45148:	004d8ac0 	call	4d8ac <__floatsidf>
   4514c:	9009883a 	mov	r4,r18
   45150:	800b883a 	mov	r5,r16
   45154:	100d883a 	mov	r6,r2
   45158:	180f883a 	mov	r7,r3
   4515c:	8c400c04 	addi	r17,r17,48
   45160:	004cf540 	call	4cf54 <__subdf3>
   45164:	ad400044 	addi	r21,r21,1
   45168:	ac7fffc5 	stb	r17,-1(r21)
   4516c:	ad3fea1e 	bne	r21,r20,45118 <__alt_data_end+0xfffdec58>
   45170:	1813883a 	mov	r9,r3
   45174:	d8c01017 	ldw	r3,64(sp)
   45178:	dc001317 	ldw	r16,76(sp)
   4517c:	dc801417 	ldw	r18,80(sp)
   45180:	1011883a 	mov	r8,r2
   45184:	b8ef883a 	add	r23,r23,r3
   45188:	d9000e17 	ldw	r4,56(sp)
   4518c:	d9401117 	ldw	r5,68(sp)
   45190:	000d883a 	mov	r6,zero
   45194:	01cff834 	movhi	r7,16352
   45198:	da001715 	stw	r8,92(sp)
   4519c:	da401515 	stw	r9,84(sp)
   451a0:	004b4840 	call	4b484 <__adddf3>
   451a4:	da001717 	ldw	r8,92(sp)
   451a8:	da401517 	ldw	r9,84(sp)
   451ac:	1009883a 	mov	r4,r2
   451b0:	400d883a 	mov	r6,r8
   451b4:	480f883a 	mov	r7,r9
   451b8:	180b883a 	mov	r5,r3
   451bc:	004c7500 	call	4c750 <__ledf2>
   451c0:	da001717 	ldw	r8,92(sp)
   451c4:	da401517 	ldw	r9,84(sp)
   451c8:	10003b0e 	bge	r2,zero,452b8 <_dtoa_r+0x15dc>
   451cc:	d9001217 	ldw	r4,72(sp)
   451d0:	bd7fffc3 	ldbu	r21,-1(r23)
   451d4:	d9000515 	stw	r4,20(sp)
   451d8:	003d1c06 	br	4464c <__alt_data_end+0xfffde18c>
   451dc:	d8c00817 	ldw	r3,32(sp)
   451e0:	18a9c83a 	sub	r20,r3,r2
   451e4:	0005883a 	mov	r2,zero
   451e8:	003d3706 	br	446c8 <__alt_data_end+0xfffde208>
   451ec:	00800044 	movi	r2,1
   451f0:	003dd006 	br	44934 <__alt_data_end+0xfffde474>
   451f4:	d8c00217 	ldw	r3,8(sp)
   451f8:	00800d84 	movi	r2,54
   451fc:	dd400917 	ldw	r21,36(sp)
   45200:	10c5c83a 	sub	r2,r2,r3
   45204:	dd000817 	ldw	r20,32(sp)
   45208:	003d2f06 	br	446c8 <__alt_data_end+0xfffde208>
   4520c:	9029883a 	mov	r20,r18
   45210:	982b883a 	mov	r21,r19
   45214:	04400084 	movi	r17,2
   45218:	003bc606 	br	44134 <__alt_data_end+0xfffddc74>
   4521c:	d8800617 	ldw	r2,24(sp)
   45220:	103efc26 	beq	r2,zero,44e14 <__alt_data_end+0xfffde954>
   45224:	d8c00d17 	ldw	r3,52(sp)
   45228:	00fc890e 	bge	zero,r3,44450 <__alt_data_end+0xfffddf90>
   4522c:	a80b883a 	mov	r5,r21
   45230:	a009883a 	mov	r4,r20
   45234:	000d883a 	mov	r6,zero
   45238:	01d00934 	movhi	r7,16420
   4523c:	004c8300 	call	4c830 <__muldf3>
   45240:	89000044 	addi	r4,r17,1
   45244:	1029883a 	mov	r20,r2
   45248:	182b883a 	mov	r21,r3
   4524c:	004d8ac0 	call	4d8ac <__floatsidf>
   45250:	a009883a 	mov	r4,r20
   45254:	a80b883a 	mov	r5,r21
   45258:	100d883a 	mov	r6,r2
   4525c:	180f883a 	mov	r7,r3
   45260:	004c8300 	call	4c830 <__muldf3>
   45264:	1009883a 	mov	r4,r2
   45268:	180b883a 	mov	r5,r3
   4526c:	000d883a 	mov	r6,zero
   45270:	01d00734 	movhi	r7,16412
   45274:	004b4840 	call	4b484 <__adddf3>
   45278:	d9000517 	ldw	r4,20(sp)
   4527c:	1023883a 	mov	r17,r2
   45280:	00bf3034 	movhi	r2,64704
   45284:	213fffc4 	addi	r4,r4,-1
   45288:	1885883a 	add	r2,r3,r2
   4528c:	d9001215 	stw	r4,72(sp)
   45290:	d8800e15 	stw	r2,56(sp)
   45294:	da800d17 	ldw	r10,52(sp)
   45298:	003bc306 	br	441a8 <__alt_data_end+0xfffddce8>
   4529c:	b039883a 	mov	fp,r22
   452a0:	01000e44 	movi	r4,57
   452a4:	8825883a 	mov	r18,r17
   452a8:	9dc00044 	addi	r23,r19,1
   452ac:	99000005 	stb	r4,0(r19)
   452b0:	a023883a 	mov	r17,r20
   452b4:	003dae06 	br	44970 <__alt_data_end+0xfffde4b0>
   452b8:	d9800e17 	ldw	r6,56(sp)
   452bc:	d9c01117 	ldw	r7,68(sp)
   452c0:	0009883a 	mov	r4,zero
   452c4:	014ff834 	movhi	r5,16352
   452c8:	da001715 	stw	r8,92(sp)
   452cc:	da401515 	stw	r9,84(sp)
   452d0:	004cf540 	call	4cf54 <__subdf3>
   452d4:	da001717 	ldw	r8,92(sp)
   452d8:	da401517 	ldw	r9,84(sp)
   452dc:	1009883a 	mov	r4,r2
   452e0:	180b883a 	mov	r5,r3
   452e4:	400d883a 	mov	r6,r8
   452e8:	480f883a 	mov	r7,r9
   452ec:	004c6700 	call	4c670 <__gedf2>
   452f0:	00bc570e 	bge	zero,r2,44450 <__alt_data_end+0xfffddf90>
   452f4:	01000c04 	movi	r4,48
   452f8:	00000106 	br	45300 <_dtoa_r+0x1624>
   452fc:	102f883a 	mov	r23,r2
   45300:	b8bfffc4 	addi	r2,r23,-1
   45304:	10c00007 	ldb	r3,0(r2)
   45308:	193ffc26 	beq	r3,r4,452fc <__alt_data_end+0xfffdee3c>
   4530c:	d9801217 	ldw	r6,72(sp)
   45310:	d9800515 	stw	r6,20(sp)
   45314:	003c1f06 	br	44394 <__alt_data_end+0xfffdded4>
   45318:	d8801217 	ldw	r2,72(sp)
   4531c:	dc001117 	ldw	r16,68(sp)
   45320:	d8800515 	stw	r2,20(sp)
   45324:	003cc906 	br	4464c <__alt_data_end+0xfffde18c>
   45328:	dd801317 	ldw	r22,76(sp)
   4532c:	dc001117 	ldw	r16,68(sp)
   45330:	dcc01417 	ldw	r19,80(sp)
   45334:	dc801017 	ldw	r18,64(sp)
   45338:	003c4506 	br	44450 <__alt_data_end+0xfffddf90>
   4533c:	103e5d1e 	bne	r2,zero,44cb4 <__alt_data_end+0xfffde7f4>
   45340:	4080004c 	andi	r2,r8,1
   45344:	103e5b26 	beq	r2,zero,44cb4 <__alt_data_end+0xfffde7f4>
   45348:	003e5706 	br	44ca8 <__alt_data_end+0xfffde7e8>
   4534c:	d8c00317 	ldw	r3,12(sp)
   45350:	00800084 	movi	r2,2
   45354:	10c00a16 	blt	r2,r3,45380 <_dtoa_r+0x16a4>
   45358:	d9000d17 	ldw	r4,52(sp)
   4535c:	003e8306 	br	44d6c <__alt_data_end+0xfffde8ac>
   45360:	04400084 	movi	r17,2
   45364:	003b7306 	br	44134 <__alt_data_end+0xfffddc74>
   45368:	d9801217 	ldw	r6,72(sp)
   4536c:	d9800515 	stw	r6,20(sp)
   45370:	003cb606 	br	4464c <__alt_data_end+0xfffde18c>
   45374:	d9001217 	ldw	r4,72(sp)
   45378:	d9000515 	stw	r4,20(sp)
   4537c:	003c0506 	br	44394 <__alt_data_end+0xfffdded4>
   45380:	d9800d17 	ldw	r6,52(sp)
   45384:	d9800615 	stw	r6,24(sp)
   45388:	003e8306 	br	44d98 <__alt_data_end+0xfffde8d8>
   4538c:	d9800317 	ldw	r6,12(sp)
   45390:	00800084 	movi	r2,2
   45394:	11800216 	blt	r2,r6,453a0 <_dtoa_r+0x16c4>
   45398:	d8800d17 	ldw	r2,52(sp)
   4539c:	003da606 	br	44a38 <__alt_data_end+0xfffde578>
   453a0:	d8800d17 	ldw	r2,52(sp)
   453a4:	d8800615 	stw	r2,24(sp)
   453a8:	003e7b06 	br	44d98 <__alt_data_end+0xfffde8d8>
   453ac:	05000044 	movi	r20,1
   453b0:	003b0506 	br	43fc8 <__alt_data_end+0xfffddb08>
   453b4:	8009883a 	mov	r4,r16
   453b8:	80001115 	stw	zero,68(r16)
   453bc:	000b883a 	mov	r5,zero
   453c0:	00471cc0 	call	471cc <_Balloc>
   453c4:	d8800715 	stw	r2,28(sp)
   453c8:	d8c00717 	ldw	r3,28(sp)
   453cc:	00bfffc4 	movi	r2,-1
   453d0:	01000044 	movi	r4,1
   453d4:	d8800615 	stw	r2,24(sp)
   453d8:	80c01015 	stw	r3,64(r16)
   453dc:	d9000b15 	stw	r4,44(sp)
   453e0:	d8002215 	stw	zero,136(sp)
   453e4:	d8800d15 	stw	r2,52(sp)
   453e8:	003c1906 	br	44450 <__alt_data_end+0xfffddf90>
   453ec:	193d2926 	beq	r3,r4,44894 <__alt_data_end+0xfffde3d4>
   453f0:	00c00f04 	movi	r3,60
   453f4:	1885c83a 	sub	r2,r3,r2
   453f8:	003d7b06 	br	449e8 <__alt_data_end+0xfffde528>
   453fc:	000b883a 	mov	r5,zero
   45400:	003b1006 	br	44044 <__alt_data_end+0xfffddb84>

00045404 <_fflush_r>:
   45404:	defffb04 	addi	sp,sp,-20
   45408:	dcc00315 	stw	r19,12(sp)
   4540c:	dc000015 	stw	r16,0(sp)
   45410:	dfc00415 	stw	ra,16(sp)
   45414:	dc800215 	stw	r18,8(sp)
   45418:	dc400115 	stw	r17,4(sp)
   4541c:	2027883a 	mov	r19,r4
   45420:	2821883a 	mov	r16,r5
   45424:	20000226 	beq	r4,zero,45430 <_fflush_r+0x2c>
   45428:	20800e17 	ldw	r2,56(r4)
   4542c:	10005326 	beq	r2,zero,4557c <_fflush_r+0x178>
   45430:	8080030b 	ldhu	r2,12(r16)
   45434:	10ffffcc 	andi	r3,r2,65535
   45438:	18e0001c 	xori	r3,r3,32768
   4543c:	18e00004 	addi	r3,r3,-32768
   45440:	18002c26 	beq	r3,zero,454f4 <_fflush_r+0xf0>
   45444:	10c0020c 	andi	r3,r2,8
   45448:	1800321e 	bne	r3,zero,45514 <_fflush_r+0x110>
   4544c:	80c00117 	ldw	r3,4(r16)
   45450:	10820014 	ori	r2,r2,2048
   45454:	8080030d 	sth	r2,12(r16)
   45458:	00c0570e 	bge	zero,r3,455b8 <_fflush_r+0x1b4>
   4545c:	82000a17 	ldw	r8,40(r16)
   45460:	40002426 	beq	r8,zero,454f4 <_fflush_r+0xf0>
   45464:	9c400017 	ldw	r17,0(r19)
   45468:	10c4000c 	andi	r3,r2,4096
   4546c:	98000015 	stw	zero,0(r19)
   45470:	18004626 	beq	r3,zero,4558c <_fflush_r+0x188>
   45474:	81801417 	ldw	r6,80(r16)
   45478:	10c0010c 	andi	r3,r2,4
   4547c:	18000626 	beq	r3,zero,45498 <_fflush_r+0x94>
   45480:	80c00117 	ldw	r3,4(r16)
   45484:	80800c17 	ldw	r2,48(r16)
   45488:	30cdc83a 	sub	r6,r6,r3
   4548c:	10000226 	beq	r2,zero,45498 <_fflush_r+0x94>
   45490:	80800f17 	ldw	r2,60(r16)
   45494:	308dc83a 	sub	r6,r6,r2
   45498:	81400717 	ldw	r5,28(r16)
   4549c:	9809883a 	mov	r4,r19
   454a0:	000f883a 	mov	r7,zero
   454a4:	403ee83a 	callr	r8
   454a8:	00ffffc4 	movi	r3,-1
   454ac:	10c04526 	beq	r2,r3,455c4 <_fflush_r+0x1c0>
   454b0:	80c0030b 	ldhu	r3,12(r16)
   454b4:	81000417 	ldw	r4,16(r16)
   454b8:	80000115 	stw	zero,4(r16)
   454bc:	197dffcc 	andi	r5,r3,63487
   454c0:	8140030d 	sth	r5,12(r16)
   454c4:	81000015 	stw	r4,0(r16)
   454c8:	18c4000c 	andi	r3,r3,4096
   454cc:	18000126 	beq	r3,zero,454d4 <_fflush_r+0xd0>
   454d0:	80801415 	stw	r2,80(r16)
   454d4:	81400c17 	ldw	r5,48(r16)
   454d8:	9c400015 	stw	r17,0(r19)
   454dc:	28000526 	beq	r5,zero,454f4 <_fflush_r+0xf0>
   454e0:	80801004 	addi	r2,r16,64
   454e4:	28800226 	beq	r5,r2,454f0 <_fflush_r+0xec>
   454e8:	9809883a 	mov	r4,r19
   454ec:	0045b200 	call	45b20 <_free_r>
   454f0:	80000c15 	stw	zero,48(r16)
   454f4:	0005883a 	mov	r2,zero
   454f8:	dfc00417 	ldw	ra,16(sp)
   454fc:	dcc00317 	ldw	r19,12(sp)
   45500:	dc800217 	ldw	r18,8(sp)
   45504:	dc400117 	ldw	r17,4(sp)
   45508:	dc000017 	ldw	r16,0(sp)
   4550c:	dec00504 	addi	sp,sp,20
   45510:	f800283a 	ret
   45514:	84800417 	ldw	r18,16(r16)
   45518:	903ff626 	beq	r18,zero,454f4 <__alt_data_end+0xfffdf034>
   4551c:	84400017 	ldw	r17,0(r16)
   45520:	108000cc 	andi	r2,r2,3
   45524:	84800015 	stw	r18,0(r16)
   45528:	8ca3c83a 	sub	r17,r17,r18
   4552c:	10001526 	beq	r2,zero,45584 <_fflush_r+0x180>
   45530:	0005883a 	mov	r2,zero
   45534:	80800215 	stw	r2,8(r16)
   45538:	04400316 	blt	zero,r17,45548 <_fflush_r+0x144>
   4553c:	003fed06 	br	454f4 <__alt_data_end+0xfffdf034>
   45540:	90a5883a 	add	r18,r18,r2
   45544:	047feb0e 	bge	zero,r17,454f4 <__alt_data_end+0xfffdf034>
   45548:	80800917 	ldw	r2,36(r16)
   4554c:	81400717 	ldw	r5,28(r16)
   45550:	880f883a 	mov	r7,r17
   45554:	900d883a 	mov	r6,r18
   45558:	9809883a 	mov	r4,r19
   4555c:	103ee83a 	callr	r2
   45560:	88a3c83a 	sub	r17,r17,r2
   45564:	00bff616 	blt	zero,r2,45540 <__alt_data_end+0xfffdf080>
   45568:	80c0030b 	ldhu	r3,12(r16)
   4556c:	00bfffc4 	movi	r2,-1
   45570:	18c01014 	ori	r3,r3,64
   45574:	80c0030d 	sth	r3,12(r16)
   45578:	003fdf06 	br	454f8 <__alt_data_end+0xfffdf038>
   4557c:	00459ac0 	call	459ac <__sinit>
   45580:	003fab06 	br	45430 <__alt_data_end+0xfffdef70>
   45584:	80800517 	ldw	r2,20(r16)
   45588:	003fea06 	br	45534 <__alt_data_end+0xfffdf074>
   4558c:	81400717 	ldw	r5,28(r16)
   45590:	000d883a 	mov	r6,zero
   45594:	9809883a 	mov	r4,r19
   45598:	01c00044 	movi	r7,1
   4559c:	403ee83a 	callr	r8
   455a0:	100d883a 	mov	r6,r2
   455a4:	00bfffc4 	movi	r2,-1
   455a8:	30801326 	beq	r6,r2,455f8 <_fflush_r+0x1f4>
   455ac:	8080030b 	ldhu	r2,12(r16)
   455b0:	82000a17 	ldw	r8,40(r16)
   455b4:	003fb006 	br	45478 <__alt_data_end+0xfffdefb8>
   455b8:	80c00f17 	ldw	r3,60(r16)
   455bc:	00ffa716 	blt	zero,r3,4545c <__alt_data_end+0xfffdef9c>
   455c0:	003fcc06 	br	454f4 <__alt_data_end+0xfffdf034>
   455c4:	98c00017 	ldw	r3,0(r19)
   455c8:	183fb926 	beq	r3,zero,454b0 <__alt_data_end+0xfffdeff0>
   455cc:	01000744 	movi	r4,29
   455d0:	19000226 	beq	r3,r4,455dc <_fflush_r+0x1d8>
   455d4:	01000584 	movi	r4,22
   455d8:	1900101e 	bne	r3,r4,4561c <_fflush_r+0x218>
   455dc:	8080030b 	ldhu	r2,12(r16)
   455e0:	80c00417 	ldw	r3,16(r16)
   455e4:	80000115 	stw	zero,4(r16)
   455e8:	10bdffcc 	andi	r2,r2,63487
   455ec:	8080030d 	sth	r2,12(r16)
   455f0:	80c00015 	stw	r3,0(r16)
   455f4:	003fb706 	br	454d4 <__alt_data_end+0xfffdf014>
   455f8:	98800017 	ldw	r2,0(r19)
   455fc:	103feb26 	beq	r2,zero,455ac <__alt_data_end+0xfffdf0ec>
   45600:	00c00744 	movi	r3,29
   45604:	10c00226 	beq	r2,r3,45610 <_fflush_r+0x20c>
   45608:	00c00584 	movi	r3,22
   4560c:	10ffd61e 	bne	r2,r3,45568 <__alt_data_end+0xfffdf0a8>
   45610:	9c400015 	stw	r17,0(r19)
   45614:	0005883a 	mov	r2,zero
   45618:	003fb706 	br	454f8 <__alt_data_end+0xfffdf038>
   4561c:	80c0030b 	ldhu	r3,12(r16)
   45620:	18c01014 	ori	r3,r3,64
   45624:	80c0030d 	sth	r3,12(r16)
   45628:	003fb306 	br	454f8 <__alt_data_end+0xfffdf038>

0004562c <fflush>:
   4562c:	20000526 	beq	r4,zero,45644 <fflush+0x18>
   45630:	00800174 	movhi	r2,5
   45634:	10bfd604 	addi	r2,r2,-168
   45638:	200b883a 	mov	r5,r4
   4563c:	11000017 	ldw	r4,0(r2)
   45640:	00454041 	jmpi	45404 <_fflush_r>
   45644:	00800174 	movhi	r2,5
   45648:	10bfd504 	addi	r2,r2,-172
   4564c:	11000017 	ldw	r4,0(r2)
   45650:	01400134 	movhi	r5,4
   45654:	29550104 	addi	r5,r5,21508
   45658:	004636c1 	jmpi	4636c <_fwalk_reent>

0004565c <__fp_lock>:
   4565c:	0005883a 	mov	r2,zero
   45660:	f800283a 	ret

00045664 <__fp_unlock>:
   45664:	0005883a 	mov	r2,zero
   45668:	f800283a 	ret

0004566c <_cleanup_r>:
   4566c:	01400174 	movhi	r5,5
   45670:	2968e004 	addi	r5,r5,-23680
   45674:	00462b41 	jmpi	462b4 <_fwalk>

00045678 <__sinit.part.1>:
   45678:	defff604 	addi	sp,sp,-40
   4567c:	00c00134 	movhi	r3,4
   45680:	dfc00915 	stw	ra,36(sp)
   45684:	df000815 	stw	fp,32(sp)
   45688:	ddc00715 	stw	r23,28(sp)
   4568c:	dd800615 	stw	r22,24(sp)
   45690:	dd400515 	stw	r21,20(sp)
   45694:	dd000415 	stw	r20,16(sp)
   45698:	dcc00315 	stw	r19,12(sp)
   4569c:	dc800215 	stw	r18,8(sp)
   456a0:	dc400115 	stw	r17,4(sp)
   456a4:	dc000015 	stw	r16,0(sp)
   456a8:	18d59b04 	addi	r3,r3,22124
   456ac:	24000117 	ldw	r16,4(r4)
   456b0:	20c00f15 	stw	r3,60(r4)
   456b4:	07000044 	movi	fp,1
   456b8:	00c000c4 	movi	r3,3
   456bc:	2080bb04 	addi	r2,r4,748
   456c0:	20c0b915 	stw	r3,740(r4)
   456c4:	27000e15 	stw	fp,56(r4)
   456c8:	2080ba15 	stw	r2,744(r4)
   456cc:	2000b815 	stw	zero,736(r4)
   456d0:	05c00204 	movi	r23,8
   456d4:	00800104 	movi	r2,4
   456d8:	2025883a 	mov	r18,r4
   456dc:	b80d883a 	mov	r6,r23
   456e0:	81001704 	addi	r4,r16,92
   456e4:	000b883a 	mov	r5,zero
   456e8:	80000015 	stw	zero,0(r16)
   456ec:	80000115 	stw	zero,4(r16)
   456f0:	80000215 	stw	zero,8(r16)
   456f4:	8080030d 	sth	r2,12(r16)
   456f8:	80001915 	stw	zero,100(r16)
   456fc:	8000038d 	sth	zero,14(r16)
   45700:	80000415 	stw	zero,16(r16)
   45704:	80000515 	stw	zero,20(r16)
   45708:	80000615 	stw	zero,24(r16)
   4570c:	00470a80 	call	470a8 <memset>
   45710:	05800174 	movhi	r22,5
   45714:	94400217 	ldw	r17,8(r18)
   45718:	05400174 	movhi	r21,5
   4571c:	05000174 	movhi	r20,5
   45720:	04c00174 	movhi	r19,5
   45724:	b5a24a04 	addi	r22,r22,-30424
   45728:	ad626104 	addi	r21,r21,-30332
   4572c:	a5228004 	addi	r20,r20,-30208
   45730:	9ce29704 	addi	r19,r19,-30116
   45734:	85800815 	stw	r22,32(r16)
   45738:	85400915 	stw	r21,36(r16)
   4573c:	85000a15 	stw	r20,40(r16)
   45740:	84c00b15 	stw	r19,44(r16)
   45744:	84000715 	stw	r16,28(r16)
   45748:	00800284 	movi	r2,10
   4574c:	89001704 	addi	r4,r17,92
   45750:	b80d883a 	mov	r6,r23
   45754:	000b883a 	mov	r5,zero
   45758:	88000015 	stw	zero,0(r17)
   4575c:	88000115 	stw	zero,4(r17)
   45760:	88000215 	stw	zero,8(r17)
   45764:	8880030d 	sth	r2,12(r17)
   45768:	88001915 	stw	zero,100(r17)
   4576c:	8f00038d 	sth	fp,14(r17)
   45770:	88000415 	stw	zero,16(r17)
   45774:	88000515 	stw	zero,20(r17)
   45778:	88000615 	stw	zero,24(r17)
   4577c:	00470a80 	call	470a8 <memset>
   45780:	94000317 	ldw	r16,12(r18)
   45784:	00800484 	movi	r2,18
   45788:	8c400715 	stw	r17,28(r17)
   4578c:	8d800815 	stw	r22,32(r17)
   45790:	8d400915 	stw	r21,36(r17)
   45794:	8d000a15 	stw	r20,40(r17)
   45798:	8cc00b15 	stw	r19,44(r17)
   4579c:	8080030d 	sth	r2,12(r16)
   457a0:	00800084 	movi	r2,2
   457a4:	80000015 	stw	zero,0(r16)
   457a8:	80000115 	stw	zero,4(r16)
   457ac:	80000215 	stw	zero,8(r16)
   457b0:	80001915 	stw	zero,100(r16)
   457b4:	8080038d 	sth	r2,14(r16)
   457b8:	80000415 	stw	zero,16(r16)
   457bc:	80000515 	stw	zero,20(r16)
   457c0:	80000615 	stw	zero,24(r16)
   457c4:	81001704 	addi	r4,r16,92
   457c8:	000b883a 	mov	r5,zero
   457cc:	b80d883a 	mov	r6,r23
   457d0:	00470a80 	call	470a8 <memset>
   457d4:	84000715 	stw	r16,28(r16)
   457d8:	85800815 	stw	r22,32(r16)
   457dc:	85400915 	stw	r21,36(r16)
   457e0:	85000a15 	stw	r20,40(r16)
   457e4:	84c00b15 	stw	r19,44(r16)
   457e8:	dfc00917 	ldw	ra,36(sp)
   457ec:	df000817 	ldw	fp,32(sp)
   457f0:	ddc00717 	ldw	r23,28(sp)
   457f4:	dd800617 	ldw	r22,24(sp)
   457f8:	dd400517 	ldw	r21,20(sp)
   457fc:	dd000417 	ldw	r20,16(sp)
   45800:	dcc00317 	ldw	r19,12(sp)
   45804:	dc800217 	ldw	r18,8(sp)
   45808:	dc400117 	ldw	r17,4(sp)
   4580c:	dc000017 	ldw	r16,0(sp)
   45810:	dec00a04 	addi	sp,sp,40
   45814:	f800283a 	ret

00045818 <__sfmoreglue>:
   45818:	defffc04 	addi	sp,sp,-16
   4581c:	dc400115 	stw	r17,4(sp)
   45820:	2c401a24 	muli	r17,r5,104
   45824:	dc800215 	stw	r18,8(sp)
   45828:	2825883a 	mov	r18,r5
   4582c:	89400304 	addi	r5,r17,12
   45830:	dc000015 	stw	r16,0(sp)
   45834:	dfc00315 	stw	ra,12(sp)
   45838:	00466bc0 	call	466bc <_malloc_r>
   4583c:	1021883a 	mov	r16,r2
   45840:	10000726 	beq	r2,zero,45860 <__sfmoreglue+0x48>
   45844:	11000304 	addi	r4,r2,12
   45848:	10000015 	stw	zero,0(r2)
   4584c:	14800115 	stw	r18,4(r2)
   45850:	11000215 	stw	r4,8(r2)
   45854:	000b883a 	mov	r5,zero
   45858:	880d883a 	mov	r6,r17
   4585c:	00470a80 	call	470a8 <memset>
   45860:	8005883a 	mov	r2,r16
   45864:	dfc00317 	ldw	ra,12(sp)
   45868:	dc800217 	ldw	r18,8(sp)
   4586c:	dc400117 	ldw	r17,4(sp)
   45870:	dc000017 	ldw	r16,0(sp)
   45874:	dec00404 	addi	sp,sp,16
   45878:	f800283a 	ret

0004587c <__sfp>:
   4587c:	00800174 	movhi	r2,5
   45880:	defffb04 	addi	sp,sp,-20
   45884:	10bfd504 	addi	r2,r2,-172
   45888:	dc800215 	stw	r18,8(sp)
   4588c:	14800017 	ldw	r18,0(r2)
   45890:	dcc00315 	stw	r19,12(sp)
   45894:	dfc00415 	stw	ra,16(sp)
   45898:	90800e17 	ldw	r2,56(r18)
   4589c:	dc400115 	stw	r17,4(sp)
   458a0:	dc000015 	stw	r16,0(sp)
   458a4:	2027883a 	mov	r19,r4
   458a8:	1000021e 	bne	r2,zero,458b4 <__sfp+0x38>
   458ac:	9009883a 	mov	r4,r18
   458b0:	00456780 	call	45678 <__sinit.part.1>
   458b4:	9480b804 	addi	r18,r18,736
   458b8:	047fffc4 	movi	r17,-1
   458bc:	91400117 	ldw	r5,4(r18)
   458c0:	94000217 	ldw	r16,8(r18)
   458c4:	297fffc4 	addi	r5,r5,-1
   458c8:	28000a16 	blt	r5,zero,458f4 <__sfp+0x78>
   458cc:	8080030f 	ldh	r2,12(r16)
   458d0:	10000c26 	beq	r2,zero,45904 <__sfp+0x88>
   458d4:	80c01d04 	addi	r3,r16,116
   458d8:	00000206 	br	458e4 <__sfp+0x68>
   458dc:	18bfe60f 	ldh	r2,-104(r3)
   458e0:	10000826 	beq	r2,zero,45904 <__sfp+0x88>
   458e4:	297fffc4 	addi	r5,r5,-1
   458e8:	1c3ffd04 	addi	r16,r3,-12
   458ec:	18c01a04 	addi	r3,r3,104
   458f0:	2c7ffa1e 	bne	r5,r17,458dc <__alt_data_end+0xfffdf41c>
   458f4:	90800017 	ldw	r2,0(r18)
   458f8:	10001d26 	beq	r2,zero,45970 <__sfp+0xf4>
   458fc:	1025883a 	mov	r18,r2
   45900:	003fee06 	br	458bc <__alt_data_end+0xfffdf3fc>
   45904:	00bfffc4 	movi	r2,-1
   45908:	8080038d 	sth	r2,14(r16)
   4590c:	00800044 	movi	r2,1
   45910:	8080030d 	sth	r2,12(r16)
   45914:	80001915 	stw	zero,100(r16)
   45918:	80000015 	stw	zero,0(r16)
   4591c:	80000215 	stw	zero,8(r16)
   45920:	80000115 	stw	zero,4(r16)
   45924:	80000415 	stw	zero,16(r16)
   45928:	80000515 	stw	zero,20(r16)
   4592c:	80000615 	stw	zero,24(r16)
   45930:	81001704 	addi	r4,r16,92
   45934:	000b883a 	mov	r5,zero
   45938:	01800204 	movi	r6,8
   4593c:	00470a80 	call	470a8 <memset>
   45940:	8005883a 	mov	r2,r16
   45944:	80000c15 	stw	zero,48(r16)
   45948:	80000d15 	stw	zero,52(r16)
   4594c:	80001115 	stw	zero,68(r16)
   45950:	80001215 	stw	zero,72(r16)
   45954:	dfc00417 	ldw	ra,16(sp)
   45958:	dcc00317 	ldw	r19,12(sp)
   4595c:	dc800217 	ldw	r18,8(sp)
   45960:	dc400117 	ldw	r17,4(sp)
   45964:	dc000017 	ldw	r16,0(sp)
   45968:	dec00504 	addi	sp,sp,20
   4596c:	f800283a 	ret
   45970:	9809883a 	mov	r4,r19
   45974:	01400104 	movi	r5,4
   45978:	00458180 	call	45818 <__sfmoreglue>
   4597c:	90800015 	stw	r2,0(r18)
   45980:	103fde1e 	bne	r2,zero,458fc <__alt_data_end+0xfffdf43c>
   45984:	00800304 	movi	r2,12
   45988:	98800015 	stw	r2,0(r19)
   4598c:	0005883a 	mov	r2,zero
   45990:	003ff006 	br	45954 <__alt_data_end+0xfffdf494>

00045994 <_cleanup>:
   45994:	00800174 	movhi	r2,5
   45998:	10bfd504 	addi	r2,r2,-172
   4599c:	11000017 	ldw	r4,0(r2)
   459a0:	01400174 	movhi	r5,5
   459a4:	2968e004 	addi	r5,r5,-23680
   459a8:	00462b41 	jmpi	462b4 <_fwalk>

000459ac <__sinit>:
   459ac:	20800e17 	ldw	r2,56(r4)
   459b0:	10000126 	beq	r2,zero,459b8 <__sinit+0xc>
   459b4:	f800283a 	ret
   459b8:	00456781 	jmpi	45678 <__sinit.part.1>

000459bc <__sfp_lock_acquire>:
   459bc:	f800283a 	ret

000459c0 <__sfp_lock_release>:
   459c0:	f800283a 	ret

000459c4 <__sinit_lock_acquire>:
   459c4:	f800283a 	ret

000459c8 <__sinit_lock_release>:
   459c8:	f800283a 	ret

000459cc <__fp_lock_all>:
   459cc:	00800174 	movhi	r2,5
   459d0:	10bfd604 	addi	r2,r2,-168
   459d4:	11000017 	ldw	r4,0(r2)
   459d8:	01400134 	movhi	r5,4
   459dc:	29559704 	addi	r5,r5,22108
   459e0:	00462b41 	jmpi	462b4 <_fwalk>

000459e4 <__fp_unlock_all>:
   459e4:	00800174 	movhi	r2,5
   459e8:	10bfd604 	addi	r2,r2,-168
   459ec:	11000017 	ldw	r4,0(r2)
   459f0:	01400134 	movhi	r5,4
   459f4:	29559904 	addi	r5,r5,22116
   459f8:	00462b41 	jmpi	462b4 <_fwalk>

000459fc <_malloc_trim_r>:
   459fc:	defffb04 	addi	sp,sp,-20
   45a00:	dcc00315 	stw	r19,12(sp)
   45a04:	04c00174 	movhi	r19,5
   45a08:	dc800215 	stw	r18,8(sp)
   45a0c:	dc400115 	stw	r17,4(sp)
   45a10:	dc000015 	stw	r16,0(sp)
   45a14:	dfc00415 	stw	ra,16(sp)
   45a18:	2821883a 	mov	r16,r5
   45a1c:	9cfe5e04 	addi	r19,r19,-1672
   45a20:	2025883a 	mov	r18,r4
   45a24:	004dfc80 	call	4dfc8 <__malloc_lock>
   45a28:	98800217 	ldw	r2,8(r19)
   45a2c:	14400117 	ldw	r17,4(r2)
   45a30:	00bfff04 	movi	r2,-4
   45a34:	88a2703a 	and	r17,r17,r2
   45a38:	8c21c83a 	sub	r16,r17,r16
   45a3c:	8403fbc4 	addi	r16,r16,4079
   45a40:	8020d33a 	srli	r16,r16,12
   45a44:	0083ffc4 	movi	r2,4095
   45a48:	843fffc4 	addi	r16,r16,-1
   45a4c:	8020933a 	slli	r16,r16,12
   45a50:	1400060e 	bge	r2,r16,45a6c <_malloc_trim_r+0x70>
   45a54:	9009883a 	mov	r4,r18
   45a58:	000b883a 	mov	r5,zero
   45a5c:	00488d40 	call	488d4 <_sbrk_r>
   45a60:	98c00217 	ldw	r3,8(r19)
   45a64:	1c47883a 	add	r3,r3,r17
   45a68:	10c00a26 	beq	r2,r3,45a94 <_malloc_trim_r+0x98>
   45a6c:	9009883a 	mov	r4,r18
   45a70:	004dfcc0 	call	4dfcc <__malloc_unlock>
   45a74:	0005883a 	mov	r2,zero
   45a78:	dfc00417 	ldw	ra,16(sp)
   45a7c:	dcc00317 	ldw	r19,12(sp)
   45a80:	dc800217 	ldw	r18,8(sp)
   45a84:	dc400117 	ldw	r17,4(sp)
   45a88:	dc000017 	ldw	r16,0(sp)
   45a8c:	dec00504 	addi	sp,sp,20
   45a90:	f800283a 	ret
   45a94:	9009883a 	mov	r4,r18
   45a98:	040bc83a 	sub	r5,zero,r16
   45a9c:	00488d40 	call	488d4 <_sbrk_r>
   45aa0:	00ffffc4 	movi	r3,-1
   45aa4:	10c00d26 	beq	r2,r3,45adc <_malloc_trim_r+0xe0>
   45aa8:	00c00174 	movhi	r3,5
   45aac:	18c2ac04 	addi	r3,r3,2736
   45ab0:	18800017 	ldw	r2,0(r3)
   45ab4:	99000217 	ldw	r4,8(r19)
   45ab8:	8c23c83a 	sub	r17,r17,r16
   45abc:	8c400054 	ori	r17,r17,1
   45ac0:	1421c83a 	sub	r16,r2,r16
   45ac4:	24400115 	stw	r17,4(r4)
   45ac8:	9009883a 	mov	r4,r18
   45acc:	1c000015 	stw	r16,0(r3)
   45ad0:	004dfcc0 	call	4dfcc <__malloc_unlock>
   45ad4:	00800044 	movi	r2,1
   45ad8:	003fe706 	br	45a78 <__alt_data_end+0xfffdf5b8>
   45adc:	9009883a 	mov	r4,r18
   45ae0:	000b883a 	mov	r5,zero
   45ae4:	00488d40 	call	488d4 <_sbrk_r>
   45ae8:	99000217 	ldw	r4,8(r19)
   45aec:	014003c4 	movi	r5,15
   45af0:	1107c83a 	sub	r3,r2,r4
   45af4:	28ffdd0e 	bge	r5,r3,45a6c <__alt_data_end+0xfffdf5ac>
   45af8:	01400174 	movhi	r5,5
   45afc:	297fd804 	addi	r5,r5,-160
   45b00:	29400017 	ldw	r5,0(r5)
   45b04:	18c00054 	ori	r3,r3,1
   45b08:	20c00115 	stw	r3,4(r4)
   45b0c:	00c00174 	movhi	r3,5
   45b10:	1145c83a 	sub	r2,r2,r5
   45b14:	18c2ac04 	addi	r3,r3,2736
   45b18:	18800015 	stw	r2,0(r3)
   45b1c:	003fd306 	br	45a6c <__alt_data_end+0xfffdf5ac>

00045b20 <_free_r>:
   45b20:	28004c26 	beq	r5,zero,45c54 <_free_r+0x134>
   45b24:	defffd04 	addi	sp,sp,-12
   45b28:	dc400115 	stw	r17,4(sp)
   45b2c:	dc000015 	stw	r16,0(sp)
   45b30:	2023883a 	mov	r17,r4
   45b34:	2821883a 	mov	r16,r5
   45b38:	dfc00215 	stw	ra,8(sp)
   45b3c:	004dfc80 	call	4dfc8 <__malloc_lock>
   45b40:	813fff17 	ldw	r4,-4(r16)
   45b44:	00bfff84 	movi	r2,-2
   45b48:	02400174 	movhi	r9,5
   45b4c:	81bffe04 	addi	r6,r16,-8
   45b50:	2084703a 	and	r2,r4,r2
   45b54:	4a7e5e04 	addi	r9,r9,-1672
   45b58:	308b883a 	add	r5,r6,r2
   45b5c:	2a000117 	ldw	r8,4(r5)
   45b60:	49c00217 	ldw	r7,8(r9)
   45b64:	00ffff04 	movi	r3,-4
   45b68:	40c6703a 	and	r3,r8,r3
   45b6c:	39405326 	beq	r7,r5,45cbc <_free_r+0x19c>
   45b70:	28c00115 	stw	r3,4(r5)
   45b74:	2100004c 	andi	r4,r4,1
   45b78:	2000091e 	bne	r4,zero,45ba0 <_free_r+0x80>
   45b7c:	81fffe17 	ldw	r7,-8(r16)
   45b80:	4a000204 	addi	r8,r9,8
   45b84:	31cdc83a 	sub	r6,r6,r7
   45b88:	31000217 	ldw	r4,8(r6)
   45b8c:	11c5883a 	add	r2,r2,r7
   45b90:	22006126 	beq	r4,r8,45d18 <_free_r+0x1f8>
   45b94:	31c00317 	ldw	r7,12(r6)
   45b98:	21c00315 	stw	r7,12(r4)
   45b9c:	39000215 	stw	r4,8(r7)
   45ba0:	28c9883a 	add	r4,r5,r3
   45ba4:	21c00117 	ldw	r7,4(r4)
   45ba8:	39c0004c 	andi	r7,r7,1
   45bac:	38000d1e 	bne	r7,zero,45be4 <_free_r+0xc4>
   45bb0:	29000217 	ldw	r4,8(r5)
   45bb4:	10c5883a 	add	r2,r2,r3
   45bb8:	00c00174 	movhi	r3,5
   45bbc:	18fe6004 	addi	r3,r3,-1664
   45bc0:	20c07526 	beq	r4,r3,45d98 <_free_r+0x278>
   45bc4:	29c00317 	ldw	r7,12(r5)
   45bc8:	11400054 	ori	r5,r2,1
   45bcc:	3087883a 	add	r3,r6,r2
   45bd0:	21c00315 	stw	r7,12(r4)
   45bd4:	39000215 	stw	r4,8(r7)
   45bd8:	31400115 	stw	r5,4(r6)
   45bdc:	18800015 	stw	r2,0(r3)
   45be0:	00000406 	br	45bf4 <_free_r+0xd4>
   45be4:	10c00054 	ori	r3,r2,1
   45be8:	30c00115 	stw	r3,4(r6)
   45bec:	3087883a 	add	r3,r6,r2
   45bf0:	18800015 	stw	r2,0(r3)
   45bf4:	00c07fc4 	movi	r3,511
   45bf8:	18801736 	bltu	r3,r2,45c58 <_free_r+0x138>
   45bfc:	1004d0fa 	srli	r2,r2,3
   45c00:	01400044 	movi	r5,1
   45c04:	49000117 	ldw	r4,4(r9)
   45c08:	1087883a 	add	r3,r2,r2
   45c0c:	18c7883a 	add	r3,r3,r3
   45c10:	1005d0ba 	srai	r2,r2,2
   45c14:	18c7883a 	add	r3,r3,r3
   45c18:	1a47883a 	add	r3,r3,r9
   45c1c:	19c00217 	ldw	r7,8(r3)
   45c20:	2884983a 	sll	r2,r5,r2
   45c24:	30c00315 	stw	r3,12(r6)
   45c28:	31c00215 	stw	r7,8(r6)
   45c2c:	1104b03a 	or	r2,r2,r4
   45c30:	19800215 	stw	r6,8(r3)
   45c34:	48800115 	stw	r2,4(r9)
   45c38:	39800315 	stw	r6,12(r7)
   45c3c:	8809883a 	mov	r4,r17
   45c40:	dfc00217 	ldw	ra,8(sp)
   45c44:	dc400117 	ldw	r17,4(sp)
   45c48:	dc000017 	ldw	r16,0(sp)
   45c4c:	dec00304 	addi	sp,sp,12
   45c50:	004dfcc1 	jmpi	4dfcc <__malloc_unlock>
   45c54:	f800283a 	ret
   45c58:	1006d27a 	srli	r3,r2,9
   45c5c:	01000104 	movi	r4,4
   45c60:	20c04036 	bltu	r4,r3,45d64 <_free_r+0x244>
   45c64:	1006d1ba 	srli	r3,r2,6
   45c68:	19400e04 	addi	r5,r3,56
   45c6c:	2947883a 	add	r3,r5,r5
   45c70:	18c7883a 	add	r3,r3,r3
   45c74:	18c7883a 	add	r3,r3,r3
   45c78:	1a49883a 	add	r4,r3,r9
   45c7c:	20c00217 	ldw	r3,8(r4)
   45c80:	01c00174 	movhi	r7,5
   45c84:	39fe5e04 	addi	r7,r7,-1672
   45c88:	19003b26 	beq	r3,r4,45d78 <_free_r+0x258>
   45c8c:	01ffff04 	movi	r7,-4
   45c90:	19400117 	ldw	r5,4(r3)
   45c94:	29ca703a 	and	r5,r5,r7
   45c98:	1140022e 	bgeu	r2,r5,45ca4 <_free_r+0x184>
   45c9c:	18c00217 	ldw	r3,8(r3)
   45ca0:	20fffb1e 	bne	r4,r3,45c90 <__alt_data_end+0xfffdf7d0>
   45ca4:	18800317 	ldw	r2,12(r3)
   45ca8:	30800315 	stw	r2,12(r6)
   45cac:	30c00215 	stw	r3,8(r6)
   45cb0:	11800215 	stw	r6,8(r2)
   45cb4:	19800315 	stw	r6,12(r3)
   45cb8:	003fe006 	br	45c3c <__alt_data_end+0xfffdf77c>
   45cbc:	2100004c 	andi	r4,r4,1
   45cc0:	1885883a 	add	r2,r3,r2
   45cc4:	2000071e 	bne	r4,zero,45ce4 <_free_r+0x1c4>
   45cc8:	817ffe17 	ldw	r5,-8(r16)
   45ccc:	314dc83a 	sub	r6,r6,r5
   45cd0:	30c00317 	ldw	r3,12(r6)
   45cd4:	31000217 	ldw	r4,8(r6)
   45cd8:	1145883a 	add	r2,r2,r5
   45cdc:	20c00315 	stw	r3,12(r4)
   45ce0:	19000215 	stw	r4,8(r3)
   45ce4:	10c00054 	ori	r3,r2,1
   45ce8:	30c00115 	stw	r3,4(r6)
   45cec:	00c00174 	movhi	r3,5
   45cf0:	18ffd904 	addi	r3,r3,-156
   45cf4:	18c00017 	ldw	r3,0(r3)
   45cf8:	49800215 	stw	r6,8(r9)
   45cfc:	10ffcf36 	bltu	r2,r3,45c3c <__alt_data_end+0xfffdf77c>
   45d00:	00800174 	movhi	r2,5
   45d04:	10829904 	addi	r2,r2,2660
   45d08:	11400017 	ldw	r5,0(r2)
   45d0c:	8809883a 	mov	r4,r17
   45d10:	00459fc0 	call	459fc <_malloc_trim_r>
   45d14:	003fc906 	br	45c3c <__alt_data_end+0xfffdf77c>
   45d18:	28c9883a 	add	r4,r5,r3
   45d1c:	21000117 	ldw	r4,4(r4)
   45d20:	2100004c 	andi	r4,r4,1
   45d24:	20000a1e 	bne	r4,zero,45d50 <_free_r+0x230>
   45d28:	29000317 	ldw	r4,12(r5)
   45d2c:	29400217 	ldw	r5,8(r5)
   45d30:	10c5883a 	add	r2,r2,r3
   45d34:	10c00054 	ori	r3,r2,1
   45d38:	29000315 	stw	r4,12(r5)
   45d3c:	21400215 	stw	r5,8(r4)
   45d40:	30c00115 	stw	r3,4(r6)
   45d44:	308d883a 	add	r6,r6,r2
   45d48:	30800015 	stw	r2,0(r6)
   45d4c:	003fbb06 	br	45c3c <__alt_data_end+0xfffdf77c>
   45d50:	10c00054 	ori	r3,r2,1
   45d54:	30c00115 	stw	r3,4(r6)
   45d58:	308d883a 	add	r6,r6,r2
   45d5c:	30800015 	stw	r2,0(r6)
   45d60:	003fb606 	br	45c3c <__alt_data_end+0xfffdf77c>
   45d64:	01000504 	movi	r4,20
   45d68:	20c01436 	bltu	r4,r3,45dbc <_free_r+0x29c>
   45d6c:	194016c4 	addi	r5,r3,91
   45d70:	2947883a 	add	r3,r5,r5
   45d74:	003fbe06 	br	45c70 <__alt_data_end+0xfffdf7b0>
   45d78:	280bd0ba 	srai	r5,r5,2
   45d7c:	00800044 	movi	r2,1
   45d80:	39000117 	ldw	r4,4(r7)
   45d84:	114a983a 	sll	r5,r2,r5
   45d88:	1805883a 	mov	r2,r3
   45d8c:	2908b03a 	or	r4,r5,r4
   45d90:	39000115 	stw	r4,4(r7)
   45d94:	003fc406 	br	45ca8 <__alt_data_end+0xfffdf7e8>
   45d98:	49800515 	stw	r6,20(r9)
   45d9c:	49800415 	stw	r6,16(r9)
   45da0:	10c00054 	ori	r3,r2,1
   45da4:	31000315 	stw	r4,12(r6)
   45da8:	31000215 	stw	r4,8(r6)
   45dac:	30c00115 	stw	r3,4(r6)
   45db0:	308d883a 	add	r6,r6,r2
   45db4:	30800015 	stw	r2,0(r6)
   45db8:	003fa006 	br	45c3c <__alt_data_end+0xfffdf77c>
   45dbc:	01001504 	movi	r4,84
   45dc0:	20c00436 	bltu	r4,r3,45dd4 <_free_r+0x2b4>
   45dc4:	1006d33a 	srli	r3,r2,12
   45dc8:	19401b84 	addi	r5,r3,110
   45dcc:	2947883a 	add	r3,r5,r5
   45dd0:	003fa706 	br	45c70 <__alt_data_end+0xfffdf7b0>
   45dd4:	01005504 	movi	r4,340
   45dd8:	20c00436 	bltu	r4,r3,45dec <_free_r+0x2cc>
   45ddc:	1006d3fa 	srli	r3,r2,15
   45de0:	19401dc4 	addi	r5,r3,119
   45de4:	2947883a 	add	r3,r5,r5
   45de8:	003fa106 	br	45c70 <__alt_data_end+0xfffdf7b0>
   45dec:	01015504 	movi	r4,1364
   45df0:	20c00436 	bltu	r4,r3,45e04 <_free_r+0x2e4>
   45df4:	1006d4ba 	srli	r3,r2,18
   45df8:	19401f04 	addi	r5,r3,124
   45dfc:	2947883a 	add	r3,r5,r5
   45e00:	003f9b06 	br	45c70 <__alt_data_end+0xfffdf7b0>
   45e04:	00c03f04 	movi	r3,252
   45e08:	01401f84 	movi	r5,126
   45e0c:	003f9806 	br	45c70 <__alt_data_end+0xfffdf7b0>

00045e10 <__sfvwrite_r>:
   45e10:	30800217 	ldw	r2,8(r6)
   45e14:	10004526 	beq	r2,zero,45f2c <__sfvwrite_r+0x11c>
   45e18:	28c0030b 	ldhu	r3,12(r5)
   45e1c:	defff404 	addi	sp,sp,-48
   45e20:	dd400715 	stw	r21,28(sp)
   45e24:	dcc00515 	stw	r19,20(sp)
   45e28:	dc000215 	stw	r16,8(sp)
   45e2c:	dfc00b15 	stw	ra,44(sp)
   45e30:	df000a15 	stw	fp,40(sp)
   45e34:	ddc00915 	stw	r23,36(sp)
   45e38:	dd800815 	stw	r22,32(sp)
   45e3c:	dd000615 	stw	r20,24(sp)
   45e40:	dc800415 	stw	r18,16(sp)
   45e44:	dc400315 	stw	r17,12(sp)
   45e48:	1880020c 	andi	r2,r3,8
   45e4c:	2821883a 	mov	r16,r5
   45e50:	202b883a 	mov	r21,r4
   45e54:	3027883a 	mov	r19,r6
   45e58:	10002526 	beq	r2,zero,45ef0 <__sfvwrite_r+0xe0>
   45e5c:	28800417 	ldw	r2,16(r5)
   45e60:	10002326 	beq	r2,zero,45ef0 <__sfvwrite_r+0xe0>
   45e64:	1880008c 	andi	r2,r3,2
   45e68:	9c400017 	ldw	r17,0(r19)
   45e6c:	10003126 	beq	r2,zero,45f34 <__sfvwrite_r+0x124>
   45e70:	0029883a 	mov	r20,zero
   45e74:	0025883a 	mov	r18,zero
   45e78:	05810004 	movi	r22,1024
   45e7c:	a00d883a 	mov	r6,r20
   45e80:	a809883a 	mov	r4,r21
   45e84:	90002526 	beq	r18,zero,45f1c <__sfvwrite_r+0x10c>
   45e88:	900f883a 	mov	r7,r18
   45e8c:	81400717 	ldw	r5,28(r16)
   45e90:	b480012e 	bgeu	r22,r18,45e98 <__sfvwrite_r+0x88>
   45e94:	01c10004 	movi	r7,1024
   45e98:	80800917 	ldw	r2,36(r16)
   45e9c:	103ee83a 	callr	r2
   45ea0:	0080510e 	bge	zero,r2,45fe8 <__sfvwrite_r+0x1d8>
   45ea4:	98c00217 	ldw	r3,8(r19)
   45ea8:	a0a9883a 	add	r20,r20,r2
   45eac:	90a5c83a 	sub	r18,r18,r2
   45eb0:	1885c83a 	sub	r2,r3,r2
   45eb4:	98800215 	stw	r2,8(r19)
   45eb8:	103ff01e 	bne	r2,zero,45e7c <__alt_data_end+0xfffdf9bc>
   45ebc:	0005883a 	mov	r2,zero
   45ec0:	dfc00b17 	ldw	ra,44(sp)
   45ec4:	df000a17 	ldw	fp,40(sp)
   45ec8:	ddc00917 	ldw	r23,36(sp)
   45ecc:	dd800817 	ldw	r22,32(sp)
   45ed0:	dd400717 	ldw	r21,28(sp)
   45ed4:	dd000617 	ldw	r20,24(sp)
   45ed8:	dcc00517 	ldw	r19,20(sp)
   45edc:	dc800417 	ldw	r18,16(sp)
   45ee0:	dc400317 	ldw	r17,12(sp)
   45ee4:	dc000217 	ldw	r16,8(sp)
   45ee8:	dec00c04 	addi	sp,sp,48
   45eec:	f800283a 	ret
   45ef0:	a809883a 	mov	r4,r21
   45ef4:	800b883a 	mov	r5,r16
   45ef8:	00439ac0 	call	439ac <__swsetup_r>
   45efc:	80c0030b 	ldhu	r3,12(r16)
   45f00:	103fd826 	beq	r2,zero,45e64 <__alt_data_end+0xfffdf9a4>
   45f04:	18c01014 	ori	r3,r3,64
   45f08:	80c0030d 	sth	r3,12(r16)
   45f0c:	00c00244 	movi	r3,9
   45f10:	00bfffc4 	movi	r2,-1
   45f14:	a8c00015 	stw	r3,0(r21)
   45f18:	003fe906 	br	45ec0 <__alt_data_end+0xfffdfa00>
   45f1c:	8d000017 	ldw	r20,0(r17)
   45f20:	8c800117 	ldw	r18,4(r17)
   45f24:	8c400204 	addi	r17,r17,8
   45f28:	003fd406 	br	45e7c <__alt_data_end+0xfffdf9bc>
   45f2c:	0005883a 	mov	r2,zero
   45f30:	f800283a 	ret
   45f34:	1880004c 	andi	r2,r3,1
   45f38:	1000301e 	bne	r2,zero,45ffc <__sfvwrite_r+0x1ec>
   45f3c:	002f883a 	mov	r23,zero
   45f40:	0025883a 	mov	r18,zero
   45f44:	90001c26 	beq	r18,zero,45fb8 <__sfvwrite_r+0x1a8>
   45f48:	1880800c 	andi	r2,r3,512
   45f4c:	85000217 	ldw	r20,8(r16)
   45f50:	10006c26 	beq	r2,zero,46104 <__sfvwrite_r+0x2f4>
   45f54:	a02d883a 	mov	r22,r20
   45f58:	95008536 	bltu	r18,r20,46170 <__sfvwrite_r+0x360>
   45f5c:	1881200c 	andi	r2,r3,1152
   45f60:	10009d1e 	bne	r2,zero,461d8 <__sfvwrite_r+0x3c8>
   45f64:	81000017 	ldw	r4,0(r16)
   45f68:	a039883a 	mov	fp,r20
   45f6c:	9029883a 	mov	r20,r18
   45f70:	b80b883a 	mov	r5,r23
   45f74:	b00d883a 	mov	r6,r22
   45f78:	0046f4c0 	call	46f4c <memmove>
   45f7c:	80c00217 	ldw	r3,8(r16)
   45f80:	81000017 	ldw	r4,0(r16)
   45f84:	9005883a 	mov	r2,r18
   45f88:	1f39c83a 	sub	fp,r3,fp
   45f8c:	258f883a 	add	r7,r4,r22
   45f90:	87000215 	stw	fp,8(r16)
   45f94:	81c00015 	stw	r7,0(r16)
   45f98:	98c00217 	ldw	r3,8(r19)
   45f9c:	b8af883a 	add	r23,r23,r2
   45fa0:	90a5c83a 	sub	r18,r18,r2
   45fa4:	1d05c83a 	sub	r2,r3,r20
   45fa8:	98800215 	stw	r2,8(r19)
   45fac:	103fc326 	beq	r2,zero,45ebc <__alt_data_end+0xfffdf9fc>
   45fb0:	80c0030b 	ldhu	r3,12(r16)
   45fb4:	903fe41e 	bne	r18,zero,45f48 <__alt_data_end+0xfffdfa88>
   45fb8:	8dc00017 	ldw	r23,0(r17)
   45fbc:	8c800117 	ldw	r18,4(r17)
   45fc0:	8c400204 	addi	r17,r17,8
   45fc4:	003fdf06 	br	45f44 <__alt_data_end+0xfffdfa84>
   45fc8:	00482c00 	call	482c0 <_realloc_r>
   45fcc:	102d883a 	mov	r22,r2
   45fd0:	1000a01e 	bne	r2,zero,46254 <__sfvwrite_r+0x444>
   45fd4:	81400417 	ldw	r5,16(r16)
   45fd8:	a809883a 	mov	r4,r21
   45fdc:	0045b200 	call	45b20 <_free_r>
   45fe0:	00800304 	movi	r2,12
   45fe4:	a8800015 	stw	r2,0(r21)
   45fe8:	80c0030b 	ldhu	r3,12(r16)
   45fec:	00bfffc4 	movi	r2,-1
   45ff0:	18c01014 	ori	r3,r3,64
   45ff4:	80c0030d 	sth	r3,12(r16)
   45ff8:	003fb106 	br	45ec0 <__alt_data_end+0xfffdfa00>
   45ffc:	0029883a 	mov	r20,zero
   46000:	0011883a 	mov	r8,zero
   46004:	0039883a 	mov	fp,zero
   46008:	0025883a 	mov	r18,zero
   4600c:	90001f26 	beq	r18,zero,4608c <__sfvwrite_r+0x27c>
   46010:	40006826 	beq	r8,zero,461b4 <__sfvwrite_r+0x3a4>
   46014:	a02f883a 	mov	r23,r20
   46018:	9500012e 	bgeu	r18,r20,46020 <__sfvwrite_r+0x210>
   4601c:	902f883a 	mov	r23,r18
   46020:	81000017 	ldw	r4,0(r16)
   46024:	80800417 	ldw	r2,16(r16)
   46028:	b82d883a 	mov	r22,r23
   4602c:	81800217 	ldw	r6,8(r16)
   46030:	81c00517 	ldw	r7,20(r16)
   46034:	1100022e 	bgeu	r2,r4,46040 <__sfvwrite_r+0x230>
   46038:	31c7883a 	add	r3,r6,r7
   4603c:	1dc01816 	blt	r3,r23,460a0 <__sfvwrite_r+0x290>
   46040:	b9c03f16 	blt	r23,r7,46140 <__sfvwrite_r+0x330>
   46044:	80800917 	ldw	r2,36(r16)
   46048:	81400717 	ldw	r5,28(r16)
   4604c:	a809883a 	mov	r4,r21
   46050:	da000115 	stw	r8,4(sp)
   46054:	e00d883a 	mov	r6,fp
   46058:	103ee83a 	callr	r2
   4605c:	102d883a 	mov	r22,r2
   46060:	da000117 	ldw	r8,4(sp)
   46064:	00bfe00e 	bge	zero,r2,45fe8 <__alt_data_end+0xfffdfb28>
   46068:	a5a9c83a 	sub	r20,r20,r22
   4606c:	a0001f26 	beq	r20,zero,460ec <__sfvwrite_r+0x2dc>
   46070:	98800217 	ldw	r2,8(r19)
   46074:	e5b9883a 	add	fp,fp,r22
   46078:	95a5c83a 	sub	r18,r18,r22
   4607c:	15adc83a 	sub	r22,r2,r22
   46080:	9d800215 	stw	r22,8(r19)
   46084:	b03f8d26 	beq	r22,zero,45ebc <__alt_data_end+0xfffdf9fc>
   46088:	903fe11e 	bne	r18,zero,46010 <__alt_data_end+0xfffdfb50>
   4608c:	8f000017 	ldw	fp,0(r17)
   46090:	8c800117 	ldw	r18,4(r17)
   46094:	0011883a 	mov	r8,zero
   46098:	8c400204 	addi	r17,r17,8
   4609c:	003fdb06 	br	4600c <__alt_data_end+0xfffdfb4c>
   460a0:	180d883a 	mov	r6,r3
   460a4:	e00b883a 	mov	r5,fp
   460a8:	da000115 	stw	r8,4(sp)
   460ac:	d8c00015 	stw	r3,0(sp)
   460b0:	0046f4c0 	call	46f4c <memmove>
   460b4:	d8c00017 	ldw	r3,0(sp)
   460b8:	80800017 	ldw	r2,0(r16)
   460bc:	a809883a 	mov	r4,r21
   460c0:	800b883a 	mov	r5,r16
   460c4:	10c5883a 	add	r2,r2,r3
   460c8:	80800015 	stw	r2,0(r16)
   460cc:	d8c00015 	stw	r3,0(sp)
   460d0:	00454040 	call	45404 <_fflush_r>
   460d4:	d8c00017 	ldw	r3,0(sp)
   460d8:	da000117 	ldw	r8,4(sp)
   460dc:	103fc21e 	bne	r2,zero,45fe8 <__alt_data_end+0xfffdfb28>
   460e0:	182d883a 	mov	r22,r3
   460e4:	a5a9c83a 	sub	r20,r20,r22
   460e8:	a03fe11e 	bne	r20,zero,46070 <__alt_data_end+0xfffdfbb0>
   460ec:	a809883a 	mov	r4,r21
   460f0:	800b883a 	mov	r5,r16
   460f4:	00454040 	call	45404 <_fflush_r>
   460f8:	103fbb1e 	bne	r2,zero,45fe8 <__alt_data_end+0xfffdfb28>
   460fc:	0011883a 	mov	r8,zero
   46100:	003fdb06 	br	46070 <__alt_data_end+0xfffdfbb0>
   46104:	81000017 	ldw	r4,0(r16)
   46108:	80800417 	ldw	r2,16(r16)
   4610c:	1100012e 	bgeu	r2,r4,46114 <__sfvwrite_r+0x304>
   46110:	a4805a36 	bltu	r20,r18,4627c <__sfvwrite_r+0x46c>
   46114:	81c00517 	ldw	r7,20(r16)
   46118:	91c01a36 	bltu	r18,r7,46184 <__sfvwrite_r+0x374>
   4611c:	80800917 	ldw	r2,36(r16)
   46120:	81400717 	ldw	r5,28(r16)
   46124:	a809883a 	mov	r4,r21
   46128:	b80d883a 	mov	r6,r23
   4612c:	103ee83a 	callr	r2
   46130:	1029883a 	mov	r20,r2
   46134:	00bfac0e 	bge	zero,r2,45fe8 <__alt_data_end+0xfffdfb28>
   46138:	a005883a 	mov	r2,r20
   4613c:	003f9606 	br	45f98 <__alt_data_end+0xfffdfad8>
   46140:	b80d883a 	mov	r6,r23
   46144:	e00b883a 	mov	r5,fp
   46148:	da000115 	stw	r8,4(sp)
   4614c:	0046f4c0 	call	46f4c <memmove>
   46150:	80800217 	ldw	r2,8(r16)
   46154:	80c00017 	ldw	r3,0(r16)
   46158:	da000117 	ldw	r8,4(sp)
   4615c:	15c5c83a 	sub	r2,r2,r23
   46160:	1def883a 	add	r23,r3,r23
   46164:	80800215 	stw	r2,8(r16)
   46168:	85c00015 	stw	r23,0(r16)
   4616c:	003fbe06 	br	46068 <__alt_data_end+0xfffdfba8>
   46170:	81000017 	ldw	r4,0(r16)
   46174:	9039883a 	mov	fp,r18
   46178:	9029883a 	mov	r20,r18
   4617c:	902d883a 	mov	r22,r18
   46180:	003f7b06 	br	45f70 <__alt_data_end+0xfffdfab0>
   46184:	b80b883a 	mov	r5,r23
   46188:	900d883a 	mov	r6,r18
   4618c:	0046f4c0 	call	46f4c <memmove>
   46190:	80c00217 	ldw	r3,8(r16)
   46194:	80800017 	ldw	r2,0(r16)
   46198:	9029883a 	mov	r20,r18
   4619c:	1c87c83a 	sub	r3,r3,r18
   461a0:	1485883a 	add	r2,r2,r18
   461a4:	80800015 	stw	r2,0(r16)
   461a8:	80c00215 	stw	r3,8(r16)
   461ac:	9005883a 	mov	r2,r18
   461b0:	003f7906 	br	45f98 <__alt_data_end+0xfffdfad8>
   461b4:	e009883a 	mov	r4,fp
   461b8:	01400284 	movi	r5,10
   461bc:	900d883a 	mov	r6,r18
   461c0:	0046e640 	call	46e64 <memchr>
   461c4:	10003826 	beq	r2,zero,462a8 <__sfvwrite_r+0x498>
   461c8:	10800044 	addi	r2,r2,1
   461cc:	1729c83a 	sub	r20,r2,fp
   461d0:	02000044 	movi	r8,1
   461d4:	003f8f06 	br	46014 <__alt_data_end+0xfffdfb54>
   461d8:	80800517 	ldw	r2,20(r16)
   461dc:	81400417 	ldw	r5,16(r16)
   461e0:	87000017 	ldw	fp,0(r16)
   461e4:	10a9883a 	add	r20,r2,r2
   461e8:	a085883a 	add	r2,r20,r2
   461ec:	1028d7fa 	srli	r20,r2,31
   461f0:	e179c83a 	sub	fp,fp,r5
   461f4:	e1000044 	addi	r4,fp,1
   461f8:	a085883a 	add	r2,r20,r2
   461fc:	1029d07a 	srai	r20,r2,1
   46200:	2485883a 	add	r2,r4,r18
   46204:	a00d883a 	mov	r6,r20
   46208:	a080022e 	bgeu	r20,r2,46214 <__sfvwrite_r+0x404>
   4620c:	1029883a 	mov	r20,r2
   46210:	100d883a 	mov	r6,r2
   46214:	18c1000c 	andi	r3,r3,1024
   46218:	a809883a 	mov	r4,r21
   4621c:	183f6a26 	beq	r3,zero,45fc8 <__alt_data_end+0xfffdfb08>
   46220:	300b883a 	mov	r5,r6
   46224:	00466bc0 	call	466bc <_malloc_r>
   46228:	102d883a 	mov	r22,r2
   4622c:	103f6c26 	beq	r2,zero,45fe0 <__alt_data_end+0xfffdfb20>
   46230:	81400417 	ldw	r5,16(r16)
   46234:	1009883a 	mov	r4,r2
   46238:	e00d883a 	mov	r6,fp
   4623c:	00415ec0 	call	415ec <memcpy>
   46240:	8080030b 	ldhu	r2,12(r16)
   46244:	00fedfc4 	movi	r3,-1153
   46248:	10c4703a 	and	r2,r2,r3
   4624c:	10802014 	ori	r2,r2,128
   46250:	8080030d 	sth	r2,12(r16)
   46254:	b709883a 	add	r4,r22,fp
   46258:	a707c83a 	sub	r3,r20,fp
   4625c:	85800415 	stw	r22,16(r16)
   46260:	85000515 	stw	r20,20(r16)
   46264:	81000015 	stw	r4,0(r16)
   46268:	9039883a 	mov	fp,r18
   4626c:	80c00215 	stw	r3,8(r16)
   46270:	9029883a 	mov	r20,r18
   46274:	902d883a 	mov	r22,r18
   46278:	003f3d06 	br	45f70 <__alt_data_end+0xfffdfab0>
   4627c:	b80b883a 	mov	r5,r23
   46280:	a00d883a 	mov	r6,r20
   46284:	0046f4c0 	call	46f4c <memmove>
   46288:	80800017 	ldw	r2,0(r16)
   4628c:	a809883a 	mov	r4,r21
   46290:	800b883a 	mov	r5,r16
   46294:	1505883a 	add	r2,r2,r20
   46298:	80800015 	stw	r2,0(r16)
   4629c:	00454040 	call	45404 <_fflush_r>
   462a0:	103fa526 	beq	r2,zero,46138 <__alt_data_end+0xfffdfc78>
   462a4:	003f5006 	br	45fe8 <__alt_data_end+0xfffdfb28>
   462a8:	95000044 	addi	r20,r18,1
   462ac:	02000044 	movi	r8,1
   462b0:	003f5806 	br	46014 <__alt_data_end+0xfffdfb54>

000462b4 <_fwalk>:
   462b4:	defff804 	addi	sp,sp,-32
   462b8:	dd400515 	stw	r21,20(sp)
   462bc:	2540b804 	addi	r21,r4,736
   462c0:	dd800615 	stw	r22,24(sp)
   462c4:	dd000415 	stw	r20,16(sp)
   462c8:	dfc00715 	stw	ra,28(sp)
   462cc:	dcc00315 	stw	r19,12(sp)
   462d0:	dc800215 	stw	r18,8(sp)
   462d4:	dc400115 	stw	r17,4(sp)
   462d8:	dc000015 	stw	r16,0(sp)
   462dc:	2829883a 	mov	r20,r5
   462e0:	002d883a 	mov	r22,zero
   462e4:	00459bc0 	call	459bc <__sfp_lock_acquire>
   462e8:	a8001426 	beq	r21,zero,4633c <_fwalk+0x88>
   462ec:	04ffffc4 	movi	r19,-1
   462f0:	ac400117 	ldw	r17,4(r21)
   462f4:	ac800217 	ldw	r18,8(r21)
   462f8:	8c7fffc4 	addi	r17,r17,-1
   462fc:	88000d16 	blt	r17,zero,46334 <_fwalk+0x80>
   46300:	94000304 	addi	r16,r18,12
   46304:	94800384 	addi	r18,r18,14
   46308:	80c0000f 	ldh	r3,0(r16)
   4630c:	8c7fffc4 	addi	r17,r17,-1
   46310:	813ffd04 	addi	r4,r16,-12
   46314:	18000426 	beq	r3,zero,46328 <_fwalk+0x74>
   46318:	90c0000f 	ldh	r3,0(r18)
   4631c:	1cc00226 	beq	r3,r19,46328 <_fwalk+0x74>
   46320:	a03ee83a 	callr	r20
   46324:	b0acb03a 	or	r22,r22,r2
   46328:	84001a04 	addi	r16,r16,104
   4632c:	94801a04 	addi	r18,r18,104
   46330:	8cfff51e 	bne	r17,r19,46308 <__alt_data_end+0xfffdfe48>
   46334:	ad400017 	ldw	r21,0(r21)
   46338:	a83fed1e 	bne	r21,zero,462f0 <__alt_data_end+0xfffdfe30>
   4633c:	00459c00 	call	459c0 <__sfp_lock_release>
   46340:	b005883a 	mov	r2,r22
   46344:	dfc00717 	ldw	ra,28(sp)
   46348:	dd800617 	ldw	r22,24(sp)
   4634c:	dd400517 	ldw	r21,20(sp)
   46350:	dd000417 	ldw	r20,16(sp)
   46354:	dcc00317 	ldw	r19,12(sp)
   46358:	dc800217 	ldw	r18,8(sp)
   4635c:	dc400117 	ldw	r17,4(sp)
   46360:	dc000017 	ldw	r16,0(sp)
   46364:	dec00804 	addi	sp,sp,32
   46368:	f800283a 	ret

0004636c <_fwalk_reent>:
   4636c:	defff804 	addi	sp,sp,-32
   46370:	dd400515 	stw	r21,20(sp)
   46374:	2540b804 	addi	r21,r4,736
   46378:	dd800615 	stw	r22,24(sp)
   4637c:	dd000415 	stw	r20,16(sp)
   46380:	dcc00315 	stw	r19,12(sp)
   46384:	dfc00715 	stw	ra,28(sp)
   46388:	dc800215 	stw	r18,8(sp)
   4638c:	dc400115 	stw	r17,4(sp)
   46390:	dc000015 	stw	r16,0(sp)
   46394:	2027883a 	mov	r19,r4
   46398:	2829883a 	mov	r20,r5
   4639c:	002d883a 	mov	r22,zero
   463a0:	00459bc0 	call	459bc <__sfp_lock_acquire>
   463a4:	a8001326 	beq	r21,zero,463f4 <_fwalk_reent+0x88>
   463a8:	04bfffc4 	movi	r18,-1
   463ac:	ac400117 	ldw	r17,4(r21)
   463b0:	ac000217 	ldw	r16,8(r21)
   463b4:	8c7fffc4 	addi	r17,r17,-1
   463b8:	88000c16 	blt	r17,zero,463ec <_fwalk_reent+0x80>
   463bc:	84000304 	addi	r16,r16,12
   463c0:	80c0000f 	ldh	r3,0(r16)
   463c4:	8c7fffc4 	addi	r17,r17,-1
   463c8:	817ffd04 	addi	r5,r16,-12
   463cc:	18000526 	beq	r3,zero,463e4 <_fwalk_reent+0x78>
   463d0:	80c0008f 	ldh	r3,2(r16)
   463d4:	9809883a 	mov	r4,r19
   463d8:	1c800226 	beq	r3,r18,463e4 <_fwalk_reent+0x78>
   463dc:	a03ee83a 	callr	r20
   463e0:	b0acb03a 	or	r22,r22,r2
   463e4:	84001a04 	addi	r16,r16,104
   463e8:	8cbff51e 	bne	r17,r18,463c0 <__alt_data_end+0xfffdff00>
   463ec:	ad400017 	ldw	r21,0(r21)
   463f0:	a83fee1e 	bne	r21,zero,463ac <__alt_data_end+0xfffdfeec>
   463f4:	00459c00 	call	459c0 <__sfp_lock_release>
   463f8:	b005883a 	mov	r2,r22
   463fc:	dfc00717 	ldw	ra,28(sp)
   46400:	dd800617 	ldw	r22,24(sp)
   46404:	dd400517 	ldw	r21,20(sp)
   46408:	dd000417 	ldw	r20,16(sp)
   4640c:	dcc00317 	ldw	r19,12(sp)
   46410:	dc800217 	ldw	r18,8(sp)
   46414:	dc400117 	ldw	r17,4(sp)
   46418:	dc000017 	ldw	r16,0(sp)
   4641c:	dec00804 	addi	sp,sp,32
   46420:	f800283a 	ret

00046424 <_setlocale_r>:
   46424:	30001b26 	beq	r6,zero,46494 <_setlocale_r+0x70>
   46428:	01400174 	movhi	r5,5
   4642c:	defffe04 	addi	sp,sp,-8
   46430:	297c9c04 	addi	r5,r5,-3472
   46434:	3009883a 	mov	r4,r6
   46438:	dc000015 	stw	r16,0(sp)
   4643c:	dfc00115 	stw	ra,4(sp)
   46440:	3021883a 	mov	r16,r6
   46444:	0048a640 	call	48a64 <strcmp>
   46448:	1000061e 	bne	r2,zero,46464 <_setlocale_r+0x40>
   4644c:	00800174 	movhi	r2,5
   46450:	10bc9b04 	addi	r2,r2,-3476
   46454:	dfc00117 	ldw	ra,4(sp)
   46458:	dc000017 	ldw	r16,0(sp)
   4645c:	dec00204 	addi	sp,sp,8
   46460:	f800283a 	ret
   46464:	01400174 	movhi	r5,5
   46468:	297c9b04 	addi	r5,r5,-3476
   4646c:	8009883a 	mov	r4,r16
   46470:	0048a640 	call	48a64 <strcmp>
   46474:	103ff526 	beq	r2,zero,4644c <__alt_data_end+0xfffdff8c>
   46478:	01400174 	movhi	r5,5
   4647c:	297c0c04 	addi	r5,r5,-4048
   46480:	8009883a 	mov	r4,r16
   46484:	0048a640 	call	48a64 <strcmp>
   46488:	103ff026 	beq	r2,zero,4644c <__alt_data_end+0xfffdff8c>
   4648c:	0005883a 	mov	r2,zero
   46490:	003ff006 	br	46454 <__alt_data_end+0xfffdff94>
   46494:	00800174 	movhi	r2,5
   46498:	10bc9b04 	addi	r2,r2,-3476
   4649c:	f800283a 	ret

000464a0 <__locale_charset>:
   464a0:	00800174 	movhi	r2,5
   464a4:	10be4804 	addi	r2,r2,-1760
   464a8:	f800283a 	ret

000464ac <__locale_mb_cur_max>:
   464ac:	00800174 	movhi	r2,5
   464b0:	10bfd704 	addi	r2,r2,-164
   464b4:	10800017 	ldw	r2,0(r2)
   464b8:	f800283a 	ret

000464bc <__locale_msgcharset>:
   464bc:	00800174 	movhi	r2,5
   464c0:	10be4004 	addi	r2,r2,-1792
   464c4:	f800283a 	ret

000464c8 <__locale_cjk_lang>:
   464c8:	0005883a 	mov	r2,zero
   464cc:	f800283a 	ret

000464d0 <_localeconv_r>:
   464d0:	00800174 	movhi	r2,5
   464d4:	10be5004 	addi	r2,r2,-1728
   464d8:	f800283a 	ret

000464dc <setlocale>:
   464dc:	00c00174 	movhi	r3,5
   464e0:	18ffd604 	addi	r3,r3,-168
   464e4:	2005883a 	mov	r2,r4
   464e8:	19000017 	ldw	r4,0(r3)
   464ec:	280d883a 	mov	r6,r5
   464f0:	100b883a 	mov	r5,r2
   464f4:	00464241 	jmpi	46424 <_setlocale_r>

000464f8 <localeconv>:
   464f8:	00800174 	movhi	r2,5
   464fc:	10be5004 	addi	r2,r2,-1728
   46500:	f800283a 	ret

00046504 <__smakebuf_r>:
   46504:	2880030b 	ldhu	r2,12(r5)
   46508:	10c0008c 	andi	r3,r2,2
   4650c:	1800401e 	bne	r3,zero,46610 <__smakebuf_r+0x10c>
   46510:	deffec04 	addi	sp,sp,-80
   46514:	dc000f15 	stw	r16,60(sp)
   46518:	2821883a 	mov	r16,r5
   4651c:	2940038f 	ldh	r5,14(r5)
   46520:	dc401015 	stw	r17,64(sp)
   46524:	dfc01315 	stw	ra,76(sp)
   46528:	dcc01215 	stw	r19,72(sp)
   4652c:	dc801115 	stw	r18,68(sp)
   46530:	2023883a 	mov	r17,r4
   46534:	28001b16 	blt	r5,zero,465a4 <__smakebuf_r+0xa0>
   46538:	d80d883a 	mov	r6,sp
   4653c:	004a5700 	call	4a570 <_fstat_r>
   46540:	10001716 	blt	r2,zero,465a0 <__smakebuf_r+0x9c>
   46544:	d8800117 	ldw	r2,4(sp)
   46548:	00e00014 	movui	r3,32768
   4654c:	10bc000c 	andi	r2,r2,61440
   46550:	10c03726 	beq	r2,r3,46630 <__smakebuf_r+0x12c>
   46554:	80c0030b 	ldhu	r3,12(r16)
   46558:	18c20014 	ori	r3,r3,2048
   4655c:	80c0030d 	sth	r3,12(r16)
   46560:	00c80004 	movi	r3,8192
   46564:	10c03c1e 	bne	r2,r3,46658 <__smakebuf_r+0x154>
   46568:	8140038f 	ldh	r5,14(r16)
   4656c:	8809883a 	mov	r4,r17
   46570:	004a5c80 	call	4a5c8 <_isatty_r>
   46574:	10004e26 	beq	r2,zero,466b0 <__smakebuf_r+0x1ac>
   46578:	8080030b 	ldhu	r2,12(r16)
   4657c:	04c00044 	movi	r19,1
   46580:	80c010c4 	addi	r3,r16,67
   46584:	14c4b03a 	or	r2,r2,r19
   46588:	8080030d 	sth	r2,12(r16)
   4658c:	80c00015 	stw	r3,0(r16)
   46590:	80c00415 	stw	r3,16(r16)
   46594:	84c00515 	stw	r19,20(r16)
   46598:	04810004 	movi	r18,1024
   4659c:	00000706 	br	465bc <__smakebuf_r+0xb8>
   465a0:	8080030b 	ldhu	r2,12(r16)
   465a4:	10c0200c 	andi	r3,r2,128
   465a8:	18001f1e 	bne	r3,zero,46628 <__smakebuf_r+0x124>
   465ac:	04810004 	movi	r18,1024
   465b0:	10820014 	ori	r2,r2,2048
   465b4:	8080030d 	sth	r2,12(r16)
   465b8:	0027883a 	mov	r19,zero
   465bc:	8809883a 	mov	r4,r17
   465c0:	900b883a 	mov	r5,r18
   465c4:	00466bc0 	call	466bc <_malloc_r>
   465c8:	10002e26 	beq	r2,zero,46684 <__smakebuf_r+0x180>
   465cc:	80c0030b 	ldhu	r3,12(r16)
   465d0:	01000134 	movhi	r4,4
   465d4:	21159b04 	addi	r4,r4,22124
   465d8:	89000f15 	stw	r4,60(r17)
   465dc:	18c02014 	ori	r3,r3,128
   465e0:	80c0030d 	sth	r3,12(r16)
   465e4:	80800015 	stw	r2,0(r16)
   465e8:	80800415 	stw	r2,16(r16)
   465ec:	84800515 	stw	r18,20(r16)
   465f0:	98001c1e 	bne	r19,zero,46664 <__smakebuf_r+0x160>
   465f4:	dfc01317 	ldw	ra,76(sp)
   465f8:	dcc01217 	ldw	r19,72(sp)
   465fc:	dc801117 	ldw	r18,68(sp)
   46600:	dc401017 	ldw	r17,64(sp)
   46604:	dc000f17 	ldw	r16,60(sp)
   46608:	dec01404 	addi	sp,sp,80
   4660c:	f800283a 	ret
   46610:	288010c4 	addi	r2,r5,67
   46614:	28800015 	stw	r2,0(r5)
   46618:	28800415 	stw	r2,16(r5)
   4661c:	00800044 	movi	r2,1
   46620:	28800515 	stw	r2,20(r5)
   46624:	f800283a 	ret
   46628:	04801004 	movi	r18,64
   4662c:	003fe006 	br	465b0 <__alt_data_end+0xfffe00f0>
   46630:	81000a17 	ldw	r4,40(r16)
   46634:	00c00174 	movhi	r3,5
   46638:	18e28004 	addi	r3,r3,-30208
   4663c:	20ffc51e 	bne	r4,r3,46554 <__alt_data_end+0xfffe0094>
   46640:	80c0030b 	ldhu	r3,12(r16)
   46644:	01010004 	movi	r4,1024
   46648:	81001315 	stw	r4,76(r16)
   4664c:	1906b03a 	or	r3,r3,r4
   46650:	80c0030d 	sth	r3,12(r16)
   46654:	003fc206 	br	46560 <__alt_data_end+0xfffe00a0>
   46658:	0027883a 	mov	r19,zero
   4665c:	04810004 	movi	r18,1024
   46660:	003fd606 	br	465bc <__alt_data_end+0xfffe00fc>
   46664:	8140038f 	ldh	r5,14(r16)
   46668:	8809883a 	mov	r4,r17
   4666c:	004a5c80 	call	4a5c8 <_isatty_r>
   46670:	103fe026 	beq	r2,zero,465f4 <__alt_data_end+0xfffe0134>
   46674:	8080030b 	ldhu	r2,12(r16)
   46678:	10800054 	ori	r2,r2,1
   4667c:	8080030d 	sth	r2,12(r16)
   46680:	003fdc06 	br	465f4 <__alt_data_end+0xfffe0134>
   46684:	8080030b 	ldhu	r2,12(r16)
   46688:	10c0800c 	andi	r3,r2,512
   4668c:	183fd91e 	bne	r3,zero,465f4 <__alt_data_end+0xfffe0134>
   46690:	10800094 	ori	r2,r2,2
   46694:	80c010c4 	addi	r3,r16,67
   46698:	8080030d 	sth	r2,12(r16)
   4669c:	00800044 	movi	r2,1
   466a0:	80c00015 	stw	r3,0(r16)
   466a4:	80c00415 	stw	r3,16(r16)
   466a8:	80800515 	stw	r2,20(r16)
   466ac:	003fd106 	br	465f4 <__alt_data_end+0xfffe0134>
   466b0:	04c00044 	movi	r19,1
   466b4:	04810004 	movi	r18,1024
   466b8:	003fc006 	br	465bc <__alt_data_end+0xfffe00fc>

000466bc <_malloc_r>:
   466bc:	defff504 	addi	sp,sp,-44
   466c0:	dc800315 	stw	r18,12(sp)
   466c4:	dfc00a15 	stw	ra,40(sp)
   466c8:	df000915 	stw	fp,36(sp)
   466cc:	ddc00815 	stw	r23,32(sp)
   466d0:	dd800715 	stw	r22,28(sp)
   466d4:	dd400615 	stw	r21,24(sp)
   466d8:	dd000515 	stw	r20,20(sp)
   466dc:	dcc00415 	stw	r19,16(sp)
   466e0:	dc400215 	stw	r17,8(sp)
   466e4:	dc000115 	stw	r16,4(sp)
   466e8:	288002c4 	addi	r2,r5,11
   466ec:	00c00584 	movi	r3,22
   466f0:	2025883a 	mov	r18,r4
   466f4:	18802a2e 	bgeu	r3,r2,467a0 <_malloc_r+0xe4>
   466f8:	047ffe04 	movi	r17,-8
   466fc:	1462703a 	and	r17,r2,r17
   46700:	88009e16 	blt	r17,zero,4697c <_malloc_r+0x2c0>
   46704:	89409d36 	bltu	r17,r5,4697c <_malloc_r+0x2c0>
   46708:	004dfc80 	call	4dfc8 <__malloc_lock>
   4670c:	00807dc4 	movi	r2,503
   46710:	14402736 	bltu	r2,r17,467b0 <_malloc_r+0xf4>
   46714:	8806d0fa 	srli	r3,r17,3
   46718:	04c00174 	movhi	r19,5
   4671c:	9cfe5e04 	addi	r19,r19,-1672
   46720:	18c5883a 	add	r2,r3,r3
   46724:	1085883a 	add	r2,r2,r2
   46728:	1085883a 	add	r2,r2,r2
   4672c:	9885883a 	add	r2,r19,r2
   46730:	14000317 	ldw	r16,12(r2)
   46734:	80814a26 	beq	r16,r2,46c60 <_malloc_r+0x5a4>
   46738:	80c00117 	ldw	r3,4(r16)
   4673c:	81000317 	ldw	r4,12(r16)
   46740:	00bfff04 	movi	r2,-4
   46744:	1884703a 	and	r2,r3,r2
   46748:	81400217 	ldw	r5,8(r16)
   4674c:	8085883a 	add	r2,r16,r2
   46750:	10c00117 	ldw	r3,4(r2)
   46754:	29000315 	stw	r4,12(r5)
   46758:	21400215 	stw	r5,8(r4)
   4675c:	18c00054 	ori	r3,r3,1
   46760:	10c00115 	stw	r3,4(r2)
   46764:	9009883a 	mov	r4,r18
   46768:	004dfcc0 	call	4dfcc <__malloc_unlock>
   4676c:	80800204 	addi	r2,r16,8
   46770:	dfc00a17 	ldw	ra,40(sp)
   46774:	df000917 	ldw	fp,36(sp)
   46778:	ddc00817 	ldw	r23,32(sp)
   4677c:	dd800717 	ldw	r22,28(sp)
   46780:	dd400617 	ldw	r21,24(sp)
   46784:	dd000517 	ldw	r20,20(sp)
   46788:	dcc00417 	ldw	r19,16(sp)
   4678c:	dc800317 	ldw	r18,12(sp)
   46790:	dc400217 	ldw	r17,8(sp)
   46794:	dc000117 	ldw	r16,4(sp)
   46798:	dec00b04 	addi	sp,sp,44
   4679c:	f800283a 	ret
   467a0:	04400404 	movi	r17,16
   467a4:	89407536 	bltu	r17,r5,4697c <_malloc_r+0x2c0>
   467a8:	004dfc80 	call	4dfc8 <__malloc_lock>
   467ac:	003fd906 	br	46714 <__alt_data_end+0xfffe0254>
   467b0:	8806d27a 	srli	r3,r17,9
   467b4:	18007526 	beq	r3,zero,4698c <_malloc_r+0x2d0>
   467b8:	00800104 	movi	r2,4
   467bc:	10c0ef36 	bltu	r2,r3,46b7c <_malloc_r+0x4c0>
   467c0:	8806d1ba 	srli	r3,r17,6
   467c4:	19c00e04 	addi	r7,r3,56
   467c8:	39cb883a 	add	r5,r7,r7
   467cc:	04c00174 	movhi	r19,5
   467d0:	294b883a 	add	r5,r5,r5
   467d4:	9cfe5e04 	addi	r19,r19,-1672
   467d8:	294b883a 	add	r5,r5,r5
   467dc:	994b883a 	add	r5,r19,r5
   467e0:	2c000317 	ldw	r16,12(r5)
   467e4:	2c000e26 	beq	r5,r16,46820 <_malloc_r+0x164>
   467e8:	80800117 	ldw	r2,4(r16)
   467ec:	01bfff04 	movi	r6,-4
   467f0:	010003c4 	movi	r4,15
   467f4:	1184703a 	and	r2,r2,r6
   467f8:	1447c83a 	sub	r3,r2,r17
   467fc:	20c00716 	blt	r4,r3,4681c <_malloc_r+0x160>
   46800:	1800650e 	bge	r3,zero,46998 <_malloc_r+0x2dc>
   46804:	84000317 	ldw	r16,12(r16)
   46808:	2c000526 	beq	r5,r16,46820 <_malloc_r+0x164>
   4680c:	80800117 	ldw	r2,4(r16)
   46810:	1184703a 	and	r2,r2,r6
   46814:	1447c83a 	sub	r3,r2,r17
   46818:	20fff90e 	bge	r4,r3,46800 <__alt_data_end+0xfffe0340>
   4681c:	39ffffc4 	addi	r7,r7,-1
   46820:	38c00044 	addi	r3,r7,1
   46824:	01800174 	movhi	r6,5
   46828:	9c000417 	ldw	r16,16(r19)
   4682c:	31be5e04 	addi	r6,r6,-1672
   46830:	32400204 	addi	r9,r6,8
   46834:	82410326 	beq	r16,r9,46c44 <_malloc_r+0x588>
   46838:	81000117 	ldw	r4,4(r16)
   4683c:	00bfff04 	movi	r2,-4
   46840:	208e703a 	and	r7,r4,r2
   46844:	3c45c83a 	sub	r2,r7,r17
   46848:	010003c4 	movi	r4,15
   4684c:	2080ee16 	blt	r4,r2,46c08 <_malloc_r+0x54c>
   46850:	32400515 	stw	r9,20(r6)
   46854:	32400415 	stw	r9,16(r6)
   46858:	1000510e 	bge	r2,zero,469a0 <_malloc_r+0x2e4>
   4685c:	00807fc4 	movi	r2,511
   46860:	11c0ce36 	bltu	r2,r7,46b9c <_malloc_r+0x4e0>
   46864:	3808d0fa 	srli	r4,r7,3
   46868:	01c00044 	movi	r7,1
   4686c:	30800117 	ldw	r2,4(r6)
   46870:	210b883a 	add	r5,r4,r4
   46874:	294b883a 	add	r5,r5,r5
   46878:	2009d0ba 	srai	r4,r4,2
   4687c:	294b883a 	add	r5,r5,r5
   46880:	298b883a 	add	r5,r5,r6
   46884:	2a000217 	ldw	r8,8(r5)
   46888:	3908983a 	sll	r4,r7,r4
   4688c:	81400315 	stw	r5,12(r16)
   46890:	82000215 	stw	r8,8(r16)
   46894:	2088b03a 	or	r4,r4,r2
   46898:	2c000215 	stw	r16,8(r5)
   4689c:	31000115 	stw	r4,4(r6)
   468a0:	44000315 	stw	r16,12(r8)
   468a4:	1805d0ba 	srai	r2,r3,2
   468a8:	01400044 	movi	r5,1
   468ac:	288a983a 	sll	r5,r5,r2
   468b0:	21404336 	bltu	r4,r5,469c0 <_malloc_r+0x304>
   468b4:	2144703a 	and	r2,r4,r5
   468b8:	10000a1e 	bne	r2,zero,468e4 <_malloc_r+0x228>
   468bc:	00bfff04 	movi	r2,-4
   468c0:	294b883a 	add	r5,r5,r5
   468c4:	1886703a 	and	r3,r3,r2
   468c8:	2144703a 	and	r2,r4,r5
   468cc:	18c00104 	addi	r3,r3,4
   468d0:	1000041e 	bne	r2,zero,468e4 <_malloc_r+0x228>
   468d4:	294b883a 	add	r5,r5,r5
   468d8:	2144703a 	and	r2,r4,r5
   468dc:	18c00104 	addi	r3,r3,4
   468e0:	103ffc26 	beq	r2,zero,468d4 <__alt_data_end+0xfffe0414>
   468e4:	023fff04 	movi	r8,-4
   468e8:	01c003c4 	movi	r7,15
   468ec:	18c5883a 	add	r2,r3,r3
   468f0:	1085883a 	add	r2,r2,r2
   468f4:	1085883a 	add	r2,r2,r2
   468f8:	9895883a 	add	r10,r19,r2
   468fc:	52c00304 	addi	r11,r10,12
   46900:	1819883a 	mov	r12,r3
   46904:	5c000017 	ldw	r16,0(r11)
   46908:	59bffd04 	addi	r6,r11,-12
   4690c:	8180041e 	bne	r16,r6,46920 <_malloc_r+0x264>
   46910:	0000ce06 	br	46c4c <_malloc_r+0x590>
   46914:	2000d70e 	bge	r4,zero,46c74 <_malloc_r+0x5b8>
   46918:	84000317 	ldw	r16,12(r16)
   4691c:	8180cb26 	beq	r16,r6,46c4c <_malloc_r+0x590>
   46920:	80800117 	ldw	r2,4(r16)
   46924:	1204703a 	and	r2,r2,r8
   46928:	1449c83a 	sub	r4,r2,r17
   4692c:	393ff90e 	bge	r7,r4,46914 <__alt_data_end+0xfffe0454>
   46930:	80800317 	ldw	r2,12(r16)
   46934:	80c00217 	ldw	r3,8(r16)
   46938:	89400054 	ori	r5,r17,1
   4693c:	81400115 	stw	r5,4(r16)
   46940:	18800315 	stw	r2,12(r3)
   46944:	10c00215 	stw	r3,8(r2)
   46948:	8463883a 	add	r17,r16,r17
   4694c:	9c400515 	stw	r17,20(r19)
   46950:	9c400415 	stw	r17,16(r19)
   46954:	20800054 	ori	r2,r4,1
   46958:	88800115 	stw	r2,4(r17)
   4695c:	8a400315 	stw	r9,12(r17)
   46960:	8a400215 	stw	r9,8(r17)
   46964:	8923883a 	add	r17,r17,r4
   46968:	89000015 	stw	r4,0(r17)
   4696c:	9009883a 	mov	r4,r18
   46970:	004dfcc0 	call	4dfcc <__malloc_unlock>
   46974:	80800204 	addi	r2,r16,8
   46978:	003f7d06 	br	46770 <__alt_data_end+0xfffe02b0>
   4697c:	00800304 	movi	r2,12
   46980:	90800015 	stw	r2,0(r18)
   46984:	0005883a 	mov	r2,zero
   46988:	003f7906 	br	46770 <__alt_data_end+0xfffe02b0>
   4698c:	01401f84 	movi	r5,126
   46990:	01c00fc4 	movi	r7,63
   46994:	003f8d06 	br	467cc <__alt_data_end+0xfffe030c>
   46998:	81000317 	ldw	r4,12(r16)
   4699c:	003f6a06 	br	46748 <__alt_data_end+0xfffe0288>
   469a0:	81c5883a 	add	r2,r16,r7
   469a4:	10c00117 	ldw	r3,4(r2)
   469a8:	9009883a 	mov	r4,r18
   469ac:	18c00054 	ori	r3,r3,1
   469b0:	10c00115 	stw	r3,4(r2)
   469b4:	004dfcc0 	call	4dfcc <__malloc_unlock>
   469b8:	80800204 	addi	r2,r16,8
   469bc:	003f6c06 	br	46770 <__alt_data_end+0xfffe02b0>
   469c0:	9c000217 	ldw	r16,8(r19)
   469c4:	00bfff04 	movi	r2,-4
   469c8:	85800117 	ldw	r22,4(r16)
   469cc:	b0ac703a 	and	r22,r22,r2
   469d0:	b4400336 	bltu	r22,r17,469e0 <_malloc_r+0x324>
   469d4:	b445c83a 	sub	r2,r22,r17
   469d8:	00c003c4 	movi	r3,15
   469dc:	18805d16 	blt	r3,r2,46b54 <_malloc_r+0x498>
   469e0:	05c00174 	movhi	r23,5
   469e4:	00800174 	movhi	r2,5
   469e8:	bdffd804 	addi	r23,r23,-160
   469ec:	10829904 	addi	r2,r2,2660
   469f0:	15400017 	ldw	r21,0(r2)
   469f4:	b9000017 	ldw	r4,0(r23)
   469f8:	00ffffc4 	movi	r3,-1
   469fc:	858d883a 	add	r6,r16,r22
   46a00:	8d6b883a 	add	r21,r17,r21
   46a04:	20c0e426 	beq	r4,r3,46d98 <_malloc_r+0x6dc>
   46a08:	ad4403c4 	addi	r21,r21,4111
   46a0c:	00fc0004 	movi	r3,-4096
   46a10:	a8ea703a 	and	r21,r21,r3
   46a14:	9009883a 	mov	r4,r18
   46a18:	a80b883a 	mov	r5,r21
   46a1c:	d9800015 	stw	r6,0(sp)
   46a20:	00488d40 	call	488d4 <_sbrk_r>
   46a24:	00ffffc4 	movi	r3,-1
   46a28:	1029883a 	mov	r20,r2
   46a2c:	d9800017 	ldw	r6,0(sp)
   46a30:	10c0a426 	beq	r2,r3,46cc4 <_malloc_r+0x608>
   46a34:	1180a236 	bltu	r2,r6,46cc0 <_malloc_r+0x604>
   46a38:	07000174 	movhi	fp,5
   46a3c:	e702ac04 	addi	fp,fp,2736
   46a40:	e0c00017 	ldw	r3,0(fp)
   46a44:	a8c7883a 	add	r3,r21,r3
   46a48:	e0c00015 	stw	r3,0(fp)
   46a4c:	3500da26 	beq	r6,r20,46db8 <_malloc_r+0x6fc>
   46a50:	b9000017 	ldw	r4,0(r23)
   46a54:	00bfffc4 	movi	r2,-1
   46a58:	2080e426 	beq	r4,r2,46dec <_malloc_r+0x730>
   46a5c:	a185c83a 	sub	r2,r20,r6
   46a60:	1885883a 	add	r2,r3,r2
   46a64:	e0800015 	stw	r2,0(fp)
   46a68:	a0c001cc 	andi	r3,r20,7
   46a6c:	1800b526 	beq	r3,zero,46d44 <_malloc_r+0x688>
   46a70:	a0e9c83a 	sub	r20,r20,r3
   46a74:	00840204 	movi	r2,4104
   46a78:	a5000204 	addi	r20,r20,8
   46a7c:	10c7c83a 	sub	r3,r2,r3
   46a80:	a545883a 	add	r2,r20,r21
   46a84:	1083ffcc 	andi	r2,r2,4095
   46a88:	18abc83a 	sub	r21,r3,r2
   46a8c:	9009883a 	mov	r4,r18
   46a90:	a80b883a 	mov	r5,r21
   46a94:	00488d40 	call	488d4 <_sbrk_r>
   46a98:	00ffffc4 	movi	r3,-1
   46a9c:	10c0d026 	beq	r2,r3,46de0 <_malloc_r+0x724>
   46aa0:	1507c83a 	sub	r3,r2,r20
   46aa4:	a8c7883a 	add	r3,r21,r3
   46aa8:	18c00054 	ori	r3,r3,1
   46aac:	e0800017 	ldw	r2,0(fp)
   46ab0:	9d000215 	stw	r20,8(r19)
   46ab4:	a0c00115 	stw	r3,4(r20)
   46ab8:	a887883a 	add	r3,r21,r2
   46abc:	e0c00015 	stw	r3,0(fp)
   46ac0:	84c00e26 	beq	r16,r19,46afc <_malloc_r+0x440>
   46ac4:	018003c4 	movi	r6,15
   46ac8:	3580a02e 	bgeu	r6,r22,46d4c <_malloc_r+0x690>
   46acc:	81400117 	ldw	r5,4(r16)
   46ad0:	013ffe04 	movi	r4,-8
   46ad4:	b0bffd04 	addi	r2,r22,-12
   46ad8:	1104703a 	and	r2,r2,r4
   46adc:	2900004c 	andi	r4,r5,1
   46ae0:	1108b03a 	or	r4,r2,r4
   46ae4:	81000115 	stw	r4,4(r16)
   46ae8:	01400144 	movi	r5,5
   46aec:	8089883a 	add	r4,r16,r2
   46af0:	21400115 	stw	r5,4(r4)
   46af4:	21400215 	stw	r5,8(r4)
   46af8:	3080c036 	bltu	r6,r2,46dfc <_malloc_r+0x740>
   46afc:	00800174 	movhi	r2,5
   46b00:	10829804 	addi	r2,r2,2656
   46b04:	11000017 	ldw	r4,0(r2)
   46b08:	20c0012e 	bgeu	r4,r3,46b10 <_malloc_r+0x454>
   46b0c:	10c00015 	stw	r3,0(r2)
   46b10:	00800174 	movhi	r2,5
   46b14:	10829704 	addi	r2,r2,2652
   46b18:	11000017 	ldw	r4,0(r2)
   46b1c:	9c000217 	ldw	r16,8(r19)
   46b20:	20c0012e 	bgeu	r4,r3,46b28 <_malloc_r+0x46c>
   46b24:	10c00015 	stw	r3,0(r2)
   46b28:	80c00117 	ldw	r3,4(r16)
   46b2c:	00bfff04 	movi	r2,-4
   46b30:	1886703a 	and	r3,r3,r2
   46b34:	1c45c83a 	sub	r2,r3,r17
   46b38:	1c400236 	bltu	r3,r17,46b44 <_malloc_r+0x488>
   46b3c:	00c003c4 	movi	r3,15
   46b40:	18800416 	blt	r3,r2,46b54 <_malloc_r+0x498>
   46b44:	9009883a 	mov	r4,r18
   46b48:	004dfcc0 	call	4dfcc <__malloc_unlock>
   46b4c:	0005883a 	mov	r2,zero
   46b50:	003f0706 	br	46770 <__alt_data_end+0xfffe02b0>
   46b54:	88c00054 	ori	r3,r17,1
   46b58:	80c00115 	stw	r3,4(r16)
   46b5c:	8463883a 	add	r17,r16,r17
   46b60:	10800054 	ori	r2,r2,1
   46b64:	9c400215 	stw	r17,8(r19)
   46b68:	88800115 	stw	r2,4(r17)
   46b6c:	9009883a 	mov	r4,r18
   46b70:	004dfcc0 	call	4dfcc <__malloc_unlock>
   46b74:	80800204 	addi	r2,r16,8
   46b78:	003efd06 	br	46770 <__alt_data_end+0xfffe02b0>
   46b7c:	00800504 	movi	r2,20
   46b80:	10c0482e 	bgeu	r2,r3,46ca4 <_malloc_r+0x5e8>
   46b84:	00801504 	movi	r2,84
   46b88:	10c06836 	bltu	r2,r3,46d2c <_malloc_r+0x670>
   46b8c:	8806d33a 	srli	r3,r17,12
   46b90:	19c01b84 	addi	r7,r3,110
   46b94:	39cb883a 	add	r5,r7,r7
   46b98:	003f0c06 	br	467cc <__alt_data_end+0xfffe030c>
   46b9c:	3804d27a 	srli	r2,r7,9
   46ba0:	01000104 	movi	r4,4
   46ba4:	2080422e 	bgeu	r4,r2,46cb0 <_malloc_r+0x5f4>
   46ba8:	01000504 	movi	r4,20
   46bac:	20807c36 	bltu	r4,r2,46da0 <_malloc_r+0x6e4>
   46bb0:	110016c4 	addi	r4,r2,91
   46bb4:	210b883a 	add	r5,r4,r4
   46bb8:	294b883a 	add	r5,r5,r5
   46bbc:	294b883a 	add	r5,r5,r5
   46bc0:	994b883a 	add	r5,r19,r5
   46bc4:	28800217 	ldw	r2,8(r5)
   46bc8:	02000174 	movhi	r8,5
   46bcc:	423e5e04 	addi	r8,r8,-1672
   46bd0:	11406326 	beq	r2,r5,46d60 <_malloc_r+0x6a4>
   46bd4:	01bfff04 	movi	r6,-4
   46bd8:	11000117 	ldw	r4,4(r2)
   46bdc:	2188703a 	and	r4,r4,r6
   46be0:	3900022e 	bgeu	r7,r4,46bec <_malloc_r+0x530>
   46be4:	10800217 	ldw	r2,8(r2)
   46be8:	28bffb1e 	bne	r5,r2,46bd8 <__alt_data_end+0xfffe0718>
   46bec:	11800317 	ldw	r6,12(r2)
   46bf0:	99000117 	ldw	r4,4(r19)
   46bf4:	81800315 	stw	r6,12(r16)
   46bf8:	80800215 	stw	r2,8(r16)
   46bfc:	34000215 	stw	r16,8(r6)
   46c00:	14000315 	stw	r16,12(r2)
   46c04:	003f2706 	br	468a4 <__alt_data_end+0xfffe03e4>
   46c08:	88c00054 	ori	r3,r17,1
   46c0c:	80c00115 	stw	r3,4(r16)
   46c10:	8463883a 	add	r17,r16,r17
   46c14:	34400515 	stw	r17,20(r6)
   46c18:	34400415 	stw	r17,16(r6)
   46c1c:	10c00054 	ori	r3,r2,1
   46c20:	8a400315 	stw	r9,12(r17)
   46c24:	8a400215 	stw	r9,8(r17)
   46c28:	88c00115 	stw	r3,4(r17)
   46c2c:	88a3883a 	add	r17,r17,r2
   46c30:	88800015 	stw	r2,0(r17)
   46c34:	9009883a 	mov	r4,r18
   46c38:	004dfcc0 	call	4dfcc <__malloc_unlock>
   46c3c:	80800204 	addi	r2,r16,8
   46c40:	003ecb06 	br	46770 <__alt_data_end+0xfffe02b0>
   46c44:	31000117 	ldw	r4,4(r6)
   46c48:	003f1606 	br	468a4 <__alt_data_end+0xfffe03e4>
   46c4c:	63000044 	addi	r12,r12,1
   46c50:	608000cc 	andi	r2,r12,3
   46c54:	5ac00204 	addi	r11,r11,8
   46c58:	103f2a1e 	bne	r2,zero,46904 <__alt_data_end+0xfffe0444>
   46c5c:	00002106 	br	46ce4 <_malloc_r+0x628>
   46c60:	80800204 	addi	r2,r16,8
   46c64:	84000517 	ldw	r16,20(r16)
   46c68:	143eb31e 	bne	r2,r16,46738 <__alt_data_end+0xfffe0278>
   46c6c:	18c00084 	addi	r3,r3,2
   46c70:	003eec06 	br	46824 <__alt_data_end+0xfffe0364>
   46c74:	8085883a 	add	r2,r16,r2
   46c78:	10c00117 	ldw	r3,4(r2)
   46c7c:	81000317 	ldw	r4,12(r16)
   46c80:	81400217 	ldw	r5,8(r16)
   46c84:	18c00054 	ori	r3,r3,1
   46c88:	10c00115 	stw	r3,4(r2)
   46c8c:	29000315 	stw	r4,12(r5)
   46c90:	21400215 	stw	r5,8(r4)
   46c94:	9009883a 	mov	r4,r18
   46c98:	004dfcc0 	call	4dfcc <__malloc_unlock>
   46c9c:	80800204 	addi	r2,r16,8
   46ca0:	003eb306 	br	46770 <__alt_data_end+0xfffe02b0>
   46ca4:	19c016c4 	addi	r7,r3,91
   46ca8:	39cb883a 	add	r5,r7,r7
   46cac:	003ec706 	br	467cc <__alt_data_end+0xfffe030c>
   46cb0:	3804d1ba 	srli	r2,r7,6
   46cb4:	11000e04 	addi	r4,r2,56
   46cb8:	210b883a 	add	r5,r4,r4
   46cbc:	003fbe06 	br	46bb8 <__alt_data_end+0xfffe06f8>
   46cc0:	84ff5d26 	beq	r16,r19,46a38 <__alt_data_end+0xfffe0578>
   46cc4:	9c000217 	ldw	r16,8(r19)
   46cc8:	00bfff04 	movi	r2,-4
   46ccc:	80c00117 	ldw	r3,4(r16)
   46cd0:	1886703a 	and	r3,r3,r2
   46cd4:	003f9706 	br	46b34 <__alt_data_end+0xfffe0674>
   46cd8:	52800017 	ldw	r10,0(r10)
   46cdc:	18ffffc4 	addi	r3,r3,-1
   46ce0:	50805c1e 	bne	r10,r2,46e54 <_malloc_r+0x798>
   46ce4:	190000cc 	andi	r4,r3,3
   46ce8:	50bffe04 	addi	r2,r10,-8
   46cec:	203ffa1e 	bne	r4,zero,46cd8 <__alt_data_end+0xfffe0818>
   46cf0:	98800117 	ldw	r2,4(r19)
   46cf4:	0146303a 	nor	r3,zero,r5
   46cf8:	1884703a 	and	r2,r3,r2
   46cfc:	98800115 	stw	r2,4(r19)
   46d00:	294b883a 	add	r5,r5,r5
   46d04:	117f2e36 	bltu	r2,r5,469c0 <__alt_data_end+0xfffe0500>
   46d08:	283f2d26 	beq	r5,zero,469c0 <__alt_data_end+0xfffe0500>
   46d0c:	1146703a 	and	r3,r2,r5
   46d10:	1800521e 	bne	r3,zero,46e5c <_malloc_r+0x7a0>
   46d14:	6007883a 	mov	r3,r12
   46d18:	294b883a 	add	r5,r5,r5
   46d1c:	1148703a 	and	r4,r2,r5
   46d20:	18c00104 	addi	r3,r3,4
   46d24:	203ffc26 	beq	r4,zero,46d18 <__alt_data_end+0xfffe0858>
   46d28:	003ef006 	br	468ec <__alt_data_end+0xfffe042c>
   46d2c:	00805504 	movi	r2,340
   46d30:	10c01336 	bltu	r2,r3,46d80 <_malloc_r+0x6c4>
   46d34:	8806d3fa 	srli	r3,r17,15
   46d38:	19c01dc4 	addi	r7,r3,119
   46d3c:	39cb883a 	add	r5,r7,r7
   46d40:	003ea206 	br	467cc <__alt_data_end+0xfffe030c>
   46d44:	00c40004 	movi	r3,4096
   46d48:	003f4d06 	br	46a80 <__alt_data_end+0xfffe05c0>
   46d4c:	00800044 	movi	r2,1
   46d50:	a0800115 	stw	r2,4(r20)
   46d54:	a021883a 	mov	r16,r20
   46d58:	0007883a 	mov	r3,zero
   46d5c:	003f7506 	br	46b34 <__alt_data_end+0xfffe0674>
   46d60:	200bd0ba 	srai	r5,r4,2
   46d64:	01800044 	movi	r6,1
   46d68:	41000117 	ldw	r4,4(r8)
   46d6c:	314a983a 	sll	r5,r6,r5
   46d70:	100d883a 	mov	r6,r2
   46d74:	2908b03a 	or	r4,r5,r4
   46d78:	41000115 	stw	r4,4(r8)
   46d7c:	003f9d06 	br	46bf4 <__alt_data_end+0xfffe0734>
   46d80:	00815504 	movi	r2,1364
   46d84:	10c01336 	bltu	r2,r3,46dd4 <_malloc_r+0x718>
   46d88:	8806d4ba 	srli	r3,r17,18
   46d8c:	19c01f04 	addi	r7,r3,124
   46d90:	39cb883a 	add	r5,r7,r7
   46d94:	003e8d06 	br	467cc <__alt_data_end+0xfffe030c>
   46d98:	ad400404 	addi	r21,r21,16
   46d9c:	003f1d06 	br	46a14 <__alt_data_end+0xfffe0554>
   46da0:	01001504 	movi	r4,84
   46da4:	20801c36 	bltu	r4,r2,46e18 <_malloc_r+0x75c>
   46da8:	3804d33a 	srli	r2,r7,12
   46dac:	11001b84 	addi	r4,r2,110
   46db0:	210b883a 	add	r5,r4,r4
   46db4:	003f8006 	br	46bb8 <__alt_data_end+0xfffe06f8>
   46db8:	3083ffcc 	andi	r2,r6,4095
   46dbc:	103f241e 	bne	r2,zero,46a50 <__alt_data_end+0xfffe0590>
   46dc0:	99000217 	ldw	r4,8(r19)
   46dc4:	ad85883a 	add	r2,r21,r22
   46dc8:	10800054 	ori	r2,r2,1
   46dcc:	20800115 	stw	r2,4(r4)
   46dd0:	003f4a06 	br	46afc <__alt_data_end+0xfffe063c>
   46dd4:	01403f04 	movi	r5,252
   46dd8:	01c01f84 	movi	r7,126
   46ddc:	003e7b06 	br	467cc <__alt_data_end+0xfffe030c>
   46de0:	00c00044 	movi	r3,1
   46de4:	002b883a 	mov	r21,zero
   46de8:	003f3006 	br	46aac <__alt_data_end+0xfffe05ec>
   46dec:	00800174 	movhi	r2,5
   46df0:	10bfd804 	addi	r2,r2,-160
   46df4:	15000015 	stw	r20,0(r2)
   46df8:	003f1b06 	br	46a68 <__alt_data_end+0xfffe05a8>
   46dfc:	9009883a 	mov	r4,r18
   46e00:	81400204 	addi	r5,r16,8
   46e04:	0045b200 	call	45b20 <_free_r>
   46e08:	00800174 	movhi	r2,5
   46e0c:	1082ac04 	addi	r2,r2,2736
   46e10:	10c00017 	ldw	r3,0(r2)
   46e14:	003f3906 	br	46afc <__alt_data_end+0xfffe063c>
   46e18:	01005504 	movi	r4,340
   46e1c:	20800436 	bltu	r4,r2,46e30 <_malloc_r+0x774>
   46e20:	3804d3fa 	srli	r2,r7,15
   46e24:	11001dc4 	addi	r4,r2,119
   46e28:	210b883a 	add	r5,r4,r4
   46e2c:	003f6206 	br	46bb8 <__alt_data_end+0xfffe06f8>
   46e30:	01015504 	movi	r4,1364
   46e34:	20800436 	bltu	r4,r2,46e48 <_malloc_r+0x78c>
   46e38:	3804d4ba 	srli	r2,r7,18
   46e3c:	11001f04 	addi	r4,r2,124
   46e40:	210b883a 	add	r5,r4,r4
   46e44:	003f5c06 	br	46bb8 <__alt_data_end+0xfffe06f8>
   46e48:	01403f04 	movi	r5,252
   46e4c:	01001f84 	movi	r4,126
   46e50:	003f5906 	br	46bb8 <__alt_data_end+0xfffe06f8>
   46e54:	98800117 	ldw	r2,4(r19)
   46e58:	003fa906 	br	46d00 <__alt_data_end+0xfffe0840>
   46e5c:	6007883a 	mov	r3,r12
   46e60:	003ea206 	br	468ec <__alt_data_end+0xfffe042c>

00046e64 <memchr>:
   46e64:	208000cc 	andi	r2,r4,3
   46e68:	280f883a 	mov	r7,r5
   46e6c:	10003526 	beq	r2,zero,46f44 <memchr+0xe0>
   46e70:	30bfffc4 	addi	r2,r6,-1
   46e74:	30001b26 	beq	r6,zero,46ee4 <memchr+0x80>
   46e78:	21800003 	ldbu	r6,0(r4)
   46e7c:	28c03fcc 	andi	r3,r5,255
   46e80:	30c01a26 	beq	r6,r3,46eec <memchr+0x88>
   46e84:	180d883a 	mov	r6,r3
   46e88:	00000406 	br	46e9c <memchr+0x38>
   46e8c:	10001526 	beq	r2,zero,46ee4 <memchr+0x80>
   46e90:	20c00003 	ldbu	r3,0(r4)
   46e94:	10bfffc4 	addi	r2,r2,-1
   46e98:	19801426 	beq	r3,r6,46eec <memchr+0x88>
   46e9c:	21000044 	addi	r4,r4,1
   46ea0:	20c000cc 	andi	r3,r4,3
   46ea4:	183ff91e 	bne	r3,zero,46e8c <__alt_data_end+0xfffe09cc>
   46ea8:	024000c4 	movi	r9,3
   46eac:	48801136 	bltu	r9,r2,46ef4 <memchr+0x90>
   46eb0:	10000c26 	beq	r2,zero,46ee4 <memchr+0x80>
   46eb4:	20c00003 	ldbu	r3,0(r4)
   46eb8:	29403fcc 	andi	r5,r5,255
   46ebc:	19400b26 	beq	r3,r5,46eec <memchr+0x88>
   46ec0:	20c00044 	addi	r3,r4,1
   46ec4:	2085883a 	add	r2,r4,r2
   46ec8:	39803fcc 	andi	r6,r7,255
   46ecc:	00000306 	br	46edc <memchr+0x78>
   46ed0:	18c00044 	addi	r3,r3,1
   46ed4:	197fffc3 	ldbu	r5,-1(r3)
   46ed8:	29800426 	beq	r5,r6,46eec <memchr+0x88>
   46edc:	1809883a 	mov	r4,r3
   46ee0:	18bffb1e 	bne	r3,r2,46ed0 <__alt_data_end+0xfffe0a10>
   46ee4:	0005883a 	mov	r2,zero
   46ee8:	f800283a 	ret
   46eec:	2005883a 	mov	r2,r4
   46ef0:	f800283a 	ret
   46ef4:	28c03fcc 	andi	r3,r5,255
   46ef8:	1810923a 	slli	r8,r3,8
   46efc:	02ffbff4 	movhi	r11,65279
   46f00:	02a02074 	movhi	r10,32897
   46f04:	40c6b03a 	or	r3,r8,r3
   46f08:	1810943a 	slli	r8,r3,16
   46f0c:	5affbfc4 	addi	r11,r11,-257
   46f10:	52a02004 	addi	r10,r10,-32640
   46f14:	40d0b03a 	or	r8,r8,r3
   46f18:	20c00017 	ldw	r3,0(r4)
   46f1c:	40c6f03a 	xor	r3,r8,r3
   46f20:	1acd883a 	add	r6,r3,r11
   46f24:	00c6303a 	nor	r3,zero,r3
   46f28:	30c6703a 	and	r3,r6,r3
   46f2c:	1a86703a 	and	r3,r3,r10
   46f30:	183fdf1e 	bne	r3,zero,46eb0 <__alt_data_end+0xfffe09f0>
   46f34:	10bfff04 	addi	r2,r2,-4
   46f38:	21000104 	addi	r4,r4,4
   46f3c:	48bff636 	bltu	r9,r2,46f18 <__alt_data_end+0xfffe0a58>
   46f40:	003fdb06 	br	46eb0 <__alt_data_end+0xfffe09f0>
   46f44:	3005883a 	mov	r2,r6
   46f48:	003fd706 	br	46ea8 <__alt_data_end+0xfffe09e8>

00046f4c <memmove>:
   46f4c:	2005883a 	mov	r2,r4
   46f50:	29000b2e 	bgeu	r5,r4,46f80 <memmove+0x34>
   46f54:	298f883a 	add	r7,r5,r6
   46f58:	21c0092e 	bgeu	r4,r7,46f80 <memmove+0x34>
   46f5c:	2187883a 	add	r3,r4,r6
   46f60:	198bc83a 	sub	r5,r3,r6
   46f64:	30004b26 	beq	r6,zero,47094 <memmove+0x148>
   46f68:	39ffffc4 	addi	r7,r7,-1
   46f6c:	39000003 	ldbu	r4,0(r7)
   46f70:	18ffffc4 	addi	r3,r3,-1
   46f74:	19000005 	stb	r4,0(r3)
   46f78:	197ffb1e 	bne	r3,r5,46f68 <__alt_data_end+0xfffe0aa8>
   46f7c:	f800283a 	ret
   46f80:	00c003c4 	movi	r3,15
   46f84:	1980412e 	bgeu	r3,r6,4708c <memmove+0x140>
   46f88:	1146b03a 	or	r3,r2,r5
   46f8c:	18c000cc 	andi	r3,r3,3
   46f90:	1800411e 	bne	r3,zero,47098 <memmove+0x14c>
   46f94:	33fffc04 	addi	r15,r6,-16
   46f98:	781ed13a 	srli	r15,r15,4
   46f9c:	28c00104 	addi	r3,r5,4
   46fa0:	13400104 	addi	r13,r2,4
   46fa4:	781c913a 	slli	r14,r15,4
   46fa8:	2b000204 	addi	r12,r5,8
   46fac:	12c00204 	addi	r11,r2,8
   46fb0:	73800504 	addi	r14,r14,20
   46fb4:	2a800304 	addi	r10,r5,12
   46fb8:	12400304 	addi	r9,r2,12
   46fbc:	2b9d883a 	add	r14,r5,r14
   46fc0:	2811883a 	mov	r8,r5
   46fc4:	100f883a 	mov	r7,r2
   46fc8:	41000017 	ldw	r4,0(r8)
   46fcc:	39c00404 	addi	r7,r7,16
   46fd0:	18c00404 	addi	r3,r3,16
   46fd4:	393ffc15 	stw	r4,-16(r7)
   46fd8:	193ffc17 	ldw	r4,-16(r3)
   46fdc:	6b400404 	addi	r13,r13,16
   46fe0:	5ac00404 	addi	r11,r11,16
   46fe4:	693ffc15 	stw	r4,-16(r13)
   46fe8:	61000017 	ldw	r4,0(r12)
   46fec:	4a400404 	addi	r9,r9,16
   46ff0:	42000404 	addi	r8,r8,16
   46ff4:	593ffc15 	stw	r4,-16(r11)
   46ff8:	51000017 	ldw	r4,0(r10)
   46ffc:	63000404 	addi	r12,r12,16
   47000:	52800404 	addi	r10,r10,16
   47004:	493ffc15 	stw	r4,-16(r9)
   47008:	1bbfef1e 	bne	r3,r14,46fc8 <__alt_data_end+0xfffe0b08>
   4700c:	79000044 	addi	r4,r15,1
   47010:	2008913a 	slli	r4,r4,4
   47014:	328003cc 	andi	r10,r6,15
   47018:	02c000c4 	movi	r11,3
   4701c:	1107883a 	add	r3,r2,r4
   47020:	290b883a 	add	r5,r5,r4
   47024:	5a801e2e 	bgeu	r11,r10,470a0 <memmove+0x154>
   47028:	1813883a 	mov	r9,r3
   4702c:	2811883a 	mov	r8,r5
   47030:	500f883a 	mov	r7,r10
   47034:	41000017 	ldw	r4,0(r8)
   47038:	4a400104 	addi	r9,r9,4
   4703c:	39ffff04 	addi	r7,r7,-4
   47040:	493fff15 	stw	r4,-4(r9)
   47044:	42000104 	addi	r8,r8,4
   47048:	59fffa36 	bltu	r11,r7,47034 <__alt_data_end+0xfffe0b74>
   4704c:	513fff04 	addi	r4,r10,-4
   47050:	2008d0ba 	srli	r4,r4,2
   47054:	318000cc 	andi	r6,r6,3
   47058:	21000044 	addi	r4,r4,1
   4705c:	2109883a 	add	r4,r4,r4
   47060:	2109883a 	add	r4,r4,r4
   47064:	1907883a 	add	r3,r3,r4
   47068:	290b883a 	add	r5,r5,r4
   4706c:	30000926 	beq	r6,zero,47094 <memmove+0x148>
   47070:	198d883a 	add	r6,r3,r6
   47074:	29c00003 	ldbu	r7,0(r5)
   47078:	18c00044 	addi	r3,r3,1
   4707c:	29400044 	addi	r5,r5,1
   47080:	19ffffc5 	stb	r7,-1(r3)
   47084:	19bffb1e 	bne	r3,r6,47074 <__alt_data_end+0xfffe0bb4>
   47088:	f800283a 	ret
   4708c:	1007883a 	mov	r3,r2
   47090:	003ff606 	br	4706c <__alt_data_end+0xfffe0bac>
   47094:	f800283a 	ret
   47098:	1007883a 	mov	r3,r2
   4709c:	003ff406 	br	47070 <__alt_data_end+0xfffe0bb0>
   470a0:	500d883a 	mov	r6,r10
   470a4:	003ff106 	br	4706c <__alt_data_end+0xfffe0bac>

000470a8 <memset>:
   470a8:	20c000cc 	andi	r3,r4,3
   470ac:	2005883a 	mov	r2,r4
   470b0:	18004326 	beq	r3,zero,471c0 <memset+0x118>
   470b4:	31ffffc4 	addi	r7,r6,-1
   470b8:	30004026 	beq	r6,zero,471bc <memset+0x114>
   470bc:	2813883a 	mov	r9,r5
   470c0:	200d883a 	mov	r6,r4
   470c4:	2007883a 	mov	r3,r4
   470c8:	00000406 	br	470dc <memset+0x34>
   470cc:	3a3fffc4 	addi	r8,r7,-1
   470d0:	31800044 	addi	r6,r6,1
   470d4:	38003926 	beq	r7,zero,471bc <memset+0x114>
   470d8:	400f883a 	mov	r7,r8
   470dc:	18c00044 	addi	r3,r3,1
   470e0:	32400005 	stb	r9,0(r6)
   470e4:	1a0000cc 	andi	r8,r3,3
   470e8:	403ff81e 	bne	r8,zero,470cc <__alt_data_end+0xfffe0c0c>
   470ec:	010000c4 	movi	r4,3
   470f0:	21c02d2e 	bgeu	r4,r7,471a8 <memset+0x100>
   470f4:	29803fcc 	andi	r6,r5,255
   470f8:	3008923a 	slli	r4,r6,8
   470fc:	218cb03a 	or	r6,r4,r6
   47100:	3008943a 	slli	r4,r6,16
   47104:	218cb03a 	or	r6,r4,r6
   47108:	010003c4 	movi	r4,15
   4710c:	21c0182e 	bgeu	r4,r7,47170 <memset+0xc8>
   47110:	3b3ffc04 	addi	r12,r7,-16
   47114:	6018d13a 	srli	r12,r12,4
   47118:	1a000104 	addi	r8,r3,4
   4711c:	1ac00204 	addi	r11,r3,8
   47120:	6008913a 	slli	r4,r12,4
   47124:	1a800304 	addi	r10,r3,12
   47128:	1813883a 	mov	r9,r3
   4712c:	21000504 	addi	r4,r4,20
   47130:	1909883a 	add	r4,r3,r4
   47134:	49800015 	stw	r6,0(r9)
   47138:	41800015 	stw	r6,0(r8)
   4713c:	59800015 	stw	r6,0(r11)
   47140:	51800015 	stw	r6,0(r10)
   47144:	42000404 	addi	r8,r8,16
   47148:	4a400404 	addi	r9,r9,16
   4714c:	5ac00404 	addi	r11,r11,16
   47150:	52800404 	addi	r10,r10,16
   47154:	413ff71e 	bne	r8,r4,47134 <__alt_data_end+0xfffe0c74>
   47158:	63000044 	addi	r12,r12,1
   4715c:	6018913a 	slli	r12,r12,4
   47160:	39c003cc 	andi	r7,r7,15
   47164:	010000c4 	movi	r4,3
   47168:	1b07883a 	add	r3,r3,r12
   4716c:	21c00e2e 	bgeu	r4,r7,471a8 <memset+0x100>
   47170:	1813883a 	mov	r9,r3
   47174:	3811883a 	mov	r8,r7
   47178:	010000c4 	movi	r4,3
   4717c:	49800015 	stw	r6,0(r9)
   47180:	423fff04 	addi	r8,r8,-4
   47184:	4a400104 	addi	r9,r9,4
   47188:	223ffc36 	bltu	r4,r8,4717c <__alt_data_end+0xfffe0cbc>
   4718c:	393fff04 	addi	r4,r7,-4
   47190:	2008d0ba 	srli	r4,r4,2
   47194:	39c000cc 	andi	r7,r7,3
   47198:	21000044 	addi	r4,r4,1
   4719c:	2109883a 	add	r4,r4,r4
   471a0:	2109883a 	add	r4,r4,r4
   471a4:	1907883a 	add	r3,r3,r4
   471a8:	38000426 	beq	r7,zero,471bc <memset+0x114>
   471ac:	19cf883a 	add	r7,r3,r7
   471b0:	19400005 	stb	r5,0(r3)
   471b4:	18c00044 	addi	r3,r3,1
   471b8:	19fffd1e 	bne	r3,r7,471b0 <__alt_data_end+0xfffe0cf0>
   471bc:	f800283a 	ret
   471c0:	2007883a 	mov	r3,r4
   471c4:	300f883a 	mov	r7,r6
   471c8:	003fc806 	br	470ec <__alt_data_end+0xfffe0c2c>

000471cc <_Balloc>:
   471cc:	20801317 	ldw	r2,76(r4)
   471d0:	defffc04 	addi	sp,sp,-16
   471d4:	dc400115 	stw	r17,4(sp)
   471d8:	dc000015 	stw	r16,0(sp)
   471dc:	dfc00315 	stw	ra,12(sp)
   471e0:	dc800215 	stw	r18,8(sp)
   471e4:	2023883a 	mov	r17,r4
   471e8:	2821883a 	mov	r16,r5
   471ec:	10000f26 	beq	r2,zero,4722c <_Balloc+0x60>
   471f0:	8407883a 	add	r3,r16,r16
   471f4:	18c7883a 	add	r3,r3,r3
   471f8:	10c7883a 	add	r3,r2,r3
   471fc:	18800017 	ldw	r2,0(r3)
   47200:	10001126 	beq	r2,zero,47248 <_Balloc+0x7c>
   47204:	11000017 	ldw	r4,0(r2)
   47208:	19000015 	stw	r4,0(r3)
   4720c:	10000415 	stw	zero,16(r2)
   47210:	10000315 	stw	zero,12(r2)
   47214:	dfc00317 	ldw	ra,12(sp)
   47218:	dc800217 	ldw	r18,8(sp)
   4721c:	dc400117 	ldw	r17,4(sp)
   47220:	dc000017 	ldw	r16,0(sp)
   47224:	dec00404 	addi	sp,sp,16
   47228:	f800283a 	ret
   4722c:	01400104 	movi	r5,4
   47230:	01800844 	movi	r6,33
   47234:	004a1bc0 	call	4a1bc <_calloc_r>
   47238:	88801315 	stw	r2,76(r17)
   4723c:	103fec1e 	bne	r2,zero,471f0 <__alt_data_end+0xfffe0d30>
   47240:	0005883a 	mov	r2,zero
   47244:	003ff306 	br	47214 <__alt_data_end+0xfffe0d54>
   47248:	01400044 	movi	r5,1
   4724c:	2c24983a 	sll	r18,r5,r16
   47250:	8809883a 	mov	r4,r17
   47254:	91800144 	addi	r6,r18,5
   47258:	318d883a 	add	r6,r6,r6
   4725c:	318d883a 	add	r6,r6,r6
   47260:	004a1bc0 	call	4a1bc <_calloc_r>
   47264:	103ff626 	beq	r2,zero,47240 <__alt_data_end+0xfffe0d80>
   47268:	14000115 	stw	r16,4(r2)
   4726c:	14800215 	stw	r18,8(r2)
   47270:	003fe606 	br	4720c <__alt_data_end+0xfffe0d4c>

00047274 <_Bfree>:
   47274:	28000826 	beq	r5,zero,47298 <_Bfree+0x24>
   47278:	28c00117 	ldw	r3,4(r5)
   4727c:	20801317 	ldw	r2,76(r4)
   47280:	18c7883a 	add	r3,r3,r3
   47284:	18c7883a 	add	r3,r3,r3
   47288:	10c5883a 	add	r2,r2,r3
   4728c:	10c00017 	ldw	r3,0(r2)
   47290:	28c00015 	stw	r3,0(r5)
   47294:	11400015 	stw	r5,0(r2)
   47298:	f800283a 	ret

0004729c <__multadd>:
   4729c:	defffa04 	addi	sp,sp,-24
   472a0:	dc000115 	stw	r16,4(sp)
   472a4:	2c000417 	ldw	r16,16(r5)
   472a8:	dc800315 	stw	r18,12(sp)
   472ac:	dc400215 	stw	r17,8(sp)
   472b0:	dfc00515 	stw	ra,20(sp)
   472b4:	dcc00415 	stw	r19,16(sp)
   472b8:	2823883a 	mov	r17,r5
   472bc:	2025883a 	mov	r18,r4
   472c0:	2a400504 	addi	r9,r5,20
   472c4:	0015883a 	mov	r10,zero
   472c8:	4a000017 	ldw	r8,0(r9)
   472cc:	4a400104 	addi	r9,r9,4
   472d0:	52800044 	addi	r10,r10,1
   472d4:	40ffffcc 	andi	r3,r8,65535
   472d8:	1987383a 	mul	r3,r3,r6
   472dc:	4010d43a 	srli	r8,r8,16
   472e0:	19cf883a 	add	r7,r3,r7
   472e4:	4191383a 	mul	r8,r8,r6
   472e8:	3816d43a 	srli	r11,r7,16
   472ec:	38ffffcc 	andi	r3,r7,65535
   472f0:	5a0f883a 	add	r7,r11,r8
   472f4:	3810943a 	slli	r8,r7,16
   472f8:	380ed43a 	srli	r7,r7,16
   472fc:	40c7883a 	add	r3,r8,r3
   47300:	48ffff15 	stw	r3,-4(r9)
   47304:	543ff016 	blt	r10,r16,472c8 <__alt_data_end+0xfffe0e08>
   47308:	38000926 	beq	r7,zero,47330 <__multadd+0x94>
   4730c:	88800217 	ldw	r2,8(r17)
   47310:	80800f0e 	bge	r16,r2,47350 <__multadd+0xb4>
   47314:	80800144 	addi	r2,r16,5
   47318:	1085883a 	add	r2,r2,r2
   4731c:	1085883a 	add	r2,r2,r2
   47320:	8885883a 	add	r2,r17,r2
   47324:	11c00015 	stw	r7,0(r2)
   47328:	84000044 	addi	r16,r16,1
   4732c:	8c000415 	stw	r16,16(r17)
   47330:	8805883a 	mov	r2,r17
   47334:	dfc00517 	ldw	ra,20(sp)
   47338:	dcc00417 	ldw	r19,16(sp)
   4733c:	dc800317 	ldw	r18,12(sp)
   47340:	dc400217 	ldw	r17,8(sp)
   47344:	dc000117 	ldw	r16,4(sp)
   47348:	dec00604 	addi	sp,sp,24
   4734c:	f800283a 	ret
   47350:	89400117 	ldw	r5,4(r17)
   47354:	9009883a 	mov	r4,r18
   47358:	d9c00015 	stw	r7,0(sp)
   4735c:	29400044 	addi	r5,r5,1
   47360:	00471cc0 	call	471cc <_Balloc>
   47364:	89800417 	ldw	r6,16(r17)
   47368:	89400304 	addi	r5,r17,12
   4736c:	11000304 	addi	r4,r2,12
   47370:	31800084 	addi	r6,r6,2
   47374:	318d883a 	add	r6,r6,r6
   47378:	318d883a 	add	r6,r6,r6
   4737c:	1027883a 	mov	r19,r2
   47380:	00415ec0 	call	415ec <memcpy>
   47384:	89000117 	ldw	r4,4(r17)
   47388:	90c01317 	ldw	r3,76(r18)
   4738c:	d9c00017 	ldw	r7,0(sp)
   47390:	2109883a 	add	r4,r4,r4
   47394:	2109883a 	add	r4,r4,r4
   47398:	1907883a 	add	r3,r3,r4
   4739c:	18800017 	ldw	r2,0(r3)
   473a0:	88800015 	stw	r2,0(r17)
   473a4:	1c400015 	stw	r17,0(r3)
   473a8:	9823883a 	mov	r17,r19
   473ac:	003fd906 	br	47314 <__alt_data_end+0xfffe0e54>

000473b0 <__s2b>:
   473b0:	defff904 	addi	sp,sp,-28
   473b4:	dc400115 	stw	r17,4(sp)
   473b8:	dc000015 	stw	r16,0(sp)
   473bc:	2023883a 	mov	r17,r4
   473c0:	2821883a 	mov	r16,r5
   473c4:	39000204 	addi	r4,r7,8
   473c8:	01400244 	movi	r5,9
   473cc:	dcc00315 	stw	r19,12(sp)
   473d0:	dc800215 	stw	r18,8(sp)
   473d4:	dfc00615 	stw	ra,24(sp)
   473d8:	dd400515 	stw	r21,20(sp)
   473dc:	dd000415 	stw	r20,16(sp)
   473e0:	3825883a 	mov	r18,r7
   473e4:	3027883a 	mov	r19,r6
   473e8:	004152c0 	call	4152c <__divsi3>
   473ec:	00c00044 	movi	r3,1
   473f0:	000b883a 	mov	r5,zero
   473f4:	1880030e 	bge	r3,r2,47404 <__s2b+0x54>
   473f8:	18c7883a 	add	r3,r3,r3
   473fc:	29400044 	addi	r5,r5,1
   47400:	18bffd16 	blt	r3,r2,473f8 <__alt_data_end+0xfffe0f38>
   47404:	8809883a 	mov	r4,r17
   47408:	00471cc0 	call	471cc <_Balloc>
   4740c:	d8c00717 	ldw	r3,28(sp)
   47410:	10c00515 	stw	r3,20(r2)
   47414:	00c00044 	movi	r3,1
   47418:	10c00415 	stw	r3,16(r2)
   4741c:	00c00244 	movi	r3,9
   47420:	1cc0210e 	bge	r3,r19,474a8 <__s2b+0xf8>
   47424:	80eb883a 	add	r21,r16,r3
   47428:	a829883a 	mov	r20,r21
   4742c:	84e1883a 	add	r16,r16,r19
   47430:	a1c00007 	ldb	r7,0(r20)
   47434:	8809883a 	mov	r4,r17
   47438:	a5000044 	addi	r20,r20,1
   4743c:	100b883a 	mov	r5,r2
   47440:	01800284 	movi	r6,10
   47444:	39fff404 	addi	r7,r7,-48
   47448:	004729c0 	call	4729c <__multadd>
   4744c:	a43ff81e 	bne	r20,r16,47430 <__alt_data_end+0xfffe0f70>
   47450:	ace1883a 	add	r16,r21,r19
   47454:	843ffe04 	addi	r16,r16,-8
   47458:	9c800a0e 	bge	r19,r18,47484 <__s2b+0xd4>
   4745c:	94e5c83a 	sub	r18,r18,r19
   47460:	84a5883a 	add	r18,r16,r18
   47464:	81c00007 	ldb	r7,0(r16)
   47468:	8809883a 	mov	r4,r17
   4746c:	84000044 	addi	r16,r16,1
   47470:	100b883a 	mov	r5,r2
   47474:	01800284 	movi	r6,10
   47478:	39fff404 	addi	r7,r7,-48
   4747c:	004729c0 	call	4729c <__multadd>
   47480:	84bff81e 	bne	r16,r18,47464 <__alt_data_end+0xfffe0fa4>
   47484:	dfc00617 	ldw	ra,24(sp)
   47488:	dd400517 	ldw	r21,20(sp)
   4748c:	dd000417 	ldw	r20,16(sp)
   47490:	dcc00317 	ldw	r19,12(sp)
   47494:	dc800217 	ldw	r18,8(sp)
   47498:	dc400117 	ldw	r17,4(sp)
   4749c:	dc000017 	ldw	r16,0(sp)
   474a0:	dec00704 	addi	sp,sp,28
   474a4:	f800283a 	ret
   474a8:	84000284 	addi	r16,r16,10
   474ac:	1827883a 	mov	r19,r3
   474b0:	003fe906 	br	47458 <__alt_data_end+0xfffe0f98>

000474b4 <__hi0bits>:
   474b4:	20bfffec 	andhi	r2,r4,65535
   474b8:	1000141e 	bne	r2,zero,4750c <__hi0bits+0x58>
   474bc:	2008943a 	slli	r4,r4,16
   474c0:	00800404 	movi	r2,16
   474c4:	20ffc02c 	andhi	r3,r4,65280
   474c8:	1800021e 	bne	r3,zero,474d4 <__hi0bits+0x20>
   474cc:	2008923a 	slli	r4,r4,8
   474d0:	10800204 	addi	r2,r2,8
   474d4:	20fc002c 	andhi	r3,r4,61440
   474d8:	1800021e 	bne	r3,zero,474e4 <__hi0bits+0x30>
   474dc:	2008913a 	slli	r4,r4,4
   474e0:	10800104 	addi	r2,r2,4
   474e4:	20f0002c 	andhi	r3,r4,49152
   474e8:	1800031e 	bne	r3,zero,474f8 <__hi0bits+0x44>
   474ec:	2109883a 	add	r4,r4,r4
   474f0:	10800084 	addi	r2,r2,2
   474f4:	2109883a 	add	r4,r4,r4
   474f8:	20000316 	blt	r4,zero,47508 <__hi0bits+0x54>
   474fc:	2110002c 	andhi	r4,r4,16384
   47500:	2000041e 	bne	r4,zero,47514 <__hi0bits+0x60>
   47504:	00800804 	movi	r2,32
   47508:	f800283a 	ret
   4750c:	0005883a 	mov	r2,zero
   47510:	003fec06 	br	474c4 <__alt_data_end+0xfffe1004>
   47514:	10800044 	addi	r2,r2,1
   47518:	f800283a 	ret

0004751c <__lo0bits>:
   4751c:	20c00017 	ldw	r3,0(r4)
   47520:	188001cc 	andi	r2,r3,7
   47524:	10000826 	beq	r2,zero,47548 <__lo0bits+0x2c>
   47528:	1880004c 	andi	r2,r3,1
   4752c:	1000211e 	bne	r2,zero,475b4 <__lo0bits+0x98>
   47530:	1880008c 	andi	r2,r3,2
   47534:	1000211e 	bne	r2,zero,475bc <__lo0bits+0xa0>
   47538:	1806d0ba 	srli	r3,r3,2
   4753c:	00800084 	movi	r2,2
   47540:	20c00015 	stw	r3,0(r4)
   47544:	f800283a 	ret
   47548:	18bfffcc 	andi	r2,r3,65535
   4754c:	10001326 	beq	r2,zero,4759c <__lo0bits+0x80>
   47550:	0005883a 	mov	r2,zero
   47554:	19403fcc 	andi	r5,r3,255
   47558:	2800021e 	bne	r5,zero,47564 <__lo0bits+0x48>
   4755c:	1806d23a 	srli	r3,r3,8
   47560:	10800204 	addi	r2,r2,8
   47564:	194003cc 	andi	r5,r3,15
   47568:	2800021e 	bne	r5,zero,47574 <__lo0bits+0x58>
   4756c:	1806d13a 	srli	r3,r3,4
   47570:	10800104 	addi	r2,r2,4
   47574:	194000cc 	andi	r5,r3,3
   47578:	2800021e 	bne	r5,zero,47584 <__lo0bits+0x68>
   4757c:	1806d0ba 	srli	r3,r3,2
   47580:	10800084 	addi	r2,r2,2
   47584:	1940004c 	andi	r5,r3,1
   47588:	2800081e 	bne	r5,zero,475ac <__lo0bits+0x90>
   4758c:	1806d07a 	srli	r3,r3,1
   47590:	1800051e 	bne	r3,zero,475a8 <__lo0bits+0x8c>
   47594:	00800804 	movi	r2,32
   47598:	f800283a 	ret
   4759c:	1806d43a 	srli	r3,r3,16
   475a0:	00800404 	movi	r2,16
   475a4:	003feb06 	br	47554 <__alt_data_end+0xfffe1094>
   475a8:	10800044 	addi	r2,r2,1
   475ac:	20c00015 	stw	r3,0(r4)
   475b0:	f800283a 	ret
   475b4:	0005883a 	mov	r2,zero
   475b8:	f800283a 	ret
   475bc:	1806d07a 	srli	r3,r3,1
   475c0:	00800044 	movi	r2,1
   475c4:	20c00015 	stw	r3,0(r4)
   475c8:	f800283a 	ret

000475cc <__i2b>:
   475cc:	defffd04 	addi	sp,sp,-12
   475d0:	dc000015 	stw	r16,0(sp)
   475d4:	04000044 	movi	r16,1
   475d8:	dc400115 	stw	r17,4(sp)
   475dc:	2823883a 	mov	r17,r5
   475e0:	800b883a 	mov	r5,r16
   475e4:	dfc00215 	stw	ra,8(sp)
   475e8:	00471cc0 	call	471cc <_Balloc>
   475ec:	14400515 	stw	r17,20(r2)
   475f0:	14000415 	stw	r16,16(r2)
   475f4:	dfc00217 	ldw	ra,8(sp)
   475f8:	dc400117 	ldw	r17,4(sp)
   475fc:	dc000017 	ldw	r16,0(sp)
   47600:	dec00304 	addi	sp,sp,12
   47604:	f800283a 	ret

00047608 <__multiply>:
   47608:	defffa04 	addi	sp,sp,-24
   4760c:	dcc00315 	stw	r19,12(sp)
   47610:	dc800215 	stw	r18,8(sp)
   47614:	2cc00417 	ldw	r19,16(r5)
   47618:	34800417 	ldw	r18,16(r6)
   4761c:	dd000415 	stw	r20,16(sp)
   47620:	dc400115 	stw	r17,4(sp)
   47624:	dfc00515 	stw	ra,20(sp)
   47628:	dc000015 	stw	r16,0(sp)
   4762c:	2829883a 	mov	r20,r5
   47630:	3023883a 	mov	r17,r6
   47634:	9c807016 	blt	r19,r18,477f8 <__multiply+0x1f0>
   47638:	9005883a 	mov	r2,r18
   4763c:	9825883a 	mov	r18,r19
   47640:	1027883a 	mov	r19,r2
   47644:	a0800217 	ldw	r2,8(r20)
   47648:	94e1883a 	add	r16,r18,r19
   4764c:	a1400117 	ldw	r5,4(r20)
   47650:	1400010e 	bge	r2,r16,47658 <__multiply+0x50>
   47654:	29400044 	addi	r5,r5,1
   47658:	00471cc0 	call	471cc <_Balloc>
   4765c:	8417883a 	add	r11,r16,r16
   47660:	13000504 	addi	r12,r2,20
   47664:	5ad7883a 	add	r11,r11,r11
   47668:	62d7883a 	add	r11,r12,r11
   4766c:	6007883a 	mov	r3,r12
   47670:	62c0032e 	bgeu	r12,r11,47680 <__multiply+0x78>
   47674:	18000015 	stw	zero,0(r3)
   47678:	18c00104 	addi	r3,r3,4
   4767c:	1afffd36 	bltu	r3,r11,47674 <__alt_data_end+0xfffe11b4>
   47680:	9ce7883a 	add	r19,r19,r19
   47684:	94a5883a 	add	r18,r18,r18
   47688:	89800504 	addi	r6,r17,20
   4768c:	9ce7883a 	add	r19,r19,r19
   47690:	a3800504 	addi	r14,r20,20
   47694:	94a5883a 	add	r18,r18,r18
   47698:	34db883a 	add	r13,r6,r19
   4769c:	7495883a 	add	r10,r14,r18
   476a0:	3340422e 	bgeu	r6,r13,477ac <__multiply+0x1a4>
   476a4:	34400017 	ldw	r17,0(r6)
   476a8:	8cbfffcc 	andi	r18,r17,65535
   476ac:	90001b26 	beq	r18,zero,4771c <__multiply+0x114>
   476b0:	6013883a 	mov	r9,r12
   476b4:	7023883a 	mov	r17,r14
   476b8:	0011883a 	mov	r8,zero
   476bc:	88c00017 	ldw	r3,0(r17)
   476c0:	4bc00017 	ldw	r15,0(r9)
   476c4:	8c400104 	addi	r17,r17,4
   476c8:	19ffffcc 	andi	r7,r3,65535
   476cc:	3c8f383a 	mul	r7,r7,r18
   476d0:	1808d43a 	srli	r4,r3,16
   476d4:	797fffcc 	andi	r5,r15,65535
   476d8:	29cb883a 	add	r5,r5,r7
   476dc:	2a0b883a 	add	r5,r5,r8
   476e0:	2489383a 	mul	r4,r4,r18
   476e4:	7806d43a 	srli	r3,r15,16
   476e8:	2810d43a 	srli	r8,r5,16
   476ec:	297fffcc 	andi	r5,r5,65535
   476f0:	1907883a 	add	r3,r3,r4
   476f4:	1a07883a 	add	r3,r3,r8
   476f8:	1808943a 	slli	r4,r3,16
   476fc:	480f883a 	mov	r7,r9
   47700:	1810d43a 	srli	r8,r3,16
   47704:	214ab03a 	or	r5,r4,r5
   47708:	49400015 	stw	r5,0(r9)
   4770c:	4a400104 	addi	r9,r9,4
   47710:	8abfea36 	bltu	r17,r10,476bc <__alt_data_end+0xfffe11fc>
   47714:	3a000115 	stw	r8,4(r7)
   47718:	34400017 	ldw	r17,0(r6)
   4771c:	8822d43a 	srli	r17,r17,16
   47720:	88001f26 	beq	r17,zero,477a0 <__multiply+0x198>
   47724:	60c00017 	ldw	r3,0(r12)
   47728:	7013883a 	mov	r9,r14
   4772c:	601f883a 	mov	r15,r12
   47730:	1811883a 	mov	r8,r3
   47734:	6027883a 	mov	r19,r12
   47738:	000f883a 	mov	r7,zero
   4773c:	00000106 	br	47744 <__multiply+0x13c>
   47740:	9027883a 	mov	r19,r18
   47744:	4940000b 	ldhu	r5,0(r9)
   47748:	4010d43a 	srli	r8,r8,16
   4774c:	193fffcc 	andi	r4,r3,65535
   47750:	2c4b383a 	mul	r5,r5,r17
   47754:	7bc00104 	addi	r15,r15,4
   47758:	4a400104 	addi	r9,r9,4
   4775c:	2a0b883a 	add	r5,r5,r8
   47760:	29cb883a 	add	r5,r5,r7
   47764:	2806943a 	slli	r3,r5,16
   47768:	9c800104 	addi	r18,r19,4
   4776c:	280ad43a 	srli	r5,r5,16
   47770:	1908b03a 	or	r4,r3,r4
   47774:	793fff15 	stw	r4,-4(r15)
   47778:	48ffff17 	ldw	r3,-4(r9)
   4777c:	92000017 	ldw	r8,0(r18)
   47780:	1806d43a 	srli	r3,r3,16
   47784:	413fffcc 	andi	r4,r8,65535
   47788:	1c47383a 	mul	r3,r3,r17
   4778c:	1907883a 	add	r3,r3,r4
   47790:	1947883a 	add	r3,r3,r5
   47794:	180ed43a 	srli	r7,r3,16
   47798:	4abfe936 	bltu	r9,r10,47740 <__alt_data_end+0xfffe1280>
   4779c:	98c00115 	stw	r3,4(r19)
   477a0:	31800104 	addi	r6,r6,4
   477a4:	63000104 	addi	r12,r12,4
   477a8:	337fbe36 	bltu	r6,r13,476a4 <__alt_data_end+0xfffe11e4>
   477ac:	0400090e 	bge	zero,r16,477d4 <__multiply+0x1cc>
   477b0:	58ffff17 	ldw	r3,-4(r11)
   477b4:	5affff04 	addi	r11,r11,-4
   477b8:	18000326 	beq	r3,zero,477c8 <__multiply+0x1c0>
   477bc:	00000506 	br	477d4 <__multiply+0x1cc>
   477c0:	58c00017 	ldw	r3,0(r11)
   477c4:	1800031e 	bne	r3,zero,477d4 <__multiply+0x1cc>
   477c8:	843fffc4 	addi	r16,r16,-1
   477cc:	5affff04 	addi	r11,r11,-4
   477d0:	803ffb1e 	bne	r16,zero,477c0 <__alt_data_end+0xfffe1300>
   477d4:	14000415 	stw	r16,16(r2)
   477d8:	dfc00517 	ldw	ra,20(sp)
   477dc:	dd000417 	ldw	r20,16(sp)
   477e0:	dcc00317 	ldw	r19,12(sp)
   477e4:	dc800217 	ldw	r18,8(sp)
   477e8:	dc400117 	ldw	r17,4(sp)
   477ec:	dc000017 	ldw	r16,0(sp)
   477f0:	dec00604 	addi	sp,sp,24
   477f4:	f800283a 	ret
   477f8:	3029883a 	mov	r20,r6
   477fc:	2823883a 	mov	r17,r5
   47800:	003f9006 	br	47644 <__alt_data_end+0xfffe1184>

00047804 <__pow5mult>:
   47804:	defffa04 	addi	sp,sp,-24
   47808:	dcc00315 	stw	r19,12(sp)
   4780c:	dc800215 	stw	r18,8(sp)
   47810:	dc000015 	stw	r16,0(sp)
   47814:	dfc00515 	stw	ra,20(sp)
   47818:	dd000415 	stw	r20,16(sp)
   4781c:	dc400115 	stw	r17,4(sp)
   47820:	308000cc 	andi	r2,r6,3
   47824:	3021883a 	mov	r16,r6
   47828:	2027883a 	mov	r19,r4
   4782c:	2825883a 	mov	r18,r5
   47830:	10002e1e 	bne	r2,zero,478ec <__pow5mult+0xe8>
   47834:	8021d0ba 	srai	r16,r16,2
   47838:	80001a26 	beq	r16,zero,478a4 <__pow5mult+0xa0>
   4783c:	9c401217 	ldw	r17,72(r19)
   47840:	8800061e 	bne	r17,zero,4785c <__pow5mult+0x58>
   47844:	00003406 	br	47918 <__pow5mult+0x114>
   47848:	8021d07a 	srai	r16,r16,1
   4784c:	80001526 	beq	r16,zero,478a4 <__pow5mult+0xa0>
   47850:	88800017 	ldw	r2,0(r17)
   47854:	10001c26 	beq	r2,zero,478c8 <__pow5mult+0xc4>
   47858:	1023883a 	mov	r17,r2
   4785c:	80c0004c 	andi	r3,r16,1
   47860:	183ff926 	beq	r3,zero,47848 <__alt_data_end+0xfffe1388>
   47864:	900b883a 	mov	r5,r18
   47868:	880d883a 	mov	r6,r17
   4786c:	9809883a 	mov	r4,r19
   47870:	00476080 	call	47608 <__multiply>
   47874:	90001b26 	beq	r18,zero,478e4 <__pow5mult+0xe0>
   47878:	91c00117 	ldw	r7,4(r18)
   4787c:	98c01317 	ldw	r3,76(r19)
   47880:	8021d07a 	srai	r16,r16,1
   47884:	39cf883a 	add	r7,r7,r7
   47888:	39cf883a 	add	r7,r7,r7
   4788c:	19c7883a 	add	r3,r3,r7
   47890:	19000017 	ldw	r4,0(r3)
   47894:	91000015 	stw	r4,0(r18)
   47898:	1c800015 	stw	r18,0(r3)
   4789c:	1025883a 	mov	r18,r2
   478a0:	803feb1e 	bne	r16,zero,47850 <__alt_data_end+0xfffe1390>
   478a4:	9005883a 	mov	r2,r18
   478a8:	dfc00517 	ldw	ra,20(sp)
   478ac:	dd000417 	ldw	r20,16(sp)
   478b0:	dcc00317 	ldw	r19,12(sp)
   478b4:	dc800217 	ldw	r18,8(sp)
   478b8:	dc400117 	ldw	r17,4(sp)
   478bc:	dc000017 	ldw	r16,0(sp)
   478c0:	dec00604 	addi	sp,sp,24
   478c4:	f800283a 	ret
   478c8:	9809883a 	mov	r4,r19
   478cc:	880b883a 	mov	r5,r17
   478d0:	880d883a 	mov	r6,r17
   478d4:	00476080 	call	47608 <__multiply>
   478d8:	88800015 	stw	r2,0(r17)
   478dc:	10000015 	stw	zero,0(r2)
   478e0:	003fdd06 	br	47858 <__alt_data_end+0xfffe1398>
   478e4:	1025883a 	mov	r18,r2
   478e8:	003fd706 	br	47848 <__alt_data_end+0xfffe1388>
   478ec:	10bfffc4 	addi	r2,r2,-1
   478f0:	1085883a 	add	r2,r2,r2
   478f4:	00c00174 	movhi	r3,5
   478f8:	18fc9f04 	addi	r3,r3,-3460
   478fc:	1085883a 	add	r2,r2,r2
   47900:	1885883a 	add	r2,r3,r2
   47904:	11800017 	ldw	r6,0(r2)
   47908:	000f883a 	mov	r7,zero
   4790c:	004729c0 	call	4729c <__multadd>
   47910:	1025883a 	mov	r18,r2
   47914:	003fc706 	br	47834 <__alt_data_end+0xfffe1374>
   47918:	05000044 	movi	r20,1
   4791c:	9809883a 	mov	r4,r19
   47920:	a00b883a 	mov	r5,r20
   47924:	00471cc0 	call	471cc <_Balloc>
   47928:	1023883a 	mov	r17,r2
   4792c:	00809c44 	movi	r2,625
   47930:	88800515 	stw	r2,20(r17)
   47934:	8d000415 	stw	r20,16(r17)
   47938:	9c401215 	stw	r17,72(r19)
   4793c:	88000015 	stw	zero,0(r17)
   47940:	003fc606 	br	4785c <__alt_data_end+0xfffe139c>

00047944 <__lshift>:
   47944:	defff904 	addi	sp,sp,-28
   47948:	dd000415 	stw	r20,16(sp)
   4794c:	dcc00315 	stw	r19,12(sp)
   47950:	3029d17a 	srai	r20,r6,5
   47954:	2cc00417 	ldw	r19,16(r5)
   47958:	28800217 	ldw	r2,8(r5)
   4795c:	dd400515 	stw	r21,20(sp)
   47960:	a4e7883a 	add	r19,r20,r19
   47964:	dc800215 	stw	r18,8(sp)
   47968:	dc400115 	stw	r17,4(sp)
   4796c:	dc000015 	stw	r16,0(sp)
   47970:	dfc00615 	stw	ra,24(sp)
   47974:	9c000044 	addi	r16,r19,1
   47978:	2823883a 	mov	r17,r5
   4797c:	302b883a 	mov	r21,r6
   47980:	2025883a 	mov	r18,r4
   47984:	29400117 	ldw	r5,4(r5)
   47988:	1400030e 	bge	r2,r16,47998 <__lshift+0x54>
   4798c:	1085883a 	add	r2,r2,r2
   47990:	29400044 	addi	r5,r5,1
   47994:	143ffd16 	blt	r2,r16,4798c <__alt_data_end+0xfffe14cc>
   47998:	9009883a 	mov	r4,r18
   4799c:	00471cc0 	call	471cc <_Balloc>
   479a0:	11c00504 	addi	r7,r2,20
   479a4:	0500090e 	bge	zero,r20,479cc <__lshift+0x88>
   479a8:	3811883a 	mov	r8,r7
   479ac:	0007883a 	mov	r3,zero
   479b0:	40000015 	stw	zero,0(r8)
   479b4:	18c00044 	addi	r3,r3,1
   479b8:	42000104 	addi	r8,r8,4
   479bc:	1d3ffc1e 	bne	r3,r20,479b0 <__alt_data_end+0xfffe14f0>
   479c0:	18c7883a 	add	r3,r3,r3
   479c4:	18c7883a 	add	r3,r3,r3
   479c8:	38cf883a 	add	r7,r7,r3
   479cc:	89000417 	ldw	r4,16(r17)
   479d0:	88c00504 	addi	r3,r17,20
   479d4:	a98007cc 	andi	r6,r21,31
   479d8:	2109883a 	add	r4,r4,r4
   479dc:	2109883a 	add	r4,r4,r4
   479e0:	1909883a 	add	r4,r3,r4
   479e4:	30002326 	beq	r6,zero,47a74 <__lshift+0x130>
   479e8:	01400804 	movi	r5,32
   479ec:	298bc83a 	sub	r5,r5,r6
   479f0:	0013883a 	mov	r9,zero
   479f4:	1a000017 	ldw	r8,0(r3)
   479f8:	3815883a 	mov	r10,r7
   479fc:	39c00104 	addi	r7,r7,4
   47a00:	4190983a 	sll	r8,r8,r6
   47a04:	18c00104 	addi	r3,r3,4
   47a08:	4a10b03a 	or	r8,r9,r8
   47a0c:	3a3fff15 	stw	r8,-4(r7)
   47a10:	1a3fff17 	ldw	r8,-4(r3)
   47a14:	4152d83a 	srl	r9,r8,r5
   47a18:	193ff636 	bltu	r3,r4,479f4 <__alt_data_end+0xfffe1534>
   47a1c:	52400115 	stw	r9,4(r10)
   47a20:	48000126 	beq	r9,zero,47a28 <__lshift+0xe4>
   47a24:	9c000084 	addi	r16,r19,2
   47a28:	89000117 	ldw	r4,4(r17)
   47a2c:	90c01317 	ldw	r3,76(r18)
   47a30:	843fffc4 	addi	r16,r16,-1
   47a34:	2109883a 	add	r4,r4,r4
   47a38:	2109883a 	add	r4,r4,r4
   47a3c:	1907883a 	add	r3,r3,r4
   47a40:	19000017 	ldw	r4,0(r3)
   47a44:	14000415 	stw	r16,16(r2)
   47a48:	89000015 	stw	r4,0(r17)
   47a4c:	1c400015 	stw	r17,0(r3)
   47a50:	dfc00617 	ldw	ra,24(sp)
   47a54:	dd400517 	ldw	r21,20(sp)
   47a58:	dd000417 	ldw	r20,16(sp)
   47a5c:	dcc00317 	ldw	r19,12(sp)
   47a60:	dc800217 	ldw	r18,8(sp)
   47a64:	dc400117 	ldw	r17,4(sp)
   47a68:	dc000017 	ldw	r16,0(sp)
   47a6c:	dec00704 	addi	sp,sp,28
   47a70:	f800283a 	ret
   47a74:	19400017 	ldw	r5,0(r3)
   47a78:	39c00104 	addi	r7,r7,4
   47a7c:	18c00104 	addi	r3,r3,4
   47a80:	397fff15 	stw	r5,-4(r7)
   47a84:	193ffb36 	bltu	r3,r4,47a74 <__alt_data_end+0xfffe15b4>
   47a88:	003fe706 	br	47a28 <__alt_data_end+0xfffe1568>

00047a8c <__mcmp>:
   47a8c:	20800417 	ldw	r2,16(r4)
   47a90:	28c00417 	ldw	r3,16(r5)
   47a94:	10c5c83a 	sub	r2,r2,r3
   47a98:	1000111e 	bne	r2,zero,47ae0 <__mcmp+0x54>
   47a9c:	18c7883a 	add	r3,r3,r3
   47aa0:	18c7883a 	add	r3,r3,r3
   47aa4:	21000504 	addi	r4,r4,20
   47aa8:	29400504 	addi	r5,r5,20
   47aac:	20c5883a 	add	r2,r4,r3
   47ab0:	28cb883a 	add	r5,r5,r3
   47ab4:	00000106 	br	47abc <__mcmp+0x30>
   47ab8:	20800a2e 	bgeu	r4,r2,47ae4 <__mcmp+0x58>
   47abc:	10bfff04 	addi	r2,r2,-4
   47ac0:	297fff04 	addi	r5,r5,-4
   47ac4:	11800017 	ldw	r6,0(r2)
   47ac8:	28c00017 	ldw	r3,0(r5)
   47acc:	30fffa26 	beq	r6,r3,47ab8 <__alt_data_end+0xfffe15f8>
   47ad0:	30c00236 	bltu	r6,r3,47adc <__mcmp+0x50>
   47ad4:	00800044 	movi	r2,1
   47ad8:	f800283a 	ret
   47adc:	00bfffc4 	movi	r2,-1
   47ae0:	f800283a 	ret
   47ae4:	0005883a 	mov	r2,zero
   47ae8:	f800283a 	ret

00047aec <__mdiff>:
   47aec:	defffb04 	addi	sp,sp,-20
   47af0:	dc000015 	stw	r16,0(sp)
   47af4:	2821883a 	mov	r16,r5
   47af8:	dcc00315 	stw	r19,12(sp)
   47afc:	300b883a 	mov	r5,r6
   47b00:	2027883a 	mov	r19,r4
   47b04:	8009883a 	mov	r4,r16
   47b08:	dc800215 	stw	r18,8(sp)
   47b0c:	dfc00415 	stw	ra,16(sp)
   47b10:	dc400115 	stw	r17,4(sp)
   47b14:	3025883a 	mov	r18,r6
   47b18:	0047a8c0 	call	47a8c <__mcmp>
   47b1c:	10005226 	beq	r2,zero,47c68 <__mdiff+0x17c>
   47b20:	10004c16 	blt	r2,zero,47c54 <__mdiff+0x168>
   47b24:	0023883a 	mov	r17,zero
   47b28:	81400117 	ldw	r5,4(r16)
   47b2c:	9809883a 	mov	r4,r19
   47b30:	00471cc0 	call	471cc <_Balloc>
   47b34:	83400417 	ldw	r13,16(r16)
   47b38:	93800417 	ldw	r14,16(r18)
   47b3c:	81000504 	addi	r4,r16,20
   47b40:	6b59883a 	add	r12,r13,r13
   47b44:	739d883a 	add	r14,r14,r14
   47b48:	6319883a 	add	r12,r12,r12
   47b4c:	91800504 	addi	r6,r18,20
   47b50:	739d883a 	add	r14,r14,r14
   47b54:	14400315 	stw	r17,12(r2)
   47b58:	2319883a 	add	r12,r4,r12
   47b5c:	339d883a 	add	r14,r6,r14
   47b60:	12400504 	addi	r9,r2,20
   47b64:	0007883a 	mov	r3,zero
   47b68:	22000017 	ldw	r8,0(r4)
   47b6c:	32800017 	ldw	r10,0(r6)
   47b70:	4ac00104 	addi	r11,r9,4
   47b74:	41ffffcc 	andi	r7,r8,65535
   47b78:	38c7883a 	add	r3,r7,r3
   47b7c:	51ffffcc 	andi	r7,r10,65535
   47b80:	19cfc83a 	sub	r7,r3,r7
   47b84:	4010d43a 	srli	r8,r8,16
   47b88:	5014d43a 	srli	r10,r10,16
   47b8c:	3807d43a 	srai	r3,r7,16
   47b90:	39ffffcc 	andi	r7,r7,65535
   47b94:	4291c83a 	sub	r8,r8,r10
   47b98:	40c7883a 	add	r3,r8,r3
   47b9c:	1810943a 	slli	r8,r3,16
   47ba0:	31800104 	addi	r6,r6,4
   47ba4:	21000104 	addi	r4,r4,4
   47ba8:	41ceb03a 	or	r7,r8,r7
   47bac:	49c00015 	stw	r7,0(r9)
   47bb0:	1807d43a 	srai	r3,r3,16
   47bb4:	580b883a 	mov	r5,r11
   47bb8:	5813883a 	mov	r9,r11
   47bbc:	33bfea36 	bltu	r6,r14,47b68 <__alt_data_end+0xfffe16a8>
   47bc0:	2011883a 	mov	r8,r4
   47bc4:	2300152e 	bgeu	r4,r12,47c1c <__mdiff+0x130>
   47bc8:	21400017 	ldw	r5,0(r4)
   47bcc:	4a400104 	addi	r9,r9,4
   47bd0:	21000104 	addi	r4,r4,4
   47bd4:	29ffffcc 	andi	r7,r5,65535
   47bd8:	38c7883a 	add	r3,r7,r3
   47bdc:	280ad43a 	srli	r5,r5,16
   47be0:	180dd43a 	srai	r6,r3,16
   47be4:	19ffffcc 	andi	r7,r3,65535
   47be8:	3147883a 	add	r3,r6,r5
   47bec:	180a943a 	slli	r5,r3,16
   47bf0:	1807d43a 	srai	r3,r3,16
   47bf4:	29ceb03a 	or	r7,r5,r7
   47bf8:	49ffff15 	stw	r7,-4(r9)
   47bfc:	233ff236 	bltu	r4,r12,47bc8 <__alt_data_end+0xfffe1708>
   47c00:	0206303a 	nor	r3,zero,r8
   47c04:	1b07883a 	add	r3,r3,r12
   47c08:	1806d0ba 	srli	r3,r3,2
   47c0c:	18c00044 	addi	r3,r3,1
   47c10:	18c7883a 	add	r3,r3,r3
   47c14:	18c7883a 	add	r3,r3,r3
   47c18:	58cb883a 	add	r5,r11,r3
   47c1c:	28ffff04 	addi	r3,r5,-4
   47c20:	3800041e 	bne	r7,zero,47c34 <__mdiff+0x148>
   47c24:	18ffff04 	addi	r3,r3,-4
   47c28:	19000017 	ldw	r4,0(r3)
   47c2c:	6b7fffc4 	addi	r13,r13,-1
   47c30:	203ffc26 	beq	r4,zero,47c24 <__alt_data_end+0xfffe1764>
   47c34:	13400415 	stw	r13,16(r2)
   47c38:	dfc00417 	ldw	ra,16(sp)
   47c3c:	dcc00317 	ldw	r19,12(sp)
   47c40:	dc800217 	ldw	r18,8(sp)
   47c44:	dc400117 	ldw	r17,4(sp)
   47c48:	dc000017 	ldw	r16,0(sp)
   47c4c:	dec00504 	addi	sp,sp,20
   47c50:	f800283a 	ret
   47c54:	8005883a 	mov	r2,r16
   47c58:	04400044 	movi	r17,1
   47c5c:	9021883a 	mov	r16,r18
   47c60:	1025883a 	mov	r18,r2
   47c64:	003fb006 	br	47b28 <__alt_data_end+0xfffe1668>
   47c68:	9809883a 	mov	r4,r19
   47c6c:	000b883a 	mov	r5,zero
   47c70:	00471cc0 	call	471cc <_Balloc>
   47c74:	00c00044 	movi	r3,1
   47c78:	10c00415 	stw	r3,16(r2)
   47c7c:	10000515 	stw	zero,20(r2)
   47c80:	003fed06 	br	47c38 <__alt_data_end+0xfffe1778>

00047c84 <__ulp>:
   47c84:	295ffc2c 	andhi	r5,r5,32752
   47c88:	00bf3034 	movhi	r2,64704
   47c8c:	2887883a 	add	r3,r5,r2
   47c90:	00c0020e 	bge	zero,r3,47c9c <__ulp+0x18>
   47c94:	0005883a 	mov	r2,zero
   47c98:	f800283a 	ret
   47c9c:	00c7c83a 	sub	r3,zero,r3
   47ca0:	180bd53a 	srai	r5,r3,20
   47ca4:	008004c4 	movi	r2,19
   47ca8:	11400a0e 	bge	r2,r5,47cd4 <__ulp+0x50>
   47cac:	00800c84 	movi	r2,50
   47cb0:	0007883a 	mov	r3,zero
   47cb4:	11400516 	blt	r2,r5,47ccc <__ulp+0x48>
   47cb8:	00800cc4 	movi	r2,51
   47cbc:	114bc83a 	sub	r5,r2,r5
   47cc0:	00800044 	movi	r2,1
   47cc4:	1144983a 	sll	r2,r2,r5
   47cc8:	f800283a 	ret
   47ccc:	00800044 	movi	r2,1
   47cd0:	f800283a 	ret
   47cd4:	00800234 	movhi	r2,8
   47cd8:	1147d83a 	sra	r3,r2,r5
   47cdc:	0005883a 	mov	r2,zero
   47ce0:	f800283a 	ret

00047ce4 <__b2d>:
   47ce4:	defffa04 	addi	sp,sp,-24
   47ce8:	dc000015 	stw	r16,0(sp)
   47cec:	24000417 	ldw	r16,16(r4)
   47cf0:	dc400115 	stw	r17,4(sp)
   47cf4:	24400504 	addi	r17,r4,20
   47cf8:	8421883a 	add	r16,r16,r16
   47cfc:	8421883a 	add	r16,r16,r16
   47d00:	8c21883a 	add	r16,r17,r16
   47d04:	dc800215 	stw	r18,8(sp)
   47d08:	84bfff17 	ldw	r18,-4(r16)
   47d0c:	dd000415 	stw	r20,16(sp)
   47d10:	dcc00315 	stw	r19,12(sp)
   47d14:	9009883a 	mov	r4,r18
   47d18:	2829883a 	mov	r20,r5
   47d1c:	dfc00515 	stw	ra,20(sp)
   47d20:	00474b40 	call	474b4 <__hi0bits>
   47d24:	00c00804 	movi	r3,32
   47d28:	1887c83a 	sub	r3,r3,r2
   47d2c:	a0c00015 	stw	r3,0(r20)
   47d30:	00c00284 	movi	r3,10
   47d34:	84ffff04 	addi	r19,r16,-4
   47d38:	18801216 	blt	r3,r2,47d84 <__b2d+0xa0>
   47d3c:	014002c4 	movi	r5,11
   47d40:	2889c83a 	sub	r4,r5,r2
   47d44:	9106d83a 	srl	r3,r18,r4
   47d48:	18cffc34 	orhi	r3,r3,16368
   47d4c:	8cc0282e 	bgeu	r17,r19,47df0 <__b2d+0x10c>
   47d50:	817ffe17 	ldw	r5,-8(r16)
   47d54:	290ad83a 	srl	r5,r5,r4
   47d58:	10800544 	addi	r2,r2,21
   47d5c:	9084983a 	sll	r2,r18,r2
   47d60:	2884b03a 	or	r2,r5,r2
   47d64:	dfc00517 	ldw	ra,20(sp)
   47d68:	dd000417 	ldw	r20,16(sp)
   47d6c:	dcc00317 	ldw	r19,12(sp)
   47d70:	dc800217 	ldw	r18,8(sp)
   47d74:	dc400117 	ldw	r17,4(sp)
   47d78:	dc000017 	ldw	r16,0(sp)
   47d7c:	dec00604 	addi	sp,sp,24
   47d80:	f800283a 	ret
   47d84:	113ffd44 	addi	r4,r2,-11
   47d88:	8cc00f2e 	bgeu	r17,r19,47dc8 <__b2d+0xe4>
   47d8c:	81bffe04 	addi	r6,r16,-8
   47d90:	817ffe17 	ldw	r5,-8(r16)
   47d94:	20001326 	beq	r4,zero,47de4 <__b2d+0x100>
   47d98:	00c00ac4 	movi	r3,43
   47d9c:	1885c83a 	sub	r2,r3,r2
   47da0:	2886d83a 	srl	r3,r5,r2
   47da4:	9124983a 	sll	r18,r18,r4
   47da8:	90e4b03a 	or	r18,r18,r3
   47dac:	90cffc34 	orhi	r3,r18,16368
   47db0:	8980112e 	bgeu	r17,r6,47df8 <__b2d+0x114>
   47db4:	81bffd17 	ldw	r6,-12(r16)
   47db8:	308cd83a 	srl	r6,r6,r2
   47dbc:	2904983a 	sll	r2,r5,r4
   47dc0:	1184b03a 	or	r2,r2,r6
   47dc4:	003fe706 	br	47d64 <__alt_data_end+0xfffe18a4>
   47dc8:	20000526 	beq	r4,zero,47de0 <__b2d+0xfc>
   47dcc:	9124983a 	sll	r18,r18,r4
   47dd0:	000d883a 	mov	r6,zero
   47dd4:	000b883a 	mov	r5,zero
   47dd8:	90cffc34 	orhi	r3,r18,16368
   47ddc:	003ff706 	br	47dbc <__alt_data_end+0xfffe18fc>
   47de0:	000b883a 	mov	r5,zero
   47de4:	90cffc34 	orhi	r3,r18,16368
   47de8:	2805883a 	mov	r2,r5
   47dec:	003fdd06 	br	47d64 <__alt_data_end+0xfffe18a4>
   47df0:	000b883a 	mov	r5,zero
   47df4:	003fd806 	br	47d58 <__alt_data_end+0xfffe1898>
   47df8:	000d883a 	mov	r6,zero
   47dfc:	003fef06 	br	47dbc <__alt_data_end+0xfffe18fc>

00047e00 <__d2b>:
   47e00:	defff704 	addi	sp,sp,-36
   47e04:	dc000215 	stw	r16,8(sp)
   47e08:	3021883a 	mov	r16,r6
   47e0c:	dc400315 	stw	r17,12(sp)
   47e10:	8022907a 	slli	r17,r16,1
   47e14:	dd400715 	stw	r21,28(sp)
   47e18:	282b883a 	mov	r21,r5
   47e1c:	01400044 	movi	r5,1
   47e20:	dd000615 	stw	r20,24(sp)
   47e24:	dcc00515 	stw	r19,20(sp)
   47e28:	dc800415 	stw	r18,16(sp)
   47e2c:	dfc00815 	stw	ra,32(sp)
   47e30:	3829883a 	mov	r20,r7
   47e34:	dc800917 	ldw	r18,36(sp)
   47e38:	8822d57a 	srli	r17,r17,21
   47e3c:	00471cc0 	call	471cc <_Balloc>
   47e40:	1027883a 	mov	r19,r2
   47e44:	00800434 	movhi	r2,16
   47e48:	10bfffc4 	addi	r2,r2,-1
   47e4c:	808c703a 	and	r6,r16,r2
   47e50:	88000126 	beq	r17,zero,47e58 <__d2b+0x58>
   47e54:	31800434 	orhi	r6,r6,16
   47e58:	d9800015 	stw	r6,0(sp)
   47e5c:	a8001f26 	beq	r21,zero,47edc <__d2b+0xdc>
   47e60:	d9000104 	addi	r4,sp,4
   47e64:	dd400115 	stw	r21,4(sp)
   47e68:	004751c0 	call	4751c <__lo0bits>
   47e6c:	d8c00017 	ldw	r3,0(sp)
   47e70:	1000291e 	bne	r2,zero,47f18 <__d2b+0x118>
   47e74:	d9000117 	ldw	r4,4(sp)
   47e78:	99000515 	stw	r4,20(r19)
   47e7c:	1820c03a 	cmpne	r16,r3,zero
   47e80:	84000044 	addi	r16,r16,1
   47e84:	98c00615 	stw	r3,24(r19)
   47e88:	9c000415 	stw	r16,16(r19)
   47e8c:	88001b1e 	bne	r17,zero,47efc <__d2b+0xfc>
   47e90:	800690ba 	slli	r3,r16,2
   47e94:	10bef384 	addi	r2,r2,-1074
   47e98:	a0800015 	stw	r2,0(r20)
   47e9c:	98c5883a 	add	r2,r19,r3
   47ea0:	11000417 	ldw	r4,16(r2)
   47ea4:	8020917a 	slli	r16,r16,5
   47ea8:	00474b40 	call	474b4 <__hi0bits>
   47eac:	8085c83a 	sub	r2,r16,r2
   47eb0:	90800015 	stw	r2,0(r18)
   47eb4:	9805883a 	mov	r2,r19
   47eb8:	dfc00817 	ldw	ra,32(sp)
   47ebc:	dd400717 	ldw	r21,28(sp)
   47ec0:	dd000617 	ldw	r20,24(sp)
   47ec4:	dcc00517 	ldw	r19,20(sp)
   47ec8:	dc800417 	ldw	r18,16(sp)
   47ecc:	dc400317 	ldw	r17,12(sp)
   47ed0:	dc000217 	ldw	r16,8(sp)
   47ed4:	dec00904 	addi	sp,sp,36
   47ed8:	f800283a 	ret
   47edc:	d809883a 	mov	r4,sp
   47ee0:	004751c0 	call	4751c <__lo0bits>
   47ee4:	d8c00017 	ldw	r3,0(sp)
   47ee8:	04000044 	movi	r16,1
   47eec:	9c000415 	stw	r16,16(r19)
   47ef0:	98c00515 	stw	r3,20(r19)
   47ef4:	10800804 	addi	r2,r2,32
   47ef8:	883fe526 	beq	r17,zero,47e90 <__alt_data_end+0xfffe19d0>
   47efc:	8c7ef344 	addi	r17,r17,-1075
   47f00:	88a3883a 	add	r17,r17,r2
   47f04:	00c00d44 	movi	r3,53
   47f08:	a4400015 	stw	r17,0(r20)
   47f0c:	1885c83a 	sub	r2,r3,r2
   47f10:	90800015 	stw	r2,0(r18)
   47f14:	003fe706 	br	47eb4 <__alt_data_end+0xfffe19f4>
   47f18:	01000804 	movi	r4,32
   47f1c:	2089c83a 	sub	r4,r4,r2
   47f20:	1908983a 	sll	r4,r3,r4
   47f24:	d9400117 	ldw	r5,4(sp)
   47f28:	1886d83a 	srl	r3,r3,r2
   47f2c:	2148b03a 	or	r4,r4,r5
   47f30:	99000515 	stw	r4,20(r19)
   47f34:	d8c00015 	stw	r3,0(sp)
   47f38:	003fd006 	br	47e7c <__alt_data_end+0xfffe19bc>

00047f3c <__ratio>:
   47f3c:	defff904 	addi	sp,sp,-28
   47f40:	dc400315 	stw	r17,12(sp)
   47f44:	2823883a 	mov	r17,r5
   47f48:	d9400104 	addi	r5,sp,4
   47f4c:	dfc00615 	stw	ra,24(sp)
   47f50:	dcc00515 	stw	r19,20(sp)
   47f54:	dc800415 	stw	r18,16(sp)
   47f58:	2027883a 	mov	r19,r4
   47f5c:	dc000215 	stw	r16,8(sp)
   47f60:	0047ce40 	call	47ce4 <__b2d>
   47f64:	8809883a 	mov	r4,r17
   47f68:	d80b883a 	mov	r5,sp
   47f6c:	1025883a 	mov	r18,r2
   47f70:	1821883a 	mov	r16,r3
   47f74:	0047ce40 	call	47ce4 <__b2d>
   47f78:	8a400417 	ldw	r9,16(r17)
   47f7c:	9a000417 	ldw	r8,16(r19)
   47f80:	100d883a 	mov	r6,r2
   47f84:	d8800017 	ldw	r2,0(sp)
   47f88:	4251c83a 	sub	r8,r8,r9
   47f8c:	4012917a 	slli	r9,r8,5
   47f90:	da000117 	ldw	r8,4(sp)
   47f94:	4091c83a 	sub	r8,r8,r2
   47f98:	4251883a 	add	r8,r8,r9
   47f9c:	02000d0e 	bge	zero,r8,47fd4 <__ratio+0x98>
   47fa0:	4010953a 	slli	r8,r8,20
   47fa4:	4421883a 	add	r16,r8,r16
   47fa8:	9009883a 	mov	r4,r18
   47fac:	800b883a 	mov	r5,r16
   47fb0:	180f883a 	mov	r7,r3
   47fb4:	004bd200 	call	4bd20 <__divdf3>
   47fb8:	dfc00617 	ldw	ra,24(sp)
   47fbc:	dcc00517 	ldw	r19,20(sp)
   47fc0:	dc800417 	ldw	r18,16(sp)
   47fc4:	dc400317 	ldw	r17,12(sp)
   47fc8:	dc000217 	ldw	r16,8(sp)
   47fcc:	dec00704 	addi	sp,sp,28
   47fd0:	f800283a 	ret
   47fd4:	4010953a 	slli	r8,r8,20
   47fd8:	1a07c83a 	sub	r3,r3,r8
   47fdc:	003ff206 	br	47fa8 <__alt_data_end+0xfffe1ae8>

00047fe0 <_mprec_log10>:
   47fe0:	defffe04 	addi	sp,sp,-8
   47fe4:	dc000015 	stw	r16,0(sp)
   47fe8:	dfc00115 	stw	ra,4(sp)
   47fec:	008005c4 	movi	r2,23
   47ff0:	2021883a 	mov	r16,r4
   47ff4:	11000d0e 	bge	r2,r4,4802c <_mprec_log10+0x4c>
   47ff8:	0005883a 	mov	r2,zero
   47ffc:	00cffc34 	movhi	r3,16368
   48000:	843fffc4 	addi	r16,r16,-1
   48004:	1009883a 	mov	r4,r2
   48008:	180b883a 	mov	r5,r3
   4800c:	000d883a 	mov	r6,zero
   48010:	01d00934 	movhi	r7,16420
   48014:	004c8300 	call	4c830 <__muldf3>
   48018:	803ff91e 	bne	r16,zero,48000 <__alt_data_end+0xfffe1b40>
   4801c:	dfc00117 	ldw	ra,4(sp)
   48020:	dc000017 	ldw	r16,0(sp)
   48024:	dec00204 	addi	sp,sp,8
   48028:	f800283a 	ret
   4802c:	202090fa 	slli	r16,r4,3
   48030:	00800174 	movhi	r2,5
   48034:	10bcb604 	addi	r2,r2,-3368
   48038:	1421883a 	add	r16,r2,r16
   4803c:	80800017 	ldw	r2,0(r16)
   48040:	80c00117 	ldw	r3,4(r16)
   48044:	dfc00117 	ldw	ra,4(sp)
   48048:	dc000017 	ldw	r16,0(sp)
   4804c:	dec00204 	addi	sp,sp,8
   48050:	f800283a 	ret

00048054 <__copybits>:
   48054:	297fffc4 	addi	r5,r5,-1
   48058:	280fd17a 	srai	r7,r5,5
   4805c:	30c00417 	ldw	r3,16(r6)
   48060:	30800504 	addi	r2,r6,20
   48064:	39c00044 	addi	r7,r7,1
   48068:	18c7883a 	add	r3,r3,r3
   4806c:	39cf883a 	add	r7,r7,r7
   48070:	18c7883a 	add	r3,r3,r3
   48074:	39cf883a 	add	r7,r7,r7
   48078:	10c7883a 	add	r3,r2,r3
   4807c:	21cf883a 	add	r7,r4,r7
   48080:	10c00d2e 	bgeu	r2,r3,480b8 <__copybits+0x64>
   48084:	200b883a 	mov	r5,r4
   48088:	12000017 	ldw	r8,0(r2)
   4808c:	29400104 	addi	r5,r5,4
   48090:	10800104 	addi	r2,r2,4
   48094:	2a3fff15 	stw	r8,-4(r5)
   48098:	10fffb36 	bltu	r2,r3,48088 <__alt_data_end+0xfffe1bc8>
   4809c:	1985c83a 	sub	r2,r3,r6
   480a0:	10bffac4 	addi	r2,r2,-21
   480a4:	1004d0ba 	srli	r2,r2,2
   480a8:	10800044 	addi	r2,r2,1
   480ac:	1085883a 	add	r2,r2,r2
   480b0:	1085883a 	add	r2,r2,r2
   480b4:	2089883a 	add	r4,r4,r2
   480b8:	21c0032e 	bgeu	r4,r7,480c8 <__copybits+0x74>
   480bc:	20000015 	stw	zero,0(r4)
   480c0:	21000104 	addi	r4,r4,4
   480c4:	21fffd36 	bltu	r4,r7,480bc <__alt_data_end+0xfffe1bfc>
   480c8:	f800283a 	ret

000480cc <__any_on>:
   480cc:	20c00417 	ldw	r3,16(r4)
   480d0:	2805d17a 	srai	r2,r5,5
   480d4:	21000504 	addi	r4,r4,20
   480d8:	18800d0e 	bge	r3,r2,48110 <__any_on+0x44>
   480dc:	18c7883a 	add	r3,r3,r3
   480e0:	18c7883a 	add	r3,r3,r3
   480e4:	20c7883a 	add	r3,r4,r3
   480e8:	20c0192e 	bgeu	r4,r3,48150 <__any_on+0x84>
   480ec:	18bfff17 	ldw	r2,-4(r3)
   480f0:	18ffff04 	addi	r3,r3,-4
   480f4:	1000041e 	bne	r2,zero,48108 <__any_on+0x3c>
   480f8:	20c0142e 	bgeu	r4,r3,4814c <__any_on+0x80>
   480fc:	18ffff04 	addi	r3,r3,-4
   48100:	19400017 	ldw	r5,0(r3)
   48104:	283ffc26 	beq	r5,zero,480f8 <__alt_data_end+0xfffe1c38>
   48108:	00800044 	movi	r2,1
   4810c:	f800283a 	ret
   48110:	10c00a0e 	bge	r2,r3,4813c <__any_on+0x70>
   48114:	1085883a 	add	r2,r2,r2
   48118:	1085883a 	add	r2,r2,r2
   4811c:	294007cc 	andi	r5,r5,31
   48120:	2087883a 	add	r3,r4,r2
   48124:	283ff026 	beq	r5,zero,480e8 <__alt_data_end+0xfffe1c28>
   48128:	19800017 	ldw	r6,0(r3)
   4812c:	3144d83a 	srl	r2,r6,r5
   48130:	114a983a 	sll	r5,r2,r5
   48134:	29bff41e 	bne	r5,r6,48108 <__alt_data_end+0xfffe1c48>
   48138:	003feb06 	br	480e8 <__alt_data_end+0xfffe1c28>
   4813c:	1085883a 	add	r2,r2,r2
   48140:	1085883a 	add	r2,r2,r2
   48144:	2087883a 	add	r3,r4,r2
   48148:	003fe706 	br	480e8 <__alt_data_end+0xfffe1c28>
   4814c:	f800283a 	ret
   48150:	0005883a 	mov	r2,zero
   48154:	f800283a 	ret

00048158 <_putc_r>:
   48158:	defffc04 	addi	sp,sp,-16
   4815c:	dc000215 	stw	r16,8(sp)
   48160:	dfc00315 	stw	ra,12(sp)
   48164:	2021883a 	mov	r16,r4
   48168:	20000226 	beq	r4,zero,48174 <_putc_r+0x1c>
   4816c:	20800e17 	ldw	r2,56(r4)
   48170:	10001b26 	beq	r2,zero,481e0 <_putc_r+0x88>
   48174:	30800217 	ldw	r2,8(r6)
   48178:	10bfffc4 	addi	r2,r2,-1
   4817c:	30800215 	stw	r2,8(r6)
   48180:	10000a16 	blt	r2,zero,481ac <_putc_r+0x54>
   48184:	30800017 	ldw	r2,0(r6)
   48188:	11400005 	stb	r5,0(r2)
   4818c:	30800017 	ldw	r2,0(r6)
   48190:	10c00044 	addi	r3,r2,1
   48194:	30c00015 	stw	r3,0(r6)
   48198:	10800003 	ldbu	r2,0(r2)
   4819c:	dfc00317 	ldw	ra,12(sp)
   481a0:	dc000217 	ldw	r16,8(sp)
   481a4:	dec00404 	addi	sp,sp,16
   481a8:	f800283a 	ret
   481ac:	30c00617 	ldw	r3,24(r6)
   481b0:	10c00616 	blt	r2,r3,481cc <_putc_r+0x74>
   481b4:	30800017 	ldw	r2,0(r6)
   481b8:	00c00284 	movi	r3,10
   481bc:	11400005 	stb	r5,0(r2)
   481c0:	30800017 	ldw	r2,0(r6)
   481c4:	11400003 	ldbu	r5,0(r2)
   481c8:	28fff11e 	bne	r5,r3,48190 <__alt_data_end+0xfffe1cd0>
   481cc:	8009883a 	mov	r4,r16
   481d0:	dfc00317 	ldw	ra,12(sp)
   481d4:	dc000217 	ldw	r16,8(sp)
   481d8:	dec00404 	addi	sp,sp,16
   481dc:	0049f9c1 	jmpi	49f9c <__swbuf_r>
   481e0:	d9400015 	stw	r5,0(sp)
   481e4:	d9800115 	stw	r6,4(sp)
   481e8:	00459ac0 	call	459ac <__sinit>
   481ec:	d9800117 	ldw	r6,4(sp)
   481f0:	d9400017 	ldw	r5,0(sp)
   481f4:	003fdf06 	br	48174 <__alt_data_end+0xfffe1cb4>

000481f8 <putc>:
   481f8:	defffc04 	addi	sp,sp,-16
   481fc:	dc400115 	stw	r17,4(sp)
   48200:	04400174 	movhi	r17,5
   48204:	8c7fd604 	addi	r17,r17,-168
   48208:	dc800215 	stw	r18,8(sp)
   4820c:	2025883a 	mov	r18,r4
   48210:	89000017 	ldw	r4,0(r17)
   48214:	dc000015 	stw	r16,0(sp)
   48218:	dfc00315 	stw	ra,12(sp)
   4821c:	2821883a 	mov	r16,r5
   48220:	20000226 	beq	r4,zero,4822c <putc+0x34>
   48224:	20c00e17 	ldw	r3,56(r4)
   48228:	18001a26 	beq	r3,zero,48294 <putc+0x9c>
   4822c:	80800217 	ldw	r2,8(r16)
   48230:	10bfffc4 	addi	r2,r2,-1
   48234:	80800215 	stw	r2,8(r16)
   48238:	10000c16 	blt	r2,zero,4826c <putc+0x74>
   4823c:	80800017 	ldw	r2,0(r16)
   48240:	14800005 	stb	r18,0(r2)
   48244:	80800017 	ldw	r2,0(r16)
   48248:	10c00044 	addi	r3,r2,1
   4824c:	80c00015 	stw	r3,0(r16)
   48250:	10800003 	ldbu	r2,0(r2)
   48254:	dfc00317 	ldw	ra,12(sp)
   48258:	dc800217 	ldw	r18,8(sp)
   4825c:	dc400117 	ldw	r17,4(sp)
   48260:	dc000017 	ldw	r16,0(sp)
   48264:	dec00404 	addi	sp,sp,16
   48268:	f800283a 	ret
   4826c:	80c00617 	ldw	r3,24(r16)
   48270:	10c00a16 	blt	r2,r3,4829c <putc+0xa4>
   48274:	80800017 	ldw	r2,0(r16)
   48278:	00c00284 	movi	r3,10
   4827c:	14800005 	stb	r18,0(r2)
   48280:	80800017 	ldw	r2,0(r16)
   48284:	11400003 	ldbu	r5,0(r2)
   48288:	28ffef1e 	bne	r5,r3,48248 <__alt_data_end+0xfffe1d88>
   4828c:	89000017 	ldw	r4,0(r17)
   48290:	00000406 	br	482a4 <putc+0xac>
   48294:	00459ac0 	call	459ac <__sinit>
   48298:	003fe406 	br	4822c <__alt_data_end+0xfffe1d6c>
   4829c:	89000017 	ldw	r4,0(r17)
   482a0:	900b883a 	mov	r5,r18
   482a4:	800d883a 	mov	r6,r16
   482a8:	dfc00317 	ldw	ra,12(sp)
   482ac:	dc800217 	ldw	r18,8(sp)
   482b0:	dc400117 	ldw	r17,4(sp)
   482b4:	dc000017 	ldw	r16,0(sp)
   482b8:	dec00404 	addi	sp,sp,16
   482bc:	0049f9c1 	jmpi	49f9c <__swbuf_r>

000482c0 <_realloc_r>:
   482c0:	defff604 	addi	sp,sp,-40
   482c4:	dcc00315 	stw	r19,12(sp)
   482c8:	dc400115 	stw	r17,4(sp)
   482cc:	dfc00915 	stw	ra,36(sp)
   482d0:	df000815 	stw	fp,32(sp)
   482d4:	ddc00715 	stw	r23,28(sp)
   482d8:	dd800615 	stw	r22,24(sp)
   482dc:	dd400515 	stw	r21,20(sp)
   482e0:	dd000415 	stw	r20,16(sp)
   482e4:	dc800215 	stw	r18,8(sp)
   482e8:	dc000015 	stw	r16,0(sp)
   482ec:	2827883a 	mov	r19,r5
   482f0:	3023883a 	mov	r17,r6
   482f4:	2800bf26 	beq	r5,zero,485f4 <_realloc_r+0x334>
   482f8:	2025883a 	mov	r18,r4
   482fc:	004dfc80 	call	4dfc8 <__malloc_lock>
   48300:	98ffff17 	ldw	r3,-4(r19)
   48304:	01bfff04 	movi	r6,-4
   48308:	890002c4 	addi	r4,r17,11
   4830c:	01c00584 	movi	r7,22
   48310:	9d7ffe04 	addi	r21,r19,-8
   48314:	19a0703a 	and	r16,r3,r6
   48318:	39003f2e 	bgeu	r7,r4,48418 <_realloc_r+0x158>
   4831c:	053ffe04 	movi	r20,-8
   48320:	2528703a 	and	r20,r4,r20
   48324:	a00f883a 	mov	r7,r20
   48328:	a0008216 	blt	r20,zero,48534 <_realloc_r+0x274>
   4832c:	a4408136 	bltu	r20,r17,48534 <_realloc_r+0x274>
   48330:	81c03c0e 	bge	r16,r7,48424 <_realloc_r+0x164>
   48334:	07000174 	movhi	fp,5
   48338:	e73e5e04 	addi	fp,fp,-1672
   4833c:	e1000217 	ldw	r4,8(fp)
   48340:	ac05883a 	add	r2,r21,r16
   48344:	2080bf26 	beq	r4,r2,48644 <_realloc_r+0x384>
   48348:	11000117 	ldw	r4,4(r2)
   4834c:	023fff84 	movi	r8,-2
   48350:	2210703a 	and	r8,r4,r8
   48354:	1211883a 	add	r8,r2,r8
   48358:	41400117 	ldw	r5,4(r8)
   4835c:	2940004c 	andi	r5,r5,1
   48360:	28004a1e 	bne	r5,zero,4848c <_realloc_r+0x1cc>
   48364:	017fff04 	movi	r5,-4
   48368:	2148703a 	and	r4,r4,r5
   4836c:	2409883a 	add	r4,r4,r16
   48370:	21c0ad0e 	bge	r4,r7,48628 <_realloc_r+0x368>
   48374:	18c0004c 	andi	r3,r3,1
   48378:	18007f1e 	bne	r3,zero,48578 <_realloc_r+0x2b8>
   4837c:	9dfffe17 	ldw	r23,-8(r19)
   48380:	adefc83a 	sub	r23,r21,r23
   48384:	bd800117 	ldw	r22,4(r23)
   48388:	b14a703a 	and	r5,r22,r5
   4838c:	216d883a 	add	r22,r4,r5
   48390:	b1c04516 	blt	r22,r7,484a8 <_realloc_r+0x1e8>
   48394:	10c00317 	ldw	r3,12(r2)
   48398:	10800217 	ldw	r2,8(r2)
   4839c:	81bfff04 	addi	r6,r16,-4
   483a0:	bc400204 	addi	r17,r23,8
   483a4:	10c00315 	stw	r3,12(r2)
   483a8:	18800215 	stw	r2,8(r3)
   483ac:	b9400217 	ldw	r5,8(r23)
   483b0:	b8c00317 	ldw	r3,12(r23)
   483b4:	00800904 	movi	r2,36
   483b8:	28c00315 	stw	r3,12(r5)
   483bc:	19400215 	stw	r5,8(r3)
   483c0:	1180ef36 	bltu	r2,r6,48780 <_realloc_r+0x4c0>
   483c4:	008004c4 	movi	r2,19
   483c8:	1180da2e 	bgeu	r2,r6,48734 <_realloc_r+0x474>
   483cc:	98800017 	ldw	r2,0(r19)
   483d0:	b8800215 	stw	r2,8(r23)
   483d4:	98800117 	ldw	r2,4(r19)
   483d8:	b8800315 	stw	r2,12(r23)
   483dc:	008006c4 	movi	r2,27
   483e0:	1180fc2e 	bgeu	r2,r6,487d4 <_realloc_r+0x514>
   483e4:	98800217 	ldw	r2,8(r19)
   483e8:	b8800415 	stw	r2,16(r23)
   483ec:	98800317 	ldw	r2,12(r19)
   483f0:	b8800515 	stw	r2,20(r23)
   483f4:	00800904 	movi	r2,36
   483f8:	3080421e 	bne	r6,r2,48504 <_realloc_r+0x244>
   483fc:	98800417 	ldw	r2,16(r19)
   48400:	9cc00604 	addi	r19,r19,24
   48404:	b8c00804 	addi	r3,r23,32
   48408:	b8800615 	stw	r2,24(r23)
   4840c:	98bfff17 	ldw	r2,-4(r19)
   48410:	b8800715 	stw	r2,28(r23)
   48414:	00003d06 	br	4850c <_realloc_r+0x24c>
   48418:	01c00404 	movi	r7,16
   4841c:	3829883a 	mov	r20,r7
   48420:	003fc206 	br	4832c <__alt_data_end+0xfffe1e6c>
   48424:	9823883a 	mov	r17,r19
   48428:	850fc83a 	sub	r7,r16,r20
   4842c:	008003c4 	movi	r2,15
   48430:	18c0004c 	andi	r3,r3,1
   48434:	11c04336 	bltu	r2,r7,48544 <_realloc_r+0x284>
   48438:	1c06b03a 	or	r3,r3,r16
   4843c:	a8c00115 	stw	r3,4(r21)
   48440:	ac21883a 	add	r16,r21,r16
   48444:	80c00117 	ldw	r3,4(r16)
   48448:	18c00054 	ori	r3,r3,1
   4844c:	80c00115 	stw	r3,4(r16)
   48450:	9009883a 	mov	r4,r18
   48454:	004dfcc0 	call	4dfcc <__malloc_unlock>
   48458:	8805883a 	mov	r2,r17
   4845c:	dfc00917 	ldw	ra,36(sp)
   48460:	df000817 	ldw	fp,32(sp)
   48464:	ddc00717 	ldw	r23,28(sp)
   48468:	dd800617 	ldw	r22,24(sp)
   4846c:	dd400517 	ldw	r21,20(sp)
   48470:	dd000417 	ldw	r20,16(sp)
   48474:	dcc00317 	ldw	r19,12(sp)
   48478:	dc800217 	ldw	r18,8(sp)
   4847c:	dc400117 	ldw	r17,4(sp)
   48480:	dc000017 	ldw	r16,0(sp)
   48484:	dec00a04 	addi	sp,sp,40
   48488:	f800283a 	ret
   4848c:	18c0004c 	andi	r3,r3,1
   48490:	1800391e 	bne	r3,zero,48578 <_realloc_r+0x2b8>
   48494:	9dfffe17 	ldw	r23,-8(r19)
   48498:	00bfff04 	movi	r2,-4
   4849c:	adefc83a 	sub	r23,r21,r23
   484a0:	b9400117 	ldw	r5,4(r23)
   484a4:	288a703a 	and	r5,r5,r2
   484a8:	2c2d883a 	add	r22,r5,r16
   484ac:	b1c03216 	blt	r22,r7,48578 <_realloc_r+0x2b8>
   484b0:	b8800317 	ldw	r2,12(r23)
   484b4:	b8c00217 	ldw	r3,8(r23)
   484b8:	81bfff04 	addi	r6,r16,-4
   484bc:	01000904 	movi	r4,36
   484c0:	18800315 	stw	r2,12(r3)
   484c4:	10c00215 	stw	r3,8(r2)
   484c8:	bc400204 	addi	r17,r23,8
   484cc:	2180ac36 	bltu	r4,r6,48780 <_realloc_r+0x4c0>
   484d0:	008004c4 	movi	r2,19
   484d4:	1180972e 	bgeu	r2,r6,48734 <_realloc_r+0x474>
   484d8:	98800017 	ldw	r2,0(r19)
   484dc:	b8800215 	stw	r2,8(r23)
   484e0:	98800117 	ldw	r2,4(r19)
   484e4:	b8800315 	stw	r2,12(r23)
   484e8:	008006c4 	movi	r2,27
   484ec:	1180b92e 	bgeu	r2,r6,487d4 <_realloc_r+0x514>
   484f0:	98800217 	ldw	r2,8(r19)
   484f4:	b8800415 	stw	r2,16(r23)
   484f8:	98800317 	ldw	r2,12(r19)
   484fc:	b8800515 	stw	r2,20(r23)
   48500:	313fbe26 	beq	r6,r4,483fc <__alt_data_end+0xfffe1f3c>
   48504:	b8c00604 	addi	r3,r23,24
   48508:	9cc00404 	addi	r19,r19,16
   4850c:	98800017 	ldw	r2,0(r19)
   48510:	b021883a 	mov	r16,r22
   48514:	b82b883a 	mov	r21,r23
   48518:	18800015 	stw	r2,0(r3)
   4851c:	98800117 	ldw	r2,4(r19)
   48520:	18800115 	stw	r2,4(r3)
   48524:	98800217 	ldw	r2,8(r19)
   48528:	18800215 	stw	r2,8(r3)
   4852c:	b8c00117 	ldw	r3,4(r23)
   48530:	003fbd06 	br	48428 <__alt_data_end+0xfffe1f68>
   48534:	00800304 	movi	r2,12
   48538:	90800015 	stw	r2,0(r18)
   4853c:	0005883a 	mov	r2,zero
   48540:	003fc606 	br	4845c <__alt_data_end+0xfffe1f9c>
   48544:	1d06b03a 	or	r3,r3,r20
   48548:	ad0b883a 	add	r5,r21,r20
   4854c:	a8c00115 	stw	r3,4(r21)
   48550:	38800054 	ori	r2,r7,1
   48554:	28800115 	stw	r2,4(r5)
   48558:	29cf883a 	add	r7,r5,r7
   4855c:	38800117 	ldw	r2,4(r7)
   48560:	9009883a 	mov	r4,r18
   48564:	29400204 	addi	r5,r5,8
   48568:	10800054 	ori	r2,r2,1
   4856c:	38800115 	stw	r2,4(r7)
   48570:	0045b200 	call	45b20 <_free_r>
   48574:	003fb606 	br	48450 <__alt_data_end+0xfffe1f90>
   48578:	880b883a 	mov	r5,r17
   4857c:	9009883a 	mov	r4,r18
   48580:	00466bc0 	call	466bc <_malloc_r>
   48584:	1023883a 	mov	r17,r2
   48588:	1000aa26 	beq	r2,zero,48834 <_realloc_r+0x574>
   4858c:	98ffff17 	ldw	r3,-4(r19)
   48590:	113ffe04 	addi	r4,r2,-8
   48594:	00bfff84 	movi	r2,-2
   48598:	1884703a 	and	r2,r3,r2
   4859c:	a885883a 	add	r2,r21,r2
   485a0:	20808626 	beq	r4,r2,487bc <_realloc_r+0x4fc>
   485a4:	81bfff04 	addi	r6,r16,-4
   485a8:	00800904 	movi	r2,36
   485ac:	11807036 	bltu	r2,r6,48770 <_realloc_r+0x4b0>
   485b0:	00c004c4 	movi	r3,19
   485b4:	19805636 	bltu	r3,r6,48710 <_realloc_r+0x450>
   485b8:	8805883a 	mov	r2,r17
   485bc:	9807883a 	mov	r3,r19
   485c0:	19000017 	ldw	r4,0(r3)
   485c4:	11000015 	stw	r4,0(r2)
   485c8:	19000117 	ldw	r4,4(r3)
   485cc:	11000115 	stw	r4,4(r2)
   485d0:	18c00217 	ldw	r3,8(r3)
   485d4:	10c00215 	stw	r3,8(r2)
   485d8:	980b883a 	mov	r5,r19
   485dc:	9009883a 	mov	r4,r18
   485e0:	0045b200 	call	45b20 <_free_r>
   485e4:	9009883a 	mov	r4,r18
   485e8:	004dfcc0 	call	4dfcc <__malloc_unlock>
   485ec:	8805883a 	mov	r2,r17
   485f0:	003f9a06 	br	4845c <__alt_data_end+0xfffe1f9c>
   485f4:	300b883a 	mov	r5,r6
   485f8:	dfc00917 	ldw	ra,36(sp)
   485fc:	df000817 	ldw	fp,32(sp)
   48600:	ddc00717 	ldw	r23,28(sp)
   48604:	dd800617 	ldw	r22,24(sp)
   48608:	dd400517 	ldw	r21,20(sp)
   4860c:	dd000417 	ldw	r20,16(sp)
   48610:	dcc00317 	ldw	r19,12(sp)
   48614:	dc800217 	ldw	r18,8(sp)
   48618:	dc400117 	ldw	r17,4(sp)
   4861c:	dc000017 	ldw	r16,0(sp)
   48620:	dec00a04 	addi	sp,sp,40
   48624:	00466bc1 	jmpi	466bc <_malloc_r>
   48628:	11400317 	ldw	r5,12(r2)
   4862c:	10800217 	ldw	r2,8(r2)
   48630:	9823883a 	mov	r17,r19
   48634:	2021883a 	mov	r16,r4
   48638:	11400315 	stw	r5,12(r2)
   4863c:	28800215 	stw	r2,8(r5)
   48640:	003f7906 	br	48428 <__alt_data_end+0xfffe1f68>
   48644:	21000117 	ldw	r4,4(r4)
   48648:	00bfff04 	movi	r2,-4
   4864c:	a1800404 	addi	r6,r20,16
   48650:	2088703a 	and	r4,r4,r2
   48654:	2409883a 	add	r4,r4,r16
   48658:	2180380e 	bge	r4,r6,4873c <_realloc_r+0x47c>
   4865c:	18c0004c 	andi	r3,r3,1
   48660:	183fc51e 	bne	r3,zero,48578 <__alt_data_end+0xfffe20b8>
   48664:	9dfffe17 	ldw	r23,-8(r19)
   48668:	adefc83a 	sub	r23,r21,r23
   4866c:	b9400117 	ldw	r5,4(r23)
   48670:	288a703a 	and	r5,r5,r2
   48674:	216d883a 	add	r22,r4,r5
   48678:	b1bf8b16 	blt	r22,r6,484a8 <__alt_data_end+0xfffe1fe8>
   4867c:	b8800317 	ldw	r2,12(r23)
   48680:	b8c00217 	ldw	r3,8(r23)
   48684:	81bfff04 	addi	r6,r16,-4
   48688:	01000904 	movi	r4,36
   4868c:	18800315 	stw	r2,12(r3)
   48690:	10c00215 	stw	r3,8(r2)
   48694:	bc400204 	addi	r17,r23,8
   48698:	21805a36 	bltu	r4,r6,48804 <_realloc_r+0x544>
   4869c:	008004c4 	movi	r2,19
   486a0:	1180562e 	bgeu	r2,r6,487fc <_realloc_r+0x53c>
   486a4:	98800017 	ldw	r2,0(r19)
   486a8:	b8800215 	stw	r2,8(r23)
   486ac:	98800117 	ldw	r2,4(r19)
   486b0:	b8800315 	stw	r2,12(r23)
   486b4:	008006c4 	movi	r2,27
   486b8:	11805636 	bltu	r2,r6,48814 <_realloc_r+0x554>
   486bc:	b8800404 	addi	r2,r23,16
   486c0:	9cc00204 	addi	r19,r19,8
   486c4:	98c00017 	ldw	r3,0(r19)
   486c8:	10c00015 	stw	r3,0(r2)
   486cc:	98c00117 	ldw	r3,4(r19)
   486d0:	10c00115 	stw	r3,4(r2)
   486d4:	98c00217 	ldw	r3,8(r19)
   486d8:	10c00215 	stw	r3,8(r2)
   486dc:	bd07883a 	add	r3,r23,r20
   486e0:	b505c83a 	sub	r2,r22,r20
   486e4:	e0c00215 	stw	r3,8(fp)
   486e8:	10800054 	ori	r2,r2,1
   486ec:	18800115 	stw	r2,4(r3)
   486f0:	b8800117 	ldw	r2,4(r23)
   486f4:	9009883a 	mov	r4,r18
   486f8:	1080004c 	andi	r2,r2,1
   486fc:	a0a8b03a 	or	r20,r20,r2
   48700:	bd000115 	stw	r20,4(r23)
   48704:	004dfcc0 	call	4dfcc <__malloc_unlock>
   48708:	8805883a 	mov	r2,r17
   4870c:	003f5306 	br	4845c <__alt_data_end+0xfffe1f9c>
   48710:	98c00017 	ldw	r3,0(r19)
   48714:	88c00015 	stw	r3,0(r17)
   48718:	98c00117 	ldw	r3,4(r19)
   4871c:	88c00115 	stw	r3,4(r17)
   48720:	00c006c4 	movi	r3,27
   48724:	19801d36 	bltu	r3,r6,4879c <_realloc_r+0x4dc>
   48728:	88800204 	addi	r2,r17,8
   4872c:	98c00204 	addi	r3,r19,8
   48730:	003fa306 	br	485c0 <__alt_data_end+0xfffe2100>
   48734:	8807883a 	mov	r3,r17
   48738:	003f7406 	br	4850c <__alt_data_end+0xfffe204c>
   4873c:	ad2b883a 	add	r21,r21,r20
   48740:	2505c83a 	sub	r2,r4,r20
   48744:	e5400215 	stw	r21,8(fp)
   48748:	10800054 	ori	r2,r2,1
   4874c:	a8800115 	stw	r2,4(r21)
   48750:	98bfff17 	ldw	r2,-4(r19)
   48754:	9009883a 	mov	r4,r18
   48758:	1080004c 	andi	r2,r2,1
   4875c:	a0a8b03a 	or	r20,r20,r2
   48760:	9d3fff15 	stw	r20,-4(r19)
   48764:	004dfcc0 	call	4dfcc <__malloc_unlock>
   48768:	9805883a 	mov	r2,r19
   4876c:	003f3b06 	br	4845c <__alt_data_end+0xfffe1f9c>
   48770:	8809883a 	mov	r4,r17
   48774:	980b883a 	mov	r5,r19
   48778:	0046f4c0 	call	46f4c <memmove>
   4877c:	003f9606 	br	485d8 <__alt_data_end+0xfffe2118>
   48780:	8809883a 	mov	r4,r17
   48784:	980b883a 	mov	r5,r19
   48788:	0046f4c0 	call	46f4c <memmove>
   4878c:	b8c00117 	ldw	r3,4(r23)
   48790:	b021883a 	mov	r16,r22
   48794:	b82b883a 	mov	r21,r23
   48798:	003f2306 	br	48428 <__alt_data_end+0xfffe1f68>
   4879c:	98c00217 	ldw	r3,8(r19)
   487a0:	88c00215 	stw	r3,8(r17)
   487a4:	98c00317 	ldw	r3,12(r19)
   487a8:	88c00315 	stw	r3,12(r17)
   487ac:	30800c26 	beq	r6,r2,487e0 <_realloc_r+0x520>
   487b0:	88800404 	addi	r2,r17,16
   487b4:	98c00404 	addi	r3,r19,16
   487b8:	003f8106 	br	485c0 <__alt_data_end+0xfffe2100>
   487bc:	893fff17 	ldw	r4,-4(r17)
   487c0:	00bfff04 	movi	r2,-4
   487c4:	9823883a 	mov	r17,r19
   487c8:	2084703a 	and	r2,r4,r2
   487cc:	80a1883a 	add	r16,r16,r2
   487d0:	003f1506 	br	48428 <__alt_data_end+0xfffe1f68>
   487d4:	b8c00404 	addi	r3,r23,16
   487d8:	9cc00204 	addi	r19,r19,8
   487dc:	003f4b06 	br	4850c <__alt_data_end+0xfffe204c>
   487e0:	99000417 	ldw	r4,16(r19)
   487e4:	88800604 	addi	r2,r17,24
   487e8:	98c00604 	addi	r3,r19,24
   487ec:	89000415 	stw	r4,16(r17)
   487f0:	99000517 	ldw	r4,20(r19)
   487f4:	89000515 	stw	r4,20(r17)
   487f8:	003f7106 	br	485c0 <__alt_data_end+0xfffe2100>
   487fc:	8805883a 	mov	r2,r17
   48800:	003fb006 	br	486c4 <__alt_data_end+0xfffe2204>
   48804:	8809883a 	mov	r4,r17
   48808:	980b883a 	mov	r5,r19
   4880c:	0046f4c0 	call	46f4c <memmove>
   48810:	003fb206 	br	486dc <__alt_data_end+0xfffe221c>
   48814:	98800217 	ldw	r2,8(r19)
   48818:	b8800415 	stw	r2,16(r23)
   4881c:	98800317 	ldw	r2,12(r19)
   48820:	b8800515 	stw	r2,20(r23)
   48824:	31000726 	beq	r6,r4,48844 <_realloc_r+0x584>
   48828:	b8800604 	addi	r2,r23,24
   4882c:	9cc00404 	addi	r19,r19,16
   48830:	003fa406 	br	486c4 <__alt_data_end+0xfffe2204>
   48834:	9009883a 	mov	r4,r18
   48838:	004dfcc0 	call	4dfcc <__malloc_unlock>
   4883c:	0005883a 	mov	r2,zero
   48840:	003f0606 	br	4845c <__alt_data_end+0xfffe1f9c>
   48844:	98c00417 	ldw	r3,16(r19)
   48848:	9cc00604 	addi	r19,r19,24
   4884c:	b8800804 	addi	r2,r23,32
   48850:	b8c00615 	stw	r3,24(r23)
   48854:	98ffff17 	ldw	r3,-4(r19)
   48858:	b8c00715 	stw	r3,28(r23)
   4885c:	003f9906 	br	486c4 <__alt_data_end+0xfffe2204>

00048860 <__fpclassifyd>:
   48860:	00a00034 	movhi	r2,32768
   48864:	10bfffc4 	addi	r2,r2,-1
   48868:	2884703a 	and	r2,r5,r2
   4886c:	10000726 	beq	r2,zero,4888c <__fpclassifyd+0x2c>
   48870:	00fffc34 	movhi	r3,65520
   48874:	019ff834 	movhi	r6,32736
   48878:	28c7883a 	add	r3,r5,r3
   4887c:	31bfffc4 	addi	r6,r6,-1
   48880:	30c00536 	bltu	r6,r3,48898 <__fpclassifyd+0x38>
   48884:	00800104 	movi	r2,4
   48888:	f800283a 	ret
   4888c:	2000021e 	bne	r4,zero,48898 <__fpclassifyd+0x38>
   48890:	00800084 	movi	r2,2
   48894:	f800283a 	ret
   48898:	00dffc34 	movhi	r3,32752
   4889c:	019ff834 	movhi	r6,32736
   488a0:	28cb883a 	add	r5,r5,r3
   488a4:	31bfffc4 	addi	r6,r6,-1
   488a8:	317ff62e 	bgeu	r6,r5,48884 <__alt_data_end+0xfffe23c4>
   488ac:	01400434 	movhi	r5,16
   488b0:	297fffc4 	addi	r5,r5,-1
   488b4:	28800236 	bltu	r5,r2,488c0 <__fpclassifyd+0x60>
   488b8:	008000c4 	movi	r2,3
   488bc:	f800283a 	ret
   488c0:	10c00226 	beq	r2,r3,488cc <__fpclassifyd+0x6c>
   488c4:	0005883a 	mov	r2,zero
   488c8:	f800283a 	ret
   488cc:	2005003a 	cmpeq	r2,r4,zero
   488d0:	f800283a 	ret

000488d4 <_sbrk_r>:
   488d4:	defffd04 	addi	sp,sp,-12
   488d8:	dc000015 	stw	r16,0(sp)
   488dc:	04000174 	movhi	r16,5
   488e0:	dc400115 	stw	r17,4(sp)
   488e4:	84029a04 	addi	r16,r16,2664
   488e8:	2023883a 	mov	r17,r4
   488ec:	2809883a 	mov	r4,r5
   488f0:	dfc00215 	stw	ra,8(sp)
   488f4:	80000015 	stw	zero,0(r16)
   488f8:	004e26c0 	call	4e26c <sbrk>
   488fc:	00ffffc4 	movi	r3,-1
   48900:	10c00526 	beq	r2,r3,48918 <_sbrk_r+0x44>
   48904:	dfc00217 	ldw	ra,8(sp)
   48908:	dc400117 	ldw	r17,4(sp)
   4890c:	dc000017 	ldw	r16,0(sp)
   48910:	dec00304 	addi	sp,sp,12
   48914:	f800283a 	ret
   48918:	80c00017 	ldw	r3,0(r16)
   4891c:	183ff926 	beq	r3,zero,48904 <__alt_data_end+0xfffe2444>
   48920:	88c00015 	stw	r3,0(r17)
   48924:	003ff706 	br	48904 <__alt_data_end+0xfffe2444>

00048928 <__sread>:
   48928:	defffe04 	addi	sp,sp,-8
   4892c:	dc000015 	stw	r16,0(sp)
   48930:	2821883a 	mov	r16,r5
   48934:	2940038f 	ldh	r5,14(r5)
   48938:	dfc00115 	stw	ra,4(sp)
   4893c:	004a6780 	call	4a678 <_read_r>
   48940:	10000716 	blt	r2,zero,48960 <__sread+0x38>
   48944:	80c01417 	ldw	r3,80(r16)
   48948:	1887883a 	add	r3,r3,r2
   4894c:	80c01415 	stw	r3,80(r16)
   48950:	dfc00117 	ldw	ra,4(sp)
   48954:	dc000017 	ldw	r16,0(sp)
   48958:	dec00204 	addi	sp,sp,8
   4895c:	f800283a 	ret
   48960:	80c0030b 	ldhu	r3,12(r16)
   48964:	18fbffcc 	andi	r3,r3,61439
   48968:	80c0030d 	sth	r3,12(r16)
   4896c:	dfc00117 	ldw	ra,4(sp)
   48970:	dc000017 	ldw	r16,0(sp)
   48974:	dec00204 	addi	sp,sp,8
   48978:	f800283a 	ret

0004897c <__seofread>:
   4897c:	0005883a 	mov	r2,zero
   48980:	f800283a 	ret

00048984 <__swrite>:
   48984:	2880030b 	ldhu	r2,12(r5)
   48988:	defffb04 	addi	sp,sp,-20
   4898c:	dcc00315 	stw	r19,12(sp)
   48990:	dc800215 	stw	r18,8(sp)
   48994:	dc400115 	stw	r17,4(sp)
   48998:	dc000015 	stw	r16,0(sp)
   4899c:	dfc00415 	stw	ra,16(sp)
   489a0:	10c0400c 	andi	r3,r2,256
   489a4:	2821883a 	mov	r16,r5
   489a8:	2027883a 	mov	r19,r4
   489ac:	3025883a 	mov	r18,r6
   489b0:	3823883a 	mov	r17,r7
   489b4:	18000526 	beq	r3,zero,489cc <__swrite+0x48>
   489b8:	2940038f 	ldh	r5,14(r5)
   489bc:	000d883a 	mov	r6,zero
   489c0:	01c00084 	movi	r7,2
   489c4:	004a61c0 	call	4a61c <_lseek_r>
   489c8:	8080030b 	ldhu	r2,12(r16)
   489cc:	8140038f 	ldh	r5,14(r16)
   489d0:	10bbffcc 	andi	r2,r2,61439
   489d4:	9809883a 	mov	r4,r19
   489d8:	900d883a 	mov	r6,r18
   489dc:	880f883a 	mov	r7,r17
   489e0:	8080030d 	sth	r2,12(r16)
   489e4:	dfc00417 	ldw	ra,16(sp)
   489e8:	dcc00317 	ldw	r19,12(sp)
   489ec:	dc800217 	ldw	r18,8(sp)
   489f0:	dc400117 	ldw	r17,4(sp)
   489f4:	dc000017 	ldw	r16,0(sp)
   489f8:	dec00504 	addi	sp,sp,20
   489fc:	004a10c1 	jmpi	4a10c <_write_r>

00048a00 <__sseek>:
   48a00:	defffe04 	addi	sp,sp,-8
   48a04:	dc000015 	stw	r16,0(sp)
   48a08:	2821883a 	mov	r16,r5
   48a0c:	2940038f 	ldh	r5,14(r5)
   48a10:	dfc00115 	stw	ra,4(sp)
   48a14:	004a61c0 	call	4a61c <_lseek_r>
   48a18:	00ffffc4 	movi	r3,-1
   48a1c:	10c00826 	beq	r2,r3,48a40 <__sseek+0x40>
   48a20:	80c0030b 	ldhu	r3,12(r16)
   48a24:	80801415 	stw	r2,80(r16)
   48a28:	18c40014 	ori	r3,r3,4096
   48a2c:	80c0030d 	sth	r3,12(r16)
   48a30:	dfc00117 	ldw	ra,4(sp)
   48a34:	dc000017 	ldw	r16,0(sp)
   48a38:	dec00204 	addi	sp,sp,8
   48a3c:	f800283a 	ret
   48a40:	80c0030b 	ldhu	r3,12(r16)
   48a44:	18fbffcc 	andi	r3,r3,61439
   48a48:	80c0030d 	sth	r3,12(r16)
   48a4c:	dfc00117 	ldw	ra,4(sp)
   48a50:	dc000017 	ldw	r16,0(sp)
   48a54:	dec00204 	addi	sp,sp,8
   48a58:	f800283a 	ret

00048a5c <__sclose>:
   48a5c:	2940038f 	ldh	r5,14(r5)
   48a60:	004a1681 	jmpi	4a168 <_close_r>

00048a64 <strcmp>:
   48a64:	2144b03a 	or	r2,r4,r5
   48a68:	108000cc 	andi	r2,r2,3
   48a6c:	1000171e 	bne	r2,zero,48acc <strcmp+0x68>
   48a70:	20800017 	ldw	r2,0(r4)
   48a74:	28c00017 	ldw	r3,0(r5)
   48a78:	10c0141e 	bne	r2,r3,48acc <strcmp+0x68>
   48a7c:	027fbff4 	movhi	r9,65279
   48a80:	4a7fbfc4 	addi	r9,r9,-257
   48a84:	0086303a 	nor	r3,zero,r2
   48a88:	02202074 	movhi	r8,32897
   48a8c:	1245883a 	add	r2,r2,r9
   48a90:	42202004 	addi	r8,r8,-32640
   48a94:	10c4703a 	and	r2,r2,r3
   48a98:	1204703a 	and	r2,r2,r8
   48a9c:	10000226 	beq	r2,zero,48aa8 <strcmp+0x44>
   48aa0:	00001706 	br	48b00 <strcmp+0x9c>
   48aa4:	1000161e 	bne	r2,zero,48b00 <strcmp+0x9c>
   48aa8:	21000104 	addi	r4,r4,4
   48aac:	20c00017 	ldw	r3,0(r4)
   48ab0:	29400104 	addi	r5,r5,4
   48ab4:	29800017 	ldw	r6,0(r5)
   48ab8:	1a4f883a 	add	r7,r3,r9
   48abc:	00c4303a 	nor	r2,zero,r3
   48ac0:	3884703a 	and	r2,r7,r2
   48ac4:	1204703a 	and	r2,r2,r8
   48ac8:	19bff626 	beq	r3,r6,48aa4 <__alt_data_end+0xfffe25e4>
   48acc:	20800007 	ldb	r2,0(r4)
   48ad0:	1000051e 	bne	r2,zero,48ae8 <strcmp+0x84>
   48ad4:	00000606 	br	48af0 <strcmp+0x8c>
   48ad8:	21000044 	addi	r4,r4,1
   48adc:	20800007 	ldb	r2,0(r4)
   48ae0:	29400044 	addi	r5,r5,1
   48ae4:	10000226 	beq	r2,zero,48af0 <strcmp+0x8c>
   48ae8:	28c00007 	ldb	r3,0(r5)
   48aec:	10fffa26 	beq	r2,r3,48ad8 <__alt_data_end+0xfffe2618>
   48af0:	20800003 	ldbu	r2,0(r4)
   48af4:	28c00003 	ldbu	r3,0(r5)
   48af8:	10c5c83a 	sub	r2,r2,r3
   48afc:	f800283a 	ret
   48b00:	0005883a 	mov	r2,zero
   48b04:	f800283a 	ret

00048b08 <__sprint_r.part.0>:
   48b08:	28801917 	ldw	r2,100(r5)
   48b0c:	defff604 	addi	sp,sp,-40
   48b10:	dd400515 	stw	r21,20(sp)
   48b14:	dcc00315 	stw	r19,12(sp)
   48b18:	dfc00915 	stw	ra,36(sp)
   48b1c:	df000815 	stw	fp,32(sp)
   48b20:	ddc00715 	stw	r23,28(sp)
   48b24:	dd800615 	stw	r22,24(sp)
   48b28:	dd000415 	stw	r20,16(sp)
   48b2c:	dc800215 	stw	r18,8(sp)
   48b30:	dc400115 	stw	r17,4(sp)
   48b34:	dc000015 	stw	r16,0(sp)
   48b38:	1088000c 	andi	r2,r2,8192
   48b3c:	2827883a 	mov	r19,r5
   48b40:	302b883a 	mov	r21,r6
   48b44:	10002d26 	beq	r2,zero,48bfc <__sprint_r.part.0+0xf4>
   48b48:	30800217 	ldw	r2,8(r6)
   48b4c:	35800017 	ldw	r22,0(r6)
   48b50:	10002826 	beq	r2,zero,48bf4 <__sprint_r.part.0+0xec>
   48b54:	2029883a 	mov	r20,r4
   48b58:	b5c00104 	addi	r23,r22,4
   48b5c:	04bfffc4 	movi	r18,-1
   48b60:	bc400017 	ldw	r17,0(r23)
   48b64:	b4000017 	ldw	r16,0(r22)
   48b68:	0039883a 	mov	fp,zero
   48b6c:	8822d0ba 	srli	r17,r17,2
   48b70:	04400316 	blt	zero,r17,48b80 <__sprint_r.part.0+0x78>
   48b74:	00001706 	br	48bd4 <__sprint_r.part.0+0xcc>
   48b78:	84000104 	addi	r16,r16,4
   48b7c:	8f001526 	beq	r17,fp,48bd4 <__sprint_r.part.0+0xcc>
   48b80:	81400017 	ldw	r5,0(r16)
   48b84:	a009883a 	mov	r4,r20
   48b88:	980d883a 	mov	r6,r19
   48b8c:	004a3940 	call	4a394 <_fputwc_r>
   48b90:	e7000044 	addi	fp,fp,1
   48b94:	14bff81e 	bne	r2,r18,48b78 <__alt_data_end+0xfffe26b8>
   48b98:	9005883a 	mov	r2,r18
   48b9c:	a8000215 	stw	zero,8(r21)
   48ba0:	a8000115 	stw	zero,4(r21)
   48ba4:	dfc00917 	ldw	ra,36(sp)
   48ba8:	df000817 	ldw	fp,32(sp)
   48bac:	ddc00717 	ldw	r23,28(sp)
   48bb0:	dd800617 	ldw	r22,24(sp)
   48bb4:	dd400517 	ldw	r21,20(sp)
   48bb8:	dd000417 	ldw	r20,16(sp)
   48bbc:	dcc00317 	ldw	r19,12(sp)
   48bc0:	dc800217 	ldw	r18,8(sp)
   48bc4:	dc400117 	ldw	r17,4(sp)
   48bc8:	dc000017 	ldw	r16,0(sp)
   48bcc:	dec00a04 	addi	sp,sp,40
   48bd0:	f800283a 	ret
   48bd4:	a8c00217 	ldw	r3,8(r21)
   48bd8:	8c63883a 	add	r17,r17,r17
   48bdc:	8c63883a 	add	r17,r17,r17
   48be0:	1c45c83a 	sub	r2,r3,r17
   48be4:	a8800215 	stw	r2,8(r21)
   48be8:	b5800204 	addi	r22,r22,8
   48bec:	bdc00204 	addi	r23,r23,8
   48bf0:	103fdb1e 	bne	r2,zero,48b60 <__alt_data_end+0xfffe26a0>
   48bf4:	0005883a 	mov	r2,zero
   48bf8:	003fe806 	br	48b9c <__alt_data_end+0xfffe26dc>
   48bfc:	0045e100 	call	45e10 <__sfvwrite_r>
   48c00:	003fe606 	br	48b9c <__alt_data_end+0xfffe26dc>

00048c04 <__sprint_r>:
   48c04:	30c00217 	ldw	r3,8(r6)
   48c08:	18000126 	beq	r3,zero,48c10 <__sprint_r+0xc>
   48c0c:	0048b081 	jmpi	48b08 <__sprint_r.part.0>
   48c10:	30000115 	stw	zero,4(r6)
   48c14:	0005883a 	mov	r2,zero
   48c18:	f800283a 	ret

00048c1c <___vfiprintf_internal_r>:
   48c1c:	defeca04 	addi	sp,sp,-1240
   48c20:	dd813215 	stw	r22,1224(sp)
   48c24:	dd013015 	stw	r20,1216(sp)
   48c28:	dfc13515 	stw	ra,1236(sp)
   48c2c:	df013415 	stw	fp,1232(sp)
   48c30:	ddc13315 	stw	r23,1228(sp)
   48c34:	dd413115 	stw	r21,1220(sp)
   48c38:	dcc12f15 	stw	r19,1212(sp)
   48c3c:	dc812e15 	stw	r18,1208(sp)
   48c40:	dc412d15 	stw	r17,1204(sp)
   48c44:	dc012c15 	stw	r16,1200(sp)
   48c48:	d9012015 	stw	r4,1152(sp)
   48c4c:	d9c12115 	stw	r7,1156(sp)
   48c50:	2829883a 	mov	r20,r5
   48c54:	302d883a 	mov	r22,r6
   48c58:	20000226 	beq	r4,zero,48c64 <___vfiprintf_internal_r+0x48>
   48c5c:	20800e17 	ldw	r2,56(r4)
   48c60:	1001d326 	beq	r2,zero,493b0 <___vfiprintf_internal_r+0x794>
   48c64:	a0c0030b 	ldhu	r3,12(r20)
   48c68:	1908000c 	andi	r4,r3,8192
   48c6c:	1805883a 	mov	r2,r3
   48c70:	2000071e 	bne	r4,zero,48c90 <___vfiprintf_internal_r+0x74>
   48c74:	a1001917 	ldw	r4,100(r20)
   48c78:	18880014 	ori	r2,r3,8192
   48c7c:	00f7ffc4 	movi	r3,-8193
   48c80:	20c8703a 	and	r4,r4,r3
   48c84:	a080030d 	sth	r2,12(r20)
   48c88:	1007883a 	mov	r3,r2
   48c8c:	a1001915 	stw	r4,100(r20)
   48c90:	1100020c 	andi	r4,r2,8
   48c94:	20018926 	beq	r4,zero,492bc <___vfiprintf_internal_r+0x6a0>
   48c98:	a1000417 	ldw	r4,16(r20)
   48c9c:	20018726 	beq	r4,zero,492bc <___vfiprintf_internal_r+0x6a0>
   48ca0:	1080068c 	andi	r2,r2,26
   48ca4:	01000284 	movi	r4,10
   48ca8:	11018d26 	beq	r2,r4,492e0 <___vfiprintf_internal_r+0x6c4>
   48cac:	da810a04 	addi	r10,sp,1064
   48cb0:	dac109c4 	addi	r11,sp,1063
   48cb4:	07000174 	movhi	fp,5
   48cb8:	05c00174 	movhi	r23,5
   48cbc:	da811e15 	stw	r10,1144(sp)
   48cc0:	52d5c83a 	sub	r10,r10,r11
   48cc4:	e73cec04 	addi	fp,fp,-3152
   48cc8:	bdfce804 	addi	r23,r23,-3168
   48ccc:	dac11f15 	stw	r11,1148(sp)
   48cd0:	dec11a15 	stw	sp,1128(sp)
   48cd4:	d8011c15 	stw	zero,1136(sp)
   48cd8:	d8011b15 	stw	zero,1132(sp)
   48cdc:	d8012615 	stw	zero,1176(sp)
   48ce0:	d8012215 	stw	zero,1160(sp)
   48ce4:	da812715 	stw	r10,1180(sp)
   48ce8:	d811883a 	mov	r8,sp
   48cec:	b021883a 	mov	r16,r22
   48cf0:	80800007 	ldb	r2,0(r16)
   48cf4:	10039c26 	beq	r2,zero,49b68 <___vfiprintf_internal_r+0xf4c>
   48cf8:	01000944 	movi	r4,37
   48cfc:	11039a26 	beq	r2,r4,49b68 <___vfiprintf_internal_r+0xf4c>
   48d00:	8005883a 	mov	r2,r16
   48d04:	00000106 	br	48d0c <___vfiprintf_internal_r+0xf0>
   48d08:	19000326 	beq	r3,r4,48d18 <___vfiprintf_internal_r+0xfc>
   48d0c:	10800044 	addi	r2,r2,1
   48d10:	10c00007 	ldb	r3,0(r2)
   48d14:	183ffc1e 	bne	r3,zero,48d08 <__alt_data_end+0xfffe2848>
   48d18:	1425c83a 	sub	r18,r2,r16
   48d1c:	1023883a 	mov	r17,r2
   48d20:	90001026 	beq	r18,zero,48d64 <___vfiprintf_internal_r+0x148>
   48d24:	d8c11c17 	ldw	r3,1136(sp)
   48d28:	d8811b17 	ldw	r2,1132(sp)
   48d2c:	44000015 	stw	r16,0(r8)
   48d30:	90c7883a 	add	r3,r18,r3
   48d34:	10800044 	addi	r2,r2,1
   48d38:	44800115 	stw	r18,4(r8)
   48d3c:	d8c11c15 	stw	r3,1136(sp)
   48d40:	d8811b15 	stw	r2,1132(sp)
   48d44:	010001c4 	movi	r4,7
   48d48:	2080750e 	bge	r4,r2,48f20 <___vfiprintf_internal_r+0x304>
   48d4c:	18039d1e 	bne	r3,zero,49bc4 <___vfiprintf_internal_r+0xfa8>
   48d50:	dac12217 	ldw	r11,1160(sp)
   48d54:	d8011b15 	stw	zero,1132(sp)
   48d58:	d811883a 	mov	r8,sp
   48d5c:	5c97883a 	add	r11,r11,r18
   48d60:	dac12215 	stw	r11,1160(sp)
   48d64:	88800007 	ldb	r2,0(r17)
   48d68:	1002e026 	beq	r2,zero,498ec <___vfiprintf_internal_r+0xcd0>
   48d6c:	88c00047 	ldb	r3,1(r17)
   48d70:	8c000044 	addi	r16,r17,1
   48d74:	d8011d85 	stb	zero,1142(sp)
   48d78:	000d883a 	mov	r6,zero
   48d7c:	027fffc4 	movi	r9,-1
   48d80:	0027883a 	mov	r19,zero
   48d84:	002b883a 	mov	r21,zero
   48d88:	01001604 	movi	r4,88
   48d8c:	01400244 	movi	r5,9
   48d90:	03000a84 	movi	r12,42
   48d94:	01c01b04 	movi	r7,108
   48d98:	84000044 	addi	r16,r16,1
   48d9c:	18bff804 	addi	r2,r3,-32
   48da0:	20825f36 	bltu	r4,r2,49720 <___vfiprintf_internal_r+0xb04>
   48da4:	100490ba 	slli	r2,r2,2
   48da8:	02800174 	movhi	r10,5
   48dac:	52a36f04 	addi	r10,r10,-29252
   48db0:	1285883a 	add	r2,r2,r10
   48db4:	10800017 	ldw	r2,0(r2)
   48db8:	1000683a 	jmp	r2
   48dbc:	00049590 	cmplti	zero,zero,4694
   48dc0:	00049720 	cmpeqi	zero,zero,4700
   48dc4:	00049720 	cmpeqi	zero,zero,4700
   48dc8:	00049714 	movui	zero,4700
   48dcc:	00049720 	cmpeqi	zero,zero,4700
   48dd0:	00049720 	cmpeqi	zero,zero,4700
   48dd4:	00049720 	cmpeqi	zero,zero,4700
   48dd8:	00049720 	cmpeqi	zero,zero,4700
   48ddc:	00049720 	cmpeqi	zero,zero,4700
   48de0:	00049720 	cmpeqi	zero,zero,4700
   48de4:	000496ec 	andhi	zero,zero,4699
   48de8:	00049708 	cmpgei	zero,zero,4700
   48dec:	00049720 	cmpeqi	zero,zero,4700
   48df0:	000493c0 	call	493c <__reset-0x3b6c4>
   48df4:	00049520 	cmpeqi	zero,zero,4692
   48df8:	00049720 	cmpeqi	zero,zero,4700
   48dfc:	000494a4 	muli	zero,zero,4690
   48e00:	000494b0 	cmpltui	zero,zero,4690
   48e04:	000494b0 	cmpltui	zero,zero,4690
   48e08:	000494b0 	cmpltui	zero,zero,4690
   48e0c:	000494b0 	cmpltui	zero,zero,4690
   48e10:	000494b0 	cmpltui	zero,zero,4690
   48e14:	000494b0 	cmpltui	zero,zero,4690
   48e18:	000494b0 	cmpltui	zero,zero,4690
   48e1c:	000494b0 	cmpltui	zero,zero,4690
   48e20:	000494b0 	cmpltui	zero,zero,4690
   48e24:	00049720 	cmpeqi	zero,zero,4700
   48e28:	00049720 	cmpeqi	zero,zero,4700
   48e2c:	00049720 	cmpeqi	zero,zero,4700
   48e30:	00049720 	cmpeqi	zero,zero,4700
   48e34:	00049720 	cmpeqi	zero,zero,4700
   48e38:	00049720 	cmpeqi	zero,zero,4700
   48e3c:	00049720 	cmpeqi	zero,zero,4700
   48e40:	00049720 	cmpeqi	zero,zero,4700
   48e44:	00049720 	cmpeqi	zero,zero,4700
   48e48:	00049720 	cmpeqi	zero,zero,4700
   48e4c:	000494dc 	xori	zero,zero,4691
   48e50:	00049720 	cmpeqi	zero,zero,4700
   48e54:	00049720 	cmpeqi	zero,zero,4700
   48e58:	00049720 	cmpeqi	zero,zero,4700
   48e5c:	00049720 	cmpeqi	zero,zero,4700
   48e60:	00049720 	cmpeqi	zero,zero,4700
   48e64:	00049720 	cmpeqi	zero,zero,4700
   48e68:	00049720 	cmpeqi	zero,zero,4700
   48e6c:	00049720 	cmpeqi	zero,zero,4700
   48e70:	00049720 	cmpeqi	zero,zero,4700
   48e74:	00049720 	cmpeqi	zero,zero,4700
   48e78:	00048f70 	cmpltui	zero,zero,4669
   48e7c:	00049720 	cmpeqi	zero,zero,4700
   48e80:	00049720 	cmpeqi	zero,zero,4700
   48e84:	00049720 	cmpeqi	zero,zero,4700
   48e88:	00049720 	cmpeqi	zero,zero,4700
   48e8c:	00049720 	cmpeqi	zero,zero,4700
   48e90:	00048f34 	movhi	zero,4668
   48e94:	00049720 	cmpeqi	zero,zero,4700
   48e98:	00049720 	cmpeqi	zero,zero,4700
   48e9c:	0004941c 	xori	zero,zero,4688
   48ea0:	00049720 	cmpeqi	zero,zero,4700
   48ea4:	00049720 	cmpeqi	zero,zero,4700
   48ea8:	00049720 	cmpeqi	zero,zero,4700
   48eac:	00049720 	cmpeqi	zero,zero,4700
   48eb0:	00049720 	cmpeqi	zero,zero,4700
   48eb4:	00049720 	cmpeqi	zero,zero,4700
   48eb8:	00049720 	cmpeqi	zero,zero,4700
   48ebc:	00049720 	cmpeqi	zero,zero,4700
   48ec0:	00049720 	cmpeqi	zero,zero,4700
   48ec4:	00049720 	cmpeqi	zero,zero,4700
   48ec8:	00049474 	movhi	zero,4689
   48ecc:	0004960c 	andi	zero,zero,4696
   48ed0:	00049720 	cmpeqi	zero,zero,4700
   48ed4:	00049720 	cmpeqi	zero,zero,4700
   48ed8:	00049720 	cmpeqi	zero,zero,4700
   48edc:	00049694 	movui	zero,4698
   48ee0:	0004960c 	andi	zero,zero,4696
   48ee4:	00049720 	cmpeqi	zero,zero,4700
   48ee8:	00049720 	cmpeqi	zero,zero,4700
   48eec:	000496a0 	cmpeqi	zero,zero,4698
   48ef0:	00049720 	cmpeqi	zero,zero,4700
   48ef4:	00049560 	cmpeqi	zero,zero,4693
   48ef8:	00048f74 	movhi	zero,4669
   48efc:	00049648 	cmpgei	zero,zero,4697
   48f00:	00049688 	cmpgei	zero,zero,4698
   48f04:	00049720 	cmpeqi	zero,zero,4700
   48f08:	000495ac 	andhi	zero,zero,4694
   48f0c:	00049720 	cmpeqi	zero,zero,4700
   48f10:	00048f38 	rdprs	zero,zero,4668
   48f14:	00049720 	cmpeqi	zero,zero,4700
   48f18:	00049720 	cmpeqi	zero,zero,4700
   48f1c:	000496b0 	cmpltui	zero,zero,4698
   48f20:	42000204 	addi	r8,r8,8
   48f24:	dac12217 	ldw	r11,1160(sp)
   48f28:	5c97883a 	add	r11,r11,r18
   48f2c:	dac12215 	stw	r11,1160(sp)
   48f30:	003f8c06 	br	48d64 <__alt_data_end+0xfffe28a4>
   48f34:	ad400414 	ori	r21,r21,16
   48f38:	a880080c 	andi	r2,r21,32
   48f3c:	10012f1e 	bne	r2,zero,493fc <___vfiprintf_internal_r+0x7e0>
   48f40:	a880040c 	andi	r2,r21,16
   48f44:	1001ff1e 	bne	r2,zero,49744 <___vfiprintf_internal_r+0xb28>
   48f48:	a880100c 	andi	r2,r21,64
   48f4c:	1001fd26 	beq	r2,zero,49744 <___vfiprintf_internal_r+0xb28>
   48f50:	da812117 	ldw	r10,1156(sp)
   48f54:	002d883a 	mov	r22,zero
   48f58:	00800044 	movi	r2,1
   48f5c:	5480000b 	ldhu	r18,0(r10)
   48f60:	52800104 	addi	r10,r10,4
   48f64:	da812115 	stw	r10,1156(sp)
   48f68:	9009883a 	mov	r4,r18
   48f6c:	00000a06 	br	48f98 <___vfiprintf_internal_r+0x37c>
   48f70:	ad400414 	ori	r21,r21,16
   48f74:	a880080c 	andi	r2,r21,32
   48f78:	10011426 	beq	r2,zero,493cc <___vfiprintf_internal_r+0x7b0>
   48f7c:	da812117 	ldw	r10,1156(sp)
   48f80:	0005883a 	mov	r2,zero
   48f84:	54800017 	ldw	r18,0(r10)
   48f88:	55800117 	ldw	r22,4(r10)
   48f8c:	52800204 	addi	r10,r10,8
   48f90:	da812115 	stw	r10,1156(sp)
   48f94:	9588b03a 	or	r4,r18,r22
   48f98:	d8011d85 	stb	zero,1142(sp)
   48f9c:	4823883a 	mov	r17,r9
   48fa0:	0019883a 	mov	r12,zero
   48fa4:	48000216 	blt	r9,zero,48fb0 <___vfiprintf_internal_r+0x394>
   48fa8:	00ffdfc4 	movi	r3,-129
   48fac:	a8ea703a 	and	r21,r21,r3
   48fb0:	2002221e 	bne	r4,zero,4983c <___vfiprintf_internal_r+0xc20>
   48fb4:	4802c726 	beq	r9,zero,49ad4 <___vfiprintf_internal_r+0xeb8>
   48fb8:	10803fcc 	andi	r2,r2,255
   48fbc:	00c00044 	movi	r3,1
   48fc0:	10c24426 	beq	r2,r3,498d4 <___vfiprintf_internal_r+0xcb8>
   48fc4:	00c00084 	movi	r3,2
   48fc8:	10c2cc26 	beq	r2,r3,49afc <___vfiprintf_internal_r+0xee0>
   48fcc:	d8c10a04 	addi	r3,sp,1064
   48fd0:	9008d0fa 	srli	r4,r18,3
   48fd4:	b00a977a 	slli	r5,r22,29
   48fd8:	b02cd0fa 	srli	r22,r22,3
   48fdc:	948001cc 	andi	r18,r18,7
   48fe0:	90800c04 	addi	r2,r18,48
   48fe4:	18ffffc4 	addi	r3,r3,-1
   48fe8:	2924b03a 	or	r18,r5,r4
   48fec:	18800005 	stb	r2,0(r3)
   48ff0:	9588b03a 	or	r4,r18,r22
   48ff4:	203ff61e 	bne	r4,zero,48fd0 <__alt_data_end+0xfffe2b10>
   48ff8:	a900004c 	andi	r4,r21,1
   48ffc:	d8c12415 	stw	r3,1168(sp)
   49000:	2002fb1e 	bne	r4,zero,49bf0 <___vfiprintf_internal_r+0xfd4>
   49004:	da811e17 	ldw	r10,1144(sp)
   49008:	50e3c83a 	sub	r17,r10,r3
   4900c:	8825883a 	mov	r18,r17
   49010:	8a40010e 	bge	r17,r9,49018 <___vfiprintf_internal_r+0x3fc>
   49014:	4825883a 	mov	r18,r9
   49018:	63003fcc 	andi	r12,r12,255
   4901c:	6300201c 	xori	r12,r12,128
   49020:	633fe004 	addi	r12,r12,-128
   49024:	60000126 	beq	r12,zero,4902c <___vfiprintf_internal_r+0x410>
   49028:	94800044 	addi	r18,r18,1
   4902c:	ab80008c 	andi	r14,r21,2
   49030:	70000126 	beq	r14,zero,49038 <___vfiprintf_internal_r+0x41c>
   49034:	94800084 	addi	r18,r18,2
   49038:	ad80210c 	andi	r22,r21,132
   4903c:	b001df1e 	bne	r22,zero,497bc <___vfiprintf_internal_r+0xba0>
   49040:	9c8fc83a 	sub	r7,r19,r18
   49044:	01c1dd0e 	bge	zero,r7,497bc <___vfiprintf_internal_r+0xba0>
   49048:	03000404 	movi	r12,16
   4904c:	d8811c17 	ldw	r2,1136(sp)
   49050:	61c3920e 	bge	r12,r7,49e9c <___vfiprintf_internal_r+0x1280>
   49054:	02800174 	movhi	r10,5
   49058:	52bcec04 	addi	r10,r10,-3152
   4905c:	dc012915 	stw	r16,1188(sp)
   49060:	d9811b17 	ldw	r6,1132(sp)
   49064:	da812315 	stw	r10,1164(sp)
   49068:	00c001c4 	movi	r3,7
   4906c:	da412515 	stw	r9,1172(sp)
   49070:	db812815 	stw	r14,1184(sp)
   49074:	3821883a 	mov	r16,r7
   49078:	00000506 	br	49090 <___vfiprintf_internal_r+0x474>
   4907c:	31400084 	addi	r5,r6,2
   49080:	42000204 	addi	r8,r8,8
   49084:	200d883a 	mov	r6,r4
   49088:	843ffc04 	addi	r16,r16,-16
   4908c:	64000d0e 	bge	r12,r16,490c4 <___vfiprintf_internal_r+0x4a8>
   49090:	10800404 	addi	r2,r2,16
   49094:	31000044 	addi	r4,r6,1
   49098:	47000015 	stw	fp,0(r8)
   4909c:	43000115 	stw	r12,4(r8)
   490a0:	d8811c15 	stw	r2,1136(sp)
   490a4:	d9011b15 	stw	r4,1132(sp)
   490a8:	193ff40e 	bge	r3,r4,4907c <__alt_data_end+0xfffe2bbc>
   490ac:	1001b51e 	bne	r2,zero,49784 <___vfiprintf_internal_r+0xb68>
   490b0:	843ffc04 	addi	r16,r16,-16
   490b4:	000d883a 	mov	r6,zero
   490b8:	01400044 	movi	r5,1
   490bc:	d811883a 	mov	r8,sp
   490c0:	643ff316 	blt	r12,r16,49090 <__alt_data_end+0xfffe2bd0>
   490c4:	800f883a 	mov	r7,r16
   490c8:	da412517 	ldw	r9,1172(sp)
   490cc:	db812817 	ldw	r14,1184(sp)
   490d0:	dc012917 	ldw	r16,1188(sp)
   490d4:	dac12317 	ldw	r11,1164(sp)
   490d8:	3887883a 	add	r3,r7,r2
   490dc:	41c00115 	stw	r7,4(r8)
   490e0:	42c00015 	stw	r11,0(r8)
   490e4:	d8c11c15 	stw	r3,1136(sp)
   490e8:	d9411b15 	stw	r5,1132(sp)
   490ec:	008001c4 	movi	r2,7
   490f0:	11429316 	blt	r2,r5,49b40 <___vfiprintf_internal_r+0xf24>
   490f4:	d9011d87 	ldb	r4,1142(sp)
   490f8:	42000204 	addi	r8,r8,8
   490fc:	28800044 	addi	r2,r5,1
   49100:	2001b31e 	bne	r4,zero,497d0 <___vfiprintf_internal_r+0xbb4>
   49104:	70000c26 	beq	r14,zero,49138 <___vfiprintf_internal_r+0x51c>
   49108:	d9011d04 	addi	r4,sp,1140
   4910c:	18c00084 	addi	r3,r3,2
   49110:	41000015 	stw	r4,0(r8)
   49114:	01000084 	movi	r4,2
   49118:	41000115 	stw	r4,4(r8)
   4911c:	d8c11c15 	stw	r3,1136(sp)
   49120:	d8811b15 	stw	r2,1132(sp)
   49124:	010001c4 	movi	r4,7
   49128:	20826516 	blt	r4,r2,49ac0 <___vfiprintf_internal_r+0xea4>
   4912c:	100b883a 	mov	r5,r2
   49130:	42000204 	addi	r8,r8,8
   49134:	10800044 	addi	r2,r2,1
   49138:	01002004 	movi	r4,128
   4913c:	b1021a26 	beq	r22,r4,499a8 <___vfiprintf_internal_r+0xd8c>
   49140:	4c6dc83a 	sub	r22,r9,r17
   49144:	0580230e 	bge	zero,r22,491d4 <___vfiprintf_internal_r+0x5b8>
   49148:	01c00404 	movi	r7,16
   4914c:	3d83300e 	bge	r7,r22,49e10 <___vfiprintf_internal_r+0x11f4>
   49150:	00800174 	movhi	r2,5
   49154:	10bce804 	addi	r2,r2,-3168
   49158:	d8812315 	stw	r2,1164(sp)
   4915c:	030001c4 	movi	r12,7
   49160:	00000506 	br	49178 <___vfiprintf_internal_r+0x55c>
   49164:	28800084 	addi	r2,r5,2
   49168:	42000204 	addi	r8,r8,8
   4916c:	200b883a 	mov	r5,r4
   49170:	b5bffc04 	addi	r22,r22,-16
   49174:	3d800d0e 	bge	r7,r22,491ac <___vfiprintf_internal_r+0x590>
   49178:	18c00404 	addi	r3,r3,16
   4917c:	29000044 	addi	r4,r5,1
   49180:	45c00015 	stw	r23,0(r8)
   49184:	41c00115 	stw	r7,4(r8)
   49188:	d8c11c15 	stw	r3,1136(sp)
   4918c:	d9011b15 	stw	r4,1132(sp)
   49190:	613ff40e 	bge	r12,r4,49164 <__alt_data_end+0xfffe2ca4>
   49194:	18019b1e 	bne	r3,zero,49804 <___vfiprintf_internal_r+0xbe8>
   49198:	b5bffc04 	addi	r22,r22,-16
   4919c:	000b883a 	mov	r5,zero
   491a0:	00800044 	movi	r2,1
   491a4:	d811883a 	mov	r8,sp
   491a8:	3dbff316 	blt	r7,r22,49178 <__alt_data_end+0xfffe2cb8>
   491ac:	da812317 	ldw	r10,1164(sp)
   491b0:	1d87883a 	add	r3,r3,r22
   491b4:	45800115 	stw	r22,4(r8)
   491b8:	42800015 	stw	r10,0(r8)
   491bc:	d8c11c15 	stw	r3,1136(sp)
   491c0:	d8811b15 	stw	r2,1132(sp)
   491c4:	010001c4 	movi	r4,7
   491c8:	2081dd16 	blt	r4,r2,49940 <___vfiprintf_internal_r+0xd24>
   491cc:	42000204 	addi	r8,r8,8
   491d0:	10800044 	addi	r2,r2,1
   491d4:	da812417 	ldw	r10,1168(sp)
   491d8:	1c47883a 	add	r3,r3,r17
   491dc:	44400115 	stw	r17,4(r8)
   491e0:	42800015 	stw	r10,0(r8)
   491e4:	d8c11c15 	stw	r3,1136(sp)
   491e8:	d8811b15 	stw	r2,1132(sp)
   491ec:	010001c4 	movi	r4,7
   491f0:	2081dc0e 	bge	r4,r2,49964 <___vfiprintf_internal_r+0xd48>
   491f4:	1802611e 	bne	r3,zero,49b7c <___vfiprintf_internal_r+0xf60>
   491f8:	d8011b15 	stw	zero,1132(sp)
   491fc:	aac0010c 	andi	r11,r21,4
   49200:	58002726 	beq	r11,zero,492a0 <___vfiprintf_internal_r+0x684>
   49204:	9ca3c83a 	sub	r17,r19,r18
   49208:	d811883a 	mov	r8,sp
   4920c:	0443510e 	bge	zero,r17,49f54 <___vfiprintf_internal_r+0x1338>
   49210:	01c00404 	movi	r7,16
   49214:	3c43320e 	bge	r7,r17,49ee0 <___vfiprintf_internal_r+0x12c4>
   49218:	00800174 	movhi	r2,5
   4921c:	10bcec04 	addi	r2,r2,-3152
   49220:	d9011b17 	ldw	r4,1132(sp)
   49224:	d8812315 	stw	r2,1164(sp)
   49228:	382d883a 	mov	r22,r7
   4922c:	054001c4 	movi	r21,7
   49230:	00000506 	br	49248 <___vfiprintf_internal_r+0x62c>
   49234:	21400084 	addi	r5,r4,2
   49238:	42000204 	addi	r8,r8,8
   4923c:	1009883a 	mov	r4,r2
   49240:	8c7ffc04 	addi	r17,r17,-16
   49244:	b4400d0e 	bge	r22,r17,4927c <___vfiprintf_internal_r+0x660>
   49248:	18c00404 	addi	r3,r3,16
   4924c:	20800044 	addi	r2,r4,1
   49250:	47000015 	stw	fp,0(r8)
   49254:	45800115 	stw	r22,4(r8)
   49258:	d8c11c15 	stw	r3,1136(sp)
   4925c:	d8811b15 	stw	r2,1132(sp)
   49260:	a8bff40e 	bge	r21,r2,49234 <__alt_data_end+0xfffe2d74>
   49264:	1801ac1e 	bne	r3,zero,49918 <___vfiprintf_internal_r+0xcfc>
   49268:	8c7ffc04 	addi	r17,r17,-16
   4926c:	0009883a 	mov	r4,zero
   49270:	01400044 	movi	r5,1
   49274:	d811883a 	mov	r8,sp
   49278:	b47ff316 	blt	r22,r17,49248 <__alt_data_end+0xfffe2d88>
   4927c:	da812317 	ldw	r10,1164(sp)
   49280:	1c47883a 	add	r3,r3,r17
   49284:	44400115 	stw	r17,4(r8)
   49288:	42800015 	stw	r10,0(r8)
   4928c:	d8c11c15 	stw	r3,1136(sp)
   49290:	d9411b15 	stw	r5,1132(sp)
   49294:	008001c4 	movi	r2,7
   49298:	1141b70e 	bge	r2,r5,49978 <___vfiprintf_internal_r+0xd5c>
   4929c:	1802cf1e 	bne	r3,zero,49ddc <___vfiprintf_internal_r+0x11c0>
   492a0:	94c2ca16 	blt	r18,r19,49dcc <___vfiprintf_internal_r+0x11b0>
   492a4:	dac12217 	ldw	r11,1160(sp)
   492a8:	5c97883a 	add	r11,r11,r18
   492ac:	dac12215 	stw	r11,1160(sp)
   492b0:	d8011b15 	stw	zero,1132(sp)
   492b4:	d811883a 	mov	r8,sp
   492b8:	003e8d06 	br	48cf0 <__alt_data_end+0xfffe2830>
   492bc:	d9012017 	ldw	r4,1152(sp)
   492c0:	a00b883a 	mov	r5,r20
   492c4:	00439ac0 	call	439ac <__swsetup_r>
   492c8:	10002c1e 	bne	r2,zero,4937c <___vfiprintf_internal_r+0x760>
   492cc:	a0c0030b 	ldhu	r3,12(r20)
   492d0:	01000284 	movi	r4,10
   492d4:	1805883a 	mov	r2,r3
   492d8:	1080068c 	andi	r2,r2,26
   492dc:	113e731e 	bne	r2,r4,48cac <__alt_data_end+0xfffe27ec>
   492e0:	a080038b 	ldhu	r2,14(r20)
   492e4:	113fffcc 	andi	r4,r2,65535
   492e8:	2120001c 	xori	r4,r4,32768
   492ec:	21200004 	addi	r4,r4,-32768
   492f0:	203e6e16 	blt	r4,zero,48cac <__alt_data_end+0xfffe27ec>
   492f4:	a3001917 	ldw	r12,100(r20)
   492f8:	a2c00717 	ldw	r11,28(r20)
   492fc:	a2800917 	ldw	r10,36(r20)
   49300:	d9012017 	ldw	r4,1152(sp)
   49304:	d9c12117 	ldw	r7,1156(sp)
   49308:	02410004 	movi	r9,1024
   4930c:	18ffff4c 	andi	r3,r3,65533
   49310:	da4b883a 	add	r5,sp,r9
   49314:	b00d883a 	mov	r6,r22
   49318:	d8c1030d 	sth	r3,1036(sp)
   4931c:	db011915 	stw	r12,1124(sp)
   49320:	d881038d 	sth	r2,1038(sp)
   49324:	dac10715 	stw	r11,1052(sp)
   49328:	da810915 	stw	r10,1060(sp)
   4932c:	dec10015 	stw	sp,1024(sp)
   49330:	dec10415 	stw	sp,1040(sp)
   49334:	da410215 	stw	r9,1032(sp)
   49338:	da410515 	stw	r9,1044(sp)
   4933c:	d8010615 	stw	zero,1048(sp)
   49340:	0048c1c0 	call	48c1c <___vfiprintf_internal_r>
   49344:	1021883a 	mov	r16,r2
   49348:	10000416 	blt	r2,zero,4935c <___vfiprintf_internal_r+0x740>
   4934c:	d9012017 	ldw	r4,1152(sp)
   49350:	d9410004 	addi	r5,sp,1024
   49354:	00454040 	call	45404 <_fflush_r>
   49358:	1002fc1e 	bne	r2,zero,49f4c <___vfiprintf_internal_r+0x1330>
   4935c:	d881030b 	ldhu	r2,1036(sp)
   49360:	1080100c 	andi	r2,r2,64
   49364:	10000326 	beq	r2,zero,49374 <___vfiprintf_internal_r+0x758>
   49368:	a080030b 	ldhu	r2,12(r20)
   4936c:	10801014 	ori	r2,r2,64
   49370:	a080030d 	sth	r2,12(r20)
   49374:	8005883a 	mov	r2,r16
   49378:	00000106 	br	49380 <___vfiprintf_internal_r+0x764>
   4937c:	00bfffc4 	movi	r2,-1
   49380:	dfc13517 	ldw	ra,1236(sp)
   49384:	df013417 	ldw	fp,1232(sp)
   49388:	ddc13317 	ldw	r23,1228(sp)
   4938c:	dd813217 	ldw	r22,1224(sp)
   49390:	dd413117 	ldw	r21,1220(sp)
   49394:	dd013017 	ldw	r20,1216(sp)
   49398:	dcc12f17 	ldw	r19,1212(sp)
   4939c:	dc812e17 	ldw	r18,1208(sp)
   493a0:	dc412d17 	ldw	r17,1204(sp)
   493a4:	dc012c17 	ldw	r16,1200(sp)
   493a8:	dec13604 	addi	sp,sp,1240
   493ac:	f800283a 	ret
   493b0:	00459ac0 	call	459ac <__sinit>
   493b4:	003e2b06 	br	48c64 <__alt_data_end+0xfffe27a4>
   493b8:	04e7c83a 	sub	r19,zero,r19
   493bc:	d8812115 	stw	r2,1156(sp)
   493c0:	ad400114 	ori	r21,r21,4
   493c4:	80c00007 	ldb	r3,0(r16)
   493c8:	003e7306 	br	48d98 <__alt_data_end+0xfffe28d8>
   493cc:	a880040c 	andi	r2,r21,16
   493d0:	1000e41e 	bne	r2,zero,49764 <___vfiprintf_internal_r+0xb48>
   493d4:	a880100c 	andi	r2,r21,64
   493d8:	1000e226 	beq	r2,zero,49764 <___vfiprintf_internal_r+0xb48>
   493dc:	da812117 	ldw	r10,1156(sp)
   493e0:	002d883a 	mov	r22,zero
   493e4:	0005883a 	mov	r2,zero
   493e8:	5480000b 	ldhu	r18,0(r10)
   493ec:	52800104 	addi	r10,r10,4
   493f0:	da812115 	stw	r10,1156(sp)
   493f4:	9009883a 	mov	r4,r18
   493f8:	003ee706 	br	48f98 <__alt_data_end+0xfffe2ad8>
   493fc:	da812117 	ldw	r10,1156(sp)
   49400:	00800044 	movi	r2,1
   49404:	54800017 	ldw	r18,0(r10)
   49408:	55800117 	ldw	r22,4(r10)
   4940c:	52800204 	addi	r10,r10,8
   49410:	da812115 	stw	r10,1156(sp)
   49414:	9588b03a 	or	r4,r18,r22
   49418:	003edf06 	br	48f98 <__alt_data_end+0xfffe2ad8>
   4941c:	02c00174 	movhi	r11,5
   49420:	5afc8204 	addi	r11,r11,-3576
   49424:	d9811d85 	stb	r6,1142(sp)
   49428:	dac12615 	stw	r11,1176(sp)
   4942c:	a900080c 	andi	r4,r21,32
   49430:	d8812117 	ldw	r2,1156(sp)
   49434:	2000a526 	beq	r4,zero,496cc <___vfiprintf_internal_r+0xab0>
   49438:	da812117 	ldw	r10,1156(sp)
   4943c:	14800017 	ldw	r18,0(r2)
   49440:	15800117 	ldw	r22,4(r2)
   49444:	52800204 	addi	r10,r10,8
   49448:	da812115 	stw	r10,1156(sp)
   4944c:	a880004c 	andi	r2,r21,1
   49450:	1001d926 	beq	r2,zero,49bb8 <___vfiprintf_internal_r+0xf9c>
   49454:	9588b03a 	or	r4,r18,r22
   49458:	20024426 	beq	r4,zero,49d6c <___vfiprintf_internal_r+0x1150>
   4945c:	00800c04 	movi	r2,48
   49460:	d8811d05 	stb	r2,1140(sp)
   49464:	d8c11d45 	stb	r3,1141(sp)
   49468:	ad400094 	ori	r21,r21,2
   4946c:	00800084 	movi	r2,2
   49470:	003ec906 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49474:	da812117 	ldw	r10,1156(sp)
   49478:	04800044 	movi	r18,1
   4947c:	dac10004 	addi	r11,sp,1024
   49480:	50800017 	ldw	r2,0(r10)
   49484:	52800104 	addi	r10,r10,4
   49488:	d8011d85 	stb	zero,1142(sp)
   4948c:	d8810005 	stb	r2,1024(sp)
   49490:	da812115 	stw	r10,1156(sp)
   49494:	9023883a 	mov	r17,r18
   49498:	dac12415 	stw	r11,1168(sp)
   4949c:	0013883a 	mov	r9,zero
   494a0:	003ee206 	br	4902c <__alt_data_end+0xfffe2b6c>
   494a4:	ad402014 	ori	r21,r21,128
   494a8:	80c00007 	ldb	r3,0(r16)
   494ac:	003e3a06 	br	48d98 <__alt_data_end+0xfffe28d8>
   494b0:	8015883a 	mov	r10,r16
   494b4:	0027883a 	mov	r19,zero
   494b8:	18bff404 	addi	r2,r3,-48
   494bc:	50c00007 	ldb	r3,0(r10)
   494c0:	9cc002a4 	muli	r19,r19,10
   494c4:	84000044 	addi	r16,r16,1
   494c8:	8015883a 	mov	r10,r16
   494cc:	98a7883a 	add	r19,r19,r2
   494d0:	18bff404 	addi	r2,r3,-48
   494d4:	28bff92e 	bgeu	r5,r2,494bc <__alt_data_end+0xfffe2ffc>
   494d8:	003e3006 	br	48d9c <__alt_data_end+0xfffe28dc>
   494dc:	ad400414 	ori	r21,r21,16
   494e0:	d9811d85 	stb	r6,1142(sp)
   494e4:	a880080c 	andi	r2,r21,32
   494e8:	d8c12117 	ldw	r3,1156(sp)
   494ec:	10004b26 	beq	r2,zero,4961c <___vfiprintf_internal_r+0xa00>
   494f0:	da812117 	ldw	r10,1156(sp)
   494f4:	18800117 	ldw	r2,4(r3)
   494f8:	1c800017 	ldw	r18,0(r3)
   494fc:	52800204 	addi	r10,r10,8
   49500:	da812115 	stw	r10,1156(sp)
   49504:	102d883a 	mov	r22,r2
   49508:	1001f116 	blt	r2,zero,49cd0 <___vfiprintf_internal_r+0x10b4>
   4950c:	db011d83 	ldbu	r12,1142(sp)
   49510:	4823883a 	mov	r17,r9
   49514:	00800044 	movi	r2,1
   49518:	9588b03a 	or	r4,r18,r22
   4951c:	003ea106 	br	48fa4 <__alt_data_end+0xfffe2ae4>
   49520:	80c00007 	ldb	r3,0(r16)
   49524:	82800044 	addi	r10,r16,1
   49528:	1b027f26 	beq	r3,r12,49f28 <___vfiprintf_internal_r+0x130c>
   4952c:	18bff404 	addi	r2,r3,-48
   49530:	5021883a 	mov	r16,r10
   49534:	0013883a 	mov	r9,zero
   49538:	28be1836 	bltu	r5,r2,48d9c <__alt_data_end+0xfffe28dc>
   4953c:	80c00007 	ldb	r3,0(r16)
   49540:	4a4002a4 	muli	r9,r9,10
   49544:	84000044 	addi	r16,r16,1
   49548:	1253883a 	add	r9,r2,r9
   4954c:	18bff404 	addi	r2,r3,-48
   49550:	28bffa2e 	bgeu	r5,r2,4953c <__alt_data_end+0xfffe307c>
   49554:	483e110e 	bge	r9,zero,48d9c <__alt_data_end+0xfffe28dc>
   49558:	027fffc4 	movi	r9,-1
   4955c:	003e0f06 	br	48d9c <__alt_data_end+0xfffe28dc>
   49560:	d9811d85 	stb	r6,1142(sp)
   49564:	a880080c 	andi	r2,r21,32
   49568:	1001ee26 	beq	r2,zero,49d24 <___vfiprintf_internal_r+0x1108>
   4956c:	da812117 	ldw	r10,1156(sp)
   49570:	dac12217 	ldw	r11,1160(sp)
   49574:	50800017 	ldw	r2,0(r10)
   49578:	5807d7fa 	srai	r3,r11,31
   4957c:	52800104 	addi	r10,r10,4
   49580:	da812115 	stw	r10,1156(sp)
   49584:	12c00015 	stw	r11,0(r2)
   49588:	10c00115 	stw	r3,4(r2)
   4958c:	003dd806 	br	48cf0 <__alt_data_end+0xfffe2830>
   49590:	30803fcc 	andi	r2,r6,255
   49594:	1080201c 	xori	r2,r2,128
   49598:	10bfe004 	addi	r2,r2,-128
   4959c:	1001df1e 	bne	r2,zero,49d1c <___vfiprintf_internal_r+0x1100>
   495a0:	01800804 	movi	r6,32
   495a4:	80c00007 	ldb	r3,0(r16)
   495a8:	003dfb06 	br	48d98 <__alt_data_end+0xfffe28d8>
   495ac:	da812117 	ldw	r10,1156(sp)
   495b0:	dac12117 	ldw	r11,1156(sp)
   495b4:	d8011d85 	stb	zero,1142(sp)
   495b8:	52800017 	ldw	r10,0(r10)
   495bc:	5d800104 	addi	r22,r11,4
   495c0:	da812415 	stw	r10,1168(sp)
   495c4:	50023b26 	beq	r10,zero,49eb4 <___vfiprintf_internal_r+0x1298>
   495c8:	d9012417 	ldw	r4,1168(sp)
   495cc:	48021f16 	blt	r9,zero,49e4c <___vfiprintf_internal_r+0x1230>
   495d0:	480d883a 	mov	r6,r9
   495d4:	000b883a 	mov	r5,zero
   495d8:	da012a15 	stw	r8,1192(sp)
   495dc:	da412b15 	stw	r9,1196(sp)
   495e0:	0046e640 	call	46e64 <memchr>
   495e4:	da012a17 	ldw	r8,1192(sp)
   495e8:	da412b17 	ldw	r9,1196(sp)
   495ec:	10024726 	beq	r2,zero,49f0c <___vfiprintf_internal_r+0x12f0>
   495f0:	d8c12417 	ldw	r3,1168(sp)
   495f4:	10e3c83a 	sub	r17,r2,r3
   495f8:	4c41f616 	blt	r9,r17,49dd4 <___vfiprintf_internal_r+0x11b8>
   495fc:	db011d83 	ldbu	r12,1142(sp)
   49600:	dd812115 	stw	r22,1156(sp)
   49604:	0013883a 	mov	r9,zero
   49608:	003e8006 	br	4900c <__alt_data_end+0xfffe2b4c>
   4960c:	d9811d85 	stb	r6,1142(sp)
   49610:	a880080c 	andi	r2,r21,32
   49614:	d8c12117 	ldw	r3,1156(sp)
   49618:	103fb51e 	bne	r2,zero,494f0 <__alt_data_end+0xfffe3030>
   4961c:	a880040c 	andi	r2,r21,16
   49620:	10015e1e 	bne	r2,zero,49b9c <___vfiprintf_internal_r+0xf80>
   49624:	a880100c 	andi	r2,r21,64
   49628:	10015c26 	beq	r2,zero,49b9c <___vfiprintf_internal_r+0xf80>
   4962c:	1c80000f 	ldh	r18,0(r3)
   49630:	da812117 	ldw	r10,1156(sp)
   49634:	902dd7fa 	srai	r22,r18,31
   49638:	52800104 	addi	r10,r10,4
   4963c:	da812115 	stw	r10,1156(sp)
   49640:	b005883a 	mov	r2,r22
   49644:	003fb006 	br	49508 <__alt_data_end+0xfffe3048>
   49648:	da812117 	ldw	r10,1156(sp)
   4964c:	00800c04 	movi	r2,48
   49650:	02c00174 	movhi	r11,5
   49654:	54800017 	ldw	r18,0(r10)
   49658:	d8811d05 	stb	r2,1140(sp)
   4965c:	52800104 	addi	r10,r10,4
   49660:	00801e04 	movi	r2,120
   49664:	5afc8704 	addi	r11,r11,-3556
   49668:	d8811d45 	stb	r2,1141(sp)
   4966c:	002d883a 	mov	r22,zero
   49670:	ad400094 	ori	r21,r21,2
   49674:	da812115 	stw	r10,1156(sp)
   49678:	dac12615 	stw	r11,1176(sp)
   4967c:	00800084 	movi	r2,2
   49680:	9009883a 	mov	r4,r18
   49684:	003e4406 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49688:	ad400814 	ori	r21,r21,32
   4968c:	80c00007 	ldb	r3,0(r16)
   49690:	003dc106 	br	48d98 <__alt_data_end+0xfffe28d8>
   49694:	ad401014 	ori	r21,r21,64
   49698:	80c00007 	ldb	r3,0(r16)
   4969c:	003dbe06 	br	48d98 <__alt_data_end+0xfffe28d8>
   496a0:	80c00007 	ldb	r3,0(r16)
   496a4:	19c1de26 	beq	r3,r7,49e20 <___vfiprintf_internal_r+0x1204>
   496a8:	ad400414 	ori	r21,r21,16
   496ac:	003dba06 	br	48d98 <__alt_data_end+0xfffe28d8>
   496b0:	00800174 	movhi	r2,5
   496b4:	10bc8704 	addi	r2,r2,-3556
   496b8:	d8812615 	stw	r2,1176(sp)
   496bc:	d9811d85 	stb	r6,1142(sp)
   496c0:	a900080c 	andi	r4,r21,32
   496c4:	d8812117 	ldw	r2,1156(sp)
   496c8:	203f5b1e 	bne	r4,zero,49438 <__alt_data_end+0xfffe2f78>
   496cc:	a900040c 	andi	r4,r21,16
   496d0:	2001a826 	beq	r4,zero,49d74 <___vfiprintf_internal_r+0x1158>
   496d4:	dac12117 	ldw	r11,1156(sp)
   496d8:	14800017 	ldw	r18,0(r2)
   496dc:	002d883a 	mov	r22,zero
   496e0:	5ac00104 	addi	r11,r11,4
   496e4:	dac12115 	stw	r11,1156(sp)
   496e8:	003f5806 	br	4944c <__alt_data_end+0xfffe2f8c>
   496ec:	da812117 	ldw	r10,1156(sp)
   496f0:	54c00017 	ldw	r19,0(r10)
   496f4:	50800104 	addi	r2,r10,4
   496f8:	983f2f16 	blt	r19,zero,493b8 <__alt_data_end+0xfffe2ef8>
   496fc:	d8812115 	stw	r2,1156(sp)
   49700:	80c00007 	ldb	r3,0(r16)
   49704:	003da406 	br	48d98 <__alt_data_end+0xfffe28d8>
   49708:	01800ac4 	movi	r6,43
   4970c:	80c00007 	ldb	r3,0(r16)
   49710:	003da106 	br	48d98 <__alt_data_end+0xfffe28d8>
   49714:	ad400054 	ori	r21,r21,1
   49718:	80c00007 	ldb	r3,0(r16)
   4971c:	003d9e06 	br	48d98 <__alt_data_end+0xfffe28d8>
   49720:	d9811d85 	stb	r6,1142(sp)
   49724:	18007126 	beq	r3,zero,498ec <___vfiprintf_internal_r+0xcd0>
   49728:	04800044 	movi	r18,1
   4972c:	d8c10005 	stb	r3,1024(sp)
   49730:	d8c10004 	addi	r3,sp,1024
   49734:	d8011d85 	stb	zero,1142(sp)
   49738:	9023883a 	mov	r17,r18
   4973c:	d8c12415 	stw	r3,1168(sp)
   49740:	003f5606 	br	4949c <__alt_data_end+0xfffe2fdc>
   49744:	dac12117 	ldw	r11,1156(sp)
   49748:	002d883a 	mov	r22,zero
   4974c:	00800044 	movi	r2,1
   49750:	5c800017 	ldw	r18,0(r11)
   49754:	5ac00104 	addi	r11,r11,4
   49758:	dac12115 	stw	r11,1156(sp)
   4975c:	9009883a 	mov	r4,r18
   49760:	003e0d06 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49764:	dac12117 	ldw	r11,1156(sp)
   49768:	002d883a 	mov	r22,zero
   4976c:	0005883a 	mov	r2,zero
   49770:	5c800017 	ldw	r18,0(r11)
   49774:	5ac00104 	addi	r11,r11,4
   49778:	dac12115 	stw	r11,1156(sp)
   4977c:	9009883a 	mov	r4,r18
   49780:	003e0506 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49784:	d9012017 	ldw	r4,1152(sp)
   49788:	a00b883a 	mov	r5,r20
   4978c:	d9811a04 	addi	r6,sp,1128
   49790:	d8c12a15 	stw	r3,1192(sp)
   49794:	db012b15 	stw	r12,1196(sp)
   49798:	0048b080 	call	48b08 <__sprint_r.part.0>
   4979c:	d8c12a17 	ldw	r3,1192(sp)
   497a0:	db012b17 	ldw	r12,1196(sp)
   497a4:	1000571e 	bne	r2,zero,49904 <___vfiprintf_internal_r+0xce8>
   497a8:	d9811b17 	ldw	r6,1132(sp)
   497ac:	d8811c17 	ldw	r2,1136(sp)
   497b0:	d811883a 	mov	r8,sp
   497b4:	31400044 	addi	r5,r6,1
   497b8:	003e3306 	br	49088 <__alt_data_end+0xfffe2bc8>
   497bc:	d9411b17 	ldw	r5,1132(sp)
   497c0:	d8c11c17 	ldw	r3,1136(sp)
   497c4:	28800044 	addi	r2,r5,1
   497c8:	d9011d87 	ldb	r4,1142(sp)
   497cc:	203e4d26 	beq	r4,zero,49104 <__alt_data_end+0xfffe2c44>
   497d0:	01000044 	movi	r4,1
   497d4:	d9411d84 	addi	r5,sp,1142
   497d8:	1907883a 	add	r3,r3,r4
   497dc:	41400015 	stw	r5,0(r8)
   497e0:	41000115 	stw	r4,4(r8)
   497e4:	d8c11c15 	stw	r3,1136(sp)
   497e8:	d8811b15 	stw	r2,1132(sp)
   497ec:	014001c4 	movi	r5,7
   497f0:	2880aa16 	blt	r5,r2,49a9c <___vfiprintf_internal_r+0xe80>
   497f4:	100b883a 	mov	r5,r2
   497f8:	42000204 	addi	r8,r8,8
   497fc:	10800044 	addi	r2,r2,1
   49800:	003e4006 	br	49104 <__alt_data_end+0xfffe2c44>
   49804:	d9012017 	ldw	r4,1152(sp)
   49808:	a00b883a 	mov	r5,r20
   4980c:	d9811a04 	addi	r6,sp,1128
   49810:	d9c12a15 	stw	r7,1192(sp)
   49814:	db012b15 	stw	r12,1196(sp)
   49818:	0048b080 	call	48b08 <__sprint_r.part.0>
   4981c:	d9c12a17 	ldw	r7,1192(sp)
   49820:	db012b17 	ldw	r12,1196(sp)
   49824:	1000371e 	bne	r2,zero,49904 <___vfiprintf_internal_r+0xce8>
   49828:	d9411b17 	ldw	r5,1132(sp)
   4982c:	d8c11c17 	ldw	r3,1136(sp)
   49830:	d811883a 	mov	r8,sp
   49834:	28800044 	addi	r2,r5,1
   49838:	003e4d06 	br	49170 <__alt_data_end+0xfffe2cb0>
   4983c:	10803fcc 	andi	r2,r2,255
   49840:	00c00044 	movi	r3,1
   49844:	10fddf1e 	bne	r2,r3,48fc4 <__alt_data_end+0xfffe2b04>
   49848:	b000021e 	bne	r22,zero,49854 <___vfiprintf_internal_r+0xc38>
   4984c:	00800244 	movi	r2,9
   49850:	1480202e 	bgeu	r2,r18,498d4 <___vfiprintf_internal_r+0xcb8>
   49854:	dc012515 	stw	r16,1172(sp)
   49858:	dc410a04 	addi	r17,sp,1064
   4985c:	9021883a 	mov	r16,r18
   49860:	da012415 	stw	r8,1168(sp)
   49864:	b025883a 	mov	r18,r22
   49868:	da412315 	stw	r9,1164(sp)
   4986c:	602d883a 	mov	r22,r12
   49870:	8009883a 	mov	r4,r16
   49874:	900b883a 	mov	r5,r18
   49878:	01800284 	movi	r6,10
   4987c:	000f883a 	mov	r7,zero
   49880:	004aef40 	call	4aef4 <__umoddi3>
   49884:	10800c04 	addi	r2,r2,48
   49888:	8c7fffc4 	addi	r17,r17,-1
   4988c:	8009883a 	mov	r4,r16
   49890:	900b883a 	mov	r5,r18
   49894:	01800284 	movi	r6,10
   49898:	000f883a 	mov	r7,zero
   4989c:	88800005 	stb	r2,0(r17)
   498a0:	004a9340 	call	4a934 <__udivdi3>
   498a4:	1021883a 	mov	r16,r2
   498a8:	10c4b03a 	or	r2,r2,r3
   498ac:	1825883a 	mov	r18,r3
   498b0:	103fef1e 	bne	r2,zero,49870 <__alt_data_end+0xfffe33b0>
   498b4:	da811e17 	ldw	r10,1144(sp)
   498b8:	da012417 	ldw	r8,1168(sp)
   498bc:	da412317 	ldw	r9,1164(sp)
   498c0:	dc412415 	stw	r17,1168(sp)
   498c4:	b019883a 	mov	r12,r22
   498c8:	dc012517 	ldw	r16,1172(sp)
   498cc:	5463c83a 	sub	r17,r10,r17
   498d0:	003dce06 	br	4900c <__alt_data_end+0xfffe2b4c>
   498d4:	94800c04 	addi	r18,r18,48
   498d8:	d8c109c4 	addi	r3,sp,1063
   498dc:	dc8109c5 	stb	r18,1063(sp)
   498e0:	dc412717 	ldw	r17,1180(sp)
   498e4:	d8c12415 	stw	r3,1168(sp)
   498e8:	003dc806 	br	4900c <__alt_data_end+0xfffe2b4c>
   498ec:	d8811c17 	ldw	r2,1136(sp)
   498f0:	10000426 	beq	r2,zero,49904 <___vfiprintf_internal_r+0xce8>
   498f4:	d9012017 	ldw	r4,1152(sp)
   498f8:	a00b883a 	mov	r5,r20
   498fc:	d9811a04 	addi	r6,sp,1128
   49900:	0048b080 	call	48b08 <__sprint_r.part.0>
   49904:	a080030b 	ldhu	r2,12(r20)
   49908:	1080100c 	andi	r2,r2,64
   4990c:	103e9b1e 	bne	r2,zero,4937c <__alt_data_end+0xfffe2ebc>
   49910:	d8812217 	ldw	r2,1160(sp)
   49914:	003e9a06 	br	49380 <__alt_data_end+0xfffe2ec0>
   49918:	d9012017 	ldw	r4,1152(sp)
   4991c:	a00b883a 	mov	r5,r20
   49920:	d9811a04 	addi	r6,sp,1128
   49924:	0048b080 	call	48b08 <__sprint_r.part.0>
   49928:	103ff61e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   4992c:	d9011b17 	ldw	r4,1132(sp)
   49930:	d8c11c17 	ldw	r3,1136(sp)
   49934:	d811883a 	mov	r8,sp
   49938:	21400044 	addi	r5,r4,1
   4993c:	003e4006 	br	49240 <__alt_data_end+0xfffe2d80>
   49940:	1800d61e 	bne	r3,zero,49c9c <___vfiprintf_internal_r+0x1080>
   49944:	dac12417 	ldw	r11,1168(sp)
   49948:	00800044 	movi	r2,1
   4994c:	dc400115 	stw	r17,4(sp)
   49950:	dac00015 	stw	r11,0(sp)
   49954:	dc411c15 	stw	r17,1136(sp)
   49958:	d8811b15 	stw	r2,1132(sp)
   4995c:	8807883a 	mov	r3,r17
   49960:	d811883a 	mov	r8,sp
   49964:	42000204 	addi	r8,r8,8
   49968:	aac0010c 	andi	r11,r21,4
   4996c:	58000226 	beq	r11,zero,49978 <___vfiprintf_internal_r+0xd5c>
   49970:	9ca3c83a 	sub	r17,r19,r18
   49974:	047e2616 	blt	zero,r17,49210 <__alt_data_end+0xfffe2d50>
   49978:	94c0010e 	bge	r18,r19,49980 <___vfiprintf_internal_r+0xd64>
   4997c:	9825883a 	mov	r18,r19
   49980:	da812217 	ldw	r10,1160(sp)
   49984:	5495883a 	add	r10,r10,r18
   49988:	da812215 	stw	r10,1160(sp)
   4998c:	183e4826 	beq	r3,zero,492b0 <__alt_data_end+0xfffe2df0>
   49990:	d9012017 	ldw	r4,1152(sp)
   49994:	a00b883a 	mov	r5,r20
   49998:	d9811a04 	addi	r6,sp,1128
   4999c:	0048b080 	call	48b08 <__sprint_r.part.0>
   499a0:	103e4326 	beq	r2,zero,492b0 <__alt_data_end+0xfffe2df0>
   499a4:	003fd706 	br	49904 <__alt_data_end+0xfffe3444>
   499a8:	9cadc83a 	sub	r22,r19,r18
   499ac:	05bde40e 	bge	zero,r22,49140 <__alt_data_end+0xfffe2c80>
   499b0:	03000404 	movi	r12,16
   499b4:	6581500e 	bge	r12,r22,49ef8 <___vfiprintf_internal_r+0x12dc>
   499b8:	00800174 	movhi	r2,5
   499bc:	10bce804 	addi	r2,r2,-3168
   499c0:	d8812315 	stw	r2,1164(sp)
   499c4:	8005883a 	mov	r2,r16
   499c8:	038001c4 	movi	r14,7
   499cc:	b021883a 	mov	r16,r22
   499d0:	da412515 	stw	r9,1172(sp)
   499d4:	102d883a 	mov	r22,r2
   499d8:	00000506 	br	499f0 <___vfiprintf_internal_r+0xdd4>
   499dc:	29000084 	addi	r4,r5,2
   499e0:	42000204 	addi	r8,r8,8
   499e4:	100b883a 	mov	r5,r2
   499e8:	843ffc04 	addi	r16,r16,-16
   499ec:	64000d0e 	bge	r12,r16,49a24 <___vfiprintf_internal_r+0xe08>
   499f0:	18c00404 	addi	r3,r3,16
   499f4:	28800044 	addi	r2,r5,1
   499f8:	45c00015 	stw	r23,0(r8)
   499fc:	43000115 	stw	r12,4(r8)
   49a00:	d8c11c15 	stw	r3,1136(sp)
   49a04:	d8811b15 	stw	r2,1132(sp)
   49a08:	70bff40e 	bge	r14,r2,499dc <__alt_data_end+0xfffe351c>
   49a0c:	1800151e 	bne	r3,zero,49a64 <___vfiprintf_internal_r+0xe48>
   49a10:	843ffc04 	addi	r16,r16,-16
   49a14:	000b883a 	mov	r5,zero
   49a18:	01000044 	movi	r4,1
   49a1c:	d811883a 	mov	r8,sp
   49a20:	643ff316 	blt	r12,r16,499f0 <__alt_data_end+0xfffe3530>
   49a24:	da412517 	ldw	r9,1172(sp)
   49a28:	b005883a 	mov	r2,r22
   49a2c:	802d883a 	mov	r22,r16
   49a30:	1021883a 	mov	r16,r2
   49a34:	da812317 	ldw	r10,1164(sp)
   49a38:	1d87883a 	add	r3,r3,r22
   49a3c:	45800115 	stw	r22,4(r8)
   49a40:	42800015 	stw	r10,0(r8)
   49a44:	d8c11c15 	stw	r3,1136(sp)
   49a48:	d9011b15 	stw	r4,1132(sp)
   49a4c:	008001c4 	movi	r2,7
   49a50:	11008d16 	blt	r2,r4,49c88 <___vfiprintf_internal_r+0x106c>
   49a54:	42000204 	addi	r8,r8,8
   49a58:	20800044 	addi	r2,r4,1
   49a5c:	200b883a 	mov	r5,r4
   49a60:	003db706 	br	49140 <__alt_data_end+0xfffe2c80>
   49a64:	d9012017 	ldw	r4,1152(sp)
   49a68:	a00b883a 	mov	r5,r20
   49a6c:	d9811a04 	addi	r6,sp,1128
   49a70:	db012b15 	stw	r12,1196(sp)
   49a74:	db812a15 	stw	r14,1192(sp)
   49a78:	0048b080 	call	48b08 <__sprint_r.part.0>
   49a7c:	db012b17 	ldw	r12,1196(sp)
   49a80:	db812a17 	ldw	r14,1192(sp)
   49a84:	103f9f1e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49a88:	d9411b17 	ldw	r5,1132(sp)
   49a8c:	d8c11c17 	ldw	r3,1136(sp)
   49a90:	d811883a 	mov	r8,sp
   49a94:	29000044 	addi	r4,r5,1
   49a98:	003fd306 	br	499e8 <__alt_data_end+0xfffe3528>
   49a9c:	18006c1e 	bne	r3,zero,49c50 <___vfiprintf_internal_r+0x1034>
   49aa0:	70004f26 	beq	r14,zero,49be0 <___vfiprintf_internal_r+0xfc4>
   49aa4:	d8811d04 	addi	r2,sp,1140
   49aa8:	00c00084 	movi	r3,2
   49aac:	d8800015 	stw	r2,0(sp)
   49ab0:	d8c00115 	stw	r3,4(sp)
   49ab4:	2005883a 	mov	r2,r4
   49ab8:	d811883a 	mov	r8,sp
   49abc:	003d9b06 	br	4912c <__alt_data_end+0xfffe2c6c>
   49ac0:	1800571e 	bne	r3,zero,49c20 <___vfiprintf_internal_r+0x1004>
   49ac4:	000b883a 	mov	r5,zero
   49ac8:	00800044 	movi	r2,1
   49acc:	d811883a 	mov	r8,sp
   49ad0:	003d9906 	br	49138 <__alt_data_end+0xfffe2c78>
   49ad4:	10803fcc 	andi	r2,r2,255
   49ad8:	1000251e 	bne	r2,zero,49b70 <___vfiprintf_internal_r+0xf54>
   49adc:	a880004c 	andi	r2,r21,1
   49ae0:	10007826 	beq	r2,zero,49cc4 <___vfiprintf_internal_r+0x10a8>
   49ae4:	00800c04 	movi	r2,48
   49ae8:	d8c109c4 	addi	r3,sp,1063
   49aec:	d88109c5 	stb	r2,1063(sp)
   49af0:	dc412717 	ldw	r17,1180(sp)
   49af4:	d8c12415 	stw	r3,1168(sp)
   49af8:	003d4406 	br	4900c <__alt_data_end+0xfffe2b4c>
   49afc:	d9012617 	ldw	r4,1176(sp)
   49b00:	dc410a04 	addi	r17,sp,1064
   49b04:	908003cc 	andi	r2,r18,15
   49b08:	b006973a 	slli	r3,r22,28
   49b0c:	2085883a 	add	r2,r4,r2
   49b10:	9024d13a 	srli	r18,r18,4
   49b14:	10800003 	ldbu	r2,0(r2)
   49b18:	b02cd13a 	srli	r22,r22,4
   49b1c:	8c7fffc4 	addi	r17,r17,-1
   49b20:	1ca4b03a 	or	r18,r3,r18
   49b24:	88800005 	stb	r2,0(r17)
   49b28:	9584b03a 	or	r2,r18,r22
   49b2c:	103ff51e 	bne	r2,zero,49b04 <__alt_data_end+0xfffe3644>
   49b30:	dac11e17 	ldw	r11,1144(sp)
   49b34:	dc412415 	stw	r17,1168(sp)
   49b38:	5c63c83a 	sub	r17,r11,r17
   49b3c:	003d3306 	br	4900c <__alt_data_end+0xfffe2b4c>
   49b40:	1800941e 	bne	r3,zero,49d94 <___vfiprintf_internal_r+0x1178>
   49b44:	d8811d87 	ldb	r2,1142(sp)
   49b48:	10006b26 	beq	r2,zero,49cf8 <___vfiprintf_internal_r+0x10dc>
   49b4c:	00c00044 	movi	r3,1
   49b50:	d9011d84 	addi	r4,sp,1142
   49b54:	1805883a 	mov	r2,r3
   49b58:	d9000015 	stw	r4,0(sp)
   49b5c:	d8c00115 	stw	r3,4(sp)
   49b60:	d811883a 	mov	r8,sp
   49b64:	003f2306 	br	497f4 <__alt_data_end+0xfffe3334>
   49b68:	8023883a 	mov	r17,r16
   49b6c:	003c7d06 	br	48d64 <__alt_data_end+0xfffe28a4>
   49b70:	da810a04 	addi	r10,sp,1064
   49b74:	da812415 	stw	r10,1168(sp)
   49b78:	003d2406 	br	4900c <__alt_data_end+0xfffe2b4c>
   49b7c:	d9012017 	ldw	r4,1152(sp)
   49b80:	a00b883a 	mov	r5,r20
   49b84:	d9811a04 	addi	r6,sp,1128
   49b88:	0048b080 	call	48b08 <__sprint_r.part.0>
   49b8c:	103f5d1e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49b90:	d8c11c17 	ldw	r3,1136(sp)
   49b94:	d811883a 	mov	r8,sp
   49b98:	003f7306 	br	49968 <__alt_data_end+0xfffe34a8>
   49b9c:	1c800017 	ldw	r18,0(r3)
   49ba0:	dac12117 	ldw	r11,1156(sp)
   49ba4:	902dd7fa 	srai	r22,r18,31
   49ba8:	5ac00104 	addi	r11,r11,4
   49bac:	dac12115 	stw	r11,1156(sp)
   49bb0:	b005883a 	mov	r2,r22
   49bb4:	003e5406 	br	49508 <__alt_data_end+0xfffe3048>
   49bb8:	00800084 	movi	r2,2
   49bbc:	9588b03a 	or	r4,r18,r22
   49bc0:	003cf506 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49bc4:	d9012017 	ldw	r4,1152(sp)
   49bc8:	a00b883a 	mov	r5,r20
   49bcc:	d9811a04 	addi	r6,sp,1128
   49bd0:	0048b080 	call	48b08 <__sprint_r.part.0>
   49bd4:	103f4b1e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49bd8:	d811883a 	mov	r8,sp
   49bdc:	003cd106 	br	48f24 <__alt_data_end+0xfffe2a64>
   49be0:	000b883a 	mov	r5,zero
   49be4:	2005883a 	mov	r2,r4
   49be8:	d811883a 	mov	r8,sp
   49bec:	003d5206 	br	49138 <__alt_data_end+0xfffe2c78>
   49bf0:	10803fcc 	andi	r2,r2,255
   49bf4:	1080201c 	xori	r2,r2,128
   49bf8:	10bfe004 	addi	r2,r2,-128
   49bfc:	01000c04 	movi	r4,48
   49c00:	11008e26 	beq	r2,r4,49e3c <___vfiprintf_internal_r+0x1220>
   49c04:	da812417 	ldw	r10,1168(sp)
   49c08:	dac11e17 	ldw	r11,1144(sp)
   49c0c:	193fffc5 	stb	r4,-1(r3)
   49c10:	52bfffc4 	addi	r10,r10,-1
   49c14:	da812415 	stw	r10,1168(sp)
   49c18:	5aa3c83a 	sub	r17,r11,r10
   49c1c:	003cfb06 	br	4900c <__alt_data_end+0xfffe2b4c>
   49c20:	d9012017 	ldw	r4,1152(sp)
   49c24:	a00b883a 	mov	r5,r20
   49c28:	d9811a04 	addi	r6,sp,1128
   49c2c:	da412b15 	stw	r9,1196(sp)
   49c30:	0048b080 	call	48b08 <__sprint_r.part.0>
   49c34:	da412b17 	ldw	r9,1196(sp)
   49c38:	103f321e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49c3c:	d9411b17 	ldw	r5,1132(sp)
   49c40:	d8c11c17 	ldw	r3,1136(sp)
   49c44:	d811883a 	mov	r8,sp
   49c48:	28800044 	addi	r2,r5,1
   49c4c:	003d3a06 	br	49138 <__alt_data_end+0xfffe2c78>
   49c50:	d9012017 	ldw	r4,1152(sp)
   49c54:	a00b883a 	mov	r5,r20
   49c58:	d9811a04 	addi	r6,sp,1128
   49c5c:	da412b15 	stw	r9,1196(sp)
   49c60:	db812a15 	stw	r14,1192(sp)
   49c64:	0048b080 	call	48b08 <__sprint_r.part.0>
   49c68:	da412b17 	ldw	r9,1196(sp)
   49c6c:	db812a17 	ldw	r14,1192(sp)
   49c70:	103f241e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49c74:	d9411b17 	ldw	r5,1132(sp)
   49c78:	d8c11c17 	ldw	r3,1136(sp)
   49c7c:	d811883a 	mov	r8,sp
   49c80:	28800044 	addi	r2,r5,1
   49c84:	003d1f06 	br	49104 <__alt_data_end+0xfffe2c44>
   49c88:	1800781e 	bne	r3,zero,49e6c <___vfiprintf_internal_r+0x1250>
   49c8c:	000b883a 	mov	r5,zero
   49c90:	00800044 	movi	r2,1
   49c94:	d811883a 	mov	r8,sp
   49c98:	003d2906 	br	49140 <__alt_data_end+0xfffe2c80>
   49c9c:	d9012017 	ldw	r4,1152(sp)
   49ca0:	a00b883a 	mov	r5,r20
   49ca4:	d9811a04 	addi	r6,sp,1128
   49ca8:	0048b080 	call	48b08 <__sprint_r.part.0>
   49cac:	103f151e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49cb0:	d8811b17 	ldw	r2,1132(sp)
   49cb4:	d8c11c17 	ldw	r3,1136(sp)
   49cb8:	d811883a 	mov	r8,sp
   49cbc:	10800044 	addi	r2,r2,1
   49cc0:	003d4406 	br	491d4 <__alt_data_end+0xfffe2d14>
   49cc4:	dac10a04 	addi	r11,sp,1064
   49cc8:	dac12415 	stw	r11,1168(sp)
   49ccc:	003ccf06 	br	4900c <__alt_data_end+0xfffe2b4c>
   49cd0:	04a5c83a 	sub	r18,zero,r18
   49cd4:	9004c03a 	cmpne	r2,r18,zero
   49cd8:	05adc83a 	sub	r22,zero,r22
   49cdc:	b0adc83a 	sub	r22,r22,r2
   49ce0:	03000b44 	movi	r12,45
   49ce4:	db011d85 	stb	r12,1142(sp)
   49ce8:	4823883a 	mov	r17,r9
   49cec:	00800044 	movi	r2,1
   49cf0:	9588b03a 	or	r4,r18,r22
   49cf4:	003cab06 	br	48fa4 <__alt_data_end+0xfffe2ae4>
   49cf8:	000b883a 	mov	r5,zero
   49cfc:	00800044 	movi	r2,1
   49d00:	d811883a 	mov	r8,sp
   49d04:	703d0c26 	beq	r14,zero,49138 <__alt_data_end+0xfffe2c78>
   49d08:	00c00084 	movi	r3,2
   49d0c:	d9011d04 	addi	r4,sp,1140
   49d10:	d9000015 	stw	r4,0(sp)
   49d14:	d8c00115 	stw	r3,4(sp)
   49d18:	003d0406 	br	4912c <__alt_data_end+0xfffe2c6c>
   49d1c:	80c00007 	ldb	r3,0(r16)
   49d20:	003c1d06 	br	48d98 <__alt_data_end+0xfffe28d8>
   49d24:	a880040c 	andi	r2,r21,16
   49d28:	1000091e 	bne	r2,zero,49d50 <___vfiprintf_internal_r+0x1134>
   49d2c:	aac0100c 	andi	r11,r21,64
   49d30:	58000726 	beq	r11,zero,49d50 <___vfiprintf_internal_r+0x1134>
   49d34:	da812117 	ldw	r10,1156(sp)
   49d38:	dac12217 	ldw	r11,1160(sp)
   49d3c:	50800017 	ldw	r2,0(r10)
   49d40:	52800104 	addi	r10,r10,4
   49d44:	da812115 	stw	r10,1156(sp)
   49d48:	12c0000d 	sth	r11,0(r2)
   49d4c:	003be806 	br	48cf0 <__alt_data_end+0xfffe2830>
   49d50:	da812117 	ldw	r10,1156(sp)
   49d54:	dac12217 	ldw	r11,1160(sp)
   49d58:	50800017 	ldw	r2,0(r10)
   49d5c:	52800104 	addi	r10,r10,4
   49d60:	da812115 	stw	r10,1156(sp)
   49d64:	12c00015 	stw	r11,0(r2)
   49d68:	003be106 	br	48cf0 <__alt_data_end+0xfffe2830>
   49d6c:	00800084 	movi	r2,2
   49d70:	003c8906 	br	48f98 <__alt_data_end+0xfffe2ad8>
   49d74:	a900100c 	andi	r4,r21,64
   49d78:	20001f26 	beq	r4,zero,49df8 <___vfiprintf_internal_r+0x11dc>
   49d7c:	da812117 	ldw	r10,1156(sp)
   49d80:	1480000b 	ldhu	r18,0(r2)
   49d84:	002d883a 	mov	r22,zero
   49d88:	52800104 	addi	r10,r10,4
   49d8c:	da812115 	stw	r10,1156(sp)
   49d90:	003dae06 	br	4944c <__alt_data_end+0xfffe2f8c>
   49d94:	d9012017 	ldw	r4,1152(sp)
   49d98:	a00b883a 	mov	r5,r20
   49d9c:	d9811a04 	addi	r6,sp,1128
   49da0:	da412b15 	stw	r9,1196(sp)
   49da4:	db812a15 	stw	r14,1192(sp)
   49da8:	0048b080 	call	48b08 <__sprint_r.part.0>
   49dac:	da412b17 	ldw	r9,1196(sp)
   49db0:	db812a17 	ldw	r14,1192(sp)
   49db4:	103ed31e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49db8:	d9411b17 	ldw	r5,1132(sp)
   49dbc:	d8c11c17 	ldw	r3,1136(sp)
   49dc0:	d811883a 	mov	r8,sp
   49dc4:	28800044 	addi	r2,r5,1
   49dc8:	003e7f06 	br	497c8 <__alt_data_end+0xfffe3308>
   49dcc:	9825883a 	mov	r18,r19
   49dd0:	003d3406 	br	492a4 <__alt_data_end+0xfffe2de4>
   49dd4:	4823883a 	mov	r17,r9
   49dd8:	003e0806 	br	495fc <__alt_data_end+0xfffe313c>
   49ddc:	d9012017 	ldw	r4,1152(sp)
   49de0:	a00b883a 	mov	r5,r20
   49de4:	d9811a04 	addi	r6,sp,1128
   49de8:	0048b080 	call	48b08 <__sprint_r.part.0>
   49dec:	103ec51e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49df0:	d8c11c17 	ldw	r3,1136(sp)
   49df4:	003ee006 	br	49978 <__alt_data_end+0xfffe34b8>
   49df8:	dac12117 	ldw	r11,1156(sp)
   49dfc:	14800017 	ldw	r18,0(r2)
   49e00:	002d883a 	mov	r22,zero
   49e04:	5ac00104 	addi	r11,r11,4
   49e08:	dac12115 	stw	r11,1156(sp)
   49e0c:	003d8f06 	br	4944c <__alt_data_end+0xfffe2f8c>
   49e10:	02c00174 	movhi	r11,5
   49e14:	5afce804 	addi	r11,r11,-3168
   49e18:	dac12315 	stw	r11,1164(sp)
   49e1c:	003ce306 	br	491ac <__alt_data_end+0xfffe2cec>
   49e20:	80c00043 	ldbu	r3,1(r16)
   49e24:	ad400814 	ori	r21,r21,32
   49e28:	84000044 	addi	r16,r16,1
   49e2c:	18c03fcc 	andi	r3,r3,255
   49e30:	18c0201c 	xori	r3,r3,128
   49e34:	18ffe004 	addi	r3,r3,-128
   49e38:	003bd706 	br	48d98 <__alt_data_end+0xfffe28d8>
   49e3c:	dac11e17 	ldw	r11,1144(sp)
   49e40:	d8c12417 	ldw	r3,1168(sp)
   49e44:	58e3c83a 	sub	r17,r11,r3
   49e48:	003c7006 	br	4900c <__alt_data_end+0xfffe2b4c>
   49e4c:	da012a15 	stw	r8,1192(sp)
   49e50:	00418f40 	call	418f4 <strlen>
   49e54:	1023883a 	mov	r17,r2
   49e58:	db011d83 	ldbu	r12,1142(sp)
   49e5c:	dd812115 	stw	r22,1156(sp)
   49e60:	0013883a 	mov	r9,zero
   49e64:	da012a17 	ldw	r8,1192(sp)
   49e68:	003c6806 	br	4900c <__alt_data_end+0xfffe2b4c>
   49e6c:	d9012017 	ldw	r4,1152(sp)
   49e70:	a00b883a 	mov	r5,r20
   49e74:	d9811a04 	addi	r6,sp,1128
   49e78:	da412b15 	stw	r9,1196(sp)
   49e7c:	0048b080 	call	48b08 <__sprint_r.part.0>
   49e80:	da412b17 	ldw	r9,1196(sp)
   49e84:	103e9f1e 	bne	r2,zero,49904 <__alt_data_end+0xfffe3444>
   49e88:	d9411b17 	ldw	r5,1132(sp)
   49e8c:	d8c11c17 	ldw	r3,1136(sp)
   49e90:	d811883a 	mov	r8,sp
   49e94:	28800044 	addi	r2,r5,1
   49e98:	003ca906 	br	49140 <__alt_data_end+0xfffe2c80>
   49e9c:	d9411b17 	ldw	r5,1132(sp)
   49ea0:	01000174 	movhi	r4,5
   49ea4:	213cec04 	addi	r4,r4,-3152
   49ea8:	d9012315 	stw	r4,1164(sp)
   49eac:	29400044 	addi	r5,r5,1
   49eb0:	003c8806 	br	490d4 <__alt_data_end+0xfffe2c14>
   49eb4:	00800184 	movi	r2,6
   49eb8:	1240012e 	bgeu	r2,r9,49ec0 <___vfiprintf_internal_r+0x12a4>
   49ebc:	1013883a 	mov	r9,r2
   49ec0:	4823883a 	mov	r17,r9
   49ec4:	4825883a 	mov	r18,r9
   49ec8:	48001516 	blt	r9,zero,49f20 <___vfiprintf_internal_r+0x1304>
   49ecc:	00800174 	movhi	r2,5
   49ed0:	10bc8c04 	addi	r2,r2,-3536
   49ed4:	dd812115 	stw	r22,1156(sp)
   49ed8:	d8812415 	stw	r2,1168(sp)
   49edc:	003d6f06 	br	4949c <__alt_data_end+0xfffe2fdc>
   49ee0:	d9411b17 	ldw	r5,1132(sp)
   49ee4:	02c00174 	movhi	r11,5
   49ee8:	5afcec04 	addi	r11,r11,-3152
   49eec:	dac12315 	stw	r11,1164(sp)
   49ef0:	29400044 	addi	r5,r5,1
   49ef4:	003ce106 	br	4927c <__alt_data_end+0xfffe2dbc>
   49ef8:	01000174 	movhi	r4,5
   49efc:	213ce804 	addi	r4,r4,-3168
   49f00:	d9012315 	stw	r4,1164(sp)
   49f04:	1009883a 	mov	r4,r2
   49f08:	003eca06 	br	49a34 <__alt_data_end+0xfffe3574>
   49f0c:	4823883a 	mov	r17,r9
   49f10:	db011d83 	ldbu	r12,1142(sp)
   49f14:	dd812115 	stw	r22,1156(sp)
   49f18:	0013883a 	mov	r9,zero
   49f1c:	003c3b06 	br	4900c <__alt_data_end+0xfffe2b4c>
   49f20:	0025883a 	mov	r18,zero
   49f24:	003fe906 	br	49ecc <__alt_data_end+0xfffe3a0c>
   49f28:	dac12117 	ldw	r11,1156(sp)
   49f2c:	8005883a 	mov	r2,r16
   49f30:	5021883a 	mov	r16,r10
   49f34:	5a400017 	ldw	r9,0(r11)
   49f38:	58c00104 	addi	r3,r11,4
   49f3c:	d8c12115 	stw	r3,1156(sp)
   49f40:	48000a16 	blt	r9,zero,49f6c <___vfiprintf_internal_r+0x1350>
   49f44:	10c00047 	ldb	r3,1(r2)
   49f48:	003b9306 	br	48d98 <__alt_data_end+0xfffe28d8>
   49f4c:	043fffc4 	movi	r16,-1
   49f50:	003d0206 	br	4935c <__alt_data_end+0xfffe2e9c>
   49f54:	94c0010e 	bge	r18,r19,49f5c <___vfiprintf_internal_r+0x1340>
   49f58:	9825883a 	mov	r18,r19
   49f5c:	da812217 	ldw	r10,1160(sp)
   49f60:	5495883a 	add	r10,r10,r18
   49f64:	da812215 	stw	r10,1160(sp)
   49f68:	003cd106 	br	492b0 <__alt_data_end+0xfffe2df0>
   49f6c:	027fffc4 	movi	r9,-1
   49f70:	10c00047 	ldb	r3,1(r2)
   49f74:	003b8806 	br	48d98 <__alt_data_end+0xfffe28d8>

00049f78 <__vfiprintf_internal>:
   49f78:	2007883a 	mov	r3,r4
   49f7c:	01000174 	movhi	r4,5
   49f80:	213fd604 	addi	r4,r4,-168
   49f84:	21000017 	ldw	r4,0(r4)
   49f88:	2805883a 	mov	r2,r5
   49f8c:	300f883a 	mov	r7,r6
   49f90:	180b883a 	mov	r5,r3
   49f94:	100d883a 	mov	r6,r2
   49f98:	0048c1c1 	jmpi	48c1c <___vfiprintf_internal_r>

00049f9c <__swbuf_r>:
   49f9c:	defffc04 	addi	sp,sp,-16
   49fa0:	dc800215 	stw	r18,8(sp)
   49fa4:	dc400115 	stw	r17,4(sp)
   49fa8:	dc000015 	stw	r16,0(sp)
   49fac:	dfc00315 	stw	ra,12(sp)
   49fb0:	2025883a 	mov	r18,r4
   49fb4:	2823883a 	mov	r17,r5
   49fb8:	3021883a 	mov	r16,r6
   49fbc:	20000226 	beq	r4,zero,49fc8 <__swbuf_r+0x2c>
   49fc0:	20800e17 	ldw	r2,56(r4)
   49fc4:	10004126 	beq	r2,zero,4a0cc <__swbuf_r+0x130>
   49fc8:	80c00617 	ldw	r3,24(r16)
   49fcc:	8180030b 	ldhu	r6,12(r16)
   49fd0:	80c00215 	stw	r3,8(r16)
   49fd4:	30c0020c 	andi	r3,r6,8
   49fd8:	18003526 	beq	r3,zero,4a0b0 <__swbuf_r+0x114>
   49fdc:	80c00417 	ldw	r3,16(r16)
   49fe0:	18003326 	beq	r3,zero,4a0b0 <__swbuf_r+0x114>
   49fe4:	3088000c 	andi	r2,r6,8192
   49fe8:	8c403fcc 	andi	r17,r17,255
   49fec:	10001726 	beq	r2,zero,4a04c <__swbuf_r+0xb0>
   49ff0:	80800017 	ldw	r2,0(r16)
   49ff4:	81000517 	ldw	r4,20(r16)
   49ff8:	10c7c83a 	sub	r3,r2,r3
   49ffc:	19001d0e 	bge	r3,r4,4a074 <__swbuf_r+0xd8>
   4a000:	18c00044 	addi	r3,r3,1
   4a004:	81400217 	ldw	r5,8(r16)
   4a008:	11000044 	addi	r4,r2,1
   4a00c:	81000015 	stw	r4,0(r16)
   4a010:	297fffc4 	addi	r5,r5,-1
   4a014:	81400215 	stw	r5,8(r16)
   4a018:	14400005 	stb	r17,0(r2)
   4a01c:	80800517 	ldw	r2,20(r16)
   4a020:	10c01d26 	beq	r2,r3,4a098 <__swbuf_r+0xfc>
   4a024:	8080030b 	ldhu	r2,12(r16)
   4a028:	1080004c 	andi	r2,r2,1
   4a02c:	1000181e 	bne	r2,zero,4a090 <__swbuf_r+0xf4>
   4a030:	8805883a 	mov	r2,r17
   4a034:	dfc00317 	ldw	ra,12(sp)
   4a038:	dc800217 	ldw	r18,8(sp)
   4a03c:	dc400117 	ldw	r17,4(sp)
   4a040:	dc000017 	ldw	r16,0(sp)
   4a044:	dec00404 	addi	sp,sp,16
   4a048:	f800283a 	ret
   4a04c:	81001917 	ldw	r4,100(r16)
   4a050:	00b7ffc4 	movi	r2,-8193
   4a054:	31880014 	ori	r6,r6,8192
   4a058:	2084703a 	and	r2,r4,r2
   4a05c:	80801915 	stw	r2,100(r16)
   4a060:	80800017 	ldw	r2,0(r16)
   4a064:	81000517 	ldw	r4,20(r16)
   4a068:	8180030d 	sth	r6,12(r16)
   4a06c:	10c7c83a 	sub	r3,r2,r3
   4a070:	193fe316 	blt	r3,r4,4a000 <__alt_data_end+0xfffe3b40>
   4a074:	9009883a 	mov	r4,r18
   4a078:	800b883a 	mov	r5,r16
   4a07c:	00454040 	call	45404 <_fflush_r>
   4a080:	1000091e 	bne	r2,zero,4a0a8 <__swbuf_r+0x10c>
   4a084:	80800017 	ldw	r2,0(r16)
   4a088:	00c00044 	movi	r3,1
   4a08c:	003fdd06 	br	4a004 <__alt_data_end+0xfffe3b44>
   4a090:	00800284 	movi	r2,10
   4a094:	88bfe61e 	bne	r17,r2,4a030 <__alt_data_end+0xfffe3b70>
   4a098:	9009883a 	mov	r4,r18
   4a09c:	800b883a 	mov	r5,r16
   4a0a0:	00454040 	call	45404 <_fflush_r>
   4a0a4:	103fe226 	beq	r2,zero,4a030 <__alt_data_end+0xfffe3b70>
   4a0a8:	00bfffc4 	movi	r2,-1
   4a0ac:	003fe106 	br	4a034 <__alt_data_end+0xfffe3b74>
   4a0b0:	9009883a 	mov	r4,r18
   4a0b4:	800b883a 	mov	r5,r16
   4a0b8:	00439ac0 	call	439ac <__swsetup_r>
   4a0bc:	1000051e 	bne	r2,zero,4a0d4 <__swbuf_r+0x138>
   4a0c0:	8180030b 	ldhu	r6,12(r16)
   4a0c4:	80c00417 	ldw	r3,16(r16)
   4a0c8:	003fc606 	br	49fe4 <__alt_data_end+0xfffe3b24>
   4a0cc:	00459ac0 	call	459ac <__sinit>
   4a0d0:	003fbd06 	br	49fc8 <__alt_data_end+0xfffe3b08>
   4a0d4:	80c0030b 	ldhu	r3,12(r16)
   4a0d8:	00bfffc4 	movi	r2,-1
   4a0dc:	18c01014 	ori	r3,r3,64
   4a0e0:	80c0030d 	sth	r3,12(r16)
   4a0e4:	00c00244 	movi	r3,9
   4a0e8:	90c00015 	stw	r3,0(r18)
   4a0ec:	003fd106 	br	4a034 <__alt_data_end+0xfffe3b74>

0004a0f0 <__swbuf>:
   4a0f0:	00c00174 	movhi	r3,5
   4a0f4:	18ffd604 	addi	r3,r3,-168
   4a0f8:	2005883a 	mov	r2,r4
   4a0fc:	19000017 	ldw	r4,0(r3)
   4a100:	280d883a 	mov	r6,r5
   4a104:	100b883a 	mov	r5,r2
   4a108:	0049f9c1 	jmpi	49f9c <__swbuf_r>

0004a10c <_write_r>:
   4a10c:	defffd04 	addi	sp,sp,-12
   4a110:	dc000015 	stw	r16,0(sp)
   4a114:	04000174 	movhi	r16,5
   4a118:	dc400115 	stw	r17,4(sp)
   4a11c:	84029a04 	addi	r16,r16,2664
   4a120:	2023883a 	mov	r17,r4
   4a124:	2809883a 	mov	r4,r5
   4a128:	300b883a 	mov	r5,r6
   4a12c:	380d883a 	mov	r6,r7
   4a130:	dfc00215 	stw	ra,8(sp)
   4a134:	80000015 	stw	zero,0(r16)
   4a138:	004e3e80 	call	4e3e8 <write>
   4a13c:	00ffffc4 	movi	r3,-1
   4a140:	10c00526 	beq	r2,r3,4a158 <_write_r+0x4c>
   4a144:	dfc00217 	ldw	ra,8(sp)
   4a148:	dc400117 	ldw	r17,4(sp)
   4a14c:	dc000017 	ldw	r16,0(sp)
   4a150:	dec00304 	addi	sp,sp,12
   4a154:	f800283a 	ret
   4a158:	80c00017 	ldw	r3,0(r16)
   4a15c:	183ff926 	beq	r3,zero,4a144 <__alt_data_end+0xfffe3c84>
   4a160:	88c00015 	stw	r3,0(r17)
   4a164:	003ff706 	br	4a144 <__alt_data_end+0xfffe3c84>

0004a168 <_close_r>:
   4a168:	defffd04 	addi	sp,sp,-12
   4a16c:	dc000015 	stw	r16,0(sp)
   4a170:	04000174 	movhi	r16,5
   4a174:	dc400115 	stw	r17,4(sp)
   4a178:	84029a04 	addi	r16,r16,2664
   4a17c:	2023883a 	mov	r17,r4
   4a180:	2809883a 	mov	r4,r5
   4a184:	dfc00215 	stw	ra,8(sp)
   4a188:	80000015 	stw	zero,0(r16)
   4a18c:	004da840 	call	4da84 <close>
   4a190:	00ffffc4 	movi	r3,-1
   4a194:	10c00526 	beq	r2,r3,4a1ac <_close_r+0x44>
   4a198:	dfc00217 	ldw	ra,8(sp)
   4a19c:	dc400117 	ldw	r17,4(sp)
   4a1a0:	dc000017 	ldw	r16,0(sp)
   4a1a4:	dec00304 	addi	sp,sp,12
   4a1a8:	f800283a 	ret
   4a1ac:	80c00017 	ldw	r3,0(r16)
   4a1b0:	183ff926 	beq	r3,zero,4a198 <__alt_data_end+0xfffe3cd8>
   4a1b4:	88c00015 	stw	r3,0(r17)
   4a1b8:	003ff706 	br	4a198 <__alt_data_end+0xfffe3cd8>

0004a1bc <_calloc_r>:
   4a1bc:	298b383a 	mul	r5,r5,r6
   4a1c0:	defffe04 	addi	sp,sp,-8
   4a1c4:	dc000015 	stw	r16,0(sp)
   4a1c8:	dfc00115 	stw	ra,4(sp)
   4a1cc:	00466bc0 	call	466bc <_malloc_r>
   4a1d0:	1021883a 	mov	r16,r2
   4a1d4:	10002826 	beq	r2,zero,4a278 <_calloc_r+0xbc>
   4a1d8:	11bfff17 	ldw	r6,-4(r2)
   4a1dc:	00bfff04 	movi	r2,-4
   4a1e0:	00c00904 	movi	r3,36
   4a1e4:	308c703a 	and	r6,r6,r2
   4a1e8:	308d883a 	add	r6,r6,r2
   4a1ec:	19801436 	bltu	r3,r6,4a240 <_calloc_r+0x84>
   4a1f0:	008004c4 	movi	r2,19
   4a1f4:	11800936 	bltu	r2,r6,4a21c <_calloc_r+0x60>
   4a1f8:	8005883a 	mov	r2,r16
   4a1fc:	10000015 	stw	zero,0(r2)
   4a200:	10000115 	stw	zero,4(r2)
   4a204:	10000215 	stw	zero,8(r2)
   4a208:	8005883a 	mov	r2,r16
   4a20c:	dfc00117 	ldw	ra,4(sp)
   4a210:	dc000017 	ldw	r16,0(sp)
   4a214:	dec00204 	addi	sp,sp,8
   4a218:	f800283a 	ret
   4a21c:	80000015 	stw	zero,0(r16)
   4a220:	80000115 	stw	zero,4(r16)
   4a224:	008006c4 	movi	r2,27
   4a228:	11800d2e 	bgeu	r2,r6,4a260 <_calloc_r+0xa4>
   4a22c:	80000215 	stw	zero,8(r16)
   4a230:	80000315 	stw	zero,12(r16)
   4a234:	30c00c26 	beq	r6,r3,4a268 <_calloc_r+0xac>
   4a238:	80800404 	addi	r2,r16,16
   4a23c:	003fef06 	br	4a1fc <__alt_data_end+0xfffe3d3c>
   4a240:	8009883a 	mov	r4,r16
   4a244:	000b883a 	mov	r5,zero
   4a248:	00470a80 	call	470a8 <memset>
   4a24c:	8005883a 	mov	r2,r16
   4a250:	dfc00117 	ldw	ra,4(sp)
   4a254:	dc000017 	ldw	r16,0(sp)
   4a258:	dec00204 	addi	sp,sp,8
   4a25c:	f800283a 	ret
   4a260:	80800204 	addi	r2,r16,8
   4a264:	003fe506 	br	4a1fc <__alt_data_end+0xfffe3d3c>
   4a268:	80000415 	stw	zero,16(r16)
   4a26c:	80800604 	addi	r2,r16,24
   4a270:	80000515 	stw	zero,20(r16)
   4a274:	003fe106 	br	4a1fc <__alt_data_end+0xfffe3d3c>
   4a278:	0005883a 	mov	r2,zero
   4a27c:	003fe306 	br	4a20c <__alt_data_end+0xfffe3d4c>

0004a280 <_fclose_r>:
   4a280:	28003226 	beq	r5,zero,4a34c <_fclose_r+0xcc>
   4a284:	defffc04 	addi	sp,sp,-16
   4a288:	dc400115 	stw	r17,4(sp)
   4a28c:	2023883a 	mov	r17,r4
   4a290:	dc000015 	stw	r16,0(sp)
   4a294:	dfc00315 	stw	ra,12(sp)
   4a298:	dc800215 	stw	r18,8(sp)
   4a29c:	2821883a 	mov	r16,r5
   4a2a0:	00459bc0 	call	459bc <__sfp_lock_acquire>
   4a2a4:	88000226 	beq	r17,zero,4a2b0 <_fclose_r+0x30>
   4a2a8:	88800e17 	ldw	r2,56(r17)
   4a2ac:	10002926 	beq	r2,zero,4a354 <_fclose_r+0xd4>
   4a2b0:	8080030f 	ldh	r2,12(r16)
   4a2b4:	10002226 	beq	r2,zero,4a340 <_fclose_r+0xc0>
   4a2b8:	8809883a 	mov	r4,r17
   4a2bc:	800b883a 	mov	r5,r16
   4a2c0:	00454040 	call	45404 <_fflush_r>
   4a2c4:	1025883a 	mov	r18,r2
   4a2c8:	80800b17 	ldw	r2,44(r16)
   4a2cc:	10000426 	beq	r2,zero,4a2e0 <_fclose_r+0x60>
   4a2d0:	81400717 	ldw	r5,28(r16)
   4a2d4:	8809883a 	mov	r4,r17
   4a2d8:	103ee83a 	callr	r2
   4a2dc:	10002616 	blt	r2,zero,4a378 <_fclose_r+0xf8>
   4a2e0:	8080030b 	ldhu	r2,12(r16)
   4a2e4:	1080200c 	andi	r2,r2,128
   4a2e8:	10001f1e 	bne	r2,zero,4a368 <_fclose_r+0xe8>
   4a2ec:	81400c17 	ldw	r5,48(r16)
   4a2f0:	28000526 	beq	r5,zero,4a308 <_fclose_r+0x88>
   4a2f4:	80801004 	addi	r2,r16,64
   4a2f8:	28800226 	beq	r5,r2,4a304 <_fclose_r+0x84>
   4a2fc:	8809883a 	mov	r4,r17
   4a300:	0045b200 	call	45b20 <_free_r>
   4a304:	80000c15 	stw	zero,48(r16)
   4a308:	81401117 	ldw	r5,68(r16)
   4a30c:	28000326 	beq	r5,zero,4a31c <_fclose_r+0x9c>
   4a310:	8809883a 	mov	r4,r17
   4a314:	0045b200 	call	45b20 <_free_r>
   4a318:	80001115 	stw	zero,68(r16)
   4a31c:	8000030d 	sth	zero,12(r16)
   4a320:	00459c00 	call	459c0 <__sfp_lock_release>
   4a324:	9005883a 	mov	r2,r18
   4a328:	dfc00317 	ldw	ra,12(sp)
   4a32c:	dc800217 	ldw	r18,8(sp)
   4a330:	dc400117 	ldw	r17,4(sp)
   4a334:	dc000017 	ldw	r16,0(sp)
   4a338:	dec00404 	addi	sp,sp,16
   4a33c:	f800283a 	ret
   4a340:	00459c00 	call	459c0 <__sfp_lock_release>
   4a344:	0005883a 	mov	r2,zero
   4a348:	003ff706 	br	4a328 <__alt_data_end+0xfffe3e68>
   4a34c:	0005883a 	mov	r2,zero
   4a350:	f800283a 	ret
   4a354:	8809883a 	mov	r4,r17
   4a358:	00459ac0 	call	459ac <__sinit>
   4a35c:	8080030f 	ldh	r2,12(r16)
   4a360:	103fd51e 	bne	r2,zero,4a2b8 <__alt_data_end+0xfffe3df8>
   4a364:	003ff606 	br	4a340 <__alt_data_end+0xfffe3e80>
   4a368:	81400417 	ldw	r5,16(r16)
   4a36c:	8809883a 	mov	r4,r17
   4a370:	0045b200 	call	45b20 <_free_r>
   4a374:	003fdd06 	br	4a2ec <__alt_data_end+0xfffe3e2c>
   4a378:	04bfffc4 	movi	r18,-1
   4a37c:	003fd806 	br	4a2e0 <__alt_data_end+0xfffe3e20>

0004a380 <fclose>:
   4a380:	00800174 	movhi	r2,5
   4a384:	10bfd604 	addi	r2,r2,-168
   4a388:	200b883a 	mov	r5,r4
   4a38c:	11000017 	ldw	r4,0(r2)
   4a390:	004a2801 	jmpi	4a280 <_fclose_r>

0004a394 <_fputwc_r>:
   4a394:	3080030b 	ldhu	r2,12(r6)
   4a398:	defff804 	addi	sp,sp,-32
   4a39c:	dcc00415 	stw	r19,16(sp)
   4a3a0:	dc800315 	stw	r18,12(sp)
   4a3a4:	dc000115 	stw	r16,4(sp)
   4a3a8:	dfc00715 	stw	ra,28(sp)
   4a3ac:	dd400615 	stw	r21,24(sp)
   4a3b0:	dd000515 	stw	r20,20(sp)
   4a3b4:	dc400215 	stw	r17,8(sp)
   4a3b8:	10c8000c 	andi	r3,r2,8192
   4a3bc:	3021883a 	mov	r16,r6
   4a3c0:	2027883a 	mov	r19,r4
   4a3c4:	2825883a 	mov	r18,r5
   4a3c8:	1800051e 	bne	r3,zero,4a3e0 <_fputwc_r+0x4c>
   4a3cc:	30c01917 	ldw	r3,100(r6)
   4a3d0:	10880014 	ori	r2,r2,8192
   4a3d4:	3080030d 	sth	r2,12(r6)
   4a3d8:	18880014 	ori	r2,r3,8192
   4a3dc:	30801915 	stw	r2,100(r6)
   4a3e0:	00464ac0 	call	464ac <__locale_mb_cur_max>
   4a3e4:	00c00044 	movi	r3,1
   4a3e8:	10c03e26 	beq	r2,r3,4a4e4 <_fputwc_r+0x150>
   4a3ec:	9809883a 	mov	r4,r19
   4a3f0:	d80b883a 	mov	r5,sp
   4a3f4:	900d883a 	mov	r6,r18
   4a3f8:	81c01704 	addi	r7,r16,92
   4a3fc:	004a6d40 	call	4a6d4 <_wcrtomb_r>
   4a400:	1029883a 	mov	r20,r2
   4a404:	00bfffc4 	movi	r2,-1
   4a408:	a0802026 	beq	r20,r2,4a48c <_fputwc_r+0xf8>
   4a40c:	d9400003 	ldbu	r5,0(sp)
   4a410:	a0001c26 	beq	r20,zero,4a484 <_fputwc_r+0xf0>
   4a414:	0023883a 	mov	r17,zero
   4a418:	05400284 	movi	r21,10
   4a41c:	00000906 	br	4a444 <_fputwc_r+0xb0>
   4a420:	80800017 	ldw	r2,0(r16)
   4a424:	11400005 	stb	r5,0(r2)
   4a428:	80c00017 	ldw	r3,0(r16)
   4a42c:	18c00044 	addi	r3,r3,1
   4a430:	80c00015 	stw	r3,0(r16)
   4a434:	8c400044 	addi	r17,r17,1
   4a438:	dc45883a 	add	r2,sp,r17
   4a43c:	8d00112e 	bgeu	r17,r20,4a484 <_fputwc_r+0xf0>
   4a440:	11400003 	ldbu	r5,0(r2)
   4a444:	80c00217 	ldw	r3,8(r16)
   4a448:	18ffffc4 	addi	r3,r3,-1
   4a44c:	80c00215 	stw	r3,8(r16)
   4a450:	183ff30e 	bge	r3,zero,4a420 <__alt_data_end+0xfffe3f60>
   4a454:	80800617 	ldw	r2,24(r16)
   4a458:	18801916 	blt	r3,r2,4a4c0 <_fputwc_r+0x12c>
   4a45c:	80800017 	ldw	r2,0(r16)
   4a460:	11400005 	stb	r5,0(r2)
   4a464:	80800017 	ldw	r2,0(r16)
   4a468:	10c00003 	ldbu	r3,0(r2)
   4a46c:	10800044 	addi	r2,r2,1
   4a470:	1d402326 	beq	r3,r21,4a500 <_fputwc_r+0x16c>
   4a474:	80800015 	stw	r2,0(r16)
   4a478:	8c400044 	addi	r17,r17,1
   4a47c:	dc45883a 	add	r2,sp,r17
   4a480:	8d3fef36 	bltu	r17,r20,4a440 <__alt_data_end+0xfffe3f80>
   4a484:	9005883a 	mov	r2,r18
   4a488:	00000406 	br	4a49c <_fputwc_r+0x108>
   4a48c:	80c0030b 	ldhu	r3,12(r16)
   4a490:	a005883a 	mov	r2,r20
   4a494:	18c01014 	ori	r3,r3,64
   4a498:	80c0030d 	sth	r3,12(r16)
   4a49c:	dfc00717 	ldw	ra,28(sp)
   4a4a0:	dd400617 	ldw	r21,24(sp)
   4a4a4:	dd000517 	ldw	r20,20(sp)
   4a4a8:	dcc00417 	ldw	r19,16(sp)
   4a4ac:	dc800317 	ldw	r18,12(sp)
   4a4b0:	dc400217 	ldw	r17,8(sp)
   4a4b4:	dc000117 	ldw	r16,4(sp)
   4a4b8:	dec00804 	addi	sp,sp,32
   4a4bc:	f800283a 	ret
   4a4c0:	9809883a 	mov	r4,r19
   4a4c4:	29403fcc 	andi	r5,r5,255
   4a4c8:	800d883a 	mov	r6,r16
   4a4cc:	0049f9c0 	call	49f9c <__swbuf_r>
   4a4d0:	10bfffe0 	cmpeqi	r2,r2,-1
   4a4d4:	10803fcc 	andi	r2,r2,255
   4a4d8:	103fd626 	beq	r2,zero,4a434 <__alt_data_end+0xfffe3f74>
   4a4dc:	00bfffc4 	movi	r2,-1
   4a4e0:	003fee06 	br	4a49c <__alt_data_end+0xfffe3fdc>
   4a4e4:	90ffffc4 	addi	r3,r18,-1
   4a4e8:	01003f84 	movi	r4,254
   4a4ec:	20ffbf36 	bltu	r4,r3,4a3ec <__alt_data_end+0xfffe3f2c>
   4a4f0:	900b883a 	mov	r5,r18
   4a4f4:	dc800005 	stb	r18,0(sp)
   4a4f8:	1029883a 	mov	r20,r2
   4a4fc:	003fc506 	br	4a414 <__alt_data_end+0xfffe3f54>
   4a500:	9809883a 	mov	r4,r19
   4a504:	a80b883a 	mov	r5,r21
   4a508:	800d883a 	mov	r6,r16
   4a50c:	0049f9c0 	call	49f9c <__swbuf_r>
   4a510:	10bfffe0 	cmpeqi	r2,r2,-1
   4a514:	003fef06 	br	4a4d4 <__alt_data_end+0xfffe4014>

0004a518 <fputwc>:
   4a518:	defffc04 	addi	sp,sp,-16
   4a51c:	dc000115 	stw	r16,4(sp)
   4a520:	04000174 	movhi	r16,5
   4a524:	843fd604 	addi	r16,r16,-168
   4a528:	dc400215 	stw	r17,8(sp)
   4a52c:	2023883a 	mov	r17,r4
   4a530:	81000017 	ldw	r4,0(r16)
   4a534:	dfc00315 	stw	ra,12(sp)
   4a538:	280d883a 	mov	r6,r5
   4a53c:	20000626 	beq	r4,zero,4a558 <fputwc+0x40>
   4a540:	20800e17 	ldw	r2,56(r4)
   4a544:	1000041e 	bne	r2,zero,4a558 <fputwc+0x40>
   4a548:	d9400015 	stw	r5,0(sp)
   4a54c:	00459ac0 	call	459ac <__sinit>
   4a550:	81000017 	ldw	r4,0(r16)
   4a554:	d9800017 	ldw	r6,0(sp)
   4a558:	880b883a 	mov	r5,r17
   4a55c:	dfc00317 	ldw	ra,12(sp)
   4a560:	dc400217 	ldw	r17,8(sp)
   4a564:	dc000117 	ldw	r16,4(sp)
   4a568:	dec00404 	addi	sp,sp,16
   4a56c:	004a3941 	jmpi	4a394 <_fputwc_r>

0004a570 <_fstat_r>:
   4a570:	defffd04 	addi	sp,sp,-12
   4a574:	dc000015 	stw	r16,0(sp)
   4a578:	04000174 	movhi	r16,5
   4a57c:	dc400115 	stw	r17,4(sp)
   4a580:	84029a04 	addi	r16,r16,2664
   4a584:	2023883a 	mov	r17,r4
   4a588:	2809883a 	mov	r4,r5
   4a58c:	300b883a 	mov	r5,r6
   4a590:	dfc00215 	stw	ra,8(sp)
   4a594:	80000015 	stw	zero,0(r16)
   4a598:	004db740 	call	4db74 <fstat>
   4a59c:	00ffffc4 	movi	r3,-1
   4a5a0:	10c00526 	beq	r2,r3,4a5b8 <_fstat_r+0x48>
   4a5a4:	dfc00217 	ldw	ra,8(sp)
   4a5a8:	dc400117 	ldw	r17,4(sp)
   4a5ac:	dc000017 	ldw	r16,0(sp)
   4a5b0:	dec00304 	addi	sp,sp,12
   4a5b4:	f800283a 	ret
   4a5b8:	80c00017 	ldw	r3,0(r16)
   4a5bc:	183ff926 	beq	r3,zero,4a5a4 <__alt_data_end+0xfffe40e4>
   4a5c0:	88c00015 	stw	r3,0(r17)
   4a5c4:	003ff706 	br	4a5a4 <__alt_data_end+0xfffe40e4>

0004a5c8 <_isatty_r>:
   4a5c8:	defffd04 	addi	sp,sp,-12
   4a5cc:	dc000015 	stw	r16,0(sp)
   4a5d0:	04000174 	movhi	r16,5
   4a5d4:	dc400115 	stw	r17,4(sp)
   4a5d8:	84029a04 	addi	r16,r16,2664
   4a5dc:	2023883a 	mov	r17,r4
   4a5e0:	2809883a 	mov	r4,r5
   4a5e4:	dfc00215 	stw	ra,8(sp)
   4a5e8:	80000015 	stw	zero,0(r16)
   4a5ec:	004dd540 	call	4dd54 <isatty>
   4a5f0:	00ffffc4 	movi	r3,-1
   4a5f4:	10c00526 	beq	r2,r3,4a60c <_isatty_r+0x44>
   4a5f8:	dfc00217 	ldw	ra,8(sp)
   4a5fc:	dc400117 	ldw	r17,4(sp)
   4a600:	dc000017 	ldw	r16,0(sp)
   4a604:	dec00304 	addi	sp,sp,12
   4a608:	f800283a 	ret
   4a60c:	80c00017 	ldw	r3,0(r16)
   4a610:	183ff926 	beq	r3,zero,4a5f8 <__alt_data_end+0xfffe4138>
   4a614:	88c00015 	stw	r3,0(r17)
   4a618:	003ff706 	br	4a5f8 <__alt_data_end+0xfffe4138>

0004a61c <_lseek_r>:
   4a61c:	defffd04 	addi	sp,sp,-12
   4a620:	dc000015 	stw	r16,0(sp)
   4a624:	04000174 	movhi	r16,5
   4a628:	dc400115 	stw	r17,4(sp)
   4a62c:	84029a04 	addi	r16,r16,2664
   4a630:	2023883a 	mov	r17,r4
   4a634:	2809883a 	mov	r4,r5
   4a638:	300b883a 	mov	r5,r6
   4a63c:	380d883a 	mov	r6,r7
   4a640:	dfc00215 	stw	ra,8(sp)
   4a644:	80000015 	stw	zero,0(r16)
   4a648:	004def40 	call	4def4 <lseek>
   4a64c:	00ffffc4 	movi	r3,-1
   4a650:	10c00526 	beq	r2,r3,4a668 <_lseek_r+0x4c>
   4a654:	dfc00217 	ldw	ra,8(sp)
   4a658:	dc400117 	ldw	r17,4(sp)
   4a65c:	dc000017 	ldw	r16,0(sp)
   4a660:	dec00304 	addi	sp,sp,12
   4a664:	f800283a 	ret
   4a668:	80c00017 	ldw	r3,0(r16)
   4a66c:	183ff926 	beq	r3,zero,4a654 <__alt_data_end+0xfffe4194>
   4a670:	88c00015 	stw	r3,0(r17)
   4a674:	003ff706 	br	4a654 <__alt_data_end+0xfffe4194>

0004a678 <_read_r>:
   4a678:	defffd04 	addi	sp,sp,-12
   4a67c:	dc000015 	stw	r16,0(sp)
   4a680:	04000174 	movhi	r16,5
   4a684:	dc400115 	stw	r17,4(sp)
   4a688:	84029a04 	addi	r16,r16,2664
   4a68c:	2023883a 	mov	r17,r4
   4a690:	2809883a 	mov	r4,r5
   4a694:	300b883a 	mov	r5,r6
   4a698:	380d883a 	mov	r6,r7
   4a69c:	dfc00215 	stw	ra,8(sp)
   4a6a0:	80000015 	stw	zero,0(r16)
   4a6a4:	004e1600 	call	4e160 <read>
   4a6a8:	00ffffc4 	movi	r3,-1
   4a6ac:	10c00526 	beq	r2,r3,4a6c4 <_read_r+0x4c>
   4a6b0:	dfc00217 	ldw	ra,8(sp)
   4a6b4:	dc400117 	ldw	r17,4(sp)
   4a6b8:	dc000017 	ldw	r16,0(sp)
   4a6bc:	dec00304 	addi	sp,sp,12
   4a6c0:	f800283a 	ret
   4a6c4:	80c00017 	ldw	r3,0(r16)
   4a6c8:	183ff926 	beq	r3,zero,4a6b0 <__alt_data_end+0xfffe41f0>
   4a6cc:	88c00015 	stw	r3,0(r17)
   4a6d0:	003ff706 	br	4a6b0 <__alt_data_end+0xfffe41f0>

0004a6d4 <_wcrtomb_r>:
   4a6d4:	defff604 	addi	sp,sp,-40
   4a6d8:	00800174 	movhi	r2,5
   4a6dc:	dc800815 	stw	r18,32(sp)
   4a6e0:	dc400715 	stw	r17,28(sp)
   4a6e4:	dc000615 	stw	r16,24(sp)
   4a6e8:	10bfda04 	addi	r2,r2,-152
   4a6ec:	dfc00915 	stw	ra,36(sp)
   4a6f0:	2021883a 	mov	r16,r4
   4a6f4:	3823883a 	mov	r17,r7
   4a6f8:	14800017 	ldw	r18,0(r2)
   4a6fc:	28001426 	beq	r5,zero,4a750 <_wcrtomb_r+0x7c>
   4a700:	d9400415 	stw	r5,16(sp)
   4a704:	d9800515 	stw	r6,20(sp)
   4a708:	00464a00 	call	464a0 <__locale_charset>
   4a70c:	d9400417 	ldw	r5,16(sp)
   4a710:	d9800517 	ldw	r6,20(sp)
   4a714:	8009883a 	mov	r4,r16
   4a718:	dc400015 	stw	r17,0(sp)
   4a71c:	100f883a 	mov	r7,r2
   4a720:	903ee83a 	callr	r18
   4a724:	00ffffc4 	movi	r3,-1
   4a728:	10c0031e 	bne	r2,r3,4a738 <_wcrtomb_r+0x64>
   4a72c:	88000015 	stw	zero,0(r17)
   4a730:	00c02284 	movi	r3,138
   4a734:	80c00015 	stw	r3,0(r16)
   4a738:	dfc00917 	ldw	ra,36(sp)
   4a73c:	dc800817 	ldw	r18,32(sp)
   4a740:	dc400717 	ldw	r17,28(sp)
   4a744:	dc000617 	ldw	r16,24(sp)
   4a748:	dec00a04 	addi	sp,sp,40
   4a74c:	f800283a 	ret
   4a750:	00464a00 	call	464a0 <__locale_charset>
   4a754:	8009883a 	mov	r4,r16
   4a758:	dc400015 	stw	r17,0(sp)
   4a75c:	d9400104 	addi	r5,sp,4
   4a760:	000d883a 	mov	r6,zero
   4a764:	100f883a 	mov	r7,r2
   4a768:	903ee83a 	callr	r18
   4a76c:	003fed06 	br	4a724 <__alt_data_end+0xfffe4264>

0004a770 <wcrtomb>:
   4a770:	defff504 	addi	sp,sp,-44
   4a774:	dc400515 	stw	r17,20(sp)
   4a778:	dc000415 	stw	r16,16(sp)
   4a77c:	dfc00a15 	stw	ra,40(sp)
   4a780:	dd400915 	stw	r21,36(sp)
   4a784:	dd000815 	stw	r20,32(sp)
   4a788:	dcc00715 	stw	r19,28(sp)
   4a78c:	dc800615 	stw	r18,24(sp)
   4a790:	2021883a 	mov	r16,r4
   4a794:	3023883a 	mov	r17,r6
   4a798:	20001d26 	beq	r4,zero,4a810 <wcrtomb+0xa0>
   4a79c:	04800174 	movhi	r18,5
   4a7a0:	94bfd604 	addi	r18,r18,-168
   4a7a4:	00800174 	movhi	r2,5
   4a7a8:	95400017 	ldw	r21,0(r18)
   4a7ac:	10bfda04 	addi	r2,r2,-152
   4a7b0:	15000017 	ldw	r20,0(r2)
   4a7b4:	2827883a 	mov	r19,r5
   4a7b8:	00464a00 	call	464a0 <__locale_charset>
   4a7bc:	a809883a 	mov	r4,r21
   4a7c0:	dc400015 	stw	r17,0(sp)
   4a7c4:	800b883a 	mov	r5,r16
   4a7c8:	980d883a 	mov	r6,r19
   4a7cc:	100f883a 	mov	r7,r2
   4a7d0:	a03ee83a 	callr	r20
   4a7d4:	00ffffc4 	movi	r3,-1
   4a7d8:	10c0041e 	bne	r2,r3,4a7ec <wcrtomb+0x7c>
   4a7dc:	90c00017 	ldw	r3,0(r18)
   4a7e0:	01002284 	movi	r4,138
   4a7e4:	88000015 	stw	zero,0(r17)
   4a7e8:	19000015 	stw	r4,0(r3)
   4a7ec:	dfc00a17 	ldw	ra,40(sp)
   4a7f0:	dd400917 	ldw	r21,36(sp)
   4a7f4:	dd000817 	ldw	r20,32(sp)
   4a7f8:	dcc00717 	ldw	r19,28(sp)
   4a7fc:	dc800617 	ldw	r18,24(sp)
   4a800:	dc400517 	ldw	r17,20(sp)
   4a804:	dc000417 	ldw	r16,16(sp)
   4a808:	dec00b04 	addi	sp,sp,44
   4a80c:	f800283a 	ret
   4a810:	04800174 	movhi	r18,5
   4a814:	94bfd604 	addi	r18,r18,-168
   4a818:	00800174 	movhi	r2,5
   4a81c:	94c00017 	ldw	r19,0(r18)
   4a820:	10bfda04 	addi	r2,r2,-152
   4a824:	14000017 	ldw	r16,0(r2)
   4a828:	00464a00 	call	464a0 <__locale_charset>
   4a82c:	9809883a 	mov	r4,r19
   4a830:	dc400015 	stw	r17,0(sp)
   4a834:	d9400104 	addi	r5,sp,4
   4a838:	000d883a 	mov	r6,zero
   4a83c:	100f883a 	mov	r7,r2
   4a840:	803ee83a 	callr	r16
   4a844:	003fe306 	br	4a7d4 <__alt_data_end+0xfffe4314>

0004a848 <__ascii_wctomb>:
   4a848:	28000526 	beq	r5,zero,4a860 <__ascii_wctomb+0x18>
   4a84c:	00803fc4 	movi	r2,255
   4a850:	11800536 	bltu	r2,r6,4a868 <__ascii_wctomb+0x20>
   4a854:	29800005 	stb	r6,0(r5)
   4a858:	00800044 	movi	r2,1
   4a85c:	f800283a 	ret
   4a860:	0005883a 	mov	r2,zero
   4a864:	f800283a 	ret
   4a868:	00802284 	movi	r2,138
   4a86c:	20800015 	stw	r2,0(r4)
   4a870:	00bfffc4 	movi	r2,-1
   4a874:	f800283a 	ret

0004a878 <_wctomb_r>:
   4a878:	00800174 	movhi	r2,5
   4a87c:	defff904 	addi	sp,sp,-28
   4a880:	10bfda04 	addi	r2,r2,-152
   4a884:	dfc00615 	stw	ra,24(sp)
   4a888:	dc400515 	stw	r17,20(sp)
   4a88c:	dc000415 	stw	r16,16(sp)
   4a890:	3823883a 	mov	r17,r7
   4a894:	14000017 	ldw	r16,0(r2)
   4a898:	d9000115 	stw	r4,4(sp)
   4a89c:	d9400215 	stw	r5,8(sp)
   4a8a0:	d9800315 	stw	r6,12(sp)
   4a8a4:	00464a00 	call	464a0 <__locale_charset>
   4a8a8:	d9000117 	ldw	r4,4(sp)
   4a8ac:	d9400217 	ldw	r5,8(sp)
   4a8b0:	d9800317 	ldw	r6,12(sp)
   4a8b4:	dc400015 	stw	r17,0(sp)
   4a8b8:	100f883a 	mov	r7,r2
   4a8bc:	803ee83a 	callr	r16
   4a8c0:	dfc00617 	ldw	ra,24(sp)
   4a8c4:	dc400517 	ldw	r17,20(sp)
   4a8c8:	dc000417 	ldw	r16,16(sp)
   4a8cc:	dec00704 	addi	sp,sp,28
   4a8d0:	f800283a 	ret

0004a8d4 <__muldi3>:
   4a8d4:	223fffcc 	andi	r8,r4,65535
   4a8d8:	2012d43a 	srli	r9,r4,16
   4a8dc:	32bfffcc 	andi	r10,r6,65535
   4a8e0:	3006d43a 	srli	r3,r6,16
   4a8e4:	5217383a 	mul	r11,r10,r8
   4a8e8:	5255383a 	mul	r10,r10,r9
   4a8ec:	1a05383a 	mul	r2,r3,r8
   4a8f0:	5810d43a 	srli	r8,r11,16
   4a8f4:	5085883a 	add	r2,r10,r2
   4a8f8:	1205883a 	add	r2,r2,r8
   4a8fc:	1a51383a 	mul	r8,r3,r9
   4a900:	1280022e 	bgeu	r2,r10,4a90c <__muldi3+0x38>
   4a904:	00c00074 	movhi	r3,1
   4a908:	40d1883a 	add	r8,r8,r3
   4a90c:	1006d43a 	srli	r3,r2,16
   4a910:	21cf383a 	mul	r7,r4,r7
   4a914:	314b383a 	mul	r5,r6,r5
   4a918:	1004943a 	slli	r2,r2,16
   4a91c:	40c7883a 	add	r3,r8,r3
   4a920:	5affffcc 	andi	r11,r11,65535
   4a924:	3949883a 	add	r4,r7,r5
   4a928:	12c5883a 	add	r2,r2,r11
   4a92c:	20c7883a 	add	r3,r4,r3
   4a930:	f800283a 	ret

0004a934 <__udivdi3>:
   4a934:	defff504 	addi	sp,sp,-44
   4a938:	dcc00415 	stw	r19,16(sp)
   4a93c:	dc000115 	stw	r16,4(sp)
   4a940:	dfc00a15 	stw	ra,40(sp)
   4a944:	df000915 	stw	fp,36(sp)
   4a948:	ddc00815 	stw	r23,32(sp)
   4a94c:	dd800715 	stw	r22,28(sp)
   4a950:	dd400615 	stw	r21,24(sp)
   4a954:	dd000515 	stw	r20,20(sp)
   4a958:	dc800315 	stw	r18,12(sp)
   4a95c:	dc400215 	stw	r17,8(sp)
   4a960:	2027883a 	mov	r19,r4
   4a964:	2821883a 	mov	r16,r5
   4a968:	3800421e 	bne	r7,zero,4aa74 <__udivdi3+0x140>
   4a96c:	3025883a 	mov	r18,r6
   4a970:	2023883a 	mov	r17,r4
   4a974:	2980542e 	bgeu	r5,r6,4aac8 <__udivdi3+0x194>
   4a978:	00bfffd4 	movui	r2,65535
   4a97c:	282d883a 	mov	r22,r5
   4a980:	1180a836 	bltu	r2,r6,4ac24 <__udivdi3+0x2f0>
   4a984:	00803fc4 	movi	r2,255
   4a988:	1181422e 	bgeu	r2,r6,4ae94 <__udivdi3+0x560>
   4a98c:	00800204 	movi	r2,8
   4a990:	1007883a 	mov	r3,r2
   4a994:	3084d83a 	srl	r2,r6,r2
   4a998:	01000174 	movhi	r4,5
   4a99c:	213cf004 	addi	r4,r4,-3136
   4a9a0:	2085883a 	add	r2,r4,r2
   4a9a4:	10800003 	ldbu	r2,0(r2)
   4a9a8:	10c7883a 	add	r3,r2,r3
   4a9ac:	00800804 	movi	r2,32
   4a9b0:	10c5c83a 	sub	r2,r2,r3
   4a9b4:	10000526 	beq	r2,zero,4a9cc <__udivdi3+0x98>
   4a9b8:	80a0983a 	sll	r16,r16,r2
   4a9bc:	98c6d83a 	srl	r3,r19,r3
   4a9c0:	30a4983a 	sll	r18,r6,r2
   4a9c4:	98a2983a 	sll	r17,r19,r2
   4a9c8:	80ecb03a 	or	r22,r16,r3
   4a9cc:	902ad43a 	srli	r21,r18,16
   4a9d0:	b009883a 	mov	r4,r22
   4a9d4:	953fffcc 	andi	r20,r18,65535
   4a9d8:	a80b883a 	mov	r5,r21
   4a9dc:	00415e40 	call	415e4 <__umodsi3>
   4a9e0:	b009883a 	mov	r4,r22
   4a9e4:	a80b883a 	mov	r5,r21
   4a9e8:	1027883a 	mov	r19,r2
   4a9ec:	00415dc0 	call	415dc <__udivsi3>
   4a9f0:	1021883a 	mov	r16,r2
   4a9f4:	8806d43a 	srli	r3,r17,16
   4a9f8:	9804943a 	slli	r2,r19,16
   4a9fc:	8527383a 	mul	r19,r16,r20
   4aa00:	10c4b03a 	or	r2,r2,r3
   4aa04:	14c0052e 	bgeu	r2,r19,4aa1c <__udivdi3+0xe8>
   4aa08:	1485883a 	add	r2,r2,r18
   4aa0c:	80ffffc4 	addi	r3,r16,-1
   4aa10:	14800136 	bltu	r2,r18,4aa18 <__udivdi3+0xe4>
   4aa14:	14c13436 	bltu	r2,r19,4aee8 <__udivdi3+0x5b4>
   4aa18:	1821883a 	mov	r16,r3
   4aa1c:	14e7c83a 	sub	r19,r2,r19
   4aa20:	9809883a 	mov	r4,r19
   4aa24:	a80b883a 	mov	r5,r21
   4aa28:	00415e40 	call	415e4 <__umodsi3>
   4aa2c:	102d883a 	mov	r22,r2
   4aa30:	9809883a 	mov	r4,r19
   4aa34:	a80b883a 	mov	r5,r21
   4aa38:	00415dc0 	call	415dc <__udivsi3>
   4aa3c:	b02c943a 	slli	r22,r22,16
   4aa40:	1529383a 	mul	r20,r2,r20
   4aa44:	8c7fffcc 	andi	r17,r17,65535
   4aa48:	b462b03a 	or	r17,r22,r17
   4aa4c:	8d00052e 	bgeu	r17,r20,4aa64 <__udivdi3+0x130>
   4aa50:	8ca3883a 	add	r17,r17,r18
   4aa54:	10ffffc4 	addi	r3,r2,-1
   4aa58:	8c80f636 	bltu	r17,r18,4ae34 <__udivdi3+0x500>
   4aa5c:	8d00f52e 	bgeu	r17,r20,4ae34 <__udivdi3+0x500>
   4aa60:	10bfff84 	addi	r2,r2,-2
   4aa64:	8020943a 	slli	r16,r16,16
   4aa68:	0007883a 	mov	r3,zero
   4aa6c:	1404b03a 	or	r2,r2,r16
   4aa70:	00005b06 	br	4abe0 <__udivdi3+0x2ac>
   4aa74:	29c05836 	bltu	r5,r7,4abd8 <__udivdi3+0x2a4>
   4aa78:	00bfffd4 	movui	r2,65535
   4aa7c:	11c0642e 	bgeu	r2,r7,4ac10 <__udivdi3+0x2dc>
   4aa80:	00804034 	movhi	r2,256
   4aa84:	10bfffc4 	addi	r2,r2,-1
   4aa88:	11c0f32e 	bgeu	r2,r7,4ae58 <__udivdi3+0x524>
   4aa8c:	00c00604 	movi	r3,24
   4aa90:	180b883a 	mov	r5,r3
   4aa94:	38c6d83a 	srl	r3,r7,r3
   4aa98:	00800174 	movhi	r2,5
   4aa9c:	10bcf004 	addi	r2,r2,-3136
   4aaa0:	10c7883a 	add	r3,r2,r3
   4aaa4:	18c00003 	ldbu	r3,0(r3)
   4aaa8:	01000804 	movi	r4,32
   4aaac:	1947883a 	add	r3,r3,r5
   4aab0:	20e5c83a 	sub	r18,r4,r3
   4aab4:	9000661e 	bne	r18,zero,4ac50 <__udivdi3+0x31c>
   4aab8:	3c00f936 	bltu	r7,r16,4aea0 <__udivdi3+0x56c>
   4aabc:	9985403a 	cmpgeu	r2,r19,r6
   4aac0:	0007883a 	mov	r3,zero
   4aac4:	00004606 	br	4abe0 <__udivdi3+0x2ac>
   4aac8:	3000041e 	bne	r6,zero,4aadc <__udivdi3+0x1a8>
   4aacc:	01000044 	movi	r4,1
   4aad0:	000b883a 	mov	r5,zero
   4aad4:	00415dc0 	call	415dc <__udivsi3>
   4aad8:	1025883a 	mov	r18,r2
   4aadc:	00bfffd4 	movui	r2,65535
   4aae0:	1480562e 	bgeu	r2,r18,4ac3c <__udivdi3+0x308>
   4aae4:	00804034 	movhi	r2,256
   4aae8:	10bfffc4 	addi	r2,r2,-1
   4aaec:	1480e32e 	bgeu	r2,r18,4ae7c <__udivdi3+0x548>
   4aaf0:	00800604 	movi	r2,24
   4aaf4:	1007883a 	mov	r3,r2
   4aaf8:	9084d83a 	srl	r2,r18,r2
   4aafc:	01000174 	movhi	r4,5
   4ab00:	213cf004 	addi	r4,r4,-3136
   4ab04:	2085883a 	add	r2,r4,r2
   4ab08:	10800003 	ldbu	r2,0(r2)
   4ab0c:	10c5883a 	add	r2,r2,r3
   4ab10:	00c00804 	movi	r3,32
   4ab14:	1887c83a 	sub	r3,r3,r2
   4ab18:	1800911e 	bne	r3,zero,4ad60 <__udivdi3+0x42c>
   4ab1c:	9028d43a 	srli	r20,r18,16
   4ab20:	84a1c83a 	sub	r16,r16,r18
   4ab24:	957fffcc 	andi	r21,r18,65535
   4ab28:	00c00044 	movi	r3,1
   4ab2c:	8009883a 	mov	r4,r16
   4ab30:	a00b883a 	mov	r5,r20
   4ab34:	d8c00015 	stw	r3,0(sp)
   4ab38:	00415e40 	call	415e4 <__umodsi3>
   4ab3c:	8009883a 	mov	r4,r16
   4ab40:	a00b883a 	mov	r5,r20
   4ab44:	1027883a 	mov	r19,r2
   4ab48:	00415dc0 	call	415dc <__udivsi3>
   4ab4c:	1021883a 	mov	r16,r2
   4ab50:	880cd43a 	srli	r6,r17,16
   4ab54:	9804943a 	slli	r2,r19,16
   4ab58:	8567383a 	mul	r19,r16,r21
   4ab5c:	d8c00017 	ldw	r3,0(sp)
   4ab60:	1188b03a 	or	r4,r2,r6
   4ab64:	24c0052e 	bgeu	r4,r19,4ab7c <__udivdi3+0x248>
   4ab68:	2489883a 	add	r4,r4,r18
   4ab6c:	80bfffc4 	addi	r2,r16,-1
   4ab70:	24800136 	bltu	r4,r18,4ab78 <__udivdi3+0x244>
   4ab74:	24c0d936 	bltu	r4,r19,4aedc <__udivdi3+0x5a8>
   4ab78:	1021883a 	mov	r16,r2
   4ab7c:	24e7c83a 	sub	r19,r4,r19
   4ab80:	9809883a 	mov	r4,r19
   4ab84:	a00b883a 	mov	r5,r20
   4ab88:	d8c00015 	stw	r3,0(sp)
   4ab8c:	00415e40 	call	415e4 <__umodsi3>
   4ab90:	102d883a 	mov	r22,r2
   4ab94:	9809883a 	mov	r4,r19
   4ab98:	a00b883a 	mov	r5,r20
   4ab9c:	00415dc0 	call	415dc <__udivsi3>
   4aba0:	b02c943a 	slli	r22,r22,16
   4aba4:	156b383a 	mul	r21,r2,r21
   4aba8:	8c7fffcc 	andi	r17,r17,65535
   4abac:	b462b03a 	or	r17,r22,r17
   4abb0:	d8c00017 	ldw	r3,0(sp)
   4abb4:	8d40052e 	bgeu	r17,r21,4abcc <__udivdi3+0x298>
   4abb8:	8ca3883a 	add	r17,r17,r18
   4abbc:	113fffc4 	addi	r4,r2,-1
   4abc0:	8c809a36 	bltu	r17,r18,4ae2c <__udivdi3+0x4f8>
   4abc4:	8d40992e 	bgeu	r17,r21,4ae2c <__udivdi3+0x4f8>
   4abc8:	10bfff84 	addi	r2,r2,-2
   4abcc:	8020943a 	slli	r16,r16,16
   4abd0:	1404b03a 	or	r2,r2,r16
   4abd4:	00000206 	br	4abe0 <__udivdi3+0x2ac>
   4abd8:	0007883a 	mov	r3,zero
   4abdc:	0005883a 	mov	r2,zero
   4abe0:	dfc00a17 	ldw	ra,40(sp)
   4abe4:	df000917 	ldw	fp,36(sp)
   4abe8:	ddc00817 	ldw	r23,32(sp)
   4abec:	dd800717 	ldw	r22,28(sp)
   4abf0:	dd400617 	ldw	r21,24(sp)
   4abf4:	dd000517 	ldw	r20,20(sp)
   4abf8:	dcc00417 	ldw	r19,16(sp)
   4abfc:	dc800317 	ldw	r18,12(sp)
   4ac00:	dc400217 	ldw	r17,8(sp)
   4ac04:	dc000117 	ldw	r16,4(sp)
   4ac08:	dec00b04 	addi	sp,sp,44
   4ac0c:	f800283a 	ret
   4ac10:	00803fc4 	movi	r2,255
   4ac14:	11c0932e 	bgeu	r2,r7,4ae64 <__udivdi3+0x530>
   4ac18:	00c00204 	movi	r3,8
   4ac1c:	180b883a 	mov	r5,r3
   4ac20:	003f9c06 	br	4aa94 <__alt_data_end+0xfffe45d4>
   4ac24:	00804034 	movhi	r2,256
   4ac28:	10bfffc4 	addi	r2,r2,-1
   4ac2c:	1180902e 	bgeu	r2,r6,4ae70 <__udivdi3+0x53c>
   4ac30:	00800604 	movi	r2,24
   4ac34:	1007883a 	mov	r3,r2
   4ac38:	003f5606 	br	4a994 <__alt_data_end+0xfffe44d4>
   4ac3c:	00803fc4 	movi	r2,255
   4ac40:	1480912e 	bgeu	r2,r18,4ae88 <__udivdi3+0x554>
   4ac44:	00800204 	movi	r2,8
   4ac48:	1007883a 	mov	r3,r2
   4ac4c:	003faa06 	br	4aaf8 <__alt_data_end+0xfffe4638>
   4ac50:	30eed83a 	srl	r23,r6,r3
   4ac54:	3c8e983a 	sll	r7,r7,r18
   4ac58:	80f8d83a 	srl	fp,r16,r3
   4ac5c:	98c6d83a 	srl	r3,r19,r3
   4ac60:	3deeb03a 	or	r23,r7,r23
   4ac64:	b828d43a 	srli	r20,r23,16
   4ac68:	84a0983a 	sll	r16,r16,r18
   4ac6c:	e009883a 	mov	r4,fp
   4ac70:	a00b883a 	mov	r5,r20
   4ac74:	80e2b03a 	or	r17,r16,r3
   4ac78:	34aa983a 	sll	r21,r6,r18
   4ac7c:	00415e40 	call	415e4 <__umodsi3>
   4ac80:	e009883a 	mov	r4,fp
   4ac84:	a00b883a 	mov	r5,r20
   4ac88:	102d883a 	mov	r22,r2
   4ac8c:	00415dc0 	call	415dc <__udivsi3>
   4ac90:	1021883a 	mov	r16,r2
   4ac94:	bf3fffcc 	andi	fp,r23,65535
   4ac98:	b004943a 	slli	r2,r22,16
   4ac9c:	8808d43a 	srli	r4,r17,16
   4aca0:	872d383a 	mul	r22,r16,fp
   4aca4:	1104b03a 	or	r2,r2,r4
   4aca8:	1580042e 	bgeu	r2,r22,4acbc <__udivdi3+0x388>
   4acac:	15c5883a 	add	r2,r2,r23
   4acb0:	80ffffc4 	addi	r3,r16,-1
   4acb4:	15c0812e 	bgeu	r2,r23,4aebc <__udivdi3+0x588>
   4acb8:	1821883a 	mov	r16,r3
   4acbc:	15adc83a 	sub	r22,r2,r22
   4acc0:	b009883a 	mov	r4,r22
   4acc4:	a00b883a 	mov	r5,r20
   4acc8:	00415e40 	call	415e4 <__umodsi3>
   4accc:	a00b883a 	mov	r5,r20
   4acd0:	b009883a 	mov	r4,r22
   4acd4:	d8800015 	stw	r2,0(sp)
   4acd8:	00415dc0 	call	415dc <__udivsi3>
   4acdc:	d8c00017 	ldw	r3,0(sp)
   4ace0:	170b383a 	mul	r5,r2,fp
   4ace4:	8c7fffcc 	andi	r17,r17,65535
   4ace8:	1806943a 	slli	r3,r3,16
   4acec:	1c46b03a 	or	r3,r3,r17
   4acf0:	1940042e 	bgeu	r3,r5,4ad04 <__udivdi3+0x3d0>
   4acf4:	1dc7883a 	add	r3,r3,r23
   4acf8:	113fffc4 	addi	r4,r2,-1
   4acfc:	1dc06b2e 	bgeu	r3,r23,4aeac <__udivdi3+0x578>
   4ad00:	2005883a 	mov	r2,r4
   4ad04:	8020943a 	slli	r16,r16,16
   4ad08:	a9ffffcc 	andi	r7,r21,65535
   4ad0c:	a82ad43a 	srli	r21,r21,16
   4ad10:	1404b03a 	or	r2,r2,r16
   4ad14:	113fffcc 	andi	r4,r2,65535
   4ad18:	100cd43a 	srli	r6,r2,16
   4ad1c:	21d3383a 	mul	r9,r4,r7
   4ad20:	2549383a 	mul	r4,r4,r21
   4ad24:	31cf383a 	mul	r7,r6,r7
   4ad28:	4810d43a 	srli	r8,r9,16
   4ad2c:	1947c83a 	sub	r3,r3,r5
   4ad30:	3909883a 	add	r4,r7,r4
   4ad34:	2209883a 	add	r4,r4,r8
   4ad38:	354d383a 	mul	r6,r6,r21
   4ad3c:	21c0022e 	bgeu	r4,r7,4ad48 <__udivdi3+0x414>
   4ad40:	01400074 	movhi	r5,1
   4ad44:	314d883a 	add	r6,r6,r5
   4ad48:	202ad43a 	srli	r21,r4,16
   4ad4c:	354d883a 	add	r6,r6,r21
   4ad50:	19803f36 	bltu	r3,r6,4ae50 <__udivdi3+0x51c>
   4ad54:	19803926 	beq	r3,r6,4ae3c <__udivdi3+0x508>
   4ad58:	0007883a 	mov	r3,zero
   4ad5c:	003fa006 	br	4abe0 <__alt_data_end+0xfffe4720>
   4ad60:	90e4983a 	sll	r18,r18,r3
   4ad64:	80aad83a 	srl	r21,r16,r2
   4ad68:	80e0983a 	sll	r16,r16,r3
   4ad6c:	9028d43a 	srli	r20,r18,16
   4ad70:	9884d83a 	srl	r2,r19,r2
   4ad74:	a809883a 	mov	r4,r21
   4ad78:	a00b883a 	mov	r5,r20
   4ad7c:	80acb03a 	or	r22,r16,r2
   4ad80:	98e2983a 	sll	r17,r19,r3
   4ad84:	00415e40 	call	415e4 <__umodsi3>
   4ad88:	a809883a 	mov	r4,r21
   4ad8c:	a00b883a 	mov	r5,r20
   4ad90:	1021883a 	mov	r16,r2
   4ad94:	00415dc0 	call	415dc <__udivsi3>
   4ad98:	957fffcc 	andi	r21,r18,65535
   4ad9c:	8020943a 	slli	r16,r16,16
   4ada0:	b00ad43a 	srli	r5,r22,16
   4ada4:	1567383a 	mul	r19,r2,r21
   4ada8:	102f883a 	mov	r23,r2
   4adac:	8148b03a 	or	r4,r16,r5
   4adb0:	24c0062e 	bgeu	r4,r19,4adcc <__udivdi3+0x498>
   4adb4:	2489883a 	add	r4,r4,r18
   4adb8:	10bfffc4 	addi	r2,r2,-1
   4adbc:	24804536 	bltu	r4,r18,4aed4 <__udivdi3+0x5a0>
   4adc0:	24c0442e 	bgeu	r4,r19,4aed4 <__udivdi3+0x5a0>
   4adc4:	bdffff84 	addi	r23,r23,-2
   4adc8:	2489883a 	add	r4,r4,r18
   4adcc:	24e7c83a 	sub	r19,r4,r19
   4add0:	9809883a 	mov	r4,r19
   4add4:	a00b883a 	mov	r5,r20
   4add8:	00415e40 	call	415e4 <__umodsi3>
   4addc:	1021883a 	mov	r16,r2
   4ade0:	9809883a 	mov	r4,r19
   4ade4:	a00b883a 	mov	r5,r20
   4ade8:	00415dc0 	call	415dc <__udivsi3>
   4adec:	8020943a 	slli	r16,r16,16
   4adf0:	1007883a 	mov	r3,r2
   4adf4:	1545383a 	mul	r2,r2,r21
   4adf8:	b13fffcc 	andi	r4,r22,65535
   4adfc:	8108b03a 	or	r4,r16,r4
   4ae00:	2080062e 	bgeu	r4,r2,4ae1c <__udivdi3+0x4e8>
   4ae04:	2489883a 	add	r4,r4,r18
   4ae08:	197fffc4 	addi	r5,r3,-1
   4ae0c:	24802f36 	bltu	r4,r18,4aecc <__udivdi3+0x598>
   4ae10:	20802e2e 	bgeu	r4,r2,4aecc <__udivdi3+0x598>
   4ae14:	18ffff84 	addi	r3,r3,-2
   4ae18:	2489883a 	add	r4,r4,r18
   4ae1c:	b82e943a 	slli	r23,r23,16
   4ae20:	20a1c83a 	sub	r16,r4,r2
   4ae24:	1dc6b03a 	or	r3,r3,r23
   4ae28:	003f4006 	br	4ab2c <__alt_data_end+0xfffe466c>
   4ae2c:	2005883a 	mov	r2,r4
   4ae30:	003f6606 	br	4abcc <__alt_data_end+0xfffe470c>
   4ae34:	1805883a 	mov	r2,r3
   4ae38:	003f0a06 	br	4aa64 <__alt_data_end+0xfffe45a4>
   4ae3c:	2006943a 	slli	r3,r4,16
   4ae40:	9c88983a 	sll	r4,r19,r18
   4ae44:	4a7fffcc 	andi	r9,r9,65535
   4ae48:	1a47883a 	add	r3,r3,r9
   4ae4c:	20ffc22e 	bgeu	r4,r3,4ad58 <__alt_data_end+0xfffe4898>
   4ae50:	10bfffc4 	addi	r2,r2,-1
   4ae54:	003fc006 	br	4ad58 <__alt_data_end+0xfffe4898>
   4ae58:	00c00404 	movi	r3,16
   4ae5c:	180b883a 	mov	r5,r3
   4ae60:	003f0c06 	br	4aa94 <__alt_data_end+0xfffe45d4>
   4ae64:	0007883a 	mov	r3,zero
   4ae68:	000b883a 	mov	r5,zero
   4ae6c:	003f0906 	br	4aa94 <__alt_data_end+0xfffe45d4>
   4ae70:	00800404 	movi	r2,16
   4ae74:	1007883a 	mov	r3,r2
   4ae78:	003ec606 	br	4a994 <__alt_data_end+0xfffe44d4>
   4ae7c:	00800404 	movi	r2,16
   4ae80:	1007883a 	mov	r3,r2
   4ae84:	003f1c06 	br	4aaf8 <__alt_data_end+0xfffe4638>
   4ae88:	0005883a 	mov	r2,zero
   4ae8c:	0007883a 	mov	r3,zero
   4ae90:	003f1906 	br	4aaf8 <__alt_data_end+0xfffe4638>
   4ae94:	0005883a 	mov	r2,zero
   4ae98:	0007883a 	mov	r3,zero
   4ae9c:	003ebd06 	br	4a994 <__alt_data_end+0xfffe44d4>
   4aea0:	0007883a 	mov	r3,zero
   4aea4:	00800044 	movi	r2,1
   4aea8:	003f4d06 	br	4abe0 <__alt_data_end+0xfffe4720>
   4aeac:	197f942e 	bgeu	r3,r5,4ad00 <__alt_data_end+0xfffe4840>
   4aeb0:	10bfff84 	addi	r2,r2,-2
   4aeb4:	1dc7883a 	add	r3,r3,r23
   4aeb8:	003f9206 	br	4ad04 <__alt_data_end+0xfffe4844>
   4aebc:	15bf7e2e 	bgeu	r2,r22,4acb8 <__alt_data_end+0xfffe47f8>
   4aec0:	843fff84 	addi	r16,r16,-2
   4aec4:	15c5883a 	add	r2,r2,r23
   4aec8:	003f7c06 	br	4acbc <__alt_data_end+0xfffe47fc>
   4aecc:	2807883a 	mov	r3,r5
   4aed0:	003fd206 	br	4ae1c <__alt_data_end+0xfffe495c>
   4aed4:	102f883a 	mov	r23,r2
   4aed8:	003fbc06 	br	4adcc <__alt_data_end+0xfffe490c>
   4aedc:	843fff84 	addi	r16,r16,-2
   4aee0:	2489883a 	add	r4,r4,r18
   4aee4:	003f2506 	br	4ab7c <__alt_data_end+0xfffe46bc>
   4aee8:	843fff84 	addi	r16,r16,-2
   4aeec:	1485883a 	add	r2,r2,r18
   4aef0:	003eca06 	br	4aa1c <__alt_data_end+0xfffe455c>

0004aef4 <__umoddi3>:
   4aef4:	defff404 	addi	sp,sp,-48
   4aef8:	ddc00915 	stw	r23,36(sp)
   4aefc:	dc400315 	stw	r17,12(sp)
   4af00:	dc000215 	stw	r16,8(sp)
   4af04:	dfc00b15 	stw	ra,44(sp)
   4af08:	df000a15 	stw	fp,40(sp)
   4af0c:	dd800815 	stw	r22,32(sp)
   4af10:	dd400715 	stw	r21,28(sp)
   4af14:	dd000615 	stw	r20,24(sp)
   4af18:	dcc00515 	stw	r19,20(sp)
   4af1c:	dc800415 	stw	r18,16(sp)
   4af20:	2021883a 	mov	r16,r4
   4af24:	2823883a 	mov	r17,r5
   4af28:	282f883a 	mov	r23,r5
   4af2c:	3800381e 	bne	r7,zero,4b010 <__umoddi3+0x11c>
   4af30:	3027883a 	mov	r19,r6
   4af34:	2029883a 	mov	r20,r4
   4af38:	29804e2e 	bgeu	r5,r6,4b074 <__umoddi3+0x180>
   4af3c:	00bfffd4 	movui	r2,65535
   4af40:	11809c36 	bltu	r2,r6,4b1b4 <__umoddi3+0x2c0>
   4af44:	00803fc4 	movi	r2,255
   4af48:	11813b2e 	bgeu	r2,r6,4b438 <__umoddi3+0x544>
   4af4c:	01400204 	movi	r5,8
   4af50:	2805883a 	mov	r2,r5
   4af54:	314ad83a 	srl	r5,r6,r5
   4af58:	00c00174 	movhi	r3,5
   4af5c:	18fcf004 	addi	r3,r3,-3136
   4af60:	194b883a 	add	r5,r3,r5
   4af64:	29000003 	ldbu	r4,0(r5)
   4af68:	2089883a 	add	r4,r4,r2
   4af6c:	00800804 	movi	r2,32
   4af70:	1105c83a 	sub	r2,r2,r4
   4af74:	1000ec26 	beq	r2,zero,4b328 <__umoddi3+0x434>
   4af78:	88a2983a 	sll	r17,r17,r2
   4af7c:	8108d83a 	srl	r4,r16,r4
   4af80:	30a6983a 	sll	r19,r6,r2
   4af84:	80a8983a 	sll	r20,r16,r2
   4af88:	1025883a 	mov	r18,r2
   4af8c:	892eb03a 	or	r23,r17,r4
   4af90:	982cd43a 	srli	r22,r19,16
   4af94:	b809883a 	mov	r4,r23
   4af98:	9d7fffcc 	andi	r21,r19,65535
   4af9c:	b00b883a 	mov	r5,r22
   4afa0:	00415e40 	call	415e4 <__umodsi3>
   4afa4:	b809883a 	mov	r4,r23
   4afa8:	b00b883a 	mov	r5,r22
   4afac:	1021883a 	mov	r16,r2
   4afb0:	00415dc0 	call	415dc <__udivsi3>
   4afb4:	8020943a 	slli	r16,r16,16
   4afb8:	a00cd43a 	srli	r6,r20,16
   4afbc:	1545383a 	mul	r2,r2,r21
   4afc0:	8188b03a 	or	r4,r16,r6
   4afc4:	2080042e 	bgeu	r4,r2,4afd8 <__umoddi3+0xe4>
   4afc8:	24c9883a 	add	r4,r4,r19
   4afcc:	24c00236 	bltu	r4,r19,4afd8 <__umoddi3+0xe4>
   4afd0:	2080012e 	bgeu	r4,r2,4afd8 <__umoddi3+0xe4>
   4afd4:	24c9883a 	add	r4,r4,r19
   4afd8:	20a3c83a 	sub	r17,r4,r2
   4afdc:	8809883a 	mov	r4,r17
   4afe0:	b00b883a 	mov	r5,r22
   4afe4:	00415e40 	call	415e4 <__umodsi3>
   4afe8:	8809883a 	mov	r4,r17
   4afec:	b00b883a 	mov	r5,r22
   4aff0:	1021883a 	mov	r16,r2
   4aff4:	00415dc0 	call	415dc <__udivsi3>
   4aff8:	8006943a 	slli	r3,r16,16
   4affc:	1545383a 	mul	r2,r2,r21
   4b000:	a13fffcc 	andi	r4,r20,65535
   4b004:	1906b03a 	or	r3,r3,r4
   4b008:	1880532e 	bgeu	r3,r2,4b158 <__umoddi3+0x264>
   4b00c:	00004e06 	br	4b148 <__umoddi3+0x254>
   4b010:	29c05536 	bltu	r5,r7,4b168 <__umoddi3+0x274>
   4b014:	00bfffd4 	movui	r2,65535
   4b018:	11c0612e 	bgeu	r2,r7,4b1a0 <__umoddi3+0x2ac>
   4b01c:	00804034 	movhi	r2,256
   4b020:	10bfffc4 	addi	r2,r2,-1
   4b024:	11c0f82e 	bgeu	r2,r7,4b408 <__umoddi3+0x514>
   4b028:	01400604 	movi	r5,24
   4b02c:	282b883a 	mov	r21,r5
   4b030:	394ad83a 	srl	r5,r7,r5
   4b034:	00c00174 	movhi	r3,5
   4b038:	18fcf004 	addi	r3,r3,-3136
   4b03c:	194b883a 	add	r5,r3,r5
   4b040:	28800003 	ldbu	r2,0(r5)
   4b044:	00c00804 	movi	r3,32
   4b048:	156b883a 	add	r21,r2,r21
   4b04c:	1d69c83a 	sub	r20,r3,r21
   4b050:	a000631e 	bne	r20,zero,4b1e0 <__umoddi3+0x2ec>
   4b054:	3c400136 	bltu	r7,r17,4b05c <__umoddi3+0x168>
   4b058:	81810436 	bltu	r16,r6,4b46c <__umoddi3+0x578>
   4b05c:	8185c83a 	sub	r2,r16,r6
   4b060:	89e3c83a 	sub	r17,r17,r7
   4b064:	8087803a 	cmpltu	r3,r16,r2
   4b068:	88efc83a 	sub	r23,r17,r3
   4b06c:	b807883a 	mov	r3,r23
   4b070:	00003f06 	br	4b170 <__umoddi3+0x27c>
   4b074:	3000041e 	bne	r6,zero,4b088 <__umoddi3+0x194>
   4b078:	01000044 	movi	r4,1
   4b07c:	000b883a 	mov	r5,zero
   4b080:	00415dc0 	call	415dc <__udivsi3>
   4b084:	1027883a 	mov	r19,r2
   4b088:	00bfffd4 	movui	r2,65535
   4b08c:	14c04f2e 	bgeu	r2,r19,4b1cc <__umoddi3+0x2d8>
   4b090:	00804034 	movhi	r2,256
   4b094:	10bfffc4 	addi	r2,r2,-1
   4b098:	14c0e42e 	bgeu	r2,r19,4b42c <__umoddi3+0x538>
   4b09c:	00800604 	movi	r2,24
   4b0a0:	1007883a 	mov	r3,r2
   4b0a4:	9884d83a 	srl	r2,r19,r2
   4b0a8:	01000174 	movhi	r4,5
   4b0ac:	213cf004 	addi	r4,r4,-3136
   4b0b0:	2085883a 	add	r2,r4,r2
   4b0b4:	11000003 	ldbu	r4,0(r2)
   4b0b8:	00800804 	movi	r2,32
   4b0bc:	20c7883a 	add	r3,r4,r3
   4b0c0:	10c5c83a 	sub	r2,r2,r3
   4b0c4:	10009a1e 	bne	r2,zero,4b330 <__umoddi3+0x43c>
   4b0c8:	982cd43a 	srli	r22,r19,16
   4b0cc:	8ce3c83a 	sub	r17,r17,r19
   4b0d0:	9c3fffcc 	andi	r16,r19,65535
   4b0d4:	0025883a 	mov	r18,zero
   4b0d8:	8809883a 	mov	r4,r17
   4b0dc:	b00b883a 	mov	r5,r22
   4b0e0:	00415e40 	call	415e4 <__umodsi3>
   4b0e4:	8809883a 	mov	r4,r17
   4b0e8:	b00b883a 	mov	r5,r22
   4b0ec:	102b883a 	mov	r21,r2
   4b0f0:	00415dc0 	call	415dc <__udivsi3>
   4b0f4:	a806943a 	slli	r3,r21,16
   4b0f8:	a008d43a 	srli	r4,r20,16
   4b0fc:	1405383a 	mul	r2,r2,r16
   4b100:	190cb03a 	or	r6,r3,r4
   4b104:	3080032e 	bgeu	r6,r2,4b114 <__umoddi3+0x220>
   4b108:	34cd883a 	add	r6,r6,r19
   4b10c:	34c00136 	bltu	r6,r19,4b114 <__umoddi3+0x220>
   4b110:	3080d436 	bltu	r6,r2,4b464 <__umoddi3+0x570>
   4b114:	30abc83a 	sub	r21,r6,r2
   4b118:	a809883a 	mov	r4,r21
   4b11c:	b00b883a 	mov	r5,r22
   4b120:	00415e40 	call	415e4 <__umodsi3>
   4b124:	1023883a 	mov	r17,r2
   4b128:	a809883a 	mov	r4,r21
   4b12c:	b00b883a 	mov	r5,r22
   4b130:	00415dc0 	call	415dc <__udivsi3>
   4b134:	8822943a 	slli	r17,r17,16
   4b138:	1405383a 	mul	r2,r2,r16
   4b13c:	a13fffcc 	andi	r4,r20,65535
   4b140:	8906b03a 	or	r3,r17,r4
   4b144:	1880042e 	bgeu	r3,r2,4b158 <__umoddi3+0x264>
   4b148:	1cc7883a 	add	r3,r3,r19
   4b14c:	1cc00236 	bltu	r3,r19,4b158 <__umoddi3+0x264>
   4b150:	1880012e 	bgeu	r3,r2,4b158 <__umoddi3+0x264>
   4b154:	1cc7883a 	add	r3,r3,r19
   4b158:	1887c83a 	sub	r3,r3,r2
   4b15c:	1c84d83a 	srl	r2,r3,r18
   4b160:	0007883a 	mov	r3,zero
   4b164:	00000206 	br	4b170 <__umoddi3+0x27c>
   4b168:	2005883a 	mov	r2,r4
   4b16c:	2807883a 	mov	r3,r5
   4b170:	dfc00b17 	ldw	ra,44(sp)
   4b174:	df000a17 	ldw	fp,40(sp)
   4b178:	ddc00917 	ldw	r23,36(sp)
   4b17c:	dd800817 	ldw	r22,32(sp)
   4b180:	dd400717 	ldw	r21,28(sp)
   4b184:	dd000617 	ldw	r20,24(sp)
   4b188:	dcc00517 	ldw	r19,20(sp)
   4b18c:	dc800417 	ldw	r18,16(sp)
   4b190:	dc400317 	ldw	r17,12(sp)
   4b194:	dc000217 	ldw	r16,8(sp)
   4b198:	dec00c04 	addi	sp,sp,48
   4b19c:	f800283a 	ret
   4b1a0:	00803fc4 	movi	r2,255
   4b1a4:	11c0952e 	bgeu	r2,r7,4b3fc <__umoddi3+0x508>
   4b1a8:	01400204 	movi	r5,8
   4b1ac:	282b883a 	mov	r21,r5
   4b1b0:	003f9f06 	br	4b030 <__alt_data_end+0xfffe4b70>
   4b1b4:	00804034 	movhi	r2,256
   4b1b8:	10bfffc4 	addi	r2,r2,-1
   4b1bc:	1180952e 	bgeu	r2,r6,4b414 <__umoddi3+0x520>
   4b1c0:	01400604 	movi	r5,24
   4b1c4:	2805883a 	mov	r2,r5
   4b1c8:	003f6206 	br	4af54 <__alt_data_end+0xfffe4a94>
   4b1cc:	00803fc4 	movi	r2,255
   4b1d0:	14c0932e 	bgeu	r2,r19,4b420 <__umoddi3+0x52c>
   4b1d4:	00800204 	movi	r2,8
   4b1d8:	1007883a 	mov	r3,r2
   4b1dc:	003fb106 	br	4b0a4 <__alt_data_end+0xfffe4be4>
   4b1e0:	3548d83a 	srl	r4,r6,r21
   4b1e4:	3d0e983a 	sll	r7,r7,r20
   4b1e8:	8d10983a 	sll	r8,r17,r20
   4b1ec:	8d6cd83a 	srl	r22,r17,r21
   4b1f0:	3922b03a 	or	r17,r7,r4
   4b1f4:	882ed43a 	srli	r23,r17,16
   4b1f8:	8564d83a 	srl	r18,r16,r21
   4b1fc:	b009883a 	mov	r4,r22
   4b200:	b80b883a 	mov	r5,r23
   4b204:	44a4b03a 	or	r18,r8,r18
   4b208:	3526983a 	sll	r19,r6,r20
   4b20c:	00415e40 	call	415e4 <__umodsi3>
   4b210:	b009883a 	mov	r4,r22
   4b214:	b80b883a 	mov	r5,r23
   4b218:	1039883a 	mov	fp,r2
   4b21c:	00415dc0 	call	415dc <__udivsi3>
   4b220:	102d883a 	mov	r22,r2
   4b224:	8a3fffcc 	andi	r8,r17,65535
   4b228:	e004943a 	slli	r2,fp,16
   4b22c:	900cd43a 	srli	r6,r18,16
   4b230:	b239383a 	mul	fp,r22,r8
   4b234:	8520983a 	sll	r16,r16,r20
   4b238:	118ab03a 	or	r5,r2,r6
   4b23c:	2f00042e 	bgeu	r5,fp,4b250 <__umoddi3+0x35c>
   4b240:	2c4b883a 	add	r5,r5,r17
   4b244:	b0bfffc4 	addi	r2,r22,-1
   4b248:	2c40822e 	bgeu	r5,r17,4b454 <__umoddi3+0x560>
   4b24c:	102d883a 	mov	r22,r2
   4b250:	2f39c83a 	sub	fp,r5,fp
   4b254:	e009883a 	mov	r4,fp
   4b258:	b80b883a 	mov	r5,r23
   4b25c:	da000115 	stw	r8,4(sp)
   4b260:	00415e40 	call	415e4 <__umodsi3>
   4b264:	e009883a 	mov	r4,fp
   4b268:	b80b883a 	mov	r5,r23
   4b26c:	d8800015 	stw	r2,0(sp)
   4b270:	00415dc0 	call	415dc <__udivsi3>
   4b274:	d9800017 	ldw	r6,0(sp)
   4b278:	da000117 	ldw	r8,4(sp)
   4b27c:	94bfffcc 	andi	r18,r18,65535
   4b280:	300c943a 	slli	r6,r6,16
   4b284:	1209383a 	mul	r4,r2,r8
   4b288:	3490b03a 	or	r8,r6,r18
   4b28c:	4100042e 	bgeu	r8,r4,4b2a0 <__umoddi3+0x3ac>
   4b290:	4451883a 	add	r8,r8,r17
   4b294:	10ffffc4 	addi	r3,r2,-1
   4b298:	44406a2e 	bgeu	r8,r17,4b444 <__umoddi3+0x550>
   4b29c:	1805883a 	mov	r2,r3
   4b2a0:	b012943a 	slli	r9,r22,16
   4b2a4:	9abfffcc 	andi	r10,r19,65535
   4b2a8:	980ed43a 	srli	r7,r19,16
   4b2ac:	124ab03a 	or	r5,r2,r9
   4b2b0:	2a7fffcc 	andi	r9,r5,65535
   4b2b4:	280ad43a 	srli	r5,r5,16
   4b2b8:	4a8d383a 	mul	r6,r9,r10
   4b2bc:	49d3383a 	mul	r9,r9,r7
   4b2c0:	2a95383a 	mul	r10,r5,r10
   4b2c4:	3004d43a 	srli	r2,r6,16
   4b2c8:	4111c83a 	sub	r8,r8,r4
   4b2cc:	5253883a 	add	r9,r10,r9
   4b2d0:	4893883a 	add	r9,r9,r2
   4b2d4:	29cb383a 	mul	r5,r5,r7
   4b2d8:	4a80022e 	bgeu	r9,r10,4b2e4 <__umoddi3+0x3f0>
   4b2dc:	00800074 	movhi	r2,1
   4b2e0:	288b883a 	add	r5,r5,r2
   4b2e4:	4808d43a 	srli	r4,r9,16
   4b2e8:	4812943a 	slli	r9,r9,16
   4b2ec:	31bfffcc 	andi	r6,r6,65535
   4b2f0:	290b883a 	add	r5,r5,r4
   4b2f4:	498d883a 	add	r6,r9,r6
   4b2f8:	41403a36 	bltu	r8,r5,4b3e4 <__umoddi3+0x4f0>
   4b2fc:	41405d26 	beq	r8,r5,4b474 <__umoddi3+0x580>
   4b300:	4149c83a 	sub	r4,r8,r5
   4b304:	300f883a 	mov	r7,r6
   4b308:	81cfc83a 	sub	r7,r16,r7
   4b30c:	81c7803a 	cmpltu	r3,r16,r7
   4b310:	20c7c83a 	sub	r3,r4,r3
   4b314:	1d44983a 	sll	r2,r3,r21
   4b318:	3d0ed83a 	srl	r7,r7,r20
   4b31c:	1d06d83a 	srl	r3,r3,r20
   4b320:	11c4b03a 	or	r2,r2,r7
   4b324:	003f9206 	br	4b170 <__alt_data_end+0xfffe4cb0>
   4b328:	0025883a 	mov	r18,zero
   4b32c:	003f1806 	br	4af90 <__alt_data_end+0xfffe4ad0>
   4b330:	98a6983a 	sll	r19,r19,r2
   4b334:	88e8d83a 	srl	r20,r17,r3
   4b338:	80c6d83a 	srl	r3,r16,r3
   4b33c:	982cd43a 	srli	r22,r19,16
   4b340:	88a2983a 	sll	r17,r17,r2
   4b344:	a009883a 	mov	r4,r20
   4b348:	b00b883a 	mov	r5,r22
   4b34c:	88eab03a 	or	r21,r17,r3
   4b350:	1025883a 	mov	r18,r2
   4b354:	00415e40 	call	415e4 <__umodsi3>
   4b358:	a009883a 	mov	r4,r20
   4b35c:	b00b883a 	mov	r5,r22
   4b360:	1023883a 	mov	r17,r2
   4b364:	00415dc0 	call	415dc <__udivsi3>
   4b368:	9f3fffcc 	andi	fp,r19,65535
   4b36c:	8822943a 	slli	r17,r17,16
   4b370:	a80ad43a 	srli	r5,r21,16
   4b374:	1705383a 	mul	r2,r2,fp
   4b378:	84a8983a 	sll	r20,r16,r18
   4b37c:	8948b03a 	or	r4,r17,r5
   4b380:	2080042e 	bgeu	r4,r2,4b394 <__umoddi3+0x4a0>
   4b384:	24c9883a 	add	r4,r4,r19
   4b388:	24c00236 	bltu	r4,r19,4b394 <__umoddi3+0x4a0>
   4b38c:	2080012e 	bgeu	r4,r2,4b394 <__umoddi3+0x4a0>
   4b390:	24c9883a 	add	r4,r4,r19
   4b394:	20afc83a 	sub	r23,r4,r2
   4b398:	b809883a 	mov	r4,r23
   4b39c:	b00b883a 	mov	r5,r22
   4b3a0:	00415e40 	call	415e4 <__umodsi3>
   4b3a4:	1023883a 	mov	r17,r2
   4b3a8:	b809883a 	mov	r4,r23
   4b3ac:	b00b883a 	mov	r5,r22
   4b3b0:	00415dc0 	call	415dc <__udivsi3>
   4b3b4:	8822943a 	slli	r17,r17,16
   4b3b8:	1705383a 	mul	r2,r2,fp
   4b3bc:	a93fffcc 	andi	r4,r21,65535
   4b3c0:	8908b03a 	or	r4,r17,r4
   4b3c4:	2080042e 	bgeu	r4,r2,4b3d8 <__umoddi3+0x4e4>
   4b3c8:	24c9883a 	add	r4,r4,r19
   4b3cc:	24c00236 	bltu	r4,r19,4b3d8 <__umoddi3+0x4e4>
   4b3d0:	2080012e 	bgeu	r4,r2,4b3d8 <__umoddi3+0x4e4>
   4b3d4:	24c9883a 	add	r4,r4,r19
   4b3d8:	20a3c83a 	sub	r17,r4,r2
   4b3dc:	e021883a 	mov	r16,fp
   4b3e0:	003f3d06 	br	4b0d8 <__alt_data_end+0xfffe4c18>
   4b3e4:	34cfc83a 	sub	r7,r6,r19
   4b3e8:	2c4bc83a 	sub	r5,r5,r17
   4b3ec:	31cd803a 	cmpltu	r6,r6,r7
   4b3f0:	298dc83a 	sub	r6,r5,r6
   4b3f4:	4189c83a 	sub	r4,r8,r6
   4b3f8:	003fc306 	br	4b308 <__alt_data_end+0xfffe4e48>
   4b3fc:	000b883a 	mov	r5,zero
   4b400:	002b883a 	mov	r21,zero
   4b404:	003f0a06 	br	4b030 <__alt_data_end+0xfffe4b70>
   4b408:	01400404 	movi	r5,16
   4b40c:	282b883a 	mov	r21,r5
   4b410:	003f0706 	br	4b030 <__alt_data_end+0xfffe4b70>
   4b414:	01400404 	movi	r5,16
   4b418:	2805883a 	mov	r2,r5
   4b41c:	003ecd06 	br	4af54 <__alt_data_end+0xfffe4a94>
   4b420:	0005883a 	mov	r2,zero
   4b424:	0007883a 	mov	r3,zero
   4b428:	003f1e06 	br	4b0a4 <__alt_data_end+0xfffe4be4>
   4b42c:	00800404 	movi	r2,16
   4b430:	1007883a 	mov	r3,r2
   4b434:	003f1b06 	br	4b0a4 <__alt_data_end+0xfffe4be4>
   4b438:	000b883a 	mov	r5,zero
   4b43c:	0005883a 	mov	r2,zero
   4b440:	003ec406 	br	4af54 <__alt_data_end+0xfffe4a94>
   4b444:	413f952e 	bgeu	r8,r4,4b29c <__alt_data_end+0xfffe4ddc>
   4b448:	10bfff84 	addi	r2,r2,-2
   4b44c:	4451883a 	add	r8,r8,r17
   4b450:	003f9306 	br	4b2a0 <__alt_data_end+0xfffe4de0>
   4b454:	2f3f7d2e 	bgeu	r5,fp,4b24c <__alt_data_end+0xfffe4d8c>
   4b458:	b5bfff84 	addi	r22,r22,-2
   4b45c:	2c4b883a 	add	r5,r5,r17
   4b460:	003f7b06 	br	4b250 <__alt_data_end+0xfffe4d90>
   4b464:	34cd883a 	add	r6,r6,r19
   4b468:	003f2a06 	br	4b114 <__alt_data_end+0xfffe4c54>
   4b46c:	8005883a 	mov	r2,r16
   4b470:	003efe06 	br	4b06c <__alt_data_end+0xfffe4bac>
   4b474:	81bfdb36 	bltu	r16,r6,4b3e4 <__alt_data_end+0xfffe4f24>
   4b478:	300f883a 	mov	r7,r6
   4b47c:	0009883a 	mov	r4,zero
   4b480:	003fa106 	br	4b308 <__alt_data_end+0xfffe4e48>

0004b484 <__adddf3>:
   4b484:	02000434 	movhi	r8,16
   4b488:	423fffc4 	addi	r8,r8,-1
   4b48c:	defffb04 	addi	sp,sp,-20
   4b490:	2a12703a 	and	r9,r5,r8
   4b494:	2806d7fa 	srli	r3,r5,31
   4b498:	3a10703a 	and	r8,r7,r8
   4b49c:	3804d53a 	srli	r2,r7,20
   4b4a0:	3014d77a 	srli	r10,r6,29
   4b4a4:	dc000015 	stw	r16,0(sp)
   4b4a8:	481290fa 	slli	r9,r9,3
   4b4ac:	2820d53a 	srli	r16,r5,20
   4b4b0:	401090fa 	slli	r8,r8,3
   4b4b4:	200ad77a 	srli	r5,r4,29
   4b4b8:	380ed7fa 	srli	r7,r7,31
   4b4bc:	dc800215 	stw	r18,8(sp)
   4b4c0:	dc400115 	stw	r17,4(sp)
   4b4c4:	dfc00415 	stw	ra,16(sp)
   4b4c8:	dcc00315 	stw	r19,12(sp)
   4b4cc:	1c803fcc 	andi	r18,r3,255
   4b4d0:	8401ffcc 	andi	r16,r16,2047
   4b4d4:	494ab03a 	or	r5,r9,r5
   4b4d8:	202290fa 	slli	r17,r4,3
   4b4dc:	1081ffcc 	andi	r2,r2,2047
   4b4e0:	4290b03a 	or	r8,r8,r10
   4b4e4:	300c90fa 	slli	r6,r6,3
   4b4e8:	91c07026 	beq	r18,r7,4b6ac <__adddf3+0x228>
   4b4ec:	8087c83a 	sub	r3,r16,r2
   4b4f0:	00c0b30e 	bge	zero,r3,4b7c0 <__adddf3+0x33c>
   4b4f4:	10002a1e 	bne	r2,zero,4b5a0 <__adddf3+0x11c>
   4b4f8:	4184b03a 	or	r2,r8,r6
   4b4fc:	1000991e 	bne	r2,zero,4b764 <__adddf3+0x2e0>
   4b500:	888001cc 	andi	r2,r17,7
   4b504:	10005b26 	beq	r2,zero,4b674 <__adddf3+0x1f0>
   4b508:	88c003cc 	andi	r3,r17,15
   4b50c:	00800104 	movi	r2,4
   4b510:	18805826 	beq	r3,r2,4b674 <__adddf3+0x1f0>
   4b514:	89800104 	addi	r6,r17,4
   4b518:	3463803a 	cmpltu	r17,r6,r17
   4b51c:	2c4b883a 	add	r5,r5,r17
   4b520:	2880202c 	andhi	r2,r5,128
   4b524:	9007883a 	mov	r3,r18
   4b528:	3023883a 	mov	r17,r6
   4b52c:	10005426 	beq	r2,zero,4b680 <__adddf3+0x1fc>
   4b530:	84000044 	addi	r16,r16,1
   4b534:	0081ffc4 	movi	r2,2047
   4b538:	8080c126 	beq	r16,r2,4b840 <__adddf3+0x3bc>
   4b53c:	013fe034 	movhi	r4,65408
   4b540:	213fffc4 	addi	r4,r4,-1
   4b544:	290a703a 	and	r5,r5,r4
   4b548:	2804977a 	slli	r2,r5,29
   4b54c:	280a927a 	slli	r5,r5,9
   4b550:	8822d0fa 	srli	r17,r17,3
   4b554:	8401ffcc 	andi	r16,r16,2047
   4b558:	2808d33a 	srli	r4,r5,12
   4b55c:	1444b03a 	or	r2,r2,r17
   4b560:	8401ffcc 	andi	r16,r16,2047
   4b564:	800a953a 	slli	r5,r16,20
   4b568:	18c03fcc 	andi	r3,r3,255
   4b56c:	04000434 	movhi	r16,16
   4b570:	180697fa 	slli	r3,r3,31
   4b574:	843fffc4 	addi	r16,r16,-1
   4b578:	2420703a 	and	r16,r4,r16
   4b57c:	8160b03a 	or	r16,r16,r5
   4b580:	80c6b03a 	or	r3,r16,r3
   4b584:	dfc00417 	ldw	ra,16(sp)
   4b588:	dcc00317 	ldw	r19,12(sp)
   4b58c:	dc800217 	ldw	r18,8(sp)
   4b590:	dc400117 	ldw	r17,4(sp)
   4b594:	dc000017 	ldw	r16,0(sp)
   4b598:	dec00504 	addi	sp,sp,20
   4b59c:	f800283a 	ret
   4b5a0:	0081ffc4 	movi	r2,2047
   4b5a4:	80bfd626 	beq	r16,r2,4b500 <__alt_data_end+0xfffe5040>
   4b5a8:	42002034 	orhi	r8,r8,128
   4b5ac:	00800e04 	movi	r2,56
   4b5b0:	10c0a616 	blt	r2,r3,4b84c <__adddf3+0x3c8>
   4b5b4:	008007c4 	movi	r2,31
   4b5b8:	10c0c916 	blt	r2,r3,4b8e0 <__adddf3+0x45c>
   4b5bc:	00800804 	movi	r2,32
   4b5c0:	10c5c83a 	sub	r2,r2,r3
   4b5c4:	408e983a 	sll	r7,r8,r2
   4b5c8:	30c8d83a 	srl	r4,r6,r3
   4b5cc:	3084983a 	sll	r2,r6,r2
   4b5d0:	40c6d83a 	srl	r3,r8,r3
   4b5d4:	390cb03a 	or	r6,r7,r4
   4b5d8:	1004c03a 	cmpne	r2,r2,zero
   4b5dc:	308cb03a 	or	r6,r6,r2
   4b5e0:	898dc83a 	sub	r6,r17,r6
   4b5e4:	89a3803a 	cmpltu	r17,r17,r6
   4b5e8:	28cbc83a 	sub	r5,r5,r3
   4b5ec:	2c4bc83a 	sub	r5,r5,r17
   4b5f0:	3023883a 	mov	r17,r6
   4b5f4:	2880202c 	andhi	r2,r5,128
   4b5f8:	10006d26 	beq	r2,zero,4b7b0 <__adddf3+0x32c>
   4b5fc:	04c02034 	movhi	r19,128
   4b600:	9cffffc4 	addi	r19,r19,-1
   4b604:	2ce6703a 	and	r19,r5,r19
   4b608:	98007e26 	beq	r19,zero,4b804 <__adddf3+0x380>
   4b60c:	9809883a 	mov	r4,r19
   4b610:	004da200 	call	4da20 <__clzsi2>
   4b614:	10fffe04 	addi	r3,r2,-8
   4b618:	010007c4 	movi	r4,31
   4b61c:	20c07f16 	blt	r4,r3,4b81c <__adddf3+0x398>
   4b620:	01400a04 	movi	r5,40
   4b624:	2885c83a 	sub	r2,r5,r2
   4b628:	888ad83a 	srl	r5,r17,r2
   4b62c:	98e6983a 	sll	r19,r19,r3
   4b630:	88e2983a 	sll	r17,r17,r3
   4b634:	2ce6b03a 	or	r19,r5,r19
   4b638:	1c007c16 	blt	r3,r16,4b82c <__adddf3+0x3a8>
   4b63c:	1c21c83a 	sub	r16,r3,r16
   4b640:	81400044 	addi	r5,r16,1
   4b644:	00c007c4 	movi	r3,31
   4b648:	19409816 	blt	r3,r5,4b8ac <__adddf3+0x428>
   4b64c:	1c21c83a 	sub	r16,r3,r16
   4b650:	8c08983a 	sll	r4,r17,r16
   4b654:	8946d83a 	srl	r3,r17,r5
   4b658:	9c20983a 	sll	r16,r19,r16
   4b65c:	2008c03a 	cmpne	r4,r4,zero
   4b660:	994ad83a 	srl	r5,r19,r5
   4b664:	1c06b03a 	or	r3,r3,r16
   4b668:	1922b03a 	or	r17,r3,r4
   4b66c:	0021883a 	mov	r16,zero
   4b670:	003fa306 	br	4b500 <__alt_data_end+0xfffe5040>
   4b674:	2880202c 	andhi	r2,r5,128
   4b678:	9007883a 	mov	r3,r18
   4b67c:	103fac1e 	bne	r2,zero,4b530 <__alt_data_end+0xfffe5070>
   4b680:	2804977a 	slli	r2,r5,29
   4b684:	8822d0fa 	srli	r17,r17,3
   4b688:	0101ffc4 	movi	r4,2047
   4b68c:	280ad0fa 	srli	r5,r5,3
   4b690:	1444b03a 	or	r2,r2,r17
   4b694:	81002c26 	beq	r16,r4,4b748 <__adddf3+0x2c4>
   4b698:	8120703a 	and	r16,r16,r4
   4b69c:	01000434 	movhi	r4,16
   4b6a0:	213fffc4 	addi	r4,r4,-1
   4b6a4:	2908703a 	and	r4,r5,r4
   4b6a8:	003fad06 	br	4b560 <__alt_data_end+0xfffe50a0>
   4b6ac:	8089c83a 	sub	r4,r16,r2
   4b6b0:	01006a0e 	bge	zero,r4,4b85c <__adddf3+0x3d8>
   4b6b4:	10003326 	beq	r2,zero,4b784 <__adddf3+0x300>
   4b6b8:	0081ffc4 	movi	r2,2047
   4b6bc:	80bf9026 	beq	r16,r2,4b500 <__alt_data_end+0xfffe5040>
   4b6c0:	42002034 	orhi	r8,r8,128
   4b6c4:	00800e04 	movi	r2,56
   4b6c8:	1100b116 	blt	r2,r4,4b990 <__adddf3+0x50c>
   4b6cc:	008007c4 	movi	r2,31
   4b6d0:	1100e216 	blt	r2,r4,4ba5c <__adddf3+0x5d8>
   4b6d4:	00800804 	movi	r2,32
   4b6d8:	1105c83a 	sub	r2,r2,r4
   4b6dc:	4092983a 	sll	r9,r8,r2
   4b6e0:	310ed83a 	srl	r7,r6,r4
   4b6e4:	3084983a 	sll	r2,r6,r2
   4b6e8:	4110d83a 	srl	r8,r8,r4
   4b6ec:	49ccb03a 	or	r6,r9,r7
   4b6f0:	1004c03a 	cmpne	r2,r2,zero
   4b6f4:	308cb03a 	or	r6,r6,r2
   4b6f8:	344d883a 	add	r6,r6,r17
   4b6fc:	3463803a 	cmpltu	r17,r6,r17
   4b700:	414b883a 	add	r5,r8,r5
   4b704:	2c4b883a 	add	r5,r5,r17
   4b708:	3023883a 	mov	r17,r6
   4b70c:	2880202c 	andhi	r2,r5,128
   4b710:	10002726 	beq	r2,zero,4b7b0 <__adddf3+0x32c>
   4b714:	84000044 	addi	r16,r16,1
   4b718:	0081ffc4 	movi	r2,2047
   4b71c:	8080ae26 	beq	r16,r2,4b9d8 <__adddf3+0x554>
   4b720:	00bfe034 	movhi	r2,65408
   4b724:	10bfffc4 	addi	r2,r2,-1
   4b728:	288a703a 	and	r5,r5,r2
   4b72c:	880cd07a 	srli	r6,r17,1
   4b730:	280897fa 	slli	r4,r5,31
   4b734:	88c0004c 	andi	r3,r17,1
   4b738:	30e2b03a 	or	r17,r6,r3
   4b73c:	280ad07a 	srli	r5,r5,1
   4b740:	8922b03a 	or	r17,r17,r4
   4b744:	003f6e06 	br	4b500 <__alt_data_end+0xfffe5040>
   4b748:	1148b03a 	or	r4,r2,r5
   4b74c:	20003c26 	beq	r4,zero,4b840 <__adddf3+0x3bc>
   4b750:	29000234 	orhi	r4,r5,8
   4b754:	01400434 	movhi	r5,16
   4b758:	297fffc4 	addi	r5,r5,-1
   4b75c:	2148703a 	and	r4,r4,r5
   4b760:	003f7f06 	br	4b560 <__alt_data_end+0xfffe50a0>
   4b764:	18ffffc4 	addi	r3,r3,-1
   4b768:	18004d1e 	bne	r3,zero,4b8a0 <__adddf3+0x41c>
   4b76c:	898dc83a 	sub	r6,r17,r6
   4b770:	89a3803a 	cmpltu	r17,r17,r6
   4b774:	2a0bc83a 	sub	r5,r5,r8
   4b778:	2c4bc83a 	sub	r5,r5,r17
   4b77c:	3023883a 	mov	r17,r6
   4b780:	003f9c06 	br	4b5f4 <__alt_data_end+0xfffe5134>
   4b784:	4184b03a 	or	r2,r8,r6
   4b788:	103f5d26 	beq	r2,zero,4b500 <__alt_data_end+0xfffe5040>
   4b78c:	213fffc4 	addi	r4,r4,-1
   4b790:	203fd926 	beq	r4,zero,4b6f8 <__alt_data_end+0xfffe5238>
   4b794:	0081ffc4 	movi	r2,2047
   4b798:	80bfca1e 	bne	r16,r2,4b6c4 <__alt_data_end+0xfffe5204>
   4b79c:	003f5806 	br	4b500 <__alt_data_end+0xfffe5040>
   4b7a0:	10c8b03a 	or	r4,r2,r3
   4b7a4:	20008b26 	beq	r4,zero,4b9d4 <__adddf3+0x550>
   4b7a8:	100b883a 	mov	r5,r2
   4b7ac:	1823883a 	mov	r17,r3
   4b7b0:	888001cc 	andi	r2,r17,7
   4b7b4:	103f541e 	bne	r2,zero,4b508 <__alt_data_end+0xfffe5048>
   4b7b8:	9007883a 	mov	r3,r18
   4b7bc:	003fb006 	br	4b680 <__alt_data_end+0xfffe51c0>
   4b7c0:	1800531e 	bne	r3,zero,4b910 <__adddf3+0x48c>
   4b7c4:	80800044 	addi	r2,r16,1
   4b7c8:	1081ffcc 	andi	r2,r2,2047
   4b7cc:	00c00044 	movi	r3,1
   4b7d0:	1880990e 	bge	r3,r2,4ba38 <__adddf3+0x5b4>
   4b7d4:	8985c83a 	sub	r2,r17,r6
   4b7d8:	8887803a 	cmpltu	r3,r17,r2
   4b7dc:	2a27c83a 	sub	r19,r5,r8
   4b7e0:	98e7c83a 	sub	r19,r19,r3
   4b7e4:	98c0202c 	andhi	r3,r19,128
   4b7e8:	18006226 	beq	r3,zero,4b974 <__adddf3+0x4f0>
   4b7ec:	3463c83a 	sub	r17,r6,r17
   4b7f0:	4151c83a 	sub	r8,r8,r5
   4b7f4:	344d803a 	cmpltu	r6,r6,r17
   4b7f8:	41a7c83a 	sub	r19,r8,r6
   4b7fc:	3825883a 	mov	r18,r7
   4b800:	983f821e 	bne	r19,zero,4b60c <__alt_data_end+0xfffe514c>
   4b804:	8809883a 	mov	r4,r17
   4b808:	004da200 	call	4da20 <__clzsi2>
   4b80c:	10800804 	addi	r2,r2,32
   4b810:	10fffe04 	addi	r3,r2,-8
   4b814:	010007c4 	movi	r4,31
   4b818:	20ff810e 	bge	r4,r3,4b620 <__alt_data_end+0xfffe5160>
   4b81c:	14fff604 	addi	r19,r2,-40
   4b820:	8ce6983a 	sll	r19,r17,r19
   4b824:	0023883a 	mov	r17,zero
   4b828:	1c3f840e 	bge	r3,r16,4b63c <__alt_data_end+0xfffe517c>
   4b82c:	017fe034 	movhi	r5,65408
   4b830:	297fffc4 	addi	r5,r5,-1
   4b834:	80e1c83a 	sub	r16,r16,r3
   4b838:	994a703a 	and	r5,r19,r5
   4b83c:	003f3006 	br	4b500 <__alt_data_end+0xfffe5040>
   4b840:	0009883a 	mov	r4,zero
   4b844:	0005883a 	mov	r2,zero
   4b848:	003f4506 	br	4b560 <__alt_data_end+0xfffe50a0>
   4b84c:	418cb03a 	or	r6,r8,r6
   4b850:	300cc03a 	cmpne	r6,r6,zero
   4b854:	0007883a 	mov	r3,zero
   4b858:	003f6106 	br	4b5e0 <__alt_data_end+0xfffe5120>
   4b85c:	2000921e 	bne	r4,zero,4baa8 <__adddf3+0x624>
   4b860:	80800044 	addi	r2,r16,1
   4b864:	11c1ffcc 	andi	r7,r2,2047
   4b868:	01000044 	movi	r4,1
   4b86c:	21c0610e 	bge	r4,r7,4b9f4 <__adddf3+0x570>
   4b870:	0101ffc4 	movi	r4,2047
   4b874:	1100a326 	beq	r2,r4,4bb04 <__adddf3+0x680>
   4b878:	344d883a 	add	r6,r6,r17
   4b87c:	3463803a 	cmpltu	r17,r6,r17
   4b880:	414b883a 	add	r5,r8,r5
   4b884:	2c4b883a 	add	r5,r5,r17
   4b888:	282297fa 	slli	r17,r5,31
   4b88c:	300cd07a 	srli	r6,r6,1
   4b890:	280ad07a 	srli	r5,r5,1
   4b894:	1021883a 	mov	r16,r2
   4b898:	89a2b03a 	or	r17,r17,r6
   4b89c:	003f1806 	br	4b500 <__alt_data_end+0xfffe5040>
   4b8a0:	0081ffc4 	movi	r2,2047
   4b8a4:	80bf411e 	bne	r16,r2,4b5ac <__alt_data_end+0xfffe50ec>
   4b8a8:	003f1506 	br	4b500 <__alt_data_end+0xfffe5040>
   4b8ac:	80bff844 	addi	r2,r16,-31
   4b8b0:	00c00804 	movi	r3,32
   4b8b4:	9884d83a 	srl	r2,r19,r2
   4b8b8:	28c04a26 	beq	r5,r3,4b9e4 <__adddf3+0x560>
   4b8bc:	00c00fc4 	movi	r3,63
   4b8c0:	1c21c83a 	sub	r16,r3,r16
   4b8c4:	9c26983a 	sll	r19,r19,r16
   4b8c8:	9c62b03a 	or	r17,r19,r17
   4b8cc:	8822c03a 	cmpne	r17,r17,zero
   4b8d0:	88a2b03a 	or	r17,r17,r2
   4b8d4:	000b883a 	mov	r5,zero
   4b8d8:	0021883a 	mov	r16,zero
   4b8dc:	003fb406 	br	4b7b0 <__alt_data_end+0xfffe52f0>
   4b8e0:	18bff804 	addi	r2,r3,-32
   4b8e4:	01000804 	movi	r4,32
   4b8e8:	4084d83a 	srl	r2,r8,r2
   4b8ec:	19003f26 	beq	r3,r4,4b9ec <__adddf3+0x568>
   4b8f0:	01001004 	movi	r4,64
   4b8f4:	20c7c83a 	sub	r3,r4,r3
   4b8f8:	40d0983a 	sll	r8,r8,r3
   4b8fc:	418cb03a 	or	r6,r8,r6
   4b900:	300cc03a 	cmpne	r6,r6,zero
   4b904:	308cb03a 	or	r6,r6,r2
   4b908:	0007883a 	mov	r3,zero
   4b90c:	003f3406 	br	4b5e0 <__alt_data_end+0xfffe5120>
   4b910:	80002326 	beq	r16,zero,4b9a0 <__adddf3+0x51c>
   4b914:	0101ffc4 	movi	r4,2047
   4b918:	11005e26 	beq	r2,r4,4ba94 <__adddf3+0x610>
   4b91c:	00c7c83a 	sub	r3,zero,r3
   4b920:	29402034 	orhi	r5,r5,128
   4b924:	01000e04 	movi	r4,56
   4b928:	20c07216 	blt	r4,r3,4baf4 <__adddf3+0x670>
   4b92c:	010007c4 	movi	r4,31
   4b930:	20c0ce16 	blt	r4,r3,4bc6c <__adddf3+0x7e8>
   4b934:	01000804 	movi	r4,32
   4b938:	20c9c83a 	sub	r4,r4,r3
   4b93c:	2914983a 	sll	r10,r5,r4
   4b940:	88d2d83a 	srl	r9,r17,r3
   4b944:	8908983a 	sll	r4,r17,r4
   4b948:	28c6d83a 	srl	r3,r5,r3
   4b94c:	5262b03a 	or	r17,r10,r9
   4b950:	2008c03a 	cmpne	r4,r4,zero
   4b954:	8922b03a 	or	r17,r17,r4
   4b958:	3463c83a 	sub	r17,r6,r17
   4b95c:	40c7c83a 	sub	r3,r8,r3
   4b960:	344d803a 	cmpltu	r6,r6,r17
   4b964:	198bc83a 	sub	r5,r3,r6
   4b968:	1021883a 	mov	r16,r2
   4b96c:	3825883a 	mov	r18,r7
   4b970:	003f2006 	br	4b5f4 <__alt_data_end+0xfffe5134>
   4b974:	9886b03a 	or	r3,r19,r2
   4b978:	1800141e 	bne	r3,zero,4b9cc <__adddf3+0x548>
   4b97c:	0007883a 	mov	r3,zero
   4b980:	000b883a 	mov	r5,zero
   4b984:	0023883a 	mov	r17,zero
   4b988:	0021883a 	mov	r16,zero
   4b98c:	003f3c06 	br	4b680 <__alt_data_end+0xfffe51c0>
   4b990:	418cb03a 	or	r6,r8,r6
   4b994:	300cc03a 	cmpne	r6,r6,zero
   4b998:	0011883a 	mov	r8,zero
   4b99c:	003f5606 	br	4b6f8 <__alt_data_end+0xfffe5238>
   4b9a0:	2c48b03a 	or	r4,r5,r17
   4b9a4:	20003b26 	beq	r4,zero,4ba94 <__adddf3+0x610>
   4b9a8:	00c6303a 	nor	r3,zero,r3
   4b9ac:	1800371e 	bne	r3,zero,4ba8c <__adddf3+0x608>
   4b9b0:	3463c83a 	sub	r17,r6,r17
   4b9b4:	414bc83a 	sub	r5,r8,r5
   4b9b8:	344d803a 	cmpltu	r6,r6,r17
   4b9bc:	298bc83a 	sub	r5,r5,r6
   4b9c0:	1021883a 	mov	r16,r2
   4b9c4:	3825883a 	mov	r18,r7
   4b9c8:	003f0a06 	br	4b5f4 <__alt_data_end+0xfffe5134>
   4b9cc:	1023883a 	mov	r17,r2
   4b9d0:	003f0d06 	br	4b608 <__alt_data_end+0xfffe5148>
   4b9d4:	0007883a 	mov	r3,zero
   4b9d8:	000b883a 	mov	r5,zero
   4b9dc:	0023883a 	mov	r17,zero
   4b9e0:	003f2706 	br	4b680 <__alt_data_end+0xfffe51c0>
   4b9e4:	0027883a 	mov	r19,zero
   4b9e8:	003fb706 	br	4b8c8 <__alt_data_end+0xfffe5408>
   4b9ec:	0011883a 	mov	r8,zero
   4b9f0:	003fc206 	br	4b8fc <__alt_data_end+0xfffe543c>
   4b9f4:	2c44b03a 	or	r2,r5,r17
   4b9f8:	8000871e 	bne	r16,zero,4bc18 <__adddf3+0x794>
   4b9fc:	1000b126 	beq	r2,zero,4bcc4 <__adddf3+0x840>
   4ba00:	4184b03a 	or	r2,r8,r6
   4ba04:	103ebe26 	beq	r2,zero,4b500 <__alt_data_end+0xfffe5040>
   4ba08:	3445883a 	add	r2,r6,r17
   4ba0c:	1463803a 	cmpltu	r17,r2,r17
   4ba10:	414b883a 	add	r5,r8,r5
   4ba14:	2c4b883a 	add	r5,r5,r17
   4ba18:	28c0202c 	andhi	r3,r5,128
   4ba1c:	1023883a 	mov	r17,r2
   4ba20:	183f6326 	beq	r3,zero,4b7b0 <__alt_data_end+0xfffe52f0>
   4ba24:	00bfe034 	movhi	r2,65408
   4ba28:	10bfffc4 	addi	r2,r2,-1
   4ba2c:	2021883a 	mov	r16,r4
   4ba30:	288a703a 	and	r5,r5,r2
   4ba34:	003eb206 	br	4b500 <__alt_data_end+0xfffe5040>
   4ba38:	2c44b03a 	or	r2,r5,r17
   4ba3c:	8000251e 	bne	r16,zero,4bad4 <__adddf3+0x650>
   4ba40:	10004b1e 	bne	r2,zero,4bb70 <__adddf3+0x6ec>
   4ba44:	4184b03a 	or	r2,r8,r6
   4ba48:	103fe226 	beq	r2,zero,4b9d4 <__alt_data_end+0xfffe5514>
   4ba4c:	400b883a 	mov	r5,r8
   4ba50:	3023883a 	mov	r17,r6
   4ba54:	3825883a 	mov	r18,r7
   4ba58:	003ea906 	br	4b500 <__alt_data_end+0xfffe5040>
   4ba5c:	20bff804 	addi	r2,r4,-32
   4ba60:	01c00804 	movi	r7,32
   4ba64:	4084d83a 	srl	r2,r8,r2
   4ba68:	21c07e26 	beq	r4,r7,4bc64 <__adddf3+0x7e0>
   4ba6c:	01c01004 	movi	r7,64
   4ba70:	3909c83a 	sub	r4,r7,r4
   4ba74:	4110983a 	sll	r8,r8,r4
   4ba78:	418cb03a 	or	r6,r8,r6
   4ba7c:	300cc03a 	cmpne	r6,r6,zero
   4ba80:	308cb03a 	or	r6,r6,r2
   4ba84:	0011883a 	mov	r8,zero
   4ba88:	003f1b06 	br	4b6f8 <__alt_data_end+0xfffe5238>
   4ba8c:	0101ffc4 	movi	r4,2047
   4ba90:	113fa41e 	bne	r2,r4,4b924 <__alt_data_end+0xfffe5464>
   4ba94:	400b883a 	mov	r5,r8
   4ba98:	3023883a 	mov	r17,r6
   4ba9c:	1021883a 	mov	r16,r2
   4baa0:	3825883a 	mov	r18,r7
   4baa4:	003e9606 	br	4b500 <__alt_data_end+0xfffe5040>
   4baa8:	80001a1e 	bne	r16,zero,4bb14 <__adddf3+0x690>
   4baac:	2c4eb03a 	or	r7,r5,r17
   4bab0:	38005526 	beq	r7,zero,4bc08 <__adddf3+0x784>
   4bab4:	0108303a 	nor	r4,zero,r4
   4bab8:	2000511e 	bne	r4,zero,4bc00 <__adddf3+0x77c>
   4babc:	89a3883a 	add	r17,r17,r6
   4bac0:	414b883a 	add	r5,r8,r5
   4bac4:	898d803a 	cmpltu	r6,r17,r6
   4bac8:	298b883a 	add	r5,r5,r6
   4bacc:	1021883a 	mov	r16,r2
   4bad0:	003f0e06 	br	4b70c <__alt_data_end+0xfffe524c>
   4bad4:	1000341e 	bne	r2,zero,4bba8 <__adddf3+0x724>
   4bad8:	4184b03a 	or	r2,r8,r6
   4badc:	10006f26 	beq	r2,zero,4bc9c <__adddf3+0x818>
   4bae0:	400b883a 	mov	r5,r8
   4bae4:	3023883a 	mov	r17,r6
   4bae8:	3825883a 	mov	r18,r7
   4baec:	0401ffc4 	movi	r16,2047
   4baf0:	003e8306 	br	4b500 <__alt_data_end+0xfffe5040>
   4baf4:	2c62b03a 	or	r17,r5,r17
   4baf8:	8822c03a 	cmpne	r17,r17,zero
   4bafc:	0007883a 	mov	r3,zero
   4bb00:	003f9506 	br	4b958 <__alt_data_end+0xfffe5498>
   4bb04:	1021883a 	mov	r16,r2
   4bb08:	000b883a 	mov	r5,zero
   4bb0c:	0023883a 	mov	r17,zero
   4bb10:	003edb06 	br	4b680 <__alt_data_end+0xfffe51c0>
   4bb14:	01c1ffc4 	movi	r7,2047
   4bb18:	11c03b26 	beq	r2,r7,4bc08 <__adddf3+0x784>
   4bb1c:	0109c83a 	sub	r4,zero,r4
   4bb20:	29402034 	orhi	r5,r5,128
   4bb24:	01c00e04 	movi	r7,56
   4bb28:	39006216 	blt	r7,r4,4bcb4 <__adddf3+0x830>
   4bb2c:	01c007c4 	movi	r7,31
   4bb30:	39006b16 	blt	r7,r4,4bce0 <__adddf3+0x85c>
   4bb34:	01c00804 	movi	r7,32
   4bb38:	390fc83a 	sub	r7,r7,r4
   4bb3c:	29d4983a 	sll	r10,r5,r7
   4bb40:	8912d83a 	srl	r9,r17,r4
   4bb44:	89ce983a 	sll	r7,r17,r7
   4bb48:	2908d83a 	srl	r4,r5,r4
   4bb4c:	5262b03a 	or	r17,r10,r9
   4bb50:	380ac03a 	cmpne	r5,r7,zero
   4bb54:	8962b03a 	or	r17,r17,r5
   4bb58:	89a3883a 	add	r17,r17,r6
   4bb5c:	2211883a 	add	r8,r4,r8
   4bb60:	898d803a 	cmpltu	r6,r17,r6
   4bb64:	418b883a 	add	r5,r8,r6
   4bb68:	1021883a 	mov	r16,r2
   4bb6c:	003ee706 	br	4b70c <__alt_data_end+0xfffe524c>
   4bb70:	4184b03a 	or	r2,r8,r6
   4bb74:	103e6226 	beq	r2,zero,4b500 <__alt_data_end+0xfffe5040>
   4bb78:	8987c83a 	sub	r3,r17,r6
   4bb7c:	88c9803a 	cmpltu	r4,r17,r3
   4bb80:	2a05c83a 	sub	r2,r5,r8
   4bb84:	1105c83a 	sub	r2,r2,r4
   4bb88:	1100202c 	andhi	r4,r2,128
   4bb8c:	203f0426 	beq	r4,zero,4b7a0 <__alt_data_end+0xfffe52e0>
   4bb90:	3463c83a 	sub	r17,r6,r17
   4bb94:	414bc83a 	sub	r5,r8,r5
   4bb98:	344d803a 	cmpltu	r6,r6,r17
   4bb9c:	298bc83a 	sub	r5,r5,r6
   4bba0:	3825883a 	mov	r18,r7
   4bba4:	003e5606 	br	4b500 <__alt_data_end+0xfffe5040>
   4bba8:	4184b03a 	or	r2,r8,r6
   4bbac:	10002b26 	beq	r2,zero,4bc5c <__adddf3+0x7d8>
   4bbb0:	2804d0fa 	srli	r2,r5,3
   4bbb4:	8822d0fa 	srli	r17,r17,3
   4bbb8:	280a977a 	slli	r5,r5,29
   4bbbc:	10c0022c 	andhi	r3,r2,8
   4bbc0:	2c62b03a 	or	r17,r5,r17
   4bbc4:	18000826 	beq	r3,zero,4bbe8 <__adddf3+0x764>
   4bbc8:	4008d0fa 	srli	r4,r8,3
   4bbcc:	20c0022c 	andhi	r3,r4,8
   4bbd0:	1800051e 	bne	r3,zero,4bbe8 <__adddf3+0x764>
   4bbd4:	300cd0fa 	srli	r6,r6,3
   4bbd8:	4010977a 	slli	r8,r8,29
   4bbdc:	2005883a 	mov	r2,r4
   4bbe0:	3825883a 	mov	r18,r7
   4bbe4:	41a2b03a 	or	r17,r8,r6
   4bbe8:	880ad77a 	srli	r5,r17,29
   4bbec:	100490fa 	slli	r2,r2,3
   4bbf0:	882290fa 	slli	r17,r17,3
   4bbf4:	0401ffc4 	movi	r16,2047
   4bbf8:	288ab03a 	or	r5,r5,r2
   4bbfc:	003e4006 	br	4b500 <__alt_data_end+0xfffe5040>
   4bc00:	01c1ffc4 	movi	r7,2047
   4bc04:	11ffc71e 	bne	r2,r7,4bb24 <__alt_data_end+0xfffe5664>
   4bc08:	400b883a 	mov	r5,r8
   4bc0c:	3023883a 	mov	r17,r6
   4bc10:	1021883a 	mov	r16,r2
   4bc14:	003e3a06 	br	4b500 <__alt_data_end+0xfffe5040>
   4bc18:	10002d26 	beq	r2,zero,4bcd0 <__adddf3+0x84c>
   4bc1c:	4184b03a 	or	r2,r8,r6
   4bc20:	10000e26 	beq	r2,zero,4bc5c <__adddf3+0x7d8>
   4bc24:	2804d0fa 	srli	r2,r5,3
   4bc28:	8822d0fa 	srli	r17,r17,3
   4bc2c:	280a977a 	slli	r5,r5,29
   4bc30:	10c0022c 	andhi	r3,r2,8
   4bc34:	2c62b03a 	or	r17,r5,r17
   4bc38:	183feb26 	beq	r3,zero,4bbe8 <__alt_data_end+0xfffe5728>
   4bc3c:	4008d0fa 	srli	r4,r8,3
   4bc40:	20c0022c 	andhi	r3,r4,8
   4bc44:	183fe81e 	bne	r3,zero,4bbe8 <__alt_data_end+0xfffe5728>
   4bc48:	300cd0fa 	srli	r6,r6,3
   4bc4c:	4010977a 	slli	r8,r8,29
   4bc50:	2005883a 	mov	r2,r4
   4bc54:	41a2b03a 	or	r17,r8,r6
   4bc58:	003fe306 	br	4bbe8 <__alt_data_end+0xfffe5728>
   4bc5c:	0401ffc4 	movi	r16,2047
   4bc60:	003e2706 	br	4b500 <__alt_data_end+0xfffe5040>
   4bc64:	0011883a 	mov	r8,zero
   4bc68:	003f8306 	br	4ba78 <__alt_data_end+0xfffe55b8>
   4bc6c:	193ff804 	addi	r4,r3,-32
   4bc70:	02400804 	movi	r9,32
   4bc74:	2908d83a 	srl	r4,r5,r4
   4bc78:	1a402526 	beq	r3,r9,4bd10 <__adddf3+0x88c>
   4bc7c:	02401004 	movi	r9,64
   4bc80:	48c7c83a 	sub	r3,r9,r3
   4bc84:	28ca983a 	sll	r5,r5,r3
   4bc88:	2c62b03a 	or	r17,r5,r17
   4bc8c:	8822c03a 	cmpne	r17,r17,zero
   4bc90:	8922b03a 	or	r17,r17,r4
   4bc94:	0007883a 	mov	r3,zero
   4bc98:	003f2f06 	br	4b958 <__alt_data_end+0xfffe5498>
   4bc9c:	01402034 	movhi	r5,128
   4bca0:	0007883a 	mov	r3,zero
   4bca4:	297fffc4 	addi	r5,r5,-1
   4bca8:	047ffe04 	movi	r17,-8
   4bcac:	0401ffc4 	movi	r16,2047
   4bcb0:	003e7306 	br	4b680 <__alt_data_end+0xfffe51c0>
   4bcb4:	2c62b03a 	or	r17,r5,r17
   4bcb8:	8822c03a 	cmpne	r17,r17,zero
   4bcbc:	0009883a 	mov	r4,zero
   4bcc0:	003fa506 	br	4bb58 <__alt_data_end+0xfffe5698>
   4bcc4:	400b883a 	mov	r5,r8
   4bcc8:	3023883a 	mov	r17,r6
   4bccc:	003e0c06 	br	4b500 <__alt_data_end+0xfffe5040>
   4bcd0:	400b883a 	mov	r5,r8
   4bcd4:	3023883a 	mov	r17,r6
   4bcd8:	0401ffc4 	movi	r16,2047
   4bcdc:	003e0806 	br	4b500 <__alt_data_end+0xfffe5040>
   4bce0:	21fff804 	addi	r7,r4,-32
   4bce4:	02400804 	movi	r9,32
   4bce8:	29ced83a 	srl	r7,r5,r7
   4bcec:	22400a26 	beq	r4,r9,4bd18 <__adddf3+0x894>
   4bcf0:	02401004 	movi	r9,64
   4bcf4:	4909c83a 	sub	r4,r9,r4
   4bcf8:	290a983a 	sll	r5,r5,r4
   4bcfc:	2c62b03a 	or	r17,r5,r17
   4bd00:	8822c03a 	cmpne	r17,r17,zero
   4bd04:	89e2b03a 	or	r17,r17,r7
   4bd08:	0009883a 	mov	r4,zero
   4bd0c:	003f9206 	br	4bb58 <__alt_data_end+0xfffe5698>
   4bd10:	000b883a 	mov	r5,zero
   4bd14:	003fdc06 	br	4bc88 <__alt_data_end+0xfffe57c8>
   4bd18:	000b883a 	mov	r5,zero
   4bd1c:	003ff706 	br	4bcfc <__alt_data_end+0xfffe583c>

0004bd20 <__divdf3>:
   4bd20:	defff204 	addi	sp,sp,-56
   4bd24:	dd000815 	stw	r20,32(sp)
   4bd28:	2828d53a 	srli	r20,r5,20
   4bd2c:	dd800a15 	stw	r22,40(sp)
   4bd30:	282cd7fa 	srli	r22,r5,31
   4bd34:	dc000415 	stw	r16,16(sp)
   4bd38:	04000434 	movhi	r16,16
   4bd3c:	df000c15 	stw	fp,48(sp)
   4bd40:	dcc00715 	stw	r19,28(sp)
   4bd44:	dc800615 	stw	r18,24(sp)
   4bd48:	dc400515 	stw	r17,20(sp)
   4bd4c:	843fffc4 	addi	r16,r16,-1
   4bd50:	dfc00d15 	stw	ra,52(sp)
   4bd54:	ddc00b15 	stw	r23,44(sp)
   4bd58:	dd400915 	stw	r21,36(sp)
   4bd5c:	a501ffcc 	andi	r20,r20,2047
   4bd60:	2025883a 	mov	r18,r4
   4bd64:	2027883a 	mov	r19,r4
   4bd68:	2c22703a 	and	r17,r5,r16
   4bd6c:	b7003fcc 	andi	fp,r22,255
   4bd70:	a0005e26 	beq	r20,zero,4beec <__divdf3+0x1cc>
   4bd74:	0081ffc4 	movi	r2,2047
   4bd78:	a0803526 	beq	r20,r2,4be50 <__divdf3+0x130>
   4bd7c:	8c000434 	orhi	r16,r17,16
   4bd80:	2004d77a 	srli	r2,r4,29
   4bd84:	802090fa 	slli	r16,r16,3
   4bd88:	202690fa 	slli	r19,r4,3
   4bd8c:	a53f0044 	addi	r20,r20,-1023
   4bd90:	80a2b03a 	or	r17,r16,r2
   4bd94:	0025883a 	mov	r18,zero
   4bd98:	0011883a 	mov	r8,zero
   4bd9c:	380ad53a 	srli	r5,r7,20
   4bda0:	382ed7fa 	srli	r23,r7,31
   4bda4:	04000434 	movhi	r16,16
   4bda8:	843fffc4 	addi	r16,r16,-1
   4bdac:	2941ffcc 	andi	r5,r5,2047
   4bdb0:	302b883a 	mov	r21,r6
   4bdb4:	3c20703a 	and	r16,r7,r16
   4bdb8:	ba403fcc 	andi	r9,r23,255
   4bdbc:	28006726 	beq	r5,zero,4bf5c <__divdf3+0x23c>
   4bdc0:	0081ffc4 	movi	r2,2047
   4bdc4:	28805f26 	beq	r5,r2,4bf44 <__divdf3+0x224>
   4bdc8:	84000434 	orhi	r16,r16,16
   4bdcc:	3004d77a 	srli	r2,r6,29
   4bdd0:	802090fa 	slli	r16,r16,3
   4bdd4:	302a90fa 	slli	r21,r6,3
   4bdd8:	297f0044 	addi	r5,r5,-1023
   4bddc:	80a0b03a 	or	r16,r16,r2
   4bde0:	000f883a 	mov	r7,zero
   4bde4:	3c86b03a 	or	r3,r7,r18
   4bde8:	180690ba 	slli	r3,r3,2
   4bdec:	00800174 	movhi	r2,5
   4bdf0:	10af8404 	addi	r2,r2,-16880
   4bdf4:	1887883a 	add	r3,r3,r2
   4bdf8:	18c00017 	ldw	r3,0(r3)
   4bdfc:	b5c8f03a 	xor	r4,r22,r23
   4be00:	200d883a 	mov	r6,r4
   4be04:	24803fcc 	andi	r18,r4,255
   4be08:	a169c83a 	sub	r20,r20,r5
   4be0c:	1800683a 	jmp	r3
   4be10:	0004c058 	cmpnei	zero,zero,4865
   4be14:	0004be88 	cmpgei	zero,zero,4858
   4be18:	0004c01c 	xori	zero,zero,4864
   4be1c:	0004be6c 	andhi	zero,zero,4857
   4be20:	0004c01c 	xori	zero,zero,4864
   4be24:	0004bff0 	cmpltui	zero,zero,4863
   4be28:	0004c01c 	xori	zero,zero,4864
   4be2c:	0004be6c 	andhi	zero,zero,4857
   4be30:	0004be88 	cmpgei	zero,zero,4858
   4be34:	0004be88 	cmpgei	zero,zero,4858
   4be38:	0004bff0 	cmpltui	zero,zero,4863
   4be3c:	0004be6c 	andhi	zero,zero,4857
   4be40:	0004be7c 	xorhi	zero,zero,4857
   4be44:	0004be7c 	xorhi	zero,zero,4857
   4be48:	0004be7c 	xorhi	zero,zero,4857
   4be4c:	0004c02c 	andhi	zero,zero,4864
   4be50:	8904b03a 	or	r2,r17,r4
   4be54:	1000631e 	bne	r2,zero,4bfe4 <__divdf3+0x2c4>
   4be58:	04800204 	movi	r18,8
   4be5c:	0023883a 	mov	r17,zero
   4be60:	0027883a 	mov	r19,zero
   4be64:	02000084 	movi	r8,2
   4be68:	003fcc06 	br	4bd9c <__alt_data_end+0xfffe58dc>
   4be6c:	8023883a 	mov	r17,r16
   4be70:	a827883a 	mov	r19,r21
   4be74:	4839883a 	mov	fp,r9
   4be78:	3811883a 	mov	r8,r7
   4be7c:	00800084 	movi	r2,2
   4be80:	40812a1e 	bne	r8,r2,4c32c <__divdf3+0x60c>
   4be84:	e025883a 	mov	r18,fp
   4be88:	9180004c 	andi	r6,r18,1
   4be8c:	0101ffc4 	movi	r4,2047
   4be90:	000b883a 	mov	r5,zero
   4be94:	0027883a 	mov	r19,zero
   4be98:	2008953a 	slli	r4,r4,20
   4be9c:	30c03fcc 	andi	r3,r6,255
   4bea0:	04000434 	movhi	r16,16
   4bea4:	180697fa 	slli	r3,r3,31
   4bea8:	843fffc4 	addi	r16,r16,-1
   4beac:	2c20703a 	and	r16,r5,r16
   4beb0:	8120b03a 	or	r16,r16,r4
   4beb4:	80c6b03a 	or	r3,r16,r3
   4beb8:	9805883a 	mov	r2,r19
   4bebc:	dfc00d17 	ldw	ra,52(sp)
   4bec0:	df000c17 	ldw	fp,48(sp)
   4bec4:	ddc00b17 	ldw	r23,44(sp)
   4bec8:	dd800a17 	ldw	r22,40(sp)
   4becc:	dd400917 	ldw	r21,36(sp)
   4bed0:	dd000817 	ldw	r20,32(sp)
   4bed4:	dcc00717 	ldw	r19,28(sp)
   4bed8:	dc800617 	ldw	r18,24(sp)
   4bedc:	dc400517 	ldw	r17,20(sp)
   4bee0:	dc000417 	ldw	r16,16(sp)
   4bee4:	dec00e04 	addi	sp,sp,56
   4bee8:	f800283a 	ret
   4beec:	8904b03a 	or	r2,r17,r4
   4bef0:	10003726 	beq	r2,zero,4bfd0 <__divdf3+0x2b0>
   4bef4:	88011c26 	beq	r17,zero,4c368 <__divdf3+0x648>
   4bef8:	8809883a 	mov	r4,r17
   4befc:	d9800315 	stw	r6,12(sp)
   4bf00:	d9c00115 	stw	r7,4(sp)
   4bf04:	004da200 	call	4da20 <__clzsi2>
   4bf08:	d9800317 	ldw	r6,12(sp)
   4bf0c:	d9c00117 	ldw	r7,4(sp)
   4bf10:	1007883a 	mov	r3,r2
   4bf14:	01000a04 	movi	r4,40
   4bf18:	1cfffe04 	addi	r19,r3,-8
   4bf1c:	20c9c83a 	sub	r4,r4,r3
   4bf20:	8cca983a 	sll	r5,r17,r19
   4bf24:	9108d83a 	srl	r4,r18,r4
   4bf28:	94e6983a 	sll	r19,r18,r19
   4bf2c:	2162b03a 	or	r17,r4,r5
   4bf30:	053f0344 	movi	r20,-1011
   4bf34:	a0e9c83a 	sub	r20,r20,r3
   4bf38:	0025883a 	mov	r18,zero
   4bf3c:	0011883a 	mov	r8,zero
   4bf40:	003f9606 	br	4bd9c <__alt_data_end+0xfffe58dc>
   4bf44:	8184b03a 	or	r2,r16,r6
   4bf48:	10001f1e 	bne	r2,zero,4bfc8 <__divdf3+0x2a8>
   4bf4c:	0021883a 	mov	r16,zero
   4bf50:	002b883a 	mov	r21,zero
   4bf54:	01c00084 	movi	r7,2
   4bf58:	003fa206 	br	4bde4 <__alt_data_end+0xfffe5924>
   4bf5c:	8184b03a 	or	r2,r16,r6
   4bf60:	10001526 	beq	r2,zero,4bfb8 <__divdf3+0x298>
   4bf64:	80010c26 	beq	r16,zero,4c398 <__divdf3+0x678>
   4bf68:	8009883a 	mov	r4,r16
   4bf6c:	d9800315 	stw	r6,12(sp)
   4bf70:	da000215 	stw	r8,8(sp)
   4bf74:	da400015 	stw	r9,0(sp)
   4bf78:	004da200 	call	4da20 <__clzsi2>
   4bf7c:	d9800317 	ldw	r6,12(sp)
   4bf80:	da000217 	ldw	r8,8(sp)
   4bf84:	da400017 	ldw	r9,0(sp)
   4bf88:	1007883a 	mov	r3,r2
   4bf8c:	01000a04 	movi	r4,40
   4bf90:	1d7ffe04 	addi	r21,r3,-8
   4bf94:	20c9c83a 	sub	r4,r4,r3
   4bf98:	8560983a 	sll	r16,r16,r21
   4bf9c:	3108d83a 	srl	r4,r6,r4
   4bfa0:	356a983a 	sll	r21,r6,r21
   4bfa4:	2420b03a 	or	r16,r4,r16
   4bfa8:	017f0344 	movi	r5,-1011
   4bfac:	28cbc83a 	sub	r5,r5,r3
   4bfb0:	000f883a 	mov	r7,zero
   4bfb4:	003f8b06 	br	4bde4 <__alt_data_end+0xfffe5924>
   4bfb8:	0021883a 	mov	r16,zero
   4bfbc:	002b883a 	mov	r21,zero
   4bfc0:	01c00044 	movi	r7,1
   4bfc4:	003f8706 	br	4bde4 <__alt_data_end+0xfffe5924>
   4bfc8:	01c000c4 	movi	r7,3
   4bfcc:	003f8506 	br	4bde4 <__alt_data_end+0xfffe5924>
   4bfd0:	04800104 	movi	r18,4
   4bfd4:	0023883a 	mov	r17,zero
   4bfd8:	0027883a 	mov	r19,zero
   4bfdc:	02000044 	movi	r8,1
   4bfe0:	003f6e06 	br	4bd9c <__alt_data_end+0xfffe58dc>
   4bfe4:	04800304 	movi	r18,12
   4bfe8:	020000c4 	movi	r8,3
   4bfec:	003f6b06 	br	4bd9c <__alt_data_end+0xfffe58dc>
   4bff0:	01400434 	movhi	r5,16
   4bff4:	000d883a 	mov	r6,zero
   4bff8:	297fffc4 	addi	r5,r5,-1
   4bffc:	04ffffc4 	movi	r19,-1
   4c000:	0101ffc4 	movi	r4,2047
   4c004:	003fa406 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c008:	043f0084 	movi	r16,-1022
   4c00c:	8521c83a 	sub	r16,r16,r20
   4c010:	00800e04 	movi	r2,56
   4c014:	1401200e 	bge	r2,r16,4c498 <__divdf3+0x778>
   4c018:	9180004c 	andi	r6,r18,1
   4c01c:	0009883a 	mov	r4,zero
   4c020:	000b883a 	mov	r5,zero
   4c024:	0027883a 	mov	r19,zero
   4c028:	003f9b06 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c02c:	8880022c 	andhi	r2,r17,8
   4c030:	1000c726 	beq	r2,zero,4c350 <__divdf3+0x630>
   4c034:	8080022c 	andhi	r2,r16,8
   4c038:	1000c51e 	bne	r2,zero,4c350 <__divdf3+0x630>
   4c03c:	00800434 	movhi	r2,16
   4c040:	81400234 	orhi	r5,r16,8
   4c044:	10bfffc4 	addi	r2,r2,-1
   4c048:	b80d883a 	mov	r6,r23
   4c04c:	288a703a 	and	r5,r5,r2
   4c050:	a827883a 	mov	r19,r21
   4c054:	003fea06 	br	4c000 <__alt_data_end+0xfffe5b40>
   4c058:	8440ea36 	bltu	r16,r17,4c404 <__divdf3+0x6e4>
   4c05c:	8c00e826 	beq	r17,r16,4c400 <__divdf3+0x6e0>
   4c060:	a53fffc4 	addi	r20,r20,-1
   4c064:	882d883a 	mov	r22,r17
   4c068:	000d883a 	mov	r6,zero
   4c06c:	a804d63a 	srli	r2,r21,24
   4c070:	8020923a 	slli	r16,r16,8
   4c074:	b009883a 	mov	r4,r22
   4c078:	d9800315 	stw	r6,12(sp)
   4c07c:	1420b03a 	or	r16,r2,r16
   4c080:	802ed43a 	srli	r23,r16,16
   4c084:	873fffcc 	andi	fp,r16,65535
   4c088:	a82a923a 	slli	r21,r21,8
   4c08c:	b80b883a 	mov	r5,r23
   4c090:	00415dc0 	call	415dc <__udivsi3>
   4c094:	b009883a 	mov	r4,r22
   4c098:	b80b883a 	mov	r5,r23
   4c09c:	1023883a 	mov	r17,r2
   4c0a0:	00415e40 	call	415e4 <__umodsi3>
   4c0a4:	1004943a 	slli	r2,r2,16
   4c0a8:	9808d43a 	srli	r4,r19,16
   4c0ac:	8f2d383a 	mul	r22,r17,fp
   4c0b0:	d9800317 	ldw	r6,12(sp)
   4c0b4:	1106b03a 	or	r3,r2,r4
   4c0b8:	1d80062e 	bgeu	r3,r22,4c0d4 <__divdf3+0x3b4>
   4c0bc:	1c07883a 	add	r3,r3,r16
   4c0c0:	88bfffc4 	addi	r2,r17,-1
   4c0c4:	1c00dc36 	bltu	r3,r16,4c438 <__divdf3+0x718>
   4c0c8:	1d80db2e 	bgeu	r3,r22,4c438 <__divdf3+0x718>
   4c0cc:	8c7fff84 	addi	r17,r17,-2
   4c0d0:	1c07883a 	add	r3,r3,r16
   4c0d4:	1dadc83a 	sub	r22,r3,r22
   4c0d8:	b009883a 	mov	r4,r22
   4c0dc:	b80b883a 	mov	r5,r23
   4c0e0:	d9800315 	stw	r6,12(sp)
   4c0e4:	00415dc0 	call	415dc <__udivsi3>
   4c0e8:	b009883a 	mov	r4,r22
   4c0ec:	b80b883a 	mov	r5,r23
   4c0f0:	d8800015 	stw	r2,0(sp)
   4c0f4:	00415e40 	call	415e4 <__umodsi3>
   4c0f8:	da400017 	ldw	r9,0(sp)
   4c0fc:	1004943a 	slli	r2,r2,16
   4c100:	9cffffcc 	andi	r19,r19,65535
   4c104:	4f07383a 	mul	r3,r9,fp
   4c108:	14c8b03a 	or	r4,r2,r19
   4c10c:	d9800317 	ldw	r6,12(sp)
   4c110:	20c0062e 	bgeu	r4,r3,4c12c <__divdf3+0x40c>
   4c114:	2409883a 	add	r4,r4,r16
   4c118:	48bfffc4 	addi	r2,r9,-1
   4c11c:	2400c436 	bltu	r4,r16,4c430 <__divdf3+0x710>
   4c120:	20c0c32e 	bgeu	r4,r3,4c430 <__divdf3+0x710>
   4c124:	4a7fff84 	addi	r9,r9,-2
   4c128:	2409883a 	add	r4,r4,r16
   4c12c:	8822943a 	slli	r17,r17,16
   4c130:	a80ed43a 	srli	r7,r21,16
   4c134:	aa3fffcc 	andi	r8,r21,65535
   4c138:	4c62b03a 	or	r17,r9,r17
   4c13c:	8816d43a 	srli	r11,r17,16
   4c140:	897fffcc 	andi	r5,r17,65535
   4c144:	2a15383a 	mul	r10,r5,r8
   4c148:	5a19383a 	mul	r12,r11,r8
   4c14c:	29cb383a 	mul	r5,r5,r7
   4c150:	5012d43a 	srli	r9,r10,16
   4c154:	20c5c83a 	sub	r2,r4,r3
   4c158:	614b883a 	add	r5,r12,r5
   4c15c:	2a4b883a 	add	r5,r5,r9
   4c160:	59c7383a 	mul	r3,r11,r7
   4c164:	2b00022e 	bgeu	r5,r12,4c170 <__divdf3+0x450>
   4c168:	01000074 	movhi	r4,1
   4c16c:	1907883a 	add	r3,r3,r4
   4c170:	2808d43a 	srli	r4,r5,16
   4c174:	280a943a 	slli	r5,r5,16
   4c178:	54ffffcc 	andi	r19,r10,65535
   4c17c:	1907883a 	add	r3,r3,r4
   4c180:	2ccb883a 	add	r5,r5,r19
   4c184:	10c09336 	bltu	r2,r3,4c3d4 <__divdf3+0x6b4>
   4c188:	10c0ad26 	beq	r2,r3,4c440 <__divdf3+0x720>
   4c18c:	10c7c83a 	sub	r3,r2,r3
   4c190:	3167c83a 	sub	r19,r6,r5
   4c194:	34ed803a 	cmpltu	r22,r6,r19
   4c198:	1dadc83a 	sub	r22,r3,r22
   4c19c:	b400b226 	beq	r22,r16,4c468 <__divdf3+0x748>
   4c1a0:	b009883a 	mov	r4,r22
   4c1a4:	b80b883a 	mov	r5,r23
   4c1a8:	d9c00115 	stw	r7,4(sp)
   4c1ac:	da000215 	stw	r8,8(sp)
   4c1b0:	00415dc0 	call	415dc <__udivsi3>
   4c1b4:	b009883a 	mov	r4,r22
   4c1b8:	b80b883a 	mov	r5,r23
   4c1bc:	d8800315 	stw	r2,12(sp)
   4c1c0:	00415e40 	call	415e4 <__umodsi3>
   4c1c4:	d9800317 	ldw	r6,12(sp)
   4c1c8:	1004943a 	slli	r2,r2,16
   4c1cc:	9808d43a 	srli	r4,r19,16
   4c1d0:	372d383a 	mul	r22,r6,fp
   4c1d4:	d9c00117 	ldw	r7,4(sp)
   4c1d8:	1106b03a 	or	r3,r2,r4
   4c1dc:	da000217 	ldw	r8,8(sp)
   4c1e0:	1d80062e 	bgeu	r3,r22,4c1fc <__divdf3+0x4dc>
   4c1e4:	1c07883a 	add	r3,r3,r16
   4c1e8:	30bfffc4 	addi	r2,r6,-1
   4c1ec:	1c00a036 	bltu	r3,r16,4c470 <__divdf3+0x750>
   4c1f0:	1d809f2e 	bgeu	r3,r22,4c470 <__divdf3+0x750>
   4c1f4:	31bfff84 	addi	r6,r6,-2
   4c1f8:	1c07883a 	add	r3,r3,r16
   4c1fc:	1dadc83a 	sub	r22,r3,r22
   4c200:	b009883a 	mov	r4,r22
   4c204:	b80b883a 	mov	r5,r23
   4c208:	d9800315 	stw	r6,12(sp)
   4c20c:	d9c00115 	stw	r7,4(sp)
   4c210:	da000215 	stw	r8,8(sp)
   4c214:	00415dc0 	call	415dc <__udivsi3>
   4c218:	b009883a 	mov	r4,r22
   4c21c:	b80b883a 	mov	r5,r23
   4c220:	d8800015 	stw	r2,0(sp)
   4c224:	00415e40 	call	415e4 <__umodsi3>
   4c228:	da400017 	ldw	r9,0(sp)
   4c22c:	1004943a 	slli	r2,r2,16
   4c230:	993fffcc 	andi	r4,r19,65535
   4c234:	4f39383a 	mul	fp,r9,fp
   4c238:	1106b03a 	or	r3,r2,r4
   4c23c:	d9800317 	ldw	r6,12(sp)
   4c240:	d9c00117 	ldw	r7,4(sp)
   4c244:	da000217 	ldw	r8,8(sp)
   4c248:	1f00062e 	bgeu	r3,fp,4c264 <__divdf3+0x544>
   4c24c:	1c07883a 	add	r3,r3,r16
   4c250:	48bfffc4 	addi	r2,r9,-1
   4c254:	1c008836 	bltu	r3,r16,4c478 <__divdf3+0x758>
   4c258:	1f00872e 	bgeu	r3,fp,4c478 <__divdf3+0x758>
   4c25c:	4a7fff84 	addi	r9,r9,-2
   4c260:	1c07883a 	add	r3,r3,r16
   4c264:	3008943a 	slli	r4,r6,16
   4c268:	1f07c83a 	sub	r3,r3,fp
   4c26c:	4926b03a 	or	r19,r9,r4
   4c270:	993fffcc 	andi	r4,r19,65535
   4c274:	980cd43a 	srli	r6,r19,16
   4c278:	220b383a 	mul	r5,r4,r8
   4c27c:	21c5383a 	mul	r2,r4,r7
   4c280:	3211383a 	mul	r8,r6,r8
   4c284:	2808d43a 	srli	r4,r5,16
   4c288:	31cf383a 	mul	r7,r6,r7
   4c28c:	4085883a 	add	r2,r8,r2
   4c290:	1105883a 	add	r2,r2,r4
   4c294:	1200022e 	bgeu	r2,r8,4c2a0 <__divdf3+0x580>
   4c298:	01000074 	movhi	r4,1
   4c29c:	390f883a 	add	r7,r7,r4
   4c2a0:	1008d43a 	srli	r4,r2,16
   4c2a4:	1004943a 	slli	r2,r2,16
   4c2a8:	297fffcc 	andi	r5,r5,65535
   4c2ac:	390f883a 	add	r7,r7,r4
   4c2b0:	1145883a 	add	r2,r2,r5
   4c2b4:	19c06536 	bltu	r3,r7,4c44c <__divdf3+0x72c>
   4c2b8:	19c09f26 	beq	r3,r7,4c538 <__divdf3+0x818>
   4c2bc:	9cc00054 	ori	r19,r19,1
   4c2c0:	a100ffc4 	addi	r4,r20,1023
   4c2c4:	013f500e 	bge	zero,r4,4c008 <__alt_data_end+0xfffe5b48>
   4c2c8:	988001cc 	andi	r2,r19,7
   4c2cc:	10000726 	beq	r2,zero,4c2ec <__divdf3+0x5cc>
   4c2d0:	98c003cc 	andi	r3,r19,15
   4c2d4:	00800104 	movi	r2,4
   4c2d8:	18800426 	beq	r3,r2,4c2ec <__divdf3+0x5cc>
   4c2dc:	9885883a 	add	r2,r19,r2
   4c2e0:	14e1803a 	cmpltu	r16,r2,r19
   4c2e4:	8c23883a 	add	r17,r17,r16
   4c2e8:	1027883a 	mov	r19,r2
   4c2ec:	8880402c 	andhi	r2,r17,256
   4c2f0:	10000426 	beq	r2,zero,4c304 <__divdf3+0x5e4>
   4c2f4:	00bfc034 	movhi	r2,65280
   4c2f8:	10bfffc4 	addi	r2,r2,-1
   4c2fc:	a1010004 	addi	r4,r20,1024
   4c300:	88a2703a 	and	r17,r17,r2
   4c304:	0081ff84 	movi	r2,2046
   4c308:	113edf16 	blt	r2,r4,4be88 <__alt_data_end+0xfffe59c8>
   4c30c:	9826d0fa 	srli	r19,r19,3
   4c310:	8804977a 	slli	r2,r17,29
   4c314:	8820927a 	slli	r16,r17,9
   4c318:	2101ffcc 	andi	r4,r4,2047
   4c31c:	14e6b03a 	or	r19,r2,r19
   4c320:	800ad33a 	srli	r5,r16,12
   4c324:	9180004c 	andi	r6,r18,1
   4c328:	003edb06 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c32c:	008000c4 	movi	r2,3
   4c330:	4080a826 	beq	r8,r2,4c5d4 <__divdf3+0x8b4>
   4c334:	00800044 	movi	r2,1
   4c338:	4080551e 	bne	r8,r2,4c490 <__divdf3+0x770>
   4c33c:	e00d883a 	mov	r6,fp
   4c340:	0009883a 	mov	r4,zero
   4c344:	000b883a 	mov	r5,zero
   4c348:	0027883a 	mov	r19,zero
   4c34c:	003ed206 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c350:	00800434 	movhi	r2,16
   4c354:	89400234 	orhi	r5,r17,8
   4c358:	10bfffc4 	addi	r2,r2,-1
   4c35c:	b00d883a 	mov	r6,r22
   4c360:	288a703a 	and	r5,r5,r2
   4c364:	003f2606 	br	4c000 <__alt_data_end+0xfffe5b40>
   4c368:	d9800315 	stw	r6,12(sp)
   4c36c:	d9c00115 	stw	r7,4(sp)
   4c370:	004da200 	call	4da20 <__clzsi2>
   4c374:	10c00804 	addi	r3,r2,32
   4c378:	010009c4 	movi	r4,39
   4c37c:	d9800317 	ldw	r6,12(sp)
   4c380:	d9c00117 	ldw	r7,4(sp)
   4c384:	20fee30e 	bge	r4,r3,4bf14 <__alt_data_end+0xfffe5a54>
   4c388:	117ffe04 	addi	r5,r2,-8
   4c38c:	9162983a 	sll	r17,r18,r5
   4c390:	0027883a 	mov	r19,zero
   4c394:	003ee606 	br	4bf30 <__alt_data_end+0xfffe5a70>
   4c398:	3009883a 	mov	r4,r6
   4c39c:	d9800315 	stw	r6,12(sp)
   4c3a0:	da000215 	stw	r8,8(sp)
   4c3a4:	da400015 	stw	r9,0(sp)
   4c3a8:	004da200 	call	4da20 <__clzsi2>
   4c3ac:	10c00804 	addi	r3,r2,32
   4c3b0:	010009c4 	movi	r4,39
   4c3b4:	d9800317 	ldw	r6,12(sp)
   4c3b8:	da000217 	ldw	r8,8(sp)
   4c3bc:	da400017 	ldw	r9,0(sp)
   4c3c0:	20fef20e 	bge	r4,r3,4bf8c <__alt_data_end+0xfffe5acc>
   4c3c4:	10bffe04 	addi	r2,r2,-8
   4c3c8:	a8a0983a 	sll	r16,r21,r2
   4c3cc:	002b883a 	mov	r21,zero
   4c3d0:	003ef506 	br	4bfa8 <__alt_data_end+0xfffe5ae8>
   4c3d4:	354d883a 	add	r6,r6,r21
   4c3d8:	3549803a 	cmpltu	r4,r6,r21
   4c3dc:	2409883a 	add	r4,r4,r16
   4c3e0:	2089883a 	add	r4,r4,r2
   4c3e4:	88bfffc4 	addi	r2,r17,-1
   4c3e8:	81000c2e 	bgeu	r16,r4,4c41c <__divdf3+0x6fc>
   4c3ec:	20c04436 	bltu	r4,r3,4c500 <__divdf3+0x7e0>
   4c3f0:	19006f26 	beq	r3,r4,4c5b0 <__divdf3+0x890>
   4c3f4:	20c7c83a 	sub	r3,r4,r3
   4c3f8:	1023883a 	mov	r17,r2
   4c3fc:	003f6406 	br	4c190 <__alt_data_end+0xfffe5cd0>
   4c400:	9d7f1736 	bltu	r19,r21,4c060 <__alt_data_end+0xfffe5ba0>
   4c404:	9806d07a 	srli	r3,r19,1
   4c408:	880497fa 	slli	r2,r17,31
   4c40c:	980c97fa 	slli	r6,r19,31
   4c410:	882cd07a 	srli	r22,r17,1
   4c414:	18a6b03a 	or	r19,r3,r2
   4c418:	003f1406 	br	4c06c <__alt_data_end+0xfffe5bac>
   4c41c:	243ff51e 	bne	r4,r16,4c3f4 <__alt_data_end+0xfffe5f34>
   4c420:	357ff22e 	bgeu	r6,r21,4c3ec <__alt_data_end+0xfffe5f2c>
   4c424:	80c7c83a 	sub	r3,r16,r3
   4c428:	1023883a 	mov	r17,r2
   4c42c:	003f5806 	br	4c190 <__alt_data_end+0xfffe5cd0>
   4c430:	1013883a 	mov	r9,r2
   4c434:	003f3d06 	br	4c12c <__alt_data_end+0xfffe5c6c>
   4c438:	1023883a 	mov	r17,r2
   4c43c:	003f2506 	br	4c0d4 <__alt_data_end+0xfffe5c14>
   4c440:	317fe436 	bltu	r6,r5,4c3d4 <__alt_data_end+0xfffe5f14>
   4c444:	0007883a 	mov	r3,zero
   4c448:	003f5106 	br	4c190 <__alt_data_end+0xfffe5cd0>
   4c44c:	1c07883a 	add	r3,r3,r16
   4c450:	993fffc4 	addi	r4,r19,-1
   4c454:	1c000a2e 	bgeu	r3,r16,4c480 <__divdf3+0x760>
   4c458:	2027883a 	mov	r19,r4
   4c45c:	19ff971e 	bne	r3,r7,4c2bc <__alt_data_end+0xfffe5dfc>
   4c460:	a8bf961e 	bne	r21,r2,4c2bc <__alt_data_end+0xfffe5dfc>
   4c464:	003f9606 	br	4c2c0 <__alt_data_end+0xfffe5e00>
   4c468:	04ffffc4 	movi	r19,-1
   4c46c:	003f9406 	br	4c2c0 <__alt_data_end+0xfffe5e00>
   4c470:	100d883a 	mov	r6,r2
   4c474:	003f6106 	br	4c1fc <__alt_data_end+0xfffe5d3c>
   4c478:	1013883a 	mov	r9,r2
   4c47c:	003f7906 	br	4c264 <__alt_data_end+0xfffe5da4>
   4c480:	19c02636 	bltu	r3,r7,4c51c <__divdf3+0x7fc>
   4c484:	38c04d26 	beq	r7,r3,4c5bc <__divdf3+0x89c>
   4c488:	2027883a 	mov	r19,r4
   4c48c:	003f8b06 	br	4c2bc <__alt_data_end+0xfffe5dfc>
   4c490:	e025883a 	mov	r18,fp
   4c494:	003f8a06 	br	4c2c0 <__alt_data_end+0xfffe5e00>
   4c498:	008007c4 	movi	r2,31
   4c49c:	14002a16 	blt	r2,r16,4c548 <__divdf3+0x828>
   4c4a0:	a5010784 	addi	r20,r20,1054
   4c4a4:	8d04983a 	sll	r2,r17,r20
   4c4a8:	9c06d83a 	srl	r3,r19,r16
   4c4ac:	9d28983a 	sll	r20,r19,r20
   4c4b0:	8c20d83a 	srl	r16,r17,r16
   4c4b4:	1886b03a 	or	r3,r3,r2
   4c4b8:	a004c03a 	cmpne	r2,r20,zero
   4c4bc:	1884b03a 	or	r2,r3,r2
   4c4c0:	10c001cc 	andi	r3,r2,7
   4c4c4:	18000726 	beq	r3,zero,4c4e4 <__divdf3+0x7c4>
   4c4c8:	110003cc 	andi	r4,r2,15
   4c4cc:	00c00104 	movi	r3,4
   4c4d0:	20c00426 	beq	r4,r3,4c4e4 <__divdf3+0x7c4>
   4c4d4:	10c00104 	addi	r3,r2,4
   4c4d8:	1885803a 	cmpltu	r2,r3,r2
   4c4dc:	80a1883a 	add	r16,r16,r2
   4c4e0:	1805883a 	mov	r2,r3
   4c4e4:	80c0202c 	andhi	r3,r16,128
   4c4e8:	18002d26 	beq	r3,zero,4c5a0 <__divdf3+0x880>
   4c4ec:	9180004c 	andi	r6,r18,1
   4c4f0:	01000044 	movi	r4,1
   4c4f4:	000b883a 	mov	r5,zero
   4c4f8:	0027883a 	mov	r19,zero
   4c4fc:	003e6606 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c500:	354d883a 	add	r6,r6,r21
   4c504:	356d803a 	cmpltu	r22,r6,r21
   4c508:	b42d883a 	add	r22,r22,r16
   4c50c:	b12d883a 	add	r22,r22,r4
   4c510:	8c7fff84 	addi	r17,r17,-2
   4c514:	b0c7c83a 	sub	r3,r22,r3
   4c518:	003f1d06 	br	4c190 <__alt_data_end+0xfffe5cd0>
   4c51c:	ad4b883a 	add	r5,r21,r21
   4c520:	2d6b803a 	cmpltu	r21,r5,r21
   4c524:	ac2b883a 	add	r21,r21,r16
   4c528:	1d47883a 	add	r3,r3,r21
   4c52c:	993fff84 	addi	r4,r19,-2
   4c530:	282b883a 	mov	r21,r5
   4c534:	003fc806 	br	4c458 <__alt_data_end+0xfffe5f98>
   4c538:	103fc41e 	bne	r2,zero,4c44c <__alt_data_end+0xfffe5f8c>
   4c53c:	002b883a 	mov	r21,zero
   4c540:	a8bf5e1e 	bne	r21,r2,4c2bc <__alt_data_end+0xfffe5dfc>
   4c544:	003f5e06 	br	4c2c0 <__alt_data_end+0xfffe5e00>
   4c548:	00bef884 	movi	r2,-1054
   4c54c:	1505c83a 	sub	r2,r2,r20
   4c550:	00c00804 	movi	r3,32
   4c554:	8884d83a 	srl	r2,r17,r2
   4c558:	80c01c26 	beq	r16,r3,4c5cc <__divdf3+0x8ac>
   4c55c:	a0c10f84 	addi	r3,r20,1086
   4c560:	88c6983a 	sll	r3,r17,r3
   4c564:	1cc6b03a 	or	r3,r3,r19
   4c568:	1806c03a 	cmpne	r3,r3,zero
   4c56c:	1884b03a 	or	r2,r3,r2
   4c570:	140001cc 	andi	r16,r2,7
   4c574:	8000061e 	bne	r16,zero,4c590 <__divdf3+0x870>
   4c578:	000b883a 	mov	r5,zero
   4c57c:	1004d0fa 	srli	r2,r2,3
   4c580:	9180004c 	andi	r6,r18,1
   4c584:	0009883a 	mov	r4,zero
   4c588:	1426b03a 	or	r19,r2,r16
   4c58c:	003e4206 	br	4be98 <__alt_data_end+0xfffe59d8>
   4c590:	110003cc 	andi	r4,r2,15
   4c594:	00c00104 	movi	r3,4
   4c598:	0021883a 	mov	r16,zero
   4c59c:	20ffcd1e 	bne	r4,r3,4c4d4 <__alt_data_end+0xfffe6014>
   4c5a0:	800a927a 	slli	r5,r16,9
   4c5a4:	8020977a 	slli	r16,r16,29
   4c5a8:	280ad33a 	srli	r5,r5,12
   4c5ac:	003ff306 	br	4c57c <__alt_data_end+0xfffe60bc>
   4c5b0:	317fd336 	bltu	r6,r5,4c500 <__alt_data_end+0xfffe6040>
   4c5b4:	1023883a 	mov	r17,r2
   4c5b8:	003fa206 	br	4c444 <__alt_data_end+0xfffe5f84>
   4c5bc:	a8bfd736 	bltu	r21,r2,4c51c <__alt_data_end+0xfffe605c>
   4c5c0:	2027883a 	mov	r19,r4
   4c5c4:	a8bf3d1e 	bne	r21,r2,4c2bc <__alt_data_end+0xfffe5dfc>
   4c5c8:	003f3d06 	br	4c2c0 <__alt_data_end+0xfffe5e00>
   4c5cc:	0007883a 	mov	r3,zero
   4c5d0:	003fe406 	br	4c564 <__alt_data_end+0xfffe60a4>
   4c5d4:	00800434 	movhi	r2,16
   4c5d8:	89400234 	orhi	r5,r17,8
   4c5dc:	10bfffc4 	addi	r2,r2,-1
   4c5e0:	e00d883a 	mov	r6,fp
   4c5e4:	288a703a 	and	r5,r5,r2
   4c5e8:	003e8506 	br	4c000 <__alt_data_end+0xfffe5b40>

0004c5ec <__eqdf2>:
   4c5ec:	2804d53a 	srli	r2,r5,20
   4c5f0:	3806d53a 	srli	r3,r7,20
   4c5f4:	02000434 	movhi	r8,16
   4c5f8:	423fffc4 	addi	r8,r8,-1
   4c5fc:	1081ffcc 	andi	r2,r2,2047
   4c600:	0241ffc4 	movi	r9,2047
   4c604:	2a14703a 	and	r10,r5,r8
   4c608:	18c1ffcc 	andi	r3,r3,2047
   4c60c:	3a10703a 	and	r8,r7,r8
   4c610:	280ad7fa 	srli	r5,r5,31
   4c614:	380ed7fa 	srli	r7,r7,31
   4c618:	12400f26 	beq	r2,r9,4c658 <__eqdf2+0x6c>
   4c61c:	0241ffc4 	movi	r9,2047
   4c620:	1a400326 	beq	r3,r9,4c630 <__eqdf2+0x44>
   4c624:	10c00526 	beq	r2,r3,4c63c <__eqdf2+0x50>
   4c628:	00800044 	movi	r2,1
   4c62c:	f800283a 	ret
   4c630:	4192b03a 	or	r9,r8,r6
   4c634:	483ffc1e 	bne	r9,zero,4c628 <__alt_data_end+0xfffe6168>
   4c638:	10fffb1e 	bne	r2,r3,4c628 <__alt_data_end+0xfffe6168>
   4c63c:	523ffa1e 	bne	r10,r8,4c628 <__alt_data_end+0xfffe6168>
   4c640:	21bff91e 	bne	r4,r6,4c628 <__alt_data_end+0xfffe6168>
   4c644:	29c00826 	beq	r5,r7,4c668 <__eqdf2+0x7c>
   4c648:	103ff71e 	bne	r2,zero,4c628 <__alt_data_end+0xfffe6168>
   4c64c:	5104b03a 	or	r2,r10,r4
   4c650:	1004c03a 	cmpne	r2,r2,zero
   4c654:	f800283a 	ret
   4c658:	5112b03a 	or	r9,r10,r4
   4c65c:	483fef26 	beq	r9,zero,4c61c <__alt_data_end+0xfffe615c>
   4c660:	00800044 	movi	r2,1
   4c664:	f800283a 	ret
   4c668:	0005883a 	mov	r2,zero
   4c66c:	f800283a 	ret

0004c670 <__gedf2>:
   4c670:	2804d53a 	srli	r2,r5,20
   4c674:	3806d53a 	srli	r3,r7,20
   4c678:	02000434 	movhi	r8,16
   4c67c:	423fffc4 	addi	r8,r8,-1
   4c680:	0241ffc4 	movi	r9,2047
   4c684:	1081ffcc 	andi	r2,r2,2047
   4c688:	2a14703a 	and	r10,r5,r8
   4c68c:	1a46703a 	and	r3,r3,r9
   4c690:	3a10703a 	and	r8,r7,r8
   4c694:	280ad7fa 	srli	r5,r5,31
   4c698:	380ed7fa 	srli	r7,r7,31
   4c69c:	12400b26 	beq	r2,r9,4c6cc <__gedf2+0x5c>
   4c6a0:	1a401626 	beq	r3,r9,4c6fc <__gedf2+0x8c>
   4c6a4:	10000c1e 	bne	r2,zero,4c6d8 <__gedf2+0x68>
   4c6a8:	5112b03a 	or	r9,r10,r4
   4c6ac:	4813003a 	cmpeq	r9,r9,zero
   4c6b0:	4817883a 	mov	r11,r9
   4c6b4:	18000c1e 	bne	r3,zero,4c6e8 <__gedf2+0x78>
   4c6b8:	4198b03a 	or	r12,r8,r6
   4c6bc:	60000a1e 	bne	r12,zero,4c6e8 <__gedf2+0x78>
   4c6c0:	48001326 	beq	r9,zero,4c710 <__gedf2+0xa0>
   4c6c4:	0005883a 	mov	r2,zero
   4c6c8:	f800283a 	ret
   4c6cc:	5112b03a 	or	r9,r10,r4
   4c6d0:	4800191e 	bne	r9,zero,4c738 <__gedf2+0xc8>
   4c6d4:	18800926 	beq	r3,r2,4c6fc <__gedf2+0x8c>
   4c6d8:	18000b1e 	bne	r3,zero,4c708 <__gedf2+0x98>
   4c6dc:	4192b03a 	or	r9,r8,r6
   4c6e0:	0017883a 	mov	r11,zero
   4c6e4:	48000a26 	beq	r9,zero,4c710 <__gedf2+0xa0>
   4c6e8:	39c03fcc 	andi	r7,r7,255
   4c6ec:	58000726 	beq	r11,zero,4c70c <__gedf2+0x9c>
   4c6f0:	3800081e 	bne	r7,zero,4c714 <__gedf2+0xa4>
   4c6f4:	00bfffc4 	movi	r2,-1
   4c6f8:	f800283a 	ret
   4c6fc:	4192b03a 	or	r9,r8,r6
   4c700:	48000d1e 	bne	r9,zero,4c738 <__gedf2+0xc8>
   4c704:	103fe826 	beq	r2,zero,4c6a8 <__alt_data_end+0xfffe61e8>
   4c708:	39c03fcc 	andi	r7,r7,255
   4c70c:	29c00326 	beq	r5,r7,4c71c <__gedf2+0xac>
   4c710:	283ff81e 	bne	r5,zero,4c6f4 <__alt_data_end+0xfffe6234>
   4c714:	00800044 	movi	r2,1
   4c718:	f800283a 	ret
   4c71c:	18bffc16 	blt	r3,r2,4c710 <__alt_data_end+0xfffe6250>
   4c720:	10c00316 	blt	r2,r3,4c730 <__gedf2+0xc0>
   4c724:	42bffa36 	bltu	r8,r10,4c710 <__alt_data_end+0xfffe6250>
   4c728:	52000526 	beq	r10,r8,4c740 <__gedf2+0xd0>
   4c72c:	523fe52e 	bgeu	r10,r8,4c6c4 <__alt_data_end+0xfffe6204>
   4c730:	283ff026 	beq	r5,zero,4c6f4 <__alt_data_end+0xfffe6234>
   4c734:	003ff706 	br	4c714 <__alt_data_end+0xfffe6254>
   4c738:	00bfff84 	movi	r2,-2
   4c73c:	f800283a 	ret
   4c740:	313ff336 	bltu	r6,r4,4c710 <__alt_data_end+0xfffe6250>
   4c744:	21bfdf2e 	bgeu	r4,r6,4c6c4 <__alt_data_end+0xfffe6204>
   4c748:	283fea26 	beq	r5,zero,4c6f4 <__alt_data_end+0xfffe6234>
   4c74c:	003ff106 	br	4c714 <__alt_data_end+0xfffe6254>

0004c750 <__ledf2>:
   4c750:	2804d53a 	srli	r2,r5,20
   4c754:	3810d53a 	srli	r8,r7,20
   4c758:	00c00434 	movhi	r3,16
   4c75c:	18ffffc4 	addi	r3,r3,-1
   4c760:	0241ffc4 	movi	r9,2047
   4c764:	1081ffcc 	andi	r2,r2,2047
   4c768:	28d4703a 	and	r10,r5,r3
   4c76c:	4250703a 	and	r8,r8,r9
   4c770:	38c6703a 	and	r3,r7,r3
   4c774:	280ad7fa 	srli	r5,r5,31
   4c778:	380ed7fa 	srli	r7,r7,31
   4c77c:	12400b26 	beq	r2,r9,4c7ac <__ledf2+0x5c>
   4c780:	42401926 	beq	r8,r9,4c7e8 <__ledf2+0x98>
   4c784:	10000c1e 	bne	r2,zero,4c7b8 <__ledf2+0x68>
   4c788:	5112b03a 	or	r9,r10,r4
   4c78c:	4813003a 	cmpeq	r9,r9,zero
   4c790:	4817883a 	mov	r11,r9
   4c794:	40000f26 	beq	r8,zero,4c7d4 <__ledf2+0x84>
   4c798:	39c03fcc 	andi	r7,r7,255
   4c79c:	58001826 	beq	r11,zero,4c800 <__ledf2+0xb0>
   4c7a0:	38000a1e 	bne	r7,zero,4c7cc <__ledf2+0x7c>
   4c7a4:	00bfffc4 	movi	r2,-1
   4c7a8:	f800283a 	ret
   4c7ac:	5112b03a 	or	r9,r10,r4
   4c7b0:	48000f1e 	bne	r9,zero,4c7f0 <__ledf2+0xa0>
   4c7b4:	40800c26 	beq	r8,r2,4c7e8 <__ledf2+0x98>
   4c7b8:	4000101e 	bne	r8,zero,4c7fc <__ledf2+0xac>
   4c7bc:	1992b03a 	or	r9,r3,r6
   4c7c0:	0017883a 	mov	r11,zero
   4c7c4:	483ff41e 	bne	r9,zero,4c798 <__alt_data_end+0xfffe62d8>
   4c7c8:	283ff61e 	bne	r5,zero,4c7a4 <__alt_data_end+0xfffe62e4>
   4c7cc:	00800044 	movi	r2,1
   4c7d0:	f800283a 	ret
   4c7d4:	1998b03a 	or	r12,r3,r6
   4c7d8:	603fef1e 	bne	r12,zero,4c798 <__alt_data_end+0xfffe62d8>
   4c7dc:	483ffa26 	beq	r9,zero,4c7c8 <__alt_data_end+0xfffe6308>
   4c7e0:	0005883a 	mov	r2,zero
   4c7e4:	f800283a 	ret
   4c7e8:	1992b03a 	or	r9,r3,r6
   4c7ec:	48000226 	beq	r9,zero,4c7f8 <__ledf2+0xa8>
   4c7f0:	00800084 	movi	r2,2
   4c7f4:	f800283a 	ret
   4c7f8:	103fe326 	beq	r2,zero,4c788 <__alt_data_end+0xfffe62c8>
   4c7fc:	39c03fcc 	andi	r7,r7,255
   4c800:	29fff11e 	bne	r5,r7,4c7c8 <__alt_data_end+0xfffe6308>
   4c804:	40bff016 	blt	r8,r2,4c7c8 <__alt_data_end+0xfffe6308>
   4c808:	12000316 	blt	r2,r8,4c818 <__ledf2+0xc8>
   4c80c:	1abfee36 	bltu	r3,r10,4c7c8 <__alt_data_end+0xfffe6308>
   4c810:	50c00326 	beq	r10,r3,4c820 <__ledf2+0xd0>
   4c814:	50fff22e 	bgeu	r10,r3,4c7e0 <__alt_data_end+0xfffe6320>
   4c818:	283fe226 	beq	r5,zero,4c7a4 <__alt_data_end+0xfffe62e4>
   4c81c:	003feb06 	br	4c7cc <__alt_data_end+0xfffe630c>
   4c820:	313fe936 	bltu	r6,r4,4c7c8 <__alt_data_end+0xfffe6308>
   4c824:	21bfee2e 	bgeu	r4,r6,4c7e0 <__alt_data_end+0xfffe6320>
   4c828:	283fde26 	beq	r5,zero,4c7a4 <__alt_data_end+0xfffe62e4>
   4c82c:	003fe706 	br	4c7cc <__alt_data_end+0xfffe630c>

0004c830 <__muldf3>:
   4c830:	defff204 	addi	sp,sp,-56
   4c834:	2804d53a 	srli	r2,r5,20
   4c838:	dd800a15 	stw	r22,40(sp)
   4c83c:	282cd7fa 	srli	r22,r5,31
   4c840:	dc000415 	stw	r16,16(sp)
   4c844:	04000434 	movhi	r16,16
   4c848:	df000c15 	stw	fp,48(sp)
   4c84c:	dd000815 	stw	r20,32(sp)
   4c850:	dcc00715 	stw	r19,28(sp)
   4c854:	dc800615 	stw	r18,24(sp)
   4c858:	dc400515 	stw	r17,20(sp)
   4c85c:	843fffc4 	addi	r16,r16,-1
   4c860:	dfc00d15 	stw	ra,52(sp)
   4c864:	ddc00b15 	stw	r23,44(sp)
   4c868:	dd400915 	stw	r21,36(sp)
   4c86c:	1501ffcc 	andi	r20,r2,2047
   4c870:	2023883a 	mov	r17,r4
   4c874:	2025883a 	mov	r18,r4
   4c878:	2c20703a 	and	r16,r5,r16
   4c87c:	b027883a 	mov	r19,r22
   4c880:	b7003fcc 	andi	fp,r22,255
   4c884:	a0005926 	beq	r20,zero,4c9ec <__muldf3+0x1bc>
   4c888:	0081ffc4 	movi	r2,2047
   4c88c:	a0803426 	beq	r20,r2,4c960 <__muldf3+0x130>
   4c890:	84000434 	orhi	r16,r16,16
   4c894:	2004d77a 	srli	r2,r4,29
   4c898:	802090fa 	slli	r16,r16,3
   4c89c:	202490fa 	slli	r18,r4,3
   4c8a0:	a53f0044 	addi	r20,r20,-1023
   4c8a4:	80a0b03a 	or	r16,r16,r2
   4c8a8:	002b883a 	mov	r21,zero
   4c8ac:	0015883a 	mov	r10,zero
   4c8b0:	3812d53a 	srli	r9,r7,20
   4c8b4:	3806d7fa 	srli	r3,r7,31
   4c8b8:	02000434 	movhi	r8,16
   4c8bc:	423fffc4 	addi	r8,r8,-1
   4c8c0:	4941ffcc 	andi	r5,r9,2047
   4c8c4:	302f883a 	mov	r23,r6
   4c8c8:	3a22703a 	and	r17,r7,r8
   4c8cc:	1ac03fcc 	andi	r11,r3,255
   4c8d0:	28006226 	beq	r5,zero,4ca5c <__muldf3+0x22c>
   4c8d4:	0081ffc4 	movi	r2,2047
   4c8d8:	28805a26 	beq	r5,r2,4ca44 <__muldf3+0x214>
   4c8dc:	8a000434 	orhi	r8,r17,16
   4c8e0:	3004d77a 	srli	r2,r6,29
   4c8e4:	401090fa 	slli	r8,r8,3
   4c8e8:	302e90fa 	slli	r23,r6,3
   4c8ec:	297f0044 	addi	r5,r5,-1023
   4c8f0:	40a2b03a 	or	r17,r8,r2
   4c8f4:	0013883a 	mov	r9,zero
   4c8f8:	4d4cb03a 	or	r6,r9,r21
   4c8fc:	300c90ba 	slli	r6,r6,2
   4c900:	02000174 	movhi	r8,5
   4c904:	42324804 	addi	r8,r8,-14048
   4c908:	320d883a 	add	r6,r6,r8
   4c90c:	31800017 	ldw	r6,0(r6)
   4c910:	a14b883a 	add	r5,r20,r5
   4c914:	1dacf03a 	xor	r22,r3,r22
   4c918:	2b000044 	addi	r12,r5,1
   4c91c:	3000683a 	jmp	r6
   4c920:	0004cb5c 	xori	zero,zero,4909
   4c924:	0004cb48 	cmpgei	zero,zero,4909
   4c928:	0004cb48 	cmpgei	zero,zero,4909
   4c92c:	0004cb34 	movhi	zero,4908
   4c930:	0004c97c 	xorhi	zero,zero,4901
   4c934:	0004c97c 	xorhi	zero,zero,4901
   4c938:	0004cb1c 	xori	zero,zero,4908
   4c93c:	0004cb34 	movhi	zero,4908
   4c940:	0004c97c 	xorhi	zero,zero,4901
   4c944:	0004cb1c 	xori	zero,zero,4908
   4c948:	0004c97c 	xorhi	zero,zero,4901
   4c94c:	0004cb34 	movhi	zero,4908
   4c950:	0004c980 	call	4c98 <__reset-0x3b368>
   4c954:	0004c980 	call	4c98 <__reset-0x3b368>
   4c958:	0004c980 	call	4c98 <__reset-0x3b368>
   4c95c:	0004cd58 	cmpnei	zero,zero,4917
   4c960:	8104b03a 	or	r2,r16,r4
   4c964:	10006a1e 	bne	r2,zero,4cb10 <__muldf3+0x2e0>
   4c968:	05400204 	movi	r21,8
   4c96c:	0021883a 	mov	r16,zero
   4c970:	0025883a 	mov	r18,zero
   4c974:	02800084 	movi	r10,2
   4c978:	003fcd06 	br	4c8b0 <__alt_data_end+0xfffe63f0>
   4c97c:	b039883a 	mov	fp,r22
   4c980:	00800084 	movi	r2,2
   4c984:	50804e1e 	bne	r10,r2,4cac0 <__muldf3+0x290>
   4c988:	e4c0004c 	andi	r19,fp,1
   4c98c:	0101ffc4 	movi	r4,2047
   4c990:	0021883a 	mov	r16,zero
   4c994:	0025883a 	mov	r18,zero
   4c998:	2008953a 	slli	r4,r4,20
   4c99c:	98c03fcc 	andi	r3,r19,255
   4c9a0:	01400434 	movhi	r5,16
   4c9a4:	297fffc4 	addi	r5,r5,-1
   4c9a8:	180697fa 	slli	r3,r3,31
   4c9ac:	8160703a 	and	r16,r16,r5
   4c9b0:	8120b03a 	or	r16,r16,r4
   4c9b4:	80c6b03a 	or	r3,r16,r3
   4c9b8:	9005883a 	mov	r2,r18
   4c9bc:	dfc00d17 	ldw	ra,52(sp)
   4c9c0:	df000c17 	ldw	fp,48(sp)
   4c9c4:	ddc00b17 	ldw	r23,44(sp)
   4c9c8:	dd800a17 	ldw	r22,40(sp)
   4c9cc:	dd400917 	ldw	r21,36(sp)
   4c9d0:	dd000817 	ldw	r20,32(sp)
   4c9d4:	dcc00717 	ldw	r19,28(sp)
   4c9d8:	dc800617 	ldw	r18,24(sp)
   4c9dc:	dc400517 	ldw	r17,20(sp)
   4c9e0:	dc000417 	ldw	r16,16(sp)
   4c9e4:	dec00e04 	addi	sp,sp,56
   4c9e8:	f800283a 	ret
   4c9ec:	8104b03a 	or	r2,r16,r4
   4c9f0:	10004226 	beq	r2,zero,4cafc <__muldf3+0x2cc>
   4c9f4:	8000f926 	beq	r16,zero,4cddc <__muldf3+0x5ac>
   4c9f8:	8009883a 	mov	r4,r16
   4c9fc:	d9800315 	stw	r6,12(sp)
   4ca00:	d9c00015 	stw	r7,0(sp)
   4ca04:	004da200 	call	4da20 <__clzsi2>
   4ca08:	d9800317 	ldw	r6,12(sp)
   4ca0c:	d9c00017 	ldw	r7,0(sp)
   4ca10:	1007883a 	mov	r3,r2
   4ca14:	01000a04 	movi	r4,40
   4ca18:	18bffe04 	addi	r2,r3,-8
   4ca1c:	20c9c83a 	sub	r4,r4,r3
   4ca20:	80a0983a 	sll	r16,r16,r2
   4ca24:	8908d83a 	srl	r4,r17,r4
   4ca28:	88a4983a 	sll	r18,r17,r2
   4ca2c:	2420b03a 	or	r16,r4,r16
   4ca30:	017f0344 	movi	r5,-1011
   4ca34:	28e9c83a 	sub	r20,r5,r3
   4ca38:	002b883a 	mov	r21,zero
   4ca3c:	0015883a 	mov	r10,zero
   4ca40:	003f9b06 	br	4c8b0 <__alt_data_end+0xfffe63f0>
   4ca44:	8984b03a 	or	r2,r17,r6
   4ca48:	10002a1e 	bne	r2,zero,4caf4 <__muldf3+0x2c4>
   4ca4c:	0023883a 	mov	r17,zero
   4ca50:	002f883a 	mov	r23,zero
   4ca54:	02400084 	movi	r9,2
   4ca58:	003fa706 	br	4c8f8 <__alt_data_end+0xfffe6438>
   4ca5c:	8984b03a 	or	r2,r17,r6
   4ca60:	10002026 	beq	r2,zero,4cae4 <__muldf3+0x2b4>
   4ca64:	8800cc26 	beq	r17,zero,4cd98 <__muldf3+0x568>
   4ca68:	8809883a 	mov	r4,r17
   4ca6c:	d8c00215 	stw	r3,8(sp)
   4ca70:	d9800315 	stw	r6,12(sp)
   4ca74:	da800015 	stw	r10,0(sp)
   4ca78:	dac00115 	stw	r11,4(sp)
   4ca7c:	004da200 	call	4da20 <__clzsi2>
   4ca80:	d8c00217 	ldw	r3,8(sp)
   4ca84:	d9800317 	ldw	r6,12(sp)
   4ca88:	da800017 	ldw	r10,0(sp)
   4ca8c:	dac00117 	ldw	r11,4(sp)
   4ca90:	1009883a 	mov	r4,r2
   4ca94:	01400a04 	movi	r5,40
   4ca98:	25fffe04 	addi	r23,r4,-8
   4ca9c:	290bc83a 	sub	r5,r5,r4
   4caa0:	8dd0983a 	sll	r8,r17,r23
   4caa4:	314ad83a 	srl	r5,r6,r5
   4caa8:	35ee983a 	sll	r23,r6,r23
   4caac:	2a22b03a 	or	r17,r5,r8
   4cab0:	017f0344 	movi	r5,-1011
   4cab4:	290bc83a 	sub	r5,r5,r4
   4cab8:	0013883a 	mov	r9,zero
   4cabc:	003f8e06 	br	4c8f8 <__alt_data_end+0xfffe6438>
   4cac0:	008000c4 	movi	r2,3
   4cac4:	50811d26 	beq	r10,r2,4cf3c <__muldf3+0x70c>
   4cac8:	00800044 	movi	r2,1
   4cacc:	5080e01e 	bne	r10,r2,4ce50 <__muldf3+0x620>
   4cad0:	e0a6703a 	and	r19,fp,r2
   4cad4:	0009883a 	mov	r4,zero
   4cad8:	0021883a 	mov	r16,zero
   4cadc:	0025883a 	mov	r18,zero
   4cae0:	003fad06 	br	4c998 <__alt_data_end+0xfffe64d8>
   4cae4:	0023883a 	mov	r17,zero
   4cae8:	002f883a 	mov	r23,zero
   4caec:	02400044 	movi	r9,1
   4caf0:	003f8106 	br	4c8f8 <__alt_data_end+0xfffe6438>
   4caf4:	024000c4 	movi	r9,3
   4caf8:	003f7f06 	br	4c8f8 <__alt_data_end+0xfffe6438>
   4cafc:	05400104 	movi	r21,4
   4cb00:	0021883a 	mov	r16,zero
   4cb04:	0025883a 	mov	r18,zero
   4cb08:	02800044 	movi	r10,1
   4cb0c:	003f6806 	br	4c8b0 <__alt_data_end+0xfffe63f0>
   4cb10:	05400304 	movi	r21,12
   4cb14:	028000c4 	movi	r10,3
   4cb18:	003f6506 	br	4c8b0 <__alt_data_end+0xfffe63f0>
   4cb1c:	04000434 	movhi	r16,16
   4cb20:	0027883a 	mov	r19,zero
   4cb24:	843fffc4 	addi	r16,r16,-1
   4cb28:	04bfffc4 	movi	r18,-1
   4cb2c:	0101ffc4 	movi	r4,2047
   4cb30:	003f9906 	br	4c998 <__alt_data_end+0xfffe64d8>
   4cb34:	8821883a 	mov	r16,r17
   4cb38:	b825883a 	mov	r18,r23
   4cb3c:	5839883a 	mov	fp,r11
   4cb40:	4815883a 	mov	r10,r9
   4cb44:	003f8e06 	br	4c980 <__alt_data_end+0xfffe64c0>
   4cb48:	8821883a 	mov	r16,r17
   4cb4c:	b825883a 	mov	r18,r23
   4cb50:	b039883a 	mov	fp,r22
   4cb54:	4815883a 	mov	r10,r9
   4cb58:	003f8906 	br	4c980 <__alt_data_end+0xfffe64c0>
   4cb5c:	b80cd43a 	srli	r6,r23,16
   4cb60:	9006d43a 	srli	r3,r18,16
   4cb64:	90bfffcc 	andi	r2,r18,65535
   4cb68:	bdffffcc 	andi	r23,r23,65535
   4cb6c:	b891383a 	mul	r8,r23,r2
   4cb70:	b8c9383a 	mul	r4,r23,r3
   4cb74:	309b383a 	mul	r13,r6,r2
   4cb78:	400ed43a 	srli	r7,r8,16
   4cb7c:	30df383a 	mul	r15,r6,r3
   4cb80:	235b883a 	add	r13,r4,r13
   4cb84:	69db883a 	add	r13,r13,r7
   4cb88:	6900022e 	bgeu	r13,r4,4cb94 <__muldf3+0x364>
   4cb8c:	01000074 	movhi	r4,1
   4cb90:	791f883a 	add	r15,r15,r4
   4cb94:	8828d43a 	srli	r20,r17,16
   4cb98:	8c7fffcc 	andi	r17,r17,65535
   4cb9c:	888f383a 	mul	r7,r17,r2
   4cba0:	88d3383a 	mul	r9,r17,r3
   4cba4:	a0a5383a 	mul	r18,r20,r2
   4cba8:	3816d43a 	srli	r11,r7,16
   4cbac:	6814943a 	slli	r10,r13,16
   4cbb0:	4ca5883a 	add	r18,r9,r18
   4cbb4:	423fffcc 	andi	r8,r8,65535
   4cbb8:	92e5883a 	add	r18,r18,r11
   4cbbc:	6808d43a 	srli	r4,r13,16
   4cbc0:	5215883a 	add	r10,r10,r8
   4cbc4:	a0c7383a 	mul	r3,r20,r3
   4cbc8:	9240022e 	bgeu	r18,r9,4cbd4 <__muldf3+0x3a4>
   4cbcc:	00800074 	movhi	r2,1
   4cbd0:	1887883a 	add	r3,r3,r2
   4cbd4:	802ad43a 	srli	r21,r16,16
   4cbd8:	80bfffcc 	andi	r2,r16,65535
   4cbdc:	b893383a 	mul	r9,r23,r2
   4cbe0:	3091383a 	mul	r8,r6,r2
   4cbe4:	bd6f383a 	mul	r23,r23,r21
   4cbe8:	9026943a 	slli	r19,r18,16
   4cbec:	481ad43a 	srli	r13,r9,16
   4cbf0:	9024d43a 	srli	r18,r18,16
   4cbf4:	39ffffcc 	andi	r7,r7,65535
   4cbf8:	ba11883a 	add	r8,r23,r8
   4cbfc:	99e7883a 	add	r19,r19,r7
   4cc00:	4351883a 	add	r8,r8,r13
   4cc04:	1c97883a 	add	r11,r3,r18
   4cc08:	354d383a 	mul	r6,r6,r21
   4cc0c:	9925883a 	add	r18,r19,r4
   4cc10:	45c0022e 	bgeu	r8,r23,4cc1c <__muldf3+0x3ec>
   4cc14:	00c00074 	movhi	r3,1
   4cc18:	30cd883a 	add	r6,r6,r3
   4cc1c:	8889383a 	mul	r4,r17,r2
   4cc20:	8d63383a 	mul	r17,r17,r21
   4cc24:	a085383a 	mul	r2,r20,r2
   4cc28:	200ed43a 	srli	r7,r4,16
   4cc2c:	401cd43a 	srli	r14,r8,16
   4cc30:	401a943a 	slli	r13,r8,16
   4cc34:	8885883a 	add	r2,r17,r2
   4cc38:	4a3fffcc 	andi	r8,r9,65535
   4cc3c:	11c5883a 	add	r2,r2,r7
   4cc40:	339d883a 	add	r14,r6,r14
   4cc44:	6a11883a 	add	r8,r13,r8
   4cc48:	a561383a 	mul	r16,r20,r21
   4cc4c:	1440022e 	bgeu	r2,r17,4cc58 <__muldf3+0x428>
   4cc50:	00c00074 	movhi	r3,1
   4cc54:	80e1883a 	add	r16,r16,r3
   4cc58:	1006943a 	slli	r3,r2,16
   4cc5c:	213fffcc 	andi	r4,r4,65535
   4cc60:	93db883a 	add	r13,r18,r15
   4cc64:	1909883a 	add	r4,r3,r4
   4cc68:	22c7883a 	add	r3,r4,r11
   4cc6c:	6cd3803a 	cmpltu	r9,r13,r19
   4cc70:	6a09883a 	add	r4,r13,r8
   4cc74:	1a5b883a 	add	r13,r3,r9
   4cc78:	2211803a 	cmpltu	r8,r4,r8
   4cc7c:	734d883a 	add	r6,r14,r13
   4cc80:	100ed43a 	srli	r7,r2,16
   4cc84:	6a53803a 	cmpltu	r9,r13,r9
   4cc88:	3205883a 	add	r2,r6,r8
   4cc8c:	1ac7803a 	cmpltu	r3,r3,r11
   4cc90:	1211803a 	cmpltu	r8,r2,r8
   4cc94:	48c6b03a 	or	r3,r9,r3
   4cc98:	338d803a 	cmpltu	r6,r6,r14
   4cc9c:	19c7883a 	add	r3,r3,r7
   4cca0:	418cb03a 	or	r6,r8,r6
   4cca4:	1987883a 	add	r3,r3,r6
   4cca8:	2024927a 	slli	r18,r4,9
   4ccac:	1c07883a 	add	r3,r3,r16
   4ccb0:	1806927a 	slli	r3,r3,9
   4ccb4:	1020d5fa 	srli	r16,r2,23
   4ccb8:	2008d5fa 	srli	r4,r4,23
   4ccbc:	9294b03a 	or	r10,r18,r10
   4ccc0:	1004927a 	slli	r2,r2,9
   4ccc4:	5024c03a 	cmpne	r18,r10,zero
   4ccc8:	1c20b03a 	or	r16,r3,r16
   4cccc:	9108b03a 	or	r4,r18,r4
   4ccd0:	80c0402c 	andhi	r3,r16,256
   4ccd4:	20a4b03a 	or	r18,r4,r2
   4ccd8:	18000726 	beq	r3,zero,4ccf8 <__muldf3+0x4c8>
   4ccdc:	9006d07a 	srli	r3,r18,1
   4cce0:	800897fa 	slli	r4,r16,31
   4cce4:	9080004c 	andi	r2,r18,1
   4cce8:	8020d07a 	srli	r16,r16,1
   4ccec:	10c4b03a 	or	r2,r2,r3
   4ccf0:	1124b03a 	or	r18,r2,r4
   4ccf4:	600b883a 	mov	r5,r12
   4ccf8:	2900ffc4 	addi	r4,r5,1023
   4ccfc:	01004b0e 	bge	zero,r4,4ce2c <__muldf3+0x5fc>
   4cd00:	908001cc 	andi	r2,r18,7
   4cd04:	10000726 	beq	r2,zero,4cd24 <__muldf3+0x4f4>
   4cd08:	90c003cc 	andi	r3,r18,15
   4cd0c:	00800104 	movi	r2,4
   4cd10:	18800426 	beq	r3,r2,4cd24 <__muldf3+0x4f4>
   4cd14:	9087883a 	add	r3,r18,r2
   4cd18:	1c85803a 	cmpltu	r2,r3,r18
   4cd1c:	80a1883a 	add	r16,r16,r2
   4cd20:	1825883a 	mov	r18,r3
   4cd24:	8080402c 	andhi	r2,r16,256
   4cd28:	10000426 	beq	r2,zero,4cd3c <__muldf3+0x50c>
   4cd2c:	00bfc034 	movhi	r2,65280
   4cd30:	10bfffc4 	addi	r2,r2,-1
   4cd34:	29010004 	addi	r4,r5,1024
   4cd38:	80a0703a 	and	r16,r16,r2
   4cd3c:	0081ff84 	movi	r2,2046
   4cd40:	1100320e 	bge	r2,r4,4ce0c <__muldf3+0x5dc>
   4cd44:	b4c0004c 	andi	r19,r22,1
   4cd48:	0101ffc4 	movi	r4,2047
   4cd4c:	0021883a 	mov	r16,zero
   4cd50:	0025883a 	mov	r18,zero
   4cd54:	003f1006 	br	4c998 <__alt_data_end+0xfffe64d8>
   4cd58:	8080022c 	andhi	r2,r16,8
   4cd5c:	10000926 	beq	r2,zero,4cd84 <__muldf3+0x554>
   4cd60:	8880022c 	andhi	r2,r17,8
   4cd64:	1000071e 	bne	r2,zero,4cd84 <__muldf3+0x554>
   4cd68:	00800434 	movhi	r2,16
   4cd6c:	8c000234 	orhi	r16,r17,8
   4cd70:	10bfffc4 	addi	r2,r2,-1
   4cd74:	1827883a 	mov	r19,r3
   4cd78:	80a0703a 	and	r16,r16,r2
   4cd7c:	b825883a 	mov	r18,r23
   4cd80:	003f6a06 	br	4cb2c <__alt_data_end+0xfffe666c>
   4cd84:	00800434 	movhi	r2,16
   4cd88:	84000234 	orhi	r16,r16,8
   4cd8c:	10bfffc4 	addi	r2,r2,-1
   4cd90:	80a0703a 	and	r16,r16,r2
   4cd94:	003f6506 	br	4cb2c <__alt_data_end+0xfffe666c>
   4cd98:	3009883a 	mov	r4,r6
   4cd9c:	d8c00215 	stw	r3,8(sp)
   4cda0:	d9800315 	stw	r6,12(sp)
   4cda4:	da800015 	stw	r10,0(sp)
   4cda8:	dac00115 	stw	r11,4(sp)
   4cdac:	004da200 	call	4da20 <__clzsi2>
   4cdb0:	11000804 	addi	r4,r2,32
   4cdb4:	014009c4 	movi	r5,39
   4cdb8:	d8c00217 	ldw	r3,8(sp)
   4cdbc:	d9800317 	ldw	r6,12(sp)
   4cdc0:	da800017 	ldw	r10,0(sp)
   4cdc4:	dac00117 	ldw	r11,4(sp)
   4cdc8:	293f320e 	bge	r5,r4,4ca94 <__alt_data_end+0xfffe65d4>
   4cdcc:	10bffe04 	addi	r2,r2,-8
   4cdd0:	b8a2983a 	sll	r17,r23,r2
   4cdd4:	002f883a 	mov	r23,zero
   4cdd8:	003f3506 	br	4cab0 <__alt_data_end+0xfffe65f0>
   4cddc:	d9800315 	stw	r6,12(sp)
   4cde0:	d9c00015 	stw	r7,0(sp)
   4cde4:	004da200 	call	4da20 <__clzsi2>
   4cde8:	10c00804 	addi	r3,r2,32
   4cdec:	010009c4 	movi	r4,39
   4cdf0:	d9800317 	ldw	r6,12(sp)
   4cdf4:	d9c00017 	ldw	r7,0(sp)
   4cdf8:	20ff060e 	bge	r4,r3,4ca14 <__alt_data_end+0xfffe6554>
   4cdfc:	10bffe04 	addi	r2,r2,-8
   4ce00:	88a0983a 	sll	r16,r17,r2
   4ce04:	0025883a 	mov	r18,zero
   4ce08:	003f0906 	br	4ca30 <__alt_data_end+0xfffe6570>
   4ce0c:	9004d0fa 	srli	r2,r18,3
   4ce10:	8024977a 	slli	r18,r16,29
   4ce14:	8020927a 	slli	r16,r16,9
   4ce18:	2101ffcc 	andi	r4,r4,2047
   4ce1c:	90a4b03a 	or	r18,r18,r2
   4ce20:	8020d33a 	srli	r16,r16,12
   4ce24:	b4c0004c 	andi	r19,r22,1
   4ce28:	003edb06 	br	4c998 <__alt_data_end+0xfffe64d8>
   4ce2c:	00ff0084 	movi	r3,-1022
   4ce30:	1947c83a 	sub	r3,r3,r5
   4ce34:	00800e04 	movi	r2,56
   4ce38:	10c0080e 	bge	r2,r3,4ce5c <__muldf3+0x62c>
   4ce3c:	b4c0004c 	andi	r19,r22,1
   4ce40:	0009883a 	mov	r4,zero
   4ce44:	0021883a 	mov	r16,zero
   4ce48:	0025883a 	mov	r18,zero
   4ce4c:	003ed206 	br	4c998 <__alt_data_end+0xfffe64d8>
   4ce50:	600b883a 	mov	r5,r12
   4ce54:	e02d883a 	mov	r22,fp
   4ce58:	003fa706 	br	4ccf8 <__alt_data_end+0xfffe6838>
   4ce5c:	008007c4 	movi	r2,31
   4ce60:	10c01816 	blt	r2,r3,4cec4 <__muldf3+0x694>
   4ce64:	29410784 	addi	r5,r5,1054
   4ce68:	8144983a 	sll	r2,r16,r5
   4ce6c:	90c8d83a 	srl	r4,r18,r3
   4ce70:	914a983a 	sll	r5,r18,r5
   4ce74:	80c6d83a 	srl	r3,r16,r3
   4ce78:	2088b03a 	or	r4,r4,r2
   4ce7c:	2804c03a 	cmpne	r2,r5,zero
   4ce80:	2084b03a 	or	r2,r4,r2
   4ce84:	110001cc 	andi	r4,r2,7
   4ce88:	20000726 	beq	r4,zero,4cea8 <__muldf3+0x678>
   4ce8c:	114003cc 	andi	r5,r2,15
   4ce90:	01000104 	movi	r4,4
   4ce94:	29000426 	beq	r5,r4,4cea8 <__muldf3+0x678>
   4ce98:	11000104 	addi	r4,r2,4
   4ce9c:	2085803a 	cmpltu	r2,r4,r2
   4cea0:	1887883a 	add	r3,r3,r2
   4cea4:	2005883a 	mov	r2,r4
   4cea8:	1900202c 	andhi	r4,r3,128
   4ceac:	20001826 	beq	r4,zero,4cf10 <__muldf3+0x6e0>
   4ceb0:	b4c0004c 	andi	r19,r22,1
   4ceb4:	01000044 	movi	r4,1
   4ceb8:	0021883a 	mov	r16,zero
   4cebc:	0025883a 	mov	r18,zero
   4cec0:	003eb506 	br	4c998 <__alt_data_end+0xfffe64d8>
   4cec4:	00bef884 	movi	r2,-1054
   4cec8:	1145c83a 	sub	r2,r2,r5
   4cecc:	8088d83a 	srl	r4,r16,r2
   4ced0:	00800804 	movi	r2,32
   4ced4:	18801726 	beq	r3,r2,4cf34 <__muldf3+0x704>
   4ced8:	28810f84 	addi	r2,r5,1086
   4cedc:	8084983a 	sll	r2,r16,r2
   4cee0:	1484b03a 	or	r2,r2,r18
   4cee4:	1004c03a 	cmpne	r2,r2,zero
   4cee8:	1104b03a 	or	r2,r2,r4
   4ceec:	10c001cc 	andi	r3,r2,7
   4cef0:	18000b1e 	bne	r3,zero,4cf20 <__muldf3+0x6f0>
   4cef4:	0021883a 	mov	r16,zero
   4cef8:	1004d0fa 	srli	r2,r2,3
   4cefc:	b4c0004c 	andi	r19,r22,1
   4cf00:	0009883a 	mov	r4,zero
   4cf04:	10e4b03a 	or	r18,r2,r3
   4cf08:	003ea306 	br	4c998 <__alt_data_end+0xfffe64d8>
   4cf0c:	0007883a 	mov	r3,zero
   4cf10:	1820927a 	slli	r16,r3,9
   4cf14:	1806977a 	slli	r3,r3,29
   4cf18:	8020d33a 	srli	r16,r16,12
   4cf1c:	003ff606 	br	4cef8 <__alt_data_end+0xfffe6a38>
   4cf20:	110003cc 	andi	r4,r2,15
   4cf24:	00c00104 	movi	r3,4
   4cf28:	20fff826 	beq	r4,r3,4cf0c <__alt_data_end+0xfffe6a4c>
   4cf2c:	0007883a 	mov	r3,zero
   4cf30:	003fd906 	br	4ce98 <__alt_data_end+0xfffe69d8>
   4cf34:	0005883a 	mov	r2,zero
   4cf38:	003fe906 	br	4cee0 <__alt_data_end+0xfffe6a20>
   4cf3c:	00800434 	movhi	r2,16
   4cf40:	84000234 	orhi	r16,r16,8
   4cf44:	10bfffc4 	addi	r2,r2,-1
   4cf48:	e4c0004c 	andi	r19,fp,1
   4cf4c:	80a0703a 	and	r16,r16,r2
   4cf50:	003ef606 	br	4cb2c <__alt_data_end+0xfffe666c>

0004cf54 <__subdf3>:
   4cf54:	00c00434 	movhi	r3,16
   4cf58:	18ffffc4 	addi	r3,r3,-1
   4cf5c:	defffb04 	addi	sp,sp,-20
   4cf60:	28d2703a 	and	r9,r5,r3
   4cf64:	3814d53a 	srli	r10,r7,20
   4cf68:	38c6703a 	and	r3,r7,r3
   4cf6c:	3004d77a 	srli	r2,r6,29
   4cf70:	dc800215 	stw	r18,8(sp)
   4cf74:	dc000015 	stw	r16,0(sp)
   4cf78:	2824d7fa 	srli	r18,r5,31
   4cf7c:	2820d53a 	srli	r16,r5,20
   4cf80:	481290fa 	slli	r9,r9,3
   4cf84:	200ad77a 	srli	r5,r4,29
   4cf88:	180690fa 	slli	r3,r3,3
   4cf8c:	dc400115 	stw	r17,4(sp)
   4cf90:	dfc00415 	stw	ra,16(sp)
   4cf94:	202290fa 	slli	r17,r4,3
   4cf98:	dcc00315 	stw	r19,12(sp)
   4cf9c:	5281ffcc 	andi	r10,r10,2047
   4cfa0:	0101ffc4 	movi	r4,2047
   4cfa4:	9011883a 	mov	r8,r18
   4cfa8:	8401ffcc 	andi	r16,r16,2047
   4cfac:	94803fcc 	andi	r18,r18,255
   4cfb0:	494ab03a 	or	r5,r9,r5
   4cfb4:	380ed7fa 	srli	r7,r7,31
   4cfb8:	1886b03a 	or	r3,r3,r2
   4cfbc:	300c90fa 	slli	r6,r6,3
   4cfc0:	51009026 	beq	r10,r4,4d204 <__subdf3+0x2b0>
   4cfc4:	39c0005c 	xori	r7,r7,1
   4cfc8:	8285c83a 	sub	r2,r16,r10
   4cfcc:	91c06f26 	beq	r18,r7,4d18c <__subdf3+0x238>
   4cfd0:	0080b10e 	bge	zero,r2,4d298 <__subdf3+0x344>
   4cfd4:	50002a1e 	bne	r10,zero,4d080 <__subdf3+0x12c>
   4cfd8:	1988b03a 	or	r4,r3,r6
   4cfdc:	2000941e 	bne	r4,zero,4d230 <__subdf3+0x2dc>
   4cfe0:	888001cc 	andi	r2,r17,7
   4cfe4:	10005b26 	beq	r2,zero,4d154 <__subdf3+0x200>
   4cfe8:	88c003cc 	andi	r3,r17,15
   4cfec:	00800104 	movi	r2,4
   4cff0:	18805826 	beq	r3,r2,4d154 <__subdf3+0x200>
   4cff4:	88c00104 	addi	r3,r17,4
   4cff8:	1c63803a 	cmpltu	r17,r3,r17
   4cffc:	2c4b883a 	add	r5,r5,r17
   4d000:	2880202c 	andhi	r2,r5,128
   4d004:	9200004c 	andi	r8,r18,1
   4d008:	1823883a 	mov	r17,r3
   4d00c:	10005426 	beq	r2,zero,4d160 <__subdf3+0x20c>
   4d010:	84000044 	addi	r16,r16,1
   4d014:	0081ffc4 	movi	r2,2047
   4d018:	8080bf26 	beq	r16,r2,4d318 <__subdf3+0x3c4>
   4d01c:	013fe034 	movhi	r4,65408
   4d020:	213fffc4 	addi	r4,r4,-1
   4d024:	290a703a 	and	r5,r5,r4
   4d028:	2804977a 	slli	r2,r5,29
   4d02c:	280a927a 	slli	r5,r5,9
   4d030:	8822d0fa 	srli	r17,r17,3
   4d034:	8401ffcc 	andi	r16,r16,2047
   4d038:	2808d33a 	srli	r4,r5,12
   4d03c:	1444b03a 	or	r2,r2,r17
   4d040:	8401ffcc 	andi	r16,r16,2047
   4d044:	800a953a 	slli	r5,r16,20
   4d048:	40c03fcc 	andi	r3,r8,255
   4d04c:	04000434 	movhi	r16,16
   4d050:	180697fa 	slli	r3,r3,31
   4d054:	843fffc4 	addi	r16,r16,-1
   4d058:	2420703a 	and	r16,r4,r16
   4d05c:	8160b03a 	or	r16,r16,r5
   4d060:	80c6b03a 	or	r3,r16,r3
   4d064:	dfc00417 	ldw	ra,16(sp)
   4d068:	dcc00317 	ldw	r19,12(sp)
   4d06c:	dc800217 	ldw	r18,8(sp)
   4d070:	dc400117 	ldw	r17,4(sp)
   4d074:	dc000017 	ldw	r16,0(sp)
   4d078:	dec00504 	addi	sp,sp,20
   4d07c:	f800283a 	ret
   4d080:	0101ffc4 	movi	r4,2047
   4d084:	813fd626 	beq	r16,r4,4cfe0 <__alt_data_end+0xfffe6b20>
   4d088:	18c02034 	orhi	r3,r3,128
   4d08c:	01000e04 	movi	r4,56
   4d090:	2080a416 	blt	r4,r2,4d324 <__subdf3+0x3d0>
   4d094:	010007c4 	movi	r4,31
   4d098:	2080c716 	blt	r4,r2,4d3b8 <__subdf3+0x464>
   4d09c:	01000804 	movi	r4,32
   4d0a0:	2089c83a 	sub	r4,r4,r2
   4d0a4:	1910983a 	sll	r8,r3,r4
   4d0a8:	308ed83a 	srl	r7,r6,r2
   4d0ac:	3108983a 	sll	r4,r6,r4
   4d0b0:	1884d83a 	srl	r2,r3,r2
   4d0b4:	41ccb03a 	or	r6,r8,r7
   4d0b8:	2008c03a 	cmpne	r4,r4,zero
   4d0bc:	310cb03a 	or	r6,r6,r4
   4d0c0:	898dc83a 	sub	r6,r17,r6
   4d0c4:	89a3803a 	cmpltu	r17,r17,r6
   4d0c8:	288bc83a 	sub	r5,r5,r2
   4d0cc:	2c4bc83a 	sub	r5,r5,r17
   4d0d0:	3023883a 	mov	r17,r6
   4d0d4:	2880202c 	andhi	r2,r5,128
   4d0d8:	10006b26 	beq	r2,zero,4d288 <__subdf3+0x334>
   4d0dc:	04c02034 	movhi	r19,128
   4d0e0:	9cffffc4 	addi	r19,r19,-1
   4d0e4:	2ce6703a 	and	r19,r5,r19
   4d0e8:	98007c26 	beq	r19,zero,4d2dc <__subdf3+0x388>
   4d0ec:	9809883a 	mov	r4,r19
   4d0f0:	004da200 	call	4da20 <__clzsi2>
   4d0f4:	10fffe04 	addi	r3,r2,-8
   4d0f8:	010007c4 	movi	r4,31
   4d0fc:	20c07d16 	blt	r4,r3,4d2f4 <__subdf3+0x3a0>
   4d100:	01400a04 	movi	r5,40
   4d104:	2885c83a 	sub	r2,r5,r2
   4d108:	888ad83a 	srl	r5,r17,r2
   4d10c:	98e6983a 	sll	r19,r19,r3
   4d110:	88e2983a 	sll	r17,r17,r3
   4d114:	2ce6b03a 	or	r19,r5,r19
   4d118:	1c007a16 	blt	r3,r16,4d304 <__subdf3+0x3b0>
   4d11c:	1c21c83a 	sub	r16,r3,r16
   4d120:	81400044 	addi	r5,r16,1
   4d124:	00c007c4 	movi	r3,31
   4d128:	19409616 	blt	r3,r5,4d384 <__subdf3+0x430>
   4d12c:	1c21c83a 	sub	r16,r3,r16
   4d130:	8c08983a 	sll	r4,r17,r16
   4d134:	8946d83a 	srl	r3,r17,r5
   4d138:	9c20983a 	sll	r16,r19,r16
   4d13c:	2008c03a 	cmpne	r4,r4,zero
   4d140:	994ad83a 	srl	r5,r19,r5
   4d144:	1c06b03a 	or	r3,r3,r16
   4d148:	1922b03a 	or	r17,r3,r4
   4d14c:	0021883a 	mov	r16,zero
   4d150:	003fa306 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d154:	2880202c 	andhi	r2,r5,128
   4d158:	9200004c 	andi	r8,r18,1
   4d15c:	103fac1e 	bne	r2,zero,4d010 <__alt_data_end+0xfffe6b50>
   4d160:	2804977a 	slli	r2,r5,29
   4d164:	8822d0fa 	srli	r17,r17,3
   4d168:	00c1ffc4 	movi	r3,2047
   4d16c:	280ad0fa 	srli	r5,r5,3
   4d170:	1444b03a 	or	r2,r2,r17
   4d174:	80c02726 	beq	r16,r3,4d214 <__subdf3+0x2c0>
   4d178:	01000434 	movhi	r4,16
   4d17c:	213fffc4 	addi	r4,r4,-1
   4d180:	80e0703a 	and	r16,r16,r3
   4d184:	2908703a 	and	r4,r5,r4
   4d188:	003fad06 	br	4d040 <__alt_data_end+0xfffe6b80>
   4d18c:	0080690e 	bge	zero,r2,4d334 <__subdf3+0x3e0>
   4d190:	50002f26 	beq	r10,zero,4d250 <__subdf3+0x2fc>
   4d194:	0101ffc4 	movi	r4,2047
   4d198:	813f9126 	beq	r16,r4,4cfe0 <__alt_data_end+0xfffe6b20>
   4d19c:	18c02034 	orhi	r3,r3,128
   4d1a0:	01000e04 	movi	r4,56
   4d1a4:	2080b00e 	bge	r4,r2,4d468 <__subdf3+0x514>
   4d1a8:	198cb03a 	or	r6,r3,r6
   4d1ac:	300ec03a 	cmpne	r7,r6,zero
   4d1b0:	0005883a 	mov	r2,zero
   4d1b4:	3c4f883a 	add	r7,r7,r17
   4d1b8:	3c63803a 	cmpltu	r17,r7,r17
   4d1bc:	114b883a 	add	r5,r2,r5
   4d1c0:	2c4b883a 	add	r5,r5,r17
   4d1c4:	3823883a 	mov	r17,r7
   4d1c8:	2880202c 	andhi	r2,r5,128
   4d1cc:	10002e26 	beq	r2,zero,4d288 <__subdf3+0x334>
   4d1d0:	84000044 	addi	r16,r16,1
   4d1d4:	0081ffc4 	movi	r2,2047
   4d1d8:	8080de26 	beq	r16,r2,4d554 <__subdf3+0x600>
   4d1dc:	00bfe034 	movhi	r2,65408
   4d1e0:	10bfffc4 	addi	r2,r2,-1
   4d1e4:	288a703a 	and	r5,r5,r2
   4d1e8:	880cd07a 	srli	r6,r17,1
   4d1ec:	280897fa 	slli	r4,r5,31
   4d1f0:	88c0004c 	andi	r3,r17,1
   4d1f4:	30e2b03a 	or	r17,r6,r3
   4d1f8:	280ad07a 	srli	r5,r5,1
   4d1fc:	8922b03a 	or	r17,r17,r4
   4d200:	003f7706 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d204:	1984b03a 	or	r2,r3,r6
   4d208:	103f6e26 	beq	r2,zero,4cfc4 <__alt_data_end+0xfffe6b04>
   4d20c:	39c03fcc 	andi	r7,r7,255
   4d210:	003f6d06 	br	4cfc8 <__alt_data_end+0xfffe6b08>
   4d214:	1146b03a 	or	r3,r2,r5
   4d218:	18003f26 	beq	r3,zero,4d318 <__subdf3+0x3c4>
   4d21c:	00c00434 	movhi	r3,16
   4d220:	29000234 	orhi	r4,r5,8
   4d224:	18ffffc4 	addi	r3,r3,-1
   4d228:	20c8703a 	and	r4,r4,r3
   4d22c:	003f8406 	br	4d040 <__alt_data_end+0xfffe6b80>
   4d230:	10bfffc4 	addi	r2,r2,-1
   4d234:	1000501e 	bne	r2,zero,4d378 <__subdf3+0x424>
   4d238:	898fc83a 	sub	r7,r17,r6
   4d23c:	89e3803a 	cmpltu	r17,r17,r7
   4d240:	28cbc83a 	sub	r5,r5,r3
   4d244:	2c4bc83a 	sub	r5,r5,r17
   4d248:	3823883a 	mov	r17,r7
   4d24c:	003fa106 	br	4d0d4 <__alt_data_end+0xfffe6c14>
   4d250:	1988b03a 	or	r4,r3,r6
   4d254:	203f6226 	beq	r4,zero,4cfe0 <__alt_data_end+0xfffe6b20>
   4d258:	10bfffc4 	addi	r2,r2,-1
   4d25c:	10009b1e 	bne	r2,zero,4d4cc <__subdf3+0x578>
   4d260:	344d883a 	add	r6,r6,r17
   4d264:	3463803a 	cmpltu	r17,r6,r17
   4d268:	194b883a 	add	r5,r3,r5
   4d26c:	2c4b883a 	add	r5,r5,r17
   4d270:	3023883a 	mov	r17,r6
   4d274:	003fd406 	br	4d1c8 <__alt_data_end+0xfffe6d08>
   4d278:	1106b03a 	or	r3,r2,r4
   4d27c:	1800b426 	beq	r3,zero,4d550 <__subdf3+0x5fc>
   4d280:	100b883a 	mov	r5,r2
   4d284:	2023883a 	mov	r17,r4
   4d288:	888001cc 	andi	r2,r17,7
   4d28c:	103f561e 	bne	r2,zero,4cfe8 <__alt_data_end+0xfffe6b28>
   4d290:	9200004c 	andi	r8,r18,1
   4d294:	003fb206 	br	4d160 <__alt_data_end+0xfffe6ca0>
   4d298:	1000531e 	bne	r2,zero,4d3e8 <__subdf3+0x494>
   4d29c:	80800044 	addi	r2,r16,1
   4d2a0:	1081ffcc 	andi	r2,r2,2047
   4d2a4:	01000044 	movi	r4,1
   4d2a8:	2080a00e 	bge	r4,r2,4d52c <__subdf3+0x5d8>
   4d2ac:	8985c83a 	sub	r2,r17,r6
   4d2b0:	8889803a 	cmpltu	r4,r17,r2
   4d2b4:	28e7c83a 	sub	r19,r5,r3
   4d2b8:	9927c83a 	sub	r19,r19,r4
   4d2bc:	9900202c 	andhi	r4,r19,128
   4d2c0:	20006226 	beq	r4,zero,4d44c <__subdf3+0x4f8>
   4d2c4:	3463c83a 	sub	r17,r6,r17
   4d2c8:	194bc83a 	sub	r5,r3,r5
   4d2cc:	344d803a 	cmpltu	r6,r6,r17
   4d2d0:	29a7c83a 	sub	r19,r5,r6
   4d2d4:	3825883a 	mov	r18,r7
   4d2d8:	983f841e 	bne	r19,zero,4d0ec <__alt_data_end+0xfffe6c2c>
   4d2dc:	8809883a 	mov	r4,r17
   4d2e0:	004da200 	call	4da20 <__clzsi2>
   4d2e4:	10800804 	addi	r2,r2,32
   4d2e8:	10fffe04 	addi	r3,r2,-8
   4d2ec:	010007c4 	movi	r4,31
   4d2f0:	20ff830e 	bge	r4,r3,4d100 <__alt_data_end+0xfffe6c40>
   4d2f4:	14fff604 	addi	r19,r2,-40
   4d2f8:	8ce6983a 	sll	r19,r17,r19
   4d2fc:	0023883a 	mov	r17,zero
   4d300:	1c3f860e 	bge	r3,r16,4d11c <__alt_data_end+0xfffe6c5c>
   4d304:	017fe034 	movhi	r5,65408
   4d308:	297fffc4 	addi	r5,r5,-1
   4d30c:	80e1c83a 	sub	r16,r16,r3
   4d310:	994a703a 	and	r5,r19,r5
   4d314:	003f3206 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d318:	0009883a 	mov	r4,zero
   4d31c:	0005883a 	mov	r2,zero
   4d320:	003f4706 	br	4d040 <__alt_data_end+0xfffe6b80>
   4d324:	198cb03a 	or	r6,r3,r6
   4d328:	300cc03a 	cmpne	r6,r6,zero
   4d32c:	0005883a 	mov	r2,zero
   4d330:	003f6306 	br	4d0c0 <__alt_data_end+0xfffe6c00>
   4d334:	10009d1e 	bne	r2,zero,4d5ac <__subdf3+0x658>
   4d338:	81c00044 	addi	r7,r16,1
   4d33c:	3881ffcc 	andi	r2,r7,2047
   4d340:	02400044 	movi	r9,1
   4d344:	4880680e 	bge	r9,r2,4d4e8 <__subdf3+0x594>
   4d348:	0081ffc4 	movi	r2,2047
   4d34c:	3880ae26 	beq	r7,r2,4d608 <__subdf3+0x6b4>
   4d350:	344d883a 	add	r6,r6,r17
   4d354:	3463803a 	cmpltu	r17,r6,r17
   4d358:	194b883a 	add	r5,r3,r5
   4d35c:	2c4b883a 	add	r5,r5,r17
   4d360:	282297fa 	slli	r17,r5,31
   4d364:	300cd07a 	srli	r6,r6,1
   4d368:	280ad07a 	srli	r5,r5,1
   4d36c:	3821883a 	mov	r16,r7
   4d370:	89a2b03a 	or	r17,r17,r6
   4d374:	003f1a06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d378:	0101ffc4 	movi	r4,2047
   4d37c:	813f431e 	bne	r16,r4,4d08c <__alt_data_end+0xfffe6bcc>
   4d380:	003f1706 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d384:	80bff844 	addi	r2,r16,-31
   4d388:	00c00804 	movi	r3,32
   4d38c:	9884d83a 	srl	r2,r19,r2
   4d390:	28c05126 	beq	r5,r3,4d4d8 <__subdf3+0x584>
   4d394:	00c00fc4 	movi	r3,63
   4d398:	1c21c83a 	sub	r16,r3,r16
   4d39c:	9c26983a 	sll	r19,r19,r16
   4d3a0:	9c62b03a 	or	r17,r19,r17
   4d3a4:	8822c03a 	cmpne	r17,r17,zero
   4d3a8:	88a2b03a 	or	r17,r17,r2
   4d3ac:	000b883a 	mov	r5,zero
   4d3b0:	0021883a 	mov	r16,zero
   4d3b4:	003fb406 	br	4d288 <__alt_data_end+0xfffe6dc8>
   4d3b8:	113ff804 	addi	r4,r2,-32
   4d3bc:	01c00804 	movi	r7,32
   4d3c0:	1908d83a 	srl	r4,r3,r4
   4d3c4:	11c04626 	beq	r2,r7,4d4e0 <__subdf3+0x58c>
   4d3c8:	01c01004 	movi	r7,64
   4d3cc:	3885c83a 	sub	r2,r7,r2
   4d3d0:	1884983a 	sll	r2,r3,r2
   4d3d4:	118cb03a 	or	r6,r2,r6
   4d3d8:	300cc03a 	cmpne	r6,r6,zero
   4d3dc:	310cb03a 	or	r6,r6,r4
   4d3e0:	0005883a 	mov	r2,zero
   4d3e4:	003f3606 	br	4d0c0 <__alt_data_end+0xfffe6c00>
   4d3e8:	80002b26 	beq	r16,zero,4d498 <__subdf3+0x544>
   4d3ec:	0101ffc4 	movi	r4,2047
   4d3f0:	51006926 	beq	r10,r4,4d598 <__subdf3+0x644>
   4d3f4:	0085c83a 	sub	r2,zero,r2
   4d3f8:	29402034 	orhi	r5,r5,128
   4d3fc:	01000e04 	movi	r4,56
   4d400:	20807d16 	blt	r4,r2,4d5f8 <__subdf3+0x6a4>
   4d404:	010007c4 	movi	r4,31
   4d408:	2080d916 	blt	r4,r2,4d770 <__subdf3+0x81c>
   4d40c:	01000804 	movi	r4,32
   4d410:	2089c83a 	sub	r4,r4,r2
   4d414:	2912983a 	sll	r9,r5,r4
   4d418:	8890d83a 	srl	r8,r17,r2
   4d41c:	8908983a 	sll	r4,r17,r4
   4d420:	2884d83a 	srl	r2,r5,r2
   4d424:	4a22b03a 	or	r17,r9,r8
   4d428:	2008c03a 	cmpne	r4,r4,zero
   4d42c:	8922b03a 	or	r17,r17,r4
   4d430:	3463c83a 	sub	r17,r6,r17
   4d434:	1885c83a 	sub	r2,r3,r2
   4d438:	344d803a 	cmpltu	r6,r6,r17
   4d43c:	118bc83a 	sub	r5,r2,r6
   4d440:	5021883a 	mov	r16,r10
   4d444:	3825883a 	mov	r18,r7
   4d448:	003f2206 	br	4d0d4 <__alt_data_end+0xfffe6c14>
   4d44c:	9886b03a 	or	r3,r19,r2
   4d450:	18001c1e 	bne	r3,zero,4d4c4 <__subdf3+0x570>
   4d454:	0011883a 	mov	r8,zero
   4d458:	000b883a 	mov	r5,zero
   4d45c:	0023883a 	mov	r17,zero
   4d460:	0021883a 	mov	r16,zero
   4d464:	003f3e06 	br	4d160 <__alt_data_end+0xfffe6ca0>
   4d468:	010007c4 	movi	r4,31
   4d46c:	20803c16 	blt	r4,r2,4d560 <__subdf3+0x60c>
   4d470:	01000804 	movi	r4,32
   4d474:	2089c83a 	sub	r4,r4,r2
   4d478:	1912983a 	sll	r9,r3,r4
   4d47c:	308ed83a 	srl	r7,r6,r2
   4d480:	3108983a 	sll	r4,r6,r4
   4d484:	1884d83a 	srl	r2,r3,r2
   4d488:	49ceb03a 	or	r7,r9,r7
   4d48c:	2008c03a 	cmpne	r4,r4,zero
   4d490:	390eb03a 	or	r7,r7,r4
   4d494:	003f4706 	br	4d1b4 <__alt_data_end+0xfffe6cf4>
   4d498:	2c48b03a 	or	r4,r5,r17
   4d49c:	20003e26 	beq	r4,zero,4d598 <__subdf3+0x644>
   4d4a0:	0084303a 	nor	r2,zero,r2
   4d4a4:	10003a1e 	bne	r2,zero,4d590 <__subdf3+0x63c>
   4d4a8:	3463c83a 	sub	r17,r6,r17
   4d4ac:	194bc83a 	sub	r5,r3,r5
   4d4b0:	344d803a 	cmpltu	r6,r6,r17
   4d4b4:	298bc83a 	sub	r5,r5,r6
   4d4b8:	5021883a 	mov	r16,r10
   4d4bc:	3825883a 	mov	r18,r7
   4d4c0:	003f0406 	br	4d0d4 <__alt_data_end+0xfffe6c14>
   4d4c4:	1023883a 	mov	r17,r2
   4d4c8:	003f0706 	br	4d0e8 <__alt_data_end+0xfffe6c28>
   4d4cc:	0101ffc4 	movi	r4,2047
   4d4d0:	813f331e 	bne	r16,r4,4d1a0 <__alt_data_end+0xfffe6ce0>
   4d4d4:	003ec206 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d4d8:	0027883a 	mov	r19,zero
   4d4dc:	003fb006 	br	4d3a0 <__alt_data_end+0xfffe6ee0>
   4d4e0:	0005883a 	mov	r2,zero
   4d4e4:	003fbb06 	br	4d3d4 <__alt_data_end+0xfffe6f14>
   4d4e8:	2c44b03a 	or	r2,r5,r17
   4d4ec:	80008b1e 	bne	r16,zero,4d71c <__subdf3+0x7c8>
   4d4f0:	1000b526 	beq	r2,zero,4d7c8 <__subdf3+0x874>
   4d4f4:	1984b03a 	or	r2,r3,r6
   4d4f8:	103eb926 	beq	r2,zero,4cfe0 <__alt_data_end+0xfffe6b20>
   4d4fc:	3449883a 	add	r4,r6,r17
   4d500:	2463803a 	cmpltu	r17,r4,r17
   4d504:	194b883a 	add	r5,r3,r5
   4d508:	2c4b883a 	add	r5,r5,r17
   4d50c:	2880202c 	andhi	r2,r5,128
   4d510:	2023883a 	mov	r17,r4
   4d514:	103f5c26 	beq	r2,zero,4d288 <__alt_data_end+0xfffe6dc8>
   4d518:	00bfe034 	movhi	r2,65408
   4d51c:	10bfffc4 	addi	r2,r2,-1
   4d520:	4821883a 	mov	r16,r9
   4d524:	288a703a 	and	r5,r5,r2
   4d528:	003ead06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d52c:	2c44b03a 	or	r2,r5,r17
   4d530:	8000291e 	bne	r16,zero,4d5d8 <__subdf3+0x684>
   4d534:	10004f1e 	bne	r2,zero,4d674 <__subdf3+0x720>
   4d538:	1984b03a 	or	r2,r3,r6
   4d53c:	10000426 	beq	r2,zero,4d550 <__subdf3+0x5fc>
   4d540:	180b883a 	mov	r5,r3
   4d544:	3023883a 	mov	r17,r6
   4d548:	3825883a 	mov	r18,r7
   4d54c:	003ea406 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d550:	0011883a 	mov	r8,zero
   4d554:	000b883a 	mov	r5,zero
   4d558:	0023883a 	mov	r17,zero
   4d55c:	003f0006 	br	4d160 <__alt_data_end+0xfffe6ca0>
   4d560:	11fff804 	addi	r7,r2,-32
   4d564:	19c8d83a 	srl	r4,r3,r7
   4d568:	01c00804 	movi	r7,32
   4d56c:	11c07e26 	beq	r2,r7,4d768 <__subdf3+0x814>
   4d570:	01c01004 	movi	r7,64
   4d574:	3885c83a 	sub	r2,r7,r2
   4d578:	1884983a 	sll	r2,r3,r2
   4d57c:	118cb03a 	or	r6,r2,r6
   4d580:	300ec03a 	cmpne	r7,r6,zero
   4d584:	390eb03a 	or	r7,r7,r4
   4d588:	0005883a 	mov	r2,zero
   4d58c:	003f0906 	br	4d1b4 <__alt_data_end+0xfffe6cf4>
   4d590:	0101ffc4 	movi	r4,2047
   4d594:	513f991e 	bne	r10,r4,4d3fc <__alt_data_end+0xfffe6f3c>
   4d598:	180b883a 	mov	r5,r3
   4d59c:	3023883a 	mov	r17,r6
   4d5a0:	5021883a 	mov	r16,r10
   4d5a4:	3825883a 	mov	r18,r7
   4d5a8:	003e8d06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d5ac:	80001a1e 	bne	r16,zero,4d618 <__subdf3+0x6c4>
   4d5b0:	2c48b03a 	or	r4,r5,r17
   4d5b4:	20005526 	beq	r4,zero,4d70c <__subdf3+0x7b8>
   4d5b8:	0084303a 	nor	r2,zero,r2
   4d5bc:	1000511e 	bne	r2,zero,4d704 <__subdf3+0x7b0>
   4d5c0:	89a3883a 	add	r17,r17,r6
   4d5c4:	194b883a 	add	r5,r3,r5
   4d5c8:	898d803a 	cmpltu	r6,r17,r6
   4d5cc:	298b883a 	add	r5,r5,r6
   4d5d0:	5021883a 	mov	r16,r10
   4d5d4:	003efc06 	br	4d1c8 <__alt_data_end+0xfffe6d08>
   4d5d8:	1000341e 	bne	r2,zero,4d6ac <__subdf3+0x758>
   4d5dc:	1984b03a 	or	r2,r3,r6
   4d5e0:	10006f26 	beq	r2,zero,4d7a0 <__subdf3+0x84c>
   4d5e4:	180b883a 	mov	r5,r3
   4d5e8:	3023883a 	mov	r17,r6
   4d5ec:	3825883a 	mov	r18,r7
   4d5f0:	0401ffc4 	movi	r16,2047
   4d5f4:	003e7a06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d5f8:	2c62b03a 	or	r17,r5,r17
   4d5fc:	8822c03a 	cmpne	r17,r17,zero
   4d600:	0005883a 	mov	r2,zero
   4d604:	003f8a06 	br	4d430 <__alt_data_end+0xfffe6f70>
   4d608:	3821883a 	mov	r16,r7
   4d60c:	000b883a 	mov	r5,zero
   4d610:	0023883a 	mov	r17,zero
   4d614:	003ed206 	br	4d160 <__alt_data_end+0xfffe6ca0>
   4d618:	0101ffc4 	movi	r4,2047
   4d61c:	51003b26 	beq	r10,r4,4d70c <__subdf3+0x7b8>
   4d620:	0085c83a 	sub	r2,zero,r2
   4d624:	29402034 	orhi	r5,r5,128
   4d628:	01000e04 	movi	r4,56
   4d62c:	20806216 	blt	r4,r2,4d7b8 <__subdf3+0x864>
   4d630:	010007c4 	movi	r4,31
   4d634:	20806b16 	blt	r4,r2,4d7e4 <__subdf3+0x890>
   4d638:	01000804 	movi	r4,32
   4d63c:	2089c83a 	sub	r4,r4,r2
   4d640:	2912983a 	sll	r9,r5,r4
   4d644:	888ed83a 	srl	r7,r17,r2
   4d648:	8908983a 	sll	r4,r17,r4
   4d64c:	2884d83a 	srl	r2,r5,r2
   4d650:	49e2b03a 	or	r17,r9,r7
   4d654:	2008c03a 	cmpne	r4,r4,zero
   4d658:	8922b03a 	or	r17,r17,r4
   4d65c:	89a3883a 	add	r17,r17,r6
   4d660:	10c5883a 	add	r2,r2,r3
   4d664:	898d803a 	cmpltu	r6,r17,r6
   4d668:	118b883a 	add	r5,r2,r6
   4d66c:	5021883a 	mov	r16,r10
   4d670:	003ed506 	br	4d1c8 <__alt_data_end+0xfffe6d08>
   4d674:	1984b03a 	or	r2,r3,r6
   4d678:	103e5926 	beq	r2,zero,4cfe0 <__alt_data_end+0xfffe6b20>
   4d67c:	8989c83a 	sub	r4,r17,r6
   4d680:	8911803a 	cmpltu	r8,r17,r4
   4d684:	28c5c83a 	sub	r2,r5,r3
   4d688:	1205c83a 	sub	r2,r2,r8
   4d68c:	1200202c 	andhi	r8,r2,128
   4d690:	403ef926 	beq	r8,zero,4d278 <__alt_data_end+0xfffe6db8>
   4d694:	3463c83a 	sub	r17,r6,r17
   4d698:	194bc83a 	sub	r5,r3,r5
   4d69c:	344d803a 	cmpltu	r6,r6,r17
   4d6a0:	298bc83a 	sub	r5,r5,r6
   4d6a4:	3825883a 	mov	r18,r7
   4d6a8:	003e4d06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d6ac:	1984b03a 	or	r2,r3,r6
   4d6b0:	10002b26 	beq	r2,zero,4d760 <__subdf3+0x80c>
   4d6b4:	2808d0fa 	srli	r4,r5,3
   4d6b8:	8822d0fa 	srli	r17,r17,3
   4d6bc:	280a977a 	slli	r5,r5,29
   4d6c0:	2080022c 	andhi	r2,r4,8
   4d6c4:	2c62b03a 	or	r17,r5,r17
   4d6c8:	10000826 	beq	r2,zero,4d6ec <__subdf3+0x798>
   4d6cc:	1810d0fa 	srli	r8,r3,3
   4d6d0:	4080022c 	andhi	r2,r8,8
   4d6d4:	1000051e 	bne	r2,zero,4d6ec <__subdf3+0x798>
   4d6d8:	300cd0fa 	srli	r6,r6,3
   4d6dc:	1804977a 	slli	r2,r3,29
   4d6e0:	4009883a 	mov	r4,r8
   4d6e4:	3825883a 	mov	r18,r7
   4d6e8:	11a2b03a 	or	r17,r2,r6
   4d6ec:	880ad77a 	srli	r5,r17,29
   4d6f0:	200890fa 	slli	r4,r4,3
   4d6f4:	882290fa 	slli	r17,r17,3
   4d6f8:	0401ffc4 	movi	r16,2047
   4d6fc:	290ab03a 	or	r5,r5,r4
   4d700:	003e3706 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d704:	0101ffc4 	movi	r4,2047
   4d708:	513fc71e 	bne	r10,r4,4d628 <__alt_data_end+0xfffe7168>
   4d70c:	180b883a 	mov	r5,r3
   4d710:	3023883a 	mov	r17,r6
   4d714:	5021883a 	mov	r16,r10
   4d718:	003e3106 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d71c:	10002d26 	beq	r2,zero,4d7d4 <__subdf3+0x880>
   4d720:	1984b03a 	or	r2,r3,r6
   4d724:	10000e26 	beq	r2,zero,4d760 <__subdf3+0x80c>
   4d728:	2808d0fa 	srli	r4,r5,3
   4d72c:	8822d0fa 	srli	r17,r17,3
   4d730:	280a977a 	slli	r5,r5,29
   4d734:	2080022c 	andhi	r2,r4,8
   4d738:	2c62b03a 	or	r17,r5,r17
   4d73c:	103feb26 	beq	r2,zero,4d6ec <__alt_data_end+0xfffe722c>
   4d740:	180ed0fa 	srli	r7,r3,3
   4d744:	3880022c 	andhi	r2,r7,8
   4d748:	103fe81e 	bne	r2,zero,4d6ec <__alt_data_end+0xfffe722c>
   4d74c:	300cd0fa 	srli	r6,r6,3
   4d750:	1804977a 	slli	r2,r3,29
   4d754:	3809883a 	mov	r4,r7
   4d758:	11a2b03a 	or	r17,r2,r6
   4d75c:	003fe306 	br	4d6ec <__alt_data_end+0xfffe722c>
   4d760:	0401ffc4 	movi	r16,2047
   4d764:	003e1e06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d768:	0005883a 	mov	r2,zero
   4d76c:	003f8306 	br	4d57c <__alt_data_end+0xfffe70bc>
   4d770:	113ff804 	addi	r4,r2,-32
   4d774:	02000804 	movi	r8,32
   4d778:	2908d83a 	srl	r4,r5,r4
   4d77c:	12002526 	beq	r2,r8,4d814 <__subdf3+0x8c0>
   4d780:	02001004 	movi	r8,64
   4d784:	4085c83a 	sub	r2,r8,r2
   4d788:	288a983a 	sll	r5,r5,r2
   4d78c:	2c62b03a 	or	r17,r5,r17
   4d790:	8822c03a 	cmpne	r17,r17,zero
   4d794:	8922b03a 	or	r17,r17,r4
   4d798:	0005883a 	mov	r2,zero
   4d79c:	003f2406 	br	4d430 <__alt_data_end+0xfffe6f70>
   4d7a0:	01402034 	movhi	r5,128
   4d7a4:	0011883a 	mov	r8,zero
   4d7a8:	297fffc4 	addi	r5,r5,-1
   4d7ac:	047ffe04 	movi	r17,-8
   4d7b0:	0401ffc4 	movi	r16,2047
   4d7b4:	003e6a06 	br	4d160 <__alt_data_end+0xfffe6ca0>
   4d7b8:	2c62b03a 	or	r17,r5,r17
   4d7bc:	8822c03a 	cmpne	r17,r17,zero
   4d7c0:	0005883a 	mov	r2,zero
   4d7c4:	003fa506 	br	4d65c <__alt_data_end+0xfffe719c>
   4d7c8:	180b883a 	mov	r5,r3
   4d7cc:	3023883a 	mov	r17,r6
   4d7d0:	003e0306 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d7d4:	180b883a 	mov	r5,r3
   4d7d8:	3023883a 	mov	r17,r6
   4d7dc:	0401ffc4 	movi	r16,2047
   4d7e0:	003dff06 	br	4cfe0 <__alt_data_end+0xfffe6b20>
   4d7e4:	113ff804 	addi	r4,r2,-32
   4d7e8:	01c00804 	movi	r7,32
   4d7ec:	2908d83a 	srl	r4,r5,r4
   4d7f0:	11c00a26 	beq	r2,r7,4d81c <__subdf3+0x8c8>
   4d7f4:	01c01004 	movi	r7,64
   4d7f8:	3885c83a 	sub	r2,r7,r2
   4d7fc:	288a983a 	sll	r5,r5,r2
   4d800:	2c62b03a 	or	r17,r5,r17
   4d804:	8822c03a 	cmpne	r17,r17,zero
   4d808:	8922b03a 	or	r17,r17,r4
   4d80c:	0005883a 	mov	r2,zero
   4d810:	003f9206 	br	4d65c <__alt_data_end+0xfffe719c>
   4d814:	000b883a 	mov	r5,zero
   4d818:	003fdc06 	br	4d78c <__alt_data_end+0xfffe72cc>
   4d81c:	000b883a 	mov	r5,zero
   4d820:	003ff706 	br	4d800 <__alt_data_end+0xfffe7340>

0004d824 <__fixdfsi>:
   4d824:	2806d53a 	srli	r3,r5,20
   4d828:	00800434 	movhi	r2,16
   4d82c:	10bfffc4 	addi	r2,r2,-1
   4d830:	18c1ffcc 	andi	r3,r3,2047
   4d834:	0180ff84 	movi	r6,1022
   4d838:	2884703a 	and	r2,r5,r2
   4d83c:	280ad7fa 	srli	r5,r5,31
   4d840:	30c0130e 	bge	r6,r3,4d890 <__fixdfsi+0x6c>
   4d844:	01810744 	movi	r6,1053
   4d848:	30c00d16 	blt	r6,r3,4d880 <__fixdfsi+0x5c>
   4d84c:	01810cc4 	movi	r6,1075
   4d850:	30cdc83a 	sub	r6,r6,r3
   4d854:	01c007c4 	movi	r7,31
   4d858:	10800434 	orhi	r2,r2,16
   4d85c:	39800e0e 	bge	r7,r6,4d898 <__fixdfsi+0x74>
   4d860:	010104c4 	movi	r4,1043
   4d864:	20c7c83a 	sub	r3,r4,r3
   4d868:	10c6d83a 	srl	r3,r2,r3
   4d86c:	29403fcc 	andi	r5,r5,255
   4d870:	0145c83a 	sub	r2,zero,r5
   4d874:	1884f03a 	xor	r2,r3,r2
   4d878:	1145883a 	add	r2,r2,r5
   4d87c:	f800283a 	ret
   4d880:	00a00034 	movhi	r2,32768
   4d884:	10bfffc4 	addi	r2,r2,-1
   4d888:	2885883a 	add	r2,r5,r2
   4d88c:	f800283a 	ret
   4d890:	0005883a 	mov	r2,zero
   4d894:	f800283a 	ret
   4d898:	18fefb44 	addi	r3,r3,-1043
   4d89c:	2188d83a 	srl	r4,r4,r6
   4d8a0:	10c6983a 	sll	r3,r2,r3
   4d8a4:	20c6b03a 	or	r3,r4,r3
   4d8a8:	003ff006 	br	4d86c <__alt_data_end+0xfffe73ac>

0004d8ac <__floatsidf>:
   4d8ac:	defffd04 	addi	sp,sp,-12
   4d8b0:	dc400115 	stw	r17,4(sp)
   4d8b4:	dfc00215 	stw	ra,8(sp)
   4d8b8:	dc000015 	stw	r16,0(sp)
   4d8bc:	2023883a 	mov	r17,r4
   4d8c0:	20001426 	beq	r4,zero,4d914 <__floatsidf+0x68>
   4d8c4:	2020d7fa 	srli	r16,r4,31
   4d8c8:	80000126 	beq	r16,zero,4d8d0 <__floatsidf+0x24>
   4d8cc:	0123c83a 	sub	r17,zero,r4
   4d8d0:	8809883a 	mov	r4,r17
   4d8d4:	004da200 	call	4da20 <__clzsi2>
   4d8d8:	01410784 	movi	r5,1054
   4d8dc:	00c00284 	movi	r3,10
   4d8e0:	288bc83a 	sub	r5,r5,r2
   4d8e4:	18801c16 	blt	r3,r2,4d958 <__floatsidf+0xac>
   4d8e8:	00c002c4 	movi	r3,11
   4d8ec:	1887c83a 	sub	r3,r3,r2
   4d8f0:	88c8d83a 	srl	r4,r17,r3
   4d8f4:	00c00434 	movhi	r3,16
   4d8f8:	18ffffc4 	addi	r3,r3,-1
   4d8fc:	10800544 	addi	r2,r2,21
   4d900:	20c8703a 	and	r4,r4,r3
   4d904:	8884983a 	sll	r2,r17,r2
   4d908:	28c1ffcc 	andi	r3,r5,2047
   4d90c:	800d883a 	mov	r6,r16
   4d910:	00000406 	br	4d924 <__floatsidf+0x78>
   4d914:	000d883a 	mov	r6,zero
   4d918:	0007883a 	mov	r3,zero
   4d91c:	0009883a 	mov	r4,zero
   4d920:	0005883a 	mov	r2,zero
   4d924:	180a953a 	slli	r5,r3,20
   4d928:	31803fcc 	andi	r6,r6,255
   4d92c:	00c00434 	movhi	r3,16
   4d930:	300c97fa 	slli	r6,r6,31
   4d934:	18ffffc4 	addi	r3,r3,-1
   4d938:	20c6703a 	and	r3,r4,r3
   4d93c:	1946b03a 	or	r3,r3,r5
   4d940:	1986b03a 	or	r3,r3,r6
   4d944:	dfc00217 	ldw	ra,8(sp)
   4d948:	dc400117 	ldw	r17,4(sp)
   4d94c:	dc000017 	ldw	r16,0(sp)
   4d950:	dec00304 	addi	sp,sp,12
   4d954:	f800283a 	ret
   4d958:	10fffd44 	addi	r3,r2,-11
   4d95c:	88c8983a 	sll	r4,r17,r3
   4d960:	00800434 	movhi	r2,16
   4d964:	10bfffc4 	addi	r2,r2,-1
   4d968:	2088703a 	and	r4,r4,r2
   4d96c:	28c1ffcc 	andi	r3,r5,2047
   4d970:	800d883a 	mov	r6,r16
   4d974:	0005883a 	mov	r2,zero
   4d978:	003fea06 	br	4d924 <__alt_data_end+0xfffe7464>

0004d97c <__floatunsidf>:
   4d97c:	defffe04 	addi	sp,sp,-8
   4d980:	dc000015 	stw	r16,0(sp)
   4d984:	dfc00115 	stw	ra,4(sp)
   4d988:	2021883a 	mov	r16,r4
   4d98c:	20001026 	beq	r4,zero,4d9d0 <__floatunsidf+0x54>
   4d990:	004da200 	call	4da20 <__clzsi2>
   4d994:	01410784 	movi	r5,1054
   4d998:	100d883a 	mov	r6,r2
   4d99c:	288bc83a 	sub	r5,r5,r2
   4d9a0:	00800284 	movi	r2,10
   4d9a4:	11801616 	blt	r2,r6,4da00 <__floatunsidf+0x84>
   4d9a8:	008002c4 	movi	r2,11
   4d9ac:	1185c83a 	sub	r2,r2,r6
   4d9b0:	8084d83a 	srl	r2,r16,r2
   4d9b4:	00c00434 	movhi	r3,16
   4d9b8:	31c00544 	addi	r7,r6,21
   4d9bc:	18ffffc4 	addi	r3,r3,-1
   4d9c0:	81e0983a 	sll	r16,r16,r7
   4d9c4:	10cc703a 	and	r6,r2,r3
   4d9c8:	2941ffcc 	andi	r5,r5,2047
   4d9cc:	00000206 	br	4d9d8 <__floatunsidf+0x5c>
   4d9d0:	000b883a 	mov	r5,zero
   4d9d4:	000d883a 	mov	r6,zero
   4d9d8:	280a953a 	slli	r5,r5,20
   4d9dc:	00c00434 	movhi	r3,16
   4d9e0:	18ffffc4 	addi	r3,r3,-1
   4d9e4:	30c6703a 	and	r3,r6,r3
   4d9e8:	8005883a 	mov	r2,r16
   4d9ec:	1946b03a 	or	r3,r3,r5
   4d9f0:	dfc00117 	ldw	ra,4(sp)
   4d9f4:	dc000017 	ldw	r16,0(sp)
   4d9f8:	dec00204 	addi	sp,sp,8
   4d9fc:	f800283a 	ret
   4da00:	31bffd44 	addi	r6,r6,-11
   4da04:	818c983a 	sll	r6,r16,r6
   4da08:	00800434 	movhi	r2,16
   4da0c:	10bfffc4 	addi	r2,r2,-1
   4da10:	2941ffcc 	andi	r5,r5,2047
   4da14:	0021883a 	mov	r16,zero
   4da18:	308c703a 	and	r6,r6,r2
   4da1c:	003fee06 	br	4d9d8 <__alt_data_end+0xfffe7518>

0004da20 <__clzsi2>:
   4da20:	00bfffd4 	movui	r2,65535
   4da24:	11000b36 	bltu	r2,r4,4da54 <__clzsi2+0x34>
   4da28:	00803fc4 	movi	r2,255
   4da2c:	1100122e 	bgeu	r2,r4,4da78 <__clzsi2+0x58>
   4da30:	00c00204 	movi	r3,8
   4da34:	01400604 	movi	r5,24
   4da38:	20c8d83a 	srl	r4,r4,r3
   4da3c:	00800174 	movhi	r2,5
   4da40:	10bcf004 	addi	r2,r2,-3136
   4da44:	1109883a 	add	r4,r2,r4
   4da48:	20800003 	ldbu	r2,0(r4)
   4da4c:	2885c83a 	sub	r2,r5,r2
   4da50:	f800283a 	ret
   4da54:	00804034 	movhi	r2,256
   4da58:	10bfffc4 	addi	r2,r2,-1
   4da5c:	11000336 	bltu	r2,r4,4da6c <__clzsi2+0x4c>
   4da60:	00c00404 	movi	r3,16
   4da64:	180b883a 	mov	r5,r3
   4da68:	003ff306 	br	4da38 <__alt_data_end+0xfffe7578>
   4da6c:	00c00604 	movi	r3,24
   4da70:	01400204 	movi	r5,8
   4da74:	003ff006 	br	4da38 <__alt_data_end+0xfffe7578>
   4da78:	0007883a 	mov	r3,zero
   4da7c:	01400804 	movi	r5,32
   4da80:	003fed06 	br	4da38 <__alt_data_end+0xfffe7578>

0004da84 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   4da84:	defffd04 	addi	sp,sp,-12
   4da88:	dc000015 	stw	r16,0(sp)
   4da8c:	dfc00215 	stw	ra,8(sp)
   4da90:	dc400115 	stw	r17,4(sp)
   4da94:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   4da98:	20001616 	blt	r4,zero,4daf4 <close+0x70>
   4da9c:	20c00324 	muli	r3,r4,12
   4daa0:	00800174 	movhi	r2,5
   4daa4:	10bf6004 	addi	r2,r2,-640
   4daa8:	1885883a 	add	r2,r3,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4daac:	10c00017 	ldw	r3,0(r2)
   4dab0:	18c00417 	ldw	r3,16(r3)
   4dab4:	18000c26 	beq	r3,zero,4dae8 <close+0x64>
   4dab8:	1009883a 	mov	r4,r2
   4dabc:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dac0:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   4dac4:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dac8:	004e2480 	call	4e248 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   4dacc:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   4dad0:	88001416 	blt	r17,zero,4db24 <close+0xa0>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   4dad4:	dfc00217 	ldw	ra,8(sp)
   4dad8:	dc400117 	ldw	r17,4(sp)
   4dadc:	dc000017 	ldw	r16,0(sp)
   4dae0:	dec00304 	addi	sp,sp,12
   4dae4:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   4dae8:	004e2480 	call	4e248 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   4daec:	0005883a 	mov	r2,zero
   4daf0:	003ff806 	br	4dad4 <__alt_data_end+0xfffe7614>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   4daf4:	00800174 	movhi	r2,5
   4daf8:	10bfe004 	addi	r2,r2,-128
   4dafc:	10800017 	ldw	r2,0(r2)
   4db00:	10000226 	beq	r2,zero,4db0c <close+0x88>
   4db04:	103ee83a 	callr	r2
   4db08:	00000206 	br	4db14 <close+0x90>
   4db0c:	00800174 	movhi	r2,5
   4db10:	10829a04 	addi	r2,r2,2664
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4db14:	00c01444 	movi	r3,81
   4db18:	10c00015 	stw	r3,0(r2)
    return -1;
   4db1c:	00bfffc4 	movi	r2,-1
   4db20:	003fec06 	br	4dad4 <__alt_data_end+0xfffe7614>
   4db24:	00800174 	movhi	r2,5
   4db28:	10bfe004 	addi	r2,r2,-128
   4db2c:	10800017 	ldw	r2,0(r2)
   4db30:	10000526 	beq	r2,zero,4db48 <close+0xc4>
   4db34:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
   4db38:	0463c83a 	sub	r17,zero,r17
   4db3c:	14400015 	stw	r17,0(r2)
      return -1;
   4db40:	00bfffc4 	movi	r2,-1
   4db44:	003fe306 	br	4dad4 <__alt_data_end+0xfffe7614>
   4db48:	00800174 	movhi	r2,5
   4db4c:	10829a04 	addi	r2,r2,2664
   4db50:	003ff906 	br	4db38 <__alt_data_end+0xfffe7678>

0004db54 <alt_dcache_flush_all>:
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4db54:	0005883a 	mov	r2,zero
   4db58:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   4db5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   4db60:	10800804 	addi	r2,r2,32
   4db64:	10fffd1e 	bne	r2,r3,4db5c <__alt_data_end+0xfffe769c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   4db68:	f800283a 	ret

0004db6c <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   4db6c:	3005883a 	mov	r2,r6
   4db70:	f800283a 	ret

0004db74 <fstat>:
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4db74:	20000c16 	blt	r4,zero,4dba8 <fstat+0x34>
   4db78:	21000324 	muli	r4,r4,12
   4db7c:	00800174 	movhi	r2,5
   4db80:	10bf6004 	addi	r2,r2,-640
   4db84:	2089883a 	add	r4,r4,r2
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4db88:	20800017 	ldw	r2,0(r4)
   4db8c:	10800817 	ldw	r2,32(r2)
   4db90:	10000126 	beq	r2,zero,4db98 <fstat+0x24>
    {
      return fd->dev->fstat(fd, st);
   4db94:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4db98:	00880004 	movi	r2,8192
   4db9c:	28800115 	stw	r2,4(r5)
      return 0;
   4dba0:	0005883a 	mov	r2,zero
   4dba4:	f800283a 	ret
   4dba8:	00800174 	movhi	r2,5
   4dbac:	10bfe004 	addi	r2,r2,-128
   4dbb0:	10800017 	ldw	r2,0(r2)
   4dbb4:	10000926 	beq	r2,zero,4dbdc <fstat+0x68>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4dbb8:	deffff04 	addi	sp,sp,-4
   4dbbc:	dfc00015 	stw	ra,0(sp)
   4dbc0:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dbc4:	00c01444 	movi	r3,81
   4dbc8:	10c00015 	stw	r3,0(r2)
    return -1;
   4dbcc:	00bfffc4 	movi	r2,-1
  }
}
   4dbd0:	dfc00017 	ldw	ra,0(sp)
   4dbd4:	dec00104 	addi	sp,sp,4
   4dbd8:	f800283a 	ret
   4dbdc:	00800174 	movhi	r2,5
   4dbe0:	10829a04 	addi	r2,r2,2664
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4dbe4:	00c01444 	movi	r3,81
   4dbe8:	10c00015 	stw	r3,0(r2)
    return -1;
   4dbec:	00bfffc4 	movi	r2,-1
  }
}
   4dbf0:	f800283a 	ret

0004dbf4 <gettimeofday>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   4dbf4:	00800174 	movhi	r2,5
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
   4dbf8:	defffa04 	addi	sp,sp,-24
   4dbfc:	1082a304 	addi	r2,r2,2700
   4dc00:	dc000015 	stw	r16,0(sp)
   4dc04:	14000017 	ldw	r16,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   4dc08:	00800174 	movhi	r2,5
   4dc0c:	1082a204 	addi	r2,r2,2696
   4dc10:	dd000415 	stw	r20,16(sp)
   4dc14:	15000017 	ldw	r20,0(r2)
   4dc18:	dfc00515 	stw	ra,20(sp)
   4dc1c:	dcc00315 	stw	r19,12(sp)
   4dc20:	dc800215 	stw	r18,8(sp)
   4dc24:	dc400115 	stw	r17,4(sp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
   4dc28:	80004826 	beq	r16,zero,4dd4c <gettimeofday+0x158>
   4dc2c:	2025883a 	mov	r18,r4
   4dc30:	2827883a 	mov	r19,r5
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   4dc34:	a009883a 	mov	r4,r20
   4dc38:	800b883a 	mov	r5,r16
   4dc3c:	00415dc0 	call	415dc <__udivsi3>
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   4dc40:	800b883a 	mov	r5,r16
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   4dc44:	d422c617 	ldw	r16,-29928(gp)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   4dc48:	010003f4 	movhi	r4,15
   4dc4c:	21109004 	addi	r4,r4,16960
   * updated.
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
   4dc50:	1421883a 	add	r16,r2,r16
   4dc54:	94000015 	stw	r16,0(r18)
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
   4dc58:	00415dc0 	call	415dc <__udivsi3>
   4dc5c:	1009883a 	mov	r4,r2
   4dc60:	000b883a 	mov	r5,zero
   4dc64:	a00d883a 	mov	r6,r20
   4dc68:	000f883a 	mov	r7,zero
   4dc6c:	044003f4 	movhi	r17,15
   4dc70:	004a8d40 	call	4a8d4 <__muldi3>
   4dc74:	8c509004 	addi	r17,r17,16960
   4dc78:	1009883a 	mov	r4,r2
   4dc7c:	180b883a 	mov	r5,r3
   4dc80:	880d883a 	mov	r6,r17
   4dc84:	000f883a 	mov	r7,zero
   4dc88:	004aef40 	call	4aef4 <__umoddi3>
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
   4dc8c:	d0e2c604 	addi	r3,gp,-29928
   4dc90:	18c00117 	ldw	r3,4(r3)
   4dc94:	1885883a 	add	r2,r3,r2
   4dc98:	90800115 	stw	r2,4(r18)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   4dc9c:	10001e0e 	bge	r2,zero,4dd18 <gettimeofday+0x124>
   4dca0:	1445883a 	add	r2,r2,r17
   4dca4:	880d883a 	mov	r6,r17
      if (ptimeval->tv_sec <= 0)
   4dca8:	04000316 	blt	zero,r16,4dcb8 <gettimeofday+0xc4>
   4dcac:	00001506 	br	4dd04 <gettimeofday+0x110>
   4dcb0:	1185883a 	add	r2,r2,r6
   4dcb4:	80001326 	beq	r16,zero,4dd04 <gettimeofday+0x110>
          ptimeval->tv_usec = 0;
          break;
      }
      else
      {
          ptimeval->tv_sec--;
   4dcb8:	843fffc4 	addi	r16,r16,-1
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
   4dcbc:	103ffc16 	blt	r2,zero,4dcb0 <__alt_data_end+0xfffe77f0>
   4dcc0:	94000015 	stw	r16,0(r18)
   4dcc4:	90800115 	stw	r2,4(r18)
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
   4dcc8:	98001126 	beq	r19,zero,4dd10 <gettimeofday+0x11c>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   4dccc:	d0a2c804 	addi	r2,gp,-29920
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   4dcd0:	10c00117 	ldw	r3,4(r2)
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   4dcd4:	d122c817 	ldw	r4,-29920(gp)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
   4dcd8:	0005883a 	mov	r2,zero
    }
      
    if (ptimezone)
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
   4dcdc:	98c00115 	stw	r3,4(r19)
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
   4dce0:	99000015 	stw	r4,0(r19)

    return 0;
  }

  return -ENOTSUP;
}
   4dce4:	dfc00517 	ldw	ra,20(sp)
   4dce8:	dd000417 	ldw	r20,16(sp)
   4dcec:	dcc00317 	ldw	r19,12(sp)
   4dcf0:	dc800217 	ldw	r18,8(sp)
   4dcf4:	dc400117 	ldw	r17,4(sp)
   4dcf8:	dc000017 	ldw	r16,0(sp)
   4dcfc:	dec00604 	addi	sp,sp,24
   4dd00:	f800283a 	ret
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
      if (ptimeval->tv_sec <= 0)
      {
          ptimeval->tv_sec = 0;
   4dd04:	90000015 	stw	zero,0(r18)
          ptimeval->tv_usec = 0;
   4dd08:	90000115 	stw	zero,4(r18)
   4dd0c:	003fee06 	br	4dcc8 <__alt_data_end+0xfffe7808>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
    }

    return 0;
   4dd10:	0005883a 	mov	r2,zero
   4dd14:	003ff306 	br	4dce4 <__alt_data_end+0xfffe7824>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   4dd18:	00c003f4 	movhi	r3,15
   4dd1c:	18d08fc4 	addi	r3,r3,16959
   4dd20:	18bfe90e 	bge	r3,r2,4dcc8 <__alt_data_end+0xfffe7808>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
   4dd24:	01fffc74 	movhi	r7,65521
   4dd28:	39ef7004 	addi	r7,r7,-16960
   4dd2c:	84000044 	addi	r16,r16,1
   4dd30:	11c5883a 	add	r2,r2,r7
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
      ptimeval->tv_sec++;
   4dd34:	800d883a 	mov	r6,r16
   4dd38:	84000044 	addi	r16,r16,1
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
   4dd3c:	18bffc16 	blt	r3,r2,4dd30 <__alt_data_end+0xfffe7870>
   4dd40:	91800015 	stw	r6,0(r18)
   4dd44:	90800115 	stw	r2,4(r18)
   4dd48:	003fdf06 	br	4dcc8 <__alt_data_end+0xfffe7808>
    }

    return 0;
  }

  return -ENOTSUP;
   4dd4c:	00bfde84 	movi	r2,-134
   4dd50:	003fe406 	br	4dce4 <__alt_data_end+0xfffe7824>

0004dd54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4dd54:	defff004 	addi	sp,sp,-64
   4dd58:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4dd5c:	20000e16 	blt	r4,zero,4dd98 <isatty+0x44>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4dd60:	20800324 	muli	r2,r4,12
   4dd64:	00c00174 	movhi	r3,5
   4dd68:	18ff6004 	addi	r3,r3,-640
   4dd6c:	1885883a 	add	r2,r3,r2
   4dd70:	10800017 	ldw	r2,0(r2)
   4dd74:	10800817 	ldw	r2,32(r2)
   4dd78:	10001226 	beq	r2,zero,4ddc4 <isatty+0x70>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4dd7c:	d80b883a 	mov	r5,sp
   4dd80:	004db740 	call	4db74 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4dd84:	d8800117 	ldw	r2,4(sp)
   4dd88:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   4dd8c:	dfc00f17 	ldw	ra,60(sp)
   4dd90:	dec01004 	addi	sp,sp,64
   4dd94:	f800283a 	ret
   4dd98:	00800174 	movhi	r2,5
   4dd9c:	10bfe004 	addi	r2,r2,-128
   4dda0:	10800017 	ldw	r2,0(r2)
   4dda4:	10000b26 	beq	r2,zero,4ddd4 <isatty+0x80>
   4dda8:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4ddac:	00c01444 	movi	r3,81
   4ddb0:	10c00015 	stw	r3,0(r2)
    return 0;
   4ddb4:	0005883a 	mov	r2,zero
  }
}
   4ddb8:	dfc00f17 	ldw	ra,60(sp)
   4ddbc:	dec01004 	addi	sp,sp,64
   4ddc0:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   4ddc4:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   4ddc8:	dfc00f17 	ldw	ra,60(sp)
   4ddcc:	dec01004 	addi	sp,sp,64
   4ddd0:	f800283a 	ret
   4ddd4:	00800174 	movhi	r2,5
   4ddd8:	10829a04 	addi	r2,r2,2664
   4dddc:	003ff306 	br	4ddac <__alt_data_end+0xfffe78ec>

0004dde0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4dde0:	deffff04 	addi	sp,sp,-4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   4dde4:	01800174 	movhi	r6,5
   4dde8:	01c00174 	movhi	r7,5
   4ddec:	dfc00015 	stw	ra,0(sp)
   4ddf0:	31bd3704 	addi	r6,r6,-2852
   4ddf4:	39ffe504 	addi	r7,r7,-108
   4ddf8:	31c01026 	beq	r6,r7,4de3c <alt_load+0x5c>
  {
    while( to != end )
   4ddfc:	00800174 	movhi	r2,5
   4de00:	10bfe504 	addi	r2,r2,-108
   4de04:	30800d26 	beq	r6,r2,4de3c <alt_load+0x5c>
   4de08:	30c00104 	addi	r3,r6,4
   4de0c:	10c7c83a 	sub	r3,r2,r3
   4de10:	1806d0ba 	srli	r3,r3,2
   4de14:	0005883a 	mov	r2,zero
   4de18:	18c00044 	addi	r3,r3,1
   4de1c:	18c7883a 	add	r3,r3,r3
   4de20:	18c7883a 	add	r3,r3,r3
   4de24:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   4de28:	21400017 	ldw	r5,0(r4)
   4de2c:	1189883a 	add	r4,r2,r6
   4de30:	10800104 	addi	r2,r2,4
   4de34:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4de38:	10fffa1e 	bne	r2,r3,4de24 <__alt_data_end+0xfffe7964>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   4de3c:	01800134 	movhi	r6,4
   4de40:	01c00134 	movhi	r7,4
   4de44:	31800804 	addi	r6,r6,32
   4de48:	39c00804 	addi	r7,r7,32
   4de4c:	31c01026 	beq	r6,r7,4de90 <alt_load+0xb0>
  {
    while( to != end )
   4de50:	00800134 	movhi	r2,4
   4de54:	10806304 	addi	r2,r2,396
   4de58:	30800d26 	beq	r6,r2,4de90 <alt_load+0xb0>
   4de5c:	30c00104 	addi	r3,r6,4
   4de60:	10c7c83a 	sub	r3,r2,r3
   4de64:	1806d0ba 	srli	r3,r3,2
   4de68:	0005883a 	mov	r2,zero
   4de6c:	18c00044 	addi	r3,r3,1
   4de70:	18c7883a 	add	r3,r3,r3
   4de74:	18c7883a 	add	r3,r3,r3
   4de78:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   4de7c:	21400017 	ldw	r5,0(r4)
   4de80:	1189883a 	add	r4,r2,r6
   4de84:	10800104 	addi	r2,r2,4
   4de88:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4de8c:	10fffa1e 	bne	r2,r3,4de78 <__alt_data_end+0xfffe79b8>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   4de90:	01800174 	movhi	r6,5
   4de94:	01c00174 	movhi	r7,5
   4de98:	31bbe704 	addi	r6,r6,-4196
   4de9c:	39fbe704 	addi	r7,r7,-4196
   4dea0:	31c01026 	beq	r6,r7,4dee4 <alt_load+0x104>
  {
    while( to != end )
   4dea4:	00800174 	movhi	r2,5
   4dea8:	10bd3704 	addi	r2,r2,-2852
   4deac:	30800d26 	beq	r6,r2,4dee4 <alt_load+0x104>
   4deb0:	30c00104 	addi	r3,r6,4
   4deb4:	10c7c83a 	sub	r3,r2,r3
   4deb8:	1806d0ba 	srli	r3,r3,2
   4debc:	0005883a 	mov	r2,zero
   4dec0:	18c00044 	addi	r3,r3,1
   4dec4:	18c7883a 	add	r3,r3,r3
   4dec8:	18c7883a 	add	r3,r3,r3
   4decc:	11c9883a 	add	r4,r2,r7
    {
      *to++ = *from++;
   4ded0:	21400017 	ldw	r5,0(r4)
   4ded4:	1189883a 	add	r4,r2,r6
   4ded8:	10800104 	addi	r2,r2,4
   4dedc:	21400015 	stw	r5,0(r4)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4dee0:	10fffa1e 	bne	r2,r3,4decc <__alt_data_end+0xfffe7a0c>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   4dee4:	004db540 	call	4db54 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   4dee8:	dfc00017 	ldw	ra,0(sp)
   4deec:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   4def0:	004e7641 	jmpi	4e764 <alt_icache_flush_all>

0004def4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4def4:	defffe04 	addi	sp,sp,-8
   4def8:	dfc00115 	stw	ra,4(sp)
   4defc:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4df00:	20000d16 	blt	r4,zero,4df38 <lseek+0x44>
   4df04:	21000324 	muli	r4,r4,12
   4df08:	00800174 	movhi	r2,5
   4df0c:	10bf6004 	addi	r2,r2,-640
   4df10:	2089883a 	add	r4,r4,r2
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4df14:	20800017 	ldw	r2,0(r4)
   4df18:	10800717 	ldw	r2,28(r2)
   4df1c:	10000f26 	beq	r2,zero,4df5c <lseek+0x68>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4df20:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   4df24:	10001216 	blt	r2,zero,4df70 <lseek+0x7c>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   4df28:	dfc00117 	ldw	ra,4(sp)
   4df2c:	dc000017 	ldw	r16,0(sp)
   4df30:	dec00204 	addi	sp,sp,8
   4df34:	f800283a 	ret
   4df38:	04001444 	movi	r16,81
   4df3c:	00800174 	movhi	r2,5
   4df40:	10bfe004 	addi	r2,r2,-128
   4df44:	10800017 	ldw	r2,0(r2)
   4df48:	10000626 	beq	r2,zero,4df64 <lseek+0x70>
   4df4c:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   4df50:	14000015 	stw	r16,0(r2)
    rc = -1;
   4df54:	00bfffc4 	movi	r2,-1
   4df58:	003ff306 	br	4df28 <__alt_data_end+0xfffe7a68>
   4df5c:	04002184 	movi	r16,134
   4df60:	003ff606 	br	4df3c <__alt_data_end+0xfffe7a7c>
   4df64:	00800174 	movhi	r2,5
   4df68:	10829a04 	addi	r2,r2,2664
   4df6c:	003ff806 	br	4df50 <__alt_data_end+0xfffe7a90>
   4df70:	00a1c83a 	sub	r16,zero,r2
   4df74:	003ff106 	br	4df3c <__alt_data_end+0xfffe7a7c>

0004df78 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4df78:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4df7c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   4df80:	dfc00115 	stw	ra,4(sp)
   4df84:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   4df88:	004e4cc0 	call	4e4cc <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   4df8c:	004e4ec0 	call	4e4ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   4df90:	01000174 	movhi	r4,5
   4df94:	213d3304 	addi	r4,r4,-2868
   4df98:	200b883a 	mov	r5,r4
   4df9c:	200d883a 	mov	r6,r4
   4dfa0:	004e8e40 	call	4e8e4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4dfa4:	d122cc17 	ldw	r4,-29904(gp)
   4dfa8:	d162cb17 	ldw	r5,-29908(gp)
   4dfac:	d1a2ca17 	ldw	r6,-29912(gp)
   4dfb0:	0040c2c0 	call	40c2c <main>
  close(STDOUT_FILENO);
   4dfb4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   4dfb8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   4dfbc:	004da840 	call	4da84 <close>
  exit (result);
   4dfc0:	8009883a 	mov	r4,r16
   4dfc4:	004ed400 	call	4ed40 <exit>

0004dfc8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4dfc8:	f800283a 	ret

0004dfcc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4dfcc:	f800283a 	ret

0004dfd0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   4dfd0:	defff304 	addi	sp,sp,-52
   4dfd4:	dfc00915 	stw	ra,36(sp)
   4dfd8:	df000815 	stw	fp,32(sp)
   4dfdc:	ddc00715 	stw	r23,28(sp)
   4dfe0:	dd800615 	stw	r22,24(sp)
   4dfe4:	dd400515 	stw	r21,20(sp)
   4dfe8:	dd000415 	stw	r20,16(sp)
   4dfec:	dcc00315 	stw	r19,12(sp)
   4dff0:	dc800215 	stw	r18,8(sp)
   4dff4:	dc400115 	stw	r17,4(sp)
   4dff8:	dc000015 	stw	r16,0(sp)
   4dffc:	d9400a15 	stw	r5,40(sp)
   4e000:	d9800b15 	stw	r6,44(sp)
   4e004:	d9c00c15 	stw	r7,48(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   4e008:	04400944 	movi	r17,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   4e00c:	2021883a 	mov	r16,r4
	va_list args;
	va_start(args, fmt);
   4e010:	dd000a04 	addi	r20,sp,40
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   4e014:	054018c4 	movi	r21,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   4e018:	05801e04 	movi	r22,120
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4e01c:	048003c4 	movi	r18,15
                        if (digit <= 9)
   4e020:	04c00244 	movi	r19,9
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4e024:	81000007 	ldb	r4,0(r16)
   4e028:	20000526 	beq	r4,zero,4e040 <alt_printf+0x70>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   4e02c:	24401026 	beq	r4,r17,4e070 <alt_printf+0xa0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4e030:	84000044 	addi	r16,r16,1
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
        {
            alt_putchar(c);
   4e034:	004e14c0 	call	4e14c <alt_putchar>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   4e038:	81000007 	ldb	r4,0(r16)
   4e03c:	203ffb1e 	bne	r4,zero,4e02c <__alt_data_end+0xfffe7b6c>
            {
                break;
            }
        }
    }
}
   4e040:	dfc00917 	ldw	ra,36(sp)
   4e044:	df000817 	ldw	fp,32(sp)
   4e048:	ddc00717 	ldw	r23,28(sp)
   4e04c:	dd800617 	ldw	r22,24(sp)
   4e050:	dd400517 	ldw	r21,20(sp)
   4e054:	dd000417 	ldw	r20,16(sp)
   4e058:	dcc00317 	ldw	r19,12(sp)
   4e05c:	dc800217 	ldw	r18,8(sp)
   4e060:	dc400117 	ldw	r17,4(sp)
   4e064:	dc000017 	ldw	r16,0(sp)
   4e068:	dec00d04 	addi	sp,sp,52
   4e06c:	f800283a 	ret
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   4e070:	80800047 	ldb	r2,1(r16)
   4e074:	84000084 	addi	r16,r16,2
   4e078:	103ff126 	beq	r2,zero,4e040 <__alt_data_end+0xfffe7b80>
            {
                if (c == '%')
   4e07c:	14402926 	beq	r2,r17,4e124 <alt_printf+0x154>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
   4e080:	15402b26 	beq	r2,r21,4e130 <alt_printf+0x160>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
   4e084:	15800b26 	beq	r2,r22,4e0b4 <alt_printf+0xe4>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   4e088:	00c01cc4 	movi	r3,115
   4e08c:	10ffe51e 	bne	r2,r3,4e024 <__alt_data_end+0xfffe7b64>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   4e090:	a7000017 	ldw	fp,0(r20)
   4e094:	a5000104 	addi	r20,r20,4

                    while(*s)
   4e098:	e1000007 	ldb	r4,0(fp)
   4e09c:	203fe126 	beq	r4,zero,4e024 <__alt_data_end+0xfffe7b64>
                      alt_putchar(*s++);
   4e0a0:	e7000044 	addi	fp,fp,1
   4e0a4:	004e14c0 	call	4e14c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   4e0a8:	e1000007 	ldb	r4,0(fp)
   4e0ac:	203ffc1e 	bne	r4,zero,4e0a0 <__alt_data_end+0xfffe7be0>
   4e0b0:	003fdc06 	br	4e024 <__alt_data_end+0xfffe7b64>
                    alt_putchar(v);
                }
                else if (c == 'x')
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   4e0b4:	a5c00017 	ldw	r23,0(r20)
   4e0b8:	a5000104 	addi	r20,r20,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   4e0bc:	b8002026 	beq	r23,zero,4e140 <alt_printf+0x170>
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   4e0c0:	b8bc002c 	andhi	r2,r23,61440
   4e0c4:	07000704 	movi	fp,28
   4e0c8:	1000101e 	bne	r2,zero,4e10c <alt_printf+0x13c>
                        digit_shift -= 4;
   4e0cc:	e73fff04 	addi	fp,fp,-4
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   4e0d0:	9704983a 	sll	r2,r18,fp
   4e0d4:	15c4703a 	and	r2,r2,r23
   4e0d8:	103ffc26 	beq	r2,zero,4e0cc <__alt_data_end+0xfffe7c0c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4e0dc:	e03fd116 	blt	fp,zero,4e024 <__alt_data_end+0xfffe7b64>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4e0e0:	9704983a 	sll	r2,r18,fp
   4e0e4:	15c4703a 	and	r2,r2,r23
   4e0e8:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
   4e0ec:	98800b36 	bltu	r19,r2,4e11c <alt_printf+0x14c>
                            c = '0' + digit;
   4e0f0:	11000c04 	addi	r4,r2,48
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
   4e0f4:	21003fcc 	andi	r4,r4,255
   4e0f8:	2100201c 	xori	r4,r4,128
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4e0fc:	e73fff04 	addi	fp,fp,-4
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
                        if (digit <= 9)
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
   4e100:	213fe004 	addi	r4,r4,-128
   4e104:	004e14c0 	call	4e14c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   4e108:	e03fc616 	blt	fp,zero,4e024 <__alt_data_end+0xfffe7b64>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   4e10c:	9704983a 	sll	r2,r18,fp
   4e110:	15c4703a 	and	r2,r2,r23
   4e114:	1704d83a 	srl	r2,r2,fp
                        if (digit <= 9)
   4e118:	98bff52e 	bgeu	r19,r2,4e0f0 <__alt_data_end+0xfffe7c30>
                            c = '0' + digit;
                        else
                            c = 'a' + digit - 10;
   4e11c:	110015c4 	addi	r4,r2,87
   4e120:	003ff406 	br	4e0f4 <__alt_data_end+0xfffe7c34>
            if ((c = *w++) != 0)
            {
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   4e124:	8809883a 	mov	r4,r17
   4e128:	004e14c0 	call	4e14c <alt_putchar>
   4e12c:	003fbd06 	br	4e024 <__alt_data_end+0xfffe7b64>
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
   4e130:	a1000017 	ldw	r4,0(r20)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
   4e134:	a5000104 	addi	r20,r20,4
                    alt_putchar(v);
   4e138:	004e14c0 	call	4e14c <alt_putchar>
   4e13c:	003fb906 	br	4e024 <__alt_data_end+0xfffe7b64>
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
                    {
                        alt_putchar('0');
   4e140:	01000c04 	movi	r4,48
   4e144:	004e14c0 	call	4e14c <alt_putchar>
                        continue;
   4e148:	003fb606 	br	4e024 <__alt_data_end+0xfffe7b64>

0004e14c <alt_putchar>:
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   4e14c:	00800174 	movhi	r2,5
   4e150:	10bfd604 	addi	r2,r2,-168
   4e154:	10800017 	ldw	r2,0(r2)
   4e158:	11400217 	ldw	r5,8(r2)
   4e15c:	00481f81 	jmpi	481f8 <putc>

0004e160 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4e160:	defffe04 	addi	sp,sp,-8
   4e164:	dfc00115 	stw	ra,4(sp)
   4e168:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e16c:	20001216 	blt	r4,zero,4e1b8 <read+0x58>
   4e170:	21000324 	muli	r4,r4,12
   4e174:	00800174 	movhi	r2,5
   4e178:	10bf6004 	addi	r2,r2,-640
   4e17c:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e180:	20800217 	ldw	r2,8(r4)
   4e184:	00c00044 	movi	r3,1
   4e188:	108000cc 	andi	r2,r2,3
   4e18c:	10c01626 	beq	r2,r3,4e1e8 <read+0x88>
        (fd->dev->read))
   4e190:	20800017 	ldw	r2,0(r4)
   4e194:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4e198:	10001326 	beq	r2,zero,4e1e8 <read+0x88>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4e19c:	103ee83a 	callr	r2
   4e1a0:	1021883a 	mov	r16,r2
   4e1a4:	80001916 	blt	r16,zero,4e20c <read+0xac>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   4e1a8:	dfc00117 	ldw	ra,4(sp)
   4e1ac:	dc000017 	ldw	r16,0(sp)
   4e1b0:	dec00204 	addi	sp,sp,8
   4e1b4:	f800283a 	ret
   4e1b8:	00800174 	movhi	r2,5
   4e1bc:	10bfe004 	addi	r2,r2,-128
   4e1c0:	10800017 	ldw	r2,0(r2)
   4e1c4:	10000226 	beq	r2,zero,4e1d0 <read+0x70>
   4e1c8:	103ee83a 	callr	r2
   4e1cc:	00000206 	br	4e1d8 <read+0x78>
   4e1d0:	00800174 	movhi	r2,5
   4e1d4:	10829a04 	addi	r2,r2,2664
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4e1d8:	00c01444 	movi	r3,81
   4e1dc:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4e1e0:	00bfffc4 	movi	r2,-1
   4e1e4:	003ff006 	br	4e1a8 <__alt_data_end+0xfffe7ce8>
   4e1e8:	00800174 	movhi	r2,5
   4e1ec:	10bfe004 	addi	r2,r2,-128
   4e1f0:	10800017 	ldw	r2,0(r2)
   4e1f4:	10000e26 	beq	r2,zero,4e230 <read+0xd0>
   4e1f8:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   4e1fc:	00c00344 	movi	r3,13
   4e200:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   4e204:	00bfffc4 	movi	r2,-1
   4e208:	003fe706 	br	4e1a8 <__alt_data_end+0xfffe7ce8>
   4e20c:	00800174 	movhi	r2,5
   4e210:	10bfe004 	addi	r2,r2,-128
   4e214:	10800017 	ldw	r2,0(r2)
   4e218:	10000826 	beq	r2,zero,4e23c <read+0xdc>
   4e21c:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
   4e220:	0421c83a 	sub	r16,zero,r16
   4e224:	14000015 	stw	r16,0(r2)
          return -1;
   4e228:	00bfffc4 	movi	r2,-1
   4e22c:	003fde06 	br	4e1a8 <__alt_data_end+0xfffe7ce8>
   4e230:	00800174 	movhi	r2,5
   4e234:	10829a04 	addi	r2,r2,2664
   4e238:	003ff006 	br	4e1fc <__alt_data_end+0xfffe7d3c>
   4e23c:	00800174 	movhi	r2,5
   4e240:	10829a04 	addi	r2,r2,2664
   4e244:	003ff606 	br	4e220 <__alt_data_end+0xfffe7d60>

0004e248 <alt_release_fd>:
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  if (fd > 2)
   4e248:	00800084 	movi	r2,2
   4e24c:	1100060e 	bge	r2,r4,4e268 <alt_release_fd+0x20>
  {
    alt_fd_list[fd].fd_flags = 0;
   4e250:	21000324 	muli	r4,r4,12
   4e254:	00800174 	movhi	r2,5
   4e258:	10bf6004 	addi	r2,r2,-640
   4e25c:	1109883a 	add	r4,r2,r4
   4e260:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
   4e264:	20000015 	stw	zero,0(r4)
   4e268:	f800283a 	ret

0004e26c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e26c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e270:	00bfff84 	movi	r2,-2
   4e274:	2884703a 	and	r2,r5,r2
   4e278:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4e27c:	d0a00c17 	ldw	r2,-32720(gp)
   4e280:	00ffff04 	movi	r3,-4
   4e284:	108000c4 	addi	r2,r2,3
   4e288:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4e28c:	00c001b4 	movhi	r3,6
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4e290:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4e294:	1109883a 	add	r4,r2,r4
   4e298:	18d93004 	addi	r3,r3,25792
   4e29c:	19000336 	bltu	r3,r4,4e2ac <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   4e2a0:	d1200c15 	stw	r4,-32720(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e2a4:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   4e2a8:	f800283a 	ret
   4e2ac:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4e2b0:	00bfffc4 	movi	r2,-1
   4e2b4:	f800283a 	ret

0004e2b8 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e2b8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e2bc:	00bfff84 	movi	r2,-2
   4e2c0:	1884703a 	and	r2,r3,r2
   4e2c4:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4e2c8:	21400117 	ldw	r5,4(r4)
   4e2cc:	20800017 	ldw	r2,0(r4)
   4e2d0:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
   4e2d4:	21400117 	ldw	r5,4(r4)
   4e2d8:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4e2dc:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   4e2e0:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e2e4:	1801703a 	wrctl	status,r3
   4e2e8:	f800283a 	ret

0004e2ec <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4e2ec:	d0a2cd17 	ldw	r2,-29900(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4e2f0:	defffa04 	addi	sp,sp,-24
   4e2f4:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4e2f8:	d4200d17 	ldw	r16,-32716(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4e2fc:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4e300:	dc800215 	stw	r18,8(sp)
   4e304:	dfc00515 	stw	ra,20(sp)
   4e308:	dd000415 	stw	r20,16(sp)
   4e30c:	dcc00315 	stw	r19,12(sp)
   4e310:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4e314:	d4a00d04 	addi	r18,gp,-32716

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   4e318:	d0a2cd15 	stw	r2,-29900(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e31c:	84801726 	beq	r16,r18,4e37c <alt_tick+0x90>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   4e320:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e324:	053fff84 	movi	r20,-2
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4e328:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   4e32c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   4e330:	10000326 	beq	r2,zero,4e340 <alt_tick+0x54>
   4e334:	d0a2cd17 	ldw	r2,-29900(gp)
   4e338:	1000181e 	bne	r2,zero,4e39c <alt_tick+0xb0>
    {
      alarm->rollover = 0;
   4e33c:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4e340:	d0e2cd17 	ldw	r3,-29900(gp)
   4e344:	80800217 	ldw	r2,8(r16)
   4e348:	18800a36 	bltu	r3,r2,4e374 <alt_tick+0x88>
    {
      next_callback = alarm->callback (alarm->context);
   4e34c:	80800317 	ldw	r2,12(r16)
   4e350:	81000517 	ldw	r4,20(r16)
   4e354:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   4e358:	10001426 	beq	r2,zero,4e3ac <alt_tick+0xc0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   4e35c:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4e360:	d122cd17 	ldw	r4,-29900(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   4e364:	10c5883a 	add	r2,r2,r3
   4e368:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   4e36c:	1100012e 	bgeu	r2,r4,4e374 <alt_tick+0x88>
        {
          alarm->rollover = 1;
   4e370:	84c00405 	stb	r19,16(r16)
   4e374:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e378:	8cbfeb1e 	bne	r17,r18,4e328 <__alt_data_end+0xfffe7e68>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   4e37c:	dfc00517 	ldw	ra,20(sp)
   4e380:	dd000417 	ldw	r20,16(sp)
   4e384:	dcc00317 	ldw	r19,12(sp)
   4e388:	dc800217 	ldw	r18,8(sp)
   4e38c:	dc400117 	ldw	r17,4(sp)
   4e390:	dc000017 	ldw	r16,0(sp)
   4e394:	dec00604 	addi	sp,sp,24
   4e398:	f800283a 	ret
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   4e39c:	d0a2cd17 	ldw	r2,-29900(gp)
   4e3a0:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4e3a4:	8cbfe01e 	bne	r17,r18,4e328 <__alt_data_end+0xfffe7e68>
   4e3a8:	003ff406 	br	4e37c <__alt_data_end+0xfffe7ebc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e3ac:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e3b0:	1506703a 	and	r3,r2,r20
   4e3b4:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   4e3b8:	81000117 	ldw	r4,4(r16)
   4e3bc:	80c00017 	ldw	r3,0(r16)
   4e3c0:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
   4e3c4:	81000117 	ldw	r4,4(r16)
   4e3c8:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   4e3cc:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
   4e3d0:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e3d4:	1001703a 	wrctl	status,r2
   4e3d8:	8821883a 	mov	r16,r17
   4e3dc:	8cbfd21e 	bne	r17,r18,4e328 <__alt_data_end+0xfffe7e68>
   4e3e0:	003fe606 	br	4e37c <__alt_data_end+0xfffe7ebc>

0004e3e4 <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   4e3e4:	004e6741 	jmpi	4e674 <alt_busy_sleep>

0004e3e8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4e3e8:	defffe04 	addi	sp,sp,-8
   4e3ec:	dfc00115 	stw	ra,4(sp)
   4e3f0:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4e3f4:	20001116 	blt	r4,zero,4e43c <write+0x54>
   4e3f8:	21000324 	muli	r4,r4,12
   4e3fc:	00800174 	movhi	r2,5
   4e400:	10bf6004 	addi	r2,r2,-640
   4e404:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4e408:	20800217 	ldw	r2,8(r4)
   4e40c:	108000cc 	andi	r2,r2,3
   4e410:	10001626 	beq	r2,zero,4e46c <write+0x84>
   4e414:	20800017 	ldw	r2,0(r4)
   4e418:	10800617 	ldw	r2,24(r2)
   4e41c:	10001326 	beq	r2,zero,4e46c <write+0x84>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4e420:	103ee83a 	callr	r2
   4e424:	1021883a 	mov	r16,r2
   4e428:	80001c16 	blt	r16,zero,4e49c <write+0xb4>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   4e42c:	dfc00117 	ldw	ra,4(sp)
   4e430:	dc000017 	ldw	r16,0(sp)
   4e434:	dec00204 	addi	sp,sp,8
   4e438:	f800283a 	ret
   4e43c:	00800174 	movhi	r2,5
   4e440:	10bfe004 	addi	r2,r2,-128
   4e444:	10800017 	ldw	r2,0(r2)
   4e448:	10000226 	beq	r2,zero,4e454 <write+0x6c>
   4e44c:	103ee83a 	callr	r2
   4e450:	00000206 	br	4e45c <write+0x74>
   4e454:	00800174 	movhi	r2,5
   4e458:	10829a04 	addi	r2,r2,2664
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4e45c:	00c01444 	movi	r3,81
   4e460:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   4e464:	00bfffc4 	movi	r2,-1
   4e468:	003ff006 	br	4e42c <__alt_data_end+0xfffe7f6c>
   4e46c:	00800174 	movhi	r2,5
   4e470:	10bfe004 	addi	r2,r2,-128
   4e474:	10800017 	ldw	r2,0(r2)
   4e478:	10000526 	beq	r2,zero,4e490 <write+0xa8>
   4e47c:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   4e480:	00c00344 	movi	r3,13
   4e484:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   4e488:	00bfffc4 	movi	r2,-1
   4e48c:	003fe706 	br	4e42c <__alt_data_end+0xfffe7f6c>
   4e490:	00800174 	movhi	r2,5
   4e494:	10829a04 	addi	r2,r2,2664
   4e498:	003ff906 	br	4e480 <__alt_data_end+0xfffe7fc0>
   4e49c:	00800174 	movhi	r2,5
   4e4a0:	10bfe004 	addi	r2,r2,-128
   4e4a4:	10800017 	ldw	r2,0(r2)
   4e4a8:	10000526 	beq	r2,zero,4e4c0 <write+0xd8>
   4e4ac:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
   4e4b0:	0421c83a 	sub	r16,zero,r16
   4e4b4:	14000015 	stw	r16,0(r2)
        return -1;
   4e4b8:	00bfffc4 	movi	r2,-1
   4e4bc:	003fdb06 	br	4e42c <__alt_data_end+0xfffe7f6c>
   4e4c0:	00800174 	movhi	r2,5
   4e4c4:	10829a04 	addi	r2,r2,2664
   4e4c8:	003ff906 	br	4e4b0 <__alt_data_end+0xfffe7ff0>

0004e4cc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   4e4cc:	deffff04 	addi	sp,sp,-4
   4e4d0:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
   4e4d4:	004eafc0 	call	4eafc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   4e4d8:	00800044 	movi	r2,1
   4e4dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   4e4e0:	dfc00017 	ldw	ra,0(sp)
   4e4e4:	dec00104 	addi	sp,sp,4
   4e4e8:	f800283a 	ret

0004e4ec <alt_sys_init>:
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_QSYS, timer_qsys);
   4e4ec:	01000234 	movhi	r4,8
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4e4f0:	deffff04 	addi	sp,sp,-4
    ALTERA_AVALON_TIMER_INIT ( TIMER_QSYS, timer_qsys);
   4e4f4:	21040804 	addi	r4,r4,4128
   4e4f8:	000b883a 	mov	r5,zero
   4e4fc:	000d883a 	mov	r6,zero
   4e500:	01c0fa04 	movi	r7,1000
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   4e504:	dfc00015 	stw	ra,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_QSYS, timer_qsys);
   4e508:	004e6240 	call	4e624 <alt_avalon_timer_sc_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   4e50c:	01000174 	movhi	r4,5
   4e510:	01400174 	movhi	r5,5
   4e514:	213fca04 	addi	r4,r4,-216
   4e518:	297fdc04 	addi	r5,r5,-144
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
   4e51c:	dfc00017 	ldw	ra,0(sp)
   4e520:	dec00104 	addi	sp,sp,4
   4e524:	004e6ec1 	jmpi	4e6ec <alt_dev_llist_insert>

0004e528 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   4e528:	20800017 	ldw	r2,0(r4)
   4e52c:	21c00217 	ldw	r7,8(r4)
   4e530:	11000a04 	addi	r4,r2,40
   4e534:	004e5481 	jmpi	4e548 <altera_avalon_jtag_uart_read>

0004e538 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   4e538:	20800017 	ldw	r2,0(r4)
   4e53c:	21c00217 	ldw	r7,8(r4)
   4e540:	11000a04 	addi	r4,r2,40
   4e544:	004e5b41 	jmpi	4e5b4 <altera_avalon_jtag_uart_write>

0004e548 <altera_avalon_jtag_uart_read>:
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;
   4e548:	298d883a 	add	r6,r5,r6

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
   4e54c:	22400017 	ldw	r9,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4e550:	2980142e 	bgeu	r5,r6,4e5a4 <altera_avalon_jtag_uart_read+0x5c>
   4e554:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
   4e558:	3a90000c 	andi	r10,r7,16384
   4e55c:	00000306 	br	4e56c <altera_avalon_jtag_uart_read+0x24>
  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4e560:	11000005 	stb	r4,0(r2)
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   4e564:	1980092e 	bgeu	r3,r6,4e58c <altera_avalon_jtag_uart_read+0x44>
   4e568:	1805883a 	mov	r2,r3
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   4e56c:	49000037 	ldwio	r4,0(r9)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   4e570:	2220000c 	andi	r8,r4,32768
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4e574:	10c00044 	addi	r3,r2,1

  while (ptr < end)
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   4e578:	403ff91e 	bne	r8,zero,4e560 <__alt_data_end+0xfffe80a0>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
   4e57c:	1140051e 	bne	r2,r5,4e594 <altera_avalon_jtag_uart_read+0x4c>
      break;
    else if(flags & O_NONBLOCK)
   4e580:	5000061e 	bne	r10,zero,4e59c <altera_avalon_jtag_uart_read+0x54>
   4e584:	2807883a 	mov	r3,r5
   4e588:	003ff706 	br	4e568 <__alt_data_end+0xfffe80a8>
   4e58c:	1805883a 	mov	r2,r3
      break;   
    
  }

  if (ptr != buffer)
   4e590:	28c00426 	beq	r5,r3,4e5a4 <altera_avalon_jtag_uart_read+0x5c>
    return ptr - buffer;
   4e594:	1145c83a 	sub	r2,r2,r5
   4e598:	f800283a 	ret
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
   4e59c:	00bffd44 	movi	r2,-11
   4e5a0:	f800283a 	ret
    
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   4e5a4:	39d0000c 	andi	r7,r7,16384
   4e5a8:	383ffc1e 	bne	r7,zero,4e59c <__alt_data_end+0xfffe80dc>
    return -EWOULDBLOCK;
  else
    return -EIO;
   4e5ac:	00bffec4 	movi	r2,-5
}
   4e5b0:	f800283a 	ret

0004e5b4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   4e5b4:	21c00017 	ldw	r7,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4e5b8:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
   4e5bc:	298d883a 	add	r6,r5,r6
   4e5c0:	39000104 	addi	r4,r7,4

  while (ptr < end)
   4e5c4:	2980072e 	bgeu	r5,r6,4e5e4 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   4e5c8:	20c00037 	ldwio	r3,0(r4)
   4e5cc:	18ffffec 	andhi	r3,r3,65535
   4e5d0:	183ffd26 	beq	r3,zero,4e5c8 <__alt_data_end+0xfffe8108>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   4e5d4:	28c00007 	ldb	r3,0(r5)
   4e5d8:	38c00035 	stwio	r3,0(r7)
   4e5dc:	29400044 	addi	r5,r5,1
   4e5e0:	003ff806 	br	4e5c4 <__alt_data_end+0xfffe8104>

  return count;
}
   4e5e4:	f800283a 	ret

0004e5e8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   4e5e8:	defffe04 	addi	sp,sp,-8
   4e5ec:	dfc00115 	stw	ra,4(sp)
   4e5f0:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   4e5f4:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   4e5f8:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e5fc:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e600:	00bfff84 	movi	r2,-2
   4e604:	8084703a 	and	r2,r16,r2
   4e608:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   4e60c:	004e2ec0 	call	4e2ec <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e610:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   4e614:	dfc00117 	ldw	ra,4(sp)
   4e618:	dc000017 	ldw	r16,0(sp)
   4e61c:	dec00204 	addi	sp,sp,8
   4e620:	f800283a 	ret

0004e624 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   4e624:	00c00174 	movhi	r3,5
   4e628:	18c2a304 	addi	r3,r3,2700
   4e62c:	1a000017 	ldw	r8,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   4e630:	defffe04 	addi	sp,sp,-8
   4e634:	dfc00115 	stw	ra,4(sp)
   4e638:	2005883a 	mov	r2,r4
   4e63c:	2809883a 	mov	r4,r5
   4e640:	300b883a 	mov	r5,r6
   4e644:	4000011e 	bne	r8,zero,4e64c <alt_avalon_timer_sc_init+0x28>
  {
    _alt_tick_rate = nticks;
   4e648:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   4e64c:	00c001c4 	movi	r3,7
   4e650:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   4e654:	01800174 	movhi	r6,5
   4e658:	31b97a04 	addi	r6,r6,-6680
   4e65c:	d8000015 	stw	zero,0(sp)
   4e660:	100f883a 	mov	r7,r2
   4e664:	004e7700 	call	4e770 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   4e668:	dfc00117 	ldw	ra,4(sp)
   4e66c:	dec00204 	addi	sp,sp,8
   4e670:	f800283a 	ret

0004e674 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4e674:	0140f874 	movhi	r5,993
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4e678:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4e67c:	297e0f84 	addi	r5,r5,-1986
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   4e680:	dc000015 	stw	r16,0(sp)
   4e684:	dfc00115 	stw	ra,4(sp)
   4e688:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   4e68c:	00415dc0 	call	415dc <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4e690:	10001226 	beq	r2,zero,4e6dc <alt_busy_sleep+0x68>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4e694:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4e698:	013f07f4 	movhi	r4,64543
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4e69c:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4e6a0:	2101f084 	addi	r4,r4,1986
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   4e6a4:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   4e6a8:	297fffc4 	addi	r5,r5,-1
   4e6ac:	283ffe1e 	bne	r5,zero,4e6a8 <__alt_data_end+0xfffe81e8>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4e6b0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   4e6b4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   4e6b8:	18bffb16 	blt	r3,r2,4e6a8 <__alt_data_end+0xfffe81e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4e6bc:	84000864 	muli	r16,r16,33
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4e6c0:	843fffc4 	addi	r16,r16,-1
   4e6c4:	803ffe1e 	bne	r16,zero,4e6c0 <__alt_data_end+0xfffe8200>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   4e6c8:	0005883a 	mov	r2,zero
   4e6cc:	dfc00117 	ldw	ra,4(sp)
   4e6d0:	dc000017 	ldw	r16,0(sp)
   4e6d4:	dec00204 	addi	sp,sp,8
   4e6d8:	f800283a 	ret
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   4e6dc:	84000864 	muli	r16,r16,33
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   4e6e0:	843fffc4 	addi	r16,r16,-1
   4e6e4:	043ffe16 	blt	zero,r16,4e6e0 <__alt_data_end+0xfffe8220>
   4e6e8:	003ff706 	br	4e6c8 <__alt_data_end+0xfffe8208>

0004e6ec <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   4e6ec:	20000a26 	beq	r4,zero,4e718 <alt_dev_llist_insert+0x2c>
   4e6f0:	20800217 	ldw	r2,8(r4)
   4e6f4:	10000826 	beq	r2,zero,4e718 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   4e6f8:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   4e6fc:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   4e700:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   4e704:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   4e708:	28c00017 	ldw	r3,0(r5)
   4e70c:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   4e710:	29000015 	stw	r4,0(r5)
   4e714:	f800283a 	ret
   4e718:	00800174 	movhi	r2,5
   4e71c:	10bfe004 	addi	r2,r2,-128
   4e720:	10800017 	ldw	r2,0(r2)
   4e724:	10000926 	beq	r2,zero,4e74c <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   4e728:	deffff04 	addi	sp,sp,-4
   4e72c:	dfc00015 	stw	ra,0(sp)
   4e730:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   4e734:	00c00584 	movi	r3,22
   4e738:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4e73c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   4e740:	dfc00017 	ldw	ra,0(sp)
   4e744:	dec00104 	addi	sp,sp,4
   4e748:	f800283a 	ret
   4e74c:	00800174 	movhi	r2,5
   4e750:	10829a04 	addi	r2,r2,2664
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   4e754:	00c00584 	movi	r3,22
   4e758:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   4e75c:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   4e760:	f800283a 	ret

0004e764 <alt_icache_flush_all>:
 */

void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   4e764:	0009883a 	mov	r4,zero
   4e768:	01440004 	movi	r5,4096
   4e76c:	004ec7c1 	jmpi	4ec7c <alt_icache_flush>

0004e770 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   4e770:	004e80c1 	jmpi	4e80c <alt_iic_isr_register>

0004e774 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e774:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e778:	00bfff84 	movi	r2,-2
   4e77c:	2084703a 	and	r2,r4,r2
   4e780:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   4e784:	00800174 	movhi	r2,5
   4e788:	1082a404 	addi	r2,r2,2704
   4e78c:	00c00044 	movi	r3,1
   4e790:	194a983a 	sll	r5,r3,r5
   4e794:	10c00017 	ldw	r3,0(r2)
   4e798:	28cab03a 	or	r5,r5,r3
   4e79c:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e7a0:	10800017 	ldw	r2,0(r2)
   4e7a4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e7a8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   4e7ac:	0005883a 	mov	r2,zero
   4e7b0:	f800283a 	ret

0004e7b4 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e7b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e7b8:	00bfff84 	movi	r2,-2
   4e7bc:	2084703a 	and	r2,r4,r2
   4e7c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   4e7c4:	00800174 	movhi	r2,5
   4e7c8:	1082a404 	addi	r2,r2,2704
   4e7cc:	00ffff84 	movi	r3,-2
   4e7d0:	194a183a 	rol	r5,r3,r5
   4e7d4:	10c00017 	ldw	r3,0(r2)
   4e7d8:	28ca703a 	and	r5,r5,r3
   4e7dc:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4e7e0:	10800017 	ldw	r2,0(r2)
   4e7e4:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e7e8:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   4e7ec:	0005883a 	mov	r2,zero
   4e7f0:	f800283a 	ret

0004e7f4 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   4e7f4:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   4e7f8:	00c00044 	movi	r3,1
   4e7fc:	194a983a 	sll	r5,r3,r5
   4e800:	1144703a 	and	r2,r2,r5
}
   4e804:	1004c03a 	cmpne	r2,r2,zero
   4e808:	f800283a 	ret

0004e80c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   4e80c:	00c007c4 	movi	r3,31
   4e810:	19401616 	blt	r3,r5,4e86c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   4e814:	defffe04 	addi	sp,sp,-8
   4e818:	dfc00115 	stw	ra,4(sp)
   4e81c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4e820:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4e824:	00ffff84 	movi	r3,-2
   4e828:	80c6703a 	and	r3,r16,r3
   4e82c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   4e830:	280490fa 	slli	r2,r5,3
   4e834:	00c00174 	movhi	r3,5
   4e838:	18c2b604 	addi	r3,r3,2776
   4e83c:	1885883a 	add	r2,r3,r2
   4e840:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   4e844:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e848:	30000626 	beq	r6,zero,4e864 <alt_iic_isr_register+0x58>
   4e84c:	004e7740 	call	4e774 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4e850:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   4e854:	dfc00117 	ldw	ra,4(sp)
   4e858:	dc000017 	ldw	r16,0(sp)
   4e85c:	dec00204 	addi	sp,sp,8
   4e860:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   4e864:	004e7b40 	call	4e7b4 <alt_ic_irq_disable>
   4e868:	003ff906 	br	4e850 <__alt_data_end+0xfffe8390>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   4e86c:	00bffa84 	movi	r2,-22
   4e870:	f800283a 	ret

0004e874 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   4e874:	defffe04 	addi	sp,sp,-8
   4e878:	dc000015 	stw	r16,0(sp)
   4e87c:	2021883a 	mov	r16,r4
{
  int old;

  old = open (name, flags, mode);
   4e880:	2809883a 	mov	r4,r5
   4e884:	300b883a 	mov	r5,r6
   4e888:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   4e88c:	dfc00115 	stw	ra,4(sp)
{
  int old;

  old = open (name, flags, mode);
   4e890:	004e95c0 	call	4e95c <open>

  if (old >= 0)
   4e894:	10000f16 	blt	r2,zero,4e8d4 <alt_open_fd.constprop.0+0x60>
  {
    fd->dev      = alt_fd_list[old].dev;
   4e898:	10c00324 	muli	r3,r2,12
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   4e89c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   4e8a0:	00800174 	movhi	r2,5
   4e8a4:	10bf6004 	addi	r2,r2,-640
   4e8a8:	10c5883a 	add	r2,r2,r3
   4e8ac:	11400017 	ldw	r5,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   4e8b0:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4e8b4:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   4e8b8:	81400015 	stw	r5,0(r16)
    fd->priv     = alt_fd_list[old].priv;
   4e8bc:	80c00115 	stw	r3,4(r16)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   4e8c0:	80800215 	stw	r2,8(r16)

    alt_release_fd (old);
  }
} 
   4e8c4:	dfc00117 	ldw	ra,4(sp)
   4e8c8:	dc000017 	ldw	r16,0(sp)
   4e8cc:	dec00204 	addi	sp,sp,8
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   4e8d0:	004e2481 	jmpi	4e248 <alt_release_fd>
  }
} 
   4e8d4:	dfc00117 	ldw	ra,4(sp)
   4e8d8:	dc000017 	ldw	r16,0(sp)
   4e8dc:	dec00204 	addi	sp,sp,8
   4e8e0:	f800283a 	ret

0004e8e4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e8e4:	defffb04 	addi	sp,sp,-20
   4e8e8:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e8ec:	04000174 	movhi	r16,5
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e8f0:	2005883a 	mov	r2,r4
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e8f4:	843f6304 	addi	r16,r16,-628
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e8f8:	dc400115 	stw	r17,4(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e8fc:	04400044 	movi	r17,1
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e900:	dcc00315 	stw	r19,12(sp)
   4e904:	dc800215 	stw	r18,8(sp)
   4e908:	2827883a 	mov	r19,r5
   4e90c:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e910:	100b883a 	mov	r5,r2
   4e914:	8009883a 	mov	r4,r16
   4e918:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4e91c:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   4e920:	004e8740 	call	4e874 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   4e924:	813ffd04 	addi	r4,r16,-12
   4e928:	980b883a 	mov	r5,r19
   4e92c:	000d883a 	mov	r6,zero
   4e930:	004e8740 	call	4e874 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4e934:	81000304 	addi	r4,r16,12
   4e938:	900b883a 	mov	r5,r18
   4e93c:	880d883a 	mov	r6,r17
}  
   4e940:	dfc00417 	ldw	ra,16(sp)
   4e944:	dcc00317 	ldw	r19,12(sp)
   4e948:	dc800217 	ldw	r18,8(sp)
   4e94c:	dc400117 	ldw	r17,4(sp)
   4e950:	dc000017 	ldw	r16,0(sp)
   4e954:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   4e958:	004e8741 	jmpi	4e874 <alt_open_fd.constprop.0>

0004e95c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e95c:	defffa04 	addi	sp,sp,-24
   4e960:	dc800215 	stw	r18,8(sp)
   4e964:	2825883a 	mov	r18,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e968:	01400174 	movhi	r5,5
   4e96c:	297fdc04 	addi	r5,r5,-144
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   4e970:	dcc00315 	stw	r19,12(sp)
   4e974:	dc400115 	stw	r17,4(sp)
   4e978:	dc000015 	stw	r16,0(sp)
   4e97c:	dfc00515 	stw	ra,20(sp)
   4e980:	dd000415 	stw	r20,16(sp)
   4e984:	2023883a 	mov	r17,r4
   4e988:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   4e98c:	004eb040 	call	4eb04 <alt_find_dev>
   4e990:	1021883a 	mov	r16,r2
   4e994:	10003e26 	beq	r2,zero,4ea90 <open+0x134>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   4e998:	1009883a 	mov	r4,r2
   4e99c:	004ec2c0 	call	4ec2c <alt_get_fd>
   4e9a0:	1029883a 	mov	r20,r2
   4e9a4:	10002d16 	blt	r2,zero,4ea5c <open+0x100>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   4e9a8:	a1000324 	muli	r4,r20,12
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e9ac:	00900034 	movhi	r2,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   4e9b0:	00c00174 	movhi	r3,5
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e9b4:	10bfffc4 	addi	r2,r2,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   4e9b8:	18ff6004 	addi	r3,r3,-640
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4e9bc:	9084703a 	and	r2,r18,r2
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   4e9c0:	20c9883a 	add	r4,r4,r3

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   4e9c4:	10900034 	orhi	r2,r2,16384
   4e9c8:	20800215 	stw	r2,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e9cc:	00800174 	movhi	r2,5
   4e9d0:	10bfdb04 	addi	r2,r2,-148
   4e9d4:	11800017 	ldw	r6,0(r2)
   4e9d8:	21400017 	ldw	r5,0(r4)
   4e9dc:	1a400204 	addi	r9,r3,8
   4e9e0:	0011883a 	mov	r8,zero
   4e9e4:	00000606 	br	4ea00 <open+0xa4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4e9e8:	48800017 	ldw	r2,0(r9)
   4e9ec:	1000010e 	bge	r2,zero,4e9f4 <open+0x98>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4e9f0:	20c02e1e 	bne	r4,r3,4eaac <open+0x150>
   4e9f4:	18c00304 	addi	r3,r3,12
   4e9f8:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4e9fc:	32000636 	bltu	r6,r8,4ea18 <open+0xbc>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ea00:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ea04:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   4ea08:	517ff726 	beq	r10,r5,4e9e8 <__alt_data_end+0xfffe8528>
   4ea0c:	18c00304 	addi	r3,r3,12
   4ea10:	4a400304 	addi	r9,r9,12
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   4ea14:	323ffa2e 	bgeu	r6,r8,4ea00 <__alt_data_end+0xfffe8540>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   4ea18:	80800317 	ldw	r2,12(r16)
   4ea1c:	10001a26 	beq	r2,zero,4ea88 <open+0x12c>
   4ea20:	880b883a 	mov	r5,r17
   4ea24:	900d883a 	mov	r6,r18
   4ea28:	980f883a 	mov	r7,r19
   4ea2c:	103ee83a 	callr	r2
   4ea30:	1007883a 	mov	r3,r2
   4ea34:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   4ea38:	18002116 	blt	r3,zero,4eac0 <open+0x164>
  }
  
  /* return the reference upon success */

  return index;
}
   4ea3c:	dfc00517 	ldw	ra,20(sp)
   4ea40:	dd000417 	ldw	r20,16(sp)
   4ea44:	dcc00317 	ldw	r19,12(sp)
   4ea48:	dc800217 	ldw	r18,8(sp)
   4ea4c:	dc400117 	ldw	r17,4(sp)
   4ea50:	dc000017 	ldw	r16,0(sp)
   4ea54:	dec00604 	addi	sp,sp,24
   4ea58:	f800283a 	ret
   4ea5c:	0521c83a 	sub	r16,zero,r20

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   4ea60:	a009883a 	mov	r4,r20
   4ea64:	004e2480 	call	4e248 <alt_release_fd>
   4ea68:	00800174 	movhi	r2,5
   4ea6c:	10bfe004 	addi	r2,r2,-128
   4ea70:	10800017 	ldw	r2,0(r2)
   4ea74:	10000f26 	beq	r2,zero,4eab4 <open+0x158>
   4ea78:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
   4ea7c:	14000015 	stw	r16,0(r2)
    return -1;
   4ea80:	00bfffc4 	movi	r2,-1
   4ea84:	003fed06 	br	4ea3c <__alt_data_end+0xfffe857c>
   4ea88:	a005883a 	mov	r2,r20
   4ea8c:	003feb06 	br	4ea3c <__alt_data_end+0xfffe857c>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   4ea90:	8809883a 	mov	r4,r17
   4ea94:	004eb7c0 	call	4eb7c <alt_find_file>
   4ea98:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   4ea9c:	10000a1e 	bne	r2,zero,4eac8 <open+0x16c>
   4eaa0:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   4eaa4:	053fffc4 	movi	r20,-1
   4eaa8:	003fed06 	br	4ea60 <__alt_data_end+0xfffe85a0>
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   4eaac:	04000344 	movi	r16,13
   4eab0:	003feb06 	br	4ea60 <__alt_data_end+0xfffe85a0>
   4eab4:	00800174 	movhi	r2,5
   4eab8:	10829a04 	addi	r2,r2,2664
   4eabc:	003fef06 	br	4ea7c <__alt_data_end+0xfffe85bc>
   4eac0:	00e1c83a 	sub	r16,zero,r3
   4eac4:	003fe606 	br	4ea60 <__alt_data_end+0xfffe85a0>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   4eac8:	1009883a 	mov	r4,r2
   4eacc:	004ec2c0 	call	4ec2c <alt_get_fd>
   4ead0:	1029883a 	mov	r20,r2
   4ead4:	103fe116 	blt	r2,zero,4ea5c <__alt_data_end+0xfffe859c>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   4ead8:	a1000324 	muli	r4,r20,12
   4eadc:	00800174 	movhi	r2,5
   4eae0:	10bf6004 	addi	r2,r2,-640
   4eae4:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   4eae8:	00900034 	movhi	r2,16384
   4eaec:	10bfffc4 	addi	r2,r2,-1
   4eaf0:	9084703a 	and	r2,r18,r2
   4eaf4:	20800215 	stw	r2,8(r4)
   4eaf8:	003fc706 	br	4ea18 <__alt_data_end+0xfffe8558>

0004eafc <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   4eafc:	000170fa 	wrctl	ienable,zero
   4eb00:	f800283a 	ret

0004eb04 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4eb04:	defffb04 	addi	sp,sp,-20
   4eb08:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
   4eb0c:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   4eb10:	dcc00315 	stw	r19,12(sp)
   4eb14:	dc800215 	stw	r18,8(sp)
   4eb18:	dc400115 	stw	r17,4(sp)
   4eb1c:	dfc00415 	stw	ra,16(sp)
   4eb20:	2823883a 	mov	r17,r5
   4eb24:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   4eb28:	00418f40 	call	418f4 <strlen>
   4eb2c:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4eb30:	8c00031e 	bne	r17,r16,4eb40 <alt_find_dev+0x3c>
   4eb34:	00000906 	br	4eb5c <alt_find_dev+0x58>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   4eb38:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4eb3c:	8c000726 	beq	r17,r16,4eb5c <alt_find_dev+0x58>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   4eb40:	81000217 	ldw	r4,8(r16)
   4eb44:	980b883a 	mov	r5,r19
   4eb48:	900d883a 	mov	r6,r18
   4eb4c:	004ed780 	call	4ed78 <memcmp>
   4eb50:	103ff91e 	bne	r2,zero,4eb38 <__alt_data_end+0xfffe8678>
   4eb54:	8005883a 	mov	r2,r16
   4eb58:	00000106 	br	4eb60 <alt_find_dev+0x5c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   4eb5c:	0005883a 	mov	r2,zero
}
   4eb60:	dfc00417 	ldw	ra,16(sp)
   4eb64:	dcc00317 	ldw	r19,12(sp)
   4eb68:	dc800217 	ldw	r18,8(sp)
   4eb6c:	dc400117 	ldw	r17,4(sp)
   4eb70:	dc000017 	ldw	r16,0(sp)
   4eb74:	dec00504 	addi	sp,sp,20
   4eb78:	f800283a 	ret

0004eb7c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4eb7c:	defffa04 	addi	sp,sp,-24
   4eb80:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4eb84:	05000174 	movhi	r20,5
   4eb88:	a53fde04 	addi	r20,r20,-136
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4eb8c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4eb90:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   4eb94:	dfc00515 	stw	ra,20(sp)
   4eb98:	dcc00315 	stw	r19,12(sp)
   4eb9c:	dc800215 	stw	r18,8(sp)
   4eba0:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4eba4:	85001626 	beq	r16,r20,4ec00 <alt_find_file+0x84>
   4eba8:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   4ebac:	04c00bc4 	movi	r19,47
   4ebb0:	00000806 	br	4ebd4 <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ebb4:	9185883a 	add	r2,r18,r6
   4ebb8:	10800007 	ldb	r2,0(r2)
   4ebbc:	14c00126 	beq	r2,r19,4ebc4 <alt_find_file+0x48>
   4ebc0:	1000021e 	bne	r2,zero,4ebcc <alt_find_file+0x50>
        !memcmp (next->name, name, len))
   4ebc4:	004ed780 	call	4ed78 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   4ebc8:	10001626 	beq	r2,zero,4ec24 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   4ebcc:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   4ebd0:	85000b26 	beq	r16,r20,4ec00 <alt_find_file+0x84>
  {
    len = strlen(next->name);
   4ebd4:	84400217 	ldw	r17,8(r16)
   4ebd8:	8809883a 	mov	r4,r17
   4ebdc:	00418f40 	call	418f4 <strlen>
   4ebe0:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
   4ebe4:	8885883a 	add	r2,r17,r2
   4ebe8:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
   4ebec:	8809883a 	mov	r4,r17
   4ebf0:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   4ebf4:	14ffef1e 	bne	r2,r19,4ebb4 <__alt_data_end+0xfffe86f4>
    {
      len -= 1;
   4ebf8:	31bfffc4 	addi	r6,r6,-1
   4ebfc:	003fed06 	br	4ebb4 <__alt_data_end+0xfffe86f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   4ec00:	0005883a 	mov	r2,zero
}
   4ec04:	dfc00517 	ldw	ra,20(sp)
   4ec08:	dd000417 	ldw	r20,16(sp)
   4ec0c:	dcc00317 	ldw	r19,12(sp)
   4ec10:	dc800217 	ldw	r18,8(sp)
   4ec14:	dc400117 	ldw	r17,4(sp)
   4ec18:	dc000017 	ldw	r16,0(sp)
   4ec1c:	dec00604 	addi	sp,sp,24
   4ec20:	f800283a 	ret
   4ec24:	8005883a 	mov	r2,r16
   4ec28:	003ff606 	br	4ec04 <__alt_data_end+0xfffe8744>

0004ec2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   4ec2c:	01800174 	movhi	r6,5
   4ec30:	31bf6004 	addi	r6,r6,-640
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   4ec34:	0005883a 	mov	r2,zero
   4ec38:	01c00804 	movi	r7,32
   4ec3c:	00000206 	br	4ec48 <alt_get_fd+0x1c>
   4ec40:	10800044 	addi	r2,r2,1
   4ec44:	11c00b26 	beq	r2,r7,4ec74 <alt_get_fd+0x48>
   4ec48:	10c00324 	muli	r3,r2,12
   4ec4c:	1987883a 	add	r3,r3,r6
  {
    if (!alt_fd_list[i].dev)
   4ec50:	19400017 	ldw	r5,0(r3)
   4ec54:	283ffa1e 	bne	r5,zero,4ec40 <__alt_data_end+0xfffe8780>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
   4ec58:	01400174 	movhi	r5,5
   4ec5c:	297fdb04 	addi	r5,r5,-148

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   4ec60:	19000015 	stw	r4,0(r3)
      if (i > alt_max_fd)
   4ec64:	28c00017 	ldw	r3,0(r5)
   4ec68:	1880030e 	bge	r3,r2,4ec78 <alt_get_fd+0x4c>
      {
        alt_max_fd = i;
   4ec6c:	28800015 	stw	r2,0(r5)
      }
      rc = i;
      goto alt_get_fd_exit;
   4ec70:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   4ec74:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   4ec78:	f800283a 	ret

0004ec7c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   4ec7c:	00840004 	movi	r2,4096
   4ec80:	1140012e 	bgeu	r2,r5,4ec88 <alt_icache_flush+0xc>
   4ec84:	100b883a 	mov	r5,r2
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
   4ec88:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ec8c:	2005883a 	mov	r2,r4
   4ec90:	2140092e 	bgeu	r4,r5,4ecb8 <alt_icache_flush+0x3c>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   4ec94:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   4ec98:	10800804 	addi	r2,r2,32
   4ec9c:	117ffd36 	bltu	r2,r5,4ec94 <__alt_data_end+0xfffe87d4>
   4eca0:	0104303a 	nor	r2,zero,r4
   4eca4:	2885883a 	add	r2,r5,r2
   4eca8:	1004d17a 	srli	r2,r2,5
   4ecac:	10800044 	addi	r2,r2,1
   4ecb0:	1004917a 	slli	r2,r2,5
   4ecb4:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   4ecb8:	210007cc 	andi	r4,r4,31
   4ecbc:	20000126 	beq	r4,zero,4ecc4 <alt_icache_flush+0x48>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   4ecc0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   4ecc4:	0000203a 	flushp
   4ecc8:	f800283a 	ret

0004eccc <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
   4eccc:	213ffe84 	addi	r4,r4,-6
   4ecd0:	008003c4 	movi	r2,15
   4ecd4:	11001636 	bltu	r2,r4,4ed30 <alt_exception_cause_generated_bad_addr+0x64>
   4ecd8:	200890ba 	slli	r4,r4,2
   4ecdc:	00800174 	movhi	r2,5
   4ece0:	10bb3c04 	addi	r2,r2,-4880
   4ece4:	2089883a 	add	r4,r4,r2
   4ece8:	20800017 	ldw	r2,0(r4)
   4ecec:	1000683a 	jmp	r2
   4ecf0:	0004ed38 	rdprs	zero,zero,5044
   4ecf4:	0004ed38 	rdprs	zero,zero,5044
   4ecf8:	0004ed30 	cmpltui	zero,zero,5044
   4ecfc:	0004ed30 	cmpltui	zero,zero,5044
   4ed00:	0004ed30 	cmpltui	zero,zero,5044
   4ed04:	0004ed38 	rdprs	zero,zero,5044
   4ed08:	0004ed30 	cmpltui	zero,zero,5044
   4ed0c:	0004ed30 	cmpltui	zero,zero,5044
   4ed10:	0004ed38 	rdprs	zero,zero,5044
   4ed14:	0004ed38 	rdprs	zero,zero,5044
   4ed18:	0004ed30 	cmpltui	zero,zero,5044
   4ed1c:	0004ed38 	rdprs	zero,zero,5044
   4ed20:	0004ed30 	cmpltui	zero,zero,5044
   4ed24:	0004ed30 	cmpltui	zero,zero,5044
   4ed28:	0004ed30 	cmpltui	zero,zero,5044
   4ed2c:	0004ed38 	rdprs	zero,zero,5044
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   4ed30:	0005883a 	mov	r2,zero
   4ed34:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   4ed38:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
   4ed3c:	f800283a 	ret

0004ed40 <exit>:
   4ed40:	defffe04 	addi	sp,sp,-8
   4ed44:	000b883a 	mov	r5,zero
   4ed48:	dc000015 	stw	r16,0(sp)
   4ed4c:	dfc00115 	stw	ra,4(sp)
   4ed50:	2021883a 	mov	r16,r4
   4ed54:	004edf40 	call	4edf4 <__call_exitprocs>
   4ed58:	00800174 	movhi	r2,5
   4ed5c:	10bfd504 	addi	r2,r2,-172
   4ed60:	11000017 	ldw	r4,0(r2)
   4ed64:	20800f17 	ldw	r2,60(r4)
   4ed68:	10000126 	beq	r2,zero,4ed70 <exit+0x30>
   4ed6c:	103ee83a 	callr	r2
   4ed70:	8009883a 	mov	r4,r16
   4ed74:	004ef880 	call	4ef88 <_exit>

0004ed78 <memcmp>:
   4ed78:	01c000c4 	movi	r7,3
   4ed7c:	3980192e 	bgeu	r7,r6,4ede4 <memcmp+0x6c>
   4ed80:	2144b03a 	or	r2,r4,r5
   4ed84:	11c4703a 	and	r2,r2,r7
   4ed88:	10000f26 	beq	r2,zero,4edc8 <memcmp+0x50>
   4ed8c:	20800003 	ldbu	r2,0(r4)
   4ed90:	28c00003 	ldbu	r3,0(r5)
   4ed94:	10c0151e 	bne	r2,r3,4edec <memcmp+0x74>
   4ed98:	31bfff84 	addi	r6,r6,-2
   4ed9c:	01ffffc4 	movi	r7,-1
   4eda0:	00000406 	br	4edb4 <memcmp+0x3c>
   4eda4:	20800003 	ldbu	r2,0(r4)
   4eda8:	28c00003 	ldbu	r3,0(r5)
   4edac:	31bfffc4 	addi	r6,r6,-1
   4edb0:	10c00e1e 	bne	r2,r3,4edec <memcmp+0x74>
   4edb4:	21000044 	addi	r4,r4,1
   4edb8:	29400044 	addi	r5,r5,1
   4edbc:	31fff91e 	bne	r6,r7,4eda4 <__alt_data_end+0xfffe88e4>
   4edc0:	0005883a 	mov	r2,zero
   4edc4:	f800283a 	ret
   4edc8:	20c00017 	ldw	r3,0(r4)
   4edcc:	28800017 	ldw	r2,0(r5)
   4edd0:	1880041e 	bne	r3,r2,4ede4 <memcmp+0x6c>
   4edd4:	31bfff04 	addi	r6,r6,-4
   4edd8:	21000104 	addi	r4,r4,4
   4eddc:	29400104 	addi	r5,r5,4
   4ede0:	39bff936 	bltu	r7,r6,4edc8 <__alt_data_end+0xfffe8908>
   4ede4:	303fe91e 	bne	r6,zero,4ed8c <__alt_data_end+0xfffe88cc>
   4ede8:	003ff506 	br	4edc0 <__alt_data_end+0xfffe8900>
   4edec:	10c5c83a 	sub	r2,r2,r3
   4edf0:	f800283a 	ret

0004edf4 <__call_exitprocs>:
   4edf4:	00800174 	movhi	r2,5
   4edf8:	10bfd504 	addi	r2,r2,-172
   4edfc:	10800017 	ldw	r2,0(r2)
   4ee00:	defff404 	addi	sp,sp,-48
   4ee04:	dd800815 	stw	r22,32(sp)
   4ee08:	d8800015 	stw	r2,0(sp)
   4ee0c:	10805204 	addi	r2,r2,328
   4ee10:	dd000615 	stw	r20,24(sp)
   4ee14:	dc800415 	stw	r18,16(sp)
   4ee18:	dfc00b15 	stw	ra,44(sp)
   4ee1c:	df000a15 	stw	fp,40(sp)
   4ee20:	ddc00915 	stw	r23,36(sp)
   4ee24:	dd400715 	stw	r21,28(sp)
   4ee28:	dcc00515 	stw	r19,20(sp)
   4ee2c:	dc400315 	stw	r17,12(sp)
   4ee30:	dc000215 	stw	r16,8(sp)
   4ee34:	2025883a 	mov	r18,r4
   4ee38:	2829883a 	mov	r20,r5
   4ee3c:	d8800115 	stw	r2,4(sp)
   4ee40:	05bfffc4 	movi	r22,-1
   4ee44:	d8800017 	ldw	r2,0(sp)
   4ee48:	14c05217 	ldw	r19,328(r2)
   4ee4c:	98001d26 	beq	r19,zero,4eec4 <__call_exitprocs+0xd0>
   4ee50:	dd400117 	ldw	r21,4(sp)
   4ee54:	98800117 	ldw	r2,4(r19)
   4ee58:	173fffc4 	addi	fp,r2,-1
   4ee5c:	e0000d16 	blt	fp,zero,4ee94 <__call_exitprocs+0xa0>
   4ee60:	14000044 	addi	r16,r2,1
   4ee64:	8421883a 	add	r16,r16,r16
   4ee68:	8421883a 	add	r16,r16,r16
   4ee6c:	84402004 	addi	r17,r16,128
   4ee70:	9c63883a 	add	r17,r19,r17
   4ee74:	9c21883a 	add	r16,r19,r16
   4ee78:	a0001e26 	beq	r20,zero,4eef4 <__call_exitprocs+0x100>
   4ee7c:	80804017 	ldw	r2,256(r16)
   4ee80:	15001c26 	beq	r2,r20,4eef4 <__call_exitprocs+0x100>
   4ee84:	e73fffc4 	addi	fp,fp,-1
   4ee88:	843fff04 	addi	r16,r16,-4
   4ee8c:	8c7fff04 	addi	r17,r17,-4
   4ee90:	e5bff91e 	bne	fp,r22,4ee78 <__alt_data_end+0xfffe89b8>
   4ee94:	00800034 	movhi	r2,0
   4ee98:	10800004 	addi	r2,r2,0
   4ee9c:	10000926 	beq	r2,zero,4eec4 <__call_exitprocs+0xd0>
   4eea0:	98800117 	ldw	r2,4(r19)
   4eea4:	1000311e 	bne	r2,zero,4ef6c <__call_exitprocs+0x178>
   4eea8:	98800017 	ldw	r2,0(r19)
   4eeac:	10003426 	beq	r2,zero,4ef80 <__call_exitprocs+0x18c>
   4eeb0:	9809883a 	mov	r4,r19
   4eeb4:	a8800015 	stw	r2,0(r21)
   4eeb8:	00000000 	call	0 <__reset-0x40000>
   4eebc:	acc00017 	ldw	r19,0(r21)
   4eec0:	983fe41e 	bne	r19,zero,4ee54 <__alt_data_end+0xfffe8994>
   4eec4:	dfc00b17 	ldw	ra,44(sp)
   4eec8:	df000a17 	ldw	fp,40(sp)
   4eecc:	ddc00917 	ldw	r23,36(sp)
   4eed0:	dd800817 	ldw	r22,32(sp)
   4eed4:	dd400717 	ldw	r21,28(sp)
   4eed8:	dd000617 	ldw	r20,24(sp)
   4eedc:	dcc00517 	ldw	r19,20(sp)
   4eee0:	dc800417 	ldw	r18,16(sp)
   4eee4:	dc400317 	ldw	r17,12(sp)
   4eee8:	dc000217 	ldw	r16,8(sp)
   4eeec:	dec00c04 	addi	sp,sp,48
   4eef0:	f800283a 	ret
   4eef4:	98800117 	ldw	r2,4(r19)
   4eef8:	80c00017 	ldw	r3,0(r16)
   4eefc:	10bfffc4 	addi	r2,r2,-1
   4ef00:	17001526 	beq	r2,fp,4ef58 <__call_exitprocs+0x164>
   4ef04:	80000015 	stw	zero,0(r16)
   4ef08:	183fde26 	beq	r3,zero,4ee84 <__alt_data_end+0xfffe89c4>
   4ef0c:	00800044 	movi	r2,1
   4ef10:	1708983a 	sll	r4,r2,fp
   4ef14:	98806217 	ldw	r2,392(r19)
   4ef18:	9dc00117 	ldw	r23,4(r19)
   4ef1c:	2084703a 	and	r2,r4,r2
   4ef20:	1000061e 	bne	r2,zero,4ef3c <__call_exitprocs+0x148>
   4ef24:	183ee83a 	callr	r3
   4ef28:	98800117 	ldw	r2,4(r19)
   4ef2c:	15ffc51e 	bne	r2,r23,4ee44 <__alt_data_end+0xfffe8984>
   4ef30:	a8800017 	ldw	r2,0(r21)
   4ef34:	14ffd326 	beq	r2,r19,4ee84 <__alt_data_end+0xfffe89c4>
   4ef38:	003fc206 	br	4ee44 <__alt_data_end+0xfffe8984>
   4ef3c:	98806317 	ldw	r2,396(r19)
   4ef40:	2084703a 	and	r2,r4,r2
   4ef44:	1000061e 	bne	r2,zero,4ef60 <__call_exitprocs+0x16c>
   4ef48:	89400017 	ldw	r5,0(r17)
   4ef4c:	9009883a 	mov	r4,r18
   4ef50:	183ee83a 	callr	r3
   4ef54:	003ff406 	br	4ef28 <__alt_data_end+0xfffe8a68>
   4ef58:	9f000115 	stw	fp,4(r19)
   4ef5c:	003fea06 	br	4ef08 <__alt_data_end+0xfffe8a48>
   4ef60:	89000017 	ldw	r4,0(r17)
   4ef64:	183ee83a 	callr	r3
   4ef68:	003fef06 	br	4ef28 <__alt_data_end+0xfffe8a68>
   4ef6c:	98800017 	ldw	r2,0(r19)
   4ef70:	982b883a 	mov	r21,r19
   4ef74:	1027883a 	mov	r19,r2
   4ef78:	983fb61e 	bne	r19,zero,4ee54 <__alt_data_end+0xfffe8994>
   4ef7c:	003fd106 	br	4eec4 <__alt_data_end+0xfffe8a04>
   4ef80:	0005883a 	mov	r2,zero
   4ef84:	003ffa06 	br	4ef70 <__alt_data_end+0xfffe8ab0>

0004ef88 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4ef88:	20000226 	beq	r4,zero,4ef94 <_exit+0xc>
    ALT_SIM_FAIL();
   4ef8c:	002af070 	cmpltui	zero,zero,43969
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4ef90:	003fff06 	br	4ef90 <__alt_data_end+0xfffe8ad0>
  } else {
    ALT_SIM_PASS();
   4ef94:	002af0b0 	cmpltui	zero,zero,43970
   4ef98:	003ffd06 	br	4ef90 <__alt_data_end+0xfffe8ad0>
