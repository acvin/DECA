
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module mipi_to_hdmi_terasic(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [7:0]		LED,

	//////////// SDRAM //////////
	output		    [14:0]		DDR3_A,
	output		     [2:0]		DDR3_BA,
	output		          		DDR3_CAS_n,
	inout 		          		DDR3_CK_n,
	inout 		          		DDR3_CK_p,
	output		          		DDR3_CKE,
	input 		          		DDR3_CLK_50,
	output		          		DDR3_CS_n,
	output		     [1:0]		DDR3_DM,
	inout 		    [15:0]		DDR3_DQ,
	inout 		     [1:0]		DDR3_DQS_n,
	inout 		     [1:0]		DDR3_DQS_p,
	output		          		DDR3_ODT,
	output		          		DDR3_RAS_n,
	output		          		DDR3_RESET_n,
	output		          		DDR3_WE_n,

	//////////// HDMI-TX //////////
	inout 		          		HDMI_I2C_SCL,
	inout 		          		HDMI_I2C_SDA,
	inout 		     [3:0]		HDMI_I2S,
	inout 		          		HDMI_LRCLK,
	inout 		          		HDMI_MCLK,
	inout 		          		HDMI_SCLK,
	output		          		HDMI_TX_CLK,
	output		    [23:0]		HDMI_TX_D,
	output		          		HDMI_TX_DE,
	output		          		HDMI_TX_HS,
	input 		          		HDMI_TX_INT,
	output		          		HDMI_TX_VS,

	//////////// MIPI //////////
	output		          		MIPI_CORE_EN,
	output		          		MIPI_I2C_SCL,
	inout 		          		MIPI_I2C_SDA,
	input 		          		MIPI_LP_MC_n,
	input 		          		MIPI_LP_MC_p,
	input 		     [3:0]		MIPI_LP_MD_n,
	input 		     [3:0]		MIPI_LP_MD_p,
	input 		          		MIPI_MC_p,
	output		          		MIPI_MCLK,
	input 		     [3:0]		MIPI_MD_p,
	output		          		MIPI_RESET_n,
	output		          		MIPI_WP,

	//////////// SW //////////
	input 		     [1:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire reset_n;
wire [7:0] nios_led;


wire ddr3_pll_locked;
wire ddr3_local_init_done;
wire ddr3_local_cal_success;
wire ddr3_local_cal_fail;


//=======================================================
//  Structural coding
//=======================================================

assign reset_n = 1'b1;
assign MIPI_CORE_EN = KEY[0];
assign MIPI_RESET_n = KEY[0];
assign MIPI_WP = 1'b0;




    deca_qsys u0 (
        .clk_clk                                      (MAX10_CLK1_50),                                      //                            clk.clk
        .reset_reset_n                                (reset_n),                                //                          reset.reset_n
        .altpll_sys_hdmi_clk                          (HDMI_TX_CLK),                      //              altpll_sys_hdmi_clk.clk
        .altpll_mipi_clk_clk                          (MIPI_MCLK),                           //                  altpll_mipi_clk.clk



        .terasic_bayer2rgb_din_data                    (raw_data),                    //            terasic_bayer2rgb_din.data
        .terasic_bayer2rgb_din_endofpacket             (raw_eop),             //                                 .endofpacket
        .terasic_bayer2rgb_din_ready                   (raw_ready),                   //                                 .ready
        .terasic_bayer2rgb_din_startofpacket           (raw_sop),           //                                 .startofpacket
        .terasic_bayer2rgb_din_valid                   (raw_valid),                    //                                 .valid



		  // Camera Video In
        .clock_bridge_vip_out_clk_clk                                        (vip_clk),                                         //                              clock_bridge_vip_out_clk.clk


		  	// HDMI output
        .alt_vip_cl_cvo_clocked_video_vid_clk       (HDMI_TX_CLK),       // alt_vip_cl_cvo_0_clocked_video.vid_clk
        .alt_vip_cl_cvo_clocked_video_vid_data      (HDMI_TX_D),      //                               .vid_data
        .alt_vip_cl_cvo_clocked_video_underflow     (),     //                               .underflow
        .alt_vip_cl_cvo_clocked_video_vid_datavalid (HDMI_TX_DE), //                               .vid_datavalid
        .alt_vip_cl_cvo_clocked_video_vid_v_sync    (HDMI_TX_VS),    //                               .vid_v_sync
        .alt_vip_cl_cvo_clocked_video_vid_h_sync    (HDMI_TX_HS),    //                               .vid_h_sync
        .alt_vip_cl_cvo_clocked_video_vid_f         (),         //                               .vid_f
        .alt_vip_cl_cvo_clocked_video_vid_h         (),         //                               .vid_h
        .alt_vip_cl_cvo_clocked_video_vid_v         (),          //                               .vid_v

        .i2c_opencores_mipi_export_scl_pad_io         (MIPI_I2C_SCL),         //      i2c_opencores_mipi_export.scl_pad_io
        .i2c_opencores_mipi_export_sda_pad_io         (MIPI_I2C_SDA),         //                               .sda_pad_io
	     .mipi_reset_n_external_connection_export      (),       // mipi_reset_n_external_connection.export
        .mipi_core_en_external_connection_export      (),       // mipi_core_en_external_connection.export

        .led_external_connection_export               (nios_led),                //          led_external_connection.export
        .sw_external_connection_export                (SW),                 //           dw_external_connection.export

		  //////////////////////////////////
			// DDR3
        .memory_mem_a                     (DDR3_A),                     //                       memory.mem_a
        .memory_mem_ba                    (DDR3_BA),                    //                             .mem_ba
        .memory_mem_ck                    (DDR3_CK_p),                    //                             .mem_ck
        .memory_mem_ck_n                  (DDR3_CK_n),                  //                             .mem_ck_n
        .memory_mem_cke                   (DDR3_CKE),                   //                             .mem_cke
        .memory_mem_cs_n                  (DDR3_CS_n),                  //                             .mem_cs_n
        .memory_mem_dm                    (DDR3_DM),                    //                             .mem_dm
        .memory_mem_ras_n                 (DDR3_RAS_n),                 //                             .mem_ras_n
        .memory_mem_cas_n                 (DDR3_CAS_n),                 //                             .mem_cas_n
        .memory_mem_we_n                  (DDR3_WE_n),                  //                             .mem_we_n
        .memory_mem_reset_n               (DDR3_RESET_n),               //                             .mem_reset_n
        .memory_mem_dq                    (DDR3_DQ),                    //                             .mem_dq
        .memory_mem_dqs                   (DDR3_DQS_p),                   //                             .mem_dqs
        .memory_mem_dqs_n                 (DDR3_DQS_n),                 //                             .mem_dqs_n
        .memory_mem_odt                   (DDR3_ODT),                   //                             .mem_odt
        .mem_if_ddr3_emif_pll_ref_clk_clk (DDR3_CLK_50),  // mem_if_ddr3_emif_pll_ref_clk.clk

        .mem_if_ddr3_emif_pll_sharing_pll_locked       (ddr3_pll_locked),       //                                .pll_locked
        .mem_if_ddr3_emif_status_local_init_done       (ddr3_local_init_done),       //         mem_if_ddr3_emif_status.local_init_done
        .mem_if_ddr3_emif_status_local_cal_success     (ddr3_local_cal_success),     //                                .local_cal_success
        .mem_if_ddr3_emif_status_local_cal_fail        (ddr3_local_cal_fail),        //                                .local_cal_fail

        .ddr3_status_external_connection_export        ({ddr3_pll_locked, ddr3_local_cal_success, ddr3_local_cal_fail, ddr3_local_init_done }),         // ddr3_status_external_connection.export




    );

ref_clk test(
	.areset(1'b0),
	.inclk0(MAX10_CLK2_50),
	.c0(),
	.locked());



wire sample_clock;
wire pll_sample_locked;




mipi_cs2_stream mipi_cs2_stream_u0(


	.clk_50(MAX10_CLK1_50),

	.MIPI_LP_MD_p0(MIPI_LP_MD_p[0]),
	.MIPI_LP_MD_n0(MIPI_LP_MD_n[0]),


	//.MIPI_HS(MIPI_HS),
	.MIPI_MC_p(MIPI_MC_p),
	.MIPI_MD_p(MIPI_MD_p),

	.stream_reset_n(stream_reset_n),



	.st_clk(vip_clk),
	.st_sop(raw_sop),
	.st_eop(raw_eop),
	.st_valid(raw_valid),
	.st_data(raw_data),
	.st_ready(raw_ready),
	.find_good_frame(find_good_frame)


);




wire vip_clk;
wire raw_sop;
wire raw_eop;
wire raw_valid;
wire raw_ready;
wire [7:0] raw_data;

wire find_good_frame;
wire stream_reset_n;

assign LED[7] = ~find_good_frame;
assign LED[6] = stream_reset_n;
assign stream_reset_n = KEY[0];




defparam heart_beat_pkg_clk.DUR_BITS = 29;
heart_beat heart_beat_pkg_clk(
	.clk(pkg_clk), // 105 MHz
	.led(LED[0])
);


defparam heart_beat_pkg_clk.DUR_BITS = 10;
heart_beat heart_beat_pixel_frame_valid(
	.clk(pixel_frame_valid),
	.led(LED[1])
);

defparam heart_beat_pkg_clk.DUR_BITS = 14;
heart_beat heart_beat_pixel_valid(
	.clk(pixel_valid),
	.led(LED[2])
);



//////////////////////////////////////////
// HDMI Config

//HDMI I2C
I2C_HDMI_Config u_I2C_HDMI_Config (
	.iCLK(MAX10_CLK2_50),
	.iRST_N(reset_n),
	.I2C_SCLK(HDMI_I2C_SCL),
	.I2C_SDAT(HDMI_I2C_SDA),
	.HDMI_TX_INT(HDMI_TX_INT)
	);


endmodule
