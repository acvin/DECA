
humidity_temp.elf:     file format elf32-littlenios2
humidity_temp.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0144022c

Program Header:
    LOAD off    0x00001000 vaddr 0x01440000 paddr 0x01440000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01440020 paddr 0x01440020 align 2**12
         filesz 0x00010970 memsz 0x00010970 flags r-x
    LOAD off    0x00011990 vaddr 0x01450990 paddr 0x0145159c align 2**12
         filesz 0x00000c0c memsz 0x00000c0c flags rw-
    LOAD off    0x000131a8 vaddr 0x014521a8 paddr 0x014521a8 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01440000  01440000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  01440020  01440020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000102dc  0144022c  0144022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000488  01450508  01450508  00011508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000c0c  01450990  0145159c  00011990  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  014521a8  014521a8  000131a8  2**2
                  ALLOC, SMALL_DATA
  6 .ufm_flash_data 00000000  01200000  01200000  0001259c  2**0
                  CONTENTS
  7 .onchip_ram   00000000  01452308  01452308  0001259c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001259c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cb0  00000000  00000000  000125c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000237e8  00000000  00000000  00013270  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008b9c  00000000  00000000  00036a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000adc5  00000000  00000000  0003f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000232c  00000000  00000000  0004a3bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b8e  00000000  00000000  0004c6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016b9b  00000000  00000000  00050276  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00066e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00066e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006b620  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000a  00000000  00000000  0006b623  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006b62d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006b62e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006b62f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006b633  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006b637  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0006b63b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0006b644  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0006b64d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006b656  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000002c  00000000  00000000  0006b65e  2**0
                  CONTENTS, READONLY
 30 .jdi          00003e37  00000000  00000000  0006b68a  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000ab1bf  00000000  00000000  0006f4c1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01440000 l    d  .entry	00000000 .entry
01440020 l    d  .exceptions	00000000 .exceptions
0144022c l    d  .text	00000000 .text
01450508 l    d  .rodata	00000000 .rodata
01450990 l    d  .rwdata	00000000 .rwdata
014521a8 l    d  .bss	00000000 .bss
01200000 l    d  .ufm_flash_data	00000000 .ufm_flash_data
01452308 l    d  .onchip_ram	00000000 .onchip_ram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../humidity_temp_bsp//obj/HAL/src/crt0.o
01440264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 rh_temp.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
014422cc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
014507aa l     O .rodata	00000010 zeroes.4181
014507ba l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0144483c l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
014463e4 l     F .text	00000008 __fp_lock
014463ec l     F .text	00000008 __fp_unlock
01446400 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01450990 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
01450dd4 l     O .rwdata	00000020 lc_ctype_charset
01450db4 l     O .rwdata	00000020 lc_message_charset
01450df4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
014507ec l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
01449930 l     F .text	000000fc __sprint_r.part.0
01450920 l     O .rodata	00000010 blanks.4125
01450910 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0144d040 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0144d168 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0144d194 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0144d29c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0144d398 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0144d47c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0144d650 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01451574 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0144d8d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0144da24 l     F .text	00000038 alt_dev_reg
014513dc l     O .rwdata	0000002c jtag_uart
01451408 l     O .rwdata	0000003c modular_adc
01451444 l     O .rwdata	00000100 ufm_flash
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0144dd38 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_modular_adc.c
0144de34 l     F .text	000000a4 alt_adc_irq
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
0144e374 l     F .text	00000038 alt_flash_device_register
00000000 l    df *ABS*	00000000 i2c_opencores.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0144f528 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0144fa50 l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0144fba8 l     F .text	00000050 alt_get_errno
0144fbf8 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
014521dc g     O .bss	00000004 alt_instruction_exception_handler
01448f70 g     F .text	00000074 _mprec_log10
0144e0cc g     F .text	0000004c adc_stop
0144905c g     F .text	0000008c __any_on
0144b35c g     F .text	00000054 _isatty_r
014507f8 g     O .rodata	00000028 __mprec_tinytens
0144d5a8 g     F .text	00000068 alt_main
01442488 g     F .text	000000b8 _puts_r
01452208 g     O .bss	00000100 alt_irq
0144b3b0 g     F .text	0000005c _lseek_r
0145159c g       *ABS*	00000000 __flash_rwdata_start
0144ccd0 g     F .text	00000084 .hidden __eqdf2
01452308 g       *ABS*	00000000 __alt_heap_start
0144244c g     F .text	0000003c printf
0144b5d8 g     F .text	0000009c _wcrtomb_r
01449828 g     F .text	0000005c __sseek
01446748 g     F .text	00000010 __sinit
0144b468 g     F .text	00000154 __swbuf_r
014471c0 g     F .text	0000007c _setlocale_r
014465a0 g     F .text	00000078 __sfmoreglue
0144d630 g     F .text	00000020 __malloc_unlock
01447e20 g     F .text	0000015c memmove
01446730 g     F .text	00000018 _cleanup
014480a0 g     F .text	000000a8 _Balloc
0144cd54 g     F .text	000000e0 .hidden __gtdf2
0144ffe8 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
01440000 g     F .entry	0000000c __reset
0144e278 g     F .text	00000044 adc_interrupt_disable
01440020 g       *ABS*	00000000 __flash_exceptions_start
0144b304 g     F .text	00000058 _fstat_r
014521c0 g     O .bss	00000004 errno
014497a4 g     F .text	00000008 __seofread
0144df84 g     F .text	00000070 altera_modular_adc_init
014521c8 g     O .bss	00000004 alt_argv
01459544 g       *ABS*	00000000 _gp
0144f1f0 g     F .text	00000080 alt_onchip_flash_poll_for_status_write_passed
01200000 g       *ABS*	00000000 __alt_mem_ufm_flash_data
0145125c g     O .rwdata	00000180 alt_fd_list
0144f61c g     F .text	00000090 alt_find_dev
01447ce8 g     F .text	00000138 memcpy
014463f4 g     F .text	0000000c _cleanup_r
01442198 g     F .text	000000d0 .hidden __floatsidf
0144e188 g     F .text	00000038 adc_set_mode_run_continuously
0144fb30 g     F .text	00000078 alt_io_redirect
0144ce34 g     F .text	000000e0 .hidden __ltdf2
01442540 g     F .text	00000014 puts
014501f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0144f324 g     F .text	0000009c I2C_start
01449688 g     F .text	00000074 __fpclassifyd
01448ecc g     F .text	000000a4 __ratio
0144ae68 g     F .text	00000024 __vfiprintf_internal
0144dbc0 g     F .text	000000e4 altera_avalon_jtag_uart_read
01442420 g     F .text	0000002c _printf_r
014423e8 g     F .text	00000008 .hidden __udivsi3
0144d2ec g     F .text	000000ac isatty
0144f170 g     F .text	00000080 alt_onchip_flash_poll_for_status_erase_passed
01450848 g     O .rodata	000000c8 __mprec_tens
0144723c g     F .text	0000000c __locale_charset
014521bc g     O .bss	00000004 __malloc_top_pad
01451580 g     O .rwdata	00000008 altera_onchip_flash_list
0145154c g     O .rwdata	00000004 __mb_cur_max
0144726c g     F .text	0000000c _localeconv_r
014484c8 g     F .text	0000003c __i2b
01446bac g     F .text	000004a4 __sfvwrite_r
014496fc g     F .text	00000054 _sbrk_r
0144b40c g     F .text	0000005c _read_r
01451578 g     O .rwdata	00000008 altera_modular_adc_list
0144f4e8 g     F .text	00000024 alt_dcache_flush
0144e514 g     F .text	00000168 alt_onchip_flash_erase_block
0145156c g     O .rwdata	00000004 alt_max_fd
0144b014 g     F .text	00000100 _fclose_r
014463b4 g     F .text	00000030 fflush
014521b8 g     O .bss	00000004 __malloc_max_sbrked_mem
0144c434 g     F .text	0000089c .hidden __adddf3
01448c74 g     F .text	0000011c __b2d
0144be18 g     F .text	0000061c .hidden __umoddi3
0144d4cc g     F .text	000000dc lseek
01451544 g     O .rwdata	00000004 _global_impure_ptr
014490e8 g     F .text	000005a0 _realloc_r
01452308 g       *ABS*	00000000 __bss_end
0144f960 g     F .text	000000f0 alt_iic_isr_register
0144fee4 g     F .text	00000104 alt_tick
0144b7d8 g     F .text	00000640 .hidden __udivdi3
0144b128 g     F .text	00000184 _fputwc_r
0144e33c g     F .text	00000038 adc_wait_for_interrupt
01450820 g     O .rodata	00000028 __mprec_bigtens
014482ac g     F .text	00000104 __s2b
0144cf9c g     F .text	000000a4 .hidden __floatunsidf
01448a1c g     F .text	00000060 __mcmp
01446768 g     F .text	00000018 __fp_lock_all
0144f914 g     F .text	0000004c alt_ic_irq_enabled
0144fe4c g     F .text	00000098 alt_alarm_stop
014521d0 g     O .bss	00000004 alt_irq_active
014400fc g     F .exceptions	000000d0 alt_irq_handler
01451234 g     O .rwdata	00000028 alt_dev_null
0144e14c g     F .text	0000003c adc_set_mode_run_once
0144f50c g     F .text	0000001c alt_dcache_flush_all
014483b0 g     F .text	00000068 __hi0bits
0144cf14 g     F .text	00000088 .hidden __fixdfsi
0145159c g       *ABS*	00000000 __ram_rwdata_end
01451564 g     O .rwdata	00000008 alt_dev_list
0144d924 g     F .text	00000100 write
01450990 g       *ABS*	00000000 __ram_rodata_end
0144d1e4 g     F .text	000000b8 fstat
0144ce34 g     F .text	000000e0 .hidden __ledf2
0144e118 g     F .text	00000034 adc_start
01448794 g     F .text	00000140 __pow5mult
01449a44 g     F .text	00001424 ___vfiprintf_internal_r
014521b0 g     O .bss	00000004 __nlocale_changed
014423f0 g     F .text	00000008 .hidden __umodsi3
01452308 g       *ABS*	00000000 end
014401cc g     F .exceptions	00000060 alt_instruction_exception_entry
01465800 g       *ABS*	00000000 __alt_stack_pointer
0144ddac g     F .text	00000088 alt_avalon_timer_sc_init
01442268 g     F .text	00000064 .hidden __clzsi2
0144dca4 g     F .text	00000094 altera_avalon_jtag_uart_write
01446758 g     F .text	00000004 __sfp_lock_acquire
01447c00 g     F .text	000000e8 memchr
014425ec g     F .text	000020fc ___vfprintf_internal_r
0144e478 g     F .text	0000009c alt_onchip_flash_get_info
014468bc g     F .text	000002f0 _free_r
01447248 g     F .text	00000010 __locale_mb_cur_max
01450340 g     F .text	00000194 __call_exitprocs
014521ac g     O .bss	00000004 __mlocale_changed
01451550 g     O .rwdata	00000004 __malloc_sbrk_base
0144022c g     F .text	0000003c _start
014521d4 g     O .bss	00000004 _alt_tick_rate
014488d4 g     F .text	00000148 __lshift
014521d8 g     O .bss	00000004 _alt_nticks
0144d6a0 g     F .text	00000104 read
0144da90 g     F .text	00000070 alt_sys_init
01448504 g     F .text	00000290 __multiply
014423f8 g     F .text	00000028 .hidden __mulsi3
01450990 g       *ABS*	00000000 __ram_rwdata_start
01450508 g       *ABS*	00000000 __ram_rodata_start
014521e0 g     O .bss	00000028 __malloc_current_mallinfo
01448d90 g     F .text	0000013c __d2b
0144db00 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0145011c g     F .text	000000d4 alt_get_fd
0144aee8 g     F .text	00000054 _close_r
014502c4 g     F .text	0000007c memcmp
01452308 g       *ABS*	00000000 __alt_stack_base
0144470c g     F .text	00000130 __swsetup_r
0144e238 g     F .text	00000040 adc_interrupt_enable
014406dc g     F .text	00000980 .hidden __divdf3
0144e3ac g     F .text	000000cc alt_onchip_flash_read
01446618 g     F .text	00000118 __sfp
01448fe4 g     F .text	00000078 __copybits
01450e2c g     O .rwdata	00000408 __malloc_av_
01446764 g     F .text	00000004 __sinit_lock_release
0144105c g     F .text	0000086c .hidden __muldf3
01449750 g     F .text	00000054 __sread
01450008 g     F .text	00000114 alt_find_file
0144f578 g     F .text	000000a4 alt_dev_llist_insert
0144d610 g     F .text	00000020 __malloc_lock
0144d824 g     F .text	000000b0 sbrk
0144618c g     F .text	00000228 _fflush_r
0144af3c g     F .text	000000d8 _calloc_r
01451588 g     O .rwdata	00000008 alt_flash_dev_list
014521a8 g       *ABS*	00000000 __bss_start
01447f7c g     F .text	00000124 memset
01440268 g     F .text	00000474 main
014521cc g     O .bss	00000004 alt_envp
014521b4 g     O .bss	00000004 __malloc_max_total_mem
0144db60 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0144b5bc g     F .text	0000001c __swbuf
0144ded8 g     F .text	000000ac alt_adc_word_read
01449884 g     F .text	00000008 __sclose
01465800 g       *ABS*	00000000 __alt_heap_limit
0144b114 g     F .text	00000014 fclose
01444a64 g     F .text	00001728 _dtoa_r
01447458 g     F .text	000007a8 _malloc_r
0144b74c g     F .text	00000030 __ascii_wctomb
01451570 g     O .rwdata	00000004 alt_errno
0144f0f0 g     F .text	00000080 alt_onchip_flash_poll_for_status_to_go_idle
01447050 g     F .text	000000b8 _fwalk
01442338 g     F .text	00000054 .hidden __divsi3
01446798 g     F .text	00000124 _malloc_trim_r
0144ec18 g     F .text	000004d8 altera_onchip_flash_init
0144f3c0 g     F .text	0000007c I2C_read
0144988c g     F .text	000000a4 strcmp
01450508 g       *ABS*	00000000 __flash_rodata_start
0144ccd0 g     F .text	00000084 .hidden __nedf2
0144da5c g     F .text	00000034 alt_irq_init
0144d7a4 g     F .text	00000080 alt_release_fd
01450664 g     O .rodata	00000100 .hidden __clz_tab
014521a8 g     O .bss	00000004 _PathLocale
0144ae8c g     F .text	0000005c _write_r
01447278 g     F .text	0000001c setlocale
01451548 g     O .rwdata	00000004 _impure_ptr
014521c4 g     O .bss	00000004 alt_argc
01447264 g     F .text	00000008 __locale_cjk_lang
01440020 g       .exceptions	00000000 alt_irq_entry
01448c14 g     F .text	00000060 __ulp
01446780 g     F .text	00000018 __fp_unlock_all
0145155c g     O .rwdata	00000008 alt_fs_list
0144e67c g     F .text	000002c4 alt_onchip_flash_write_block
0144f270 g     F .text	000000b4 I2C_init
01440020 g       *ABS*	00000000 __ram_exceptions_start
01447294 g     F .text	0000000c localeconv
0144f780 g     F .text	00000050 alt_ic_isr_register
0145159c g       *ABS*	00000000 _edata
0144e940 g     F .text	000002d8 alt_onchip_flash_write
01452308 g       *ABS*	00000000 _end
0144f6ac g     F .text	00000068 alt_flash_open_dev
0144e2fc g     F .text	00000040 adc_interrupt_asserted
0144022c g       *ABS*	00000000 __ram_exceptions_end
0144f870 g     F .text	000000a4 alt_ic_irq_disable
014497ac g     F .text	0000007c __swrite
01451554 g     O .rwdata	00000004 __malloc_trim_threshold
0144e2bc g     F .text	00000040 adc_clear_interrupt_status
01447258 g     F .text	0000000c __locale_msgcharset
0145028c g     F .text	00000038 exit
01447108 g     F .text	000000b8 _fwalk_reent
01448a7c g     F .text	00000198 __mdiff
0144f714 g     F .text	00000050 alt_flash_close_dev
0144238c g     F .text	0000005c .hidden __modsi3
01465800 g       *ABS*	00000000 __alt_data_end
01440020 g     F .exceptions	00000000 alt_exception
0144675c g     F .text	00000004 __sfp_lock_release
01440000 g       *ABS*	00000000 __alt_mem_onchip_ram
0144e08c g     F .text	00000040 altera_modular_adc_open
014504d4 g     F .text	00000034 _exit
014472a0 g     F .text	000001b8 __smakebuf_r
01442554 g     F .text	00000098 strlen
0144fcec g     F .text	00000160 open
0144cd54 g     F .text	000000e0 .hidden __gedf2
0144e1c0 g     F .text	00000078 adc_recalibrate
01451558 g     O .rwdata	00000004 __wctomb
01449a2c g     F .text	00000018 __sprint_r
0144f764 g     F .text	0000001c alt_icache_flush_all
01451590 g     O .rwdata	00000004 alt_priority_mask
0144f7d0 g     F .text	000000a0 alt_ic_irq_enable
014446e8 g     F .text	00000024 __vfprintf_internal
0144b77c g     F .text	0000005c _wctomb_r
014418c8 g     F .text	000008d0 .hidden __subdf3
01448418 g     F .text	000000b0 __lo0bits
01451594 g     O .rwdata	00000008 alt_alarm_list
0144b674 g     F .text	000000d8 wcrtomb
0144d090 g     F .text	000000d8 close
0144d3fc g     F .text	00000080 alt_load
0144f43c g     F .text	000000ac I2C_write
0144b2ac g     F .text	00000058 fputwc
0144dff4 g     F .text	00000098 alt_adc_register_callback
00000000  w      *UND*	00000000 free
01446760 g     F .text	00000004 __sinit_lock_acquire
01448170 g     F .text	0000013c __multadd
01448148 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01440000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1440000:	00405134 	movhi	at,324
    ori r1, r1, %lo(_start)
 1440004:	08408b14 	ori	at,at,556
    jmp r1
 1440008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01440020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 1440020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 1440024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 1440028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 144002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1440030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1440034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1440038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 144003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1440040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 1440044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 1440048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 144004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1440050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1440054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1440058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 144005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1440060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1440064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1440068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 144006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1440070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1440074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1440078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 144007c:	10000326 	beq	r2,zero,144008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1440080:	20000226 	beq	r4,zero,144008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1440084:	14400fc0 	call	14400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1440088:	00000706 	br	14400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 144008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1440090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 1440094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 1440098:	14401cc0 	call	14401cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 144009c:	1000021e 	bne	r2,zero,14400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 14400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 14400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 14400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 14400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 14400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 14400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 14400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 14400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 14400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 14400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 14400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 14400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 14400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 14400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 14400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 14400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 14400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 14400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 14400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 14400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 14400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 14400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 14400f8:	ef80083a 	eret

014400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 14400fc:	defff904 	addi	sp,sp,-28
 1440100:	dfc00615 	stw	ra,24(sp)
 1440104:	df000515 	stw	fp,20(sp)
 1440108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 144010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1440110:	0005313a 	rdctl	r2,ipending
 1440114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 1440118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 144011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 1440120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1440124:	00800044 	movi	r2,1
 1440128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 144012c:	e0fffb17 	ldw	r3,-20(fp)
 1440130:	e0bffc17 	ldw	r2,-16(fp)
 1440134:	1884703a 	and	r2,r3,r2
 1440138:	10001426 	beq	r2,zero,144018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 144013c:	00805174 	movhi	r2,325
 1440140:	10888204 	addi	r2,r2,8712
 1440144:	e0fffd17 	ldw	r3,-12(fp)
 1440148:	180690fa 	slli	r3,r3,3
 144014c:	10c5883a 	add	r2,r2,r3
 1440150:	10c00017 	ldw	r3,0(r2)
 1440154:	00805174 	movhi	r2,325
 1440158:	10888204 	addi	r2,r2,8712
 144015c:	e13ffd17 	ldw	r4,-12(fp)
 1440160:	200890fa 	slli	r4,r4,3
 1440164:	1105883a 	add	r2,r2,r4
 1440168:	10800104 	addi	r2,r2,4
 144016c:	10800017 	ldw	r2,0(r2)
 1440170:	1009883a 	mov	r4,r2
 1440174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 1440178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 144017c:	0005313a 	rdctl	r2,ipending
 1440180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 1440184:	e0bfff17 	ldw	r2,-4(fp)
 1440188:	00000706 	br	14401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 144018c:	e0bffc17 	ldw	r2,-16(fp)
 1440190:	1085883a 	add	r2,r2,r2
 1440194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1440198:	e0bffd17 	ldw	r2,-12(fp)
 144019c:	10800044 	addi	r2,r2,1
 14401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 14401a4:	003fe106 	br	144012c <__alt_data_end+0xfffda92c>

    active = alt_irq_pending ();
 14401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 14401ac:	e0bffb17 	ldw	r2,-20(fp)
 14401b0:	103fdb1e 	bne	r2,zero,1440120 <__alt_data_end+0xfffda920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 14401b4:	0001883a 	nop
}
 14401b8:	e037883a 	mov	sp,fp
 14401bc:	dfc00117 	ldw	ra,4(sp)
 14401c0:	df000017 	ldw	fp,0(sp)
 14401c4:	dec00204 	addi	sp,sp,8
 14401c8:	f800283a 	ret

014401cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 14401cc:	defffb04 	addi	sp,sp,-20
 14401d0:	dfc00415 	stw	ra,16(sp)
 14401d4:	df000315 	stw	fp,12(sp)
 14401d8:	df000304 	addi	fp,sp,12
 14401dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 14401e0:	00bfffc4 	movi	r2,-1
 14401e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 14401e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 14401ec:	d0a32617 	ldw	r2,-29544(gp)
 14401f0:	10000726 	beq	r2,zero,1440210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 14401f4:	d0a32617 	ldw	r2,-29544(gp)
 14401f8:	e0fffd17 	ldw	r3,-12(fp)
 14401fc:	1809883a 	mov	r4,r3
 1440200:	e17fff17 	ldw	r5,-4(fp)
 1440204:	e1bffe17 	ldw	r6,-8(fp)
 1440208:	103ee83a 	callr	r2
 144020c:	00000206 	br	1440218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 1440210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 1440214:	0005883a 	mov	r2,zero
}
 1440218:	e037883a 	mov	sp,fp
 144021c:	dfc00117 	ldw	ra,4(sp)
 1440220:	df000017 	ldw	fp,0(sp)
 1440224:	dec00204 	addi	sp,sp,8
 1440228:	f800283a 	ret

Disassembly of section .text:

0144022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 144022c:	06c051b4 	movhi	sp,326
    ori sp, sp, %lo(__alt_stack_pointer)
 1440230:	ded60014 	ori	sp,sp,22528
    movhi gp, %hi(_gp)
 1440234:	06805174 	movhi	gp,325
    ori gp, gp, %lo(_gp)
 1440238:	d6a55114 	ori	gp,gp,38212
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 144023c:	00805174 	movhi	r2,325
    ori r2, r2, %lo(__bss_start)
 1440240:	10886a14 	ori	r2,r2,8616

    movhi r3, %hi(__bss_end)
 1440244:	00c05174 	movhi	r3,325
    ori r3, r3, %lo(__bss_end)
 1440248:	18c8c214 	ori	r3,r3,8968

    beq r2, r3, 1f
 144024c:	10c00326 	beq	r2,r3,144025c <_start+0x30>

0:
    stw zero, (r2)
 1440250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 1440254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 1440258:	10fffd36 	bltu	r2,r3,1440250 <__alt_data_end+0xfffdaa50>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 144025c:	144d3fc0 	call	144d3fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 1440260:	144d5a80 	call	144d5a8 <alt_main>

01440264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1440264:	003fff06 	br	1440264 <__alt_data_end+0xfffdaa64>

01440268 <main>:

#define HDC1000_I2C_ADDR 0x40


int main()
{
 1440268:	defff304 	addi	sp,sp,-52
 144026c:	dfc00c15 	stw	ra,48(sp)
 1440270:	df000b15 	stw	fp,44(sp)
 1440274:	dc000a15 	stw	r16,40(sp)
 1440278:	df000b04 	addi	fp,sp,44
  alt_u32 serial_no_high, serial_no_mid, serial_no_lo;

  double fTemp;
  double fHumidity;

  printf("Testing the HDC1000 via I2C...\n\n");
 144027c:	01005174 	movhi	r4,325
 1440280:	21014204 	addi	r4,r4,1288
 1440284:	14425400 	call	1442540 <puts>

  //Initialize I2C master controller at 100kHz, 50MHz Cpu clock.
  I2C_init(RH_TEMP_I2C_BASE,ALT_CPU_CPU_FREQ,100000);
 1440288:	0009883a 	mov	r4,zero
 144028c:	01413174 	movhi	r5,1221
 1440290:	296d0004 	addi	r5,r5,-19456
 1440294:	018000b4 	movhi	r6,2
 1440298:	31a1a804 	addi	r6,r6,-31072
 144029c:	144f2700 	call	144f270 <I2C_init>
  /***********************************************************************
   * read the HDC1000_MFR_ID (0xFE) - expected readback value: 0x5449    *
   ***********************************************************************/

   // Write address that is to be read from
 	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 14402a0:	0009883a 	mov	r4,zero
 14402a4:	01401004 	movi	r5,64
 14402a8:	000d883a 	mov	r6,zero
 14402ac:	144f3240 	call	144f324 <I2C_start>
 	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_MFR_ID,0); // where FAMILY_ID is the offset to the family id
 14402b0:	0009883a 	mov	r4,zero
 14402b4:	01403f84 	movi	r5,254
 14402b8:	000d883a 	mov	r6,zero
 14402bc:	144f43c0 	call	144f43c <I2C_write>

 	  // Set the start bit for a read command
 	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 14402c0:	0009883a 	mov	r4,zero
 14402c4:	01401004 	movi	r5,64
 14402c8:	01800044 	movi	r6,1
 14402cc:	144f3240 	call	144f324 <I2C_start>
 	  printf("HDC1000_MFR_ID: \t0x%02X%02X \n",I2C_read(RH_TEMP_I2C_BASE,0),I2C_read(RH_TEMP_I2C_BASE,1));
 14402d0:	0009883a 	mov	r4,zero
 14402d4:	000b883a 	mov	r5,zero
 14402d8:	144f3c00 	call	144f3c0 <I2C_read>
 14402dc:	1021883a 	mov	r16,r2
 14402e0:	0009883a 	mov	r4,zero
 14402e4:	01400044 	movi	r5,1
 14402e8:	144f3c00 	call	144f3c0 <I2C_read>
 14402ec:	01005174 	movhi	r4,325
 14402f0:	21014a04 	addi	r4,r4,1320
 14402f4:	800b883a 	mov	r5,r16
 14402f8:	100d883a 	mov	r6,r2
 14402fc:	144244c0 	call	144244c <printf>
  /***********************************************************************
   * read the HDC1000_DEVICE_ID (0xFF) - expected readback value: 0x1000 *
   ***********************************************************************/

  // Write address that is to be read from
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 1440300:	0009883a 	mov	r4,zero
 1440304:	01401004 	movi	r5,64
 1440308:	000d883a 	mov	r6,zero
 144030c:	144f3240 	call	144f324 <I2C_start>
	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_DEVICE_ID,0); // where FAMILY_ID is the offset to the family id
 1440310:	0009883a 	mov	r4,zero
 1440314:	01403fc4 	movi	r5,255
 1440318:	000d883a 	mov	r6,zero
 144031c:	144f43c0 	call	144f43c <I2C_write>

	  // Set the start bit for a read command
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 1440320:	0009883a 	mov	r4,zero
 1440324:	01401004 	movi	r5,64
 1440328:	01800044 	movi	r6,1
 144032c:	144f3240 	call	144f324 <I2C_start>
	  printf("HDC1000_DEVICE_ID: \t0x%02X%02X \n\n",I2C_read(RH_TEMP_I2C_BASE,0),I2C_read(RH_TEMP_I2C_BASE,1));
 1440330:	0009883a 	mov	r4,zero
 1440334:	000b883a 	mov	r5,zero
 1440338:	144f3c00 	call	144f3c0 <I2C_read>
 144033c:	1021883a 	mov	r16,r2
 1440340:	0009883a 	mov	r4,zero
 1440344:	01400044 	movi	r5,1
 1440348:	144f3c00 	call	144f3c0 <I2C_read>
 144034c:	01005174 	movhi	r4,325
 1440350:	21015204 	addi	r4,r4,1352
 1440354:	800b883a 	mov	r5,r16
 1440358:	100d883a 	mov	r6,r2
 144035c:	144244c0 	call	144244c <printf>
  /***********************************************************************
   * read the HDC1000 Unique ID Serial Number
   ***********************************************************************/

  // Write address that is to be read from
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 1440360:	0009883a 	mov	r4,zero
 1440364:	01401004 	movi	r5,64
 1440368:	000d883a 	mov	r6,zero
 144036c:	144f3240 	call	144f324 <I2C_start>
	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_HI_SERIAL,0); // where FAMILY_ID is the offset to the family id
 1440370:	0009883a 	mov	r4,zero
 1440374:	01403ec4 	movi	r5,251
 1440378:	000d883a 	mov	r6,zero
 144037c:	144f43c0 	call	144f43c <I2C_write>

	  // Set the start bit for a read command
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 1440380:	0009883a 	mov	r4,zero
 1440384:	01401004 	movi	r5,64
 1440388:	01800044 	movi	r6,1
 144038c:	144f3240 	call	144f324 <I2C_start>
	  serial_no_high = I2C_read(RH_TEMP_I2C_BASE,0);
 1440390:	0009883a 	mov	r4,zero
 1440394:	000b883a 	mov	r5,zero
 1440398:	144f3c00 	call	144f3c0 <I2C_read>
 144039c:	e0bff515 	stw	r2,-44(fp)
	  serial_no_high = serial_no_high<<8 | I2C_read(RH_TEMP_I2C_BASE,1);
 14403a0:	e0bff517 	ldw	r2,-44(fp)
 14403a4:	1020923a 	slli	r16,r2,8
 14403a8:	0009883a 	mov	r4,zero
 14403ac:	01400044 	movi	r5,1
 14403b0:	144f3c00 	call	144f3c0 <I2C_read>
 14403b4:	8084b03a 	or	r2,r16,r2
 14403b8:	e0bff515 	stw	r2,-44(fp)

  // Write address that is to be read from
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 14403bc:	0009883a 	mov	r4,zero
 14403c0:	01401004 	movi	r5,64
 14403c4:	000d883a 	mov	r6,zero
 14403c8:	144f3240 	call	144f324 <I2C_start>
	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_MID_SERIAL,0); // where FAMILY_ID is the offset to the family id
 14403cc:	0009883a 	mov	r4,zero
 14403d0:	01403f04 	movi	r5,252
 14403d4:	000d883a 	mov	r6,zero
 14403d8:	144f43c0 	call	144f43c <I2C_write>

	  // Set the start bit for a read command
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 14403dc:	0009883a 	mov	r4,zero
 14403e0:	01401004 	movi	r5,64
 14403e4:	01800044 	movi	r6,1
 14403e8:	144f3240 	call	144f324 <I2C_start>
	  serial_no_mid  = I2C_read(RH_TEMP_I2C_BASE,0);
 14403ec:	0009883a 	mov	r4,zero
 14403f0:	000b883a 	mov	r5,zero
 14403f4:	144f3c00 	call	144f3c0 <I2C_read>
 14403f8:	e0bff615 	stw	r2,-40(fp)
	  serial_no_mid  = serial_no_mid<<8 | I2C_read(RH_TEMP_I2C_BASE,1);
 14403fc:	e0bff617 	ldw	r2,-40(fp)
 1440400:	1020923a 	slli	r16,r2,8
 1440404:	0009883a 	mov	r4,zero
 1440408:	01400044 	movi	r5,1
 144040c:	144f3c00 	call	144f3c0 <I2C_read>
 1440410:	8084b03a 	or	r2,r16,r2
 1440414:	e0bff615 	stw	r2,-40(fp)

  // Write address that is to be read from
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 1440418:	0009883a 	mov	r4,zero
 144041c:	01401004 	movi	r5,64
 1440420:	000d883a 	mov	r6,zero
 1440424:	144f3240 	call	144f324 <I2C_start>
	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_LO_SERIAL,0); // where FAMILY_ID is the offset to the family id
 1440428:	0009883a 	mov	r4,zero
 144042c:	01403f44 	movi	r5,253
 1440430:	000d883a 	mov	r6,zero
 1440434:	144f43c0 	call	144f43c <I2C_write>

	  // Set the start bit for a read command
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 1440438:	0009883a 	mov	r4,zero
 144043c:	01401004 	movi	r5,64
 1440440:	01800044 	movi	r6,1
 1440444:	144f3240 	call	144f324 <I2C_start>
	  serial_no_lo   = I2C_read(RH_TEMP_I2C_BASE,1);
 1440448:	0009883a 	mov	r4,zero
 144044c:	01400044 	movi	r5,1
 1440450:	144f3c00 	call	144f3c0 <I2C_read>
 1440454:	e0bff715 	stw	r2,-36(fp)

	  printf("HDC1000 Serial No: \t0x%04X%04X%02X \n\n",serial_no_high,serial_no_mid,serial_no_lo);
 1440458:	01005174 	movhi	r4,325
 144045c:	21015b04 	addi	r4,r4,1388
 1440460:	e17ff517 	ldw	r5,-44(fp)
 1440464:	e1bff617 	ldw	r6,-40(fp)
 1440468:	e1fff717 	ldw	r7,-36(fp)
 144046c:	144244c0 	call	144244c <printf>

  /************************************************************************************************
   * Configure the HDC1000, ensure bit 12 is set; High byte is transferred first then the low byte
   ************************************************************************************************/
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 1440470:	0009883a 	mov	r4,zero
 1440474:	01401004 	movi	r5,64
 1440478:	000d883a 	mov	r6,zero
 144047c:	144f3240 	call	144f324 <I2C_start>
	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_CONFIG,0);
 1440480:	0009883a 	mov	r4,zero
 1440484:	01400084 	movi	r5,2
 1440488:	000d883a 	mov	r6,zero
 144048c:	144f43c0 	call	144f43c <I2C_write>
	  I2C_write(RH_TEMP_I2C_BASE,0x10,0);	// 0x10 is BIT(12), the mode bit
 1440490:	0009883a 	mov	r4,zero
 1440494:	01400404 	movi	r5,16
 1440498:	000d883a 	mov	r6,zero
 144049c:	144f43c0 	call	144f43c <I2C_write>
	  I2C_write(RH_TEMP_I2C_BASE,0x00,1);
 14404a0:	0009883a 	mov	r4,zero
 14404a4:	000b883a 	mov	r5,zero
 14404a8:	01800044 	movi	r6,1
 14404ac:	144f43c0 	call	144f43c <I2C_write>

  /*************************************************************************************
   * Read the temperature and the humidity words consecutively						   *
   *************************************************************************************/
	  printf("Beginning Temperature and Humidity Capture\n");
 14404b0:	01005174 	movhi	r4,325
 14404b4:	21016504 	addi	r4,r4,1428
 14404b8:	14425400 	call	1442540 <puts>

  	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,0);
 14404bc:	0009883a 	mov	r4,zero
 14404c0:	01401004 	movi	r5,64
 14404c4:	000d883a 	mov	r6,zero
 14404c8:	144f3240 	call	144f324 <I2C_start>
  	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_TEMP,0);
 14404cc:	0009883a 	mov	r4,zero
 14404d0:	000b883a 	mov	r5,zero
 14404d4:	000d883a 	mov	r6,zero
 14404d8:	144f43c0 	call	144f43c <I2C_write>
  	  I2C_write(RH_TEMP_I2C_BASE,HDC1000_REG_TEMP,0); // writing 0 to reg temp register to initiate sample
 14404dc:	0009883a 	mov	r4,zero
 14404e0:	000b883a 	mov	r5,zero
 14404e4:	000d883a 	mov	r6,zero
 14404e8:	144f43c0 	call	144f43c <I2C_write>


  	  printf("Waiting for Temperature and Humidity Capture Complete\n\n");
 14404ec:	01005174 	movhi	r4,325
 14404f0:	21017004 	addi	r4,r4,1472
 14404f4:	14425400 	call	1442540 <puts>

	  //wait for data ready, poll the drdyn pin
	  while(IORD_ALTERA_AVALON_PIO_DATA(RH_TEMP_DRDYN_BASE)!=0);
 14404f8:	0001883a 	nop
 14404fc:	00802004 	movi	r2,128
 1440500:	10800037 	ldwio	r2,0(r2)
 1440504:	103ffd1e 	bne	r2,zero,14404fc <__alt_data_end+0xfffdacfc>

	  // Set the start bit for a read command
	  I2C_start(RH_TEMP_I2C_BASE,HDC1000_I2C_ADDR,1);
 1440508:	0009883a 	mov	r4,zero
 144050c:	01401004 	movi	r5,64
 1440510:	01800044 	movi	r6,1
 1440514:	144f3240 	call	144f324 <I2C_start>
	  // temperature data
	  thigh = I2C_read(RH_TEMP_I2C_BASE,0); // MS Byte first
 1440518:	0009883a 	mov	r4,zero
 144051c:	000b883a 	mov	r5,zero
 1440520:	144f3c00 	call	144f3c0 <I2C_read>
 1440524:	e0bff80d 	sth	r2,-32(fp)
	  tlow = I2C_read(RH_TEMP_I2C_BASE,0);
 1440528:	0009883a 	mov	r4,zero
 144052c:	000b883a 	mov	r5,zero
 1440530:	144f3c00 	call	144f3c0 <I2C_read>
 1440534:	e0bff88d 	sth	r2,-30(fp)
	  // followed by humidity data
	  hhigh = I2C_read(RH_TEMP_I2C_BASE,0);
 1440538:	0009883a 	mov	r4,zero
 144053c:	000b883a 	mov	r5,zero
 1440540:	144f3c00 	call	144f3c0 <I2C_read>
 1440544:	e0bff90d 	sth	r2,-28(fp)
	  hlow = I2C_read(RH_TEMP_I2C_BASE,1);
 1440548:	0009883a 	mov	r4,zero
 144054c:	01400044 	movi	r5,1
 1440550:	144f3c00 	call	144f3c0 <I2C_read>
 1440554:	e0bff98d 	sth	r2,-26(fp)

	  temperature = thigh<<8|tlow;
 1440558:	e0bff80b 	ldhu	r2,-32(fp)
 144055c:	1004923a 	slli	r2,r2,8
 1440560:	1007883a 	mov	r3,r2
 1440564:	e0bff88b 	ldhu	r2,-30(fp)
 1440568:	1884b03a 	or	r2,r3,r2
 144056c:	e0bffa0d 	sth	r2,-24(fp)
	  humidity = hhigh<<8|hlow;
 1440570:	e0bff90b 	ldhu	r2,-28(fp)
 1440574:	1004923a 	slli	r2,r2,8
 1440578:	1007883a 	mov	r3,r2
 144057c:	e0bff98b 	ldhu	r2,-26(fp)
 1440580:	1884b03a 	or	r2,r3,r2
 1440584:	e0bffa8d 	sth	r2,-22(fp)

	  printf("Raw Temperature: \t%d\n",temperature);
 1440588:	e0bffa0b 	ldhu	r2,-24(fp)
 144058c:	01005174 	movhi	r4,325
 1440590:	21017e04 	addi	r4,r4,1528
 1440594:	100b883a 	mov	r5,r2
 1440598:	144244c0 	call	144244c <printf>
	  printf("Raw Humidity: \t%d\n",humidity);
 144059c:	e0bffa8b 	ldhu	r2,-22(fp)
 14405a0:	01005174 	movhi	r4,325
 14405a4:	21018404 	addi	r4,r4,1552
 14405a8:	100b883a 	mov	r5,r2
 14405ac:	144244c0 	call	144244c <printf>


	  fTemp = (double)(((temperature/65535.0L)*165.0L)-40.0L);
 14405b0:	e0bffa0b 	ldhu	r2,-24(fp)
 14405b4:	1009883a 	mov	r4,r2
 14405b8:	14421980 	call	1442198 <__floatsidf>
 14405bc:	100b883a 	mov	r5,r2
 14405c0:	180d883a 	mov	r6,r3
 14405c4:	2809883a 	mov	r4,r5
 14405c8:	300b883a 	mov	r5,r6
 14405cc:	000d883a 	mov	r6,zero
 14405d0:	01d03c34 	movhi	r7,16624
 14405d4:	39fff804 	addi	r7,r7,-32
 14405d8:	14406dc0 	call	14406dc <__divdf3>
 14405dc:	1009883a 	mov	r4,r2
 14405e0:	180b883a 	mov	r5,r3
 14405e4:	2005883a 	mov	r2,r4
 14405e8:	2807883a 	mov	r3,r5
 14405ec:	1009883a 	mov	r4,r2
 14405f0:	180b883a 	mov	r5,r3
 14405f4:	000d883a 	mov	r6,zero
 14405f8:	01d01974 	movhi	r7,16485
 14405fc:	39e80004 	addi	r7,r7,-24576
 1440600:	144105c0 	call	144105c <__muldf3>
 1440604:	1009883a 	mov	r4,r2
 1440608:	180b883a 	mov	r5,r3
 144060c:	2005883a 	mov	r2,r4
 1440610:	2807883a 	mov	r3,r5
 1440614:	1009883a 	mov	r4,r2
 1440618:	180b883a 	mov	r5,r3
 144061c:	000d883a 	mov	r6,zero
 1440620:	01d01134 	movhi	r7,16452
 1440624:	14418c80 	call	14418c8 <__subdf3>
 1440628:	1009883a 	mov	r4,r2
 144062c:	180b883a 	mov	r5,r3
 1440630:	e13ffb15 	stw	r4,-20(fp)
 1440634:	e17ffc15 	stw	r5,-16(fp)
	  fHumidity = (double)(humidity/65535.0L*100.0L);
 1440638:	e0bffa8b 	ldhu	r2,-22(fp)
 144063c:	1009883a 	mov	r4,r2
 1440640:	14421980 	call	1442198 <__floatsidf>
 1440644:	100b883a 	mov	r5,r2
 1440648:	180d883a 	mov	r6,r3
 144064c:	2809883a 	mov	r4,r5
 1440650:	300b883a 	mov	r5,r6
 1440654:	000d883a 	mov	r6,zero
 1440658:	01d03c34 	movhi	r7,16624
 144065c:	39fff804 	addi	r7,r7,-32
 1440660:	14406dc0 	call	14406dc <__divdf3>
 1440664:	1009883a 	mov	r4,r2
 1440668:	180b883a 	mov	r5,r3
 144066c:	2005883a 	mov	r2,r4
 1440670:	2807883a 	mov	r3,r5
 1440674:	1009883a 	mov	r4,r2
 1440678:	180b883a 	mov	r5,r3
 144067c:	000d883a 	mov	r6,zero
 1440680:	01d01674 	movhi	r7,16473
 1440684:	144105c0 	call	144105c <__muldf3>
 1440688:	1009883a 	mov	r4,r2
 144068c:	180b883a 	mov	r5,r3
 1440690:	e13ffd15 	stw	r4,-12(fp)
 1440694:	e17ffe15 	stw	r5,-8(fp)
	  printf("Actual Temperature: \t%.2f degC\n",fTemp);
 1440698:	01005174 	movhi	r4,325
 144069c:	21018904 	addi	r4,r4,1572
 14406a0:	e17ffb17 	ldw	r5,-20(fp)
 14406a4:	e1bffc17 	ldw	r6,-16(fp)
 14406a8:	144244c0 	call	144244c <printf>
	  printf("Actual Humidity: \t%.2f%% RH\n",fHumidity);
 14406ac:	01005174 	movhi	r4,325
 14406b0:	21019104 	addi	r4,r4,1604
 14406b4:	e17ffd17 	ldw	r5,-12(fp)
 14406b8:	e1bffe17 	ldw	r6,-8(fp)
 14406bc:	144244c0 	call	144244c <printf>


  return;
 14406c0:	0001883a 	nop

}
 14406c4:	e6ffff04 	addi	sp,fp,-4
 14406c8:	dfc00217 	ldw	ra,8(sp)
 14406cc:	df000117 	ldw	fp,4(sp)
 14406d0:	dc000017 	ldw	r16,0(sp)
 14406d4:	dec00304 	addi	sp,sp,12
 14406d8:	f800283a 	ret

014406dc <__divdf3>:
 14406dc:	defff004 	addi	sp,sp,-64
 14406e0:	dc800815 	stw	r18,32(sp)
 14406e4:	2824d53a 	srli	r18,r5,20
 14406e8:	dd800c15 	stw	r22,48(sp)
 14406ec:	282cd7fa 	srli	r22,r5,31
 14406f0:	dc000615 	stw	r16,24(sp)
 14406f4:	04000434 	movhi	r16,16
 14406f8:	df000e15 	stw	fp,56(sp)
 14406fc:	dd000a15 	stw	r20,40(sp)
 1440700:	dcc00915 	stw	r19,36(sp)
 1440704:	dc400715 	stw	r17,28(sp)
 1440708:	843fffc4 	addi	r16,r16,-1
 144070c:	dfc00f15 	stw	ra,60(sp)
 1440710:	ddc00d15 	stw	r23,52(sp)
 1440714:	dd400b15 	stw	r21,44(sp)
 1440718:	9481ffcc 	andi	r18,r18,2047
 144071c:	2029883a 	mov	r20,r4
 1440720:	2027883a 	mov	r19,r4
 1440724:	2c22703a 	and	r17,r5,r16
 1440728:	b7003fcc 	andi	fp,r22,255
 144072c:	90005e26 	beq	r18,zero,14408a8 <__divdf3+0x1cc>
 1440730:	0081ffc4 	movi	r2,2047
 1440734:	90803526 	beq	r18,r2,144080c <__divdf3+0x130>
 1440738:	8c000434 	orhi	r16,r17,16
 144073c:	2004d77a 	srli	r2,r4,29
 1440740:	802090fa 	slli	r16,r16,3
 1440744:	202690fa 	slli	r19,r4,3
 1440748:	94bf0044 	addi	r18,r18,-1023
 144074c:	80a2b03a 	or	r17,r16,r2
 1440750:	0029883a 	mov	r20,zero
 1440754:	0011883a 	mov	r8,zero
 1440758:	380ad53a 	srli	r5,r7,20
 144075c:	382ed7fa 	srli	r23,r7,31
 1440760:	04000434 	movhi	r16,16
 1440764:	843fffc4 	addi	r16,r16,-1
 1440768:	2941ffcc 	andi	r5,r5,2047
 144076c:	302b883a 	mov	r21,r6
 1440770:	3c20703a 	and	r16,r7,r16
 1440774:	ba403fcc 	andi	r9,r23,255
 1440778:	28006726 	beq	r5,zero,1440918 <__divdf3+0x23c>
 144077c:	0081ffc4 	movi	r2,2047
 1440780:	28805f26 	beq	r5,r2,1440900 <__divdf3+0x224>
 1440784:	84000434 	orhi	r16,r16,16
 1440788:	3004d77a 	srli	r2,r6,29
 144078c:	802090fa 	slli	r16,r16,3
 1440790:	302a90fa 	slli	r21,r6,3
 1440794:	297f0044 	addi	r5,r5,-1023
 1440798:	80a0b03a 	or	r16,r16,r2
 144079c:	000f883a 	mov	r7,zero
 14407a0:	3d06b03a 	or	r3,r7,r20
 14407a4:	180690ba 	slli	r3,r3,2
 14407a8:	00805134 	movhi	r2,324
 14407ac:	1081f304 	addi	r2,r2,1996
 14407b0:	1885883a 	add	r2,r3,r2
 14407b4:	10800017 	ldw	r2,0(r2)
 14407b8:	b5c8f03a 	xor	r4,r22,r23
 14407bc:	200d883a 	mov	r6,r4
 14407c0:	25003fcc 	andi	r20,r4,255
 14407c4:	9165c83a 	sub	r18,r18,r5
 14407c8:	1000683a 	jmp	r2
 14407cc:	01440a14 	movui	r5,4136
 14407d0:	01440844 	movi	r5,4129
 14407d4:	014409d8 	cmpnei	r5,zero,4135
 14407d8:	01440828 	cmpgeui	r5,zero,4128
 14407dc:	014409d8 	cmpnei	r5,zero,4135
 14407e0:	014409ac 	andhi	r5,zero,4134
 14407e4:	014409d8 	cmpnei	r5,zero,4135
 14407e8:	01440828 	cmpgeui	r5,zero,4128
 14407ec:	01440844 	movi	r5,4129
 14407f0:	01440844 	movi	r5,4129
 14407f4:	014409ac 	andhi	r5,zero,4134
 14407f8:	01440828 	cmpgeui	r5,zero,4128
 14407fc:	01440838 	rdprs	r5,zero,4128
 1440800:	01440838 	rdprs	r5,zero,4128
 1440804:	01440838 	rdprs	r5,zero,4128
 1440808:	014409e8 	cmpgeui	r5,zero,4135
 144080c:	8904b03a 	or	r2,r17,r4
 1440810:	1000631e 	bne	r2,zero,14409a0 <__divdf3+0x2c4>
 1440814:	05000204 	movi	r20,8
 1440818:	0023883a 	mov	r17,zero
 144081c:	0027883a 	mov	r19,zero
 1440820:	02000084 	movi	r8,2
 1440824:	003fcc06 	br	1440758 <__alt_data_end+0xfffdaf58>
 1440828:	8023883a 	mov	r17,r16
 144082c:	a827883a 	mov	r19,r21
 1440830:	4839883a 	mov	fp,r9
 1440834:	3811883a 	mov	r8,r7
 1440838:	00800084 	movi	r2,2
 144083c:	4081531e 	bne	r8,r2,1440d8c <__divdf3+0x6b0>
 1440840:	e029883a 	mov	r20,fp
 1440844:	a180004c 	andi	r6,r20,1
 1440848:	0201ffc4 	movi	r8,2047
 144084c:	000b883a 	mov	r5,zero
 1440850:	0027883a 	mov	r19,zero
 1440854:	4010953a 	slli	r8,r8,20
 1440858:	30c03fcc 	andi	r3,r6,255
 144085c:	04000434 	movhi	r16,16
 1440860:	180697fa 	slli	r3,r3,31
 1440864:	843fffc4 	addi	r16,r16,-1
 1440868:	2c20703a 	and	r16,r5,r16
 144086c:	8220b03a 	or	r16,r16,r8
 1440870:	80c6b03a 	or	r3,r16,r3
 1440874:	9805883a 	mov	r2,r19
 1440878:	dfc00f17 	ldw	ra,60(sp)
 144087c:	df000e17 	ldw	fp,56(sp)
 1440880:	ddc00d17 	ldw	r23,52(sp)
 1440884:	dd800c17 	ldw	r22,48(sp)
 1440888:	dd400b17 	ldw	r21,44(sp)
 144088c:	dd000a17 	ldw	r20,40(sp)
 1440890:	dcc00917 	ldw	r19,36(sp)
 1440894:	dc800817 	ldw	r18,32(sp)
 1440898:	dc400717 	ldw	r17,28(sp)
 144089c:	dc000617 	ldw	r16,24(sp)
 14408a0:	dec01004 	addi	sp,sp,64
 14408a4:	f800283a 	ret
 14408a8:	8904b03a 	or	r2,r17,r4
 14408ac:	10003726 	beq	r2,zero,144098c <__divdf3+0x2b0>
 14408b0:	88014d26 	beq	r17,zero,1440de8 <__divdf3+0x70c>
 14408b4:	8809883a 	mov	r4,r17
 14408b8:	d9800215 	stw	r6,8(sp)
 14408bc:	d9c00515 	stw	r7,20(sp)
 14408c0:	14422680 	call	1442268 <__clzsi2>
 14408c4:	d9800217 	ldw	r6,8(sp)
 14408c8:	d9c00517 	ldw	r7,20(sp)
 14408cc:	1007883a 	mov	r3,r2
 14408d0:	01000a04 	movi	r4,40
 14408d4:	1cfffe04 	addi	r19,r3,-8
 14408d8:	20c9c83a 	sub	r4,r4,r3
 14408dc:	8cca983a 	sll	r5,r17,r19
 14408e0:	a108d83a 	srl	r4,r20,r4
 14408e4:	a4e6983a 	sll	r19,r20,r19
 14408e8:	2162b03a 	or	r17,r4,r5
 14408ec:	04bf0344 	movi	r18,-1011
 14408f0:	90e5c83a 	sub	r18,r18,r3
 14408f4:	0029883a 	mov	r20,zero
 14408f8:	0011883a 	mov	r8,zero
 14408fc:	003f9606 	br	1440758 <__alt_data_end+0xfffdaf58>
 1440900:	8184b03a 	or	r2,r16,r6
 1440904:	10001f1e 	bne	r2,zero,1440984 <__divdf3+0x2a8>
 1440908:	0021883a 	mov	r16,zero
 144090c:	002b883a 	mov	r21,zero
 1440910:	01c00084 	movi	r7,2
 1440914:	003fa206 	br	14407a0 <__alt_data_end+0xfffdafa0>
 1440918:	8184b03a 	or	r2,r16,r6
 144091c:	10001526 	beq	r2,zero,1440974 <__divdf3+0x298>
 1440920:	80013d26 	beq	r16,zero,1440e18 <__divdf3+0x73c>
 1440924:	8009883a 	mov	r4,r16
 1440928:	d9800215 	stw	r6,8(sp)
 144092c:	da000315 	stw	r8,12(sp)
 1440930:	da400415 	stw	r9,16(sp)
 1440934:	14422680 	call	1442268 <__clzsi2>
 1440938:	d9800217 	ldw	r6,8(sp)
 144093c:	da000317 	ldw	r8,12(sp)
 1440940:	da400417 	ldw	r9,16(sp)
 1440944:	1007883a 	mov	r3,r2
 1440948:	01000a04 	movi	r4,40
 144094c:	1d7ffe04 	addi	r21,r3,-8
 1440950:	20c9c83a 	sub	r4,r4,r3
 1440954:	8560983a 	sll	r16,r16,r21
 1440958:	3108d83a 	srl	r4,r6,r4
 144095c:	356a983a 	sll	r21,r6,r21
 1440960:	2420b03a 	or	r16,r4,r16
 1440964:	017f0344 	movi	r5,-1011
 1440968:	28cbc83a 	sub	r5,r5,r3
 144096c:	000f883a 	mov	r7,zero
 1440970:	003f8b06 	br	14407a0 <__alt_data_end+0xfffdafa0>
 1440974:	0021883a 	mov	r16,zero
 1440978:	002b883a 	mov	r21,zero
 144097c:	01c00044 	movi	r7,1
 1440980:	003f8706 	br	14407a0 <__alt_data_end+0xfffdafa0>
 1440984:	01c000c4 	movi	r7,3
 1440988:	003f8506 	br	14407a0 <__alt_data_end+0xfffdafa0>
 144098c:	05000104 	movi	r20,4
 1440990:	0023883a 	mov	r17,zero
 1440994:	0027883a 	mov	r19,zero
 1440998:	02000044 	movi	r8,1
 144099c:	003f6e06 	br	1440758 <__alt_data_end+0xfffdaf58>
 14409a0:	05000304 	movi	r20,12
 14409a4:	020000c4 	movi	r8,3
 14409a8:	003f6b06 	br	1440758 <__alt_data_end+0xfffdaf58>
 14409ac:	01400434 	movhi	r5,16
 14409b0:	000d883a 	mov	r6,zero
 14409b4:	297fffc4 	addi	r5,r5,-1
 14409b8:	04ffffc4 	movi	r19,-1
 14409bc:	0201ffc4 	movi	r8,2047
 14409c0:	003fa406 	br	1440854 <__alt_data_end+0xfffdb054>
 14409c4:	043f0084 	movi	r16,-1022
 14409c8:	84a1c83a 	sub	r16,r16,r18
 14409cc:	00800e04 	movi	r2,56
 14409d0:	14014d0e 	bge	r2,r16,1440f08 <__divdf3+0x82c>
 14409d4:	a180004c 	andi	r6,r20,1
 14409d8:	0011883a 	mov	r8,zero
 14409dc:	000b883a 	mov	r5,zero
 14409e0:	0027883a 	mov	r19,zero
 14409e4:	003f9b06 	br	1440854 <__alt_data_end+0xfffdb054>
 14409e8:	8880022c 	andhi	r2,r17,8
 14409ec:	1000f026 	beq	r2,zero,1440db0 <__divdf3+0x6d4>
 14409f0:	8080022c 	andhi	r2,r16,8
 14409f4:	1000ee1e 	bne	r2,zero,1440db0 <__divdf3+0x6d4>
 14409f8:	00800434 	movhi	r2,16
 14409fc:	81400234 	orhi	r5,r16,8
 1440a00:	10bfffc4 	addi	r2,r2,-1
 1440a04:	b80d883a 	mov	r6,r23
 1440a08:	288a703a 	and	r5,r5,r2
 1440a0c:	a827883a 	mov	r19,r21
 1440a10:	003fea06 	br	14409bc <__alt_data_end+0xfffdb1bc>
 1440a14:	84411c36 	bltu	r16,r17,1440e88 <__divdf3+0x7ac>
 1440a18:	8c011a26 	beq	r17,r16,1440e84 <__divdf3+0x7a8>
 1440a1c:	94bfffc4 	addi	r18,r18,-1
 1440a20:	dcc00015 	stw	r19,0(sp)
 1440a24:	8811883a 	mov	r8,r17
 1440a28:	002d883a 	mov	r22,zero
 1440a2c:	a80cd63a 	srli	r6,r21,24
 1440a30:	8020923a 	slli	r16,r16,8
 1440a34:	a82a923a 	slli	r21,r21,8
 1440a38:	4009883a 	mov	r4,r8
 1440a3c:	342eb03a 	or	r23,r6,r16
 1440a40:	dd400115 	stw	r21,4(sp)
 1440a44:	b82ad43a 	srli	r21,r23,16
 1440a48:	da000315 	stw	r8,12(sp)
 1440a4c:	bcffffcc 	andi	r19,r23,65535
 1440a50:	a80b883a 	mov	r5,r21
 1440a54:	14423e80 	call	14423e8 <__udivsi3>
 1440a58:	1009883a 	mov	r4,r2
 1440a5c:	980b883a 	mov	r5,r19
 1440a60:	1023883a 	mov	r17,r2
 1440a64:	14423f80 	call	14423f8 <__mulsi3>
 1440a68:	da000317 	ldw	r8,12(sp)
 1440a6c:	a80b883a 	mov	r5,r21
 1440a70:	1039883a 	mov	fp,r2
 1440a74:	4009883a 	mov	r4,r8
 1440a78:	14423f00 	call	14423f0 <__umodsi3>
 1440a7c:	d8c00017 	ldw	r3,0(sp)
 1440a80:	1004943a 	slli	r2,r2,16
 1440a84:	1810d43a 	srli	r8,r3,16
 1440a88:	120eb03a 	or	r7,r2,r8
 1440a8c:	3f00062e 	bgeu	r7,fp,1440aa8 <__divdf3+0x3cc>
 1440a90:	3dcf883a 	add	r7,r7,r23
 1440a94:	88bfffc4 	addi	r2,r17,-1
 1440a98:	3dc10a36 	bltu	r7,r23,1440ec4 <__divdf3+0x7e8>
 1440a9c:	3f01092e 	bgeu	r7,fp,1440ec4 <__divdf3+0x7e8>
 1440aa0:	8c7fff84 	addi	r17,r17,-2
 1440aa4:	3dcf883a 	add	r7,r7,r23
 1440aa8:	3f39c83a 	sub	fp,r7,fp
 1440aac:	e009883a 	mov	r4,fp
 1440ab0:	a80b883a 	mov	r5,r21
 1440ab4:	14423e80 	call	14423e8 <__udivsi3>
 1440ab8:	1009883a 	mov	r4,r2
 1440abc:	980b883a 	mov	r5,r19
 1440ac0:	1021883a 	mov	r16,r2
 1440ac4:	14423f80 	call	14423f8 <__mulsi3>
 1440ac8:	e009883a 	mov	r4,fp
 1440acc:	a80b883a 	mov	r5,r21
 1440ad0:	d8800315 	stw	r2,12(sp)
 1440ad4:	14423f00 	call	14423f0 <__umodsi3>
 1440ad8:	d9000017 	ldw	r4,0(sp)
 1440adc:	1004943a 	slli	r2,r2,16
 1440ae0:	da000317 	ldw	r8,12(sp)
 1440ae4:	20ffffcc 	andi	r3,r4,65535
 1440ae8:	10ceb03a 	or	r7,r2,r3
 1440aec:	3a00062e 	bgeu	r7,r8,1440b08 <__divdf3+0x42c>
 1440af0:	3dcf883a 	add	r7,r7,r23
 1440af4:	80bfffc4 	addi	r2,r16,-1
 1440af8:	3dc0f036 	bltu	r7,r23,1440ebc <__divdf3+0x7e0>
 1440afc:	3a00ef2e 	bgeu	r7,r8,1440ebc <__divdf3+0x7e0>
 1440b00:	843fff84 	addi	r16,r16,-2
 1440b04:	3dcf883a 	add	r7,r7,r23
 1440b08:	d8c00117 	ldw	r3,4(sp)
 1440b0c:	8822943a 	slli	r17,r17,16
 1440b10:	3a0fc83a 	sub	r7,r7,r8
 1440b14:	1806d43a 	srli	r3,r3,16
 1440b18:	8462b03a 	or	r17,r16,r17
 1440b1c:	8affffcc 	andi	r11,r17,65535
 1440b20:	d8c00015 	stw	r3,0(sp)
 1440b24:	d8c00117 	ldw	r3,4(sp)
 1440b28:	8820d43a 	srli	r16,r17,16
 1440b2c:	5809883a 	mov	r4,r11
 1440b30:	1f3fffcc 	andi	fp,r3,65535
 1440b34:	e00b883a 	mov	r5,fp
 1440b38:	d9c00515 	stw	r7,20(sp)
 1440b3c:	dac00215 	stw	r11,8(sp)
 1440b40:	14423f80 	call	14423f8 <__mulsi3>
 1440b44:	8009883a 	mov	r4,r16
 1440b48:	e00b883a 	mov	r5,fp
 1440b4c:	d8800415 	stw	r2,16(sp)
 1440b50:	14423f80 	call	14423f8 <__mulsi3>
 1440b54:	d9400017 	ldw	r5,0(sp)
 1440b58:	8009883a 	mov	r4,r16
 1440b5c:	d8800315 	stw	r2,12(sp)
 1440b60:	14423f80 	call	14423f8 <__mulsi3>
 1440b64:	dac00217 	ldw	r11,8(sp)
 1440b68:	d9400017 	ldw	r5,0(sp)
 1440b6c:	d8800215 	stw	r2,8(sp)
 1440b70:	5809883a 	mov	r4,r11
 1440b74:	14423f80 	call	14423f8 <__mulsi3>
 1440b78:	da400417 	ldw	r9,16(sp)
 1440b7c:	da800317 	ldw	r10,12(sp)
 1440b80:	d9c00517 	ldw	r7,20(sp)
 1440b84:	480ad43a 	srli	r5,r9,16
 1440b88:	5085883a 	add	r2,r10,r2
 1440b8c:	db000217 	ldw	r12,8(sp)
 1440b90:	1151883a 	add	r8,r2,r5
 1440b94:	4280022e 	bgeu	r8,r10,1440ba0 <__divdf3+0x4c4>
 1440b98:	00800074 	movhi	r2,1
 1440b9c:	6099883a 	add	r12,r12,r2
 1440ba0:	400ad43a 	srli	r5,r8,16
 1440ba4:	4010943a 	slli	r8,r8,16
 1440ba8:	4c3fffcc 	andi	r16,r9,65535
 1440bac:	6149883a 	add	r4,r12,r5
 1440bb0:	4411883a 	add	r8,r8,r16
 1440bb4:	3900a736 	bltu	r7,r4,1440e54 <__divdf3+0x778>
 1440bb8:	3900c426 	beq	r7,r4,1440ecc <__divdf3+0x7f0>
 1440bbc:	3909c83a 	sub	r4,r7,r4
 1440bc0:	b221c83a 	sub	r16,r22,r8
 1440bc4:	b42d803a 	cmpltu	r22,r22,r16
 1440bc8:	25adc83a 	sub	r22,r4,r22
 1440bcc:	b5c0c626 	beq	r22,r23,1440ee8 <__divdf3+0x80c>
 1440bd0:	b009883a 	mov	r4,r22
 1440bd4:	a80b883a 	mov	r5,r21
 1440bd8:	14423e80 	call	14423e8 <__udivsi3>
 1440bdc:	1009883a 	mov	r4,r2
 1440be0:	980b883a 	mov	r5,r19
 1440be4:	d8800315 	stw	r2,12(sp)
 1440be8:	14423f80 	call	14423f8 <__mulsi3>
 1440bec:	a80b883a 	mov	r5,r21
 1440bf0:	b009883a 	mov	r4,r22
 1440bf4:	d8800415 	stw	r2,16(sp)
 1440bf8:	14423f00 	call	14423f0 <__umodsi3>
 1440bfc:	1004943a 	slli	r2,r2,16
 1440c00:	800ed43a 	srli	r7,r16,16
 1440c04:	da400417 	ldw	r9,16(sp)
 1440c08:	da000317 	ldw	r8,12(sp)
 1440c0c:	11cab03a 	or	r5,r2,r7
 1440c10:	2a40062e 	bgeu	r5,r9,1440c2c <__divdf3+0x550>
 1440c14:	2dcb883a 	add	r5,r5,r23
 1440c18:	40bfffc4 	addi	r2,r8,-1
 1440c1c:	2dc0b436 	bltu	r5,r23,1440ef0 <__divdf3+0x814>
 1440c20:	2a40b32e 	bgeu	r5,r9,1440ef0 <__divdf3+0x814>
 1440c24:	423fff84 	addi	r8,r8,-2
 1440c28:	2dcb883a 	add	r5,r5,r23
 1440c2c:	2a6dc83a 	sub	r22,r5,r9
 1440c30:	b009883a 	mov	r4,r22
 1440c34:	a80b883a 	mov	r5,r21
 1440c38:	da000315 	stw	r8,12(sp)
 1440c3c:	14423e80 	call	14423e8 <__udivsi3>
 1440c40:	980b883a 	mov	r5,r19
 1440c44:	1009883a 	mov	r4,r2
 1440c48:	d8800415 	stw	r2,16(sp)
 1440c4c:	14423f80 	call	14423f8 <__mulsi3>
 1440c50:	b009883a 	mov	r4,r22
 1440c54:	a80b883a 	mov	r5,r21
 1440c58:	1027883a 	mov	r19,r2
 1440c5c:	14423f00 	call	14423f0 <__umodsi3>
 1440c60:	1004943a 	slli	r2,r2,16
 1440c64:	843fffcc 	andi	r16,r16,65535
 1440c68:	da000317 	ldw	r8,12(sp)
 1440c6c:	140eb03a 	or	r7,r2,r16
 1440c70:	da400417 	ldw	r9,16(sp)
 1440c74:	3cc0062e 	bgeu	r7,r19,1440c90 <__divdf3+0x5b4>
 1440c78:	3dcf883a 	add	r7,r7,r23
 1440c7c:	48bfffc4 	addi	r2,r9,-1
 1440c80:	3dc09d36 	bltu	r7,r23,1440ef8 <__divdf3+0x81c>
 1440c84:	3cc09c2e 	bgeu	r7,r19,1440ef8 <__divdf3+0x81c>
 1440c88:	4a7fff84 	addi	r9,r9,-2
 1440c8c:	3dcf883a 	add	r7,r7,r23
 1440c90:	4010943a 	slli	r8,r8,16
 1440c94:	3cebc83a 	sub	r21,r7,r19
 1440c98:	e00b883a 	mov	r5,fp
 1440c9c:	4a26b03a 	or	r19,r9,r8
 1440ca0:	99ffffcc 	andi	r7,r19,65535
 1440ca4:	9820d43a 	srli	r16,r19,16
 1440ca8:	3809883a 	mov	r4,r7
 1440cac:	d9c00515 	stw	r7,20(sp)
 1440cb0:	14423f80 	call	14423f8 <__mulsi3>
 1440cb4:	8009883a 	mov	r4,r16
 1440cb8:	e00b883a 	mov	r5,fp
 1440cbc:	102d883a 	mov	r22,r2
 1440cc0:	14423f80 	call	14423f8 <__mulsi3>
 1440cc4:	d9400017 	ldw	r5,0(sp)
 1440cc8:	8009883a 	mov	r4,r16
 1440ccc:	1039883a 	mov	fp,r2
 1440cd0:	14423f80 	call	14423f8 <__mulsi3>
 1440cd4:	d9c00517 	ldw	r7,20(sp)
 1440cd8:	d9400017 	ldw	r5,0(sp)
 1440cdc:	1021883a 	mov	r16,r2
 1440ce0:	3809883a 	mov	r4,r7
 1440ce4:	14423f80 	call	14423f8 <__mulsi3>
 1440ce8:	b008d43a 	srli	r4,r22,16
 1440cec:	e085883a 	add	r2,fp,r2
 1440cf0:	1109883a 	add	r4,r2,r4
 1440cf4:	2700022e 	bgeu	r4,fp,1440d00 <__divdf3+0x624>
 1440cf8:	00800074 	movhi	r2,1
 1440cfc:	80a1883a 	add	r16,r16,r2
 1440d00:	200ad43a 	srli	r5,r4,16
 1440d04:	2008943a 	slli	r4,r4,16
 1440d08:	b5bfffcc 	andi	r22,r22,65535
 1440d0c:	8145883a 	add	r2,r16,r5
 1440d10:	2589883a 	add	r4,r4,r22
 1440d14:	a8802c36 	bltu	r21,r2,1440dc8 <__divdf3+0x6ec>
 1440d18:	a880a426 	beq	r21,r2,1440fac <__divdf3+0x8d0>
 1440d1c:	9cc00054 	ori	r19,r19,1
 1440d20:	9200ffc4 	addi	r8,r18,1023
 1440d24:	023f270e 	bge	zero,r8,14409c4 <__alt_data_end+0xfffdb1c4>
 1440d28:	988001cc 	andi	r2,r19,7
 1440d2c:	10000726 	beq	r2,zero,1440d4c <__divdf3+0x670>
 1440d30:	990003cc 	andi	r4,r19,15
 1440d34:	00800104 	movi	r2,4
 1440d38:	20800426 	beq	r4,r2,1440d4c <__divdf3+0x670>
 1440d3c:	9885883a 	add	r2,r19,r2
 1440d40:	14e7803a 	cmpltu	r19,r2,r19
 1440d44:	8ce3883a 	add	r17,r17,r19
 1440d48:	1027883a 	mov	r19,r2
 1440d4c:	8880402c 	andhi	r2,r17,256
 1440d50:	10000426 	beq	r2,zero,1440d64 <__divdf3+0x688>
 1440d54:	00bfc034 	movhi	r2,65280
 1440d58:	10bfffc4 	addi	r2,r2,-1
 1440d5c:	92010004 	addi	r8,r18,1024
 1440d60:	88a2703a 	and	r17,r17,r2
 1440d64:	0081ff84 	movi	r2,2046
 1440d68:	123eb616 	blt	r2,r8,1440844 <__alt_data_end+0xfffdb044>
 1440d6c:	9826d0fa 	srli	r19,r19,3
 1440d70:	8804977a 	slli	r2,r17,29
 1440d74:	8820927a 	slli	r16,r17,9
 1440d78:	4201ffcc 	andi	r8,r8,2047
 1440d7c:	14e6b03a 	or	r19,r2,r19
 1440d80:	800ad33a 	srli	r5,r16,12
 1440d84:	a180004c 	andi	r6,r20,1
 1440d88:	003eb206 	br	1440854 <__alt_data_end+0xfffdb054>
 1440d8c:	008000c4 	movi	r2,3
 1440d90:	4080ac26 	beq	r8,r2,1441044 <__divdf3+0x968>
 1440d94:	00800044 	movi	r2,1
 1440d98:	4080591e 	bne	r8,r2,1440f00 <__divdf3+0x824>
 1440d9c:	e00d883a 	mov	r6,fp
 1440da0:	0011883a 	mov	r8,zero
 1440da4:	000b883a 	mov	r5,zero
 1440da8:	0027883a 	mov	r19,zero
 1440dac:	003ea906 	br	1440854 <__alt_data_end+0xfffdb054>
 1440db0:	00800434 	movhi	r2,16
 1440db4:	89400234 	orhi	r5,r17,8
 1440db8:	10bfffc4 	addi	r2,r2,-1
 1440dbc:	b00d883a 	mov	r6,r22
 1440dc0:	288a703a 	and	r5,r5,r2
 1440dc4:	003efd06 	br	14409bc <__alt_data_end+0xfffdb1bc>
 1440dc8:	adcf883a 	add	r7,r21,r23
 1440dcc:	997fffc4 	addi	r5,r19,-1
 1440dd0:	3dc0412e 	bgeu	r7,r23,1440ed8 <__divdf3+0x7fc>
 1440dd4:	2827883a 	mov	r19,r5
 1440dd8:	38bfd01e 	bne	r7,r2,1440d1c <__alt_data_end+0xfffdb51c>
 1440ddc:	d8c00117 	ldw	r3,4(sp)
 1440de0:	193fce1e 	bne	r3,r4,1440d1c <__alt_data_end+0xfffdb51c>
 1440de4:	003fce06 	br	1440d20 <__alt_data_end+0xfffdb520>
 1440de8:	d9800215 	stw	r6,8(sp)
 1440dec:	d9c00515 	stw	r7,20(sp)
 1440df0:	14422680 	call	1442268 <__clzsi2>
 1440df4:	10c00804 	addi	r3,r2,32
 1440df8:	010009c4 	movi	r4,39
 1440dfc:	d9800217 	ldw	r6,8(sp)
 1440e00:	d9c00517 	ldw	r7,20(sp)
 1440e04:	20feb20e 	bge	r4,r3,14408d0 <__alt_data_end+0xfffdb0d0>
 1440e08:	117ffe04 	addi	r5,r2,-8
 1440e0c:	a162983a 	sll	r17,r20,r5
 1440e10:	0027883a 	mov	r19,zero
 1440e14:	003eb506 	br	14408ec <__alt_data_end+0xfffdb0ec>
 1440e18:	3009883a 	mov	r4,r6
 1440e1c:	d9800215 	stw	r6,8(sp)
 1440e20:	da000315 	stw	r8,12(sp)
 1440e24:	da400415 	stw	r9,16(sp)
 1440e28:	14422680 	call	1442268 <__clzsi2>
 1440e2c:	10c00804 	addi	r3,r2,32
 1440e30:	010009c4 	movi	r4,39
 1440e34:	d9800217 	ldw	r6,8(sp)
 1440e38:	da000317 	ldw	r8,12(sp)
 1440e3c:	da400417 	ldw	r9,16(sp)
 1440e40:	20fec10e 	bge	r4,r3,1440948 <__alt_data_end+0xfffdb148>
 1440e44:	10bffe04 	addi	r2,r2,-8
 1440e48:	a8a0983a 	sll	r16,r21,r2
 1440e4c:	002b883a 	mov	r21,zero
 1440e50:	003ec406 	br	1440964 <__alt_data_end+0xfffdb164>
 1440e54:	d8c00117 	ldw	r3,4(sp)
 1440e58:	b0ed883a 	add	r22,r22,r3
 1440e5c:	b0c5803a 	cmpltu	r2,r22,r3
 1440e60:	15c5883a 	add	r2,r2,r23
 1440e64:	11cf883a 	add	r7,r2,r7
 1440e68:	88bfffc4 	addi	r2,r17,-1
 1440e6c:	b9c00d2e 	bgeu	r23,r7,1440ea4 <__divdf3+0x7c8>
 1440e70:	39003f36 	bltu	r7,r4,1440f70 <__divdf3+0x894>
 1440e74:	21c06a26 	beq	r4,r7,1441020 <__divdf3+0x944>
 1440e78:	3909c83a 	sub	r4,r7,r4
 1440e7c:	1023883a 	mov	r17,r2
 1440e80:	003f4f06 	br	1440bc0 <__alt_data_end+0xfffdb3c0>
 1440e84:	9d7ee536 	bltu	r19,r21,1440a1c <__alt_data_end+0xfffdb21c>
 1440e88:	982ed07a 	srli	r23,r19,1
 1440e8c:	880497fa 	slli	r2,r17,31
 1440e90:	8810d07a 	srli	r8,r17,1
 1440e94:	982c97fa 	slli	r22,r19,31
 1440e98:	b884b03a 	or	r2,r23,r2
 1440e9c:	d8800015 	stw	r2,0(sp)
 1440ea0:	003ee206 	br	1440a2c <__alt_data_end+0xfffdb22c>
 1440ea4:	3dfff41e 	bne	r7,r23,1440e78 <__alt_data_end+0xfffdb678>
 1440ea8:	d8c00117 	ldw	r3,4(sp)
 1440eac:	b0fff02e 	bgeu	r22,r3,1440e70 <__alt_data_end+0xfffdb670>
 1440eb0:	b909c83a 	sub	r4,r23,r4
 1440eb4:	1023883a 	mov	r17,r2
 1440eb8:	003f4106 	br	1440bc0 <__alt_data_end+0xfffdb3c0>
 1440ebc:	1021883a 	mov	r16,r2
 1440ec0:	003f1106 	br	1440b08 <__alt_data_end+0xfffdb308>
 1440ec4:	1023883a 	mov	r17,r2
 1440ec8:	003ef706 	br	1440aa8 <__alt_data_end+0xfffdb2a8>
 1440ecc:	b23fe136 	bltu	r22,r8,1440e54 <__alt_data_end+0xfffdb654>
 1440ed0:	0009883a 	mov	r4,zero
 1440ed4:	003f3a06 	br	1440bc0 <__alt_data_end+0xfffdb3c0>
 1440ed8:	38802c36 	bltu	r7,r2,1440f8c <__divdf3+0x8b0>
 1440edc:	11c05326 	beq	r2,r7,144102c <__divdf3+0x950>
 1440ee0:	2827883a 	mov	r19,r5
 1440ee4:	003f8d06 	br	1440d1c <__alt_data_end+0xfffdb51c>
 1440ee8:	04ffffc4 	movi	r19,-1
 1440eec:	003f8c06 	br	1440d20 <__alt_data_end+0xfffdb520>
 1440ef0:	1011883a 	mov	r8,r2
 1440ef4:	003f4d06 	br	1440c2c <__alt_data_end+0xfffdb42c>
 1440ef8:	1013883a 	mov	r9,r2
 1440efc:	003f6406 	br	1440c90 <__alt_data_end+0xfffdb490>
 1440f00:	e029883a 	mov	r20,fp
 1440f04:	003f8606 	br	1440d20 <__alt_data_end+0xfffdb520>
 1440f08:	008007c4 	movi	r2,31
 1440f0c:	14002a16 	blt	r2,r16,1440fb8 <__divdf3+0x8dc>
 1440f10:	91410784 	addi	r5,r18,1054
 1440f14:	9c0cd83a 	srl	r6,r19,r16
 1440f18:	8948983a 	sll	r4,r17,r5
 1440f1c:	9944983a 	sll	r2,r19,r5
 1440f20:	8c20d83a 	srl	r16,r17,r16
 1440f24:	3108b03a 	or	r4,r6,r4
 1440f28:	1004c03a 	cmpne	r2,r2,zero
 1440f2c:	2084b03a 	or	r2,r4,r2
 1440f30:	110001cc 	andi	r4,r2,7
 1440f34:	20000726 	beq	r4,zero,1440f54 <__divdf3+0x878>
 1440f38:	114003cc 	andi	r5,r2,15
 1440f3c:	01000104 	movi	r4,4
 1440f40:	29000426 	beq	r5,r4,1440f54 <__divdf3+0x878>
 1440f44:	11000104 	addi	r4,r2,4
 1440f48:	2085803a 	cmpltu	r2,r4,r2
 1440f4c:	80a1883a 	add	r16,r16,r2
 1440f50:	2005883a 	mov	r2,r4
 1440f54:	8100202c 	andhi	r4,r16,128
 1440f58:	20002d26 	beq	r4,zero,1441010 <__divdf3+0x934>
 1440f5c:	a180004c 	andi	r6,r20,1
 1440f60:	02000044 	movi	r8,1
 1440f64:	000b883a 	mov	r5,zero
 1440f68:	0027883a 	mov	r19,zero
 1440f6c:	003e3906 	br	1440854 <__alt_data_end+0xfffdb054>
 1440f70:	d8c00117 	ldw	r3,4(sp)
 1440f74:	8c7fff84 	addi	r17,r17,-2
 1440f78:	b0ed883a 	add	r22,r22,r3
 1440f7c:	b0c5803a 	cmpltu	r2,r22,r3
 1440f80:	15c5883a 	add	r2,r2,r23
 1440f84:	11cf883a 	add	r7,r2,r7
 1440f88:	003f0c06 	br	1440bbc <__alt_data_end+0xfffdb3bc>
 1440f8c:	d8c00117 	ldw	r3,4(sp)
 1440f90:	997fff84 	addi	r5,r19,-2
 1440f94:	18d1883a 	add	r8,r3,r3
 1440f98:	40c7803a 	cmpltu	r3,r8,r3
 1440f9c:	1dcd883a 	add	r6,r3,r23
 1440fa0:	398f883a 	add	r7,r7,r6
 1440fa4:	da000115 	stw	r8,4(sp)
 1440fa8:	003f8a06 	br	1440dd4 <__alt_data_end+0xfffdb5d4>
 1440fac:	203f861e 	bne	r4,zero,1440dc8 <__alt_data_end+0xfffdb5c8>
 1440fb0:	d8000115 	stw	zero,4(sp)
 1440fb4:	003f8906 	br	1440ddc <__alt_data_end+0xfffdb5dc>
 1440fb8:	00bef884 	movi	r2,-1054
 1440fbc:	1485c83a 	sub	r2,r2,r18
 1440fc0:	01000804 	movi	r4,32
 1440fc4:	8884d83a 	srl	r2,r17,r2
 1440fc8:	81001c26 	beq	r16,r4,144103c <__divdf3+0x960>
 1440fcc:	91010f84 	addi	r4,r18,1086
 1440fd0:	8908983a 	sll	r4,r17,r4
 1440fd4:	24c8b03a 	or	r4,r4,r19
 1440fd8:	2008c03a 	cmpne	r4,r4,zero
 1440fdc:	2084b03a 	or	r2,r4,r2
 1440fe0:	140001cc 	andi	r16,r2,7
 1440fe4:	8000061e 	bne	r16,zero,1441000 <__divdf3+0x924>
 1440fe8:	000b883a 	mov	r5,zero
 1440fec:	1004d0fa 	srli	r2,r2,3
 1440ff0:	a180004c 	andi	r6,r20,1
 1440ff4:	0011883a 	mov	r8,zero
 1440ff8:	1426b03a 	or	r19,r2,r16
 1440ffc:	003e1506 	br	1440854 <__alt_data_end+0xfffdb054>
 1441000:	114003cc 	andi	r5,r2,15
 1441004:	01000104 	movi	r4,4
 1441008:	0021883a 	mov	r16,zero
 144100c:	293fcd1e 	bne	r5,r4,1440f44 <__alt_data_end+0xfffdb744>
 1441010:	800a927a 	slli	r5,r16,9
 1441014:	8020977a 	slli	r16,r16,29
 1441018:	280ad33a 	srli	r5,r5,12
 144101c:	003ff306 	br	1440fec <__alt_data_end+0xfffdb7ec>
 1441020:	b23fd336 	bltu	r22,r8,1440f70 <__alt_data_end+0xfffdb770>
 1441024:	1023883a 	mov	r17,r2
 1441028:	003fa906 	br	1440ed0 <__alt_data_end+0xfffdb6d0>
 144102c:	d8c00117 	ldw	r3,4(sp)
 1441030:	193fd636 	bltu	r3,r4,1440f8c <__alt_data_end+0xfffdb78c>
 1441034:	2827883a 	mov	r19,r5
 1441038:	003f6806 	br	1440ddc <__alt_data_end+0xfffdb5dc>
 144103c:	0009883a 	mov	r4,zero
 1441040:	003fe406 	br	1440fd4 <__alt_data_end+0xfffdb7d4>
 1441044:	00800434 	movhi	r2,16
 1441048:	89400234 	orhi	r5,r17,8
 144104c:	10bfffc4 	addi	r2,r2,-1
 1441050:	e00d883a 	mov	r6,fp
 1441054:	288a703a 	and	r5,r5,r2
 1441058:	003e5806 	br	14409bc <__alt_data_end+0xfffdb1bc>

0144105c <__muldf3>:
 144105c:	deffee04 	addi	sp,sp,-72
 1441060:	dd000c15 	stw	r20,48(sp)
 1441064:	2828d53a 	srli	r20,r5,20
 1441068:	dd400d15 	stw	r21,52(sp)
 144106c:	282ad7fa 	srli	r21,r5,31
 1441070:	dc000815 	stw	r16,32(sp)
 1441074:	04000434 	movhi	r16,16
 1441078:	ddc00f15 	stw	r23,60(sp)
 144107c:	dcc00b15 	stw	r19,44(sp)
 1441080:	dc800a15 	stw	r18,40(sp)
 1441084:	843fffc4 	addi	r16,r16,-1
 1441088:	dfc01115 	stw	ra,68(sp)
 144108c:	df001015 	stw	fp,64(sp)
 1441090:	dd800e15 	stw	r22,56(sp)
 1441094:	dc400915 	stw	r17,36(sp)
 1441098:	a501ffcc 	andi	r20,r20,2047
 144109c:	2025883a 	mov	r18,r4
 14410a0:	202f883a 	mov	r23,r4
 14410a4:	2c20703a 	and	r16,r5,r16
 14410a8:	a827883a 	mov	r19,r21
 14410ac:	aa403fcc 	andi	r9,r21,255
 14410b0:	a0005926 	beq	r20,zero,1441218 <__muldf3+0x1bc>
 14410b4:	0081ffc4 	movi	r2,2047
 14410b8:	a0803426 	beq	r20,r2,144118c <__muldf3+0x130>
 14410bc:	84000434 	orhi	r16,r16,16
 14410c0:	2004d77a 	srli	r2,r4,29
 14410c4:	802090fa 	slli	r16,r16,3
 14410c8:	202e90fa 	slli	r23,r4,3
 14410cc:	a53f0044 	addi	r20,r20,-1023
 14410d0:	80a0b03a 	or	r16,r16,r2
 14410d4:	000b883a 	mov	r5,zero
 14410d8:	0039883a 	mov	fp,zero
 14410dc:	3806d53a 	srli	r3,r7,20
 14410e0:	382cd7fa 	srli	r22,r7,31
 14410e4:	00800434 	movhi	r2,16
 14410e8:	10bfffc4 	addi	r2,r2,-1
 14410ec:	18c1ffcc 	andi	r3,r3,2047
 14410f0:	3025883a 	mov	r18,r6
 14410f4:	38a2703a 	and	r17,r7,r2
 14410f8:	b2803fcc 	andi	r10,r22,255
 14410fc:	18006426 	beq	r3,zero,1441290 <__muldf3+0x234>
 1441100:	0081ffc4 	movi	r2,2047
 1441104:	18805c26 	beq	r3,r2,1441278 <__muldf3+0x21c>
 1441108:	8c400434 	orhi	r17,r17,16
 144110c:	3004d77a 	srli	r2,r6,29
 1441110:	882290fa 	slli	r17,r17,3
 1441114:	302490fa 	slli	r18,r6,3
 1441118:	18ff0044 	addi	r3,r3,-1023
 144111c:	88a2b03a 	or	r17,r17,r2
 1441120:	000f883a 	mov	r7,zero
 1441124:	394ab03a 	or	r5,r7,r5
 1441128:	280a90ba 	slli	r5,r5,2
 144112c:	00805134 	movhi	r2,324
 1441130:	10845304 	addi	r2,r2,4428
 1441134:	288b883a 	add	r5,r5,r2
 1441138:	28800017 	ldw	r2,0(r5)
 144113c:	a0c7883a 	add	r3,r20,r3
 1441140:	b54cf03a 	xor	r6,r22,r21
 1441144:	1a000044 	addi	r8,r3,1
 1441148:	1000683a 	jmp	r2
 144114c:	01441390 	cmplti	r5,zero,4174
 1441150:	0144137c 	xorhi	r5,zero,4173
 1441154:	0144137c 	xorhi	r5,zero,4173
 1441158:	01441368 	cmpgeui	r5,zero,4173
 144115c:	014411a8 	cmpgeui	r5,zero,4166
 1441160:	014411a8 	cmpgeui	r5,zero,4166
 1441164:	01441350 	cmplti	r5,zero,4173
 1441168:	01441368 	cmpgeui	r5,zero,4173
 144116c:	014411a8 	cmpgeui	r5,zero,4166
 1441170:	01441350 	cmplti	r5,zero,4173
 1441174:	014411a8 	cmpgeui	r5,zero,4166
 1441178:	01441368 	cmpgeui	r5,zero,4173
 144117c:	014411ac 	andhi	r5,zero,4166
 1441180:	014411ac 	andhi	r5,zero,4166
 1441184:	014411ac 	andhi	r5,zero,4166
 1441188:	014416cc 	andi	r5,zero,4187
 144118c:	8104b03a 	or	r2,r16,r4
 1441190:	10006c1e 	bne	r2,zero,1441344 <__muldf3+0x2e8>
 1441194:	01400204 	movi	r5,8
 1441198:	0021883a 	mov	r16,zero
 144119c:	002f883a 	mov	r23,zero
 14411a0:	07000084 	movi	fp,2
 14411a4:	003fcd06 	br	14410dc <__alt_data_end+0xfffdb8dc>
 14411a8:	3013883a 	mov	r9,r6
 14411ac:	00800084 	movi	r2,2
 14411b0:	e080501e 	bne	fp,r2,14412f4 <__muldf3+0x298>
 14411b4:	4cc0004c 	andi	r19,r9,1
 14411b8:	0101ffc4 	movi	r4,2047
 14411bc:	0021883a 	mov	r16,zero
 14411c0:	002f883a 	mov	r23,zero
 14411c4:	2008953a 	slli	r4,r4,20
 14411c8:	98c03fcc 	andi	r3,r19,255
 14411cc:	04400434 	movhi	r17,16
 14411d0:	8c7fffc4 	addi	r17,r17,-1
 14411d4:	180697fa 	slli	r3,r3,31
 14411d8:	8460703a 	and	r16,r16,r17
 14411dc:	8120b03a 	or	r16,r16,r4
 14411e0:	80c6b03a 	or	r3,r16,r3
 14411e4:	b805883a 	mov	r2,r23
 14411e8:	dfc01117 	ldw	ra,68(sp)
 14411ec:	df001017 	ldw	fp,64(sp)
 14411f0:	ddc00f17 	ldw	r23,60(sp)
 14411f4:	dd800e17 	ldw	r22,56(sp)
 14411f8:	dd400d17 	ldw	r21,52(sp)
 14411fc:	dd000c17 	ldw	r20,48(sp)
 1441200:	dcc00b17 	ldw	r19,44(sp)
 1441204:	dc800a17 	ldw	r18,40(sp)
 1441208:	dc400917 	ldw	r17,36(sp)
 144120c:	dc000817 	ldw	r16,32(sp)
 1441210:	dec01204 	addi	sp,sp,72
 1441214:	f800283a 	ret
 1441218:	8104b03a 	or	r2,r16,r4
 144121c:	10004426 	beq	r2,zero,1441330 <__muldf3+0x2d4>
 1441220:	80014b26 	beq	r16,zero,1441750 <__muldf3+0x6f4>
 1441224:	8009883a 	mov	r4,r16
 1441228:	d9800715 	stw	r6,28(sp)
 144122c:	d9c00215 	stw	r7,8(sp)
 1441230:	da400415 	stw	r9,16(sp)
 1441234:	14422680 	call	1442268 <__clzsi2>
 1441238:	d9800717 	ldw	r6,28(sp)
 144123c:	d9c00217 	ldw	r7,8(sp)
 1441240:	da400417 	ldw	r9,16(sp)
 1441244:	1007883a 	mov	r3,r2
 1441248:	01000a04 	movi	r4,40
 144124c:	1dfffe04 	addi	r23,r3,-8
 1441250:	20c9c83a 	sub	r4,r4,r3
 1441254:	85e0983a 	sll	r16,r16,r23
 1441258:	9108d83a 	srl	r4,r18,r4
 144125c:	95ee983a 	sll	r23,r18,r23
 1441260:	2420b03a 	or	r16,r4,r16
 1441264:	053f0344 	movi	r20,-1011
 1441268:	a0e9c83a 	sub	r20,r20,r3
 144126c:	000b883a 	mov	r5,zero
 1441270:	0039883a 	mov	fp,zero
 1441274:	003f9906 	br	14410dc <__alt_data_end+0xfffdb8dc>
 1441278:	8984b03a 	or	r2,r17,r6
 144127c:	10002a1e 	bne	r2,zero,1441328 <__muldf3+0x2cc>
 1441280:	0023883a 	mov	r17,zero
 1441284:	0025883a 	mov	r18,zero
 1441288:	01c00084 	movi	r7,2
 144128c:	003fa506 	br	1441124 <__alt_data_end+0xfffdb924>
 1441290:	8984b03a 	or	r2,r17,r6
 1441294:	10002026 	beq	r2,zero,1441318 <__muldf3+0x2bc>
 1441298:	88011c26 	beq	r17,zero,144170c <__muldf3+0x6b0>
 144129c:	8809883a 	mov	r4,r17
 14412a0:	d9400215 	stw	r5,8(sp)
 14412a4:	d9800715 	stw	r6,28(sp)
 14412a8:	da400415 	stw	r9,16(sp)
 14412ac:	da800315 	stw	r10,12(sp)
 14412b0:	14422680 	call	1442268 <__clzsi2>
 14412b4:	d9400217 	ldw	r5,8(sp)
 14412b8:	d9800717 	ldw	r6,28(sp)
 14412bc:	da400417 	ldw	r9,16(sp)
 14412c0:	da800317 	ldw	r10,12(sp)
 14412c4:	1007883a 	mov	r3,r2
 14412c8:	01000a04 	movi	r4,40
 14412cc:	1cbffe04 	addi	r18,r3,-8
 14412d0:	20c9c83a 	sub	r4,r4,r3
 14412d4:	8ca2983a 	sll	r17,r17,r18
 14412d8:	3108d83a 	srl	r4,r6,r4
 14412dc:	34a4983a 	sll	r18,r6,r18
 14412e0:	2462b03a 	or	r17,r4,r17
 14412e4:	00bf0344 	movi	r2,-1011
 14412e8:	10c7c83a 	sub	r3,r2,r3
 14412ec:	000f883a 	mov	r7,zero
 14412f0:	003f8c06 	br	1441124 <__alt_data_end+0xfffdb924>
 14412f4:	008000c4 	movi	r2,3
 14412f8:	e0816d26 	beq	fp,r2,14418b0 <__muldf3+0x854>
 14412fc:	00800044 	movi	r2,1
 1441300:	e081321e 	bne	fp,r2,14417cc <__muldf3+0x770>
 1441304:	48a6703a 	and	r19,r9,r2
 1441308:	0009883a 	mov	r4,zero
 144130c:	0021883a 	mov	r16,zero
 1441310:	002f883a 	mov	r23,zero
 1441314:	003fab06 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 1441318:	0023883a 	mov	r17,zero
 144131c:	0025883a 	mov	r18,zero
 1441320:	01c00044 	movi	r7,1
 1441324:	003f7f06 	br	1441124 <__alt_data_end+0xfffdb924>
 1441328:	01c000c4 	movi	r7,3
 144132c:	003f7d06 	br	1441124 <__alt_data_end+0xfffdb924>
 1441330:	01400104 	movi	r5,4
 1441334:	0021883a 	mov	r16,zero
 1441338:	002f883a 	mov	r23,zero
 144133c:	07000044 	movi	fp,1
 1441340:	003f6606 	br	14410dc <__alt_data_end+0xfffdb8dc>
 1441344:	01400304 	movi	r5,12
 1441348:	070000c4 	movi	fp,3
 144134c:	003f6306 	br	14410dc <__alt_data_end+0xfffdb8dc>
 1441350:	04000434 	movhi	r16,16
 1441354:	0027883a 	mov	r19,zero
 1441358:	843fffc4 	addi	r16,r16,-1
 144135c:	05ffffc4 	movi	r23,-1
 1441360:	0101ffc4 	movi	r4,2047
 1441364:	003f9706 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 1441368:	8821883a 	mov	r16,r17
 144136c:	902f883a 	mov	r23,r18
 1441370:	5013883a 	mov	r9,r10
 1441374:	3839883a 	mov	fp,r7
 1441378:	003f8c06 	br	14411ac <__alt_data_end+0xfffdb9ac>
 144137c:	8821883a 	mov	r16,r17
 1441380:	902f883a 	mov	r23,r18
 1441384:	3013883a 	mov	r9,r6
 1441388:	3839883a 	mov	fp,r7
 144138c:	003f8706 	br	14411ac <__alt_data_end+0xfffdb9ac>
 1441390:	b82ad43a 	srli	r21,r23,16
 1441394:	9038d43a 	srli	fp,r18,16
 1441398:	bdffffcc 	andi	r23,r23,65535
 144139c:	94bfffcc 	andi	r18,r18,65535
 14413a0:	9009883a 	mov	r4,r18
 14413a4:	b80b883a 	mov	r5,r23
 14413a8:	d8c00515 	stw	r3,20(sp)
 14413ac:	d9800715 	stw	r6,28(sp)
 14413b0:	da000615 	stw	r8,24(sp)
 14413b4:	14423f80 	call	14423f8 <__mulsi3>
 14413b8:	9009883a 	mov	r4,r18
 14413bc:	a80b883a 	mov	r5,r21
 14413c0:	1029883a 	mov	r20,r2
 14413c4:	14423f80 	call	14423f8 <__mulsi3>
 14413c8:	e009883a 	mov	r4,fp
 14413cc:	a80b883a 	mov	r5,r21
 14413d0:	102d883a 	mov	r22,r2
 14413d4:	14423f80 	call	14423f8 <__mulsi3>
 14413d8:	e009883a 	mov	r4,fp
 14413dc:	b80b883a 	mov	r5,r23
 14413e0:	1027883a 	mov	r19,r2
 14413e4:	14423f80 	call	14423f8 <__mulsi3>
 14413e8:	a008d43a 	srli	r4,r20,16
 14413ec:	b085883a 	add	r2,r22,r2
 14413f0:	d8c00517 	ldw	r3,20(sp)
 14413f4:	110f883a 	add	r7,r2,r4
 14413f8:	d9800717 	ldw	r6,28(sp)
 14413fc:	da000617 	ldw	r8,24(sp)
 1441400:	3d80022e 	bgeu	r7,r22,144140c <__muldf3+0x3b0>
 1441404:	00800074 	movhi	r2,1
 1441408:	98a7883a 	add	r19,r19,r2
 144140c:	3804943a 	slli	r2,r7,16
 1441410:	380ed43a 	srli	r7,r7,16
 1441414:	882cd43a 	srli	r22,r17,16
 1441418:	a53fffcc 	andi	r20,r20,65535
 144141c:	8c7fffcc 	andi	r17,r17,65535
 1441420:	1529883a 	add	r20,r2,r20
 1441424:	8809883a 	mov	r4,r17
 1441428:	b80b883a 	mov	r5,r23
 144142c:	d8c00515 	stw	r3,20(sp)
 1441430:	d9800715 	stw	r6,28(sp)
 1441434:	da000615 	stw	r8,24(sp)
 1441438:	d9c00015 	stw	r7,0(sp)
 144143c:	dd000115 	stw	r20,4(sp)
 1441440:	14423f80 	call	14423f8 <__mulsi3>
 1441444:	a80b883a 	mov	r5,r21
 1441448:	8809883a 	mov	r4,r17
 144144c:	d8800415 	stw	r2,16(sp)
 1441450:	14423f80 	call	14423f8 <__mulsi3>
 1441454:	a80b883a 	mov	r5,r21
 1441458:	b009883a 	mov	r4,r22
 144145c:	1029883a 	mov	r20,r2
 1441460:	14423f80 	call	14423f8 <__mulsi3>
 1441464:	b009883a 	mov	r4,r22
 1441468:	b80b883a 	mov	r5,r23
 144146c:	102b883a 	mov	r21,r2
 1441470:	14423f80 	call	14423f8 <__mulsi3>
 1441474:	da400417 	ldw	r9,16(sp)
 1441478:	a085883a 	add	r2,r20,r2
 144147c:	d8c00517 	ldw	r3,20(sp)
 1441480:	4808d43a 	srli	r4,r9,16
 1441484:	d9800717 	ldw	r6,28(sp)
 1441488:	da000617 	ldw	r8,24(sp)
 144148c:	1109883a 	add	r4,r2,r4
 1441490:	2500022e 	bgeu	r4,r20,144149c <__muldf3+0x440>
 1441494:	00800074 	movhi	r2,1
 1441498:	a8ab883a 	add	r21,r21,r2
 144149c:	200e943a 	slli	r7,r4,16
 14414a0:	2004d43a 	srli	r2,r4,16
 14414a4:	802ed43a 	srli	r23,r16,16
 14414a8:	843fffcc 	andi	r16,r16,65535
 14414ac:	4d3fffcc 	andi	r20,r9,65535
 14414b0:	9009883a 	mov	r4,r18
 14414b4:	800b883a 	mov	r5,r16
 14414b8:	3d29883a 	add	r20,r7,r20
 14414bc:	d8c00515 	stw	r3,20(sp)
 14414c0:	d9800715 	stw	r6,28(sp)
 14414c4:	da000615 	stw	r8,24(sp)
 14414c8:	a8ab883a 	add	r21,r21,r2
 14414cc:	14423f80 	call	14423f8 <__mulsi3>
 14414d0:	9009883a 	mov	r4,r18
 14414d4:	b80b883a 	mov	r5,r23
 14414d8:	d8800315 	stw	r2,12(sp)
 14414dc:	14423f80 	call	14423f8 <__mulsi3>
 14414e0:	e009883a 	mov	r4,fp
 14414e4:	b80b883a 	mov	r5,r23
 14414e8:	1025883a 	mov	r18,r2
 14414ec:	14423f80 	call	14423f8 <__mulsi3>
 14414f0:	e009883a 	mov	r4,fp
 14414f4:	800b883a 	mov	r5,r16
 14414f8:	d8800215 	stw	r2,8(sp)
 14414fc:	14423f80 	call	14423f8 <__mulsi3>
 1441500:	da800317 	ldw	r10,12(sp)
 1441504:	d9400017 	ldw	r5,0(sp)
 1441508:	9085883a 	add	r2,r18,r2
 144150c:	5008d43a 	srli	r4,r10,16
 1441510:	a153883a 	add	r9,r20,r5
 1441514:	d8c00517 	ldw	r3,20(sp)
 1441518:	1109883a 	add	r4,r2,r4
 144151c:	d9800717 	ldw	r6,28(sp)
 1441520:	da000617 	ldw	r8,24(sp)
 1441524:	dac00217 	ldw	r11,8(sp)
 1441528:	2480022e 	bgeu	r4,r18,1441534 <__muldf3+0x4d8>
 144152c:	00800074 	movhi	r2,1
 1441530:	5897883a 	add	r11,r11,r2
 1441534:	200e943a 	slli	r7,r4,16
 1441538:	2038d43a 	srli	fp,r4,16
 144153c:	52bfffcc 	andi	r10,r10,65535
 1441540:	3a8f883a 	add	r7,r7,r10
 1441544:	8809883a 	mov	r4,r17
 1441548:	800b883a 	mov	r5,r16
 144154c:	d8c00515 	stw	r3,20(sp)
 1441550:	d9800715 	stw	r6,28(sp)
 1441554:	d9c00215 	stw	r7,8(sp)
 1441558:	da000615 	stw	r8,24(sp)
 144155c:	da400415 	stw	r9,16(sp)
 1441560:	5f39883a 	add	fp,r11,fp
 1441564:	14423f80 	call	14423f8 <__mulsi3>
 1441568:	8809883a 	mov	r4,r17
 144156c:	b80b883a 	mov	r5,r23
 1441570:	1025883a 	mov	r18,r2
 1441574:	14423f80 	call	14423f8 <__mulsi3>
 1441578:	b009883a 	mov	r4,r22
 144157c:	b80b883a 	mov	r5,r23
 1441580:	d8800315 	stw	r2,12(sp)
 1441584:	14423f80 	call	14423f8 <__mulsi3>
 1441588:	b009883a 	mov	r4,r22
 144158c:	800b883a 	mov	r5,r16
 1441590:	1023883a 	mov	r17,r2
 1441594:	14423f80 	call	14423f8 <__mulsi3>
 1441598:	da800317 	ldw	r10,12(sp)
 144159c:	9008d43a 	srli	r4,r18,16
 14415a0:	d8c00517 	ldw	r3,20(sp)
 14415a4:	5085883a 	add	r2,r10,r2
 14415a8:	1109883a 	add	r4,r2,r4
 14415ac:	d9800717 	ldw	r6,28(sp)
 14415b0:	d9c00217 	ldw	r7,8(sp)
 14415b4:	da000617 	ldw	r8,24(sp)
 14415b8:	da400417 	ldw	r9,16(sp)
 14415bc:	2280022e 	bgeu	r4,r10,14415c8 <__muldf3+0x56c>
 14415c0:	00800074 	movhi	r2,1
 14415c4:	88a3883a 	add	r17,r17,r2
 14415c8:	2004943a 	slli	r2,r4,16
 14415cc:	94bfffcc 	andi	r18,r18,65535
 14415d0:	4ce7883a 	add	r19,r9,r19
 14415d4:	14a5883a 	add	r18,r2,r18
 14415d8:	9d29803a 	cmpltu	r20,r19,r20
 14415dc:	9565883a 	add	r18,r18,r21
 14415e0:	9505883a 	add	r2,r18,r20
 14415e4:	99e7883a 	add	r19,r19,r7
 14415e8:	99cf803a 	cmpltu	r7,r19,r7
 14415ec:	e08b883a 	add	r5,fp,r2
 14415f0:	2008d43a 	srli	r4,r4,16
 14415f4:	29ef883a 	add	r23,r5,r7
 14415f8:	1529803a 	cmpltu	r20,r2,r20
 14415fc:	956b803a 	cmpltu	r21,r18,r21
 1441600:	b9cf803a 	cmpltu	r7,r23,r7
 1441604:	a564b03a 	or	r18,r20,r21
 1441608:	2f39803a 	cmpltu	fp,r5,fp
 144160c:	9125883a 	add	r18,r18,r4
 1441610:	3f38b03a 	or	fp,r7,fp
 1441614:	9725883a 	add	r18,r18,fp
 1441618:	9804927a 	slli	r2,r19,9
 144161c:	9463883a 	add	r17,r18,r17
 1441620:	d9000117 	ldw	r4,4(sp)
 1441624:	b820d5fa 	srli	r16,r23,23
 1441628:	8822927a 	slli	r17,r17,9
 144162c:	9826d5fa 	srli	r19,r19,23
 1441630:	1104b03a 	or	r2,r2,r4
 1441634:	b82e927a 	slli	r23,r23,9
 1441638:	1004c03a 	cmpne	r2,r2,zero
 144163c:	8c20b03a 	or	r16,r17,r16
 1441640:	14e6b03a 	or	r19,r2,r19
 1441644:	8080402c 	andhi	r2,r16,256
 1441648:	9deeb03a 	or	r23,r19,r23
 144164c:	10000726 	beq	r2,zero,144166c <__muldf3+0x610>
 1441650:	b804d07a 	srli	r2,r23,1
 1441654:	800697fa 	slli	r3,r16,31
 1441658:	bdc0004c 	andi	r23,r23,1
 144165c:	8020d07a 	srli	r16,r16,1
 1441660:	b8aeb03a 	or	r23,r23,r2
 1441664:	b8eeb03a 	or	r23,r23,r3
 1441668:	4007883a 	mov	r3,r8
 144166c:	1900ffc4 	addi	r4,r3,1023
 1441670:	01004d0e 	bge	zero,r4,14417a8 <__muldf3+0x74c>
 1441674:	b88001cc 	andi	r2,r23,7
 1441678:	10000726 	beq	r2,zero,1441698 <__muldf3+0x63c>
 144167c:	b94003cc 	andi	r5,r23,15
 1441680:	00800104 	movi	r2,4
 1441684:	28800426 	beq	r5,r2,1441698 <__muldf3+0x63c>
 1441688:	b885883a 	add	r2,r23,r2
 144168c:	15ef803a 	cmpltu	r23,r2,r23
 1441690:	85e1883a 	add	r16,r16,r23
 1441694:	102f883a 	mov	r23,r2
 1441698:	8080402c 	andhi	r2,r16,256
 144169c:	10000426 	beq	r2,zero,14416b0 <__muldf3+0x654>
 14416a0:	00bfc034 	movhi	r2,65280
 14416a4:	10bfffc4 	addi	r2,r2,-1
 14416a8:	19010004 	addi	r4,r3,1024
 14416ac:	80a0703a 	and	r16,r16,r2
 14416b0:	0081ff84 	movi	r2,2046
 14416b4:	1100340e 	bge	r2,r4,1441788 <__muldf3+0x72c>
 14416b8:	34c0004c 	andi	r19,r6,1
 14416bc:	0101ffc4 	movi	r4,2047
 14416c0:	0021883a 	mov	r16,zero
 14416c4:	002f883a 	mov	r23,zero
 14416c8:	003ebe06 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 14416cc:	8080022c 	andhi	r2,r16,8
 14416d0:	10000926 	beq	r2,zero,14416f8 <__muldf3+0x69c>
 14416d4:	8880022c 	andhi	r2,r17,8
 14416d8:	1000071e 	bne	r2,zero,14416f8 <__muldf3+0x69c>
 14416dc:	00800434 	movhi	r2,16
 14416e0:	8c000234 	orhi	r16,r17,8
 14416e4:	10bfffc4 	addi	r2,r2,-1
 14416e8:	b027883a 	mov	r19,r22
 14416ec:	80a0703a 	and	r16,r16,r2
 14416f0:	902f883a 	mov	r23,r18
 14416f4:	003f1a06 	br	1441360 <__alt_data_end+0xfffdbb60>
 14416f8:	00800434 	movhi	r2,16
 14416fc:	84000234 	orhi	r16,r16,8
 1441700:	10bfffc4 	addi	r2,r2,-1
 1441704:	80a0703a 	and	r16,r16,r2
 1441708:	003f1506 	br	1441360 <__alt_data_end+0xfffdbb60>
 144170c:	3009883a 	mov	r4,r6
 1441710:	d9400215 	stw	r5,8(sp)
 1441714:	d9800715 	stw	r6,28(sp)
 1441718:	da400415 	stw	r9,16(sp)
 144171c:	da800315 	stw	r10,12(sp)
 1441720:	14422680 	call	1442268 <__clzsi2>
 1441724:	10c00804 	addi	r3,r2,32
 1441728:	010009c4 	movi	r4,39
 144172c:	d9400217 	ldw	r5,8(sp)
 1441730:	d9800717 	ldw	r6,28(sp)
 1441734:	da400417 	ldw	r9,16(sp)
 1441738:	da800317 	ldw	r10,12(sp)
 144173c:	20fee20e 	bge	r4,r3,14412c8 <__alt_data_end+0xfffdbac8>
 1441740:	147ffe04 	addi	r17,r2,-8
 1441744:	9462983a 	sll	r17,r18,r17
 1441748:	0025883a 	mov	r18,zero
 144174c:	003ee506 	br	14412e4 <__alt_data_end+0xfffdbae4>
 1441750:	d9800715 	stw	r6,28(sp)
 1441754:	d9c00215 	stw	r7,8(sp)
 1441758:	da400415 	stw	r9,16(sp)
 144175c:	14422680 	call	1442268 <__clzsi2>
 1441760:	10c00804 	addi	r3,r2,32
 1441764:	010009c4 	movi	r4,39
 1441768:	d9800717 	ldw	r6,28(sp)
 144176c:	d9c00217 	ldw	r7,8(sp)
 1441770:	da400417 	ldw	r9,16(sp)
 1441774:	20feb40e 	bge	r4,r3,1441248 <__alt_data_end+0xfffdba48>
 1441778:	143ffe04 	addi	r16,r2,-8
 144177c:	9420983a 	sll	r16,r18,r16
 1441780:	002f883a 	mov	r23,zero
 1441784:	003eb706 	br	1441264 <__alt_data_end+0xfffdba64>
 1441788:	8004977a 	slli	r2,r16,29
 144178c:	b82ed0fa 	srli	r23,r23,3
 1441790:	8020927a 	slli	r16,r16,9
 1441794:	2101ffcc 	andi	r4,r4,2047
 1441798:	15eeb03a 	or	r23,r2,r23
 144179c:	8020d33a 	srli	r16,r16,12
 14417a0:	34c0004c 	andi	r19,r6,1
 14417a4:	003e8706 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 14417a8:	00bf0084 	movi	r2,-1022
 14417ac:	10c5c83a 	sub	r2,r2,r3
 14417b0:	01000e04 	movi	r4,56
 14417b4:	2080080e 	bge	r4,r2,14417d8 <__muldf3+0x77c>
 14417b8:	34c0004c 	andi	r19,r6,1
 14417bc:	0009883a 	mov	r4,zero
 14417c0:	0021883a 	mov	r16,zero
 14417c4:	002f883a 	mov	r23,zero
 14417c8:	003e7e06 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 14417cc:	4007883a 	mov	r3,r8
 14417d0:	480d883a 	mov	r6,r9
 14417d4:	003fa506 	br	144166c <__alt_data_end+0xfffdbe6c>
 14417d8:	010007c4 	movi	r4,31
 14417dc:	20801816 	blt	r4,r2,1441840 <__muldf3+0x7e4>
 14417e0:	18c10784 	addi	r3,r3,1054
 14417e4:	80c8983a 	sll	r4,r16,r3
 14417e8:	b88ad83a 	srl	r5,r23,r2
 14417ec:	b8c6983a 	sll	r3,r23,r3
 14417f0:	80a0d83a 	srl	r16,r16,r2
 14417f4:	2908b03a 	or	r4,r5,r4
 14417f8:	1804c03a 	cmpne	r2,r3,zero
 14417fc:	2088b03a 	or	r4,r4,r2
 1441800:	208001cc 	andi	r2,r4,7
 1441804:	10000726 	beq	r2,zero,1441824 <__muldf3+0x7c8>
 1441808:	20c003cc 	andi	r3,r4,15
 144180c:	00800104 	movi	r2,4
 1441810:	18800426 	beq	r3,r2,1441824 <__muldf3+0x7c8>
 1441814:	20c00104 	addi	r3,r4,4
 1441818:	1905803a 	cmpltu	r2,r3,r4
 144181c:	80a1883a 	add	r16,r16,r2
 1441820:	1809883a 	mov	r4,r3
 1441824:	8080202c 	andhi	r2,r16,128
 1441828:	10001b26 	beq	r2,zero,1441898 <__muldf3+0x83c>
 144182c:	34c0004c 	andi	r19,r6,1
 1441830:	01000044 	movi	r4,1
 1441834:	0021883a 	mov	r16,zero
 1441838:	002f883a 	mov	r23,zero
 144183c:	003e6106 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 1441840:	013ef884 	movi	r4,-1054
 1441844:	20c9c83a 	sub	r4,r4,r3
 1441848:	01400804 	movi	r5,32
 144184c:	8108d83a 	srl	r4,r16,r4
 1441850:	11401526 	beq	r2,r5,14418a8 <__muldf3+0x84c>
 1441854:	18c10f84 	addi	r3,r3,1086
 1441858:	80e0983a 	sll	r16,r16,r3
 144185c:	85eeb03a 	or	r23,r16,r23
 1441860:	b804c03a 	cmpne	r2,r23,zero
 1441864:	1108b03a 	or	r4,r2,r4
 1441868:	20c001cc 	andi	r3,r4,7
 144186c:	1800061e 	bne	r3,zero,1441888 <__muldf3+0x82c>
 1441870:	0021883a 	mov	r16,zero
 1441874:	202ed0fa 	srli	r23,r4,3
 1441878:	34c0004c 	andi	r19,r6,1
 144187c:	0009883a 	mov	r4,zero
 1441880:	b8eeb03a 	or	r23,r23,r3
 1441884:	003e4f06 	br	14411c4 <__alt_data_end+0xfffdb9c4>
 1441888:	20c003cc 	andi	r3,r4,15
 144188c:	00800104 	movi	r2,4
 1441890:	0021883a 	mov	r16,zero
 1441894:	18bfdf1e 	bne	r3,r2,1441814 <__alt_data_end+0xfffdc014>
 1441898:	8004927a 	slli	r2,r16,9
 144189c:	8006977a 	slli	r3,r16,29
 14418a0:	1020d33a 	srli	r16,r2,12
 14418a4:	003ff306 	br	1441874 <__alt_data_end+0xfffdc074>
 14418a8:	0021883a 	mov	r16,zero
 14418ac:	003feb06 	br	144185c <__alt_data_end+0xfffdc05c>
 14418b0:	00800434 	movhi	r2,16
 14418b4:	84000234 	orhi	r16,r16,8
 14418b8:	10bfffc4 	addi	r2,r2,-1
 14418bc:	4cc0004c 	andi	r19,r9,1
 14418c0:	80a0703a 	and	r16,r16,r2
 14418c4:	003ea606 	br	1441360 <__alt_data_end+0xfffdbb60>

014418c8 <__subdf3>:
 14418c8:	00c00434 	movhi	r3,16
 14418cc:	18ffffc4 	addi	r3,r3,-1
 14418d0:	defffb04 	addi	sp,sp,-20
 14418d4:	28d2703a 	and	r9,r5,r3
 14418d8:	3814d53a 	srli	r10,r7,20
 14418dc:	38c6703a 	and	r3,r7,r3
 14418e0:	3004d77a 	srli	r2,r6,29
 14418e4:	dc800215 	stw	r18,8(sp)
 14418e8:	dc000015 	stw	r16,0(sp)
 14418ec:	2824d7fa 	srli	r18,r5,31
 14418f0:	2820d53a 	srli	r16,r5,20
 14418f4:	481290fa 	slli	r9,r9,3
 14418f8:	200ad77a 	srli	r5,r4,29
 14418fc:	180690fa 	slli	r3,r3,3
 1441900:	dc400115 	stw	r17,4(sp)
 1441904:	dfc00415 	stw	ra,16(sp)
 1441908:	202290fa 	slli	r17,r4,3
 144190c:	dcc00315 	stw	r19,12(sp)
 1441910:	5281ffcc 	andi	r10,r10,2047
 1441914:	0101ffc4 	movi	r4,2047
 1441918:	9011883a 	mov	r8,r18
 144191c:	8401ffcc 	andi	r16,r16,2047
 1441920:	94803fcc 	andi	r18,r18,255
 1441924:	494ab03a 	or	r5,r9,r5
 1441928:	380ed7fa 	srli	r7,r7,31
 144192c:	1886b03a 	or	r3,r3,r2
 1441930:	300c90fa 	slli	r6,r6,3
 1441934:	51009026 	beq	r10,r4,1441b78 <__subdf3+0x2b0>
 1441938:	39c0005c 	xori	r7,r7,1
 144193c:	8285c83a 	sub	r2,r16,r10
 1441940:	91c06f26 	beq	r18,r7,1441b00 <__subdf3+0x238>
 1441944:	0080b10e 	bge	zero,r2,1441c0c <__subdf3+0x344>
 1441948:	50002a1e 	bne	r10,zero,14419f4 <__subdf3+0x12c>
 144194c:	1988b03a 	or	r4,r3,r6
 1441950:	2000941e 	bne	r4,zero,1441ba4 <__subdf3+0x2dc>
 1441954:	888001cc 	andi	r2,r17,7
 1441958:	10005b26 	beq	r2,zero,1441ac8 <__subdf3+0x200>
 144195c:	88c003cc 	andi	r3,r17,15
 1441960:	00800104 	movi	r2,4
 1441964:	18805826 	beq	r3,r2,1441ac8 <__subdf3+0x200>
 1441968:	88c00104 	addi	r3,r17,4
 144196c:	1c63803a 	cmpltu	r17,r3,r17
 1441970:	2c4b883a 	add	r5,r5,r17
 1441974:	2880202c 	andhi	r2,r5,128
 1441978:	9200004c 	andi	r8,r18,1
 144197c:	1823883a 	mov	r17,r3
 1441980:	10005426 	beq	r2,zero,1441ad4 <__subdf3+0x20c>
 1441984:	84000044 	addi	r16,r16,1
 1441988:	0081ffc4 	movi	r2,2047
 144198c:	8080bf26 	beq	r16,r2,1441c8c <__subdf3+0x3c4>
 1441990:	013fe034 	movhi	r4,65408
 1441994:	213fffc4 	addi	r4,r4,-1
 1441998:	290a703a 	and	r5,r5,r4
 144199c:	2804977a 	slli	r2,r5,29
 14419a0:	280a927a 	slli	r5,r5,9
 14419a4:	8822d0fa 	srli	r17,r17,3
 14419a8:	8401ffcc 	andi	r16,r16,2047
 14419ac:	2808d33a 	srli	r4,r5,12
 14419b0:	1444b03a 	or	r2,r2,r17
 14419b4:	8401ffcc 	andi	r16,r16,2047
 14419b8:	800a953a 	slli	r5,r16,20
 14419bc:	40c03fcc 	andi	r3,r8,255
 14419c0:	04000434 	movhi	r16,16
 14419c4:	180697fa 	slli	r3,r3,31
 14419c8:	843fffc4 	addi	r16,r16,-1
 14419cc:	2420703a 	and	r16,r4,r16
 14419d0:	8160b03a 	or	r16,r16,r5
 14419d4:	80c6b03a 	or	r3,r16,r3
 14419d8:	dfc00417 	ldw	ra,16(sp)
 14419dc:	dcc00317 	ldw	r19,12(sp)
 14419e0:	dc800217 	ldw	r18,8(sp)
 14419e4:	dc400117 	ldw	r17,4(sp)
 14419e8:	dc000017 	ldw	r16,0(sp)
 14419ec:	dec00504 	addi	sp,sp,20
 14419f0:	f800283a 	ret
 14419f4:	0101ffc4 	movi	r4,2047
 14419f8:	813fd626 	beq	r16,r4,1441954 <__alt_data_end+0xfffdc154>
 14419fc:	18c02034 	orhi	r3,r3,128
 1441a00:	01000e04 	movi	r4,56
 1441a04:	2080a416 	blt	r4,r2,1441c98 <__subdf3+0x3d0>
 1441a08:	010007c4 	movi	r4,31
 1441a0c:	2080c716 	blt	r4,r2,1441d2c <__subdf3+0x464>
 1441a10:	01000804 	movi	r4,32
 1441a14:	2089c83a 	sub	r4,r4,r2
 1441a18:	1910983a 	sll	r8,r3,r4
 1441a1c:	308ed83a 	srl	r7,r6,r2
 1441a20:	3108983a 	sll	r4,r6,r4
 1441a24:	1884d83a 	srl	r2,r3,r2
 1441a28:	41ccb03a 	or	r6,r8,r7
 1441a2c:	2008c03a 	cmpne	r4,r4,zero
 1441a30:	310cb03a 	or	r6,r6,r4
 1441a34:	898dc83a 	sub	r6,r17,r6
 1441a38:	89a3803a 	cmpltu	r17,r17,r6
 1441a3c:	288bc83a 	sub	r5,r5,r2
 1441a40:	2c4bc83a 	sub	r5,r5,r17
 1441a44:	3023883a 	mov	r17,r6
 1441a48:	2880202c 	andhi	r2,r5,128
 1441a4c:	10006b26 	beq	r2,zero,1441bfc <__subdf3+0x334>
 1441a50:	04c02034 	movhi	r19,128
 1441a54:	9cffffc4 	addi	r19,r19,-1
 1441a58:	2ce6703a 	and	r19,r5,r19
 1441a5c:	98007c26 	beq	r19,zero,1441c50 <__subdf3+0x388>
 1441a60:	9809883a 	mov	r4,r19
 1441a64:	14422680 	call	1442268 <__clzsi2>
 1441a68:	10fffe04 	addi	r3,r2,-8
 1441a6c:	010007c4 	movi	r4,31
 1441a70:	20c07d16 	blt	r4,r3,1441c68 <__subdf3+0x3a0>
 1441a74:	01400a04 	movi	r5,40
 1441a78:	2885c83a 	sub	r2,r5,r2
 1441a7c:	888ad83a 	srl	r5,r17,r2
 1441a80:	98e6983a 	sll	r19,r19,r3
 1441a84:	88e2983a 	sll	r17,r17,r3
 1441a88:	2ce6b03a 	or	r19,r5,r19
 1441a8c:	1c007a16 	blt	r3,r16,1441c78 <__subdf3+0x3b0>
 1441a90:	1c21c83a 	sub	r16,r3,r16
 1441a94:	81400044 	addi	r5,r16,1
 1441a98:	00c007c4 	movi	r3,31
 1441a9c:	19409616 	blt	r3,r5,1441cf8 <__subdf3+0x430>
 1441aa0:	1c21c83a 	sub	r16,r3,r16
 1441aa4:	8c08983a 	sll	r4,r17,r16
 1441aa8:	8946d83a 	srl	r3,r17,r5
 1441aac:	9c20983a 	sll	r16,r19,r16
 1441ab0:	2008c03a 	cmpne	r4,r4,zero
 1441ab4:	994ad83a 	srl	r5,r19,r5
 1441ab8:	1c06b03a 	or	r3,r3,r16
 1441abc:	1922b03a 	or	r17,r3,r4
 1441ac0:	0021883a 	mov	r16,zero
 1441ac4:	003fa306 	br	1441954 <__alt_data_end+0xfffdc154>
 1441ac8:	2880202c 	andhi	r2,r5,128
 1441acc:	9200004c 	andi	r8,r18,1
 1441ad0:	103fac1e 	bne	r2,zero,1441984 <__alt_data_end+0xfffdc184>
 1441ad4:	2804977a 	slli	r2,r5,29
 1441ad8:	8822d0fa 	srli	r17,r17,3
 1441adc:	00c1ffc4 	movi	r3,2047
 1441ae0:	280ad0fa 	srli	r5,r5,3
 1441ae4:	1444b03a 	or	r2,r2,r17
 1441ae8:	80c02726 	beq	r16,r3,1441b88 <__subdf3+0x2c0>
 1441aec:	01000434 	movhi	r4,16
 1441af0:	213fffc4 	addi	r4,r4,-1
 1441af4:	80e0703a 	and	r16,r16,r3
 1441af8:	2908703a 	and	r4,r5,r4
 1441afc:	003fad06 	br	14419b4 <__alt_data_end+0xfffdc1b4>
 1441b00:	0080690e 	bge	zero,r2,1441ca8 <__subdf3+0x3e0>
 1441b04:	50002f26 	beq	r10,zero,1441bc4 <__subdf3+0x2fc>
 1441b08:	0101ffc4 	movi	r4,2047
 1441b0c:	813f9126 	beq	r16,r4,1441954 <__alt_data_end+0xfffdc154>
 1441b10:	18c02034 	orhi	r3,r3,128
 1441b14:	01000e04 	movi	r4,56
 1441b18:	2080b00e 	bge	r4,r2,1441ddc <__subdf3+0x514>
 1441b1c:	198cb03a 	or	r6,r3,r6
 1441b20:	300ec03a 	cmpne	r7,r6,zero
 1441b24:	0005883a 	mov	r2,zero
 1441b28:	3c4f883a 	add	r7,r7,r17
 1441b2c:	3c63803a 	cmpltu	r17,r7,r17
 1441b30:	114b883a 	add	r5,r2,r5
 1441b34:	2c4b883a 	add	r5,r5,r17
 1441b38:	3823883a 	mov	r17,r7
 1441b3c:	2880202c 	andhi	r2,r5,128
 1441b40:	10002e26 	beq	r2,zero,1441bfc <__subdf3+0x334>
 1441b44:	84000044 	addi	r16,r16,1
 1441b48:	0081ffc4 	movi	r2,2047
 1441b4c:	8080de26 	beq	r16,r2,1441ec8 <__subdf3+0x600>
 1441b50:	00bfe034 	movhi	r2,65408
 1441b54:	10bfffc4 	addi	r2,r2,-1
 1441b58:	288a703a 	and	r5,r5,r2
 1441b5c:	880cd07a 	srli	r6,r17,1
 1441b60:	280897fa 	slli	r4,r5,31
 1441b64:	88c0004c 	andi	r3,r17,1
 1441b68:	30e2b03a 	or	r17,r6,r3
 1441b6c:	280ad07a 	srli	r5,r5,1
 1441b70:	8922b03a 	or	r17,r17,r4
 1441b74:	003f7706 	br	1441954 <__alt_data_end+0xfffdc154>
 1441b78:	1984b03a 	or	r2,r3,r6
 1441b7c:	103f6e26 	beq	r2,zero,1441938 <__alt_data_end+0xfffdc138>
 1441b80:	39c03fcc 	andi	r7,r7,255
 1441b84:	003f6d06 	br	144193c <__alt_data_end+0xfffdc13c>
 1441b88:	1146b03a 	or	r3,r2,r5
 1441b8c:	18003f26 	beq	r3,zero,1441c8c <__subdf3+0x3c4>
 1441b90:	00c00434 	movhi	r3,16
 1441b94:	29000234 	orhi	r4,r5,8
 1441b98:	18ffffc4 	addi	r3,r3,-1
 1441b9c:	20c8703a 	and	r4,r4,r3
 1441ba0:	003f8406 	br	14419b4 <__alt_data_end+0xfffdc1b4>
 1441ba4:	10bfffc4 	addi	r2,r2,-1
 1441ba8:	1000501e 	bne	r2,zero,1441cec <__subdf3+0x424>
 1441bac:	898fc83a 	sub	r7,r17,r6
 1441bb0:	89e3803a 	cmpltu	r17,r17,r7
 1441bb4:	28cbc83a 	sub	r5,r5,r3
 1441bb8:	2c4bc83a 	sub	r5,r5,r17
 1441bbc:	3823883a 	mov	r17,r7
 1441bc0:	003fa106 	br	1441a48 <__alt_data_end+0xfffdc248>
 1441bc4:	1988b03a 	or	r4,r3,r6
 1441bc8:	203f6226 	beq	r4,zero,1441954 <__alt_data_end+0xfffdc154>
 1441bcc:	10bfffc4 	addi	r2,r2,-1
 1441bd0:	10009b1e 	bne	r2,zero,1441e40 <__subdf3+0x578>
 1441bd4:	344d883a 	add	r6,r6,r17
 1441bd8:	3463803a 	cmpltu	r17,r6,r17
 1441bdc:	194b883a 	add	r5,r3,r5
 1441be0:	2c4b883a 	add	r5,r5,r17
 1441be4:	3023883a 	mov	r17,r6
 1441be8:	003fd406 	br	1441b3c <__alt_data_end+0xfffdc33c>
 1441bec:	1106b03a 	or	r3,r2,r4
 1441bf0:	1800b426 	beq	r3,zero,1441ec4 <__subdf3+0x5fc>
 1441bf4:	100b883a 	mov	r5,r2
 1441bf8:	2023883a 	mov	r17,r4
 1441bfc:	888001cc 	andi	r2,r17,7
 1441c00:	103f561e 	bne	r2,zero,144195c <__alt_data_end+0xfffdc15c>
 1441c04:	9200004c 	andi	r8,r18,1
 1441c08:	003fb206 	br	1441ad4 <__alt_data_end+0xfffdc2d4>
 1441c0c:	1000531e 	bne	r2,zero,1441d5c <__subdf3+0x494>
 1441c10:	80800044 	addi	r2,r16,1
 1441c14:	1081ffcc 	andi	r2,r2,2047
 1441c18:	01000044 	movi	r4,1
 1441c1c:	2080a00e 	bge	r4,r2,1441ea0 <__subdf3+0x5d8>
 1441c20:	8985c83a 	sub	r2,r17,r6
 1441c24:	8889803a 	cmpltu	r4,r17,r2
 1441c28:	28e7c83a 	sub	r19,r5,r3
 1441c2c:	9927c83a 	sub	r19,r19,r4
 1441c30:	9900202c 	andhi	r4,r19,128
 1441c34:	20006226 	beq	r4,zero,1441dc0 <__subdf3+0x4f8>
 1441c38:	3463c83a 	sub	r17,r6,r17
 1441c3c:	194bc83a 	sub	r5,r3,r5
 1441c40:	344d803a 	cmpltu	r6,r6,r17
 1441c44:	29a7c83a 	sub	r19,r5,r6
 1441c48:	3825883a 	mov	r18,r7
 1441c4c:	983f841e 	bne	r19,zero,1441a60 <__alt_data_end+0xfffdc260>
 1441c50:	8809883a 	mov	r4,r17
 1441c54:	14422680 	call	1442268 <__clzsi2>
 1441c58:	10800804 	addi	r2,r2,32
 1441c5c:	10fffe04 	addi	r3,r2,-8
 1441c60:	010007c4 	movi	r4,31
 1441c64:	20ff830e 	bge	r4,r3,1441a74 <__alt_data_end+0xfffdc274>
 1441c68:	14fff604 	addi	r19,r2,-40
 1441c6c:	8ce6983a 	sll	r19,r17,r19
 1441c70:	0023883a 	mov	r17,zero
 1441c74:	1c3f860e 	bge	r3,r16,1441a90 <__alt_data_end+0xfffdc290>
 1441c78:	017fe034 	movhi	r5,65408
 1441c7c:	297fffc4 	addi	r5,r5,-1
 1441c80:	80e1c83a 	sub	r16,r16,r3
 1441c84:	994a703a 	and	r5,r19,r5
 1441c88:	003f3206 	br	1441954 <__alt_data_end+0xfffdc154>
 1441c8c:	0009883a 	mov	r4,zero
 1441c90:	0005883a 	mov	r2,zero
 1441c94:	003f4706 	br	14419b4 <__alt_data_end+0xfffdc1b4>
 1441c98:	198cb03a 	or	r6,r3,r6
 1441c9c:	300cc03a 	cmpne	r6,r6,zero
 1441ca0:	0005883a 	mov	r2,zero
 1441ca4:	003f6306 	br	1441a34 <__alt_data_end+0xfffdc234>
 1441ca8:	10009d1e 	bne	r2,zero,1441f20 <__subdf3+0x658>
 1441cac:	81c00044 	addi	r7,r16,1
 1441cb0:	3881ffcc 	andi	r2,r7,2047
 1441cb4:	02400044 	movi	r9,1
 1441cb8:	4880680e 	bge	r9,r2,1441e5c <__subdf3+0x594>
 1441cbc:	0081ffc4 	movi	r2,2047
 1441cc0:	3880ae26 	beq	r7,r2,1441f7c <__subdf3+0x6b4>
 1441cc4:	344d883a 	add	r6,r6,r17
 1441cc8:	3463803a 	cmpltu	r17,r6,r17
 1441ccc:	194b883a 	add	r5,r3,r5
 1441cd0:	2c4b883a 	add	r5,r5,r17
 1441cd4:	282297fa 	slli	r17,r5,31
 1441cd8:	300cd07a 	srli	r6,r6,1
 1441cdc:	280ad07a 	srli	r5,r5,1
 1441ce0:	3821883a 	mov	r16,r7
 1441ce4:	89a2b03a 	or	r17,r17,r6
 1441ce8:	003f1a06 	br	1441954 <__alt_data_end+0xfffdc154>
 1441cec:	0101ffc4 	movi	r4,2047
 1441cf0:	813f431e 	bne	r16,r4,1441a00 <__alt_data_end+0xfffdc200>
 1441cf4:	003f1706 	br	1441954 <__alt_data_end+0xfffdc154>
 1441cf8:	80bff844 	addi	r2,r16,-31
 1441cfc:	00c00804 	movi	r3,32
 1441d00:	9884d83a 	srl	r2,r19,r2
 1441d04:	28c05126 	beq	r5,r3,1441e4c <__subdf3+0x584>
 1441d08:	00c00fc4 	movi	r3,63
 1441d0c:	1c21c83a 	sub	r16,r3,r16
 1441d10:	9c26983a 	sll	r19,r19,r16
 1441d14:	9c62b03a 	or	r17,r19,r17
 1441d18:	8822c03a 	cmpne	r17,r17,zero
 1441d1c:	88a2b03a 	or	r17,r17,r2
 1441d20:	000b883a 	mov	r5,zero
 1441d24:	0021883a 	mov	r16,zero
 1441d28:	003fb406 	br	1441bfc <__alt_data_end+0xfffdc3fc>
 1441d2c:	113ff804 	addi	r4,r2,-32
 1441d30:	01c00804 	movi	r7,32
 1441d34:	1908d83a 	srl	r4,r3,r4
 1441d38:	11c04626 	beq	r2,r7,1441e54 <__subdf3+0x58c>
 1441d3c:	01c01004 	movi	r7,64
 1441d40:	3885c83a 	sub	r2,r7,r2
 1441d44:	1884983a 	sll	r2,r3,r2
 1441d48:	118cb03a 	or	r6,r2,r6
 1441d4c:	300cc03a 	cmpne	r6,r6,zero
 1441d50:	310cb03a 	or	r6,r6,r4
 1441d54:	0005883a 	mov	r2,zero
 1441d58:	003f3606 	br	1441a34 <__alt_data_end+0xfffdc234>
 1441d5c:	80002b26 	beq	r16,zero,1441e0c <__subdf3+0x544>
 1441d60:	0101ffc4 	movi	r4,2047
 1441d64:	51006926 	beq	r10,r4,1441f0c <__subdf3+0x644>
 1441d68:	0085c83a 	sub	r2,zero,r2
 1441d6c:	29402034 	orhi	r5,r5,128
 1441d70:	01000e04 	movi	r4,56
 1441d74:	20807d16 	blt	r4,r2,1441f6c <__subdf3+0x6a4>
 1441d78:	010007c4 	movi	r4,31
 1441d7c:	2080d916 	blt	r4,r2,14420e4 <__subdf3+0x81c>
 1441d80:	01000804 	movi	r4,32
 1441d84:	2089c83a 	sub	r4,r4,r2
 1441d88:	2912983a 	sll	r9,r5,r4
 1441d8c:	8890d83a 	srl	r8,r17,r2
 1441d90:	8908983a 	sll	r4,r17,r4
 1441d94:	2884d83a 	srl	r2,r5,r2
 1441d98:	4a22b03a 	or	r17,r9,r8
 1441d9c:	2008c03a 	cmpne	r4,r4,zero
 1441da0:	8922b03a 	or	r17,r17,r4
 1441da4:	3463c83a 	sub	r17,r6,r17
 1441da8:	1885c83a 	sub	r2,r3,r2
 1441dac:	344d803a 	cmpltu	r6,r6,r17
 1441db0:	118bc83a 	sub	r5,r2,r6
 1441db4:	5021883a 	mov	r16,r10
 1441db8:	3825883a 	mov	r18,r7
 1441dbc:	003f2206 	br	1441a48 <__alt_data_end+0xfffdc248>
 1441dc0:	9886b03a 	or	r3,r19,r2
 1441dc4:	18001c1e 	bne	r3,zero,1441e38 <__subdf3+0x570>
 1441dc8:	0011883a 	mov	r8,zero
 1441dcc:	000b883a 	mov	r5,zero
 1441dd0:	0023883a 	mov	r17,zero
 1441dd4:	0021883a 	mov	r16,zero
 1441dd8:	003f3e06 	br	1441ad4 <__alt_data_end+0xfffdc2d4>
 1441ddc:	010007c4 	movi	r4,31
 1441de0:	20803c16 	blt	r4,r2,1441ed4 <__subdf3+0x60c>
 1441de4:	01000804 	movi	r4,32
 1441de8:	2089c83a 	sub	r4,r4,r2
 1441dec:	1912983a 	sll	r9,r3,r4
 1441df0:	308ed83a 	srl	r7,r6,r2
 1441df4:	3108983a 	sll	r4,r6,r4
 1441df8:	1884d83a 	srl	r2,r3,r2
 1441dfc:	49ceb03a 	or	r7,r9,r7
 1441e00:	2008c03a 	cmpne	r4,r4,zero
 1441e04:	390eb03a 	or	r7,r7,r4
 1441e08:	003f4706 	br	1441b28 <__alt_data_end+0xfffdc328>
 1441e0c:	2c48b03a 	or	r4,r5,r17
 1441e10:	20003e26 	beq	r4,zero,1441f0c <__subdf3+0x644>
 1441e14:	0084303a 	nor	r2,zero,r2
 1441e18:	10003a1e 	bne	r2,zero,1441f04 <__subdf3+0x63c>
 1441e1c:	3463c83a 	sub	r17,r6,r17
 1441e20:	194bc83a 	sub	r5,r3,r5
 1441e24:	344d803a 	cmpltu	r6,r6,r17
 1441e28:	298bc83a 	sub	r5,r5,r6
 1441e2c:	5021883a 	mov	r16,r10
 1441e30:	3825883a 	mov	r18,r7
 1441e34:	003f0406 	br	1441a48 <__alt_data_end+0xfffdc248>
 1441e38:	1023883a 	mov	r17,r2
 1441e3c:	003f0706 	br	1441a5c <__alt_data_end+0xfffdc25c>
 1441e40:	0101ffc4 	movi	r4,2047
 1441e44:	813f331e 	bne	r16,r4,1441b14 <__alt_data_end+0xfffdc314>
 1441e48:	003ec206 	br	1441954 <__alt_data_end+0xfffdc154>
 1441e4c:	0027883a 	mov	r19,zero
 1441e50:	003fb006 	br	1441d14 <__alt_data_end+0xfffdc514>
 1441e54:	0005883a 	mov	r2,zero
 1441e58:	003fbb06 	br	1441d48 <__alt_data_end+0xfffdc548>
 1441e5c:	2c44b03a 	or	r2,r5,r17
 1441e60:	80008b1e 	bne	r16,zero,1442090 <__subdf3+0x7c8>
 1441e64:	1000b526 	beq	r2,zero,144213c <__subdf3+0x874>
 1441e68:	1984b03a 	or	r2,r3,r6
 1441e6c:	103eb926 	beq	r2,zero,1441954 <__alt_data_end+0xfffdc154>
 1441e70:	3449883a 	add	r4,r6,r17
 1441e74:	2463803a 	cmpltu	r17,r4,r17
 1441e78:	194b883a 	add	r5,r3,r5
 1441e7c:	2c4b883a 	add	r5,r5,r17
 1441e80:	2880202c 	andhi	r2,r5,128
 1441e84:	2023883a 	mov	r17,r4
 1441e88:	103f5c26 	beq	r2,zero,1441bfc <__alt_data_end+0xfffdc3fc>
 1441e8c:	00bfe034 	movhi	r2,65408
 1441e90:	10bfffc4 	addi	r2,r2,-1
 1441e94:	4821883a 	mov	r16,r9
 1441e98:	288a703a 	and	r5,r5,r2
 1441e9c:	003ead06 	br	1441954 <__alt_data_end+0xfffdc154>
 1441ea0:	2c44b03a 	or	r2,r5,r17
 1441ea4:	8000291e 	bne	r16,zero,1441f4c <__subdf3+0x684>
 1441ea8:	10004f1e 	bne	r2,zero,1441fe8 <__subdf3+0x720>
 1441eac:	1984b03a 	or	r2,r3,r6
 1441eb0:	10000426 	beq	r2,zero,1441ec4 <__subdf3+0x5fc>
 1441eb4:	180b883a 	mov	r5,r3
 1441eb8:	3023883a 	mov	r17,r6
 1441ebc:	3825883a 	mov	r18,r7
 1441ec0:	003ea406 	br	1441954 <__alt_data_end+0xfffdc154>
 1441ec4:	0011883a 	mov	r8,zero
 1441ec8:	000b883a 	mov	r5,zero
 1441ecc:	0023883a 	mov	r17,zero
 1441ed0:	003f0006 	br	1441ad4 <__alt_data_end+0xfffdc2d4>
 1441ed4:	11fff804 	addi	r7,r2,-32
 1441ed8:	19c8d83a 	srl	r4,r3,r7
 1441edc:	01c00804 	movi	r7,32
 1441ee0:	11c07e26 	beq	r2,r7,14420dc <__subdf3+0x814>
 1441ee4:	01c01004 	movi	r7,64
 1441ee8:	3885c83a 	sub	r2,r7,r2
 1441eec:	1884983a 	sll	r2,r3,r2
 1441ef0:	118cb03a 	or	r6,r2,r6
 1441ef4:	300ec03a 	cmpne	r7,r6,zero
 1441ef8:	390eb03a 	or	r7,r7,r4
 1441efc:	0005883a 	mov	r2,zero
 1441f00:	003f0906 	br	1441b28 <__alt_data_end+0xfffdc328>
 1441f04:	0101ffc4 	movi	r4,2047
 1441f08:	513f991e 	bne	r10,r4,1441d70 <__alt_data_end+0xfffdc570>
 1441f0c:	180b883a 	mov	r5,r3
 1441f10:	3023883a 	mov	r17,r6
 1441f14:	5021883a 	mov	r16,r10
 1441f18:	3825883a 	mov	r18,r7
 1441f1c:	003e8d06 	br	1441954 <__alt_data_end+0xfffdc154>
 1441f20:	80001a1e 	bne	r16,zero,1441f8c <__subdf3+0x6c4>
 1441f24:	2c48b03a 	or	r4,r5,r17
 1441f28:	20005526 	beq	r4,zero,1442080 <__subdf3+0x7b8>
 1441f2c:	0084303a 	nor	r2,zero,r2
 1441f30:	1000511e 	bne	r2,zero,1442078 <__subdf3+0x7b0>
 1441f34:	89a3883a 	add	r17,r17,r6
 1441f38:	194b883a 	add	r5,r3,r5
 1441f3c:	898d803a 	cmpltu	r6,r17,r6
 1441f40:	298b883a 	add	r5,r5,r6
 1441f44:	5021883a 	mov	r16,r10
 1441f48:	003efc06 	br	1441b3c <__alt_data_end+0xfffdc33c>
 1441f4c:	1000341e 	bne	r2,zero,1442020 <__subdf3+0x758>
 1441f50:	1984b03a 	or	r2,r3,r6
 1441f54:	10006f26 	beq	r2,zero,1442114 <__subdf3+0x84c>
 1441f58:	180b883a 	mov	r5,r3
 1441f5c:	3023883a 	mov	r17,r6
 1441f60:	3825883a 	mov	r18,r7
 1441f64:	0401ffc4 	movi	r16,2047
 1441f68:	003e7a06 	br	1441954 <__alt_data_end+0xfffdc154>
 1441f6c:	2c62b03a 	or	r17,r5,r17
 1441f70:	8822c03a 	cmpne	r17,r17,zero
 1441f74:	0005883a 	mov	r2,zero
 1441f78:	003f8a06 	br	1441da4 <__alt_data_end+0xfffdc5a4>
 1441f7c:	3821883a 	mov	r16,r7
 1441f80:	000b883a 	mov	r5,zero
 1441f84:	0023883a 	mov	r17,zero
 1441f88:	003ed206 	br	1441ad4 <__alt_data_end+0xfffdc2d4>
 1441f8c:	0101ffc4 	movi	r4,2047
 1441f90:	51003b26 	beq	r10,r4,1442080 <__subdf3+0x7b8>
 1441f94:	0085c83a 	sub	r2,zero,r2
 1441f98:	29402034 	orhi	r5,r5,128
 1441f9c:	01000e04 	movi	r4,56
 1441fa0:	20806216 	blt	r4,r2,144212c <__subdf3+0x864>
 1441fa4:	010007c4 	movi	r4,31
 1441fa8:	20806b16 	blt	r4,r2,1442158 <__subdf3+0x890>
 1441fac:	01000804 	movi	r4,32
 1441fb0:	2089c83a 	sub	r4,r4,r2
 1441fb4:	2912983a 	sll	r9,r5,r4
 1441fb8:	888ed83a 	srl	r7,r17,r2
 1441fbc:	8908983a 	sll	r4,r17,r4
 1441fc0:	2884d83a 	srl	r2,r5,r2
 1441fc4:	49e2b03a 	or	r17,r9,r7
 1441fc8:	2008c03a 	cmpne	r4,r4,zero
 1441fcc:	8922b03a 	or	r17,r17,r4
 1441fd0:	89a3883a 	add	r17,r17,r6
 1441fd4:	10c5883a 	add	r2,r2,r3
 1441fd8:	898d803a 	cmpltu	r6,r17,r6
 1441fdc:	118b883a 	add	r5,r2,r6
 1441fe0:	5021883a 	mov	r16,r10
 1441fe4:	003ed506 	br	1441b3c <__alt_data_end+0xfffdc33c>
 1441fe8:	1984b03a 	or	r2,r3,r6
 1441fec:	103e5926 	beq	r2,zero,1441954 <__alt_data_end+0xfffdc154>
 1441ff0:	8989c83a 	sub	r4,r17,r6
 1441ff4:	8911803a 	cmpltu	r8,r17,r4
 1441ff8:	28c5c83a 	sub	r2,r5,r3
 1441ffc:	1205c83a 	sub	r2,r2,r8
 1442000:	1200202c 	andhi	r8,r2,128
 1442004:	403ef926 	beq	r8,zero,1441bec <__alt_data_end+0xfffdc3ec>
 1442008:	3463c83a 	sub	r17,r6,r17
 144200c:	194bc83a 	sub	r5,r3,r5
 1442010:	344d803a 	cmpltu	r6,r6,r17
 1442014:	298bc83a 	sub	r5,r5,r6
 1442018:	3825883a 	mov	r18,r7
 144201c:	003e4d06 	br	1441954 <__alt_data_end+0xfffdc154>
 1442020:	1984b03a 	or	r2,r3,r6
 1442024:	10002b26 	beq	r2,zero,14420d4 <__subdf3+0x80c>
 1442028:	2808d0fa 	srli	r4,r5,3
 144202c:	8822d0fa 	srli	r17,r17,3
 1442030:	280a977a 	slli	r5,r5,29
 1442034:	2080022c 	andhi	r2,r4,8
 1442038:	2c62b03a 	or	r17,r5,r17
 144203c:	10000826 	beq	r2,zero,1442060 <__subdf3+0x798>
 1442040:	1810d0fa 	srli	r8,r3,3
 1442044:	4080022c 	andhi	r2,r8,8
 1442048:	1000051e 	bne	r2,zero,1442060 <__subdf3+0x798>
 144204c:	300cd0fa 	srli	r6,r6,3
 1442050:	1804977a 	slli	r2,r3,29
 1442054:	4009883a 	mov	r4,r8
 1442058:	3825883a 	mov	r18,r7
 144205c:	11a2b03a 	or	r17,r2,r6
 1442060:	880ad77a 	srli	r5,r17,29
 1442064:	200890fa 	slli	r4,r4,3
 1442068:	882290fa 	slli	r17,r17,3
 144206c:	0401ffc4 	movi	r16,2047
 1442070:	290ab03a 	or	r5,r5,r4
 1442074:	003e3706 	br	1441954 <__alt_data_end+0xfffdc154>
 1442078:	0101ffc4 	movi	r4,2047
 144207c:	513fc71e 	bne	r10,r4,1441f9c <__alt_data_end+0xfffdc79c>
 1442080:	180b883a 	mov	r5,r3
 1442084:	3023883a 	mov	r17,r6
 1442088:	5021883a 	mov	r16,r10
 144208c:	003e3106 	br	1441954 <__alt_data_end+0xfffdc154>
 1442090:	10002d26 	beq	r2,zero,1442148 <__subdf3+0x880>
 1442094:	1984b03a 	or	r2,r3,r6
 1442098:	10000e26 	beq	r2,zero,14420d4 <__subdf3+0x80c>
 144209c:	2808d0fa 	srli	r4,r5,3
 14420a0:	8822d0fa 	srli	r17,r17,3
 14420a4:	280a977a 	slli	r5,r5,29
 14420a8:	2080022c 	andhi	r2,r4,8
 14420ac:	2c62b03a 	or	r17,r5,r17
 14420b0:	103feb26 	beq	r2,zero,1442060 <__alt_data_end+0xfffdc860>
 14420b4:	180ed0fa 	srli	r7,r3,3
 14420b8:	3880022c 	andhi	r2,r7,8
 14420bc:	103fe81e 	bne	r2,zero,1442060 <__alt_data_end+0xfffdc860>
 14420c0:	300cd0fa 	srli	r6,r6,3
 14420c4:	1804977a 	slli	r2,r3,29
 14420c8:	3809883a 	mov	r4,r7
 14420cc:	11a2b03a 	or	r17,r2,r6
 14420d0:	003fe306 	br	1442060 <__alt_data_end+0xfffdc860>
 14420d4:	0401ffc4 	movi	r16,2047
 14420d8:	003e1e06 	br	1441954 <__alt_data_end+0xfffdc154>
 14420dc:	0005883a 	mov	r2,zero
 14420e0:	003f8306 	br	1441ef0 <__alt_data_end+0xfffdc6f0>
 14420e4:	113ff804 	addi	r4,r2,-32
 14420e8:	02000804 	movi	r8,32
 14420ec:	2908d83a 	srl	r4,r5,r4
 14420f0:	12002526 	beq	r2,r8,1442188 <__subdf3+0x8c0>
 14420f4:	02001004 	movi	r8,64
 14420f8:	4085c83a 	sub	r2,r8,r2
 14420fc:	288a983a 	sll	r5,r5,r2
 1442100:	2c62b03a 	or	r17,r5,r17
 1442104:	8822c03a 	cmpne	r17,r17,zero
 1442108:	8922b03a 	or	r17,r17,r4
 144210c:	0005883a 	mov	r2,zero
 1442110:	003f2406 	br	1441da4 <__alt_data_end+0xfffdc5a4>
 1442114:	01402034 	movhi	r5,128
 1442118:	0011883a 	mov	r8,zero
 144211c:	297fffc4 	addi	r5,r5,-1
 1442120:	047ffe04 	movi	r17,-8
 1442124:	0401ffc4 	movi	r16,2047
 1442128:	003e6a06 	br	1441ad4 <__alt_data_end+0xfffdc2d4>
 144212c:	2c62b03a 	or	r17,r5,r17
 1442130:	8822c03a 	cmpne	r17,r17,zero
 1442134:	0005883a 	mov	r2,zero
 1442138:	003fa506 	br	1441fd0 <__alt_data_end+0xfffdc7d0>
 144213c:	180b883a 	mov	r5,r3
 1442140:	3023883a 	mov	r17,r6
 1442144:	003e0306 	br	1441954 <__alt_data_end+0xfffdc154>
 1442148:	180b883a 	mov	r5,r3
 144214c:	3023883a 	mov	r17,r6
 1442150:	0401ffc4 	movi	r16,2047
 1442154:	003dff06 	br	1441954 <__alt_data_end+0xfffdc154>
 1442158:	113ff804 	addi	r4,r2,-32
 144215c:	01c00804 	movi	r7,32
 1442160:	2908d83a 	srl	r4,r5,r4
 1442164:	11c00a26 	beq	r2,r7,1442190 <__subdf3+0x8c8>
 1442168:	01c01004 	movi	r7,64
 144216c:	3885c83a 	sub	r2,r7,r2
 1442170:	288a983a 	sll	r5,r5,r2
 1442174:	2c62b03a 	or	r17,r5,r17
 1442178:	8822c03a 	cmpne	r17,r17,zero
 144217c:	8922b03a 	or	r17,r17,r4
 1442180:	0005883a 	mov	r2,zero
 1442184:	003f9206 	br	1441fd0 <__alt_data_end+0xfffdc7d0>
 1442188:	000b883a 	mov	r5,zero
 144218c:	003fdc06 	br	1442100 <__alt_data_end+0xfffdc900>
 1442190:	000b883a 	mov	r5,zero
 1442194:	003ff706 	br	1442174 <__alt_data_end+0xfffdc974>

01442198 <__floatsidf>:
 1442198:	defffd04 	addi	sp,sp,-12
 144219c:	dc400115 	stw	r17,4(sp)
 14421a0:	dfc00215 	stw	ra,8(sp)
 14421a4:	dc000015 	stw	r16,0(sp)
 14421a8:	2023883a 	mov	r17,r4
 14421ac:	20001426 	beq	r4,zero,1442200 <__floatsidf+0x68>
 14421b0:	2020d7fa 	srli	r16,r4,31
 14421b4:	80000126 	beq	r16,zero,14421bc <__floatsidf+0x24>
 14421b8:	0123c83a 	sub	r17,zero,r4
 14421bc:	8809883a 	mov	r4,r17
 14421c0:	14422680 	call	1442268 <__clzsi2>
 14421c4:	01410784 	movi	r5,1054
 14421c8:	00c00284 	movi	r3,10
 14421cc:	288bc83a 	sub	r5,r5,r2
 14421d0:	18801c16 	blt	r3,r2,1442244 <__floatsidf+0xac>
 14421d4:	00c002c4 	movi	r3,11
 14421d8:	1887c83a 	sub	r3,r3,r2
 14421dc:	88c8d83a 	srl	r4,r17,r3
 14421e0:	00c00434 	movhi	r3,16
 14421e4:	18ffffc4 	addi	r3,r3,-1
 14421e8:	10800544 	addi	r2,r2,21
 14421ec:	20c8703a 	and	r4,r4,r3
 14421f0:	8884983a 	sll	r2,r17,r2
 14421f4:	28c1ffcc 	andi	r3,r5,2047
 14421f8:	800d883a 	mov	r6,r16
 14421fc:	00000406 	br	1442210 <__floatsidf+0x78>
 1442200:	000d883a 	mov	r6,zero
 1442204:	0007883a 	mov	r3,zero
 1442208:	0009883a 	mov	r4,zero
 144220c:	0005883a 	mov	r2,zero
 1442210:	180a953a 	slli	r5,r3,20
 1442214:	31803fcc 	andi	r6,r6,255
 1442218:	00c00434 	movhi	r3,16
 144221c:	300c97fa 	slli	r6,r6,31
 1442220:	18ffffc4 	addi	r3,r3,-1
 1442224:	20c6703a 	and	r3,r4,r3
 1442228:	1946b03a 	or	r3,r3,r5
 144222c:	1986b03a 	or	r3,r3,r6
 1442230:	dfc00217 	ldw	ra,8(sp)
 1442234:	dc400117 	ldw	r17,4(sp)
 1442238:	dc000017 	ldw	r16,0(sp)
 144223c:	dec00304 	addi	sp,sp,12
 1442240:	f800283a 	ret
 1442244:	10fffd44 	addi	r3,r2,-11
 1442248:	88c8983a 	sll	r4,r17,r3
 144224c:	00800434 	movhi	r2,16
 1442250:	10bfffc4 	addi	r2,r2,-1
 1442254:	2088703a 	and	r4,r4,r2
 1442258:	28c1ffcc 	andi	r3,r5,2047
 144225c:	800d883a 	mov	r6,r16
 1442260:	0005883a 	mov	r2,zero
 1442264:	003fea06 	br	1442210 <__alt_data_end+0xfffdca10>

01442268 <__clzsi2>:
 1442268:	00bfffd4 	movui	r2,65535
 144226c:	11000b36 	bltu	r2,r4,144229c <__clzsi2+0x34>
 1442270:	00803fc4 	movi	r2,255
 1442274:	1100122e 	bgeu	r2,r4,14422c0 <__clzsi2+0x58>
 1442278:	00c00204 	movi	r3,8
 144227c:	01400604 	movi	r5,24
 1442280:	20c8d83a 	srl	r4,r4,r3
 1442284:	00805174 	movhi	r2,325
 1442288:	10819904 	addi	r2,r2,1636
 144228c:	1109883a 	add	r4,r2,r4
 1442290:	20800003 	ldbu	r2,0(r4)
 1442294:	2885c83a 	sub	r2,r5,r2
 1442298:	f800283a 	ret
 144229c:	00804034 	movhi	r2,256
 14422a0:	10bfffc4 	addi	r2,r2,-1
 14422a4:	11000336 	bltu	r2,r4,14422b4 <__clzsi2+0x4c>
 14422a8:	00c00404 	movi	r3,16
 14422ac:	180b883a 	mov	r5,r3
 14422b0:	003ff306 	br	1442280 <__alt_data_end+0xfffdca80>
 14422b4:	00c00604 	movi	r3,24
 14422b8:	01400204 	movi	r5,8
 14422bc:	003ff006 	br	1442280 <__alt_data_end+0xfffdca80>
 14422c0:	0007883a 	mov	r3,zero
 14422c4:	01400804 	movi	r5,32
 14422c8:	003fed06 	br	1442280 <__alt_data_end+0xfffdca80>

014422cc <udivmodsi4>:
 14422cc:	2900182e 	bgeu	r5,r4,1442330 <udivmodsi4+0x64>
 14422d0:	28001716 	blt	r5,zero,1442330 <udivmodsi4+0x64>
 14422d4:	00800804 	movi	r2,32
 14422d8:	00c00044 	movi	r3,1
 14422dc:	00000206 	br	14422e8 <udivmodsi4+0x1c>
 14422e0:	10001126 	beq	r2,zero,1442328 <udivmodsi4+0x5c>
 14422e4:	28000516 	blt	r5,zero,14422fc <udivmodsi4+0x30>
 14422e8:	294b883a 	add	r5,r5,r5
 14422ec:	10bfffc4 	addi	r2,r2,-1
 14422f0:	18c7883a 	add	r3,r3,r3
 14422f4:	293ffa36 	bltu	r5,r4,14422e0 <__alt_data_end+0xfffdcae0>
 14422f8:	18000b26 	beq	r3,zero,1442328 <udivmodsi4+0x5c>
 14422fc:	0005883a 	mov	r2,zero
 1442300:	21400236 	bltu	r4,r5,144230c <udivmodsi4+0x40>
 1442304:	2149c83a 	sub	r4,r4,r5
 1442308:	10c4b03a 	or	r2,r2,r3
 144230c:	1806d07a 	srli	r3,r3,1
 1442310:	280ad07a 	srli	r5,r5,1
 1442314:	183ffa1e 	bne	r3,zero,1442300 <__alt_data_end+0xfffdcb00>
 1442318:	3000011e 	bne	r6,zero,1442320 <udivmodsi4+0x54>
 144231c:	f800283a 	ret
 1442320:	2005883a 	mov	r2,r4
 1442324:	f800283a 	ret
 1442328:	0005883a 	mov	r2,zero
 144232c:	003ffa06 	br	1442318 <__alt_data_end+0xfffdcb18>
 1442330:	00c00044 	movi	r3,1
 1442334:	003ff106 	br	14422fc <__alt_data_end+0xfffdcafc>

01442338 <__divsi3>:
 1442338:	defffe04 	addi	sp,sp,-8
 144233c:	dfc00115 	stw	ra,4(sp)
 1442340:	dc000015 	stw	r16,0(sp)
 1442344:	20000b16 	blt	r4,zero,1442374 <__divsi3+0x3c>
 1442348:	0021883a 	mov	r16,zero
 144234c:	28000c16 	blt	r5,zero,1442380 <__divsi3+0x48>
 1442350:	000d883a 	mov	r6,zero
 1442354:	14422cc0 	call	14422cc <udivmodsi4>
 1442358:	0407c83a 	sub	r3,zero,r16
 144235c:	1884f03a 	xor	r2,r3,r2
 1442360:	1405883a 	add	r2,r2,r16
 1442364:	dfc00117 	ldw	ra,4(sp)
 1442368:	dc000017 	ldw	r16,0(sp)
 144236c:	dec00204 	addi	sp,sp,8
 1442370:	f800283a 	ret
 1442374:	0109c83a 	sub	r4,zero,r4
 1442378:	04000044 	movi	r16,1
 144237c:	283ff40e 	bge	r5,zero,1442350 <__alt_data_end+0xfffdcb50>
 1442380:	014bc83a 	sub	r5,zero,r5
 1442384:	8400005c 	xori	r16,r16,1
 1442388:	003ff106 	br	1442350 <__alt_data_end+0xfffdcb50>

0144238c <__modsi3>:
 144238c:	defffd04 	addi	sp,sp,-12
 1442390:	dfc00215 	stw	ra,8(sp)
 1442394:	dc400115 	stw	r17,4(sp)
 1442398:	dc000015 	stw	r16,0(sp)
 144239c:	20000c16 	blt	r4,zero,14423d0 <__modsi3+0x44>
 14423a0:	0023883a 	mov	r17,zero
 14423a4:	0021883a 	mov	r16,zero
 14423a8:	28000d16 	blt	r5,zero,14423e0 <__modsi3+0x54>
 14423ac:	01800044 	movi	r6,1
 14423b0:	14422cc0 	call	14422cc <udivmodsi4>
 14423b4:	1404f03a 	xor	r2,r2,r16
 14423b8:	8885883a 	add	r2,r17,r2
 14423bc:	dfc00217 	ldw	ra,8(sp)
 14423c0:	dc400117 	ldw	r17,4(sp)
 14423c4:	dc000017 	ldw	r16,0(sp)
 14423c8:	dec00304 	addi	sp,sp,12
 14423cc:	f800283a 	ret
 14423d0:	0109c83a 	sub	r4,zero,r4
 14423d4:	04400044 	movi	r17,1
 14423d8:	043fffc4 	movi	r16,-1
 14423dc:	283ff30e 	bge	r5,zero,14423ac <__alt_data_end+0xfffdcbac>
 14423e0:	014bc83a 	sub	r5,zero,r5
 14423e4:	003ff106 	br	14423ac <__alt_data_end+0xfffdcbac>

014423e8 <__udivsi3>:
 14423e8:	000d883a 	mov	r6,zero
 14423ec:	14422cc1 	jmpi	14422cc <udivmodsi4>

014423f0 <__umodsi3>:
 14423f0:	01800044 	movi	r6,1
 14423f4:	14422cc1 	jmpi	14422cc <udivmodsi4>

014423f8 <__mulsi3>:
 14423f8:	0005883a 	mov	r2,zero
 14423fc:	20000726 	beq	r4,zero,144241c <__mulsi3+0x24>
 1442400:	20c0004c 	andi	r3,r4,1
 1442404:	2008d07a 	srli	r4,r4,1
 1442408:	18000126 	beq	r3,zero,1442410 <__mulsi3+0x18>
 144240c:	1145883a 	add	r2,r2,r5
 1442410:	294b883a 	add	r5,r5,r5
 1442414:	203ffa1e 	bne	r4,zero,1442400 <__alt_data_end+0xfffdcc00>
 1442418:	f800283a 	ret
 144241c:	f800283a 	ret

01442420 <_printf_r>:
 1442420:	defffd04 	addi	sp,sp,-12
 1442424:	dfc00015 	stw	ra,0(sp)
 1442428:	d9800115 	stw	r6,4(sp)
 144242c:	d9c00215 	stw	r7,8(sp)
 1442430:	280d883a 	mov	r6,r5
 1442434:	21400217 	ldw	r5,8(r4)
 1442438:	d9c00104 	addi	r7,sp,4
 144243c:	14425ec0 	call	14425ec <___vfprintf_internal_r>
 1442440:	dfc00017 	ldw	ra,0(sp)
 1442444:	dec00304 	addi	sp,sp,12
 1442448:	f800283a 	ret

0144244c <printf>:
 144244c:	defffc04 	addi	sp,sp,-16
 1442450:	dfc00015 	stw	ra,0(sp)
 1442454:	d9400115 	stw	r5,4(sp)
 1442458:	d9800215 	stw	r6,8(sp)
 144245c:	d9c00315 	stw	r7,12(sp)
 1442460:	00805174 	movhi	r2,325
 1442464:	10855204 	addi	r2,r2,5448
 1442468:	10800017 	ldw	r2,0(r2)
 144246c:	200b883a 	mov	r5,r4
 1442470:	d9800104 	addi	r6,sp,4
 1442474:	11000217 	ldw	r4,8(r2)
 1442478:	14446e80 	call	14446e8 <__vfprintf_internal>
 144247c:	dfc00017 	ldw	ra,0(sp)
 1442480:	dec00404 	addi	sp,sp,16
 1442484:	f800283a 	ret

01442488 <_puts_r>:
 1442488:	defff604 	addi	sp,sp,-40
 144248c:	dc000715 	stw	r16,28(sp)
 1442490:	2021883a 	mov	r16,r4
 1442494:	2809883a 	mov	r4,r5
 1442498:	dc400815 	stw	r17,32(sp)
 144249c:	dfc00915 	stw	ra,36(sp)
 14424a0:	2823883a 	mov	r17,r5
 14424a4:	14425540 	call	1442554 <strlen>
 14424a8:	00c05174 	movhi	r3,325
 14424ac:	18c55204 	addi	r3,r3,5448
 14424b0:	18c00017 	ldw	r3,0(r3)
 14424b4:	11000044 	addi	r4,r2,1
 14424b8:	d8800115 	stw	r2,4(sp)
 14424bc:	18c00217 	ldw	r3,8(r3)
 14424c0:	01405174 	movhi	r5,325
 14424c4:	2941d904 	addi	r5,r5,1892
 14424c8:	1880030b 	ldhu	r2,12(r3)
 14424cc:	d9400215 	stw	r5,8(sp)
 14424d0:	d9000615 	stw	r4,24(sp)
 14424d4:	01400044 	movi	r5,1
 14424d8:	01000084 	movi	r4,2
 14424dc:	d9000515 	stw	r4,20(sp)
 14424e0:	dc400015 	stw	r17,0(sp)
 14424e4:	d9400315 	stw	r5,12(sp)
 14424e8:	dec00415 	stw	sp,16(sp)
 14424ec:	1108000c 	andi	r4,r2,8192
 14424f0:	2000061e 	bne	r4,zero,144250c <_puts_r+0x84>
 14424f4:	19401917 	ldw	r5,100(r3)
 14424f8:	0137ffc4 	movi	r4,-8193
 14424fc:	10880014 	ori	r2,r2,8192
 1442500:	2908703a 	and	r4,r5,r4
 1442504:	1880030d 	sth	r2,12(r3)
 1442508:	19001915 	stw	r4,100(r3)
 144250c:	81400217 	ldw	r5,8(r16)
 1442510:	8009883a 	mov	r4,r16
 1442514:	d9800404 	addi	r6,sp,16
 1442518:	1446bac0 	call	1446bac <__sfvwrite_r>
 144251c:	1000061e 	bne	r2,zero,1442538 <_puts_r+0xb0>
 1442520:	00800284 	movi	r2,10
 1442524:	dfc00917 	ldw	ra,36(sp)
 1442528:	dc400817 	ldw	r17,32(sp)
 144252c:	dc000717 	ldw	r16,28(sp)
 1442530:	dec00a04 	addi	sp,sp,40
 1442534:	f800283a 	ret
 1442538:	00bfffc4 	movi	r2,-1
 144253c:	003ff906 	br	1442524 <__alt_data_end+0xfffdcd24>

01442540 <puts>:
 1442540:	00805174 	movhi	r2,325
 1442544:	10855204 	addi	r2,r2,5448
 1442548:	200b883a 	mov	r5,r4
 144254c:	11000017 	ldw	r4,0(r2)
 1442550:	14424881 	jmpi	1442488 <_puts_r>

01442554 <strlen>:
 1442554:	208000cc 	andi	r2,r4,3
 1442558:	10002026 	beq	r2,zero,14425dc <strlen+0x88>
 144255c:	20800007 	ldb	r2,0(r4)
 1442560:	10002026 	beq	r2,zero,14425e4 <strlen+0x90>
 1442564:	2005883a 	mov	r2,r4
 1442568:	00000206 	br	1442574 <strlen+0x20>
 144256c:	10c00007 	ldb	r3,0(r2)
 1442570:	18001826 	beq	r3,zero,14425d4 <strlen+0x80>
 1442574:	10800044 	addi	r2,r2,1
 1442578:	10c000cc 	andi	r3,r2,3
 144257c:	183ffb1e 	bne	r3,zero,144256c <__alt_data_end+0xfffdcd6c>
 1442580:	10c00017 	ldw	r3,0(r2)
 1442584:	01ffbff4 	movhi	r7,65279
 1442588:	39ffbfc4 	addi	r7,r7,-257
 144258c:	00ca303a 	nor	r5,zero,r3
 1442590:	01a02074 	movhi	r6,32897
 1442594:	19c7883a 	add	r3,r3,r7
 1442598:	31a02004 	addi	r6,r6,-32640
 144259c:	1946703a 	and	r3,r3,r5
 14425a0:	1986703a 	and	r3,r3,r6
 14425a4:	1800091e 	bne	r3,zero,14425cc <strlen+0x78>
 14425a8:	10800104 	addi	r2,r2,4
 14425ac:	10c00017 	ldw	r3,0(r2)
 14425b0:	19cb883a 	add	r5,r3,r7
 14425b4:	00c6303a 	nor	r3,zero,r3
 14425b8:	28c6703a 	and	r3,r5,r3
 14425bc:	1986703a 	and	r3,r3,r6
 14425c0:	183ff926 	beq	r3,zero,14425a8 <__alt_data_end+0xfffdcda8>
 14425c4:	00000106 	br	14425cc <strlen+0x78>
 14425c8:	10800044 	addi	r2,r2,1
 14425cc:	10c00007 	ldb	r3,0(r2)
 14425d0:	183ffd1e 	bne	r3,zero,14425c8 <__alt_data_end+0xfffdcdc8>
 14425d4:	1105c83a 	sub	r2,r2,r4
 14425d8:	f800283a 	ret
 14425dc:	2005883a 	mov	r2,r4
 14425e0:	003fe706 	br	1442580 <__alt_data_end+0xfffdcd80>
 14425e4:	0005883a 	mov	r2,zero
 14425e8:	f800283a 	ret

014425ec <___vfprintf_internal_r>:
 14425ec:	defeb604 	addi	sp,sp,-1320
 14425f0:	dfc14915 	stw	ra,1316(sp)
 14425f4:	ddc14715 	stw	r23,1308(sp)
 14425f8:	dd814615 	stw	r22,1304(sp)
 14425fc:	202f883a 	mov	r23,r4
 1442600:	282d883a 	mov	r22,r5
 1442604:	d9812a15 	stw	r6,1192(sp)
 1442608:	d9c12d15 	stw	r7,1204(sp)
 144260c:	df014815 	stw	fp,1312(sp)
 1442610:	dd414515 	stw	r21,1300(sp)
 1442614:	dd014415 	stw	r20,1296(sp)
 1442618:	dcc14315 	stw	r19,1292(sp)
 144261c:	dc814215 	stw	r18,1288(sp)
 1442620:	dc414115 	stw	r17,1284(sp)
 1442624:	dc014015 	stw	r16,1280(sp)
 1442628:	144726c0 	call	144726c <_localeconv_r>
 144262c:	10800017 	ldw	r2,0(r2)
 1442630:	1009883a 	mov	r4,r2
 1442634:	d8813515 	stw	r2,1236(sp)
 1442638:	14425540 	call	1442554 <strlen>
 144263c:	d8813815 	stw	r2,1248(sp)
 1442640:	b8000226 	beq	r23,zero,144264c <___vfprintf_internal_r+0x60>
 1442644:	b8800e17 	ldw	r2,56(r23)
 1442648:	10010526 	beq	r2,zero,1442a60 <___vfprintf_internal_r+0x474>
 144264c:	b0c0030b 	ldhu	r3,12(r22)
 1442650:	1908000c 	andi	r4,r3,8192
 1442654:	1805883a 	mov	r2,r3
 1442658:	2000071e 	bne	r4,zero,1442678 <___vfprintf_internal_r+0x8c>
 144265c:	b1001917 	ldw	r4,100(r22)
 1442660:	18880014 	ori	r2,r3,8192
 1442664:	00f7ffc4 	movi	r3,-8193
 1442668:	20c8703a 	and	r4,r4,r3
 144266c:	b080030d 	sth	r2,12(r22)
 1442670:	1007883a 	mov	r3,r2
 1442674:	b1001915 	stw	r4,100(r22)
 1442678:	1100020c 	andi	r4,r2,8
 144267c:	2000a826 	beq	r4,zero,1442920 <___vfprintf_internal_r+0x334>
 1442680:	b1000417 	ldw	r4,16(r22)
 1442684:	2000a626 	beq	r4,zero,1442920 <___vfprintf_internal_r+0x334>
 1442688:	1080068c 	andi	r2,r2,26
 144268c:	01000284 	movi	r4,10
 1442690:	1100ac26 	beq	r2,r4,1442944 <___vfprintf_internal_r+0x358>
 1442694:	d8c10e04 	addi	r3,sp,1080
 1442698:	d9010dc4 	addi	r4,sp,1079
 144269c:	d9400404 	addi	r5,sp,16
 14426a0:	05005174 	movhi	r20,325
 14426a4:	1905c83a 	sub	r2,r3,r4
 14426a8:	a501ea84 	addi	r20,r20,1962
 14426ac:	d8c12815 	stw	r3,1184(sp)
 14426b0:	d9012915 	stw	r4,1188(sp)
 14426b4:	d9411e15 	stw	r5,1144(sp)
 14426b8:	d8012015 	stw	zero,1152(sp)
 14426bc:	d8011f15 	stw	zero,1148(sp)
 14426c0:	d8013315 	stw	zero,1228(sp)
 14426c4:	d8013715 	stw	zero,1244(sp)
 14426c8:	d8013915 	stw	zero,1252(sp)
 14426cc:	d8013b15 	stw	zero,1260(sp)
 14426d0:	d8013a15 	stw	zero,1256(sp)
 14426d4:	d8012f15 	stw	zero,1212(sp)
 14426d8:	2811883a 	mov	r8,r5
 14426dc:	d8813c15 	stw	r2,1264(sp)
 14426e0:	d8c12a17 	ldw	r3,1192(sp)
 14426e4:	18800007 	ldb	r2,0(r3)
 14426e8:	10021326 	beq	r2,zero,1442f38 <___vfprintf_internal_r+0x94c>
 14426ec:	00c00944 	movi	r3,37
 14426f0:	dc012a17 	ldw	r16,1192(sp)
 14426f4:	10c0021e 	bne	r2,r3,1442700 <___vfprintf_internal_r+0x114>
 14426f8:	00001606 	br	1442754 <___vfprintf_internal_r+0x168>
 14426fc:	10c08526 	beq	r2,r3,1442914 <___vfprintf_internal_r+0x328>
 1442700:	84000044 	addi	r16,r16,1
 1442704:	80800007 	ldb	r2,0(r16)
 1442708:	103ffc1e 	bne	r2,zero,14426fc <__alt_data_end+0xfffdcefc>
 144270c:	d9012a17 	ldw	r4,1192(sp)
 1442710:	8123c83a 	sub	r17,r16,r4
 1442714:	88000f26 	beq	r17,zero,1442754 <___vfprintf_internal_r+0x168>
 1442718:	d8812a17 	ldw	r2,1192(sp)
 144271c:	d8c12017 	ldw	r3,1152(sp)
 1442720:	44400115 	stw	r17,4(r8)
 1442724:	40800015 	stw	r2,0(r8)
 1442728:	d8811f17 	ldw	r2,1148(sp)
 144272c:	1c47883a 	add	r3,r3,r17
 1442730:	d8c12015 	stw	r3,1152(sp)
 1442734:	10800044 	addi	r2,r2,1
 1442738:	d8811f15 	stw	r2,1148(sp)
 144273c:	00c001c4 	movi	r3,7
 1442740:	1880b516 	blt	r3,r2,1442a18 <___vfprintf_internal_r+0x42c>
 1442744:	42000204 	addi	r8,r8,8
 1442748:	d8c12f17 	ldw	r3,1212(sp)
 144274c:	1c47883a 	add	r3,r3,r17
 1442750:	d8c12f15 	stw	r3,1212(sp)
 1442754:	80800007 	ldb	r2,0(r16)
 1442758:	1000b626 	beq	r2,zero,1442a34 <___vfprintf_internal_r+0x448>
 144275c:	80800044 	addi	r2,r16,1
 1442760:	84000047 	ldb	r16,1(r16)
 1442764:	0027883a 	mov	r19,zero
 1442768:	0039883a 	mov	fp,zero
 144276c:	dcc12b05 	stb	r19,1196(sp)
 1442770:	d8012785 	stb	zero,1182(sp)
 1442774:	027fffc4 	movi	r9,-1
 1442778:	d8012e15 	stw	zero,1208(sp)
 144277c:	04401604 	movi	r17,88
 1442780:	04800244 	movi	r18,9
 1442784:	da012a15 	stw	r8,1192(sp)
 1442788:	e027883a 	mov	r19,fp
 144278c:	17000044 	addi	fp,r2,1
 1442790:	80bff804 	addi	r2,r16,-32
 1442794:	88831236 	bltu	r17,r2,14433e0 <___vfprintf_internal_r+0xdf4>
 1442798:	100490ba 	slli	r2,r2,2
 144279c:	01005134 	movhi	r4,324
 14427a0:	2109ec04 	addi	r4,r4,10160
 14427a4:	1105883a 	add	r2,r2,r4
 14427a8:	10800017 	ldw	r2,0(r2)
 14427ac:	1000683a 	jmp	r2
 14427b0:	014432fc 	xorhi	r5,zero,4299
 14427b4:	014433e0 	cmpeqi	r5,zero,4303
 14427b8:	014433e0 	cmpeqi	r5,zero,4303
 14427bc:	01443318 	cmpnei	r5,zero,4300
 14427c0:	014433e0 	cmpeqi	r5,zero,4303
 14427c4:	014433e0 	cmpeqi	r5,zero,4303
 14427c8:	014433e0 	cmpeqi	r5,zero,4303
 14427cc:	014433e0 	cmpeqi	r5,zero,4303
 14427d0:	014433e0 	cmpeqi	r5,zero,4303
 14427d4:	014433e0 	cmpeqi	r5,zero,4303
 14427d8:	01443328 	cmpgeui	r5,zero,4300
 14427dc:	01443350 	cmplti	r5,zero,4301
 14427e0:	014433e0 	cmpeqi	r5,zero,4303
 14427e4:	01442a6c 	andhi	r5,zero,4265
 14427e8:	01442a7c 	xorhi	r5,zero,4265
 14427ec:	014433e0 	cmpeqi	r5,zero,4303
 14427f0:	01442acc 	andi	r5,zero,4267
 14427f4:	01442adc 	xori	r5,zero,4267
 14427f8:	01442adc 	xori	r5,zero,4267
 14427fc:	01442adc 	xori	r5,zero,4267
 1442800:	01442adc 	xori	r5,zero,4267
 1442804:	01442adc 	xori	r5,zero,4267
 1442808:	01442adc 	xori	r5,zero,4267
 144280c:	01442adc 	xori	r5,zero,4267
 1442810:	01442adc 	xori	r5,zero,4267
 1442814:	01442adc 	xori	r5,zero,4267
 1442818:	014433e0 	cmpeqi	r5,zero,4303
 144281c:	014433e0 	cmpeqi	r5,zero,4303
 1442820:	014433e0 	cmpeqi	r5,zero,4303
 1442824:	014433e0 	cmpeqi	r5,zero,4303
 1442828:	014433e0 	cmpeqi	r5,zero,4303
 144282c:	014433e0 	cmpeqi	r5,zero,4303
 1442830:	014433e0 	cmpeqi	r5,zero,4303
 1442834:	014433e0 	cmpeqi	r5,zero,4303
 1442838:	014433e0 	cmpeqi	r5,zero,4303
 144283c:	014433e0 	cmpeqi	r5,zero,4303
 1442840:	01442b20 	cmpeqi	r5,zero,4268
 1442844:	01442f40 	call	1442f4 <__alt_mem_ufm_flash_data-0x10bbd0c>
 1442848:	014433e0 	cmpeqi	r5,zero,4303
 144284c:	01442f40 	call	1442f4 <__alt_mem_ufm_flash_data-0x10bbd0c>
 1442850:	014433e0 	cmpeqi	r5,zero,4303
 1442854:	014433e0 	cmpeqi	r5,zero,4303
 1442858:	014433e0 	cmpeqi	r5,zero,4303
 144285c:	014433e0 	cmpeqi	r5,zero,4303
 1442860:	01442fe8 	cmpgeui	r5,zero,4287
 1442864:	014433e0 	cmpeqi	r5,zero,4303
 1442868:	014433e0 	cmpeqi	r5,zero,4303
 144286c:	01442ff8 	rdprs	r5,zero,4287
 1442870:	014433e0 	cmpeqi	r5,zero,4303
 1442874:	014433e0 	cmpeqi	r5,zero,4303
 1442878:	014433e0 	cmpeqi	r5,zero,4303
 144287c:	014433e0 	cmpeqi	r5,zero,4303
 1442880:	014433e0 	cmpeqi	r5,zero,4303
 1442884:	0144303c 	xorhi	r5,zero,4288
 1442888:	014433e0 	cmpeqi	r5,zero,4303
 144288c:	014433e0 	cmpeqi	r5,zero,4303
 1442890:	01443074 	movhi	r5,4289
 1442894:	014433e0 	cmpeqi	r5,zero,4303
 1442898:	014433e0 	cmpeqi	r5,zero,4303
 144289c:	014433e0 	cmpeqi	r5,zero,4303
 14428a0:	014433e0 	cmpeqi	r5,zero,4303
 14428a4:	014433e0 	cmpeqi	r5,zero,4303
 14428a8:	014433e0 	cmpeqi	r5,zero,4303
 14428ac:	014433e0 	cmpeqi	r5,zero,4303
 14428b0:	014433e0 	cmpeqi	r5,zero,4303
 14428b4:	014433e0 	cmpeqi	r5,zero,4303
 14428b8:	014433e0 	cmpeqi	r5,zero,4303
 14428bc:	014432b0 	cmpltui	r5,zero,4298
 14428c0:	0144325c 	xori	r5,zero,4297
 14428c4:	01442f40 	call	1442f4 <__alt_mem_ufm_flash_data-0x10bbd0c>
 14428c8:	01442f40 	call	1442f4 <__alt_mem_ufm_flash_data-0x10bbd0c>
 14428cc:	01442f40 	call	1442f4 <__alt_mem_ufm_flash_data-0x10bbd0c>
 14428d0:	014432a0 	cmpeqi	r5,zero,4298
 14428d4:	0144325c 	xori	r5,zero,4297
 14428d8:	014433e0 	cmpeqi	r5,zero,4303
 14428dc:	014433e0 	cmpeqi	r5,zero,4303
 14428e0:	01443178 	rdprs	r5,zero,4293
 14428e4:	014433e0 	cmpeqi	r5,zero,4303
 14428e8:	01443190 	cmplti	r5,zero,4294
 14428ec:	014431d0 	cmplti	r5,zero,4295
 14428f0:	01443210 	cmplti	r5,zero,4296
 14428f4:	014430dc 	xori	r5,zero,4291
 14428f8:	014433e0 	cmpeqi	r5,zero,4303
 14428fc:	01443364 	muli	r5,zero,4301
 1442900:	014433e0 	cmpeqi	r5,zero,4303
 1442904:	014430ec 	andhi	r5,zero,4291
 1442908:	014433e0 	cmpeqi	r5,zero,4303
 144290c:	014433e0 	cmpeqi	r5,zero,4303
 1442910:	0144312c 	andhi	r5,zero,4292
 1442914:	d9412a17 	ldw	r5,1192(sp)
 1442918:	8163c83a 	sub	r17,r16,r5
 144291c:	003f7d06 	br	1442714 <__alt_data_end+0xfffdcf14>
 1442920:	b809883a 	mov	r4,r23
 1442924:	b00b883a 	mov	r5,r22
 1442928:	144470c0 	call	144470c <__swsetup_r>
 144292c:	10002d1e 	bne	r2,zero,14429e4 <___vfprintf_internal_r+0x3f8>
 1442930:	b0c0030b 	ldhu	r3,12(r22)
 1442934:	01000284 	movi	r4,10
 1442938:	1805883a 	mov	r2,r3
 144293c:	1080068c 	andi	r2,r2,26
 1442940:	113f541e 	bne	r2,r4,1442694 <__alt_data_end+0xfffdce94>
 1442944:	b080038b 	ldhu	r2,14(r22)
 1442948:	113fffcc 	andi	r4,r2,65535
 144294c:	2120001c 	xori	r4,r4,32768
 1442950:	21200004 	addi	r4,r4,-32768
 1442954:	203f4f16 	blt	r4,zero,1442694 <__alt_data_end+0xfffdce94>
 1442958:	b2c01917 	ldw	r11,100(r22)
 144295c:	b2800717 	ldw	r10,28(r22)
 1442960:	b2400917 	ldw	r9,36(r22)
 1442964:	d9812a17 	ldw	r6,1192(sp)
 1442968:	d9c12d17 	ldw	r7,1204(sp)
 144296c:	02010004 	movi	r8,1024
 1442970:	18ffff4c 	andi	r3,r3,65533
 1442974:	d881078d 	sth	r2,1054(sp)
 1442978:	b809883a 	mov	r4,r23
 144297c:	d8800404 	addi	r2,sp,16
 1442980:	d9410404 	addi	r5,sp,1040
 1442984:	d8c1070d 	sth	r3,1052(sp)
 1442988:	dac11d15 	stw	r11,1140(sp)
 144298c:	da810b15 	stw	r10,1068(sp)
 1442990:	da410d15 	stw	r9,1076(sp)
 1442994:	d8810415 	stw	r2,1040(sp)
 1442998:	d8810815 	stw	r2,1056(sp)
 144299c:	da010615 	stw	r8,1048(sp)
 14429a0:	da010915 	stw	r8,1060(sp)
 14429a4:	d8010a15 	stw	zero,1064(sp)
 14429a8:	14425ec0 	call	14425ec <___vfprintf_internal_r>
 14429ac:	1021883a 	mov	r16,r2
 14429b0:	10000416 	blt	r2,zero,14429c4 <___vfprintf_internal_r+0x3d8>
 14429b4:	b809883a 	mov	r4,r23
 14429b8:	d9410404 	addi	r5,sp,1040
 14429bc:	144618c0 	call	144618c <_fflush_r>
 14429c0:	1007301e 	bne	r2,zero,1444684 <___vfprintf_internal_r+0x2098>
 14429c4:	d881070b 	ldhu	r2,1052(sp)
 14429c8:	1080100c 	andi	r2,r2,64
 14429cc:	10000326 	beq	r2,zero,14429dc <___vfprintf_internal_r+0x3f0>
 14429d0:	b080030b 	ldhu	r2,12(r22)
 14429d4:	10801014 	ori	r2,r2,64
 14429d8:	b080030d 	sth	r2,12(r22)
 14429dc:	8005883a 	mov	r2,r16
 14429e0:	00000106 	br	14429e8 <___vfprintf_internal_r+0x3fc>
 14429e4:	00bfffc4 	movi	r2,-1
 14429e8:	dfc14917 	ldw	ra,1316(sp)
 14429ec:	df014817 	ldw	fp,1312(sp)
 14429f0:	ddc14717 	ldw	r23,1308(sp)
 14429f4:	dd814617 	ldw	r22,1304(sp)
 14429f8:	dd414517 	ldw	r21,1300(sp)
 14429fc:	dd014417 	ldw	r20,1296(sp)
 1442a00:	dcc14317 	ldw	r19,1292(sp)
 1442a04:	dc814217 	ldw	r18,1288(sp)
 1442a08:	dc414117 	ldw	r17,1284(sp)
 1442a0c:	dc014017 	ldw	r16,1280(sp)
 1442a10:	dec14a04 	addi	sp,sp,1320
 1442a14:	f800283a 	ret
 1442a18:	b809883a 	mov	r4,r23
 1442a1c:	b00b883a 	mov	r5,r22
 1442a20:	d9811e04 	addi	r6,sp,1144
 1442a24:	1449a2c0 	call	1449a2c <__sprint_r>
 1442a28:	1000081e 	bne	r2,zero,1442a4c <___vfprintf_internal_r+0x460>
 1442a2c:	da000404 	addi	r8,sp,16
 1442a30:	003f4506 	br	1442748 <__alt_data_end+0xfffdcf48>
 1442a34:	d8812017 	ldw	r2,1152(sp)
 1442a38:	10000426 	beq	r2,zero,1442a4c <___vfprintf_internal_r+0x460>
 1442a3c:	b809883a 	mov	r4,r23
 1442a40:	b00b883a 	mov	r5,r22
 1442a44:	d9811e04 	addi	r6,sp,1144
 1442a48:	1449a2c0 	call	1449a2c <__sprint_r>
 1442a4c:	b080030b 	ldhu	r2,12(r22)
 1442a50:	1080100c 	andi	r2,r2,64
 1442a54:	103fe31e 	bne	r2,zero,14429e4 <__alt_data_end+0xfffdd1e4>
 1442a58:	d8812f17 	ldw	r2,1212(sp)
 1442a5c:	003fe206 	br	14429e8 <__alt_data_end+0xfffdd1e8>
 1442a60:	b809883a 	mov	r4,r23
 1442a64:	14467480 	call	1446748 <__sinit>
 1442a68:	003ef806 	br	144264c <__alt_data_end+0xfffdce4c>
 1442a6c:	e005883a 	mov	r2,fp
 1442a70:	9cc00114 	ori	r19,r19,4
 1442a74:	e4000007 	ldb	r16,0(fp)
 1442a78:	003f4406 	br	144278c <__alt_data_end+0xfffdcf8c>
 1442a7c:	e4000007 	ldb	r16,0(fp)
 1442a80:	01000a84 	movi	r4,42
 1442a84:	e0800044 	addi	r2,fp,1
 1442a88:	8106f626 	beq	r16,r4,1444664 <___vfprintf_internal_r+0x2078>
 1442a8c:	857ff404 	addi	r21,r16,-48
 1442a90:	1039883a 	mov	fp,r2
 1442a94:	0013883a 	mov	r9,zero
 1442a98:	957f3d36 	bltu	r18,r21,1442790 <__alt_data_end+0xfffdcf90>
 1442a9c:	0009883a 	mov	r4,zero
 1442aa0:	01400284 	movi	r5,10
 1442aa4:	14423f80 	call	14423f8 <__mulsi3>
 1442aa8:	e4000007 	ldb	r16,0(fp)
 1442aac:	a889883a 	add	r4,r21,r2
 1442ab0:	e7000044 	addi	fp,fp,1
 1442ab4:	857ff404 	addi	r21,r16,-48
 1442ab8:	957ff92e 	bgeu	r18,r21,1442aa0 <__alt_data_end+0xfffdd2a0>
 1442abc:	2013883a 	mov	r9,r4
 1442ac0:	203f330e 	bge	r4,zero,1442790 <__alt_data_end+0xfffdcf90>
 1442ac4:	027fffc4 	movi	r9,-1
 1442ac8:	003f3106 	br	1442790 <__alt_data_end+0xfffdcf90>
 1442acc:	9cc02014 	ori	r19,r19,128
 1442ad0:	e005883a 	mov	r2,fp
 1442ad4:	e4000007 	ldb	r16,0(fp)
 1442ad8:	003f2c06 	br	144278c <__alt_data_end+0xfffdcf8c>
 1442adc:	857ff404 	addi	r21,r16,-48
 1442ae0:	d8012e15 	stw	zero,1208(sp)
 1442ae4:	e021883a 	mov	r16,fp
 1442ae8:	0009883a 	mov	r4,zero
 1442aec:	da412c15 	stw	r9,1200(sp)
 1442af0:	01400284 	movi	r5,10
 1442af4:	14423f80 	call	14423f8 <__mulsi3>
 1442af8:	81400007 	ldb	r5,0(r16)
 1442afc:	1549883a 	add	r4,r2,r21
 1442b00:	e7000044 	addi	fp,fp,1
 1442b04:	2d7ff404 	addi	r21,r5,-48
 1442b08:	e021883a 	mov	r16,fp
 1442b0c:	957ff82e 	bgeu	r18,r21,1442af0 <__alt_data_end+0xfffdd2f0>
 1442b10:	2821883a 	mov	r16,r5
 1442b14:	d9012e15 	stw	r4,1208(sp)
 1442b18:	da412c17 	ldw	r9,1200(sp)
 1442b1c:	003f1c06 	br	1442790 <__alt_data_end+0xfffdcf90>
 1442b20:	da012a17 	ldw	r8,1192(sp)
 1442b24:	df012a15 	stw	fp,1192(sp)
 1442b28:	9839883a 	mov	fp,r19
 1442b2c:	dcc12b03 	ldbu	r19,1196(sp)
 1442b30:	e7000414 	ori	fp,fp,16
 1442b34:	e080080c 	andi	r2,fp,32
 1442b38:	dcc12785 	stb	r19,1182(sp)
 1442b3c:	d8c12d17 	ldw	r3,1204(sp)
 1442b40:	1001ce26 	beq	r2,zero,144327c <___vfprintf_internal_r+0xc90>
 1442b44:	d9012d17 	ldw	r4,1204(sp)
 1442b48:	18800117 	ldw	r2,4(r3)
 1442b4c:	1c800017 	ldw	r18,0(r3)
 1442b50:	21000204 	addi	r4,r4,8
 1442b54:	d9012d15 	stw	r4,1204(sp)
 1442b58:	102b883a 	mov	r21,r2
 1442b5c:	10044916 	blt	r2,zero,1443c84 <___vfprintf_internal_r+0x1698>
 1442b60:	dcc12783 	ldbu	r19,1182(sp)
 1442b64:	da413215 	stw	r9,1224(sp)
 1442b68:	00800044 	movi	r2,1
 1442b6c:	9546b03a 	or	r3,r18,r21
 1442b70:	48000216 	blt	r9,zero,1442b7c <___vfprintf_internal_r+0x590>
 1442b74:	013fdfc4 	movi	r4,-129
 1442b78:	e138703a 	and	fp,fp,r4
 1442b7c:	1802251e 	bne	r3,zero,1443414 <___vfprintf_internal_r+0xe28>
 1442b80:	48031726 	beq	r9,zero,14437e0 <___vfprintf_internal_r+0x11f4>
 1442b84:	10803fcc 	andi	r2,r2,255
 1442b88:	00c00044 	movi	r3,1
 1442b8c:	10c24526 	beq	r2,r3,14434a4 <___vfprintf_internal_r+0xeb8>
 1442b90:	00c00084 	movi	r3,2
 1442b94:	10c33426 	beq	r2,r3,1443868 <___vfprintf_internal_r+0x127c>
 1442b98:	d8c10e04 	addi	r3,sp,1080
 1442b9c:	9008d0fa 	srli	r4,r18,3
 1442ba0:	a80a977a 	slli	r5,r21,29
 1442ba4:	a82ad0fa 	srli	r21,r21,3
 1442ba8:	948001cc 	andi	r18,r18,7
 1442bac:	90800c04 	addi	r2,r18,48
 1442bb0:	18ffffc4 	addi	r3,r3,-1
 1442bb4:	2924b03a 	or	r18,r5,r4
 1442bb8:	18800005 	stb	r2,0(r3)
 1442bbc:	9548b03a 	or	r4,r18,r21
 1442bc0:	203ff61e 	bne	r4,zero,1442b9c <__alt_data_end+0xfffdd39c>
 1442bc4:	e100004c 	andi	r4,fp,1
 1442bc8:	d8c13115 	stw	r3,1220(sp)
 1442bcc:	20039a1e 	bne	r4,zero,1443a38 <___vfprintf_internal_r+0x144c>
 1442bd0:	d8812817 	ldw	r2,1184(sp)
 1442bd4:	10e3c83a 	sub	r17,r2,r3
 1442bd8:	8805883a 	mov	r2,r17
 1442bdc:	8a40010e 	bge	r17,r9,1442be4 <___vfprintf_internal_r+0x5f8>
 1442be0:	4805883a 	mov	r2,r9
 1442be4:	d8812b15 	stw	r2,1196(sp)
 1442be8:	d8013415 	stw	zero,1232(sp)
 1442bec:	98803fcc 	andi	r2,r19,255
 1442bf0:	1080201c 	xori	r2,r2,128
 1442bf4:	10bfe004 	addi	r2,r2,-128
 1442bf8:	10000326 	beq	r2,zero,1442c08 <___vfprintf_internal_r+0x61c>
 1442bfc:	d8c12b17 	ldw	r3,1196(sp)
 1442c00:	18c00044 	addi	r3,r3,1
 1442c04:	d8c12b15 	stw	r3,1196(sp)
 1442c08:	e0c0008c 	andi	r3,fp,2
 1442c0c:	d8c12c15 	stw	r3,1200(sp)
 1442c10:	18000326 	beq	r3,zero,1442c20 <___vfprintf_internal_r+0x634>
 1442c14:	d8c12b17 	ldw	r3,1196(sp)
 1442c18:	18c00084 	addi	r3,r3,2
 1442c1c:	d8c12b15 	stw	r3,1196(sp)
 1442c20:	e0c0210c 	andi	r3,fp,132
 1442c24:	d8c13015 	stw	r3,1216(sp)
 1442c28:	1801f81e 	bne	r3,zero,144340c <___vfprintf_internal_r+0xe20>
 1442c2c:	d9012e17 	ldw	r4,1208(sp)
 1442c30:	d8c12b17 	ldw	r3,1196(sp)
 1442c34:	20ebc83a 	sub	r21,r4,r3
 1442c38:	0541f40e 	bge	zero,r21,144340c <___vfprintf_internal_r+0xe20>
 1442c3c:	02400404 	movi	r9,16
 1442c40:	d8c12017 	ldw	r3,1152(sp)
 1442c44:	d8811f17 	ldw	r2,1148(sp)
 1442c48:	4d45750e 	bge	r9,r21,1444220 <___vfprintf_internal_r+0x1c34>
 1442c4c:	01405174 	movhi	r5,325
 1442c50:	2941ee84 	addi	r5,r5,1978
 1442c54:	d9413615 	stw	r5,1240(sp)
 1442c58:	4827883a 	mov	r19,r9
 1442c5c:	048001c4 	movi	r18,7
 1442c60:	00000306 	br	1442c70 <___vfprintf_internal_r+0x684>
 1442c64:	ad7ffc04 	addi	r21,r21,-16
 1442c68:	42000204 	addi	r8,r8,8
 1442c6c:	9d40130e 	bge	r19,r21,1442cbc <___vfprintf_internal_r+0x6d0>
 1442c70:	01005174 	movhi	r4,325
 1442c74:	18c00404 	addi	r3,r3,16
 1442c78:	10800044 	addi	r2,r2,1
 1442c7c:	2101ee84 	addi	r4,r4,1978
 1442c80:	41000015 	stw	r4,0(r8)
 1442c84:	44c00115 	stw	r19,4(r8)
 1442c88:	d8c12015 	stw	r3,1152(sp)
 1442c8c:	d8811f15 	stw	r2,1148(sp)
 1442c90:	90bff40e 	bge	r18,r2,1442c64 <__alt_data_end+0xfffdd464>
 1442c94:	b809883a 	mov	r4,r23
 1442c98:	b00b883a 	mov	r5,r22
 1442c9c:	d9811e04 	addi	r6,sp,1144
 1442ca0:	1449a2c0 	call	1449a2c <__sprint_r>
 1442ca4:	103f691e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1442ca8:	ad7ffc04 	addi	r21,r21,-16
 1442cac:	d8c12017 	ldw	r3,1152(sp)
 1442cb0:	d8811f17 	ldw	r2,1148(sp)
 1442cb4:	da000404 	addi	r8,sp,16
 1442cb8:	9d7fed16 	blt	r19,r21,1442c70 <__alt_data_end+0xfffdd470>
 1442cbc:	d9413617 	ldw	r5,1240(sp)
 1442cc0:	a8c7883a 	add	r3,r21,r3
 1442cc4:	10800044 	addi	r2,r2,1
 1442cc8:	41400015 	stw	r5,0(r8)
 1442ccc:	45400115 	stw	r21,4(r8)
 1442cd0:	d8c12015 	stw	r3,1152(sp)
 1442cd4:	d8811f15 	stw	r2,1148(sp)
 1442cd8:	010001c4 	movi	r4,7
 1442cdc:	20832b16 	blt	r4,r2,144398c <___vfprintf_internal_r+0x13a0>
 1442ce0:	d8812787 	ldb	r2,1182(sp)
 1442ce4:	42000204 	addi	r8,r8,8
 1442ce8:	10000c26 	beq	r2,zero,1442d1c <___vfprintf_internal_r+0x730>
 1442cec:	d8811f17 	ldw	r2,1148(sp)
 1442cf0:	d9012784 	addi	r4,sp,1182
 1442cf4:	18c00044 	addi	r3,r3,1
 1442cf8:	10800044 	addi	r2,r2,1
 1442cfc:	41000015 	stw	r4,0(r8)
 1442d00:	01000044 	movi	r4,1
 1442d04:	41000115 	stw	r4,4(r8)
 1442d08:	d8c12015 	stw	r3,1152(sp)
 1442d0c:	d8811f15 	stw	r2,1148(sp)
 1442d10:	010001c4 	movi	r4,7
 1442d14:	2082c416 	blt	r4,r2,1443828 <___vfprintf_internal_r+0x123c>
 1442d18:	42000204 	addi	r8,r8,8
 1442d1c:	d8812c17 	ldw	r2,1200(sp)
 1442d20:	10000c26 	beq	r2,zero,1442d54 <___vfprintf_internal_r+0x768>
 1442d24:	d8811f17 	ldw	r2,1148(sp)
 1442d28:	d9012704 	addi	r4,sp,1180
 1442d2c:	18c00084 	addi	r3,r3,2
 1442d30:	10800044 	addi	r2,r2,1
 1442d34:	41000015 	stw	r4,0(r8)
 1442d38:	01000084 	movi	r4,2
 1442d3c:	41000115 	stw	r4,4(r8)
 1442d40:	d8c12015 	stw	r3,1152(sp)
 1442d44:	d8811f15 	stw	r2,1148(sp)
 1442d48:	010001c4 	movi	r4,7
 1442d4c:	2082be16 	blt	r4,r2,1443848 <___vfprintf_internal_r+0x125c>
 1442d50:	42000204 	addi	r8,r8,8
 1442d54:	d9013017 	ldw	r4,1216(sp)
 1442d58:	00802004 	movi	r2,128
 1442d5c:	20822026 	beq	r4,r2,14435e0 <___vfprintf_internal_r+0xff4>
 1442d60:	d9413217 	ldw	r5,1224(sp)
 1442d64:	2c67c83a 	sub	r19,r5,r17
 1442d68:	04c0260e 	bge	zero,r19,1442e04 <___vfprintf_internal_r+0x818>
 1442d6c:	05400404 	movi	r21,16
 1442d70:	d8811f17 	ldw	r2,1148(sp)
 1442d74:	acc4720e 	bge	r21,r19,1443f40 <___vfprintf_internal_r+0x1954>
 1442d78:	01405174 	movhi	r5,325
 1442d7c:	2941ea84 	addi	r5,r5,1962
 1442d80:	d9412c15 	stw	r5,1200(sp)
 1442d84:	048001c4 	movi	r18,7
 1442d88:	00000306 	br	1442d98 <___vfprintf_internal_r+0x7ac>
 1442d8c:	9cfffc04 	addi	r19,r19,-16
 1442d90:	42000204 	addi	r8,r8,8
 1442d94:	acc0110e 	bge	r21,r19,1442ddc <___vfprintf_internal_r+0x7f0>
 1442d98:	18c00404 	addi	r3,r3,16
 1442d9c:	10800044 	addi	r2,r2,1
 1442da0:	45000015 	stw	r20,0(r8)
 1442da4:	45400115 	stw	r21,4(r8)
 1442da8:	d8c12015 	stw	r3,1152(sp)
 1442dac:	d8811f15 	stw	r2,1148(sp)
 1442db0:	90bff60e 	bge	r18,r2,1442d8c <__alt_data_end+0xfffdd58c>
 1442db4:	b809883a 	mov	r4,r23
 1442db8:	b00b883a 	mov	r5,r22
 1442dbc:	d9811e04 	addi	r6,sp,1144
 1442dc0:	1449a2c0 	call	1449a2c <__sprint_r>
 1442dc4:	103f211e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1442dc8:	9cfffc04 	addi	r19,r19,-16
 1442dcc:	d8c12017 	ldw	r3,1152(sp)
 1442dd0:	d8811f17 	ldw	r2,1148(sp)
 1442dd4:	da000404 	addi	r8,sp,16
 1442dd8:	acffef16 	blt	r21,r19,1442d98 <__alt_data_end+0xfffdd598>
 1442ddc:	d9012c17 	ldw	r4,1200(sp)
 1442de0:	1cc7883a 	add	r3,r3,r19
 1442de4:	10800044 	addi	r2,r2,1
 1442de8:	41000015 	stw	r4,0(r8)
 1442dec:	44c00115 	stw	r19,4(r8)
 1442df0:	d8c12015 	stw	r3,1152(sp)
 1442df4:	d8811f15 	stw	r2,1148(sp)
 1442df8:	010001c4 	movi	r4,7
 1442dfc:	20828216 	blt	r4,r2,1443808 <___vfprintf_internal_r+0x121c>
 1442e00:	42000204 	addi	r8,r8,8
 1442e04:	e080400c 	andi	r2,fp,256
 1442e08:	1001ac1e 	bne	r2,zero,14434bc <___vfprintf_internal_r+0xed0>
 1442e0c:	d8811f17 	ldw	r2,1148(sp)
 1442e10:	d9413117 	ldw	r5,1220(sp)
 1442e14:	1c47883a 	add	r3,r3,r17
 1442e18:	10800044 	addi	r2,r2,1
 1442e1c:	41400015 	stw	r5,0(r8)
 1442e20:	44400115 	stw	r17,4(r8)
 1442e24:	d8c12015 	stw	r3,1152(sp)
 1442e28:	d8811f15 	stw	r2,1148(sp)
 1442e2c:	010001c4 	movi	r4,7
 1442e30:	20825d16 	blt	r4,r2,14437a8 <___vfprintf_internal_r+0x11bc>
 1442e34:	42000204 	addi	r8,r8,8
 1442e38:	e080010c 	andi	r2,fp,4
 1442e3c:	10003126 	beq	r2,zero,1442f04 <___vfprintf_internal_r+0x918>
 1442e40:	d8812e17 	ldw	r2,1208(sp)
 1442e44:	d9012b17 	ldw	r4,1196(sp)
 1442e48:	1121c83a 	sub	r16,r2,r4
 1442e4c:	04002d0e 	bge	zero,r16,1442f04 <___vfprintf_internal_r+0x918>
 1442e50:	04400404 	movi	r17,16
 1442e54:	d8811f17 	ldw	r2,1148(sp)
 1442e58:	8c05340e 	bge	r17,r16,144432c <___vfprintf_internal_r+0x1d40>
 1442e5c:	01005174 	movhi	r4,325
 1442e60:	2101ee84 	addi	r4,r4,1978
 1442e64:	d9013615 	stw	r4,1240(sp)
 1442e68:	048001c4 	movi	r18,7
 1442e6c:	00000306 	br	1442e7c <___vfprintf_internal_r+0x890>
 1442e70:	843ffc04 	addi	r16,r16,-16
 1442e74:	42000204 	addi	r8,r8,8
 1442e78:	8c00130e 	bge	r17,r16,1442ec8 <___vfprintf_internal_r+0x8dc>
 1442e7c:	01405174 	movhi	r5,325
 1442e80:	18c00404 	addi	r3,r3,16
 1442e84:	10800044 	addi	r2,r2,1
 1442e88:	2941ee84 	addi	r5,r5,1978
 1442e8c:	41400015 	stw	r5,0(r8)
 1442e90:	44400115 	stw	r17,4(r8)
 1442e94:	d8c12015 	stw	r3,1152(sp)
 1442e98:	d8811f15 	stw	r2,1148(sp)
 1442e9c:	90bff40e 	bge	r18,r2,1442e70 <__alt_data_end+0xfffdd670>
 1442ea0:	b809883a 	mov	r4,r23
 1442ea4:	b00b883a 	mov	r5,r22
 1442ea8:	d9811e04 	addi	r6,sp,1144
 1442eac:	1449a2c0 	call	1449a2c <__sprint_r>
 1442eb0:	103ee61e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1442eb4:	843ffc04 	addi	r16,r16,-16
 1442eb8:	d8c12017 	ldw	r3,1152(sp)
 1442ebc:	d8811f17 	ldw	r2,1148(sp)
 1442ec0:	da000404 	addi	r8,sp,16
 1442ec4:	8c3fed16 	blt	r17,r16,1442e7c <__alt_data_end+0xfffdd67c>
 1442ec8:	d9013617 	ldw	r4,1240(sp)
 1442ecc:	1c07883a 	add	r3,r3,r16
 1442ed0:	10800044 	addi	r2,r2,1
 1442ed4:	41000015 	stw	r4,0(r8)
 1442ed8:	44000115 	stw	r16,4(r8)
 1442edc:	d8c12015 	stw	r3,1152(sp)
 1442ee0:	d8811f15 	stw	r2,1148(sp)
 1442ee4:	010001c4 	movi	r4,7
 1442ee8:	2080060e 	bge	r4,r2,1442f04 <___vfprintf_internal_r+0x918>
 1442eec:	b809883a 	mov	r4,r23
 1442ef0:	b00b883a 	mov	r5,r22
 1442ef4:	d9811e04 	addi	r6,sp,1144
 1442ef8:	1449a2c0 	call	1449a2c <__sprint_r>
 1442efc:	103ed31e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1442f00:	d8c12017 	ldw	r3,1152(sp)
 1442f04:	df012b17 	ldw	fp,1196(sp)
 1442f08:	d9412e17 	ldw	r5,1208(sp)
 1442f0c:	e140010e 	bge	fp,r5,1442f14 <___vfprintf_internal_r+0x928>
 1442f10:	2839883a 	mov	fp,r5
 1442f14:	d8812f17 	ldw	r2,1212(sp)
 1442f18:	1705883a 	add	r2,r2,fp
 1442f1c:	d8812f15 	stw	r2,1212(sp)
 1442f20:	1802291e 	bne	r3,zero,14437c8 <___vfprintf_internal_r+0x11dc>
 1442f24:	d8c12a17 	ldw	r3,1192(sp)
 1442f28:	d8011f15 	stw	zero,1148(sp)
 1442f2c:	da000404 	addi	r8,sp,16
 1442f30:	18800007 	ldb	r2,0(r3)
 1442f34:	103ded1e 	bne	r2,zero,14426ec <__alt_data_end+0xfffdceec>
 1442f38:	dc012a17 	ldw	r16,1192(sp)
 1442f3c:	003e0506 	br	1442754 <__alt_data_end+0xfffdcf54>
 1442f40:	d9012d17 	ldw	r4,1204(sp)
 1442f44:	d9412d17 	ldw	r5,1204(sp)
 1442f48:	da012a17 	ldw	r8,1192(sp)
 1442f4c:	21000017 	ldw	r4,0(r4)
 1442f50:	29400117 	ldw	r5,4(r5)
 1442f54:	df012a15 	stw	fp,1192(sp)
 1442f58:	9839883a 	mov	fp,r19
 1442f5c:	dcc12b03 	ldbu	r19,1196(sp)
 1442f60:	d9013715 	stw	r4,1244(sp)
 1442f64:	d9413915 	stw	r5,1252(sp)
 1442f68:	da013f15 	stw	r8,1276(sp)
 1442f6c:	da413e15 	stw	r9,1272(sp)
 1442f70:	dcc12785 	stb	r19,1182(sp)
 1442f74:	14496880 	call	1449688 <__fpclassifyd>
 1442f78:	d8c12d17 	ldw	r3,1204(sp)
 1442f7c:	04400044 	movi	r17,1
 1442f80:	da013f17 	ldw	r8,1276(sp)
 1442f84:	1c800204 	addi	r18,r3,8
 1442f88:	da413e17 	ldw	r9,1272(sp)
 1442f8c:	d9013717 	ldw	r4,1244(sp)
 1442f90:	d9413917 	ldw	r5,1252(sp)
 1442f94:	1443451e 	bne	r2,r17,1443cac <___vfprintf_internal_r+0x16c0>
 1442f98:	000d883a 	mov	r6,zero
 1442f9c:	000f883a 	mov	r7,zero
 1442fa0:	144ce340 	call	144ce34 <__ledf2>
 1442fa4:	da013f17 	ldw	r8,1276(sp)
 1442fa8:	1004fe16 	blt	r2,zero,14443a4 <___vfprintf_internal_r+0x1db8>
 1442fac:	dcc12783 	ldbu	r19,1182(sp)
 1442fb0:	008011c4 	movi	r2,71
 1442fb4:	14045d0e 	bge	r2,r16,144412c <___vfprintf_internal_r+0x1b40>
 1442fb8:	01405174 	movhi	r5,325
 1442fbc:	2941db04 	addi	r5,r5,1900
 1442fc0:	d9413115 	stw	r5,1220(sp)
 1442fc4:	00c000c4 	movi	r3,3
 1442fc8:	00bfdfc4 	movi	r2,-129
 1442fcc:	d8c12b15 	stw	r3,1196(sp)
 1442fd0:	e0b8703a 	and	fp,fp,r2
 1442fd4:	dc812d15 	stw	r18,1204(sp)
 1442fd8:	1823883a 	mov	r17,r3
 1442fdc:	d8013215 	stw	zero,1224(sp)
 1442fe0:	d8013415 	stw	zero,1232(sp)
 1442fe4:	003f0106 	br	1442bec <__alt_data_end+0xfffdd3ec>
 1442fe8:	9cc00214 	ori	r19,r19,8
 1442fec:	e005883a 	mov	r2,fp
 1442ff0:	e4000007 	ldb	r16,0(fp)
 1442ff4:	003de506 	br	144278c <__alt_data_end+0xfffdcf8c>
 1442ff8:	da012a17 	ldw	r8,1192(sp)
 1442ffc:	df012a15 	stw	fp,1192(sp)
 1443000:	9f000414 	ori	fp,r19,16
 1443004:	e0c0080c 	andi	r3,fp,32
 1443008:	d8812d17 	ldw	r2,1204(sp)
 144300c:	18007626 	beq	r3,zero,14431e8 <___vfprintf_internal_r+0xbfc>
 1443010:	d9412d17 	ldw	r5,1204(sp)
 1443014:	14800017 	ldw	r18,0(r2)
 1443018:	15400117 	ldw	r21,4(r2)
 144301c:	29400204 	addi	r5,r5,8
 1443020:	d9412d15 	stw	r5,1204(sp)
 1443024:	0005883a 	mov	r2,zero
 1443028:	9546b03a 	or	r3,r18,r21
 144302c:	d8012785 	stb	zero,1182(sp)
 1443030:	da413215 	stw	r9,1224(sp)
 1443034:	0027883a 	mov	r19,zero
 1443038:	003ecd06 	br	1442b70 <__alt_data_end+0xfffdd370>
 144303c:	da012a17 	ldw	r8,1192(sp)
 1443040:	df012a15 	stw	fp,1192(sp)
 1443044:	9f000414 	ori	fp,r19,16
 1443048:	e0c0080c 	andi	r3,fp,32
 144304c:	d8812d17 	ldw	r2,1204(sp)
 1443050:	18002c26 	beq	r3,zero,1443104 <___vfprintf_internal_r+0xb18>
 1443054:	d9012d17 	ldw	r4,1204(sp)
 1443058:	14800017 	ldw	r18,0(r2)
 144305c:	15400117 	ldw	r21,4(r2)
 1443060:	21000204 	addi	r4,r4,8
 1443064:	d9012d15 	stw	r4,1204(sp)
 1443068:	00800044 	movi	r2,1
 144306c:	9546b03a 	or	r3,r18,r21
 1443070:	003fee06 	br	144302c <__alt_data_end+0xfffdd82c>
 1443074:	da012a17 	ldw	r8,1192(sp)
 1443078:	df012a15 	stw	fp,1192(sp)
 144307c:	9839883a 	mov	fp,r19
 1443080:	dcc12b03 	ldbu	r19,1196(sp)
 1443084:	01405174 	movhi	r5,325
 1443088:	2941de04 	addi	r5,r5,1912
 144308c:	dcc12785 	stb	r19,1182(sp)
 1443090:	d9413b15 	stw	r5,1260(sp)
 1443094:	e0c0080c 	andi	r3,fp,32
 1443098:	d8812d17 	ldw	r2,1204(sp)
 144309c:	18002e26 	beq	r3,zero,1443158 <___vfprintf_internal_r+0xb6c>
 14430a0:	d9412d17 	ldw	r5,1204(sp)
 14430a4:	14800017 	ldw	r18,0(r2)
 14430a8:	15400117 	ldw	r21,4(r2)
 14430ac:	29400204 	addi	r5,r5,8
 14430b0:	d9412d15 	stw	r5,1204(sp)
 14430b4:	e080004c 	andi	r2,fp,1
 14430b8:	10025c26 	beq	r2,zero,1443a2c <___vfprintf_internal_r+0x1440>
 14430bc:	9546b03a 	or	r3,r18,r21
 14430c0:	18038f26 	beq	r3,zero,1443f00 <___vfprintf_internal_r+0x1914>
 14430c4:	00800c04 	movi	r2,48
 14430c8:	d8812705 	stb	r2,1180(sp)
 14430cc:	dc012745 	stb	r16,1181(sp)
 14430d0:	e7000094 	ori	fp,fp,2
 14430d4:	00800084 	movi	r2,2
 14430d8:	003fd406 	br	144302c <__alt_data_end+0xfffdd82c>
 14430dc:	9cc00814 	ori	r19,r19,32
 14430e0:	e005883a 	mov	r2,fp
 14430e4:	e4000007 	ldb	r16,0(fp)
 14430e8:	003da806 	br	144278c <__alt_data_end+0xfffdcf8c>
 14430ec:	da012a17 	ldw	r8,1192(sp)
 14430f0:	df012a15 	stw	fp,1192(sp)
 14430f4:	9839883a 	mov	fp,r19
 14430f8:	e0c0080c 	andi	r3,fp,32
 14430fc:	d8812d17 	ldw	r2,1204(sp)
 1443100:	183fd41e 	bne	r3,zero,1443054 <__alt_data_end+0xfffdd854>
 1443104:	e0c0040c 	andi	r3,fp,16
 1443108:	18035f26 	beq	r3,zero,1443e88 <___vfprintf_internal_r+0x189c>
 144310c:	d9412d17 	ldw	r5,1204(sp)
 1443110:	14800017 	ldw	r18,0(r2)
 1443114:	002b883a 	mov	r21,zero
 1443118:	29400104 	addi	r5,r5,4
 144311c:	d9412d15 	stw	r5,1204(sp)
 1443120:	00800044 	movi	r2,1
 1443124:	9007883a 	mov	r3,r18
 1443128:	003fc006 	br	144302c <__alt_data_end+0xfffdd82c>
 144312c:	da012a17 	ldw	r8,1192(sp)
 1443130:	df012a15 	stw	fp,1192(sp)
 1443134:	9839883a 	mov	fp,r19
 1443138:	dcc12b03 	ldbu	r19,1196(sp)
 144313c:	01005174 	movhi	r4,325
 1443140:	2101e304 	addi	r4,r4,1932
 1443144:	d9013b15 	stw	r4,1260(sp)
 1443148:	dcc12785 	stb	r19,1182(sp)
 144314c:	e0c0080c 	andi	r3,fp,32
 1443150:	d8812d17 	ldw	r2,1204(sp)
 1443154:	183fd21e 	bne	r3,zero,14430a0 <__alt_data_end+0xfffdd8a0>
 1443158:	e0c0040c 	andi	r3,fp,16
 144315c:	18035426 	beq	r3,zero,1443eb0 <___vfprintf_internal_r+0x18c4>
 1443160:	d8c12d17 	ldw	r3,1204(sp)
 1443164:	14800017 	ldw	r18,0(r2)
 1443168:	002b883a 	mov	r21,zero
 144316c:	18c00104 	addi	r3,r3,4
 1443170:	d8c12d15 	stw	r3,1204(sp)
 1443174:	003fcf06 	br	14430b4 <__alt_data_end+0xfffdd8b4>
 1443178:	e4000007 	ldb	r16,0(fp)
 144317c:	00801b04 	movi	r2,108
 1443180:	8083f726 	beq	r16,r2,1444160 <___vfprintf_internal_r+0x1b74>
 1443184:	9cc00414 	ori	r19,r19,16
 1443188:	e005883a 	mov	r2,fp
 144318c:	003d7f06 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443190:	da012a17 	ldw	r8,1192(sp)
 1443194:	df012a15 	stw	fp,1192(sp)
 1443198:	9839883a 	mov	fp,r19
 144319c:	dcc12b03 	ldbu	r19,1196(sp)
 14431a0:	e080080c 	andi	r2,fp,32
 14431a4:	dcc12785 	stb	r19,1182(sp)
 14431a8:	10032226 	beq	r2,zero,1443e34 <___vfprintf_internal_r+0x1848>
 14431ac:	d9412d17 	ldw	r5,1204(sp)
 14431b0:	d9012f17 	ldw	r4,1212(sp)
 14431b4:	28800017 	ldw	r2,0(r5)
 14431b8:	2007d7fa 	srai	r3,r4,31
 14431bc:	29400104 	addi	r5,r5,4
 14431c0:	d9412d15 	stw	r5,1204(sp)
 14431c4:	11000015 	stw	r4,0(r2)
 14431c8:	10c00115 	stw	r3,4(r2)
 14431cc:	003d4406 	br	14426e0 <__alt_data_end+0xfffdcee0>
 14431d0:	da012a17 	ldw	r8,1192(sp)
 14431d4:	df012a15 	stw	fp,1192(sp)
 14431d8:	9839883a 	mov	fp,r19
 14431dc:	e0c0080c 	andi	r3,fp,32
 14431e0:	d8812d17 	ldw	r2,1204(sp)
 14431e4:	183f8a1e 	bne	r3,zero,1443010 <__alt_data_end+0xfffdd810>
 14431e8:	e0c0040c 	andi	r3,fp,16
 14431ec:	18031c26 	beq	r3,zero,1443e60 <___vfprintf_internal_r+0x1874>
 14431f0:	14800017 	ldw	r18,0(r2)
 14431f4:	d8812d17 	ldw	r2,1204(sp)
 14431f8:	002b883a 	mov	r21,zero
 14431fc:	9007883a 	mov	r3,r18
 1443200:	10800104 	addi	r2,r2,4
 1443204:	d8812d15 	stw	r2,1204(sp)
 1443208:	0005883a 	mov	r2,zero
 144320c:	003f8706 	br	144302c <__alt_data_end+0xfffdd82c>
 1443210:	d9412d17 	ldw	r5,1204(sp)
 1443214:	00800c04 	movi	r2,48
 1443218:	d8812705 	stb	r2,1180(sp)
 144321c:	2c800017 	ldw	r18,0(r5)
 1443220:	00801e04 	movi	r2,120
 1443224:	d8812745 	stb	r2,1181(sp)
 1443228:	00805174 	movhi	r2,325
 144322c:	1081e304 	addi	r2,r2,1932
 1443230:	29400104 	addi	r5,r5,4
 1443234:	da012a17 	ldw	r8,1192(sp)
 1443238:	d8813b15 	stw	r2,1260(sp)
 144323c:	df012a15 	stw	fp,1192(sp)
 1443240:	002b883a 	mov	r21,zero
 1443244:	9f000094 	ori	fp,r19,2
 1443248:	d9412d15 	stw	r5,1204(sp)
 144324c:	00800084 	movi	r2,2
 1443250:	04001e04 	movi	r16,120
 1443254:	9007883a 	mov	r3,r18
 1443258:	003f7406 	br	144302c <__alt_data_end+0xfffdd82c>
 144325c:	da012a17 	ldw	r8,1192(sp)
 1443260:	df012a15 	stw	fp,1192(sp)
 1443264:	9839883a 	mov	fp,r19
 1443268:	dcc12b03 	ldbu	r19,1196(sp)
 144326c:	e080080c 	andi	r2,fp,32
 1443270:	d8c12d17 	ldw	r3,1204(sp)
 1443274:	dcc12785 	stb	r19,1182(sp)
 1443278:	103e321e 	bne	r2,zero,1442b44 <__alt_data_end+0xfffdd344>
 144327c:	e080040c 	andi	r2,fp,16
 1443280:	10031326 	beq	r2,zero,1443ed0 <___vfprintf_internal_r+0x18e4>
 1443284:	1c800017 	ldw	r18,0(r3)
 1443288:	d9412d17 	ldw	r5,1204(sp)
 144328c:	902bd7fa 	srai	r21,r18,31
 1443290:	29400104 	addi	r5,r5,4
 1443294:	d9412d15 	stw	r5,1204(sp)
 1443298:	a805883a 	mov	r2,r21
 144329c:	003e2f06 	br	1442b5c <__alt_data_end+0xfffdd35c>
 14432a0:	9cc01014 	ori	r19,r19,64
 14432a4:	e005883a 	mov	r2,fp
 14432a8:	e4000007 	ldb	r16,0(fp)
 14432ac:	003d3706 	br	144278c <__alt_data_end+0xfffdcf8c>
 14432b0:	d8c12d17 	ldw	r3,1204(sp)
 14432b4:	d9012d17 	ldw	r4,1204(sp)
 14432b8:	da012a17 	ldw	r8,1192(sp)
 14432bc:	18800017 	ldw	r2,0(r3)
 14432c0:	21000104 	addi	r4,r4,4
 14432c4:	00c00044 	movi	r3,1
 14432c8:	df012a15 	stw	fp,1192(sp)
 14432cc:	d8c12b15 	stw	r3,1196(sp)
 14432d0:	9839883a 	mov	fp,r19
 14432d4:	d8012785 	stb	zero,1182(sp)
 14432d8:	d8810405 	stb	r2,1040(sp)
 14432dc:	d9012d15 	stw	r4,1204(sp)
 14432e0:	1823883a 	mov	r17,r3
 14432e4:	d8c10404 	addi	r3,sp,1040
 14432e8:	d8013215 	stw	zero,1224(sp)
 14432ec:	d8013415 	stw	zero,1232(sp)
 14432f0:	d8c13115 	stw	r3,1220(sp)
 14432f4:	0005883a 	mov	r2,zero
 14432f8:	003e4306 	br	1442c08 <__alt_data_end+0xfffdd408>
 14432fc:	d8812b07 	ldb	r2,1196(sp)
 1443300:	1002fc1e 	bne	r2,zero,1443ef4 <___vfprintf_internal_r+0x1908>
 1443304:	00c00804 	movi	r3,32
 1443308:	d8c12b05 	stb	r3,1196(sp)
 144330c:	e005883a 	mov	r2,fp
 1443310:	e4000007 	ldb	r16,0(fp)
 1443314:	003d1d06 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443318:	9cc00054 	ori	r19,r19,1
 144331c:	e005883a 	mov	r2,fp
 1443320:	e4000007 	ldb	r16,0(fp)
 1443324:	003d1906 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443328:	d9012d17 	ldw	r4,1204(sp)
 144332c:	d9412d17 	ldw	r5,1204(sp)
 1443330:	21000017 	ldw	r4,0(r4)
 1443334:	28c00104 	addi	r3,r5,4
 1443338:	d9012e15 	stw	r4,1208(sp)
 144333c:	20038c16 	blt	r4,zero,1444170 <___vfprintf_internal_r+0x1b84>
 1443340:	d8c12d15 	stw	r3,1204(sp)
 1443344:	e005883a 	mov	r2,fp
 1443348:	e4000007 	ldb	r16,0(fp)
 144334c:	003d0f06 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443350:	00c00ac4 	movi	r3,43
 1443354:	d8c12b05 	stb	r3,1196(sp)
 1443358:	e005883a 	mov	r2,fp
 144335c:	e4000007 	ldb	r16,0(fp)
 1443360:	003d0a06 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443364:	d8c12d17 	ldw	r3,1204(sp)
 1443368:	d9012d17 	ldw	r4,1204(sp)
 144336c:	da012a17 	ldw	r8,1192(sp)
 1443370:	18c00017 	ldw	r3,0(r3)
 1443374:	df012a15 	stw	fp,1192(sp)
 1443378:	d8012785 	stb	zero,1182(sp)
 144337c:	d8c13115 	stw	r3,1220(sp)
 1443380:	9839883a 	mov	fp,r19
 1443384:	24800104 	addi	r18,r4,4
 1443388:	1803f726 	beq	r3,zero,1444368 <___vfprintf_internal_r+0x1d7c>
 144338c:	d9013117 	ldw	r4,1220(sp)
 1443390:	48038916 	blt	r9,zero,14441b8 <___vfprintf_internal_r+0x1bcc>
 1443394:	480d883a 	mov	r6,r9
 1443398:	000b883a 	mov	r5,zero
 144339c:	da013f15 	stw	r8,1276(sp)
 14433a0:	da413e15 	stw	r9,1272(sp)
 14433a4:	1447c000 	call	1447c00 <memchr>
 14433a8:	da013f17 	ldw	r8,1276(sp)
 14433ac:	da413e17 	ldw	r9,1272(sp)
 14433b0:	10045926 	beq	r2,zero,1444518 <___vfprintf_internal_r+0x1f2c>
 14433b4:	d8c13117 	ldw	r3,1220(sp)
 14433b8:	10e3c83a 	sub	r17,r2,r3
 14433bc:	4c433516 	blt	r9,r17,1444094 <___vfprintf_internal_r+0x1aa8>
 14433c0:	8805883a 	mov	r2,r17
 14433c4:	88038116 	blt	r17,zero,14441cc <___vfprintf_internal_r+0x1be0>
 14433c8:	dcc12783 	ldbu	r19,1182(sp)
 14433cc:	d8812b15 	stw	r2,1196(sp)
 14433d0:	dc812d15 	stw	r18,1204(sp)
 14433d4:	d8013215 	stw	zero,1224(sp)
 14433d8:	d8013415 	stw	zero,1232(sp)
 14433dc:	003e0306 	br	1442bec <__alt_data_end+0xfffdd3ec>
 14433e0:	da012a17 	ldw	r8,1192(sp)
 14433e4:	df012a15 	stw	fp,1192(sp)
 14433e8:	9839883a 	mov	fp,r19
 14433ec:	dcc12b03 	ldbu	r19,1196(sp)
 14433f0:	dcc12785 	stb	r19,1182(sp)
 14433f4:	803d8f26 	beq	r16,zero,1442a34 <__alt_data_end+0xfffdd234>
 14433f8:	00c00044 	movi	r3,1
 14433fc:	d8c12b15 	stw	r3,1196(sp)
 1443400:	dc010405 	stb	r16,1040(sp)
 1443404:	d8012785 	stb	zero,1182(sp)
 1443408:	003fb506 	br	14432e0 <__alt_data_end+0xfffddae0>
 144340c:	d8c12017 	ldw	r3,1152(sp)
 1443410:	003e3506 	br	1442ce8 <__alt_data_end+0xfffdd4e8>
 1443414:	10803fcc 	andi	r2,r2,255
 1443418:	00c00044 	movi	r3,1
 144341c:	10fddc1e 	bne	r2,r3,1442b90 <__alt_data_end+0xfffdd390>
 1443420:	a800021e 	bne	r21,zero,144342c <___vfprintf_internal_r+0xe40>
 1443424:	00800244 	movi	r2,9
 1443428:	14801e2e 	bgeu	r2,r18,14434a4 <___vfprintf_internal_r+0xeb8>
 144342c:	dc012b15 	stw	r16,1196(sp)
 1443430:	dc410e04 	addi	r17,sp,1080
 1443434:	9021883a 	mov	r16,r18
 1443438:	da012c15 	stw	r8,1200(sp)
 144343c:	a825883a 	mov	r18,r21
 1443440:	482b883a 	mov	r21,r9
 1443444:	8009883a 	mov	r4,r16
 1443448:	900b883a 	mov	r5,r18
 144344c:	01800284 	movi	r6,10
 1443450:	000f883a 	mov	r7,zero
 1443454:	144be180 	call	144be18 <__umoddi3>
 1443458:	10800c04 	addi	r2,r2,48
 144345c:	8c7fffc4 	addi	r17,r17,-1
 1443460:	8009883a 	mov	r4,r16
 1443464:	900b883a 	mov	r5,r18
 1443468:	01800284 	movi	r6,10
 144346c:	000f883a 	mov	r7,zero
 1443470:	88800005 	stb	r2,0(r17)
 1443474:	144b7d80 	call	144b7d8 <__udivdi3>
 1443478:	1021883a 	mov	r16,r2
 144347c:	10c4b03a 	or	r2,r2,r3
 1443480:	1825883a 	mov	r18,r3
 1443484:	103fef1e 	bne	r2,zero,1443444 <__alt_data_end+0xfffddc44>
 1443488:	d9012817 	ldw	r4,1184(sp)
 144348c:	dc413115 	stw	r17,1220(sp)
 1443490:	dc012b17 	ldw	r16,1196(sp)
 1443494:	da012c17 	ldw	r8,1200(sp)
 1443498:	a813883a 	mov	r9,r21
 144349c:	2463c83a 	sub	r17,r4,r17
 14434a0:	003dcd06 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 14434a4:	94800c04 	addi	r18,r18,48
 14434a8:	d8c10dc4 	addi	r3,sp,1079
 14434ac:	dc810dc5 	stb	r18,1079(sp)
 14434b0:	dc413c17 	ldw	r17,1264(sp)
 14434b4:	d8c13115 	stw	r3,1220(sp)
 14434b8:	003dc706 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 14434bc:	00801944 	movi	r2,101
 14434c0:	1400720e 	bge	r2,r16,144368c <___vfprintf_internal_r+0x10a0>
 14434c4:	d9013717 	ldw	r4,1244(sp)
 14434c8:	d9413917 	ldw	r5,1252(sp)
 14434cc:	000d883a 	mov	r6,zero
 14434d0:	000f883a 	mov	r7,zero
 14434d4:	d8c13d15 	stw	r3,1268(sp)
 14434d8:	da013f15 	stw	r8,1276(sp)
 14434dc:	144ccd00 	call	144ccd0 <__eqdf2>
 14434e0:	d8c13d17 	ldw	r3,1268(sp)
 14434e4:	da013f17 	ldw	r8,1276(sp)
 14434e8:	1000f41e 	bne	r2,zero,14438bc <___vfprintf_internal_r+0x12d0>
 14434ec:	d8811f17 	ldw	r2,1148(sp)
 14434f0:	01005174 	movhi	r4,325
 14434f4:	2101ea04 	addi	r4,r4,1960
 14434f8:	18c00044 	addi	r3,r3,1
 14434fc:	10800044 	addi	r2,r2,1
 1443500:	41000015 	stw	r4,0(r8)
 1443504:	01000044 	movi	r4,1
 1443508:	41000115 	stw	r4,4(r8)
 144350c:	d8c12015 	stw	r3,1152(sp)
 1443510:	d8811f15 	stw	r2,1148(sp)
 1443514:	010001c4 	movi	r4,7
 1443518:	20828d16 	blt	r4,r2,1443f50 <___vfprintf_internal_r+0x1964>
 144351c:	42000204 	addi	r8,r8,8
 1443520:	d8812617 	ldw	r2,1176(sp)
 1443524:	d9413317 	ldw	r5,1228(sp)
 1443528:	11400216 	blt	r2,r5,1443534 <___vfprintf_internal_r+0xf48>
 144352c:	e080004c 	andi	r2,fp,1
 1443530:	103e4126 	beq	r2,zero,1442e38 <__alt_data_end+0xfffdd638>
 1443534:	d8813817 	ldw	r2,1248(sp)
 1443538:	d9013517 	ldw	r4,1236(sp)
 144353c:	d9413817 	ldw	r5,1248(sp)
 1443540:	1887883a 	add	r3,r3,r2
 1443544:	d8811f17 	ldw	r2,1148(sp)
 1443548:	41000015 	stw	r4,0(r8)
 144354c:	41400115 	stw	r5,4(r8)
 1443550:	10800044 	addi	r2,r2,1
 1443554:	d8c12015 	stw	r3,1152(sp)
 1443558:	d8811f15 	stw	r2,1148(sp)
 144355c:	010001c4 	movi	r4,7
 1443560:	20830916 	blt	r4,r2,1444188 <___vfprintf_internal_r+0x1b9c>
 1443564:	42000204 	addi	r8,r8,8
 1443568:	d8813317 	ldw	r2,1228(sp)
 144356c:	143fffc4 	addi	r16,r2,-1
 1443570:	043e310e 	bge	zero,r16,1442e38 <__alt_data_end+0xfffdd638>
 1443574:	04400404 	movi	r17,16
 1443578:	d8811f17 	ldw	r2,1148(sp)
 144357c:	8c007e0e 	bge	r17,r16,1443778 <___vfprintf_internal_r+0x118c>
 1443580:	01405174 	movhi	r5,325
 1443584:	2941ea84 	addi	r5,r5,1962
 1443588:	d9412c15 	stw	r5,1200(sp)
 144358c:	04c001c4 	movi	r19,7
 1443590:	00000306 	br	14435a0 <___vfprintf_internal_r+0xfb4>
 1443594:	42000204 	addi	r8,r8,8
 1443598:	843ffc04 	addi	r16,r16,-16
 144359c:	8c00790e 	bge	r17,r16,1443784 <___vfprintf_internal_r+0x1198>
 14435a0:	18c00404 	addi	r3,r3,16
 14435a4:	10800044 	addi	r2,r2,1
 14435a8:	45000015 	stw	r20,0(r8)
 14435ac:	44400115 	stw	r17,4(r8)
 14435b0:	d8c12015 	stw	r3,1152(sp)
 14435b4:	d8811f15 	stw	r2,1148(sp)
 14435b8:	98bff60e 	bge	r19,r2,1443594 <__alt_data_end+0xfffddd94>
 14435bc:	b809883a 	mov	r4,r23
 14435c0:	b00b883a 	mov	r5,r22
 14435c4:	d9811e04 	addi	r6,sp,1144
 14435c8:	1449a2c0 	call	1449a2c <__sprint_r>
 14435cc:	103d1f1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14435d0:	d8c12017 	ldw	r3,1152(sp)
 14435d4:	d8811f17 	ldw	r2,1148(sp)
 14435d8:	da000404 	addi	r8,sp,16
 14435dc:	003fee06 	br	1443598 <__alt_data_end+0xfffddd98>
 14435e0:	d9412e17 	ldw	r5,1208(sp)
 14435e4:	d8812b17 	ldw	r2,1196(sp)
 14435e8:	28a7c83a 	sub	r19,r5,r2
 14435ec:	04fddc0e 	bge	zero,r19,1442d60 <__alt_data_end+0xfffdd560>
 14435f0:	05400404 	movi	r21,16
 14435f4:	d8811f17 	ldw	r2,1148(sp)
 14435f8:	acc3870e 	bge	r21,r19,1444418 <___vfprintf_internal_r+0x1e2c>
 14435fc:	01405174 	movhi	r5,325
 1443600:	2941ea84 	addi	r5,r5,1962
 1443604:	d9412c15 	stw	r5,1200(sp)
 1443608:	048001c4 	movi	r18,7
 144360c:	00000306 	br	144361c <___vfprintf_internal_r+0x1030>
 1443610:	9cfffc04 	addi	r19,r19,-16
 1443614:	42000204 	addi	r8,r8,8
 1443618:	acc0110e 	bge	r21,r19,1443660 <___vfprintf_internal_r+0x1074>
 144361c:	18c00404 	addi	r3,r3,16
 1443620:	10800044 	addi	r2,r2,1
 1443624:	45000015 	stw	r20,0(r8)
 1443628:	45400115 	stw	r21,4(r8)
 144362c:	d8c12015 	stw	r3,1152(sp)
 1443630:	d8811f15 	stw	r2,1148(sp)
 1443634:	90bff60e 	bge	r18,r2,1443610 <__alt_data_end+0xfffdde10>
 1443638:	b809883a 	mov	r4,r23
 144363c:	b00b883a 	mov	r5,r22
 1443640:	d9811e04 	addi	r6,sp,1144
 1443644:	1449a2c0 	call	1449a2c <__sprint_r>
 1443648:	103d001e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144364c:	9cfffc04 	addi	r19,r19,-16
 1443650:	d8c12017 	ldw	r3,1152(sp)
 1443654:	d8811f17 	ldw	r2,1148(sp)
 1443658:	da000404 	addi	r8,sp,16
 144365c:	acffef16 	blt	r21,r19,144361c <__alt_data_end+0xfffdde1c>
 1443660:	d9012c17 	ldw	r4,1200(sp)
 1443664:	1cc7883a 	add	r3,r3,r19
 1443668:	10800044 	addi	r2,r2,1
 144366c:	41000015 	stw	r4,0(r8)
 1443670:	44c00115 	stw	r19,4(r8)
 1443674:	d8c12015 	stw	r3,1152(sp)
 1443678:	d8811f15 	stw	r2,1148(sp)
 144367c:	010001c4 	movi	r4,7
 1443680:	20817816 	blt	r4,r2,1443c64 <___vfprintf_internal_r+0x1678>
 1443684:	42000204 	addi	r8,r8,8
 1443688:	003db506 	br	1442d60 <__alt_data_end+0xfffdd560>
 144368c:	d9413317 	ldw	r5,1228(sp)
 1443690:	00800044 	movi	r2,1
 1443694:	18c00044 	addi	r3,r3,1
 1443698:	11413e0e 	bge	r2,r5,1443b94 <___vfprintf_internal_r+0x15a8>
 144369c:	dc011f17 	ldw	r16,1148(sp)
 14436a0:	d8813117 	ldw	r2,1220(sp)
 14436a4:	d8c12015 	stw	r3,1152(sp)
 14436a8:	84000044 	addi	r16,r16,1
 14436ac:	40800015 	stw	r2,0(r8)
 14436b0:	00800044 	movi	r2,1
 14436b4:	40800115 	stw	r2,4(r8)
 14436b8:	dc011f15 	stw	r16,1148(sp)
 14436bc:	008001c4 	movi	r2,7
 14436c0:	14015616 	blt	r2,r16,1443c1c <___vfprintf_internal_r+0x1630>
 14436c4:	42000204 	addi	r8,r8,8
 14436c8:	d9013817 	ldw	r4,1248(sp)
 14436cc:	d9413517 	ldw	r5,1236(sp)
 14436d0:	84000044 	addi	r16,r16,1
 14436d4:	1907883a 	add	r3,r3,r4
 14436d8:	41400015 	stw	r5,0(r8)
 14436dc:	41000115 	stw	r4,4(r8)
 14436e0:	d8c12015 	stw	r3,1152(sp)
 14436e4:	dc011f15 	stw	r16,1148(sp)
 14436e8:	008001c4 	movi	r2,7
 14436ec:	14015416 	blt	r2,r16,1443c40 <___vfprintf_internal_r+0x1654>
 14436f0:	44400204 	addi	r17,r8,8
 14436f4:	d9013717 	ldw	r4,1244(sp)
 14436f8:	d9413917 	ldw	r5,1252(sp)
 14436fc:	000d883a 	mov	r6,zero
 1443700:	000f883a 	mov	r7,zero
 1443704:	d8c13d15 	stw	r3,1268(sp)
 1443708:	144ccd00 	call	144ccd0 <__eqdf2>
 144370c:	d8c13d17 	ldw	r3,1268(sp)
 1443710:	1000a726 	beq	r2,zero,14439b0 <___vfprintf_internal_r+0x13c4>
 1443714:	d9013317 	ldw	r4,1228(sp)
 1443718:	d9413117 	ldw	r5,1220(sp)
 144371c:	84000044 	addi	r16,r16,1
 1443720:	20bfffc4 	addi	r2,r4,-1
 1443724:	1887883a 	add	r3,r3,r2
 1443728:	29000044 	addi	r4,r5,1
 144372c:	88800115 	stw	r2,4(r17)
 1443730:	89000015 	stw	r4,0(r17)
 1443734:	d8c12015 	stw	r3,1152(sp)
 1443738:	dc011f15 	stw	r16,1148(sp)
 144373c:	008001c4 	movi	r2,7
 1443740:	14012d16 	blt	r2,r16,1443bf8 <___vfprintf_internal_r+0x160c>
 1443744:	8c400204 	addi	r17,r17,8
 1443748:	d9413a17 	ldw	r5,1256(sp)
 144374c:	dcc122c4 	addi	r19,sp,1163
 1443750:	84000044 	addi	r16,r16,1
 1443754:	28c7883a 	add	r3,r5,r3
 1443758:	8cc00015 	stw	r19,0(r17)
 144375c:	89400115 	stw	r5,4(r17)
 1443760:	d8c12015 	stw	r3,1152(sp)
 1443764:	dc011f15 	stw	r16,1148(sp)
 1443768:	008001c4 	movi	r2,7
 144376c:	14000e16 	blt	r2,r16,14437a8 <___vfprintf_internal_r+0x11bc>
 1443770:	8a000204 	addi	r8,r17,8
 1443774:	003db006 	br	1442e38 <__alt_data_end+0xfffdd638>
 1443778:	01005174 	movhi	r4,325
 144377c:	2101ea84 	addi	r4,r4,1962
 1443780:	d9012c15 	stw	r4,1200(sp)
 1443784:	d9012c17 	ldw	r4,1200(sp)
 1443788:	1c07883a 	add	r3,r3,r16
 144378c:	44000115 	stw	r16,4(r8)
 1443790:	41000015 	stw	r4,0(r8)
 1443794:	10800044 	addi	r2,r2,1
 1443798:	d8c12015 	stw	r3,1152(sp)
 144379c:	d8811f15 	stw	r2,1148(sp)
 14437a0:	010001c4 	movi	r4,7
 14437a4:	20bda30e 	bge	r4,r2,1442e34 <__alt_data_end+0xfffdd634>
 14437a8:	b809883a 	mov	r4,r23
 14437ac:	b00b883a 	mov	r5,r22
 14437b0:	d9811e04 	addi	r6,sp,1144
 14437b4:	1449a2c0 	call	1449a2c <__sprint_r>
 14437b8:	103ca41e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14437bc:	d8c12017 	ldw	r3,1152(sp)
 14437c0:	da000404 	addi	r8,sp,16
 14437c4:	003d9c06 	br	1442e38 <__alt_data_end+0xfffdd638>
 14437c8:	b809883a 	mov	r4,r23
 14437cc:	b00b883a 	mov	r5,r22
 14437d0:	d9811e04 	addi	r6,sp,1144
 14437d4:	1449a2c0 	call	1449a2c <__sprint_r>
 14437d8:	103dd226 	beq	r2,zero,1442f24 <__alt_data_end+0xfffdd724>
 14437dc:	003c9b06 	br	1442a4c <__alt_data_end+0xfffdd24c>
 14437e0:	10803fcc 	andi	r2,r2,255
 14437e4:	1000311e 	bne	r2,zero,14438ac <___vfprintf_internal_r+0x12c0>
 14437e8:	e080004c 	andi	r2,fp,1
 14437ec:	10002f26 	beq	r2,zero,14438ac <___vfprintf_internal_r+0x12c0>
 14437f0:	00800c04 	movi	r2,48
 14437f4:	d8c10dc4 	addi	r3,sp,1079
 14437f8:	d8810dc5 	stb	r2,1079(sp)
 14437fc:	dc413c17 	ldw	r17,1264(sp)
 1443800:	d8c13115 	stw	r3,1220(sp)
 1443804:	003cf406 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 1443808:	b809883a 	mov	r4,r23
 144380c:	b00b883a 	mov	r5,r22
 1443810:	d9811e04 	addi	r6,sp,1144
 1443814:	1449a2c0 	call	1449a2c <__sprint_r>
 1443818:	103c8c1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144381c:	d8c12017 	ldw	r3,1152(sp)
 1443820:	da000404 	addi	r8,sp,16
 1443824:	003d7706 	br	1442e04 <__alt_data_end+0xfffdd604>
 1443828:	b809883a 	mov	r4,r23
 144382c:	b00b883a 	mov	r5,r22
 1443830:	d9811e04 	addi	r6,sp,1144
 1443834:	1449a2c0 	call	1449a2c <__sprint_r>
 1443838:	103c841e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144383c:	d8c12017 	ldw	r3,1152(sp)
 1443840:	da000404 	addi	r8,sp,16
 1443844:	003d3506 	br	1442d1c <__alt_data_end+0xfffdd51c>
 1443848:	b809883a 	mov	r4,r23
 144384c:	b00b883a 	mov	r5,r22
 1443850:	d9811e04 	addi	r6,sp,1144
 1443854:	1449a2c0 	call	1449a2c <__sprint_r>
 1443858:	103c7c1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144385c:	d8c12017 	ldw	r3,1152(sp)
 1443860:	da000404 	addi	r8,sp,16
 1443864:	003d3b06 	br	1442d54 <__alt_data_end+0xfffdd554>
 1443868:	d9413b17 	ldw	r5,1260(sp)
 144386c:	d8c10e04 	addi	r3,sp,1080
 1443870:	908003cc 	andi	r2,r18,15
 1443874:	a808973a 	slli	r4,r21,28
 1443878:	2885883a 	add	r2,r5,r2
 144387c:	9024d13a 	srli	r18,r18,4
 1443880:	10800003 	ldbu	r2,0(r2)
 1443884:	a82ad13a 	srli	r21,r21,4
 1443888:	18ffffc4 	addi	r3,r3,-1
 144388c:	24a4b03a 	or	r18,r4,r18
 1443890:	18800005 	stb	r2,0(r3)
 1443894:	9544b03a 	or	r2,r18,r21
 1443898:	103ff51e 	bne	r2,zero,1443870 <__alt_data_end+0xfffde070>
 144389c:	d9412817 	ldw	r5,1184(sp)
 14438a0:	d8c13115 	stw	r3,1220(sp)
 14438a4:	28e3c83a 	sub	r17,r5,r3
 14438a8:	003ccb06 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 14438ac:	d8c10e04 	addi	r3,sp,1080
 14438b0:	0023883a 	mov	r17,zero
 14438b4:	d8c13115 	stw	r3,1220(sp)
 14438b8:	003cc706 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 14438bc:	dc012617 	ldw	r16,1176(sp)
 14438c0:	0401ab0e 	bge	zero,r16,1443f70 <___vfprintf_internal_r+0x1984>
 14438c4:	d8813317 	ldw	r2,1228(sp)
 14438c8:	d9413117 	ldw	r5,1220(sp)
 14438cc:	d9013417 	ldw	r4,1232(sp)
 14438d0:	1023883a 	mov	r17,r2
 14438d4:	28a1883a 	add	r16,r5,r2
 14438d8:	2080010e 	bge	r4,r2,14438e0 <___vfprintf_internal_r+0x12f4>
 14438dc:	2023883a 	mov	r17,r4
 14438e0:	04400b0e 	bge	zero,r17,1443910 <___vfprintf_internal_r+0x1324>
 14438e4:	d8811f17 	ldw	r2,1148(sp)
 14438e8:	d9413117 	ldw	r5,1220(sp)
 14438ec:	1c47883a 	add	r3,r3,r17
 14438f0:	10800044 	addi	r2,r2,1
 14438f4:	41400015 	stw	r5,0(r8)
 14438f8:	44400115 	stw	r17,4(r8)
 14438fc:	d8c12015 	stw	r3,1152(sp)
 1443900:	d8811f15 	stw	r2,1148(sp)
 1443904:	010001c4 	movi	r4,7
 1443908:	20826716 	blt	r4,r2,14442a8 <___vfprintf_internal_r+0x1cbc>
 144390c:	42000204 	addi	r8,r8,8
 1443910:	88026316 	blt	r17,zero,14442a0 <___vfprintf_internal_r+0x1cb4>
 1443914:	d8813417 	ldw	r2,1232(sp)
 1443918:	1463c83a 	sub	r17,r2,r17
 144391c:	0440590e 	bge	zero,r17,1443a84 <___vfprintf_internal_r+0x1498>
 1443920:	04c00404 	movi	r19,16
 1443924:	d8811f17 	ldw	r2,1148(sp)
 1443928:	9c41770e 	bge	r19,r17,1443f08 <___vfprintf_internal_r+0x191c>
 144392c:	01405174 	movhi	r5,325
 1443930:	2941ea84 	addi	r5,r5,1962
 1443934:	d9412c15 	stw	r5,1200(sp)
 1443938:	054001c4 	movi	r21,7
 144393c:	00000306 	br	144394c <___vfprintf_internal_r+0x1360>
 1443940:	42000204 	addi	r8,r8,8
 1443944:	8c7ffc04 	addi	r17,r17,-16
 1443948:	9c41720e 	bge	r19,r17,1443f14 <___vfprintf_internal_r+0x1928>
 144394c:	18c00404 	addi	r3,r3,16
 1443950:	10800044 	addi	r2,r2,1
 1443954:	45000015 	stw	r20,0(r8)
 1443958:	44c00115 	stw	r19,4(r8)
 144395c:	d8c12015 	stw	r3,1152(sp)
 1443960:	d8811f15 	stw	r2,1148(sp)
 1443964:	a8bff60e 	bge	r21,r2,1443940 <__alt_data_end+0xfffde140>
 1443968:	b809883a 	mov	r4,r23
 144396c:	b00b883a 	mov	r5,r22
 1443970:	d9811e04 	addi	r6,sp,1144
 1443974:	1449a2c0 	call	1449a2c <__sprint_r>
 1443978:	103c341e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144397c:	d8c12017 	ldw	r3,1152(sp)
 1443980:	d8811f17 	ldw	r2,1148(sp)
 1443984:	da000404 	addi	r8,sp,16
 1443988:	003fee06 	br	1443944 <__alt_data_end+0xfffde144>
 144398c:	b809883a 	mov	r4,r23
 1443990:	b00b883a 	mov	r5,r22
 1443994:	d9811e04 	addi	r6,sp,1144
 1443998:	1449a2c0 	call	1449a2c <__sprint_r>
 144399c:	103c2b1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14439a0:	d8c12017 	ldw	r3,1152(sp)
 14439a4:	d8812787 	ldb	r2,1182(sp)
 14439a8:	da000404 	addi	r8,sp,16
 14439ac:	003cce06 	br	1442ce8 <__alt_data_end+0xfffdd4e8>
 14439b0:	d8813317 	ldw	r2,1228(sp)
 14439b4:	14ffffc4 	addi	r19,r2,-1
 14439b8:	04ff630e 	bge	zero,r19,1443748 <__alt_data_end+0xfffddf48>
 14439bc:	05400404 	movi	r21,16
 14439c0:	acc0810e 	bge	r21,r19,1443bc8 <___vfprintf_internal_r+0x15dc>
 14439c4:	01405174 	movhi	r5,325
 14439c8:	2941ea84 	addi	r5,r5,1962
 14439cc:	d9412c15 	stw	r5,1200(sp)
 14439d0:	01c001c4 	movi	r7,7
 14439d4:	00000306 	br	14439e4 <___vfprintf_internal_r+0x13f8>
 14439d8:	8c400204 	addi	r17,r17,8
 14439dc:	9cfffc04 	addi	r19,r19,-16
 14439e0:	acc07c0e 	bge	r21,r19,1443bd4 <___vfprintf_internal_r+0x15e8>
 14439e4:	18c00404 	addi	r3,r3,16
 14439e8:	84000044 	addi	r16,r16,1
 14439ec:	8d000015 	stw	r20,0(r17)
 14439f0:	8d400115 	stw	r21,4(r17)
 14439f4:	d8c12015 	stw	r3,1152(sp)
 14439f8:	dc011f15 	stw	r16,1148(sp)
 14439fc:	3c3ff60e 	bge	r7,r16,14439d8 <__alt_data_end+0xfffde1d8>
 1443a00:	b809883a 	mov	r4,r23
 1443a04:	b00b883a 	mov	r5,r22
 1443a08:	d9811e04 	addi	r6,sp,1144
 1443a0c:	d9c13d15 	stw	r7,1268(sp)
 1443a10:	1449a2c0 	call	1449a2c <__sprint_r>
 1443a14:	d9c13d17 	ldw	r7,1268(sp)
 1443a18:	103c0c1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443a1c:	d8c12017 	ldw	r3,1152(sp)
 1443a20:	dc011f17 	ldw	r16,1148(sp)
 1443a24:	dc400404 	addi	r17,sp,16
 1443a28:	003fec06 	br	14439dc <__alt_data_end+0xfffde1dc>
 1443a2c:	00800084 	movi	r2,2
 1443a30:	9546b03a 	or	r3,r18,r21
 1443a34:	003d7d06 	br	144302c <__alt_data_end+0xfffdd82c>
 1443a38:	10803fcc 	andi	r2,r2,255
 1443a3c:	1080201c 	xori	r2,r2,128
 1443a40:	10bfe004 	addi	r2,r2,-128
 1443a44:	01000c04 	movi	r4,48
 1443a48:	1101d726 	beq	r2,r4,14441a8 <___vfprintf_internal_r+0x1bbc>
 1443a4c:	d9413117 	ldw	r5,1220(sp)
 1443a50:	d8812817 	ldw	r2,1184(sp)
 1443a54:	193fffc5 	stb	r4,-1(r3)
 1443a58:	297fffc4 	addi	r5,r5,-1
 1443a5c:	d9413115 	stw	r5,1220(sp)
 1443a60:	1163c83a 	sub	r17,r2,r5
 1443a64:	003c5c06 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 1443a68:	b809883a 	mov	r4,r23
 1443a6c:	b00b883a 	mov	r5,r22
 1443a70:	d9811e04 	addi	r6,sp,1144
 1443a74:	1449a2c0 	call	1449a2c <__sprint_r>
 1443a78:	103bf41e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443a7c:	d8c12017 	ldw	r3,1152(sp)
 1443a80:	da000404 	addi	r8,sp,16
 1443a84:	d9413117 	ldw	r5,1220(sp)
 1443a88:	d9013417 	ldw	r4,1232(sp)
 1443a8c:	d8812617 	ldw	r2,1176(sp)
 1443a90:	2923883a 	add	r17,r5,r4
 1443a94:	d9413317 	ldw	r5,1228(sp)
 1443a98:	11400216 	blt	r2,r5,1443aa4 <___vfprintf_internal_r+0x14b8>
 1443a9c:	e100004c 	andi	r4,fp,1
 1443aa0:	20000d26 	beq	r4,zero,1443ad8 <___vfprintf_internal_r+0x14ec>
 1443aa4:	d9013817 	ldw	r4,1248(sp)
 1443aa8:	d9413517 	ldw	r5,1236(sp)
 1443aac:	1907883a 	add	r3,r3,r4
 1443ab0:	d9011f17 	ldw	r4,1148(sp)
 1443ab4:	41400015 	stw	r5,0(r8)
 1443ab8:	d9413817 	ldw	r5,1248(sp)
 1443abc:	21000044 	addi	r4,r4,1
 1443ac0:	d8c12015 	stw	r3,1152(sp)
 1443ac4:	41400115 	stw	r5,4(r8)
 1443ac8:	d9011f15 	stw	r4,1148(sp)
 1443acc:	014001c4 	movi	r5,7
 1443ad0:	2901fd16 	blt	r5,r4,14442c8 <___vfprintf_internal_r+0x1cdc>
 1443ad4:	42000204 	addi	r8,r8,8
 1443ad8:	d9013317 	ldw	r4,1228(sp)
 1443adc:	2085c83a 	sub	r2,r4,r2
 1443ae0:	8449c83a 	sub	r4,r16,r17
 1443ae4:	1021883a 	mov	r16,r2
 1443ae8:	2080010e 	bge	r4,r2,1443af0 <___vfprintf_internal_r+0x1504>
 1443aec:	2021883a 	mov	r16,r4
 1443af0:	04000a0e 	bge	zero,r16,1443b1c <___vfprintf_internal_r+0x1530>
 1443af4:	d9011f17 	ldw	r4,1148(sp)
 1443af8:	1c07883a 	add	r3,r3,r16
 1443afc:	44400015 	stw	r17,0(r8)
 1443b00:	21000044 	addi	r4,r4,1
 1443b04:	44000115 	stw	r16,4(r8)
 1443b08:	d8c12015 	stw	r3,1152(sp)
 1443b0c:	d9011f15 	stw	r4,1148(sp)
 1443b10:	014001c4 	movi	r5,7
 1443b14:	29020916 	blt	r5,r4,144433c <___vfprintf_internal_r+0x1d50>
 1443b18:	42000204 	addi	r8,r8,8
 1443b1c:	80020116 	blt	r16,zero,1444324 <___vfprintf_internal_r+0x1d38>
 1443b20:	1421c83a 	sub	r16,r2,r16
 1443b24:	043cc40e 	bge	zero,r16,1442e38 <__alt_data_end+0xfffdd638>
 1443b28:	04400404 	movi	r17,16
 1443b2c:	d8811f17 	ldw	r2,1148(sp)
 1443b30:	8c3f110e 	bge	r17,r16,1443778 <__alt_data_end+0xfffddf78>
 1443b34:	01405174 	movhi	r5,325
 1443b38:	2941ea84 	addi	r5,r5,1962
 1443b3c:	d9412c15 	stw	r5,1200(sp)
 1443b40:	04c001c4 	movi	r19,7
 1443b44:	00000306 	br	1443b54 <___vfprintf_internal_r+0x1568>
 1443b48:	42000204 	addi	r8,r8,8
 1443b4c:	843ffc04 	addi	r16,r16,-16
 1443b50:	8c3f0c0e 	bge	r17,r16,1443784 <__alt_data_end+0xfffddf84>
 1443b54:	18c00404 	addi	r3,r3,16
 1443b58:	10800044 	addi	r2,r2,1
 1443b5c:	45000015 	stw	r20,0(r8)
 1443b60:	44400115 	stw	r17,4(r8)
 1443b64:	d8c12015 	stw	r3,1152(sp)
 1443b68:	d8811f15 	stw	r2,1148(sp)
 1443b6c:	98bff60e 	bge	r19,r2,1443b48 <__alt_data_end+0xfffde348>
 1443b70:	b809883a 	mov	r4,r23
 1443b74:	b00b883a 	mov	r5,r22
 1443b78:	d9811e04 	addi	r6,sp,1144
 1443b7c:	1449a2c0 	call	1449a2c <__sprint_r>
 1443b80:	103bb21e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443b84:	d8c12017 	ldw	r3,1152(sp)
 1443b88:	d8811f17 	ldw	r2,1148(sp)
 1443b8c:	da000404 	addi	r8,sp,16
 1443b90:	003fee06 	br	1443b4c <__alt_data_end+0xfffde34c>
 1443b94:	e088703a 	and	r4,fp,r2
 1443b98:	203ec01e 	bne	r4,zero,144369c <__alt_data_end+0xfffdde9c>
 1443b9c:	dc011f17 	ldw	r16,1148(sp)
 1443ba0:	d9013117 	ldw	r4,1220(sp)
 1443ba4:	40800115 	stw	r2,4(r8)
 1443ba8:	84000044 	addi	r16,r16,1
 1443bac:	41000015 	stw	r4,0(r8)
 1443bb0:	d8c12015 	stw	r3,1152(sp)
 1443bb4:	dc011f15 	stw	r16,1148(sp)
 1443bb8:	008001c4 	movi	r2,7
 1443bbc:	14000e16 	blt	r2,r16,1443bf8 <___vfprintf_internal_r+0x160c>
 1443bc0:	44400204 	addi	r17,r8,8
 1443bc4:	003ee006 	br	1443748 <__alt_data_end+0xfffddf48>
 1443bc8:	01005174 	movhi	r4,325
 1443bcc:	2101ea84 	addi	r4,r4,1962
 1443bd0:	d9012c15 	stw	r4,1200(sp)
 1443bd4:	d8812c17 	ldw	r2,1200(sp)
 1443bd8:	1cc7883a 	add	r3,r3,r19
 1443bdc:	84000044 	addi	r16,r16,1
 1443be0:	88800015 	stw	r2,0(r17)
 1443be4:	8cc00115 	stw	r19,4(r17)
 1443be8:	d8c12015 	stw	r3,1152(sp)
 1443bec:	dc011f15 	stw	r16,1148(sp)
 1443bf0:	008001c4 	movi	r2,7
 1443bf4:	143ed30e 	bge	r2,r16,1443744 <__alt_data_end+0xfffddf44>
 1443bf8:	b809883a 	mov	r4,r23
 1443bfc:	b00b883a 	mov	r5,r22
 1443c00:	d9811e04 	addi	r6,sp,1144
 1443c04:	1449a2c0 	call	1449a2c <__sprint_r>
 1443c08:	103b901e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443c0c:	d8c12017 	ldw	r3,1152(sp)
 1443c10:	dc011f17 	ldw	r16,1148(sp)
 1443c14:	dc400404 	addi	r17,sp,16
 1443c18:	003ecb06 	br	1443748 <__alt_data_end+0xfffddf48>
 1443c1c:	b809883a 	mov	r4,r23
 1443c20:	b00b883a 	mov	r5,r22
 1443c24:	d9811e04 	addi	r6,sp,1144
 1443c28:	1449a2c0 	call	1449a2c <__sprint_r>
 1443c2c:	103b871e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443c30:	d8c12017 	ldw	r3,1152(sp)
 1443c34:	dc011f17 	ldw	r16,1148(sp)
 1443c38:	da000404 	addi	r8,sp,16
 1443c3c:	003ea206 	br	14436c8 <__alt_data_end+0xfffddec8>
 1443c40:	b809883a 	mov	r4,r23
 1443c44:	b00b883a 	mov	r5,r22
 1443c48:	d9811e04 	addi	r6,sp,1144
 1443c4c:	1449a2c0 	call	1449a2c <__sprint_r>
 1443c50:	103b7e1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443c54:	d8c12017 	ldw	r3,1152(sp)
 1443c58:	dc011f17 	ldw	r16,1148(sp)
 1443c5c:	dc400404 	addi	r17,sp,16
 1443c60:	003ea406 	br	14436f4 <__alt_data_end+0xfffddef4>
 1443c64:	b809883a 	mov	r4,r23
 1443c68:	b00b883a 	mov	r5,r22
 1443c6c:	d9811e04 	addi	r6,sp,1144
 1443c70:	1449a2c0 	call	1449a2c <__sprint_r>
 1443c74:	103b751e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443c78:	d8c12017 	ldw	r3,1152(sp)
 1443c7c:	da000404 	addi	r8,sp,16
 1443c80:	003c3706 	br	1442d60 <__alt_data_end+0xfffdd560>
 1443c84:	04a5c83a 	sub	r18,zero,r18
 1443c88:	9004c03a 	cmpne	r2,r18,zero
 1443c8c:	056bc83a 	sub	r21,zero,r21
 1443c90:	a8abc83a 	sub	r21,r21,r2
 1443c94:	04c00b44 	movi	r19,45
 1443c98:	dcc12785 	stb	r19,1182(sp)
 1443c9c:	da413215 	stw	r9,1224(sp)
 1443ca0:	00800044 	movi	r2,1
 1443ca4:	9546b03a 	or	r3,r18,r21
 1443ca8:	003bb106 	br	1442b70 <__alt_data_end+0xfffdd370>
 1443cac:	da013f15 	stw	r8,1276(sp)
 1443cb0:	da413e15 	stw	r9,1272(sp)
 1443cb4:	14496880 	call	1449688 <__fpclassifyd>
 1443cb8:	da013f17 	ldw	r8,1276(sp)
 1443cbc:	da413e17 	ldw	r9,1272(sp)
 1443cc0:	1000e526 	beq	r2,zero,1444058 <___vfprintf_internal_r+0x1a6c>
 1443cc4:	04fff7c4 	movi	r19,-33
 1443cc8:	00bfffc4 	movi	r2,-1
 1443ccc:	84e6703a 	and	r19,r16,r19
 1443cd0:	48822926 	beq	r9,r2,1444578 <___vfprintf_internal_r+0x1f8c>
 1443cd4:	008011c4 	movi	r2,71
 1443cd8:	98821626 	beq	r19,r2,1444534 <___vfprintf_internal_r+0x1f48>
 1443cdc:	d9013917 	ldw	r4,1252(sp)
 1443ce0:	e0c04014 	ori	r3,fp,256
 1443ce4:	d8c12d15 	stw	r3,1204(sp)
 1443ce8:	20021f16 	blt	r4,zero,1444568 <___vfprintf_internal_r+0x1f7c>
 1443cec:	dc413917 	ldw	r17,1252(sp)
 1443cf0:	d8012b05 	stb	zero,1196(sp)
 1443cf4:	00801984 	movi	r2,102
 1443cf8:	80814d26 	beq	r16,r2,1444230 <___vfprintf_internal_r+0x1c44>
 1443cfc:	00801184 	movi	r2,70
 1443d00:	80814b26 	beq	r16,r2,1444230 <___vfprintf_internal_r+0x1c44>
 1443d04:	00801144 	movi	r2,69
 1443d08:	98821d26 	beq	r19,r2,1444580 <___vfprintf_internal_r+0x1f94>
 1443d0c:	482b883a 	mov	r21,r9
 1443d10:	d8812604 	addi	r2,sp,1176
 1443d14:	d8800115 	stw	r2,4(sp)
 1443d18:	d9413717 	ldw	r5,1244(sp)
 1443d1c:	d8812504 	addi	r2,sp,1172
 1443d20:	d8800215 	stw	r2,8(sp)
 1443d24:	d8812104 	addi	r2,sp,1156
 1443d28:	dd400015 	stw	r21,0(sp)
 1443d2c:	d8800315 	stw	r2,12(sp)
 1443d30:	b809883a 	mov	r4,r23
 1443d34:	880d883a 	mov	r6,r17
 1443d38:	01c00084 	movi	r7,2
 1443d3c:	da013f15 	stw	r8,1276(sp)
 1443d40:	da413e15 	stw	r9,1272(sp)
 1443d44:	1444a640 	call	1444a64 <_dtoa_r>
 1443d48:	d8813115 	stw	r2,1220(sp)
 1443d4c:	008019c4 	movi	r2,103
 1443d50:	da013f17 	ldw	r8,1276(sp)
 1443d54:	da413e17 	ldw	r9,1272(sp)
 1443d58:	80800226 	beq	r16,r2,1443d64 <___vfprintf_internal_r+0x1778>
 1443d5c:	008011c4 	movi	r2,71
 1443d60:	8081451e 	bne	r16,r2,1444278 <___vfprintf_internal_r+0x1c8c>
 1443d64:	e080004c 	andi	r2,fp,1
 1443d68:	10021e26 	beq	r2,zero,14445e4 <___vfprintf_internal_r+0x1ff8>
 1443d6c:	d8c13117 	ldw	r3,1220(sp)
 1443d70:	1d55883a 	add	r10,r3,r21
 1443d74:	d9013717 	ldw	r4,1244(sp)
 1443d78:	880b883a 	mov	r5,r17
 1443d7c:	000d883a 	mov	r6,zero
 1443d80:	000f883a 	mov	r7,zero
 1443d84:	da013f15 	stw	r8,1276(sp)
 1443d88:	da413e15 	stw	r9,1272(sp)
 1443d8c:	da813d15 	stw	r10,1268(sp)
 1443d90:	144ccd00 	call	144ccd0 <__eqdf2>
 1443d94:	da013f17 	ldw	r8,1276(sp)
 1443d98:	da413e17 	ldw	r9,1272(sp)
 1443d9c:	da813d17 	ldw	r10,1268(sp)
 1443da0:	1001a126 	beq	r2,zero,1444428 <___vfprintf_internal_r+0x1e3c>
 1443da4:	d8812117 	ldw	r2,1156(sp)
 1443da8:	1280062e 	bgeu	r2,r10,1443dc4 <___vfprintf_internal_r+0x17d8>
 1443dac:	01000c04 	movi	r4,48
 1443db0:	10c00044 	addi	r3,r2,1
 1443db4:	d8c12115 	stw	r3,1156(sp)
 1443db8:	11000005 	stb	r4,0(r2)
 1443dbc:	d8812117 	ldw	r2,1156(sp)
 1443dc0:	12bffb36 	bltu	r2,r10,1443db0 <__alt_data_end+0xfffde5b0>
 1443dc4:	d8c13117 	ldw	r3,1220(sp)
 1443dc8:	10c5c83a 	sub	r2,r2,r3
 1443dcc:	d8813315 	stw	r2,1228(sp)
 1443dd0:	008011c4 	movi	r2,71
 1443dd4:	98818926 	beq	r19,r2,14443fc <___vfprintf_internal_r+0x1e10>
 1443dd8:	00801944 	movi	r2,101
 1443ddc:	14023c0e 	bge	r2,r16,14446d0 <___vfprintf_internal_r+0x20e4>
 1443de0:	d8c12617 	ldw	r3,1176(sp)
 1443de4:	00801984 	movi	r2,102
 1443de8:	d8c13415 	stw	r3,1232(sp)
 1443dec:	8081ef26 	beq	r16,r2,14445ac <___vfprintf_internal_r+0x1fc0>
 1443df0:	d8c13417 	ldw	r3,1232(sp)
 1443df4:	d9013317 	ldw	r4,1228(sp)
 1443df8:	1901e316 	blt	r3,r4,1444588 <___vfprintf_internal_r+0x1f9c>
 1443dfc:	e080004c 	andi	r2,fp,1
 1443e00:	1001f426 	beq	r2,zero,14445d4 <___vfprintf_internal_r+0x1fe8>
 1443e04:	d8c13417 	ldw	r3,1232(sp)
 1443e08:	1c400044 	addi	r17,r3,1
 1443e0c:	8839883a 	mov	fp,r17
 1443e10:	8801e416 	blt	r17,zero,14445a4 <___vfprintf_internal_r+0x1fb8>
 1443e14:	dd412b07 	ldb	r21,1196(sp)
 1443e18:	a801701e 	bne	r21,zero,14443dc <___vfprintf_internal_r+0x1df0>
 1443e1c:	df012b15 	stw	fp,1196(sp)
 1443e20:	dcc12783 	ldbu	r19,1182(sp)
 1443e24:	df012d17 	ldw	fp,1204(sp)
 1443e28:	d8013215 	stw	zero,1224(sp)
 1443e2c:	dc812d15 	stw	r18,1204(sp)
 1443e30:	003b6e06 	br	1442bec <__alt_data_end+0xfffdd3ec>
 1443e34:	e080040c 	andi	r2,fp,16
 1443e38:	1000b51e 	bne	r2,zero,1444110 <___vfprintf_internal_r+0x1b24>
 1443e3c:	e080100c 	andi	r2,fp,64
 1443e40:	10015b26 	beq	r2,zero,14443b0 <___vfprintf_internal_r+0x1dc4>
 1443e44:	d9012d17 	ldw	r4,1204(sp)
 1443e48:	d9412f17 	ldw	r5,1212(sp)
 1443e4c:	20800017 	ldw	r2,0(r4)
 1443e50:	21000104 	addi	r4,r4,4
 1443e54:	d9012d15 	stw	r4,1204(sp)
 1443e58:	1140000d 	sth	r5,0(r2)
 1443e5c:	003a2006 	br	14426e0 <__alt_data_end+0xfffdcee0>
 1443e60:	e0c0100c 	andi	r3,fp,64
 1443e64:	1800a226 	beq	r3,zero,14440f0 <___vfprintf_internal_r+0x1b04>
 1443e68:	d8c12d17 	ldw	r3,1204(sp)
 1443e6c:	1480000b 	ldhu	r18,0(r2)
 1443e70:	002b883a 	mov	r21,zero
 1443e74:	18c00104 	addi	r3,r3,4
 1443e78:	d8c12d15 	stw	r3,1204(sp)
 1443e7c:	0005883a 	mov	r2,zero
 1443e80:	9007883a 	mov	r3,r18
 1443e84:	003c6906 	br	144302c <__alt_data_end+0xfffdd82c>
 1443e88:	e0c0100c 	andi	r3,fp,64
 1443e8c:	18009026 	beq	r3,zero,14440d0 <___vfprintf_internal_r+0x1ae4>
 1443e90:	1480000b 	ldhu	r18,0(r2)
 1443e94:	d8812d17 	ldw	r2,1204(sp)
 1443e98:	002b883a 	mov	r21,zero
 1443e9c:	9007883a 	mov	r3,r18
 1443ea0:	10800104 	addi	r2,r2,4
 1443ea4:	d8812d15 	stw	r2,1204(sp)
 1443ea8:	00800044 	movi	r2,1
 1443eac:	003c5f06 	br	144302c <__alt_data_end+0xfffdd82c>
 1443eb0:	e0c0100c 	andi	r3,fp,64
 1443eb4:	18008026 	beq	r3,zero,14440b8 <___vfprintf_internal_r+0x1acc>
 1443eb8:	d9012d17 	ldw	r4,1204(sp)
 1443ebc:	1480000b 	ldhu	r18,0(r2)
 1443ec0:	002b883a 	mov	r21,zero
 1443ec4:	21000104 	addi	r4,r4,4
 1443ec8:	d9012d15 	stw	r4,1204(sp)
 1443ecc:	003c7906 	br	14430b4 <__alt_data_end+0xfffdd8b4>
 1443ed0:	e080100c 	andi	r2,fp,64
 1443ed4:	10007126 	beq	r2,zero,144409c <___vfprintf_internal_r+0x1ab0>
 1443ed8:	1c80000f 	ldh	r18,0(r3)
 1443edc:	d8812d17 	ldw	r2,1204(sp)
 1443ee0:	902bd7fa 	srai	r21,r18,31
 1443ee4:	10800104 	addi	r2,r2,4
 1443ee8:	d8812d15 	stw	r2,1204(sp)
 1443eec:	a805883a 	mov	r2,r21
 1443ef0:	003b1a06 	br	1442b5c <__alt_data_end+0xfffdd35c>
 1443ef4:	e4000007 	ldb	r16,0(fp)
 1443ef8:	e005883a 	mov	r2,fp
 1443efc:	003a2306 	br	144278c <__alt_data_end+0xfffdcf8c>
 1443f00:	00800084 	movi	r2,2
 1443f04:	003c4906 	br	144302c <__alt_data_end+0xfffdd82c>
 1443f08:	01005174 	movhi	r4,325
 1443f0c:	2101ea84 	addi	r4,r4,1962
 1443f10:	d9012c15 	stw	r4,1200(sp)
 1443f14:	d9012c17 	ldw	r4,1200(sp)
 1443f18:	1c47883a 	add	r3,r3,r17
 1443f1c:	10800044 	addi	r2,r2,1
 1443f20:	41000015 	stw	r4,0(r8)
 1443f24:	44400115 	stw	r17,4(r8)
 1443f28:	d8c12015 	stw	r3,1152(sp)
 1443f2c:	d8811f15 	stw	r2,1148(sp)
 1443f30:	010001c4 	movi	r4,7
 1443f34:	20becc16 	blt	r4,r2,1443a68 <__alt_data_end+0xfffde268>
 1443f38:	42000204 	addi	r8,r8,8
 1443f3c:	003ed106 	br	1443a84 <__alt_data_end+0xfffde284>
 1443f40:	01005174 	movhi	r4,325
 1443f44:	2101ea84 	addi	r4,r4,1962
 1443f48:	d9012c15 	stw	r4,1200(sp)
 1443f4c:	003ba306 	br	1442ddc <__alt_data_end+0xfffdd5dc>
 1443f50:	b809883a 	mov	r4,r23
 1443f54:	b00b883a 	mov	r5,r22
 1443f58:	d9811e04 	addi	r6,sp,1144
 1443f5c:	1449a2c0 	call	1449a2c <__sprint_r>
 1443f60:	103aba1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1443f64:	d8c12017 	ldw	r3,1152(sp)
 1443f68:	da000404 	addi	r8,sp,16
 1443f6c:	003d6c06 	br	1443520 <__alt_data_end+0xfffddd20>
 1443f70:	d8811f17 	ldw	r2,1148(sp)
 1443f74:	01405174 	movhi	r5,325
 1443f78:	01000044 	movi	r4,1
 1443f7c:	18c00044 	addi	r3,r3,1
 1443f80:	10800044 	addi	r2,r2,1
 1443f84:	2941ea04 	addi	r5,r5,1960
 1443f88:	41000115 	stw	r4,4(r8)
 1443f8c:	41400015 	stw	r5,0(r8)
 1443f90:	d8c12015 	stw	r3,1152(sp)
 1443f94:	d8811f15 	stw	r2,1148(sp)
 1443f98:	010001c4 	movi	r4,7
 1443f9c:	20806716 	blt	r4,r2,144413c <___vfprintf_internal_r+0x1b50>
 1443fa0:	42000204 	addi	r8,r8,8
 1443fa4:	8000041e 	bne	r16,zero,1443fb8 <___vfprintf_internal_r+0x19cc>
 1443fa8:	d8813317 	ldw	r2,1228(sp)
 1443fac:	1000021e 	bne	r2,zero,1443fb8 <___vfprintf_internal_r+0x19cc>
 1443fb0:	e080004c 	andi	r2,fp,1
 1443fb4:	103ba026 	beq	r2,zero,1442e38 <__alt_data_end+0xfffdd638>
 1443fb8:	d9013817 	ldw	r4,1248(sp)
 1443fbc:	d8811f17 	ldw	r2,1148(sp)
 1443fc0:	d9413517 	ldw	r5,1236(sp)
 1443fc4:	1907883a 	add	r3,r3,r4
 1443fc8:	10800044 	addi	r2,r2,1
 1443fcc:	41000115 	stw	r4,4(r8)
 1443fd0:	41400015 	stw	r5,0(r8)
 1443fd4:	d8c12015 	stw	r3,1152(sp)
 1443fd8:	d8811f15 	stw	r2,1148(sp)
 1443fdc:	010001c4 	movi	r4,7
 1443fe0:	20815716 	blt	r4,r2,1444540 <___vfprintf_internal_r+0x1f54>
 1443fe4:	42000204 	addi	r8,r8,8
 1443fe8:	0421c83a 	sub	r16,zero,r16
 1443fec:	0400810e 	bge	zero,r16,14441f4 <___vfprintf_internal_r+0x1c08>
 1443ff0:	04400404 	movi	r17,16
 1443ff4:	8c00bd0e 	bge	r17,r16,14442ec <___vfprintf_internal_r+0x1d00>
 1443ff8:	01405174 	movhi	r5,325
 1443ffc:	2941ea84 	addi	r5,r5,1962
 1444000:	d9412c15 	stw	r5,1200(sp)
 1444004:	04c001c4 	movi	r19,7
 1444008:	00000306 	br	1444018 <___vfprintf_internal_r+0x1a2c>
 144400c:	42000204 	addi	r8,r8,8
 1444010:	843ffc04 	addi	r16,r16,-16
 1444014:	8c00b80e 	bge	r17,r16,14442f8 <___vfprintf_internal_r+0x1d0c>
 1444018:	18c00404 	addi	r3,r3,16
 144401c:	10800044 	addi	r2,r2,1
 1444020:	45000015 	stw	r20,0(r8)
 1444024:	44400115 	stw	r17,4(r8)
 1444028:	d8c12015 	stw	r3,1152(sp)
 144402c:	d8811f15 	stw	r2,1148(sp)
 1444030:	98bff60e 	bge	r19,r2,144400c <__alt_data_end+0xfffde80c>
 1444034:	b809883a 	mov	r4,r23
 1444038:	b00b883a 	mov	r5,r22
 144403c:	d9811e04 	addi	r6,sp,1144
 1444040:	1449a2c0 	call	1449a2c <__sprint_r>
 1444044:	103a811e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1444048:	d8c12017 	ldw	r3,1152(sp)
 144404c:	d8811f17 	ldw	r2,1148(sp)
 1444050:	da000404 	addi	r8,sp,16
 1444054:	003fee06 	br	1444010 <__alt_data_end+0xfffde810>
 1444058:	008011c4 	movi	r2,71
 144405c:	1400db16 	blt	r2,r16,14443cc <___vfprintf_internal_r+0x1de0>
 1444060:	01005174 	movhi	r4,325
 1444064:	2101dc04 	addi	r4,r4,1904
 1444068:	d9013115 	stw	r4,1220(sp)
 144406c:	00c000c4 	movi	r3,3
 1444070:	00bfdfc4 	movi	r2,-129
 1444074:	d8c12b15 	stw	r3,1196(sp)
 1444078:	e0b8703a 	and	fp,fp,r2
 144407c:	dcc12783 	ldbu	r19,1182(sp)
 1444080:	dc812d15 	stw	r18,1204(sp)
 1444084:	1823883a 	mov	r17,r3
 1444088:	d8013215 	stw	zero,1224(sp)
 144408c:	d8013415 	stw	zero,1232(sp)
 1444090:	003ad606 	br	1442bec <__alt_data_end+0xfffdd3ec>
 1444094:	4823883a 	mov	r17,r9
 1444098:	003cc906 	br	14433c0 <__alt_data_end+0xfffddbc0>
 144409c:	1c800017 	ldw	r18,0(r3)
 14440a0:	d8c12d17 	ldw	r3,1204(sp)
 14440a4:	902bd7fa 	srai	r21,r18,31
 14440a8:	18c00104 	addi	r3,r3,4
 14440ac:	d8c12d15 	stw	r3,1204(sp)
 14440b0:	a805883a 	mov	r2,r21
 14440b4:	003aa906 	br	1442b5c <__alt_data_end+0xfffdd35c>
 14440b8:	d9412d17 	ldw	r5,1204(sp)
 14440bc:	14800017 	ldw	r18,0(r2)
 14440c0:	002b883a 	mov	r21,zero
 14440c4:	29400104 	addi	r5,r5,4
 14440c8:	d9412d15 	stw	r5,1204(sp)
 14440cc:	003bf906 	br	14430b4 <__alt_data_end+0xfffdd8b4>
 14440d0:	d8c12d17 	ldw	r3,1204(sp)
 14440d4:	14800017 	ldw	r18,0(r2)
 14440d8:	002b883a 	mov	r21,zero
 14440dc:	18c00104 	addi	r3,r3,4
 14440e0:	d8c12d15 	stw	r3,1204(sp)
 14440e4:	00800044 	movi	r2,1
 14440e8:	9007883a 	mov	r3,r18
 14440ec:	003bcf06 	br	144302c <__alt_data_end+0xfffdd82c>
 14440f0:	d9012d17 	ldw	r4,1204(sp)
 14440f4:	14800017 	ldw	r18,0(r2)
 14440f8:	002b883a 	mov	r21,zero
 14440fc:	21000104 	addi	r4,r4,4
 1444100:	d9012d15 	stw	r4,1204(sp)
 1444104:	0005883a 	mov	r2,zero
 1444108:	9007883a 	mov	r3,r18
 144410c:	003bc706 	br	144302c <__alt_data_end+0xfffdd82c>
 1444110:	d9412d17 	ldw	r5,1204(sp)
 1444114:	d8c12f17 	ldw	r3,1212(sp)
 1444118:	28800017 	ldw	r2,0(r5)
 144411c:	29400104 	addi	r5,r5,4
 1444120:	d9412d15 	stw	r5,1204(sp)
 1444124:	10c00015 	stw	r3,0(r2)
 1444128:	00396d06 	br	14426e0 <__alt_data_end+0xfffdcee0>
 144412c:	01005174 	movhi	r4,325
 1444130:	2101da04 	addi	r4,r4,1896
 1444134:	d9013115 	stw	r4,1220(sp)
 1444138:	003ba206 	br	1442fc4 <__alt_data_end+0xfffdd7c4>
 144413c:	b809883a 	mov	r4,r23
 1444140:	b00b883a 	mov	r5,r22
 1444144:	d9811e04 	addi	r6,sp,1144
 1444148:	1449a2c0 	call	1449a2c <__sprint_r>
 144414c:	103a3f1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1444150:	dc012617 	ldw	r16,1176(sp)
 1444154:	d8c12017 	ldw	r3,1152(sp)
 1444158:	da000404 	addi	r8,sp,16
 144415c:	003f9106 	br	1443fa4 <__alt_data_end+0xfffde7a4>
 1444160:	e0800044 	addi	r2,fp,1
 1444164:	9cc00814 	ori	r19,r19,32
 1444168:	e4000047 	ldb	r16,1(fp)
 144416c:	00398706 	br	144278c <__alt_data_end+0xfffdcf8c>
 1444170:	d8812e17 	ldw	r2,1208(sp)
 1444174:	d8c12d15 	stw	r3,1204(sp)
 1444178:	0085c83a 	sub	r2,zero,r2
 144417c:	d8812e15 	stw	r2,1208(sp)
 1444180:	e005883a 	mov	r2,fp
 1444184:	003a3a06 	br	1442a70 <__alt_data_end+0xfffdd270>
 1444188:	b809883a 	mov	r4,r23
 144418c:	b00b883a 	mov	r5,r22
 1444190:	d9811e04 	addi	r6,sp,1144
 1444194:	1449a2c0 	call	1449a2c <__sprint_r>
 1444198:	103a2c1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 144419c:	d8c12017 	ldw	r3,1152(sp)
 14441a0:	da000404 	addi	r8,sp,16
 14441a4:	003cf006 	br	1443568 <__alt_data_end+0xfffddd68>
 14441a8:	d8c12817 	ldw	r3,1184(sp)
 14441ac:	d9013117 	ldw	r4,1220(sp)
 14441b0:	1923c83a 	sub	r17,r3,r4
 14441b4:	003a8806 	br	1442bd8 <__alt_data_end+0xfffdd3d8>
 14441b8:	da013f15 	stw	r8,1276(sp)
 14441bc:	14425540 	call	1442554 <strlen>
 14441c0:	1023883a 	mov	r17,r2
 14441c4:	da013f17 	ldw	r8,1276(sp)
 14441c8:	883c7f0e 	bge	r17,zero,14433c8 <__alt_data_end+0xfffddbc8>
 14441cc:	0005883a 	mov	r2,zero
 14441d0:	003c7d06 	br	14433c8 <__alt_data_end+0xfffddbc8>
 14441d4:	b809883a 	mov	r4,r23
 14441d8:	b00b883a 	mov	r5,r22
 14441dc:	d9811e04 	addi	r6,sp,1144
 14441e0:	1449a2c0 	call	1449a2c <__sprint_r>
 14441e4:	103a191e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14441e8:	d8c12017 	ldw	r3,1152(sp)
 14441ec:	d8811f17 	ldw	r2,1148(sp)
 14441f0:	da000404 	addi	r8,sp,16
 14441f4:	d9413317 	ldw	r5,1228(sp)
 14441f8:	d9013117 	ldw	r4,1220(sp)
 14441fc:	10800044 	addi	r2,r2,1
 1444200:	28c7883a 	add	r3,r5,r3
 1444204:	41000015 	stw	r4,0(r8)
 1444208:	41400115 	stw	r5,4(r8)
 144420c:	d8c12015 	stw	r3,1152(sp)
 1444210:	d8811f15 	stw	r2,1148(sp)
 1444214:	010001c4 	movi	r4,7
 1444218:	20bb060e 	bge	r4,r2,1442e34 <__alt_data_end+0xfffdd634>
 144421c:	003d6206 	br	14437a8 <__alt_data_end+0xfffddfa8>
 1444220:	01005174 	movhi	r4,325
 1444224:	2101ee84 	addi	r4,r4,1978
 1444228:	d9013615 	stw	r4,1240(sp)
 144422c:	003aa306 	br	1442cbc <__alt_data_end+0xfffdd4bc>
 1444230:	d8812604 	addi	r2,sp,1176
 1444234:	d8800115 	stw	r2,4(sp)
 1444238:	d9413717 	ldw	r5,1244(sp)
 144423c:	d8812504 	addi	r2,sp,1172
 1444240:	d8800215 	stw	r2,8(sp)
 1444244:	d8812104 	addi	r2,sp,1156
 1444248:	da400015 	stw	r9,0(sp)
 144424c:	d8800315 	stw	r2,12(sp)
 1444250:	b809883a 	mov	r4,r23
 1444254:	880d883a 	mov	r6,r17
 1444258:	01c000c4 	movi	r7,3
 144425c:	da013f15 	stw	r8,1276(sp)
 1444260:	da413e15 	stw	r9,1272(sp)
 1444264:	1444a640 	call	1444a64 <_dtoa_r>
 1444268:	da413e17 	ldw	r9,1272(sp)
 144426c:	da013f17 	ldw	r8,1276(sp)
 1444270:	d8813115 	stw	r2,1220(sp)
 1444274:	482b883a 	mov	r21,r9
 1444278:	d8c13117 	ldw	r3,1220(sp)
 144427c:	00801184 	movi	r2,70
 1444280:	1d55883a 	add	r10,r3,r21
 1444284:	98bebb1e 	bne	r19,r2,1443d74 <__alt_data_end+0xfffde574>
 1444288:	19000007 	ldb	r4,0(r3)
 144428c:	00800c04 	movi	r2,48
 1444290:	2080dd26 	beq	r4,r2,1444608 <___vfprintf_internal_r+0x201c>
 1444294:	d8c12617 	ldw	r3,1176(sp)
 1444298:	50d5883a 	add	r10,r10,r3
 144429c:	003eb506 	br	1443d74 <__alt_data_end+0xfffde574>
 14442a0:	0023883a 	mov	r17,zero
 14442a4:	003d9b06 	br	1443914 <__alt_data_end+0xfffde114>
 14442a8:	b809883a 	mov	r4,r23
 14442ac:	b00b883a 	mov	r5,r22
 14442b0:	d9811e04 	addi	r6,sp,1144
 14442b4:	1449a2c0 	call	1449a2c <__sprint_r>
 14442b8:	1039e41e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14442bc:	d8c12017 	ldw	r3,1152(sp)
 14442c0:	da000404 	addi	r8,sp,16
 14442c4:	003d9206 	br	1443910 <__alt_data_end+0xfffde110>
 14442c8:	b809883a 	mov	r4,r23
 14442cc:	b00b883a 	mov	r5,r22
 14442d0:	d9811e04 	addi	r6,sp,1144
 14442d4:	1449a2c0 	call	1449a2c <__sprint_r>
 14442d8:	1039dc1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 14442dc:	d8812617 	ldw	r2,1176(sp)
 14442e0:	d8c12017 	ldw	r3,1152(sp)
 14442e4:	da000404 	addi	r8,sp,16
 14442e8:	003dfb06 	br	1443ad8 <__alt_data_end+0xfffde2d8>
 14442ec:	01005174 	movhi	r4,325
 14442f0:	2101ea84 	addi	r4,r4,1962
 14442f4:	d9012c15 	stw	r4,1200(sp)
 14442f8:	d9012c17 	ldw	r4,1200(sp)
 14442fc:	1c07883a 	add	r3,r3,r16
 1444300:	10800044 	addi	r2,r2,1
 1444304:	41000015 	stw	r4,0(r8)
 1444308:	44000115 	stw	r16,4(r8)
 144430c:	d8c12015 	stw	r3,1152(sp)
 1444310:	d8811f15 	stw	r2,1148(sp)
 1444314:	010001c4 	movi	r4,7
 1444318:	20bfae16 	blt	r4,r2,14441d4 <__alt_data_end+0xfffde9d4>
 144431c:	42000204 	addi	r8,r8,8
 1444320:	003fb406 	br	14441f4 <__alt_data_end+0xfffde9f4>
 1444324:	0021883a 	mov	r16,zero
 1444328:	003dfd06 	br	1443b20 <__alt_data_end+0xfffde320>
 144432c:	01405174 	movhi	r5,325
 1444330:	2941ee84 	addi	r5,r5,1978
 1444334:	d9413615 	stw	r5,1240(sp)
 1444338:	003ae306 	br	1442ec8 <__alt_data_end+0xfffdd6c8>
 144433c:	b809883a 	mov	r4,r23
 1444340:	b00b883a 	mov	r5,r22
 1444344:	d9811e04 	addi	r6,sp,1144
 1444348:	1449a2c0 	call	1449a2c <__sprint_r>
 144434c:	1039bf1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1444350:	d8812617 	ldw	r2,1176(sp)
 1444354:	d9413317 	ldw	r5,1228(sp)
 1444358:	d8c12017 	ldw	r3,1152(sp)
 144435c:	da000404 	addi	r8,sp,16
 1444360:	2885c83a 	sub	r2,r5,r2
 1444364:	003ded06 	br	1443b1c <__alt_data_end+0xfffde31c>
 1444368:	00800184 	movi	r2,6
 144436c:	1240012e 	bgeu	r2,r9,1444374 <___vfprintf_internal_r+0x1d88>
 1444370:	1013883a 	mov	r9,r2
 1444374:	4823883a 	mov	r17,r9
 1444378:	4805883a 	mov	r2,r9
 144437c:	4800b216 	blt	r9,zero,1444648 <___vfprintf_internal_r+0x205c>
 1444380:	01405174 	movhi	r5,325
 1444384:	2941e804 	addi	r5,r5,1952
 1444388:	d8812b15 	stw	r2,1196(sp)
 144438c:	dc812d15 	stw	r18,1204(sp)
 1444390:	d8013215 	stw	zero,1224(sp)
 1444394:	d8013415 	stw	zero,1232(sp)
 1444398:	d9413115 	stw	r5,1220(sp)
 144439c:	0005883a 	mov	r2,zero
 14443a0:	003a1906 	br	1442c08 <__alt_data_end+0xfffdd408>
 14443a4:	04c00b44 	movi	r19,45
 14443a8:	dcc12785 	stb	r19,1182(sp)
 14443ac:	003b0006 	br	1442fb0 <__alt_data_end+0xfffdd7b0>
 14443b0:	d8c12d17 	ldw	r3,1204(sp)
 14443b4:	d9012f17 	ldw	r4,1212(sp)
 14443b8:	18800017 	ldw	r2,0(r3)
 14443bc:	18c00104 	addi	r3,r3,4
 14443c0:	d8c12d15 	stw	r3,1204(sp)
 14443c4:	11000015 	stw	r4,0(r2)
 14443c8:	0038c506 	br	14426e0 <__alt_data_end+0xfffdcee0>
 14443cc:	01405174 	movhi	r5,325
 14443d0:	2941dd04 	addi	r5,r5,1908
 14443d4:	d9413115 	stw	r5,1220(sp)
 14443d8:	003f2406 	br	144406c <__alt_data_end+0xfffde86c>
 14443dc:	00800b44 	movi	r2,45
 14443e0:	d8812785 	stb	r2,1182(sp)
 14443e4:	df012b15 	stw	fp,1196(sp)
 14443e8:	d8013215 	stw	zero,1224(sp)
 14443ec:	df012d17 	ldw	fp,1204(sp)
 14443f0:	00800b44 	movi	r2,45
 14443f4:	dc812d15 	stw	r18,1204(sp)
 14443f8:	003a0006 	br	1442bfc <__alt_data_end+0xfffdd3fc>
 14443fc:	d8c12617 	ldw	r3,1176(sp)
 1444400:	00bfff44 	movi	r2,-3
 1444404:	18800a16 	blt	r3,r2,1444430 <___vfprintf_internal_r+0x1e44>
 1444408:	48c00916 	blt	r9,r3,1444430 <___vfprintf_internal_r+0x1e44>
 144440c:	d8c13415 	stw	r3,1232(sp)
 1444410:	040019c4 	movi	r16,103
 1444414:	003e7606 	br	1443df0 <__alt_data_end+0xfffde5f0>
 1444418:	01005174 	movhi	r4,325
 144441c:	2101ea84 	addi	r4,r4,1962
 1444420:	d9012c15 	stw	r4,1200(sp)
 1444424:	003c8e06 	br	1443660 <__alt_data_end+0xfffdde60>
 1444428:	5005883a 	mov	r2,r10
 144442c:	003e6506 	br	1443dc4 <__alt_data_end+0xfffde5c4>
 1444430:	843fff84 	addi	r16,r16,-2
 1444434:	1d7fffc4 	addi	r21,r3,-1
 1444438:	dd412615 	stw	r21,1176(sp)
 144443c:	dc0122c5 	stb	r16,1163(sp)
 1444440:	a8009216 	blt	r21,zero,144468c <___vfprintf_internal_r+0x20a0>
 1444444:	00800ac4 	movi	r2,43
 1444448:	d8812305 	stb	r2,1164(sp)
 144444c:	00800244 	movi	r2,9
 1444450:	1540660e 	bge	r2,r21,14445ec <___vfprintf_internal_r+0x2000>
 1444454:	dcc122c4 	addi	r19,sp,1163
 1444458:	dc012c15 	stw	r16,1200(sp)
 144445c:	4023883a 	mov	r17,r8
 1444460:	9821883a 	mov	r16,r19
 1444464:	a809883a 	mov	r4,r21
 1444468:	01400284 	movi	r5,10
 144446c:	144238c0 	call	144238c <__modsi3>
 1444470:	10800c04 	addi	r2,r2,48
 1444474:	843fffc4 	addi	r16,r16,-1
 1444478:	a809883a 	mov	r4,r21
 144447c:	01400284 	movi	r5,10
 1444480:	80800005 	stb	r2,0(r16)
 1444484:	14423380 	call	1442338 <__divsi3>
 1444488:	01000244 	movi	r4,9
 144448c:	102b883a 	mov	r21,r2
 1444490:	20bff416 	blt	r4,r2,1444464 <__alt_data_end+0xfffdec64>
 1444494:	8811883a 	mov	r8,r17
 1444498:	10800c04 	addi	r2,r2,48
 144449c:	8023883a 	mov	r17,r16
 14444a0:	897fffc4 	addi	r5,r17,-1
 14444a4:	88bfffc5 	stb	r2,-1(r17)
 14444a8:	dc012c17 	ldw	r16,1200(sp)
 14444ac:	2cc08a2e 	bgeu	r5,r19,14446d8 <___vfprintf_internal_r+0x20ec>
 14444b0:	d9812384 	addi	r6,sp,1166
 14444b4:	344dc83a 	sub	r6,r6,r17
 14444b8:	d9012344 	addi	r4,sp,1165
 14444bc:	998d883a 	add	r6,r19,r6
 14444c0:	00000106 	br	14444c8 <___vfprintf_internal_r+0x1edc>
 14444c4:	28800003 	ldbu	r2,0(r5)
 14444c8:	20800005 	stb	r2,0(r4)
 14444cc:	21000044 	addi	r4,r4,1
 14444d0:	29400044 	addi	r5,r5,1
 14444d4:	21bffb1e 	bne	r4,r6,14444c4 <__alt_data_end+0xfffdecc4>
 14444d8:	d8812304 	addi	r2,sp,1164
 14444dc:	1445c83a 	sub	r2,r2,r17
 14444e0:	d9412344 	addi	r5,sp,1165
 14444e4:	2885883a 	add	r2,r5,r2
 14444e8:	14e7c83a 	sub	r19,r2,r19
 14444ec:	d8813317 	ldw	r2,1228(sp)
 14444f0:	d8c13317 	ldw	r3,1228(sp)
 14444f4:	dcc13a15 	stw	r19,1256(sp)
 14444f8:	14e3883a 	add	r17,r2,r19
 14444fc:	00800044 	movi	r2,1
 1444500:	10c0550e 	bge	r2,r3,1444658 <___vfprintf_internal_r+0x206c>
 1444504:	8c400044 	addi	r17,r17,1
 1444508:	8839883a 	mov	fp,r17
 144450c:	88005016 	blt	r17,zero,1444650 <___vfprintf_internal_r+0x2064>
 1444510:	d8013415 	stw	zero,1232(sp)
 1444514:	003e3f06 	br	1443e14 <__alt_data_end+0xfffde614>
 1444518:	da412b15 	stw	r9,1196(sp)
 144451c:	dcc12783 	ldbu	r19,1182(sp)
 1444520:	4823883a 	mov	r17,r9
 1444524:	dc812d15 	stw	r18,1204(sp)
 1444528:	d8013215 	stw	zero,1224(sp)
 144452c:	d8013415 	stw	zero,1232(sp)
 1444530:	0039ae06 	br	1442bec <__alt_data_end+0xfffdd3ec>
 1444534:	483de91e 	bne	r9,zero,1443cdc <__alt_data_end+0xfffde4dc>
 1444538:	8813883a 	mov	r9,r17
 144453c:	003de706 	br	1443cdc <__alt_data_end+0xfffde4dc>
 1444540:	b809883a 	mov	r4,r23
 1444544:	b00b883a 	mov	r5,r22
 1444548:	d9811e04 	addi	r6,sp,1144
 144454c:	1449a2c0 	call	1449a2c <__sprint_r>
 1444550:	10393e1e 	bne	r2,zero,1442a4c <__alt_data_end+0xfffdd24c>
 1444554:	dc012617 	ldw	r16,1176(sp)
 1444558:	d8c12017 	ldw	r3,1152(sp)
 144455c:	d8811f17 	ldw	r2,1148(sp)
 1444560:	da000404 	addi	r8,sp,16
 1444564:	003ea006 	br	1443fe8 <__alt_data_end+0xfffde7e8>
 1444568:	00c00b44 	movi	r3,45
 144456c:	2460003c 	xorhi	r17,r4,32768
 1444570:	d8c12b05 	stb	r3,1196(sp)
 1444574:	003ddf06 	br	1443cf4 <__alt_data_end+0xfffde4f4>
 1444578:	02400184 	movi	r9,6
 144457c:	003dd706 	br	1443cdc <__alt_data_end+0xfffde4dc>
 1444580:	4d400044 	addi	r21,r9,1
 1444584:	003de206 	br	1443d10 <__alt_data_end+0xfffde510>
 1444588:	d8c13417 	ldw	r3,1232(sp)
 144458c:	00c0490e 	bge	zero,r3,14446b4 <___vfprintf_internal_r+0x20c8>
 1444590:	04400044 	movi	r17,1
 1444594:	d9013317 	ldw	r4,1228(sp)
 1444598:	8923883a 	add	r17,r17,r4
 144459c:	8839883a 	mov	fp,r17
 14445a0:	883e1c0e 	bge	r17,zero,1443e14 <__alt_data_end+0xfffde614>
 14445a4:	0039883a 	mov	fp,zero
 14445a8:	003e1a06 	br	1443e14 <__alt_data_end+0xfffde614>
 14445ac:	00c03b0e 	bge	zero,r3,144469c <___vfprintf_internal_r+0x20b0>
 14445b0:	4800021e 	bne	r9,zero,14445bc <___vfprintf_internal_r+0x1fd0>
 14445b4:	e080004c 	andi	r2,fp,1
 14445b8:	10000626 	beq	r2,zero,14445d4 <___vfprintf_internal_r+0x1fe8>
 14445bc:	d8c13417 	ldw	r3,1232(sp)
 14445c0:	4a400044 	addi	r9,r9,1
 14445c4:	1a63883a 	add	r17,r3,r9
 14445c8:	8839883a 	mov	fp,r17
 14445cc:	883e110e 	bge	r17,zero,1443e14 <__alt_data_end+0xfffde614>
 14445d0:	003ff406 	br	14445a4 <__alt_data_end+0xfffdeda4>
 14445d4:	1839883a 	mov	fp,r3
 14445d8:	18004116 	blt	r3,zero,14446e0 <___vfprintf_internal_r+0x20f4>
 14445dc:	dc413417 	ldw	r17,1232(sp)
 14445e0:	003e0c06 	br	1443e14 <__alt_data_end+0xfffde614>
 14445e4:	d8812117 	ldw	r2,1156(sp)
 14445e8:	003df606 	br	1443dc4 <__alt_data_end+0xfffde5c4>
 14445ec:	00800c04 	movi	r2,48
 14445f0:	a8c00c04 	addi	r3,r21,48
 14445f4:	d8812345 	stb	r2,1165(sp)
 14445f8:	d8c12385 	stb	r3,1166(sp)
 14445fc:	d88123c4 	addi	r2,sp,1167
 1444600:	dcc122c4 	addi	r19,sp,1163
 1444604:	003fb806 	br	14444e8 <__alt_data_end+0xfffdece8>
 1444608:	d9013717 	ldw	r4,1244(sp)
 144460c:	880b883a 	mov	r5,r17
 1444610:	000d883a 	mov	r6,zero
 1444614:	000f883a 	mov	r7,zero
 1444618:	da013f15 	stw	r8,1276(sp)
 144461c:	da413e15 	stw	r9,1272(sp)
 1444620:	da813d15 	stw	r10,1268(sp)
 1444624:	144ccd00 	call	144ccd0 <__eqdf2>
 1444628:	da013f17 	ldw	r8,1276(sp)
 144462c:	da413e17 	ldw	r9,1272(sp)
 1444630:	da813d17 	ldw	r10,1268(sp)
 1444634:	103f1726 	beq	r2,zero,1444294 <__alt_data_end+0xfffdea94>
 1444638:	00800044 	movi	r2,1
 144463c:	1547c83a 	sub	r3,r2,r21
 1444640:	d8c12615 	stw	r3,1176(sp)
 1444644:	003f1406 	br	1444298 <__alt_data_end+0xfffdea98>
 1444648:	0005883a 	mov	r2,zero
 144464c:	003f4c06 	br	1444380 <__alt_data_end+0xfffdeb80>
 1444650:	0039883a 	mov	fp,zero
 1444654:	003fae06 	br	1444510 <__alt_data_end+0xfffded10>
 1444658:	e084703a 	and	r2,fp,r2
 144465c:	103faa26 	beq	r2,zero,1444508 <__alt_data_end+0xfffded08>
 1444660:	003fa806 	br	1444504 <__alt_data_end+0xfffded04>
 1444664:	d9412d17 	ldw	r5,1204(sp)
 1444668:	2a400017 	ldw	r9,0(r5)
 144466c:	28c00104 	addi	r3,r5,4
 1444670:	d8c12d15 	stw	r3,1204(sp)
 1444674:	483ebc0e 	bge	r9,zero,1444168 <__alt_data_end+0xfffde968>
 1444678:	027fffc4 	movi	r9,-1
 144467c:	e4000047 	ldb	r16,1(fp)
 1444680:	00384206 	br	144278c <__alt_data_end+0xfffdcf8c>
 1444684:	043fffc4 	movi	r16,-1
 1444688:	0038ce06 	br	14429c4 <__alt_data_end+0xfffdd1c4>
 144468c:	00800b44 	movi	r2,45
 1444690:	056bc83a 	sub	r21,zero,r21
 1444694:	d8812305 	stb	r2,1164(sp)
 1444698:	003f6c06 	br	144444c <__alt_data_end+0xfffdec4c>
 144469c:	4800081e 	bne	r9,zero,14446c0 <___vfprintf_internal_r+0x20d4>
 14446a0:	e080004c 	andi	r2,fp,1
 14446a4:	1000061e 	bne	r2,zero,14446c0 <___vfprintf_internal_r+0x20d4>
 14446a8:	07000044 	movi	fp,1
 14446ac:	e023883a 	mov	r17,fp
 14446b0:	003dd806 	br	1443e14 <__alt_data_end+0xfffde614>
 14446b4:	04400084 	movi	r17,2
 14446b8:	88e3c83a 	sub	r17,r17,r3
 14446bc:	003fb506 	br	1444594 <__alt_data_end+0xfffded94>
 14446c0:	4c400084 	addi	r17,r9,2
 14446c4:	8839883a 	mov	fp,r17
 14446c8:	883dd20e 	bge	r17,zero,1443e14 <__alt_data_end+0xfffde614>
 14446cc:	003fb506 	br	14445a4 <__alt_data_end+0xfffdeda4>
 14446d0:	d8c12617 	ldw	r3,1176(sp)
 14446d4:	003f5706 	br	1444434 <__alt_data_end+0xfffdec34>
 14446d8:	d8812344 	addi	r2,sp,1165
 14446dc:	003f8206 	br	14444e8 <__alt_data_end+0xfffdece8>
 14446e0:	0039883a 	mov	fp,zero
 14446e4:	003fbd06 	br	14445dc <__alt_data_end+0xfffdeddc>

014446e8 <__vfprintf_internal>:
 14446e8:	2007883a 	mov	r3,r4
 14446ec:	01005174 	movhi	r4,325
 14446f0:	21055204 	addi	r4,r4,5448
 14446f4:	21000017 	ldw	r4,0(r4)
 14446f8:	2805883a 	mov	r2,r5
 14446fc:	300f883a 	mov	r7,r6
 1444700:	180b883a 	mov	r5,r3
 1444704:	100d883a 	mov	r6,r2
 1444708:	14425ec1 	jmpi	14425ec <___vfprintf_internal_r>

0144470c <__swsetup_r>:
 144470c:	00805174 	movhi	r2,325
 1444710:	defffd04 	addi	sp,sp,-12
 1444714:	10855204 	addi	r2,r2,5448
 1444718:	dc400115 	stw	r17,4(sp)
 144471c:	2023883a 	mov	r17,r4
 1444720:	11000017 	ldw	r4,0(r2)
 1444724:	dc000015 	stw	r16,0(sp)
 1444728:	dfc00215 	stw	ra,8(sp)
 144472c:	2821883a 	mov	r16,r5
 1444730:	20000226 	beq	r4,zero,144473c <__swsetup_r+0x30>
 1444734:	20c00e17 	ldw	r3,56(r4)
 1444738:	18002e26 	beq	r3,zero,14447f4 <__swsetup_r+0xe8>
 144473c:	8080030b 	ldhu	r2,12(r16)
 1444740:	10c0020c 	andi	r3,r2,8
 1444744:	100d883a 	mov	r6,r2
 1444748:	18000f26 	beq	r3,zero,1444788 <__swsetup_r+0x7c>
 144474c:	80c00417 	ldw	r3,16(r16)
 1444750:	18001526 	beq	r3,zero,14447a8 <__swsetup_r+0x9c>
 1444754:	1100004c 	andi	r4,r2,1
 1444758:	20001c1e 	bne	r4,zero,14447cc <__swsetup_r+0xc0>
 144475c:	1080008c 	andi	r2,r2,2
 1444760:	1000261e 	bne	r2,zero,14447fc <__swsetup_r+0xf0>
 1444764:	80800517 	ldw	r2,20(r16)
 1444768:	80800215 	stw	r2,8(r16)
 144476c:	18001c26 	beq	r3,zero,14447e0 <__swsetup_r+0xd4>
 1444770:	0005883a 	mov	r2,zero
 1444774:	dfc00217 	ldw	ra,8(sp)
 1444778:	dc400117 	ldw	r17,4(sp)
 144477c:	dc000017 	ldw	r16,0(sp)
 1444780:	dec00304 	addi	sp,sp,12
 1444784:	f800283a 	ret
 1444788:	3080040c 	andi	r2,r6,16
 144478c:	10001726 	beq	r2,zero,14447ec <__swsetup_r+0xe0>
 1444790:	3080010c 	andi	r2,r6,4
 1444794:	10001b1e 	bne	r2,zero,1444804 <__swsetup_r+0xf8>
 1444798:	80c00417 	ldw	r3,16(r16)
 144479c:	30800214 	ori	r2,r6,8
 14447a0:	8080030d 	sth	r2,12(r16)
 14447a4:	183feb1e 	bne	r3,zero,1444754 <__alt_data_end+0xfffdef54>
 14447a8:	1140a00c 	andi	r5,r2,640
 14447ac:	01008004 	movi	r4,512
 14447b0:	293fe826 	beq	r5,r4,1444754 <__alt_data_end+0xfffdef54>
 14447b4:	8809883a 	mov	r4,r17
 14447b8:	800b883a 	mov	r5,r16
 14447bc:	14472a00 	call	14472a0 <__smakebuf_r>
 14447c0:	8080030b 	ldhu	r2,12(r16)
 14447c4:	80c00417 	ldw	r3,16(r16)
 14447c8:	003fe206 	br	1444754 <__alt_data_end+0xfffdef54>
 14447cc:	80800517 	ldw	r2,20(r16)
 14447d0:	80000215 	stw	zero,8(r16)
 14447d4:	0085c83a 	sub	r2,zero,r2
 14447d8:	80800615 	stw	r2,24(r16)
 14447dc:	183fe41e 	bne	r3,zero,1444770 <__alt_data_end+0xfffdef70>
 14447e0:	8080030b 	ldhu	r2,12(r16)
 14447e4:	1080200c 	andi	r2,r2,128
 14447e8:	103fe226 	beq	r2,zero,1444774 <__alt_data_end+0xfffdef74>
 14447ec:	00bfffc4 	movi	r2,-1
 14447f0:	003fe006 	br	1444774 <__alt_data_end+0xfffdef74>
 14447f4:	14467480 	call	1446748 <__sinit>
 14447f8:	003fd006 	br	144473c <__alt_data_end+0xfffdef3c>
 14447fc:	0005883a 	mov	r2,zero
 1444800:	003fd906 	br	1444768 <__alt_data_end+0xfffdef68>
 1444804:	81400c17 	ldw	r5,48(r16)
 1444808:	28000626 	beq	r5,zero,1444824 <__swsetup_r+0x118>
 144480c:	80801004 	addi	r2,r16,64
 1444810:	28800326 	beq	r5,r2,1444820 <__swsetup_r+0x114>
 1444814:	8809883a 	mov	r4,r17
 1444818:	14468bc0 	call	14468bc <_free_r>
 144481c:	8180030b 	ldhu	r6,12(r16)
 1444820:	80000c15 	stw	zero,48(r16)
 1444824:	80c00417 	ldw	r3,16(r16)
 1444828:	00bff6c4 	movi	r2,-37
 144482c:	118c703a 	and	r6,r2,r6
 1444830:	80000115 	stw	zero,4(r16)
 1444834:	80c00015 	stw	r3,0(r16)
 1444838:	003fd806 	br	144479c <__alt_data_end+0xfffdef9c>

0144483c <quorem>:
 144483c:	defff204 	addi	sp,sp,-56
 1444840:	ddc00b15 	stw	r23,44(sp)
 1444844:	20800417 	ldw	r2,16(r4)
 1444848:	2dc00417 	ldw	r23,16(r5)
 144484c:	dfc00d15 	stw	ra,52(sp)
 1444850:	df000c15 	stw	fp,48(sp)
 1444854:	dd800a15 	stw	r22,40(sp)
 1444858:	dd400915 	stw	r21,36(sp)
 144485c:	dd000815 	stw	r20,32(sp)
 1444860:	dcc00715 	stw	r19,28(sp)
 1444864:	dc800615 	stw	r18,24(sp)
 1444868:	dc400515 	stw	r17,20(sp)
 144486c:	dc000415 	stw	r16,16(sp)
 1444870:	15c07a16 	blt	r2,r23,1444a5c <quorem+0x220>
 1444874:	bdffffc4 	addi	r23,r23,-1
 1444878:	bde9883a 	add	r20,r23,r23
 144487c:	28c00504 	addi	r3,r5,20
 1444880:	a529883a 	add	r20,r20,r20
 1444884:	1d39883a 	add	fp,r3,r20
 1444888:	24c00504 	addi	r19,r4,20
 144488c:	d9400215 	stw	r5,8(sp)
 1444890:	9d29883a 	add	r20,r19,r20
 1444894:	e1400017 	ldw	r5,0(fp)
 1444898:	d9000015 	stw	r4,0(sp)
 144489c:	a1000017 	ldw	r4,0(r20)
 14448a0:	29400044 	addi	r5,r5,1
 14448a4:	d8c00115 	stw	r3,4(sp)
 14448a8:	dd000315 	stw	r20,12(sp)
 14448ac:	14423e80 	call	14423e8 <__udivsi3>
 14448b0:	1025883a 	mov	r18,r2
 14448b4:	10003026 	beq	r2,zero,1444978 <quorem+0x13c>
 14448b8:	dc400117 	ldw	r17,4(sp)
 14448bc:	9829883a 	mov	r20,r19
 14448c0:	002d883a 	mov	r22,zero
 14448c4:	0021883a 	mov	r16,zero
 14448c8:	8d400017 	ldw	r21,0(r17)
 14448cc:	900b883a 	mov	r5,r18
 14448d0:	8c400104 	addi	r17,r17,4
 14448d4:	a93fffcc 	andi	r4,r21,65535
 14448d8:	14423f80 	call	14423f8 <__mulsi3>
 14448dc:	a808d43a 	srli	r4,r21,16
 14448e0:	900b883a 	mov	r5,r18
 14448e4:	b0ad883a 	add	r22,r22,r2
 14448e8:	14423f80 	call	14423f8 <__mulsi3>
 14448ec:	a1000017 	ldw	r4,0(r20)
 14448f0:	b00cd43a 	srli	r6,r22,16
 14448f4:	b0ffffcc 	andi	r3,r22,65535
 14448f8:	217fffcc 	andi	r5,r4,65535
 14448fc:	2c21883a 	add	r16,r5,r16
 1444900:	80c7c83a 	sub	r3,r16,r3
 1444904:	2008d43a 	srli	r4,r4,16
 1444908:	3085883a 	add	r2,r6,r2
 144490c:	1821d43a 	srai	r16,r3,16
 1444910:	117fffcc 	andi	r5,r2,65535
 1444914:	2149c83a 	sub	r4,r4,r5
 1444918:	2421883a 	add	r16,r4,r16
 144491c:	8008943a 	slli	r4,r16,16
 1444920:	18ffffcc 	andi	r3,r3,65535
 1444924:	102cd43a 	srli	r22,r2,16
 1444928:	20c8b03a 	or	r4,r4,r3
 144492c:	a1000015 	stw	r4,0(r20)
 1444930:	8021d43a 	srai	r16,r16,16
 1444934:	a5000104 	addi	r20,r20,4
 1444938:	e47fe32e 	bgeu	fp,r17,14448c8 <__alt_data_end+0xfffdf0c8>
 144493c:	d8c00317 	ldw	r3,12(sp)
 1444940:	18800017 	ldw	r2,0(r3)
 1444944:	10000c1e 	bne	r2,zero,1444978 <quorem+0x13c>
 1444948:	18bfff04 	addi	r2,r3,-4
 144494c:	9880082e 	bgeu	r19,r2,1444970 <quorem+0x134>
 1444950:	18ffff17 	ldw	r3,-4(r3)
 1444954:	18000326 	beq	r3,zero,1444964 <quorem+0x128>
 1444958:	00000506 	br	1444970 <quorem+0x134>
 144495c:	10c00017 	ldw	r3,0(r2)
 1444960:	1800031e 	bne	r3,zero,1444970 <quorem+0x134>
 1444964:	10bfff04 	addi	r2,r2,-4
 1444968:	bdffffc4 	addi	r23,r23,-1
 144496c:	98bffb36 	bltu	r19,r2,144495c <__alt_data_end+0xfffdf15c>
 1444970:	d8c00017 	ldw	r3,0(sp)
 1444974:	1dc00415 	stw	r23,16(r3)
 1444978:	d9000017 	ldw	r4,0(sp)
 144497c:	d9400217 	ldw	r5,8(sp)
 1444980:	1448a1c0 	call	1448a1c <__mcmp>
 1444984:	10002816 	blt	r2,zero,1444a28 <quorem+0x1ec>
 1444988:	dc400117 	ldw	r17,4(sp)
 144498c:	94800044 	addi	r18,r18,1
 1444990:	980d883a 	mov	r6,r19
 1444994:	0007883a 	mov	r3,zero
 1444998:	31000017 	ldw	r4,0(r6)
 144499c:	89400017 	ldw	r5,0(r17)
 14449a0:	31800104 	addi	r6,r6,4
 14449a4:	20bfffcc 	andi	r2,r4,65535
 14449a8:	10c7883a 	add	r3,r2,r3
 14449ac:	28bfffcc 	andi	r2,r5,65535
 14449b0:	1885c83a 	sub	r2,r3,r2
 14449b4:	280ad43a 	srli	r5,r5,16
 14449b8:	2008d43a 	srli	r4,r4,16
 14449bc:	1007d43a 	srai	r3,r2,16
 14449c0:	10bfffcc 	andi	r2,r2,65535
 14449c4:	2149c83a 	sub	r4,r4,r5
 14449c8:	20c9883a 	add	r4,r4,r3
 14449cc:	200a943a 	slli	r5,r4,16
 14449d0:	8c400104 	addi	r17,r17,4
 14449d4:	2007d43a 	srai	r3,r4,16
 14449d8:	2884b03a 	or	r2,r5,r2
 14449dc:	30bfff15 	stw	r2,-4(r6)
 14449e0:	e47fed2e 	bgeu	fp,r17,1444998 <__alt_data_end+0xfffdf198>
 14449e4:	bdc5883a 	add	r2,r23,r23
 14449e8:	1085883a 	add	r2,r2,r2
 14449ec:	9887883a 	add	r3,r19,r2
 14449f0:	18800017 	ldw	r2,0(r3)
 14449f4:	10000c1e 	bne	r2,zero,1444a28 <quorem+0x1ec>
 14449f8:	18bfff04 	addi	r2,r3,-4
 14449fc:	9880082e 	bgeu	r19,r2,1444a20 <quorem+0x1e4>
 1444a00:	18ffff17 	ldw	r3,-4(r3)
 1444a04:	18000326 	beq	r3,zero,1444a14 <quorem+0x1d8>
 1444a08:	00000506 	br	1444a20 <quorem+0x1e4>
 1444a0c:	10c00017 	ldw	r3,0(r2)
 1444a10:	1800031e 	bne	r3,zero,1444a20 <quorem+0x1e4>
 1444a14:	10bfff04 	addi	r2,r2,-4
 1444a18:	bdffffc4 	addi	r23,r23,-1
 1444a1c:	98bffb36 	bltu	r19,r2,1444a0c <__alt_data_end+0xfffdf20c>
 1444a20:	d8c00017 	ldw	r3,0(sp)
 1444a24:	1dc00415 	stw	r23,16(r3)
 1444a28:	9005883a 	mov	r2,r18
 1444a2c:	dfc00d17 	ldw	ra,52(sp)
 1444a30:	df000c17 	ldw	fp,48(sp)
 1444a34:	ddc00b17 	ldw	r23,44(sp)
 1444a38:	dd800a17 	ldw	r22,40(sp)
 1444a3c:	dd400917 	ldw	r21,36(sp)
 1444a40:	dd000817 	ldw	r20,32(sp)
 1444a44:	dcc00717 	ldw	r19,28(sp)
 1444a48:	dc800617 	ldw	r18,24(sp)
 1444a4c:	dc400517 	ldw	r17,20(sp)
 1444a50:	dc000417 	ldw	r16,16(sp)
 1444a54:	dec00e04 	addi	sp,sp,56
 1444a58:	f800283a 	ret
 1444a5c:	0005883a 	mov	r2,zero
 1444a60:	003ff206 	br	1444a2c <__alt_data_end+0xfffdf22c>

01444a64 <_dtoa_r>:
 1444a64:	20801017 	ldw	r2,64(r4)
 1444a68:	deffde04 	addi	sp,sp,-136
 1444a6c:	dd401d15 	stw	r21,116(sp)
 1444a70:	dcc01b15 	stw	r19,108(sp)
 1444a74:	dc801a15 	stw	r18,104(sp)
 1444a78:	dc401915 	stw	r17,100(sp)
 1444a7c:	dc001815 	stw	r16,96(sp)
 1444a80:	dfc02115 	stw	ra,132(sp)
 1444a84:	df002015 	stw	fp,128(sp)
 1444a88:	ddc01f15 	stw	r23,124(sp)
 1444a8c:	dd801e15 	stw	r22,120(sp)
 1444a90:	dd001c15 	stw	r20,112(sp)
 1444a94:	d9c00315 	stw	r7,12(sp)
 1444a98:	2021883a 	mov	r16,r4
 1444a9c:	302b883a 	mov	r21,r6
 1444aa0:	2825883a 	mov	r18,r5
 1444aa4:	dc402417 	ldw	r17,144(sp)
 1444aa8:	3027883a 	mov	r19,r6
 1444aac:	10000826 	beq	r2,zero,1444ad0 <_dtoa_r+0x6c>
 1444ab0:	21801117 	ldw	r6,68(r4)
 1444ab4:	00c00044 	movi	r3,1
 1444ab8:	100b883a 	mov	r5,r2
 1444abc:	1986983a 	sll	r3,r3,r6
 1444ac0:	11800115 	stw	r6,4(r2)
 1444ac4:	10c00215 	stw	r3,8(r2)
 1444ac8:	14481480 	call	1448148 <_Bfree>
 1444acc:	80001015 	stw	zero,64(r16)
 1444ad0:	a8002d16 	blt	r21,zero,1444b88 <_dtoa_r+0x124>
 1444ad4:	88000015 	stw	zero,0(r17)
 1444ad8:	a8dffc2c 	andhi	r3,r21,32752
 1444adc:	009ffc34 	movhi	r2,32752
 1444ae0:	18801b26 	beq	r3,r2,1444b50 <_dtoa_r+0xec>
 1444ae4:	9009883a 	mov	r4,r18
 1444ae8:	980b883a 	mov	r5,r19
 1444aec:	000d883a 	mov	r6,zero
 1444af0:	000f883a 	mov	r7,zero
 1444af4:	144ccd00 	call	144ccd0 <__eqdf2>
 1444af8:	10002a1e 	bne	r2,zero,1444ba4 <_dtoa_r+0x140>
 1444afc:	d8c02317 	ldw	r3,140(sp)
 1444b00:	d9002517 	ldw	r4,148(sp)
 1444b04:	00800044 	movi	r2,1
 1444b08:	18800015 	stw	r2,0(r3)
 1444b0c:	2001a226 	beq	r4,zero,1445198 <_dtoa_r+0x734>
 1444b10:	00805174 	movhi	r2,325
 1444b14:	1081ea44 	addi	r2,r2,1961
 1444b18:	20800015 	stw	r2,0(r4)
 1444b1c:	10bfffc4 	addi	r2,r2,-1
 1444b20:	dfc02117 	ldw	ra,132(sp)
 1444b24:	df002017 	ldw	fp,128(sp)
 1444b28:	ddc01f17 	ldw	r23,124(sp)
 1444b2c:	dd801e17 	ldw	r22,120(sp)
 1444b30:	dd401d17 	ldw	r21,116(sp)
 1444b34:	dd001c17 	ldw	r20,112(sp)
 1444b38:	dcc01b17 	ldw	r19,108(sp)
 1444b3c:	dc801a17 	ldw	r18,104(sp)
 1444b40:	dc401917 	ldw	r17,100(sp)
 1444b44:	dc001817 	ldw	r16,96(sp)
 1444b48:	dec02204 	addi	sp,sp,136
 1444b4c:	f800283a 	ret
 1444b50:	d8c02317 	ldw	r3,140(sp)
 1444b54:	0089c3c4 	movi	r2,9999
 1444b58:	18800015 	stw	r2,0(r3)
 1444b5c:	90017c26 	beq	r18,zero,1445150 <_dtoa_r+0x6ec>
 1444b60:	00805174 	movhi	r2,325
 1444b64:	1081f604 	addi	r2,r2,2008
 1444b68:	d9002517 	ldw	r4,148(sp)
 1444b6c:	203fec26 	beq	r4,zero,1444b20 <__alt_data_end+0xfffdf320>
 1444b70:	10c000c7 	ldb	r3,3(r2)
 1444b74:	18017d1e 	bne	r3,zero,144516c <_dtoa_r+0x708>
 1444b78:	10c000c4 	addi	r3,r2,3
 1444b7c:	d9802517 	ldw	r6,148(sp)
 1444b80:	30c00015 	stw	r3,0(r6)
 1444b84:	003fe606 	br	1444b20 <__alt_data_end+0xfffdf320>
 1444b88:	04e00034 	movhi	r19,32768
 1444b8c:	9cffffc4 	addi	r19,r19,-1
 1444b90:	00800044 	movi	r2,1
 1444b94:	ace6703a 	and	r19,r21,r19
 1444b98:	88800015 	stw	r2,0(r17)
 1444b9c:	982b883a 	mov	r21,r19
 1444ba0:	003fcd06 	br	1444ad8 <__alt_data_end+0xfffdf2d8>
 1444ba4:	d8800204 	addi	r2,sp,8
 1444ba8:	a822d53a 	srli	r17,r21,20
 1444bac:	d8800015 	stw	r2,0(sp)
 1444bb0:	8009883a 	mov	r4,r16
 1444bb4:	900b883a 	mov	r5,r18
 1444bb8:	980d883a 	mov	r6,r19
 1444bbc:	d9c00104 	addi	r7,sp,4
 1444bc0:	1448d900 	call	1448d90 <__d2b>
 1444bc4:	1039883a 	mov	fp,r2
 1444bc8:	88016a1e 	bne	r17,zero,1445174 <_dtoa_r+0x710>
 1444bcc:	dd000217 	ldw	r20,8(sp)
 1444bd0:	dc400117 	ldw	r17,4(sp)
 1444bd4:	00befbc4 	movi	r2,-1041
 1444bd8:	a463883a 	add	r17,r20,r17
 1444bdc:	8882ea16 	blt	r17,r2,1445788 <_dtoa_r+0xd24>
 1444be0:	00bf0384 	movi	r2,-1010
 1444be4:	1445c83a 	sub	r2,r2,r17
 1444be8:	89010484 	addi	r4,r17,1042
 1444bec:	a8aa983a 	sll	r21,r21,r2
 1444bf0:	9108d83a 	srl	r4,r18,r4
 1444bf4:	a908b03a 	or	r4,r21,r4
 1444bf8:	144cf9c0 	call	144cf9c <__floatunsidf>
 1444bfc:	017f8434 	movhi	r5,65040
 1444c00:	01800044 	movi	r6,1
 1444c04:	1009883a 	mov	r4,r2
 1444c08:	194b883a 	add	r5,r3,r5
 1444c0c:	8c7fffc4 	addi	r17,r17,-1
 1444c10:	d9800f15 	stw	r6,60(sp)
 1444c14:	000d883a 	mov	r6,zero
 1444c18:	01cffe34 	movhi	r7,16376
 1444c1c:	14418c80 	call	14418c8 <__subdf3>
 1444c20:	0198dbf4 	movhi	r6,25455
 1444c24:	01cff4f4 	movhi	r7,16339
 1444c28:	1009883a 	mov	r4,r2
 1444c2c:	180b883a 	mov	r5,r3
 1444c30:	3190d844 	addi	r6,r6,17249
 1444c34:	39e1e9c4 	addi	r7,r7,-30809
 1444c38:	144105c0 	call	144105c <__muldf3>
 1444c3c:	01a2d874 	movhi	r6,35681
 1444c40:	01cff1f4 	movhi	r7,16327
 1444c44:	180b883a 	mov	r5,r3
 1444c48:	31b22cc4 	addi	r6,r6,-14157
 1444c4c:	39e28a04 	addi	r7,r7,-30168
 1444c50:	1009883a 	mov	r4,r2
 1444c54:	144c4340 	call	144c434 <__adddf3>
 1444c58:	8809883a 	mov	r4,r17
 1444c5c:	102d883a 	mov	r22,r2
 1444c60:	182b883a 	mov	r21,r3
 1444c64:	14421980 	call	1442198 <__floatsidf>
 1444c68:	019427f4 	movhi	r6,20639
 1444c6c:	01cff4f4 	movhi	r7,16339
 1444c70:	1009883a 	mov	r4,r2
 1444c74:	180b883a 	mov	r5,r3
 1444c78:	319e7ec4 	addi	r6,r6,31227
 1444c7c:	39d104c4 	addi	r7,r7,17427
 1444c80:	144105c0 	call	144105c <__muldf3>
 1444c84:	b009883a 	mov	r4,r22
 1444c88:	a80b883a 	mov	r5,r21
 1444c8c:	100d883a 	mov	r6,r2
 1444c90:	180f883a 	mov	r7,r3
 1444c94:	144c4340 	call	144c434 <__adddf3>
 1444c98:	1009883a 	mov	r4,r2
 1444c9c:	180b883a 	mov	r5,r3
 1444ca0:	102d883a 	mov	r22,r2
 1444ca4:	182b883a 	mov	r21,r3
 1444ca8:	144cf140 	call	144cf14 <__fixdfsi>
 1444cac:	b009883a 	mov	r4,r22
 1444cb0:	a80b883a 	mov	r5,r21
 1444cb4:	000d883a 	mov	r6,zero
 1444cb8:	000f883a 	mov	r7,zero
 1444cbc:	d8800515 	stw	r2,20(sp)
 1444cc0:	144ce340 	call	144ce34 <__ledf2>
 1444cc4:	10023116 	blt	r2,zero,144558c <_dtoa_r+0xb28>
 1444cc8:	d8c00517 	ldw	r3,20(sp)
 1444ccc:	00800584 	movi	r2,22
 1444cd0:	10c21f36 	bltu	r2,r3,1445550 <_dtoa_r+0xaec>
 1444cd4:	180490fa 	slli	r2,r3,3
 1444cd8:	00c05174 	movhi	r3,325
 1444cdc:	18c21204 	addi	r3,r3,2120
 1444ce0:	1885883a 	add	r2,r3,r2
 1444ce4:	11000017 	ldw	r4,0(r2)
 1444ce8:	11400117 	ldw	r5,4(r2)
 1444cec:	900d883a 	mov	r6,r18
 1444cf0:	980f883a 	mov	r7,r19
 1444cf4:	144cd540 	call	144cd54 <__gedf2>
 1444cf8:	0082a70e 	bge	zero,r2,1445798 <_dtoa_r+0xd34>
 1444cfc:	d9000517 	ldw	r4,20(sp)
 1444d00:	d8000c15 	stw	zero,48(sp)
 1444d04:	213fffc4 	addi	r4,r4,-1
 1444d08:	d9000515 	stw	r4,20(sp)
 1444d0c:	a463c83a 	sub	r17,r20,r17
 1444d10:	8dbfffc4 	addi	r22,r17,-1
 1444d14:	b0021916 	blt	r22,zero,144557c <_dtoa_r+0xb18>
 1444d18:	d8000815 	stw	zero,32(sp)
 1444d1c:	d8800517 	ldw	r2,20(sp)
 1444d20:	10020e16 	blt	r2,zero,144555c <_dtoa_r+0xaf8>
 1444d24:	b0ad883a 	add	r22,r22,r2
 1444d28:	d8800a15 	stw	r2,40(sp)
 1444d2c:	d8000915 	stw	zero,36(sp)
 1444d30:	d8c00317 	ldw	r3,12(sp)
 1444d34:	00800244 	movi	r2,9
 1444d38:	10c11a36 	bltu	r2,r3,14451a4 <_dtoa_r+0x740>
 1444d3c:	00800144 	movi	r2,5
 1444d40:	10c4fc0e 	bge	r2,r3,1446134 <_dtoa_r+0x16d0>
 1444d44:	18ffff04 	addi	r3,r3,-4
 1444d48:	d8c00315 	stw	r3,12(sp)
 1444d4c:	0029883a 	mov	r20,zero
 1444d50:	d9800317 	ldw	r6,12(sp)
 1444d54:	008000c4 	movi	r2,3
 1444d58:	3083bd26 	beq	r6,r2,1445c50 <_dtoa_r+0x11ec>
 1444d5c:	1183670e 	bge	r2,r6,1445afc <_dtoa_r+0x1098>
 1444d60:	d8c00317 	ldw	r3,12(sp)
 1444d64:	00800104 	movi	r2,4
 1444d68:	1882e726 	beq	r3,r2,1445908 <_dtoa_r+0xea4>
 1444d6c:	00800144 	movi	r2,5
 1444d70:	1884f21e 	bne	r3,r2,144613c <_dtoa_r+0x16d8>
 1444d74:	00800044 	movi	r2,1
 1444d78:	d8800b15 	stw	r2,44(sp)
 1444d7c:	d8c02217 	ldw	r3,136(sp)
 1444d80:	d9000517 	ldw	r4,20(sp)
 1444d84:	1907883a 	add	r3,r3,r4
 1444d88:	19800044 	addi	r6,r3,1
 1444d8c:	d8c00d15 	stw	r3,52(sp)
 1444d90:	d9800615 	stw	r6,24(sp)
 1444d94:	0183c30e 	bge	zero,r6,1445ca4 <_dtoa_r+0x1240>
 1444d98:	d9800617 	ldw	r6,24(sp)
 1444d9c:	3023883a 	mov	r17,r6
 1444da0:	80001115 	stw	zero,68(r16)
 1444da4:	008005c4 	movi	r2,23
 1444da8:	1184f62e 	bgeu	r2,r6,1446184 <_dtoa_r+0x1720>
 1444dac:	00c00044 	movi	r3,1
 1444db0:	00800104 	movi	r2,4
 1444db4:	1085883a 	add	r2,r2,r2
 1444db8:	11000504 	addi	r4,r2,20
 1444dbc:	180b883a 	mov	r5,r3
 1444dc0:	18c00044 	addi	r3,r3,1
 1444dc4:	313ffb2e 	bgeu	r6,r4,1444db4 <__alt_data_end+0xfffdf5b4>
 1444dc8:	81401115 	stw	r5,68(r16)
 1444dcc:	8009883a 	mov	r4,r16
 1444dd0:	14480a00 	call	14480a0 <_Balloc>
 1444dd4:	d8800715 	stw	r2,28(sp)
 1444dd8:	80801015 	stw	r2,64(r16)
 1444ddc:	00800384 	movi	r2,14
 1444de0:	1440fd36 	bltu	r2,r17,14451d8 <_dtoa_r+0x774>
 1444de4:	a000fc26 	beq	r20,zero,14451d8 <_dtoa_r+0x774>
 1444de8:	d8800517 	ldw	r2,20(sp)
 1444dec:	0083b90e 	bge	zero,r2,1445cd4 <_dtoa_r+0x1270>
 1444df0:	d8c00517 	ldw	r3,20(sp)
 1444df4:	108003cc 	andi	r2,r2,15
 1444df8:	100490fa 	slli	r2,r2,3
 1444dfc:	182fd13a 	srai	r23,r3,4
 1444e00:	00c05174 	movhi	r3,325
 1444e04:	18c21204 	addi	r3,r3,2120
 1444e08:	1885883a 	add	r2,r3,r2
 1444e0c:	b8c0040c 	andi	r3,r23,16
 1444e10:	12c00017 	ldw	r11,0(r2)
 1444e14:	12800117 	ldw	r10,4(r2)
 1444e18:	18039726 	beq	r3,zero,1445c78 <_dtoa_r+0x1214>
 1444e1c:	00805174 	movhi	r2,325
 1444e20:	10820804 	addi	r2,r2,2080
 1444e24:	11800817 	ldw	r6,32(r2)
 1444e28:	11c00917 	ldw	r7,36(r2)
 1444e2c:	9009883a 	mov	r4,r18
 1444e30:	980b883a 	mov	r5,r19
 1444e34:	da801615 	stw	r10,88(sp)
 1444e38:	dac01515 	stw	r11,84(sp)
 1444e3c:	14406dc0 	call	14406dc <__divdf3>
 1444e40:	da801617 	ldw	r10,88(sp)
 1444e44:	dac01517 	ldw	r11,84(sp)
 1444e48:	bdc003cc 	andi	r23,r23,15
 1444e4c:	044000c4 	movi	r17,3
 1444e50:	d8800e15 	stw	r2,56(sp)
 1444e54:	182b883a 	mov	r21,r3
 1444e58:	b8001126 	beq	r23,zero,1444ea0 <_dtoa_r+0x43c>
 1444e5c:	05005174 	movhi	r20,325
 1444e60:	a5020804 	addi	r20,r20,2080
 1444e64:	5805883a 	mov	r2,r11
 1444e68:	5007883a 	mov	r3,r10
 1444e6c:	b980004c 	andi	r6,r23,1
 1444e70:	1009883a 	mov	r4,r2
 1444e74:	b82fd07a 	srai	r23,r23,1
 1444e78:	180b883a 	mov	r5,r3
 1444e7c:	30000426 	beq	r6,zero,1444e90 <_dtoa_r+0x42c>
 1444e80:	a1800017 	ldw	r6,0(r20)
 1444e84:	a1c00117 	ldw	r7,4(r20)
 1444e88:	8c400044 	addi	r17,r17,1
 1444e8c:	144105c0 	call	144105c <__muldf3>
 1444e90:	a5000204 	addi	r20,r20,8
 1444e94:	b83ff51e 	bne	r23,zero,1444e6c <__alt_data_end+0xfffdf66c>
 1444e98:	1017883a 	mov	r11,r2
 1444e9c:	1815883a 	mov	r10,r3
 1444ea0:	d9000e17 	ldw	r4,56(sp)
 1444ea4:	a80b883a 	mov	r5,r21
 1444ea8:	580d883a 	mov	r6,r11
 1444eac:	500f883a 	mov	r7,r10
 1444eb0:	14406dc0 	call	14406dc <__divdf3>
 1444eb4:	1029883a 	mov	r20,r2
 1444eb8:	182b883a 	mov	r21,r3
 1444ebc:	d9800c17 	ldw	r6,48(sp)
 1444ec0:	30000626 	beq	r6,zero,1444edc <_dtoa_r+0x478>
 1444ec4:	a009883a 	mov	r4,r20
 1444ec8:	a80b883a 	mov	r5,r21
 1444ecc:	000d883a 	mov	r6,zero
 1444ed0:	01cffc34 	movhi	r7,16368
 1444ed4:	144ce340 	call	144ce34 <__ledf2>
 1444ed8:	10043216 	blt	r2,zero,1445fa4 <_dtoa_r+0x1540>
 1444edc:	8809883a 	mov	r4,r17
 1444ee0:	14421980 	call	1442198 <__floatsidf>
 1444ee4:	1009883a 	mov	r4,r2
 1444ee8:	180b883a 	mov	r5,r3
 1444eec:	a00d883a 	mov	r6,r20
 1444ef0:	a80f883a 	mov	r7,r21
 1444ef4:	144105c0 	call	144105c <__muldf3>
 1444ef8:	000d883a 	mov	r6,zero
 1444efc:	1009883a 	mov	r4,r2
 1444f00:	180b883a 	mov	r5,r3
 1444f04:	01d00734 	movhi	r7,16412
 1444f08:	144c4340 	call	144c434 <__adddf3>
 1444f0c:	1023883a 	mov	r17,r2
 1444f10:	d9800617 	ldw	r6,24(sp)
 1444f14:	00bf3034 	movhi	r2,64704
 1444f18:	1885883a 	add	r2,r3,r2
 1444f1c:	d8800e15 	stw	r2,56(sp)
 1444f20:	30032e26 	beq	r6,zero,1445bdc <_dtoa_r+0x1178>
 1444f24:	d8c00517 	ldw	r3,20(sp)
 1444f28:	da800617 	ldw	r10,24(sp)
 1444f2c:	d8c01215 	stw	r3,72(sp)
 1444f30:	d9000b17 	ldw	r4,44(sp)
 1444f34:	2003b026 	beq	r4,zero,1445df8 <_dtoa_r+0x1394>
 1444f38:	50bfffc4 	addi	r2,r10,-1
 1444f3c:	100490fa 	slli	r2,r2,3
 1444f40:	00c05174 	movhi	r3,325
 1444f44:	18c21204 	addi	r3,r3,2120
 1444f48:	1885883a 	add	r2,r3,r2
 1444f4c:	11800017 	ldw	r6,0(r2)
 1444f50:	11c00117 	ldw	r7,4(r2)
 1444f54:	d8800717 	ldw	r2,28(sp)
 1444f58:	0009883a 	mov	r4,zero
 1444f5c:	014ff834 	movhi	r5,16352
 1444f60:	da801615 	stw	r10,88(sp)
 1444f64:	15c00044 	addi	r23,r2,1
 1444f68:	14406dc0 	call	14406dc <__divdf3>
 1444f6c:	d9c00e17 	ldw	r7,56(sp)
 1444f70:	880d883a 	mov	r6,r17
 1444f74:	1009883a 	mov	r4,r2
 1444f78:	180b883a 	mov	r5,r3
 1444f7c:	14418c80 	call	14418c8 <__subdf3>
 1444f80:	a80b883a 	mov	r5,r21
 1444f84:	a009883a 	mov	r4,r20
 1444f88:	d8c01015 	stw	r3,64(sp)
 1444f8c:	d8800e15 	stw	r2,56(sp)
 1444f90:	144cf140 	call	144cf14 <__fixdfsi>
 1444f94:	1009883a 	mov	r4,r2
 1444f98:	d8801715 	stw	r2,92(sp)
 1444f9c:	14421980 	call	1442198 <__floatsidf>
 1444fa0:	a009883a 	mov	r4,r20
 1444fa4:	a80b883a 	mov	r5,r21
 1444fa8:	100d883a 	mov	r6,r2
 1444fac:	180f883a 	mov	r7,r3
 1444fb0:	14418c80 	call	14418c8 <__subdf3>
 1444fb4:	da001717 	ldw	r8,92(sp)
 1444fb8:	1829883a 	mov	r20,r3
 1444fbc:	d8c00717 	ldw	r3,28(sp)
 1444fc0:	d9000e17 	ldw	r4,56(sp)
 1444fc4:	d9401017 	ldw	r5,64(sp)
 1444fc8:	42000c04 	addi	r8,r8,48
 1444fcc:	1023883a 	mov	r17,r2
 1444fd0:	1a000005 	stb	r8,0(r3)
 1444fd4:	880d883a 	mov	r6,r17
 1444fd8:	a00f883a 	mov	r7,r20
 1444fdc:	402b883a 	mov	r21,r8
 1444fe0:	144cd540 	call	144cd54 <__gedf2>
 1444fe4:	00844516 	blt	zero,r2,14460fc <_dtoa_r+0x1698>
 1444fe8:	0009883a 	mov	r4,zero
 1444fec:	014ffc34 	movhi	r5,16368
 1444ff0:	880d883a 	mov	r6,r17
 1444ff4:	a00f883a 	mov	r7,r20
 1444ff8:	14418c80 	call	14418c8 <__subdf3>
 1444ffc:	d9000e17 	ldw	r4,56(sp)
 1445000:	d9401017 	ldw	r5,64(sp)
 1445004:	100d883a 	mov	r6,r2
 1445008:	180f883a 	mov	r7,r3
 144500c:	144cd540 	call	144cd54 <__gedf2>
 1445010:	da801617 	ldw	r10,88(sp)
 1445014:	00843616 	blt	zero,r2,14460f0 <_dtoa_r+0x168c>
 1445018:	00800044 	movi	r2,1
 144501c:	12806e0e 	bge	r2,r10,14451d8 <_dtoa_r+0x774>
 1445020:	d9000717 	ldw	r4,28(sp)
 1445024:	dd801315 	stw	r22,76(sp)
 1445028:	dc001115 	stw	r16,68(sp)
 144502c:	2295883a 	add	r10,r4,r10
 1445030:	dcc01415 	stw	r19,80(sp)
 1445034:	502d883a 	mov	r22,r10
 1445038:	dcc01017 	ldw	r19,64(sp)
 144503c:	b821883a 	mov	r16,r23
 1445040:	dc801015 	stw	r18,64(sp)
 1445044:	dc800e17 	ldw	r18,56(sp)
 1445048:	00000906 	br	1445070 <_dtoa_r+0x60c>
 144504c:	14418c80 	call	14418c8 <__subdf3>
 1445050:	1009883a 	mov	r4,r2
 1445054:	180b883a 	mov	r5,r3
 1445058:	900d883a 	mov	r6,r18
 144505c:	980f883a 	mov	r7,r19
 1445060:	144ce340 	call	144ce34 <__ledf2>
 1445064:	10040e16 	blt	r2,zero,14460a0 <_dtoa_r+0x163c>
 1445068:	b821883a 	mov	r16,r23
 144506c:	bd841026 	beq	r23,r22,14460b0 <_dtoa_r+0x164c>
 1445070:	9009883a 	mov	r4,r18
 1445074:	980b883a 	mov	r5,r19
 1445078:	000d883a 	mov	r6,zero
 144507c:	01d00934 	movhi	r7,16420
 1445080:	144105c0 	call	144105c <__muldf3>
 1445084:	000d883a 	mov	r6,zero
 1445088:	01d00934 	movhi	r7,16420
 144508c:	8809883a 	mov	r4,r17
 1445090:	a00b883a 	mov	r5,r20
 1445094:	1025883a 	mov	r18,r2
 1445098:	1827883a 	mov	r19,r3
 144509c:	144105c0 	call	144105c <__muldf3>
 14450a0:	180b883a 	mov	r5,r3
 14450a4:	1009883a 	mov	r4,r2
 14450a8:	1823883a 	mov	r17,r3
 14450ac:	1029883a 	mov	r20,r2
 14450b0:	144cf140 	call	144cf14 <__fixdfsi>
 14450b4:	1009883a 	mov	r4,r2
 14450b8:	102b883a 	mov	r21,r2
 14450bc:	14421980 	call	1442198 <__floatsidf>
 14450c0:	a009883a 	mov	r4,r20
 14450c4:	880b883a 	mov	r5,r17
 14450c8:	100d883a 	mov	r6,r2
 14450cc:	180f883a 	mov	r7,r3
 14450d0:	14418c80 	call	14418c8 <__subdf3>
 14450d4:	ad400c04 	addi	r21,r21,48
 14450d8:	1009883a 	mov	r4,r2
 14450dc:	180b883a 	mov	r5,r3
 14450e0:	900d883a 	mov	r6,r18
 14450e4:	980f883a 	mov	r7,r19
 14450e8:	85400005 	stb	r21,0(r16)
 14450ec:	1023883a 	mov	r17,r2
 14450f0:	1829883a 	mov	r20,r3
 14450f4:	144ce340 	call	144ce34 <__ledf2>
 14450f8:	bdc00044 	addi	r23,r23,1
 14450fc:	0009883a 	mov	r4,zero
 1445100:	014ffc34 	movhi	r5,16368
 1445104:	880d883a 	mov	r6,r17
 1445108:	a00f883a 	mov	r7,r20
 144510c:	103fcf0e 	bge	r2,zero,144504c <__alt_data_end+0xfffdf84c>
 1445110:	d9801217 	ldw	r6,72(sp)
 1445114:	dc001117 	ldw	r16,68(sp)
 1445118:	d9800515 	stw	r6,20(sp)
 144511c:	8009883a 	mov	r4,r16
 1445120:	e00b883a 	mov	r5,fp
 1445124:	14481480 	call	1448148 <_Bfree>
 1445128:	d8c00517 	ldw	r3,20(sp)
 144512c:	d9002317 	ldw	r4,140(sp)
 1445130:	d9802517 	ldw	r6,148(sp)
 1445134:	b8000005 	stb	zero,0(r23)
 1445138:	18800044 	addi	r2,r3,1
 144513c:	20800015 	stw	r2,0(r4)
 1445140:	30027226 	beq	r6,zero,1445b0c <_dtoa_r+0x10a8>
 1445144:	35c00015 	stw	r23,0(r6)
 1445148:	d8800717 	ldw	r2,28(sp)
 144514c:	003e7406 	br	1444b20 <__alt_data_end+0xfffdf320>
 1445150:	00800434 	movhi	r2,16
 1445154:	10bfffc4 	addi	r2,r2,-1
 1445158:	a8aa703a 	and	r21,r21,r2
 144515c:	a83e801e 	bne	r21,zero,1444b60 <__alt_data_end+0xfffdf360>
 1445160:	00805174 	movhi	r2,325
 1445164:	1081f304 	addi	r2,r2,1996
 1445168:	003e7f06 	br	1444b68 <__alt_data_end+0xfffdf368>
 144516c:	10c00204 	addi	r3,r2,8
 1445170:	003e8206 	br	1444b7c <__alt_data_end+0xfffdf37c>
 1445174:	01400434 	movhi	r5,16
 1445178:	297fffc4 	addi	r5,r5,-1
 144517c:	994a703a 	and	r5,r19,r5
 1445180:	9009883a 	mov	r4,r18
 1445184:	8c7f0044 	addi	r17,r17,-1023
 1445188:	294ffc34 	orhi	r5,r5,16368
 144518c:	dd000217 	ldw	r20,8(sp)
 1445190:	d8000f15 	stw	zero,60(sp)
 1445194:	003e9f06 	br	1444c14 <__alt_data_end+0xfffdf414>
 1445198:	00805174 	movhi	r2,325
 144519c:	1081ea04 	addi	r2,r2,1960
 14451a0:	003e5f06 	br	1444b20 <__alt_data_end+0xfffdf320>
 14451a4:	80001115 	stw	zero,68(r16)
 14451a8:	8009883a 	mov	r4,r16
 14451ac:	000b883a 	mov	r5,zero
 14451b0:	14480a00 	call	14480a0 <_Balloc>
 14451b4:	01bfffc4 	movi	r6,-1
 14451b8:	d8800715 	stw	r2,28(sp)
 14451bc:	80801015 	stw	r2,64(r16)
 14451c0:	00800044 	movi	r2,1
 14451c4:	d9800615 	stw	r6,24(sp)
 14451c8:	d8800b15 	stw	r2,44(sp)
 14451cc:	d8002215 	stw	zero,136(sp)
 14451d0:	d9800d15 	stw	r6,52(sp)
 14451d4:	d8000315 	stw	zero,12(sp)
 14451d8:	d8800117 	ldw	r2,4(sp)
 14451dc:	10008e16 	blt	r2,zero,1445418 <_dtoa_r+0x9b4>
 14451e0:	d9000517 	ldw	r4,20(sp)
 14451e4:	00c00384 	movi	r3,14
 14451e8:	19008b16 	blt	r3,r4,1445418 <_dtoa_r+0x9b4>
 14451ec:	200490fa 	slli	r2,r4,3
 14451f0:	00c05174 	movhi	r3,325
 14451f4:	d9802217 	ldw	r6,136(sp)
 14451f8:	18c21204 	addi	r3,r3,2120
 14451fc:	1885883a 	add	r2,r3,r2
 1445200:	14400017 	ldw	r17,0(r2)
 1445204:	15000117 	ldw	r20,4(r2)
 1445208:	3001c716 	blt	r6,zero,1445928 <_dtoa_r+0xec4>
 144520c:	880d883a 	mov	r6,r17
 1445210:	a00f883a 	mov	r7,r20
 1445214:	9009883a 	mov	r4,r18
 1445218:	980b883a 	mov	r5,r19
 144521c:	14406dc0 	call	14406dc <__divdf3>
 1445220:	180b883a 	mov	r5,r3
 1445224:	1009883a 	mov	r4,r2
 1445228:	144cf140 	call	144cf14 <__fixdfsi>
 144522c:	1009883a 	mov	r4,r2
 1445230:	102d883a 	mov	r22,r2
 1445234:	14421980 	call	1442198 <__floatsidf>
 1445238:	1009883a 	mov	r4,r2
 144523c:	180b883a 	mov	r5,r3
 1445240:	880d883a 	mov	r6,r17
 1445244:	a00f883a 	mov	r7,r20
 1445248:	144105c0 	call	144105c <__muldf3>
 144524c:	9009883a 	mov	r4,r18
 1445250:	980b883a 	mov	r5,r19
 1445254:	100d883a 	mov	r6,r2
 1445258:	180f883a 	mov	r7,r3
 144525c:	14418c80 	call	14418c8 <__subdf3>
 1445260:	d9000717 	ldw	r4,28(sp)
 1445264:	d9800617 	ldw	r6,24(sp)
 1445268:	180b883a 	mov	r5,r3
 144526c:	b0c00c04 	addi	r3,r22,48
 1445270:	20c00005 	stb	r3,0(r4)
 1445274:	25c00044 	addi	r23,r4,1
 1445278:	01000044 	movi	r4,1
 144527c:	1011883a 	mov	r8,r2
 1445280:	2807883a 	mov	r3,r5
 1445284:	31003d26 	beq	r6,r4,144537c <_dtoa_r+0x918>
 1445288:	000d883a 	mov	r6,zero
 144528c:	01d00934 	movhi	r7,16420
 1445290:	1009883a 	mov	r4,r2
 1445294:	144105c0 	call	144105c <__muldf3>
 1445298:	1009883a 	mov	r4,r2
 144529c:	180b883a 	mov	r5,r3
 14452a0:	000d883a 	mov	r6,zero
 14452a4:	000f883a 	mov	r7,zero
 14452a8:	1027883a 	mov	r19,r2
 14452ac:	182b883a 	mov	r21,r3
 14452b0:	144ccd00 	call	144ccd0 <__eqdf2>
 14452b4:	103f9926 	beq	r2,zero,144511c <__alt_data_end+0xfffdf91c>
 14452b8:	d8c00617 	ldw	r3,24(sp)
 14452bc:	d9000717 	ldw	r4,28(sp)
 14452c0:	b825883a 	mov	r18,r23
 14452c4:	18bfffc4 	addi	r2,r3,-1
 14452c8:	20ad883a 	add	r22,r4,r2
 14452cc:	dc000315 	stw	r16,12(sp)
 14452d0:	00000a06 	br	14452fc <_dtoa_r+0x898>
 14452d4:	144105c0 	call	144105c <__muldf3>
 14452d8:	1009883a 	mov	r4,r2
 14452dc:	180b883a 	mov	r5,r3
 14452e0:	000d883a 	mov	r6,zero
 14452e4:	000f883a 	mov	r7,zero
 14452e8:	1027883a 	mov	r19,r2
 14452ec:	182b883a 	mov	r21,r3
 14452f0:	b825883a 	mov	r18,r23
 14452f4:	144ccd00 	call	144ccd0 <__eqdf2>
 14452f8:	10022626 	beq	r2,zero,1445b94 <_dtoa_r+0x1130>
 14452fc:	880d883a 	mov	r6,r17
 1445300:	a00f883a 	mov	r7,r20
 1445304:	9809883a 	mov	r4,r19
 1445308:	a80b883a 	mov	r5,r21
 144530c:	14406dc0 	call	14406dc <__divdf3>
 1445310:	180b883a 	mov	r5,r3
 1445314:	1009883a 	mov	r4,r2
 1445318:	144cf140 	call	144cf14 <__fixdfsi>
 144531c:	1009883a 	mov	r4,r2
 1445320:	1021883a 	mov	r16,r2
 1445324:	14421980 	call	1442198 <__floatsidf>
 1445328:	1009883a 	mov	r4,r2
 144532c:	180b883a 	mov	r5,r3
 1445330:	880d883a 	mov	r6,r17
 1445334:	a00f883a 	mov	r7,r20
 1445338:	144105c0 	call	144105c <__muldf3>
 144533c:	9809883a 	mov	r4,r19
 1445340:	a80b883a 	mov	r5,r21
 1445344:	100d883a 	mov	r6,r2
 1445348:	180f883a 	mov	r7,r3
 144534c:	14418c80 	call	14418c8 <__subdf3>
 1445350:	82000c04 	addi	r8,r16,48
 1445354:	92000005 	stb	r8,0(r18)
 1445358:	1009883a 	mov	r4,r2
 144535c:	180b883a 	mov	r5,r3
 1445360:	000d883a 	mov	r6,zero
 1445364:	01d00934 	movhi	r7,16420
 1445368:	1011883a 	mov	r8,r2
 144536c:	bdc00044 	addi	r23,r23,1
 1445370:	95bfd81e 	bne	r18,r22,14452d4 <__alt_data_end+0xfffdfad4>
 1445374:	802d883a 	mov	r22,r16
 1445378:	dc000317 	ldw	r16,12(sp)
 144537c:	4009883a 	mov	r4,r8
 1445380:	180b883a 	mov	r5,r3
 1445384:	400d883a 	mov	r6,r8
 1445388:	180f883a 	mov	r7,r3
 144538c:	144c4340 	call	144c434 <__adddf3>
 1445390:	8809883a 	mov	r4,r17
 1445394:	a00b883a 	mov	r5,r20
 1445398:	100d883a 	mov	r6,r2
 144539c:	180f883a 	mov	r7,r3
 14453a0:	1027883a 	mov	r19,r2
 14453a4:	1825883a 	mov	r18,r3
 14453a8:	144ce340 	call	144ce34 <__ledf2>
 14453ac:	10000816 	blt	r2,zero,14453d0 <_dtoa_r+0x96c>
 14453b0:	8809883a 	mov	r4,r17
 14453b4:	a00b883a 	mov	r5,r20
 14453b8:	980d883a 	mov	r6,r19
 14453bc:	900f883a 	mov	r7,r18
 14453c0:	144ccd00 	call	144ccd0 <__eqdf2>
 14453c4:	103f551e 	bne	r2,zero,144511c <__alt_data_end+0xfffdf91c>
 14453c8:	b580004c 	andi	r22,r22,1
 14453cc:	b03f5326 	beq	r22,zero,144511c <__alt_data_end+0xfffdf91c>
 14453d0:	bd7fffc3 	ldbu	r21,-1(r23)
 14453d4:	b8bfffc4 	addi	r2,r23,-1
 14453d8:	1007883a 	mov	r3,r2
 14453dc:	01400e44 	movi	r5,57
 14453e0:	d9800717 	ldw	r6,28(sp)
 14453e4:	00000506 	br	14453fc <_dtoa_r+0x998>
 14453e8:	18ffffc4 	addi	r3,r3,-1
 14453ec:	30825e26 	beq	r6,r2,1445d68 <_dtoa_r+0x1304>
 14453f0:	1d400003 	ldbu	r21,0(r3)
 14453f4:	102f883a 	mov	r23,r2
 14453f8:	10bfffc4 	addi	r2,r2,-1
 14453fc:	a9003fcc 	andi	r4,r21,255
 1445400:	2100201c 	xori	r4,r4,128
 1445404:	213fe004 	addi	r4,r4,-128
 1445408:	217ff726 	beq	r4,r5,14453e8 <__alt_data_end+0xfffdfbe8>
 144540c:	aa000044 	addi	r8,r21,1
 1445410:	12000005 	stb	r8,0(r2)
 1445414:	003f4106 	br	144511c <__alt_data_end+0xfffdf91c>
 1445418:	d8c00b17 	ldw	r3,44(sp)
 144541c:	18006726 	beq	r3,zero,14455bc <_dtoa_r+0xb58>
 1445420:	d9000317 	ldw	r4,12(sp)
 1445424:	00c00044 	movi	r3,1
 1445428:	19016a0e 	bge	r3,r4,14459d4 <_dtoa_r+0xf70>
 144542c:	d8800617 	ldw	r2,24(sp)
 1445430:	d8c00917 	ldw	r3,36(sp)
 1445434:	157fffc4 	addi	r21,r2,-1
 1445438:	1d420716 	blt	r3,r21,1445c58 <_dtoa_r+0x11f4>
 144543c:	1d6bc83a 	sub	r21,r3,r21
 1445440:	d8800617 	ldw	r2,24(sp)
 1445444:	1002c716 	blt	r2,zero,1445f64 <_dtoa_r+0x1500>
 1445448:	dd000817 	ldw	r20,32(sp)
 144544c:	d8800617 	ldw	r2,24(sp)
 1445450:	d9800817 	ldw	r6,32(sp)
 1445454:	8009883a 	mov	r4,r16
 1445458:	01400044 	movi	r5,1
 144545c:	308d883a 	add	r6,r6,r2
 1445460:	d9800815 	stw	r6,32(sp)
 1445464:	b0ad883a 	add	r22,r22,r2
 1445468:	14484c80 	call	14484c8 <__i2b>
 144546c:	1023883a 	mov	r17,r2
 1445470:	a0000826 	beq	r20,zero,1445494 <_dtoa_r+0xa30>
 1445474:	0580070e 	bge	zero,r22,1445494 <_dtoa_r+0xa30>
 1445478:	b005883a 	mov	r2,r22
 144547c:	a5812016 	blt	r20,r22,1445900 <_dtoa_r+0xe9c>
 1445480:	d8c00817 	ldw	r3,32(sp)
 1445484:	a0a9c83a 	sub	r20,r20,r2
 1445488:	b0adc83a 	sub	r22,r22,r2
 144548c:	1887c83a 	sub	r3,r3,r2
 1445490:	d8c00815 	stw	r3,32(sp)
 1445494:	d9000917 	ldw	r4,36(sp)
 1445498:	0100140e 	bge	zero,r4,14454ec <_dtoa_r+0xa88>
 144549c:	d9800b17 	ldw	r6,44(sp)
 14454a0:	3001e526 	beq	r6,zero,1445c38 <_dtoa_r+0x11d4>
 14454a4:	05400e0e 	bge	zero,r21,14454e0 <_dtoa_r+0xa7c>
 14454a8:	880b883a 	mov	r5,r17
 14454ac:	8009883a 	mov	r4,r16
 14454b0:	a80d883a 	mov	r6,r21
 14454b4:	14487940 	call	1448794 <__pow5mult>
 14454b8:	e00d883a 	mov	r6,fp
 14454bc:	8009883a 	mov	r4,r16
 14454c0:	100b883a 	mov	r5,r2
 14454c4:	1023883a 	mov	r17,r2
 14454c8:	14485040 	call	1448504 <__multiply>
 14454cc:	102f883a 	mov	r23,r2
 14454d0:	e00b883a 	mov	r5,fp
 14454d4:	8009883a 	mov	r4,r16
 14454d8:	14481480 	call	1448148 <_Bfree>
 14454dc:	b839883a 	mov	fp,r23
 14454e0:	d8800917 	ldw	r2,36(sp)
 14454e4:	154dc83a 	sub	r6,r2,r21
 14454e8:	3001281e 	bne	r6,zero,144598c <_dtoa_r+0xf28>
 14454ec:	05c00044 	movi	r23,1
 14454f0:	8009883a 	mov	r4,r16
 14454f4:	b80b883a 	mov	r5,r23
 14454f8:	14484c80 	call	14484c8 <__i2b>
 14454fc:	d8c00a17 	ldw	r3,40(sp)
 1445500:	102b883a 	mov	r21,r2
 1445504:	00c0310e 	bge	zero,r3,14455cc <_dtoa_r+0xb68>
 1445508:	8009883a 	mov	r4,r16
 144550c:	100b883a 	mov	r5,r2
 1445510:	180d883a 	mov	r6,r3
 1445514:	14487940 	call	1448794 <__pow5mult>
 1445518:	d9000317 	ldw	r4,12(sp)
 144551c:	102b883a 	mov	r21,r2
 1445520:	b9011f0e 	bge	r23,r4,14459a0 <_dtoa_r+0xf3c>
 1445524:	0027883a 	mov	r19,zero
 1445528:	a8800417 	ldw	r2,16(r21)
 144552c:	10800104 	addi	r2,r2,4
 1445530:	1085883a 	add	r2,r2,r2
 1445534:	1085883a 	add	r2,r2,r2
 1445538:	a885883a 	add	r2,r21,r2
 144553c:	11000017 	ldw	r4,0(r2)
 1445540:	14483b00 	call	14483b0 <__hi0bits>
 1445544:	00c00804 	movi	r3,32
 1445548:	1885c83a 	sub	r2,r3,r2
 144554c:	00002506 	br	14455e4 <_dtoa_r+0xb80>
 1445550:	01800044 	movi	r6,1
 1445554:	d9800c15 	stw	r6,48(sp)
 1445558:	003dec06 	br	1444d0c <__alt_data_end+0xfffdf50c>
 144555c:	d8c00817 	ldw	r3,32(sp)
 1445560:	d9000517 	ldw	r4,20(sp)
 1445564:	d8000a15 	stw	zero,40(sp)
 1445568:	1907c83a 	sub	r3,r3,r4
 144556c:	010dc83a 	sub	r6,zero,r4
 1445570:	d8c00815 	stw	r3,32(sp)
 1445574:	d9800915 	stw	r6,36(sp)
 1445578:	003ded06 	br	1444d30 <__alt_data_end+0xfffdf530>
 144557c:	05adc83a 	sub	r22,zero,r22
 1445580:	dd800815 	stw	r22,32(sp)
 1445584:	002d883a 	mov	r22,zero
 1445588:	003de406 	br	1444d1c <__alt_data_end+0xfffdf51c>
 144558c:	d9000517 	ldw	r4,20(sp)
 1445590:	14421980 	call	1442198 <__floatsidf>
 1445594:	1009883a 	mov	r4,r2
 1445598:	180b883a 	mov	r5,r3
 144559c:	b00d883a 	mov	r6,r22
 14455a0:	a80f883a 	mov	r7,r21
 14455a4:	144ccd00 	call	144ccd0 <__eqdf2>
 14455a8:	103dc726 	beq	r2,zero,1444cc8 <__alt_data_end+0xfffdf4c8>
 14455ac:	d8800517 	ldw	r2,20(sp)
 14455b0:	10bfffc4 	addi	r2,r2,-1
 14455b4:	d8800515 	stw	r2,20(sp)
 14455b8:	003dc306 	br	1444cc8 <__alt_data_end+0xfffdf4c8>
 14455bc:	dd400917 	ldw	r21,36(sp)
 14455c0:	dd000817 	ldw	r20,32(sp)
 14455c4:	0023883a 	mov	r17,zero
 14455c8:	003fa906 	br	1445470 <__alt_data_end+0xfffdfc70>
 14455cc:	d9800317 	ldw	r6,12(sp)
 14455d0:	b981670e 	bge	r23,r6,1445b70 <_dtoa_r+0x110c>
 14455d4:	0027883a 	mov	r19,zero
 14455d8:	d8c00a17 	ldw	r3,40(sp)
 14455dc:	183fd21e 	bne	r3,zero,1445528 <__alt_data_end+0xfffdfd28>
 14455e0:	00800044 	movi	r2,1
 14455e4:	1585883a 	add	r2,r2,r22
 14455e8:	108007cc 	andi	r2,r2,31
 14455ec:	10005f26 	beq	r2,zero,144576c <_dtoa_r+0xd08>
 14455f0:	00c00804 	movi	r3,32
 14455f4:	1887c83a 	sub	r3,r3,r2
 14455f8:	01000104 	movi	r4,4
 14455fc:	20c2dd0e 	bge	r4,r3,1446174 <_dtoa_r+0x1710>
 1445600:	d9000817 	ldw	r4,32(sp)
 1445604:	00c00704 	movi	r3,28
 1445608:	1885c83a 	sub	r2,r3,r2
 144560c:	2089883a 	add	r4,r4,r2
 1445610:	d9000815 	stw	r4,32(sp)
 1445614:	a0a9883a 	add	r20,r20,r2
 1445618:	b0ad883a 	add	r22,r22,r2
 144561c:	d8800817 	ldw	r2,32(sp)
 1445620:	0080050e 	bge	zero,r2,1445638 <_dtoa_r+0xbd4>
 1445624:	e00b883a 	mov	r5,fp
 1445628:	8009883a 	mov	r4,r16
 144562c:	100d883a 	mov	r6,r2
 1445630:	14488d40 	call	14488d4 <__lshift>
 1445634:	1039883a 	mov	fp,r2
 1445638:	0580050e 	bge	zero,r22,1445650 <_dtoa_r+0xbec>
 144563c:	a80b883a 	mov	r5,r21
 1445640:	8009883a 	mov	r4,r16
 1445644:	b00d883a 	mov	r6,r22
 1445648:	14488d40 	call	14488d4 <__lshift>
 144564c:	102b883a 	mov	r21,r2
 1445650:	d8c00c17 	ldw	r3,48(sp)
 1445654:	1801161e 	bne	r3,zero,1445ab0 <_dtoa_r+0x104c>
 1445658:	d8c00617 	ldw	r3,24(sp)
 144565c:	00c12d0e 	bge	zero,r3,1445b14 <_dtoa_r+0x10b0>
 1445660:	d8c00b17 	ldw	r3,44(sp)
 1445664:	1800571e 	bne	r3,zero,14457c4 <_dtoa_r+0xd60>
 1445668:	dc800717 	ldw	r18,28(sp)
 144566c:	dcc00617 	ldw	r19,24(sp)
 1445670:	9029883a 	mov	r20,r18
 1445674:	00000206 	br	1445680 <_dtoa_r+0xc1c>
 1445678:	14481700 	call	1448170 <__multadd>
 144567c:	1039883a 	mov	fp,r2
 1445680:	e009883a 	mov	r4,fp
 1445684:	a80b883a 	mov	r5,r21
 1445688:	144483c0 	call	144483c <quorem>
 144568c:	10800c04 	addi	r2,r2,48
 1445690:	90800005 	stb	r2,0(r18)
 1445694:	94800044 	addi	r18,r18,1
 1445698:	9507c83a 	sub	r3,r18,r20
 144569c:	8009883a 	mov	r4,r16
 14456a0:	e00b883a 	mov	r5,fp
 14456a4:	01800284 	movi	r6,10
 14456a8:	000f883a 	mov	r7,zero
 14456ac:	1cfff216 	blt	r3,r19,1445678 <__alt_data_end+0xfffdfe78>
 14456b0:	1011883a 	mov	r8,r2
 14456b4:	d8800617 	ldw	r2,24(sp)
 14456b8:	00822e0e 	bge	zero,r2,1445f74 <_dtoa_r+0x1510>
 14456bc:	d9000717 	ldw	r4,28(sp)
 14456c0:	0025883a 	mov	r18,zero
 14456c4:	20af883a 	add	r23,r4,r2
 14456c8:	e00b883a 	mov	r5,fp
 14456cc:	01800044 	movi	r6,1
 14456d0:	8009883a 	mov	r4,r16
 14456d4:	da001715 	stw	r8,92(sp)
 14456d8:	14488d40 	call	14488d4 <__lshift>
 14456dc:	1009883a 	mov	r4,r2
 14456e0:	a80b883a 	mov	r5,r21
 14456e4:	1039883a 	mov	fp,r2
 14456e8:	1448a1c0 	call	1448a1c <__mcmp>
 14456ec:	da001717 	ldw	r8,92(sp)
 14456f0:	00816e0e 	bge	zero,r2,1445cac <_dtoa_r+0x1248>
 14456f4:	b93fffc3 	ldbu	r4,-1(r23)
 14456f8:	b8bfffc4 	addi	r2,r23,-1
 14456fc:	1007883a 	mov	r3,r2
 1445700:	01800e44 	movi	r6,57
 1445704:	d9c00717 	ldw	r7,28(sp)
 1445708:	00000506 	br	1445720 <_dtoa_r+0xcbc>
 144570c:	18ffffc4 	addi	r3,r3,-1
 1445710:	38811926 	beq	r7,r2,1445b78 <_dtoa_r+0x1114>
 1445714:	19000003 	ldbu	r4,0(r3)
 1445718:	102f883a 	mov	r23,r2
 144571c:	10bfffc4 	addi	r2,r2,-1
 1445720:	21403fcc 	andi	r5,r4,255
 1445724:	2940201c 	xori	r5,r5,128
 1445728:	297fe004 	addi	r5,r5,-128
 144572c:	29bff726 	beq	r5,r6,144570c <__alt_data_end+0xfffdff0c>
 1445730:	21000044 	addi	r4,r4,1
 1445734:	11000005 	stb	r4,0(r2)
 1445738:	8009883a 	mov	r4,r16
 144573c:	a80b883a 	mov	r5,r21
 1445740:	14481480 	call	1448148 <_Bfree>
 1445744:	883e7526 	beq	r17,zero,144511c <__alt_data_end+0xfffdf91c>
 1445748:	90000426 	beq	r18,zero,144575c <_dtoa_r+0xcf8>
 144574c:	94400326 	beq	r18,r17,144575c <_dtoa_r+0xcf8>
 1445750:	8009883a 	mov	r4,r16
 1445754:	900b883a 	mov	r5,r18
 1445758:	14481480 	call	1448148 <_Bfree>
 144575c:	8009883a 	mov	r4,r16
 1445760:	880b883a 	mov	r5,r17
 1445764:	14481480 	call	1448148 <_Bfree>
 1445768:	003e6c06 	br	144511c <__alt_data_end+0xfffdf91c>
 144576c:	00800704 	movi	r2,28
 1445770:	d9800817 	ldw	r6,32(sp)
 1445774:	a0a9883a 	add	r20,r20,r2
 1445778:	b0ad883a 	add	r22,r22,r2
 144577c:	308d883a 	add	r6,r6,r2
 1445780:	d9800815 	stw	r6,32(sp)
 1445784:	003fa506 	br	144561c <__alt_data_end+0xfffdfe1c>
 1445788:	013efb84 	movi	r4,-1042
 144578c:	246bc83a 	sub	r21,r4,r17
 1445790:	9548983a 	sll	r4,r18,r21
 1445794:	003d1806 	br	1444bf8 <__alt_data_end+0xfffdf3f8>
 1445798:	d8000c15 	stw	zero,48(sp)
 144579c:	003d5b06 	br	1444d0c <__alt_data_end+0xfffdf50c>
 14457a0:	880b883a 	mov	r5,r17
 14457a4:	8009883a 	mov	r4,r16
 14457a8:	01800284 	movi	r6,10
 14457ac:	000f883a 	mov	r7,zero
 14457b0:	14481700 	call	1448170 <__multadd>
 14457b4:	1023883a 	mov	r17,r2
 14457b8:	d8800d17 	ldw	r2,52(sp)
 14457bc:	0082550e 	bge	zero,r2,1446114 <_dtoa_r+0x16b0>
 14457c0:	d8800615 	stw	r2,24(sp)
 14457c4:	0500050e 	bge	zero,r20,14457dc <_dtoa_r+0xd78>
 14457c8:	880b883a 	mov	r5,r17
 14457cc:	8009883a 	mov	r4,r16
 14457d0:	a00d883a 	mov	r6,r20
 14457d4:	14488d40 	call	14488d4 <__lshift>
 14457d8:	1023883a 	mov	r17,r2
 14457dc:	98016a1e 	bne	r19,zero,1445d88 <_dtoa_r+0x1324>
 14457e0:	8829883a 	mov	r20,r17
 14457e4:	d9000617 	ldw	r4,24(sp)
 14457e8:	dcc00717 	ldw	r19,28(sp)
 14457ec:	9480004c 	andi	r18,r18,1
 14457f0:	20bfffc4 	addi	r2,r4,-1
 14457f4:	9885883a 	add	r2,r19,r2
 14457f8:	d8800415 	stw	r2,16(sp)
 14457fc:	dc800615 	stw	r18,24(sp)
 1445800:	e009883a 	mov	r4,fp
 1445804:	a80b883a 	mov	r5,r21
 1445808:	144483c0 	call	144483c <quorem>
 144580c:	e009883a 	mov	r4,fp
 1445810:	880b883a 	mov	r5,r17
 1445814:	102f883a 	mov	r23,r2
 1445818:	1448a1c0 	call	1448a1c <__mcmp>
 144581c:	8009883a 	mov	r4,r16
 1445820:	a80b883a 	mov	r5,r21
 1445824:	a00d883a 	mov	r6,r20
 1445828:	102d883a 	mov	r22,r2
 144582c:	1448a7c0 	call	1448a7c <__mdiff>
 1445830:	1007883a 	mov	r3,r2
 1445834:	10800317 	ldw	r2,12(r2)
 1445838:	bc800c04 	addi	r18,r23,48
 144583c:	1000971e 	bne	r2,zero,1445a9c <_dtoa_r+0x1038>
 1445840:	180b883a 	mov	r5,r3
 1445844:	e009883a 	mov	r4,fp
 1445848:	d8c01515 	stw	r3,84(sp)
 144584c:	1448a1c0 	call	1448a1c <__mcmp>
 1445850:	d8c01517 	ldw	r3,84(sp)
 1445854:	8009883a 	mov	r4,r16
 1445858:	d8801515 	stw	r2,84(sp)
 144585c:	180b883a 	mov	r5,r3
 1445860:	14481480 	call	1448148 <_Bfree>
 1445864:	d8801517 	ldw	r2,84(sp)
 1445868:	1000041e 	bne	r2,zero,144587c <_dtoa_r+0xe18>
 144586c:	d9800317 	ldw	r6,12(sp)
 1445870:	3000021e 	bne	r6,zero,144587c <_dtoa_r+0xe18>
 1445874:	d8c00617 	ldw	r3,24(sp)
 1445878:	18007626 	beq	r3,zero,1445a54 <_dtoa_r+0xff0>
 144587c:	b0005b16 	blt	r22,zero,14459ec <_dtoa_r+0xf88>
 1445880:	b000041e 	bne	r22,zero,1445894 <_dtoa_r+0xe30>
 1445884:	d9000317 	ldw	r4,12(sp)
 1445888:	2000021e 	bne	r4,zero,1445894 <_dtoa_r+0xe30>
 144588c:	d8c00617 	ldw	r3,24(sp)
 1445890:	18005626 	beq	r3,zero,14459ec <_dtoa_r+0xf88>
 1445894:	00814d16 	blt	zero,r2,1445dcc <_dtoa_r+0x1368>
 1445898:	d8c00417 	ldw	r3,16(sp)
 144589c:	9d800044 	addi	r22,r19,1
 14458a0:	9c800005 	stb	r18,0(r19)
 14458a4:	b02f883a 	mov	r23,r22
 14458a8:	98c14c26 	beq	r19,r3,1445ddc <_dtoa_r+0x1378>
 14458ac:	e00b883a 	mov	r5,fp
 14458b0:	8009883a 	mov	r4,r16
 14458b4:	01800284 	movi	r6,10
 14458b8:	000f883a 	mov	r7,zero
 14458bc:	14481700 	call	1448170 <__multadd>
 14458c0:	1039883a 	mov	fp,r2
 14458c4:	8d006d26 	beq	r17,r20,1445a7c <_dtoa_r+0x1018>
 14458c8:	880b883a 	mov	r5,r17
 14458cc:	01800284 	movi	r6,10
 14458d0:	000f883a 	mov	r7,zero
 14458d4:	8009883a 	mov	r4,r16
 14458d8:	14481700 	call	1448170 <__multadd>
 14458dc:	a00b883a 	mov	r5,r20
 14458e0:	8009883a 	mov	r4,r16
 14458e4:	01800284 	movi	r6,10
 14458e8:	000f883a 	mov	r7,zero
 14458ec:	1023883a 	mov	r17,r2
 14458f0:	14481700 	call	1448170 <__multadd>
 14458f4:	1029883a 	mov	r20,r2
 14458f8:	b027883a 	mov	r19,r22
 14458fc:	003fc006 	br	1445800 <__alt_data_end+0xfffe0000>
 1445900:	a005883a 	mov	r2,r20
 1445904:	003ede06 	br	1445480 <__alt_data_end+0xfffdfc80>
 1445908:	01000044 	movi	r4,1
 144590c:	d9000b15 	stw	r4,44(sp)
 1445910:	d9802217 	ldw	r6,136(sp)
 1445914:	0180dc0e 	bge	zero,r6,1445c88 <_dtoa_r+0x1224>
 1445918:	3023883a 	mov	r17,r6
 144591c:	d9800d15 	stw	r6,52(sp)
 1445920:	d9800615 	stw	r6,24(sp)
 1445924:	003d1e06 	br	1444da0 <__alt_data_end+0xfffdf5a0>
 1445928:	d8800617 	ldw	r2,24(sp)
 144592c:	00be3716 	blt	zero,r2,144520c <__alt_data_end+0xfffdfa0c>
 1445930:	1000be1e 	bne	r2,zero,1445c2c <_dtoa_r+0x11c8>
 1445934:	8809883a 	mov	r4,r17
 1445938:	a00b883a 	mov	r5,r20
 144593c:	000d883a 	mov	r6,zero
 1445940:	01d00534 	movhi	r7,16404
 1445944:	144105c0 	call	144105c <__muldf3>
 1445948:	1009883a 	mov	r4,r2
 144594c:	180b883a 	mov	r5,r3
 1445950:	900d883a 	mov	r6,r18
 1445954:	980f883a 	mov	r7,r19
 1445958:	144cd540 	call	144cd54 <__gedf2>
 144595c:	002b883a 	mov	r21,zero
 1445960:	0023883a 	mov	r17,zero
 1445964:	10007a16 	blt	r2,zero,1445b50 <_dtoa_r+0x10ec>
 1445968:	d9002217 	ldw	r4,136(sp)
 144596c:	ddc00717 	ldw	r23,28(sp)
 1445970:	0108303a 	nor	r4,zero,r4
 1445974:	d9000515 	stw	r4,20(sp)
 1445978:	8009883a 	mov	r4,r16
 144597c:	a80b883a 	mov	r5,r21
 1445980:	14481480 	call	1448148 <_Bfree>
 1445984:	883f751e 	bne	r17,zero,144575c <__alt_data_end+0xfffdff5c>
 1445988:	003de406 	br	144511c <__alt_data_end+0xfffdf91c>
 144598c:	e00b883a 	mov	r5,fp
 1445990:	8009883a 	mov	r4,r16
 1445994:	14487940 	call	1448794 <__pow5mult>
 1445998:	1039883a 	mov	fp,r2
 144599c:	003ed306 	br	14454ec <__alt_data_end+0xfffdfcec>
 14459a0:	903ee01e 	bne	r18,zero,1445524 <__alt_data_end+0xfffdfd24>
 14459a4:	00800434 	movhi	r2,16
 14459a8:	10bfffc4 	addi	r2,r2,-1
 14459ac:	9884703a 	and	r2,r19,r2
 14459b0:	103f081e 	bne	r2,zero,14455d4 <__alt_data_end+0xfffdfdd4>
 14459b4:	9cdffc2c 	andhi	r19,r19,32752
 14459b8:	983f0626 	beq	r19,zero,14455d4 <__alt_data_end+0xfffdfdd4>
 14459bc:	d8800817 	ldw	r2,32(sp)
 14459c0:	b5800044 	addi	r22,r22,1
 14459c4:	04c00044 	movi	r19,1
 14459c8:	10800044 	addi	r2,r2,1
 14459cc:	d8800815 	stw	r2,32(sp)
 14459d0:	003f0106 	br	14455d8 <__alt_data_end+0xfffdfdd8>
 14459d4:	d9800f17 	ldw	r6,60(sp)
 14459d8:	30016826 	beq	r6,zero,1445f7c <_dtoa_r+0x1518>
 14459dc:	10810cc4 	addi	r2,r2,1075
 14459e0:	dd400917 	ldw	r21,36(sp)
 14459e4:	dd000817 	ldw	r20,32(sp)
 14459e8:	003e9906 	br	1445450 <__alt_data_end+0xfffdfc50>
 14459ec:	9011883a 	mov	r8,r18
 14459f0:	4007883a 	mov	r3,r8
 14459f4:	e02d883a 	mov	r22,fp
 14459f8:	0080100e 	bge	zero,r2,1445a3c <_dtoa_r+0xfd8>
 14459fc:	01800044 	movi	r6,1
 1445a00:	8009883a 	mov	r4,r16
 1445a04:	e00b883a 	mov	r5,fp
 1445a08:	da001515 	stw	r8,84(sp)
 1445a0c:	da001715 	stw	r8,92(sp)
 1445a10:	14488d40 	call	14488d4 <__lshift>
 1445a14:	1009883a 	mov	r4,r2
 1445a18:	a80b883a 	mov	r5,r21
 1445a1c:	102d883a 	mov	r22,r2
 1445a20:	1448a1c0 	call	1448a1c <__mcmp>
 1445a24:	d8c01517 	ldw	r3,84(sp)
 1445a28:	da001717 	ldw	r8,92(sp)
 1445a2c:	0081a50e 	bge	zero,r2,14460c4 <_dtoa_r+0x1660>
 1445a30:	00800e44 	movi	r2,57
 1445a34:	40817b26 	beq	r8,r2,1446024 <_dtoa_r+0x15c0>
 1445a38:	40c00044 	addi	r3,r8,1
 1445a3c:	8825883a 	mov	r18,r17
 1445a40:	9dc00044 	addi	r23,r19,1
 1445a44:	98c00005 	stb	r3,0(r19)
 1445a48:	a023883a 	mov	r17,r20
 1445a4c:	b039883a 	mov	fp,r22
 1445a50:	003f3906 	br	1445738 <__alt_data_end+0xfffdff38>
 1445a54:	00800e44 	movi	r2,57
 1445a58:	9011883a 	mov	r8,r18
 1445a5c:	90817226 	beq	r18,r2,1446028 <_dtoa_r+0x15c4>
 1445a60:	0580010e 	bge	zero,r22,1445a68 <_dtoa_r+0x1004>
 1445a64:	ba000c44 	addi	r8,r23,49
 1445a68:	8825883a 	mov	r18,r17
 1445a6c:	9dc00044 	addi	r23,r19,1
 1445a70:	9a000005 	stb	r8,0(r19)
 1445a74:	a023883a 	mov	r17,r20
 1445a78:	003f2f06 	br	1445738 <__alt_data_end+0xfffdff38>
 1445a7c:	880b883a 	mov	r5,r17
 1445a80:	8009883a 	mov	r4,r16
 1445a84:	01800284 	movi	r6,10
 1445a88:	000f883a 	mov	r7,zero
 1445a8c:	14481700 	call	1448170 <__multadd>
 1445a90:	1023883a 	mov	r17,r2
 1445a94:	1029883a 	mov	r20,r2
 1445a98:	003f9706 	br	14458f8 <__alt_data_end+0xfffe00f8>
 1445a9c:	8009883a 	mov	r4,r16
 1445aa0:	180b883a 	mov	r5,r3
 1445aa4:	14481480 	call	1448148 <_Bfree>
 1445aa8:	00800044 	movi	r2,1
 1445aac:	003f7306 	br	144587c <__alt_data_end+0xfffe007c>
 1445ab0:	e009883a 	mov	r4,fp
 1445ab4:	a80b883a 	mov	r5,r21
 1445ab8:	1448a1c0 	call	1448a1c <__mcmp>
 1445abc:	103ee60e 	bge	r2,zero,1445658 <__alt_data_end+0xfffdfe58>
 1445ac0:	8009883a 	mov	r4,r16
 1445ac4:	e00b883a 	mov	r5,fp
 1445ac8:	01800284 	movi	r6,10
 1445acc:	000f883a 	mov	r7,zero
 1445ad0:	14481700 	call	1448170 <__multadd>
 1445ad4:	d9000517 	ldw	r4,20(sp)
 1445ad8:	d9800b17 	ldw	r6,44(sp)
 1445adc:	1039883a 	mov	fp,r2
 1445ae0:	213fffc4 	addi	r4,r4,-1
 1445ae4:	d9000515 	stw	r4,20(sp)
 1445ae8:	303f2d1e 	bne	r6,zero,14457a0 <__alt_data_end+0xfffdffa0>
 1445aec:	d9000d17 	ldw	r4,52(sp)
 1445af0:	0101780e 	bge	zero,r4,14460d4 <_dtoa_r+0x1670>
 1445af4:	d9000615 	stw	r4,24(sp)
 1445af8:	003edb06 	br	1445668 <__alt_data_end+0xfffdfe68>
 1445afc:	00800084 	movi	r2,2
 1445b00:	30818e1e 	bne	r6,r2,144613c <_dtoa_r+0x16d8>
 1445b04:	d8000b15 	stw	zero,44(sp)
 1445b08:	003f8106 	br	1445910 <__alt_data_end+0xfffe0110>
 1445b0c:	d8800717 	ldw	r2,28(sp)
 1445b10:	003c0306 	br	1444b20 <__alt_data_end+0xfffdf320>
 1445b14:	d9000317 	ldw	r4,12(sp)
 1445b18:	00800084 	movi	r2,2
 1445b1c:	113ed00e 	bge	r2,r4,1445660 <__alt_data_end+0xfffdfe60>
 1445b20:	d8c00617 	ldw	r3,24(sp)
 1445b24:	183f901e 	bne	r3,zero,1445968 <__alt_data_end+0xfffe0168>
 1445b28:	a80b883a 	mov	r5,r21
 1445b2c:	8009883a 	mov	r4,r16
 1445b30:	01800144 	movi	r6,5
 1445b34:	000f883a 	mov	r7,zero
 1445b38:	14481700 	call	1448170 <__multadd>
 1445b3c:	e009883a 	mov	r4,fp
 1445b40:	100b883a 	mov	r5,r2
 1445b44:	102b883a 	mov	r21,r2
 1445b48:	1448a1c0 	call	1448a1c <__mcmp>
 1445b4c:	00bf860e 	bge	zero,r2,1445968 <__alt_data_end+0xfffe0168>
 1445b50:	d9800717 	ldw	r6,28(sp)
 1445b54:	00800c44 	movi	r2,49
 1445b58:	30800005 	stb	r2,0(r6)
 1445b5c:	d8800517 	ldw	r2,20(sp)
 1445b60:	35c00044 	addi	r23,r6,1
 1445b64:	10800044 	addi	r2,r2,1
 1445b68:	d8800515 	stw	r2,20(sp)
 1445b6c:	003f8206 	br	1445978 <__alt_data_end+0xfffe0178>
 1445b70:	903e981e 	bne	r18,zero,14455d4 <__alt_data_end+0xfffdfdd4>
 1445b74:	003f8b06 	br	14459a4 <__alt_data_end+0xfffe01a4>
 1445b78:	d9800517 	ldw	r6,20(sp)
 1445b7c:	d8c00717 	ldw	r3,28(sp)
 1445b80:	00800c44 	movi	r2,49
 1445b84:	31800044 	addi	r6,r6,1
 1445b88:	d9800515 	stw	r6,20(sp)
 1445b8c:	18800005 	stb	r2,0(r3)
 1445b90:	003ee906 	br	1445738 <__alt_data_end+0xfffdff38>
 1445b94:	dc000317 	ldw	r16,12(sp)
 1445b98:	003d6006 	br	144511c <__alt_data_end+0xfffdf91c>
 1445b9c:	8809883a 	mov	r4,r17
 1445ba0:	14421980 	call	1442198 <__floatsidf>
 1445ba4:	a009883a 	mov	r4,r20
 1445ba8:	a80b883a 	mov	r5,r21
 1445bac:	100d883a 	mov	r6,r2
 1445bb0:	180f883a 	mov	r7,r3
 1445bb4:	144105c0 	call	144105c <__muldf3>
 1445bb8:	1009883a 	mov	r4,r2
 1445bbc:	180b883a 	mov	r5,r3
 1445bc0:	000d883a 	mov	r6,zero
 1445bc4:	01d00734 	movhi	r7,16412
 1445bc8:	144c4340 	call	144c434 <__adddf3>
 1445bcc:	1023883a 	mov	r17,r2
 1445bd0:	00bf3034 	movhi	r2,64704
 1445bd4:	1885883a 	add	r2,r3,r2
 1445bd8:	d8800e15 	stw	r2,56(sp)
 1445bdc:	a009883a 	mov	r4,r20
 1445be0:	a80b883a 	mov	r5,r21
 1445be4:	000d883a 	mov	r6,zero
 1445be8:	01d00534 	movhi	r7,16404
 1445bec:	14418c80 	call	14418c8 <__subdf3>
 1445bf0:	d9c00e17 	ldw	r7,56(sp)
 1445bf4:	1009883a 	mov	r4,r2
 1445bf8:	180b883a 	mov	r5,r3
 1445bfc:	880d883a 	mov	r6,r17
 1445c00:	102b883a 	mov	r21,r2
 1445c04:	1829883a 	mov	r20,r3
 1445c08:	144cd540 	call	144cd54 <__gedf2>
 1445c0c:	00807716 	blt	zero,r2,1445dec <_dtoa_r+0x1388>
 1445c10:	d8800e17 	ldw	r2,56(sp)
 1445c14:	a809883a 	mov	r4,r21
 1445c18:	a00b883a 	mov	r5,r20
 1445c1c:	11e0003c 	xorhi	r7,r2,32768
 1445c20:	880d883a 	mov	r6,r17
 1445c24:	144ce340 	call	144ce34 <__ledf2>
 1445c28:	103d6b0e 	bge	r2,zero,14451d8 <__alt_data_end+0xfffdf9d8>
 1445c2c:	002b883a 	mov	r21,zero
 1445c30:	0023883a 	mov	r17,zero
 1445c34:	003f4c06 	br	1445968 <__alt_data_end+0xfffe0168>
 1445c38:	d9800917 	ldw	r6,36(sp)
 1445c3c:	e00b883a 	mov	r5,fp
 1445c40:	8009883a 	mov	r4,r16
 1445c44:	14487940 	call	1448794 <__pow5mult>
 1445c48:	1039883a 	mov	fp,r2
 1445c4c:	003e2706 	br	14454ec <__alt_data_end+0xfffdfcec>
 1445c50:	d8000b15 	stw	zero,44(sp)
 1445c54:	003c4906 	br	1444d7c <__alt_data_end+0xfffdf57c>
 1445c58:	d9000917 	ldw	r4,36(sp)
 1445c5c:	d9800a17 	ldw	r6,40(sp)
 1445c60:	dd400915 	stw	r21,36(sp)
 1445c64:	a905c83a 	sub	r2,r21,r4
 1445c68:	308d883a 	add	r6,r6,r2
 1445c6c:	d9800a15 	stw	r6,40(sp)
 1445c70:	002b883a 	mov	r21,zero
 1445c74:	003df206 	br	1445440 <__alt_data_end+0xfffdfc40>
 1445c78:	dc800e15 	stw	r18,56(sp)
 1445c7c:	982b883a 	mov	r21,r19
 1445c80:	04400084 	movi	r17,2
 1445c84:	003c7406 	br	1444e58 <__alt_data_end+0xfffdf658>
 1445c88:	04400044 	movi	r17,1
 1445c8c:	dc400d15 	stw	r17,52(sp)
 1445c90:	dc400615 	stw	r17,24(sp)
 1445c94:	dc402215 	stw	r17,136(sp)
 1445c98:	80001115 	stw	zero,68(r16)
 1445c9c:	000b883a 	mov	r5,zero
 1445ca0:	003c4a06 	br	1444dcc <__alt_data_end+0xfffdf5cc>
 1445ca4:	3023883a 	mov	r17,r6
 1445ca8:	003ffb06 	br	1445c98 <__alt_data_end+0xfffe0498>
 1445cac:	1000021e 	bne	r2,zero,1445cb8 <_dtoa_r+0x1254>
 1445cb0:	4200004c 	andi	r8,r8,1
 1445cb4:	403e8f1e 	bne	r8,zero,14456f4 <__alt_data_end+0xfffdfef4>
 1445cb8:	01000c04 	movi	r4,48
 1445cbc:	00000106 	br	1445cc4 <_dtoa_r+0x1260>
 1445cc0:	102f883a 	mov	r23,r2
 1445cc4:	b8bfffc4 	addi	r2,r23,-1
 1445cc8:	10c00007 	ldb	r3,0(r2)
 1445ccc:	193ffc26 	beq	r3,r4,1445cc0 <__alt_data_end+0xfffe04c0>
 1445cd0:	003e9906 	br	1445738 <__alt_data_end+0xfffdff38>
 1445cd4:	d9000517 	ldw	r4,20(sp)
 1445cd8:	012fc83a 	sub	r23,zero,r4
 1445cdc:	b800ad26 	beq	r23,zero,1445f94 <_dtoa_r+0x1530>
 1445ce0:	b88003cc 	andi	r2,r23,15
 1445ce4:	100490fa 	slli	r2,r2,3
 1445ce8:	00c05174 	movhi	r3,325
 1445cec:	18c21204 	addi	r3,r3,2120
 1445cf0:	1885883a 	add	r2,r3,r2
 1445cf4:	11800017 	ldw	r6,0(r2)
 1445cf8:	11c00117 	ldw	r7,4(r2)
 1445cfc:	b82fd13a 	srai	r23,r23,4
 1445d00:	9009883a 	mov	r4,r18
 1445d04:	980b883a 	mov	r5,r19
 1445d08:	144105c0 	call	144105c <__muldf3>
 1445d0c:	1029883a 	mov	r20,r2
 1445d10:	182b883a 	mov	r21,r3
 1445d14:	b800f426 	beq	r23,zero,14460e8 <_dtoa_r+0x1684>
 1445d18:	02005174 	movhi	r8,325
 1445d1c:	42020804 	addi	r8,r8,2080
 1445d20:	8029883a 	mov	r20,r16
 1445d24:	04400084 	movi	r17,2
 1445d28:	4021883a 	mov	r16,r8
 1445d2c:	b980004c 	andi	r6,r23,1
 1445d30:	1009883a 	mov	r4,r2
 1445d34:	b82fd07a 	srai	r23,r23,1
 1445d38:	180b883a 	mov	r5,r3
 1445d3c:	30000426 	beq	r6,zero,1445d50 <_dtoa_r+0x12ec>
 1445d40:	81800017 	ldw	r6,0(r16)
 1445d44:	81c00117 	ldw	r7,4(r16)
 1445d48:	8c400044 	addi	r17,r17,1
 1445d4c:	144105c0 	call	144105c <__muldf3>
 1445d50:	84000204 	addi	r16,r16,8
 1445d54:	b83ff51e 	bne	r23,zero,1445d2c <__alt_data_end+0xfffe052c>
 1445d58:	a021883a 	mov	r16,r20
 1445d5c:	182b883a 	mov	r21,r3
 1445d60:	1029883a 	mov	r20,r2
 1445d64:	003c5506 	br	1444ebc <__alt_data_end+0xfffdf6bc>
 1445d68:	d9800517 	ldw	r6,20(sp)
 1445d6c:	d9000717 	ldw	r4,28(sp)
 1445d70:	00c00c04 	movi	r3,48
 1445d74:	31800044 	addi	r6,r6,1
 1445d78:	d9800515 	stw	r6,20(sp)
 1445d7c:	20c00005 	stb	r3,0(r4)
 1445d80:	02000c44 	movi	r8,49
 1445d84:	003da206 	br	1445410 <__alt_data_end+0xfffdfc10>
 1445d88:	89400117 	ldw	r5,4(r17)
 1445d8c:	8009883a 	mov	r4,r16
 1445d90:	14480a00 	call	14480a0 <_Balloc>
 1445d94:	89800417 	ldw	r6,16(r17)
 1445d98:	11000304 	addi	r4,r2,12
 1445d9c:	89400304 	addi	r5,r17,12
 1445da0:	31800084 	addi	r6,r6,2
 1445da4:	318d883a 	add	r6,r6,r6
 1445da8:	318d883a 	add	r6,r6,r6
 1445dac:	1027883a 	mov	r19,r2
 1445db0:	1447ce80 	call	1447ce8 <memcpy>
 1445db4:	8009883a 	mov	r4,r16
 1445db8:	980b883a 	mov	r5,r19
 1445dbc:	01800044 	movi	r6,1
 1445dc0:	14488d40 	call	14488d4 <__lshift>
 1445dc4:	1029883a 	mov	r20,r2
 1445dc8:	003e8606 	br	14457e4 <__alt_data_end+0xfffdffe4>
 1445dcc:	00800e44 	movi	r2,57
 1445dd0:	90809526 	beq	r18,r2,1446028 <_dtoa_r+0x15c4>
 1445dd4:	92000044 	addi	r8,r18,1
 1445dd8:	003f2306 	br	1445a68 <__alt_data_end+0xfffe0268>
 1445ddc:	9011883a 	mov	r8,r18
 1445de0:	8825883a 	mov	r18,r17
 1445de4:	a023883a 	mov	r17,r20
 1445de8:	003e3706 	br	14456c8 <__alt_data_end+0xfffdfec8>
 1445dec:	002b883a 	mov	r21,zero
 1445df0:	0023883a 	mov	r17,zero
 1445df4:	003f5606 	br	1445b50 <__alt_data_end+0xfffe0350>
 1445df8:	51bfffc4 	addi	r6,r10,-1
 1445dfc:	300490fa 	slli	r2,r6,3
 1445e00:	00c05174 	movhi	r3,325
 1445e04:	18c21204 	addi	r3,r3,2120
 1445e08:	1885883a 	add	r2,r3,r2
 1445e0c:	d9c00e17 	ldw	r7,56(sp)
 1445e10:	11000017 	ldw	r4,0(r2)
 1445e14:	11400117 	ldw	r5,4(r2)
 1445e18:	d8800717 	ldw	r2,28(sp)
 1445e1c:	d9801015 	stw	r6,64(sp)
 1445e20:	880d883a 	mov	r6,r17
 1445e24:	da801615 	stw	r10,88(sp)
 1445e28:	15c00044 	addi	r23,r2,1
 1445e2c:	144105c0 	call	144105c <__muldf3>
 1445e30:	a80b883a 	mov	r5,r21
 1445e34:	a009883a 	mov	r4,r20
 1445e38:	d8c01115 	stw	r3,68(sp)
 1445e3c:	d8800e15 	stw	r2,56(sp)
 1445e40:	144cf140 	call	144cf14 <__fixdfsi>
 1445e44:	1009883a 	mov	r4,r2
 1445e48:	1023883a 	mov	r17,r2
 1445e4c:	14421980 	call	1442198 <__floatsidf>
 1445e50:	a009883a 	mov	r4,r20
 1445e54:	a80b883a 	mov	r5,r21
 1445e58:	100d883a 	mov	r6,r2
 1445e5c:	180f883a 	mov	r7,r3
 1445e60:	14418c80 	call	14418c8 <__subdf3>
 1445e64:	1813883a 	mov	r9,r3
 1445e68:	d8c00717 	ldw	r3,28(sp)
 1445e6c:	8c400c04 	addi	r17,r17,48
 1445e70:	1011883a 	mov	r8,r2
 1445e74:	1c400005 	stb	r17,0(r3)
 1445e78:	da801617 	ldw	r10,88(sp)
 1445e7c:	00800044 	movi	r2,1
 1445e80:	50802326 	beq	r10,r2,1445f10 <_dtoa_r+0x14ac>
 1445e84:	d8800717 	ldw	r2,28(sp)
 1445e88:	b82b883a 	mov	r21,r23
 1445e8c:	dc001315 	stw	r16,76(sp)
 1445e90:	12a9883a 	add	r20,r2,r10
 1445e94:	4807883a 	mov	r3,r9
 1445e98:	4005883a 	mov	r2,r8
 1445e9c:	dc801415 	stw	r18,80(sp)
 1445ea0:	000d883a 	mov	r6,zero
 1445ea4:	01d00934 	movhi	r7,16420
 1445ea8:	1009883a 	mov	r4,r2
 1445eac:	180b883a 	mov	r5,r3
 1445eb0:	144105c0 	call	144105c <__muldf3>
 1445eb4:	180b883a 	mov	r5,r3
 1445eb8:	1009883a 	mov	r4,r2
 1445ebc:	1821883a 	mov	r16,r3
 1445ec0:	1025883a 	mov	r18,r2
 1445ec4:	144cf140 	call	144cf14 <__fixdfsi>
 1445ec8:	1009883a 	mov	r4,r2
 1445ecc:	1023883a 	mov	r17,r2
 1445ed0:	14421980 	call	1442198 <__floatsidf>
 1445ed4:	9009883a 	mov	r4,r18
 1445ed8:	800b883a 	mov	r5,r16
 1445edc:	100d883a 	mov	r6,r2
 1445ee0:	180f883a 	mov	r7,r3
 1445ee4:	8c400c04 	addi	r17,r17,48
 1445ee8:	14418c80 	call	14418c8 <__subdf3>
 1445eec:	ad400044 	addi	r21,r21,1
 1445ef0:	ac7fffc5 	stb	r17,-1(r21)
 1445ef4:	ad3fea1e 	bne	r21,r20,1445ea0 <__alt_data_end+0xfffe06a0>
 1445ef8:	1813883a 	mov	r9,r3
 1445efc:	d8c01017 	ldw	r3,64(sp)
 1445f00:	dc001317 	ldw	r16,76(sp)
 1445f04:	dc801417 	ldw	r18,80(sp)
 1445f08:	1011883a 	mov	r8,r2
 1445f0c:	b8ef883a 	add	r23,r23,r3
 1445f10:	d9000e17 	ldw	r4,56(sp)
 1445f14:	d9401117 	ldw	r5,68(sp)
 1445f18:	000d883a 	mov	r6,zero
 1445f1c:	01cff834 	movhi	r7,16352
 1445f20:	da001715 	stw	r8,92(sp)
 1445f24:	da401515 	stw	r9,84(sp)
 1445f28:	144c4340 	call	144c434 <__adddf3>
 1445f2c:	da001717 	ldw	r8,92(sp)
 1445f30:	da401517 	ldw	r9,84(sp)
 1445f34:	1009883a 	mov	r4,r2
 1445f38:	400d883a 	mov	r6,r8
 1445f3c:	480f883a 	mov	r7,r9
 1445f40:	180b883a 	mov	r5,r3
 1445f44:	144ce340 	call	144ce34 <__ledf2>
 1445f48:	da001717 	ldw	r8,92(sp)
 1445f4c:	da401517 	ldw	r9,84(sp)
 1445f50:	10003b0e 	bge	r2,zero,1446040 <_dtoa_r+0x15dc>
 1445f54:	d9001217 	ldw	r4,72(sp)
 1445f58:	bd7fffc3 	ldbu	r21,-1(r23)
 1445f5c:	d9000515 	stw	r4,20(sp)
 1445f60:	003d1c06 	br	14453d4 <__alt_data_end+0xfffdfbd4>
 1445f64:	d8c00817 	ldw	r3,32(sp)
 1445f68:	18a9c83a 	sub	r20,r3,r2
 1445f6c:	0005883a 	mov	r2,zero
 1445f70:	003d3706 	br	1445450 <__alt_data_end+0xfffdfc50>
 1445f74:	00800044 	movi	r2,1
 1445f78:	003dd006 	br	14456bc <__alt_data_end+0xfffdfebc>
 1445f7c:	d8c00217 	ldw	r3,8(sp)
 1445f80:	00800d84 	movi	r2,54
 1445f84:	dd400917 	ldw	r21,36(sp)
 1445f88:	10c5c83a 	sub	r2,r2,r3
 1445f8c:	dd000817 	ldw	r20,32(sp)
 1445f90:	003d2f06 	br	1445450 <__alt_data_end+0xfffdfc50>
 1445f94:	9029883a 	mov	r20,r18
 1445f98:	982b883a 	mov	r21,r19
 1445f9c:	04400084 	movi	r17,2
 1445fa0:	003bc606 	br	1444ebc <__alt_data_end+0xfffdf6bc>
 1445fa4:	d8800617 	ldw	r2,24(sp)
 1445fa8:	103efc26 	beq	r2,zero,1445b9c <__alt_data_end+0xfffe039c>
 1445fac:	d8c00d17 	ldw	r3,52(sp)
 1445fb0:	00fc890e 	bge	zero,r3,14451d8 <__alt_data_end+0xfffdf9d8>
 1445fb4:	a80b883a 	mov	r5,r21
 1445fb8:	a009883a 	mov	r4,r20
 1445fbc:	000d883a 	mov	r6,zero
 1445fc0:	01d00934 	movhi	r7,16420
 1445fc4:	144105c0 	call	144105c <__muldf3>
 1445fc8:	89000044 	addi	r4,r17,1
 1445fcc:	1029883a 	mov	r20,r2
 1445fd0:	182b883a 	mov	r21,r3
 1445fd4:	14421980 	call	1442198 <__floatsidf>
 1445fd8:	a009883a 	mov	r4,r20
 1445fdc:	a80b883a 	mov	r5,r21
 1445fe0:	100d883a 	mov	r6,r2
 1445fe4:	180f883a 	mov	r7,r3
 1445fe8:	144105c0 	call	144105c <__muldf3>
 1445fec:	1009883a 	mov	r4,r2
 1445ff0:	180b883a 	mov	r5,r3
 1445ff4:	000d883a 	mov	r6,zero
 1445ff8:	01d00734 	movhi	r7,16412
 1445ffc:	144c4340 	call	144c434 <__adddf3>
 1446000:	d9000517 	ldw	r4,20(sp)
 1446004:	1023883a 	mov	r17,r2
 1446008:	00bf3034 	movhi	r2,64704
 144600c:	213fffc4 	addi	r4,r4,-1
 1446010:	1885883a 	add	r2,r3,r2
 1446014:	d9001215 	stw	r4,72(sp)
 1446018:	d8800e15 	stw	r2,56(sp)
 144601c:	da800d17 	ldw	r10,52(sp)
 1446020:	003bc306 	br	1444f30 <__alt_data_end+0xfffdf730>
 1446024:	b039883a 	mov	fp,r22
 1446028:	01000e44 	movi	r4,57
 144602c:	8825883a 	mov	r18,r17
 1446030:	9dc00044 	addi	r23,r19,1
 1446034:	99000005 	stb	r4,0(r19)
 1446038:	a023883a 	mov	r17,r20
 144603c:	003dae06 	br	14456f8 <__alt_data_end+0xfffdfef8>
 1446040:	d9800e17 	ldw	r6,56(sp)
 1446044:	d9c01117 	ldw	r7,68(sp)
 1446048:	0009883a 	mov	r4,zero
 144604c:	014ff834 	movhi	r5,16352
 1446050:	da001715 	stw	r8,92(sp)
 1446054:	da401515 	stw	r9,84(sp)
 1446058:	14418c80 	call	14418c8 <__subdf3>
 144605c:	da001717 	ldw	r8,92(sp)
 1446060:	da401517 	ldw	r9,84(sp)
 1446064:	1009883a 	mov	r4,r2
 1446068:	180b883a 	mov	r5,r3
 144606c:	400d883a 	mov	r6,r8
 1446070:	480f883a 	mov	r7,r9
 1446074:	144cd540 	call	144cd54 <__gedf2>
 1446078:	00bc570e 	bge	zero,r2,14451d8 <__alt_data_end+0xfffdf9d8>
 144607c:	01000c04 	movi	r4,48
 1446080:	00000106 	br	1446088 <_dtoa_r+0x1624>
 1446084:	102f883a 	mov	r23,r2
 1446088:	b8bfffc4 	addi	r2,r23,-1
 144608c:	10c00007 	ldb	r3,0(r2)
 1446090:	193ffc26 	beq	r3,r4,1446084 <__alt_data_end+0xfffe0884>
 1446094:	d9801217 	ldw	r6,72(sp)
 1446098:	d9800515 	stw	r6,20(sp)
 144609c:	003c1f06 	br	144511c <__alt_data_end+0xfffdf91c>
 14460a0:	d8801217 	ldw	r2,72(sp)
 14460a4:	dc001117 	ldw	r16,68(sp)
 14460a8:	d8800515 	stw	r2,20(sp)
 14460ac:	003cc906 	br	14453d4 <__alt_data_end+0xfffdfbd4>
 14460b0:	dd801317 	ldw	r22,76(sp)
 14460b4:	dc001117 	ldw	r16,68(sp)
 14460b8:	dcc01417 	ldw	r19,80(sp)
 14460bc:	dc801017 	ldw	r18,64(sp)
 14460c0:	003c4506 	br	14451d8 <__alt_data_end+0xfffdf9d8>
 14460c4:	103e5d1e 	bne	r2,zero,1445a3c <__alt_data_end+0xfffe023c>
 14460c8:	4080004c 	andi	r2,r8,1
 14460cc:	103e5b26 	beq	r2,zero,1445a3c <__alt_data_end+0xfffe023c>
 14460d0:	003e5706 	br	1445a30 <__alt_data_end+0xfffe0230>
 14460d4:	d8c00317 	ldw	r3,12(sp)
 14460d8:	00800084 	movi	r2,2
 14460dc:	10c00a16 	blt	r2,r3,1446108 <_dtoa_r+0x16a4>
 14460e0:	d9000d17 	ldw	r4,52(sp)
 14460e4:	003e8306 	br	1445af4 <__alt_data_end+0xfffe02f4>
 14460e8:	04400084 	movi	r17,2
 14460ec:	003b7306 	br	1444ebc <__alt_data_end+0xfffdf6bc>
 14460f0:	d9801217 	ldw	r6,72(sp)
 14460f4:	d9800515 	stw	r6,20(sp)
 14460f8:	003cb606 	br	14453d4 <__alt_data_end+0xfffdfbd4>
 14460fc:	d9001217 	ldw	r4,72(sp)
 1446100:	d9000515 	stw	r4,20(sp)
 1446104:	003c0506 	br	144511c <__alt_data_end+0xfffdf91c>
 1446108:	d9800d17 	ldw	r6,52(sp)
 144610c:	d9800615 	stw	r6,24(sp)
 1446110:	003e8306 	br	1445b20 <__alt_data_end+0xfffe0320>
 1446114:	d9800317 	ldw	r6,12(sp)
 1446118:	00800084 	movi	r2,2
 144611c:	11800216 	blt	r2,r6,1446128 <_dtoa_r+0x16c4>
 1446120:	d8800d17 	ldw	r2,52(sp)
 1446124:	003da606 	br	14457c0 <__alt_data_end+0xfffdffc0>
 1446128:	d8800d17 	ldw	r2,52(sp)
 144612c:	d8800615 	stw	r2,24(sp)
 1446130:	003e7b06 	br	1445b20 <__alt_data_end+0xfffe0320>
 1446134:	05000044 	movi	r20,1
 1446138:	003b0506 	br	1444d50 <__alt_data_end+0xfffdf550>
 144613c:	8009883a 	mov	r4,r16
 1446140:	80001115 	stw	zero,68(r16)
 1446144:	000b883a 	mov	r5,zero
 1446148:	14480a00 	call	14480a0 <_Balloc>
 144614c:	d8800715 	stw	r2,28(sp)
 1446150:	d8c00717 	ldw	r3,28(sp)
 1446154:	00bfffc4 	movi	r2,-1
 1446158:	01000044 	movi	r4,1
 144615c:	d8800615 	stw	r2,24(sp)
 1446160:	80c01015 	stw	r3,64(r16)
 1446164:	d9000b15 	stw	r4,44(sp)
 1446168:	d8002215 	stw	zero,136(sp)
 144616c:	d8800d15 	stw	r2,52(sp)
 1446170:	003c1906 	br	14451d8 <__alt_data_end+0xfffdf9d8>
 1446174:	193d2926 	beq	r3,r4,144561c <__alt_data_end+0xfffdfe1c>
 1446178:	00c00f04 	movi	r3,60
 144617c:	1885c83a 	sub	r2,r3,r2
 1446180:	003d7b06 	br	1445770 <__alt_data_end+0xfffdff70>
 1446184:	000b883a 	mov	r5,zero
 1446188:	003b1006 	br	1444dcc <__alt_data_end+0xfffdf5cc>

0144618c <_fflush_r>:
 144618c:	defffb04 	addi	sp,sp,-20
 1446190:	dcc00315 	stw	r19,12(sp)
 1446194:	dc000015 	stw	r16,0(sp)
 1446198:	dfc00415 	stw	ra,16(sp)
 144619c:	dc800215 	stw	r18,8(sp)
 14461a0:	dc400115 	stw	r17,4(sp)
 14461a4:	2027883a 	mov	r19,r4
 14461a8:	2821883a 	mov	r16,r5
 14461ac:	20000226 	beq	r4,zero,14461b8 <_fflush_r+0x2c>
 14461b0:	20800e17 	ldw	r2,56(r4)
 14461b4:	10005326 	beq	r2,zero,1446304 <_fflush_r+0x178>
 14461b8:	8080030b 	ldhu	r2,12(r16)
 14461bc:	10ffffcc 	andi	r3,r2,65535
 14461c0:	18e0001c 	xori	r3,r3,32768
 14461c4:	18e00004 	addi	r3,r3,-32768
 14461c8:	18002c26 	beq	r3,zero,144627c <_fflush_r+0xf0>
 14461cc:	10c0020c 	andi	r3,r2,8
 14461d0:	1800321e 	bne	r3,zero,144629c <_fflush_r+0x110>
 14461d4:	80c00117 	ldw	r3,4(r16)
 14461d8:	10820014 	ori	r2,r2,2048
 14461dc:	8080030d 	sth	r2,12(r16)
 14461e0:	00c0570e 	bge	zero,r3,1446340 <_fflush_r+0x1b4>
 14461e4:	82000a17 	ldw	r8,40(r16)
 14461e8:	40002426 	beq	r8,zero,144627c <_fflush_r+0xf0>
 14461ec:	9c400017 	ldw	r17,0(r19)
 14461f0:	10c4000c 	andi	r3,r2,4096
 14461f4:	98000015 	stw	zero,0(r19)
 14461f8:	18004626 	beq	r3,zero,1446314 <_fflush_r+0x188>
 14461fc:	81801417 	ldw	r6,80(r16)
 1446200:	10c0010c 	andi	r3,r2,4
 1446204:	18000626 	beq	r3,zero,1446220 <_fflush_r+0x94>
 1446208:	80c00117 	ldw	r3,4(r16)
 144620c:	80800c17 	ldw	r2,48(r16)
 1446210:	30cdc83a 	sub	r6,r6,r3
 1446214:	10000226 	beq	r2,zero,1446220 <_fflush_r+0x94>
 1446218:	80800f17 	ldw	r2,60(r16)
 144621c:	308dc83a 	sub	r6,r6,r2
 1446220:	81400717 	ldw	r5,28(r16)
 1446224:	9809883a 	mov	r4,r19
 1446228:	000f883a 	mov	r7,zero
 144622c:	403ee83a 	callr	r8
 1446230:	00ffffc4 	movi	r3,-1
 1446234:	10c04526 	beq	r2,r3,144634c <_fflush_r+0x1c0>
 1446238:	80c0030b 	ldhu	r3,12(r16)
 144623c:	81000417 	ldw	r4,16(r16)
 1446240:	80000115 	stw	zero,4(r16)
 1446244:	197dffcc 	andi	r5,r3,63487
 1446248:	8140030d 	sth	r5,12(r16)
 144624c:	81000015 	stw	r4,0(r16)
 1446250:	18c4000c 	andi	r3,r3,4096
 1446254:	18000126 	beq	r3,zero,144625c <_fflush_r+0xd0>
 1446258:	80801415 	stw	r2,80(r16)
 144625c:	81400c17 	ldw	r5,48(r16)
 1446260:	9c400015 	stw	r17,0(r19)
 1446264:	28000526 	beq	r5,zero,144627c <_fflush_r+0xf0>
 1446268:	80801004 	addi	r2,r16,64
 144626c:	28800226 	beq	r5,r2,1446278 <_fflush_r+0xec>
 1446270:	9809883a 	mov	r4,r19
 1446274:	14468bc0 	call	14468bc <_free_r>
 1446278:	80000c15 	stw	zero,48(r16)
 144627c:	0005883a 	mov	r2,zero
 1446280:	dfc00417 	ldw	ra,16(sp)
 1446284:	dcc00317 	ldw	r19,12(sp)
 1446288:	dc800217 	ldw	r18,8(sp)
 144628c:	dc400117 	ldw	r17,4(sp)
 1446290:	dc000017 	ldw	r16,0(sp)
 1446294:	dec00504 	addi	sp,sp,20
 1446298:	f800283a 	ret
 144629c:	84800417 	ldw	r18,16(r16)
 14462a0:	903ff626 	beq	r18,zero,144627c <__alt_data_end+0xfffe0a7c>
 14462a4:	84400017 	ldw	r17,0(r16)
 14462a8:	108000cc 	andi	r2,r2,3
 14462ac:	84800015 	stw	r18,0(r16)
 14462b0:	8ca3c83a 	sub	r17,r17,r18
 14462b4:	10001526 	beq	r2,zero,144630c <_fflush_r+0x180>
 14462b8:	0005883a 	mov	r2,zero
 14462bc:	80800215 	stw	r2,8(r16)
 14462c0:	04400316 	blt	zero,r17,14462d0 <_fflush_r+0x144>
 14462c4:	003fed06 	br	144627c <__alt_data_end+0xfffe0a7c>
 14462c8:	90a5883a 	add	r18,r18,r2
 14462cc:	047feb0e 	bge	zero,r17,144627c <__alt_data_end+0xfffe0a7c>
 14462d0:	80800917 	ldw	r2,36(r16)
 14462d4:	81400717 	ldw	r5,28(r16)
 14462d8:	880f883a 	mov	r7,r17
 14462dc:	900d883a 	mov	r6,r18
 14462e0:	9809883a 	mov	r4,r19
 14462e4:	103ee83a 	callr	r2
 14462e8:	88a3c83a 	sub	r17,r17,r2
 14462ec:	00bff616 	blt	zero,r2,14462c8 <__alt_data_end+0xfffe0ac8>
 14462f0:	80c0030b 	ldhu	r3,12(r16)
 14462f4:	00bfffc4 	movi	r2,-1
 14462f8:	18c01014 	ori	r3,r3,64
 14462fc:	80c0030d 	sth	r3,12(r16)
 1446300:	003fdf06 	br	1446280 <__alt_data_end+0xfffe0a80>
 1446304:	14467480 	call	1446748 <__sinit>
 1446308:	003fab06 	br	14461b8 <__alt_data_end+0xfffe09b8>
 144630c:	80800517 	ldw	r2,20(r16)
 1446310:	003fea06 	br	14462bc <__alt_data_end+0xfffe0abc>
 1446314:	81400717 	ldw	r5,28(r16)
 1446318:	000d883a 	mov	r6,zero
 144631c:	9809883a 	mov	r4,r19
 1446320:	01c00044 	movi	r7,1
 1446324:	403ee83a 	callr	r8
 1446328:	100d883a 	mov	r6,r2
 144632c:	00bfffc4 	movi	r2,-1
 1446330:	30801326 	beq	r6,r2,1446380 <_fflush_r+0x1f4>
 1446334:	8080030b 	ldhu	r2,12(r16)
 1446338:	82000a17 	ldw	r8,40(r16)
 144633c:	003fb006 	br	1446200 <__alt_data_end+0xfffe0a00>
 1446340:	80c00f17 	ldw	r3,60(r16)
 1446344:	00ffa716 	blt	zero,r3,14461e4 <__alt_data_end+0xfffe09e4>
 1446348:	003fcc06 	br	144627c <__alt_data_end+0xfffe0a7c>
 144634c:	98c00017 	ldw	r3,0(r19)
 1446350:	183fb926 	beq	r3,zero,1446238 <__alt_data_end+0xfffe0a38>
 1446354:	01000744 	movi	r4,29
 1446358:	19000226 	beq	r3,r4,1446364 <_fflush_r+0x1d8>
 144635c:	01000584 	movi	r4,22
 1446360:	1900101e 	bne	r3,r4,14463a4 <_fflush_r+0x218>
 1446364:	8080030b 	ldhu	r2,12(r16)
 1446368:	80c00417 	ldw	r3,16(r16)
 144636c:	80000115 	stw	zero,4(r16)
 1446370:	10bdffcc 	andi	r2,r2,63487
 1446374:	8080030d 	sth	r2,12(r16)
 1446378:	80c00015 	stw	r3,0(r16)
 144637c:	003fb706 	br	144625c <__alt_data_end+0xfffe0a5c>
 1446380:	98800017 	ldw	r2,0(r19)
 1446384:	103feb26 	beq	r2,zero,1446334 <__alt_data_end+0xfffe0b34>
 1446388:	00c00744 	movi	r3,29
 144638c:	10c00226 	beq	r2,r3,1446398 <_fflush_r+0x20c>
 1446390:	00c00584 	movi	r3,22
 1446394:	10ffd61e 	bne	r2,r3,14462f0 <__alt_data_end+0xfffe0af0>
 1446398:	9c400015 	stw	r17,0(r19)
 144639c:	0005883a 	mov	r2,zero
 14463a0:	003fb706 	br	1446280 <__alt_data_end+0xfffe0a80>
 14463a4:	80c0030b 	ldhu	r3,12(r16)
 14463a8:	18c01014 	ori	r3,r3,64
 14463ac:	80c0030d 	sth	r3,12(r16)
 14463b0:	003fb306 	br	1446280 <__alt_data_end+0xfffe0a80>

014463b4 <fflush>:
 14463b4:	20000526 	beq	r4,zero,14463cc <fflush+0x18>
 14463b8:	00805174 	movhi	r2,325
 14463bc:	10855204 	addi	r2,r2,5448
 14463c0:	200b883a 	mov	r5,r4
 14463c4:	11000017 	ldw	r4,0(r2)
 14463c8:	144618c1 	jmpi	144618c <_fflush_r>
 14463cc:	00805174 	movhi	r2,325
 14463d0:	10855104 	addi	r2,r2,5444
 14463d4:	11000017 	ldw	r4,0(r2)
 14463d8:	01405134 	movhi	r5,324
 14463dc:	29586304 	addi	r5,r5,24972
 14463e0:	14471081 	jmpi	1447108 <_fwalk_reent>

014463e4 <__fp_lock>:
 14463e4:	0005883a 	mov	r2,zero
 14463e8:	f800283a 	ret

014463ec <__fp_unlock>:
 14463ec:	0005883a 	mov	r2,zero
 14463f0:	f800283a 	ret

014463f4 <_cleanup_r>:
 14463f4:	01405174 	movhi	r5,325
 14463f8:	296c4504 	addi	r5,r5,-20204
 14463fc:	14470501 	jmpi	1447050 <_fwalk>

01446400 <__sinit.part.1>:
 1446400:	defff604 	addi	sp,sp,-40
 1446404:	00c05134 	movhi	r3,324
 1446408:	dfc00915 	stw	ra,36(sp)
 144640c:	df000815 	stw	fp,32(sp)
 1446410:	ddc00715 	stw	r23,28(sp)
 1446414:	dd800615 	stw	r22,24(sp)
 1446418:	dd400515 	stw	r21,20(sp)
 144641c:	dd000415 	stw	r20,16(sp)
 1446420:	dcc00315 	stw	r19,12(sp)
 1446424:	dc800215 	stw	r18,8(sp)
 1446428:	dc400115 	stw	r17,4(sp)
 144642c:	dc000015 	stw	r16,0(sp)
 1446430:	18d8fd04 	addi	r3,r3,25588
 1446434:	24000117 	ldw	r16,4(r4)
 1446438:	20c00f15 	stw	r3,60(r4)
 144643c:	07000044 	movi	fp,1
 1446440:	00c000c4 	movi	r3,3
 1446444:	2080bb04 	addi	r2,r4,748
 1446448:	20c0b915 	stw	r3,740(r4)
 144644c:	27000e15 	stw	fp,56(r4)
 1446450:	2080ba15 	stw	r2,744(r4)
 1446454:	2000b815 	stw	zero,736(r4)
 1446458:	05c00204 	movi	r23,8
 144645c:	00800104 	movi	r2,4
 1446460:	2025883a 	mov	r18,r4
 1446464:	b80d883a 	mov	r6,r23
 1446468:	81001704 	addi	r4,r16,92
 144646c:	000b883a 	mov	r5,zero
 1446470:	80000015 	stw	zero,0(r16)
 1446474:	80000115 	stw	zero,4(r16)
 1446478:	80000215 	stw	zero,8(r16)
 144647c:	8080030d 	sth	r2,12(r16)
 1446480:	80001915 	stw	zero,100(r16)
 1446484:	8000038d 	sth	zero,14(r16)
 1446488:	80000415 	stw	zero,16(r16)
 144648c:	80000515 	stw	zero,20(r16)
 1446490:	80000615 	stw	zero,24(r16)
 1446494:	1447f7c0 	call	1447f7c <memset>
 1446498:	05805174 	movhi	r22,325
 144649c:	94400217 	ldw	r17,8(r18)
 14464a0:	05405174 	movhi	r21,325
 14464a4:	05005174 	movhi	r20,325
 14464a8:	04c05174 	movhi	r19,325
 14464ac:	b5a5d404 	addi	r22,r22,-26800
 14464b0:	ad65eb04 	addi	r21,r21,-26708
 14464b4:	a5260a04 	addi	r20,r20,-26584
 14464b8:	9ce62104 	addi	r19,r19,-26492
 14464bc:	85800815 	stw	r22,32(r16)
 14464c0:	85400915 	stw	r21,36(r16)
 14464c4:	85000a15 	stw	r20,40(r16)
 14464c8:	84c00b15 	stw	r19,44(r16)
 14464cc:	84000715 	stw	r16,28(r16)
 14464d0:	00800284 	movi	r2,10
 14464d4:	89001704 	addi	r4,r17,92
 14464d8:	b80d883a 	mov	r6,r23
 14464dc:	000b883a 	mov	r5,zero
 14464e0:	88000015 	stw	zero,0(r17)
 14464e4:	88000115 	stw	zero,4(r17)
 14464e8:	88000215 	stw	zero,8(r17)
 14464ec:	8880030d 	sth	r2,12(r17)
 14464f0:	88001915 	stw	zero,100(r17)
 14464f4:	8f00038d 	sth	fp,14(r17)
 14464f8:	88000415 	stw	zero,16(r17)
 14464fc:	88000515 	stw	zero,20(r17)
 1446500:	88000615 	stw	zero,24(r17)
 1446504:	1447f7c0 	call	1447f7c <memset>
 1446508:	94000317 	ldw	r16,12(r18)
 144650c:	00800484 	movi	r2,18
 1446510:	8c400715 	stw	r17,28(r17)
 1446514:	8d800815 	stw	r22,32(r17)
 1446518:	8d400915 	stw	r21,36(r17)
 144651c:	8d000a15 	stw	r20,40(r17)
 1446520:	8cc00b15 	stw	r19,44(r17)
 1446524:	8080030d 	sth	r2,12(r16)
 1446528:	00800084 	movi	r2,2
 144652c:	80000015 	stw	zero,0(r16)
 1446530:	80000115 	stw	zero,4(r16)
 1446534:	80000215 	stw	zero,8(r16)
 1446538:	80001915 	stw	zero,100(r16)
 144653c:	8080038d 	sth	r2,14(r16)
 1446540:	80000415 	stw	zero,16(r16)
 1446544:	80000515 	stw	zero,20(r16)
 1446548:	80000615 	stw	zero,24(r16)
 144654c:	81001704 	addi	r4,r16,92
 1446550:	000b883a 	mov	r5,zero
 1446554:	b80d883a 	mov	r6,r23
 1446558:	1447f7c0 	call	1447f7c <memset>
 144655c:	84000715 	stw	r16,28(r16)
 1446560:	85800815 	stw	r22,32(r16)
 1446564:	85400915 	stw	r21,36(r16)
 1446568:	85000a15 	stw	r20,40(r16)
 144656c:	84c00b15 	stw	r19,44(r16)
 1446570:	dfc00917 	ldw	ra,36(sp)
 1446574:	df000817 	ldw	fp,32(sp)
 1446578:	ddc00717 	ldw	r23,28(sp)
 144657c:	dd800617 	ldw	r22,24(sp)
 1446580:	dd400517 	ldw	r21,20(sp)
 1446584:	dd000417 	ldw	r20,16(sp)
 1446588:	dcc00317 	ldw	r19,12(sp)
 144658c:	dc800217 	ldw	r18,8(sp)
 1446590:	dc400117 	ldw	r17,4(sp)
 1446594:	dc000017 	ldw	r16,0(sp)
 1446598:	dec00a04 	addi	sp,sp,40
 144659c:	f800283a 	ret

014465a0 <__sfmoreglue>:
 14465a0:	defffc04 	addi	sp,sp,-16
 14465a4:	dc800215 	stw	r18,8(sp)
 14465a8:	2825883a 	mov	r18,r5
 14465ac:	dc000015 	stw	r16,0(sp)
 14465b0:	01401a04 	movi	r5,104
 14465b4:	2021883a 	mov	r16,r4
 14465b8:	9009883a 	mov	r4,r18
 14465bc:	dfc00315 	stw	ra,12(sp)
 14465c0:	dc400115 	stw	r17,4(sp)
 14465c4:	14423f80 	call	14423f8 <__mulsi3>
 14465c8:	8009883a 	mov	r4,r16
 14465cc:	11400304 	addi	r5,r2,12
 14465d0:	1023883a 	mov	r17,r2
 14465d4:	14474580 	call	1447458 <_malloc_r>
 14465d8:	1021883a 	mov	r16,r2
 14465dc:	10000726 	beq	r2,zero,14465fc <__sfmoreglue+0x5c>
 14465e0:	11000304 	addi	r4,r2,12
 14465e4:	10000015 	stw	zero,0(r2)
 14465e8:	14800115 	stw	r18,4(r2)
 14465ec:	11000215 	stw	r4,8(r2)
 14465f0:	000b883a 	mov	r5,zero
 14465f4:	880d883a 	mov	r6,r17
 14465f8:	1447f7c0 	call	1447f7c <memset>
 14465fc:	8005883a 	mov	r2,r16
 1446600:	dfc00317 	ldw	ra,12(sp)
 1446604:	dc800217 	ldw	r18,8(sp)
 1446608:	dc400117 	ldw	r17,4(sp)
 144660c:	dc000017 	ldw	r16,0(sp)
 1446610:	dec00404 	addi	sp,sp,16
 1446614:	f800283a 	ret

01446618 <__sfp>:
 1446618:	00805174 	movhi	r2,325
 144661c:	defffb04 	addi	sp,sp,-20
 1446620:	10855104 	addi	r2,r2,5444
 1446624:	dc800215 	stw	r18,8(sp)
 1446628:	14800017 	ldw	r18,0(r2)
 144662c:	dcc00315 	stw	r19,12(sp)
 1446630:	dfc00415 	stw	ra,16(sp)
 1446634:	90800e17 	ldw	r2,56(r18)
 1446638:	dc400115 	stw	r17,4(sp)
 144663c:	dc000015 	stw	r16,0(sp)
 1446640:	2027883a 	mov	r19,r4
 1446644:	1000021e 	bne	r2,zero,1446650 <__sfp+0x38>
 1446648:	9009883a 	mov	r4,r18
 144664c:	14464000 	call	1446400 <__sinit.part.1>
 1446650:	9480b804 	addi	r18,r18,736
 1446654:	047fffc4 	movi	r17,-1
 1446658:	91400117 	ldw	r5,4(r18)
 144665c:	94000217 	ldw	r16,8(r18)
 1446660:	297fffc4 	addi	r5,r5,-1
 1446664:	28000a16 	blt	r5,zero,1446690 <__sfp+0x78>
 1446668:	8080030f 	ldh	r2,12(r16)
 144666c:	10000c26 	beq	r2,zero,14466a0 <__sfp+0x88>
 1446670:	80c01d04 	addi	r3,r16,116
 1446674:	00000206 	br	1446680 <__sfp+0x68>
 1446678:	18bfe60f 	ldh	r2,-104(r3)
 144667c:	10000826 	beq	r2,zero,14466a0 <__sfp+0x88>
 1446680:	297fffc4 	addi	r5,r5,-1
 1446684:	1c3ffd04 	addi	r16,r3,-12
 1446688:	18c01a04 	addi	r3,r3,104
 144668c:	2c7ffa1e 	bne	r5,r17,1446678 <__alt_data_end+0xfffe0e78>
 1446690:	90800017 	ldw	r2,0(r18)
 1446694:	10001d26 	beq	r2,zero,144670c <__sfp+0xf4>
 1446698:	1025883a 	mov	r18,r2
 144669c:	003fee06 	br	1446658 <__alt_data_end+0xfffe0e58>
 14466a0:	00bfffc4 	movi	r2,-1
 14466a4:	8080038d 	sth	r2,14(r16)
 14466a8:	00800044 	movi	r2,1
 14466ac:	8080030d 	sth	r2,12(r16)
 14466b0:	80001915 	stw	zero,100(r16)
 14466b4:	80000015 	stw	zero,0(r16)
 14466b8:	80000215 	stw	zero,8(r16)
 14466bc:	80000115 	stw	zero,4(r16)
 14466c0:	80000415 	stw	zero,16(r16)
 14466c4:	80000515 	stw	zero,20(r16)
 14466c8:	80000615 	stw	zero,24(r16)
 14466cc:	81001704 	addi	r4,r16,92
 14466d0:	000b883a 	mov	r5,zero
 14466d4:	01800204 	movi	r6,8
 14466d8:	1447f7c0 	call	1447f7c <memset>
 14466dc:	8005883a 	mov	r2,r16
 14466e0:	80000c15 	stw	zero,48(r16)
 14466e4:	80000d15 	stw	zero,52(r16)
 14466e8:	80001115 	stw	zero,68(r16)
 14466ec:	80001215 	stw	zero,72(r16)
 14466f0:	dfc00417 	ldw	ra,16(sp)
 14466f4:	dcc00317 	ldw	r19,12(sp)
 14466f8:	dc800217 	ldw	r18,8(sp)
 14466fc:	dc400117 	ldw	r17,4(sp)
 1446700:	dc000017 	ldw	r16,0(sp)
 1446704:	dec00504 	addi	sp,sp,20
 1446708:	f800283a 	ret
 144670c:	9809883a 	mov	r4,r19
 1446710:	01400104 	movi	r5,4
 1446714:	14465a00 	call	14465a0 <__sfmoreglue>
 1446718:	90800015 	stw	r2,0(r18)
 144671c:	103fde1e 	bne	r2,zero,1446698 <__alt_data_end+0xfffe0e98>
 1446720:	00800304 	movi	r2,12
 1446724:	98800015 	stw	r2,0(r19)
 1446728:	0005883a 	mov	r2,zero
 144672c:	003ff006 	br	14466f0 <__alt_data_end+0xfffe0ef0>

01446730 <_cleanup>:
 1446730:	00805174 	movhi	r2,325
 1446734:	10855104 	addi	r2,r2,5444
 1446738:	11000017 	ldw	r4,0(r2)
 144673c:	01405174 	movhi	r5,325
 1446740:	296c4504 	addi	r5,r5,-20204
 1446744:	14470501 	jmpi	1447050 <_fwalk>

01446748 <__sinit>:
 1446748:	20800e17 	ldw	r2,56(r4)
 144674c:	10000126 	beq	r2,zero,1446754 <__sinit+0xc>
 1446750:	f800283a 	ret
 1446754:	14464001 	jmpi	1446400 <__sinit.part.1>

01446758 <__sfp_lock_acquire>:
 1446758:	f800283a 	ret

0144675c <__sfp_lock_release>:
 144675c:	f800283a 	ret

01446760 <__sinit_lock_acquire>:
 1446760:	f800283a 	ret

01446764 <__sinit_lock_release>:
 1446764:	f800283a 	ret

01446768 <__fp_lock_all>:
 1446768:	00805174 	movhi	r2,325
 144676c:	10855204 	addi	r2,r2,5448
 1446770:	11000017 	ldw	r4,0(r2)
 1446774:	01405134 	movhi	r5,324
 1446778:	2958f904 	addi	r5,r5,25572
 144677c:	14470501 	jmpi	1447050 <_fwalk>

01446780 <__fp_unlock_all>:
 1446780:	00805174 	movhi	r2,325
 1446784:	10855204 	addi	r2,r2,5448
 1446788:	11000017 	ldw	r4,0(r2)
 144678c:	01405134 	movhi	r5,324
 1446790:	2958fb04 	addi	r5,r5,25580
 1446794:	14470501 	jmpi	1447050 <_fwalk>

01446798 <_malloc_trim_r>:
 1446798:	defffb04 	addi	sp,sp,-20
 144679c:	dcc00315 	stw	r19,12(sp)
 14467a0:	04c05174 	movhi	r19,325
 14467a4:	dc800215 	stw	r18,8(sp)
 14467a8:	dc400115 	stw	r17,4(sp)
 14467ac:	dc000015 	stw	r16,0(sp)
 14467b0:	dfc00415 	stw	ra,16(sp)
 14467b4:	2821883a 	mov	r16,r5
 14467b8:	9cc38b04 	addi	r19,r19,3628
 14467bc:	2025883a 	mov	r18,r4
 14467c0:	144d6100 	call	144d610 <__malloc_lock>
 14467c4:	98800217 	ldw	r2,8(r19)
 14467c8:	14400117 	ldw	r17,4(r2)
 14467cc:	00bfff04 	movi	r2,-4
 14467d0:	88a2703a 	and	r17,r17,r2
 14467d4:	8c21c83a 	sub	r16,r17,r16
 14467d8:	8403fbc4 	addi	r16,r16,4079
 14467dc:	8020d33a 	srli	r16,r16,12
 14467e0:	0083ffc4 	movi	r2,4095
 14467e4:	843fffc4 	addi	r16,r16,-1
 14467e8:	8020933a 	slli	r16,r16,12
 14467ec:	1400060e 	bge	r2,r16,1446808 <_malloc_trim_r+0x70>
 14467f0:	9009883a 	mov	r4,r18
 14467f4:	000b883a 	mov	r5,zero
 14467f8:	14496fc0 	call	14496fc <_sbrk_r>
 14467fc:	98c00217 	ldw	r3,8(r19)
 1446800:	1c47883a 	add	r3,r3,r17
 1446804:	10c00a26 	beq	r2,r3,1446830 <_malloc_trim_r+0x98>
 1446808:	9009883a 	mov	r4,r18
 144680c:	144d6300 	call	144d630 <__malloc_unlock>
 1446810:	0005883a 	mov	r2,zero
 1446814:	dfc00417 	ldw	ra,16(sp)
 1446818:	dcc00317 	ldw	r19,12(sp)
 144681c:	dc800217 	ldw	r18,8(sp)
 1446820:	dc400117 	ldw	r17,4(sp)
 1446824:	dc000017 	ldw	r16,0(sp)
 1446828:	dec00504 	addi	sp,sp,20
 144682c:	f800283a 	ret
 1446830:	9009883a 	mov	r4,r18
 1446834:	040bc83a 	sub	r5,zero,r16
 1446838:	14496fc0 	call	14496fc <_sbrk_r>
 144683c:	00ffffc4 	movi	r3,-1
 1446840:	10c00d26 	beq	r2,r3,1446878 <_malloc_trim_r+0xe0>
 1446844:	00c05174 	movhi	r3,325
 1446848:	18c87804 	addi	r3,r3,8672
 144684c:	18800017 	ldw	r2,0(r3)
 1446850:	99000217 	ldw	r4,8(r19)
 1446854:	8c23c83a 	sub	r17,r17,r16
 1446858:	8c400054 	ori	r17,r17,1
 144685c:	1421c83a 	sub	r16,r2,r16
 1446860:	24400115 	stw	r17,4(r4)
 1446864:	9009883a 	mov	r4,r18
 1446868:	1c000015 	stw	r16,0(r3)
 144686c:	144d6300 	call	144d630 <__malloc_unlock>
 1446870:	00800044 	movi	r2,1
 1446874:	003fe706 	br	1446814 <__alt_data_end+0xfffe1014>
 1446878:	9009883a 	mov	r4,r18
 144687c:	000b883a 	mov	r5,zero
 1446880:	14496fc0 	call	14496fc <_sbrk_r>
 1446884:	99000217 	ldw	r4,8(r19)
 1446888:	014003c4 	movi	r5,15
 144688c:	1107c83a 	sub	r3,r2,r4
 1446890:	28ffdd0e 	bge	r5,r3,1446808 <__alt_data_end+0xfffe1008>
 1446894:	01405174 	movhi	r5,325
 1446898:	29455404 	addi	r5,r5,5456
 144689c:	29400017 	ldw	r5,0(r5)
 14468a0:	18c00054 	ori	r3,r3,1
 14468a4:	20c00115 	stw	r3,4(r4)
 14468a8:	00c05174 	movhi	r3,325
 14468ac:	1145c83a 	sub	r2,r2,r5
 14468b0:	18c87804 	addi	r3,r3,8672
 14468b4:	18800015 	stw	r2,0(r3)
 14468b8:	003fd306 	br	1446808 <__alt_data_end+0xfffe1008>

014468bc <_free_r>:
 14468bc:	28004c26 	beq	r5,zero,14469f0 <_free_r+0x134>
 14468c0:	defffd04 	addi	sp,sp,-12
 14468c4:	dc400115 	stw	r17,4(sp)
 14468c8:	dc000015 	stw	r16,0(sp)
 14468cc:	2023883a 	mov	r17,r4
 14468d0:	2821883a 	mov	r16,r5
 14468d4:	dfc00215 	stw	ra,8(sp)
 14468d8:	144d6100 	call	144d610 <__malloc_lock>
 14468dc:	813fff17 	ldw	r4,-4(r16)
 14468e0:	00bfff84 	movi	r2,-2
 14468e4:	02405174 	movhi	r9,325
 14468e8:	81bffe04 	addi	r6,r16,-8
 14468ec:	2084703a 	and	r2,r4,r2
 14468f0:	4a438b04 	addi	r9,r9,3628
 14468f4:	308b883a 	add	r5,r6,r2
 14468f8:	2a000117 	ldw	r8,4(r5)
 14468fc:	49c00217 	ldw	r7,8(r9)
 1446900:	00ffff04 	movi	r3,-4
 1446904:	40c6703a 	and	r3,r8,r3
 1446908:	39405326 	beq	r7,r5,1446a58 <_free_r+0x19c>
 144690c:	28c00115 	stw	r3,4(r5)
 1446910:	2100004c 	andi	r4,r4,1
 1446914:	2000091e 	bne	r4,zero,144693c <_free_r+0x80>
 1446918:	81fffe17 	ldw	r7,-8(r16)
 144691c:	4a000204 	addi	r8,r9,8
 1446920:	31cdc83a 	sub	r6,r6,r7
 1446924:	31000217 	ldw	r4,8(r6)
 1446928:	11c5883a 	add	r2,r2,r7
 144692c:	22006126 	beq	r4,r8,1446ab4 <_free_r+0x1f8>
 1446930:	31c00317 	ldw	r7,12(r6)
 1446934:	21c00315 	stw	r7,12(r4)
 1446938:	39000215 	stw	r4,8(r7)
 144693c:	28c9883a 	add	r4,r5,r3
 1446940:	21c00117 	ldw	r7,4(r4)
 1446944:	39c0004c 	andi	r7,r7,1
 1446948:	38000d1e 	bne	r7,zero,1446980 <_free_r+0xc4>
 144694c:	29000217 	ldw	r4,8(r5)
 1446950:	10c5883a 	add	r2,r2,r3
 1446954:	00c05174 	movhi	r3,325
 1446958:	18c38d04 	addi	r3,r3,3636
 144695c:	20c07526 	beq	r4,r3,1446b34 <_free_r+0x278>
 1446960:	29c00317 	ldw	r7,12(r5)
 1446964:	11400054 	ori	r5,r2,1
 1446968:	3087883a 	add	r3,r6,r2
 144696c:	21c00315 	stw	r7,12(r4)
 1446970:	39000215 	stw	r4,8(r7)
 1446974:	31400115 	stw	r5,4(r6)
 1446978:	18800015 	stw	r2,0(r3)
 144697c:	00000406 	br	1446990 <_free_r+0xd4>
 1446980:	10c00054 	ori	r3,r2,1
 1446984:	30c00115 	stw	r3,4(r6)
 1446988:	3087883a 	add	r3,r6,r2
 144698c:	18800015 	stw	r2,0(r3)
 1446990:	00c07fc4 	movi	r3,511
 1446994:	18801736 	bltu	r3,r2,14469f4 <_free_r+0x138>
 1446998:	1004d0fa 	srli	r2,r2,3
 144699c:	01400044 	movi	r5,1
 14469a0:	49000117 	ldw	r4,4(r9)
 14469a4:	1087883a 	add	r3,r2,r2
 14469a8:	18c7883a 	add	r3,r3,r3
 14469ac:	1005d0ba 	srai	r2,r2,2
 14469b0:	18c7883a 	add	r3,r3,r3
 14469b4:	1a47883a 	add	r3,r3,r9
 14469b8:	19c00217 	ldw	r7,8(r3)
 14469bc:	2884983a 	sll	r2,r5,r2
 14469c0:	30c00315 	stw	r3,12(r6)
 14469c4:	31c00215 	stw	r7,8(r6)
 14469c8:	1104b03a 	or	r2,r2,r4
 14469cc:	19800215 	stw	r6,8(r3)
 14469d0:	48800115 	stw	r2,4(r9)
 14469d4:	39800315 	stw	r6,12(r7)
 14469d8:	8809883a 	mov	r4,r17
 14469dc:	dfc00217 	ldw	ra,8(sp)
 14469e0:	dc400117 	ldw	r17,4(sp)
 14469e4:	dc000017 	ldw	r16,0(sp)
 14469e8:	dec00304 	addi	sp,sp,12
 14469ec:	144d6301 	jmpi	144d630 <__malloc_unlock>
 14469f0:	f800283a 	ret
 14469f4:	1006d27a 	srli	r3,r2,9
 14469f8:	01000104 	movi	r4,4
 14469fc:	20c04036 	bltu	r4,r3,1446b00 <_free_r+0x244>
 1446a00:	1006d1ba 	srli	r3,r2,6
 1446a04:	19400e04 	addi	r5,r3,56
 1446a08:	2947883a 	add	r3,r5,r5
 1446a0c:	18c7883a 	add	r3,r3,r3
 1446a10:	18c7883a 	add	r3,r3,r3
 1446a14:	1a49883a 	add	r4,r3,r9
 1446a18:	20c00217 	ldw	r3,8(r4)
 1446a1c:	01c05174 	movhi	r7,325
 1446a20:	39c38b04 	addi	r7,r7,3628
 1446a24:	19003b26 	beq	r3,r4,1446b14 <_free_r+0x258>
 1446a28:	01ffff04 	movi	r7,-4
 1446a2c:	19400117 	ldw	r5,4(r3)
 1446a30:	29ca703a 	and	r5,r5,r7
 1446a34:	1140022e 	bgeu	r2,r5,1446a40 <_free_r+0x184>
 1446a38:	18c00217 	ldw	r3,8(r3)
 1446a3c:	20fffb1e 	bne	r4,r3,1446a2c <__alt_data_end+0xfffe122c>
 1446a40:	18800317 	ldw	r2,12(r3)
 1446a44:	30800315 	stw	r2,12(r6)
 1446a48:	30c00215 	stw	r3,8(r6)
 1446a4c:	11800215 	stw	r6,8(r2)
 1446a50:	19800315 	stw	r6,12(r3)
 1446a54:	003fe006 	br	14469d8 <__alt_data_end+0xfffe11d8>
 1446a58:	2100004c 	andi	r4,r4,1
 1446a5c:	1885883a 	add	r2,r3,r2
 1446a60:	2000071e 	bne	r4,zero,1446a80 <_free_r+0x1c4>
 1446a64:	817ffe17 	ldw	r5,-8(r16)
 1446a68:	314dc83a 	sub	r6,r6,r5
 1446a6c:	30c00317 	ldw	r3,12(r6)
 1446a70:	31000217 	ldw	r4,8(r6)
 1446a74:	1145883a 	add	r2,r2,r5
 1446a78:	20c00315 	stw	r3,12(r4)
 1446a7c:	19000215 	stw	r4,8(r3)
 1446a80:	10c00054 	ori	r3,r2,1
 1446a84:	30c00115 	stw	r3,4(r6)
 1446a88:	00c05174 	movhi	r3,325
 1446a8c:	18c55504 	addi	r3,r3,5460
 1446a90:	18c00017 	ldw	r3,0(r3)
 1446a94:	49800215 	stw	r6,8(r9)
 1446a98:	10ffcf36 	bltu	r2,r3,14469d8 <__alt_data_end+0xfffe11d8>
 1446a9c:	00805174 	movhi	r2,325
 1446aa0:	10886f04 	addi	r2,r2,8636
 1446aa4:	11400017 	ldw	r5,0(r2)
 1446aa8:	8809883a 	mov	r4,r17
 1446aac:	14467980 	call	1446798 <_malloc_trim_r>
 1446ab0:	003fc906 	br	14469d8 <__alt_data_end+0xfffe11d8>
 1446ab4:	28c9883a 	add	r4,r5,r3
 1446ab8:	21000117 	ldw	r4,4(r4)
 1446abc:	2100004c 	andi	r4,r4,1
 1446ac0:	20000a1e 	bne	r4,zero,1446aec <_free_r+0x230>
 1446ac4:	29000317 	ldw	r4,12(r5)
 1446ac8:	29400217 	ldw	r5,8(r5)
 1446acc:	10c5883a 	add	r2,r2,r3
 1446ad0:	10c00054 	ori	r3,r2,1
 1446ad4:	29000315 	stw	r4,12(r5)
 1446ad8:	21400215 	stw	r5,8(r4)
 1446adc:	30c00115 	stw	r3,4(r6)
 1446ae0:	308d883a 	add	r6,r6,r2
 1446ae4:	30800015 	stw	r2,0(r6)
 1446ae8:	003fbb06 	br	14469d8 <__alt_data_end+0xfffe11d8>
 1446aec:	10c00054 	ori	r3,r2,1
 1446af0:	30c00115 	stw	r3,4(r6)
 1446af4:	308d883a 	add	r6,r6,r2
 1446af8:	30800015 	stw	r2,0(r6)
 1446afc:	003fb606 	br	14469d8 <__alt_data_end+0xfffe11d8>
 1446b00:	01000504 	movi	r4,20
 1446b04:	20c01436 	bltu	r4,r3,1446b58 <_free_r+0x29c>
 1446b08:	194016c4 	addi	r5,r3,91
 1446b0c:	2947883a 	add	r3,r5,r5
 1446b10:	003fbe06 	br	1446a0c <__alt_data_end+0xfffe120c>
 1446b14:	280bd0ba 	srai	r5,r5,2
 1446b18:	00800044 	movi	r2,1
 1446b1c:	39000117 	ldw	r4,4(r7)
 1446b20:	114a983a 	sll	r5,r2,r5
 1446b24:	1805883a 	mov	r2,r3
 1446b28:	2908b03a 	or	r4,r5,r4
 1446b2c:	39000115 	stw	r4,4(r7)
 1446b30:	003fc406 	br	1446a44 <__alt_data_end+0xfffe1244>
 1446b34:	49800515 	stw	r6,20(r9)
 1446b38:	49800415 	stw	r6,16(r9)
 1446b3c:	10c00054 	ori	r3,r2,1
 1446b40:	31000315 	stw	r4,12(r6)
 1446b44:	31000215 	stw	r4,8(r6)
 1446b48:	30c00115 	stw	r3,4(r6)
 1446b4c:	308d883a 	add	r6,r6,r2
 1446b50:	30800015 	stw	r2,0(r6)
 1446b54:	003fa006 	br	14469d8 <__alt_data_end+0xfffe11d8>
 1446b58:	01001504 	movi	r4,84
 1446b5c:	20c00436 	bltu	r4,r3,1446b70 <_free_r+0x2b4>
 1446b60:	1006d33a 	srli	r3,r2,12
 1446b64:	19401b84 	addi	r5,r3,110
 1446b68:	2947883a 	add	r3,r5,r5
 1446b6c:	003fa706 	br	1446a0c <__alt_data_end+0xfffe120c>
 1446b70:	01005504 	movi	r4,340
 1446b74:	20c00436 	bltu	r4,r3,1446b88 <_free_r+0x2cc>
 1446b78:	1006d3fa 	srli	r3,r2,15
 1446b7c:	19401dc4 	addi	r5,r3,119
 1446b80:	2947883a 	add	r3,r5,r5
 1446b84:	003fa106 	br	1446a0c <__alt_data_end+0xfffe120c>
 1446b88:	01015504 	movi	r4,1364
 1446b8c:	20c00436 	bltu	r4,r3,1446ba0 <_free_r+0x2e4>
 1446b90:	1006d4ba 	srli	r3,r2,18
 1446b94:	19401f04 	addi	r5,r3,124
 1446b98:	2947883a 	add	r3,r5,r5
 1446b9c:	003f9b06 	br	1446a0c <__alt_data_end+0xfffe120c>
 1446ba0:	00c03f04 	movi	r3,252
 1446ba4:	01401f84 	movi	r5,126
 1446ba8:	003f9806 	br	1446a0c <__alt_data_end+0xfffe120c>

01446bac <__sfvwrite_r>:
 1446bac:	30800217 	ldw	r2,8(r6)
 1446bb0:	10004526 	beq	r2,zero,1446cc8 <__sfvwrite_r+0x11c>
 1446bb4:	28c0030b 	ldhu	r3,12(r5)
 1446bb8:	defff404 	addi	sp,sp,-48
 1446bbc:	dd400715 	stw	r21,28(sp)
 1446bc0:	dcc00515 	stw	r19,20(sp)
 1446bc4:	dc000215 	stw	r16,8(sp)
 1446bc8:	dfc00b15 	stw	ra,44(sp)
 1446bcc:	df000a15 	stw	fp,40(sp)
 1446bd0:	ddc00915 	stw	r23,36(sp)
 1446bd4:	dd800815 	stw	r22,32(sp)
 1446bd8:	dd000615 	stw	r20,24(sp)
 1446bdc:	dc800415 	stw	r18,16(sp)
 1446be0:	dc400315 	stw	r17,12(sp)
 1446be4:	1880020c 	andi	r2,r3,8
 1446be8:	2821883a 	mov	r16,r5
 1446bec:	202b883a 	mov	r21,r4
 1446bf0:	3027883a 	mov	r19,r6
 1446bf4:	10002526 	beq	r2,zero,1446c8c <__sfvwrite_r+0xe0>
 1446bf8:	28800417 	ldw	r2,16(r5)
 1446bfc:	10002326 	beq	r2,zero,1446c8c <__sfvwrite_r+0xe0>
 1446c00:	1880008c 	andi	r2,r3,2
 1446c04:	9c400017 	ldw	r17,0(r19)
 1446c08:	10003126 	beq	r2,zero,1446cd0 <__sfvwrite_r+0x124>
 1446c0c:	0029883a 	mov	r20,zero
 1446c10:	0025883a 	mov	r18,zero
 1446c14:	05810004 	movi	r22,1024
 1446c18:	a00d883a 	mov	r6,r20
 1446c1c:	a809883a 	mov	r4,r21
 1446c20:	90002526 	beq	r18,zero,1446cb8 <__sfvwrite_r+0x10c>
 1446c24:	900f883a 	mov	r7,r18
 1446c28:	81400717 	ldw	r5,28(r16)
 1446c2c:	b480012e 	bgeu	r22,r18,1446c34 <__sfvwrite_r+0x88>
 1446c30:	01c10004 	movi	r7,1024
 1446c34:	80800917 	ldw	r2,36(r16)
 1446c38:	103ee83a 	callr	r2
 1446c3c:	0080510e 	bge	zero,r2,1446d84 <__sfvwrite_r+0x1d8>
 1446c40:	98c00217 	ldw	r3,8(r19)
 1446c44:	a0a9883a 	add	r20,r20,r2
 1446c48:	90a5c83a 	sub	r18,r18,r2
 1446c4c:	1885c83a 	sub	r2,r3,r2
 1446c50:	98800215 	stw	r2,8(r19)
 1446c54:	103ff01e 	bne	r2,zero,1446c18 <__alt_data_end+0xfffe1418>
 1446c58:	0005883a 	mov	r2,zero
 1446c5c:	dfc00b17 	ldw	ra,44(sp)
 1446c60:	df000a17 	ldw	fp,40(sp)
 1446c64:	ddc00917 	ldw	r23,36(sp)
 1446c68:	dd800817 	ldw	r22,32(sp)
 1446c6c:	dd400717 	ldw	r21,28(sp)
 1446c70:	dd000617 	ldw	r20,24(sp)
 1446c74:	dcc00517 	ldw	r19,20(sp)
 1446c78:	dc800417 	ldw	r18,16(sp)
 1446c7c:	dc400317 	ldw	r17,12(sp)
 1446c80:	dc000217 	ldw	r16,8(sp)
 1446c84:	dec00c04 	addi	sp,sp,48
 1446c88:	f800283a 	ret
 1446c8c:	a809883a 	mov	r4,r21
 1446c90:	800b883a 	mov	r5,r16
 1446c94:	144470c0 	call	144470c <__swsetup_r>
 1446c98:	80c0030b 	ldhu	r3,12(r16)
 1446c9c:	103fd826 	beq	r2,zero,1446c00 <__alt_data_end+0xfffe1400>
 1446ca0:	18c01014 	ori	r3,r3,64
 1446ca4:	80c0030d 	sth	r3,12(r16)
 1446ca8:	00c00244 	movi	r3,9
 1446cac:	00bfffc4 	movi	r2,-1
 1446cb0:	a8c00015 	stw	r3,0(r21)
 1446cb4:	003fe906 	br	1446c5c <__alt_data_end+0xfffe145c>
 1446cb8:	8d000017 	ldw	r20,0(r17)
 1446cbc:	8c800117 	ldw	r18,4(r17)
 1446cc0:	8c400204 	addi	r17,r17,8
 1446cc4:	003fd406 	br	1446c18 <__alt_data_end+0xfffe1418>
 1446cc8:	0005883a 	mov	r2,zero
 1446ccc:	f800283a 	ret
 1446cd0:	1880004c 	andi	r2,r3,1
 1446cd4:	1000301e 	bne	r2,zero,1446d98 <__sfvwrite_r+0x1ec>
 1446cd8:	002f883a 	mov	r23,zero
 1446cdc:	0025883a 	mov	r18,zero
 1446ce0:	90001c26 	beq	r18,zero,1446d54 <__sfvwrite_r+0x1a8>
 1446ce4:	1880800c 	andi	r2,r3,512
 1446ce8:	85000217 	ldw	r20,8(r16)
 1446cec:	10006c26 	beq	r2,zero,1446ea0 <__sfvwrite_r+0x2f4>
 1446cf0:	a02d883a 	mov	r22,r20
 1446cf4:	95008536 	bltu	r18,r20,1446f0c <__sfvwrite_r+0x360>
 1446cf8:	1881200c 	andi	r2,r3,1152
 1446cfc:	10009d1e 	bne	r2,zero,1446f74 <__sfvwrite_r+0x3c8>
 1446d00:	81000017 	ldw	r4,0(r16)
 1446d04:	a039883a 	mov	fp,r20
 1446d08:	9029883a 	mov	r20,r18
 1446d0c:	b80b883a 	mov	r5,r23
 1446d10:	b00d883a 	mov	r6,r22
 1446d14:	1447e200 	call	1447e20 <memmove>
 1446d18:	80c00217 	ldw	r3,8(r16)
 1446d1c:	81000017 	ldw	r4,0(r16)
 1446d20:	9005883a 	mov	r2,r18
 1446d24:	1f39c83a 	sub	fp,r3,fp
 1446d28:	258f883a 	add	r7,r4,r22
 1446d2c:	87000215 	stw	fp,8(r16)
 1446d30:	81c00015 	stw	r7,0(r16)
 1446d34:	98c00217 	ldw	r3,8(r19)
 1446d38:	b8af883a 	add	r23,r23,r2
 1446d3c:	90a5c83a 	sub	r18,r18,r2
 1446d40:	1d05c83a 	sub	r2,r3,r20
 1446d44:	98800215 	stw	r2,8(r19)
 1446d48:	103fc326 	beq	r2,zero,1446c58 <__alt_data_end+0xfffe1458>
 1446d4c:	80c0030b 	ldhu	r3,12(r16)
 1446d50:	903fe41e 	bne	r18,zero,1446ce4 <__alt_data_end+0xfffe14e4>
 1446d54:	8dc00017 	ldw	r23,0(r17)
 1446d58:	8c800117 	ldw	r18,4(r17)
 1446d5c:	8c400204 	addi	r17,r17,8
 1446d60:	003fdf06 	br	1446ce0 <__alt_data_end+0xfffe14e0>
 1446d64:	14490e80 	call	14490e8 <_realloc_r>
 1446d68:	102d883a 	mov	r22,r2
 1446d6c:	1000a01e 	bne	r2,zero,1446ff0 <__sfvwrite_r+0x444>
 1446d70:	81400417 	ldw	r5,16(r16)
 1446d74:	a809883a 	mov	r4,r21
 1446d78:	14468bc0 	call	14468bc <_free_r>
 1446d7c:	00800304 	movi	r2,12
 1446d80:	a8800015 	stw	r2,0(r21)
 1446d84:	80c0030b 	ldhu	r3,12(r16)
 1446d88:	00bfffc4 	movi	r2,-1
 1446d8c:	18c01014 	ori	r3,r3,64
 1446d90:	80c0030d 	sth	r3,12(r16)
 1446d94:	003fb106 	br	1446c5c <__alt_data_end+0xfffe145c>
 1446d98:	0029883a 	mov	r20,zero
 1446d9c:	0011883a 	mov	r8,zero
 1446da0:	0039883a 	mov	fp,zero
 1446da4:	0025883a 	mov	r18,zero
 1446da8:	90001f26 	beq	r18,zero,1446e28 <__sfvwrite_r+0x27c>
 1446dac:	40006826 	beq	r8,zero,1446f50 <__sfvwrite_r+0x3a4>
 1446db0:	a02f883a 	mov	r23,r20
 1446db4:	9500012e 	bgeu	r18,r20,1446dbc <__sfvwrite_r+0x210>
 1446db8:	902f883a 	mov	r23,r18
 1446dbc:	81000017 	ldw	r4,0(r16)
 1446dc0:	80800417 	ldw	r2,16(r16)
 1446dc4:	b82d883a 	mov	r22,r23
 1446dc8:	81800217 	ldw	r6,8(r16)
 1446dcc:	81c00517 	ldw	r7,20(r16)
 1446dd0:	1100022e 	bgeu	r2,r4,1446ddc <__sfvwrite_r+0x230>
 1446dd4:	31c7883a 	add	r3,r6,r7
 1446dd8:	1dc01816 	blt	r3,r23,1446e3c <__sfvwrite_r+0x290>
 1446ddc:	b9c03f16 	blt	r23,r7,1446edc <__sfvwrite_r+0x330>
 1446de0:	80800917 	ldw	r2,36(r16)
 1446de4:	81400717 	ldw	r5,28(r16)
 1446de8:	a809883a 	mov	r4,r21
 1446dec:	da000115 	stw	r8,4(sp)
 1446df0:	e00d883a 	mov	r6,fp
 1446df4:	103ee83a 	callr	r2
 1446df8:	102d883a 	mov	r22,r2
 1446dfc:	da000117 	ldw	r8,4(sp)
 1446e00:	00bfe00e 	bge	zero,r2,1446d84 <__alt_data_end+0xfffe1584>
 1446e04:	a5a9c83a 	sub	r20,r20,r22
 1446e08:	a0001f26 	beq	r20,zero,1446e88 <__sfvwrite_r+0x2dc>
 1446e0c:	98800217 	ldw	r2,8(r19)
 1446e10:	e5b9883a 	add	fp,fp,r22
 1446e14:	95a5c83a 	sub	r18,r18,r22
 1446e18:	15adc83a 	sub	r22,r2,r22
 1446e1c:	9d800215 	stw	r22,8(r19)
 1446e20:	b03f8d26 	beq	r22,zero,1446c58 <__alt_data_end+0xfffe1458>
 1446e24:	903fe11e 	bne	r18,zero,1446dac <__alt_data_end+0xfffe15ac>
 1446e28:	8f000017 	ldw	fp,0(r17)
 1446e2c:	8c800117 	ldw	r18,4(r17)
 1446e30:	0011883a 	mov	r8,zero
 1446e34:	8c400204 	addi	r17,r17,8
 1446e38:	003fdb06 	br	1446da8 <__alt_data_end+0xfffe15a8>
 1446e3c:	180d883a 	mov	r6,r3
 1446e40:	e00b883a 	mov	r5,fp
 1446e44:	da000115 	stw	r8,4(sp)
 1446e48:	d8c00015 	stw	r3,0(sp)
 1446e4c:	1447e200 	call	1447e20 <memmove>
 1446e50:	d8c00017 	ldw	r3,0(sp)
 1446e54:	80800017 	ldw	r2,0(r16)
 1446e58:	a809883a 	mov	r4,r21
 1446e5c:	800b883a 	mov	r5,r16
 1446e60:	10c5883a 	add	r2,r2,r3
 1446e64:	80800015 	stw	r2,0(r16)
 1446e68:	d8c00015 	stw	r3,0(sp)
 1446e6c:	144618c0 	call	144618c <_fflush_r>
 1446e70:	d8c00017 	ldw	r3,0(sp)
 1446e74:	da000117 	ldw	r8,4(sp)
 1446e78:	103fc21e 	bne	r2,zero,1446d84 <__alt_data_end+0xfffe1584>
 1446e7c:	182d883a 	mov	r22,r3
 1446e80:	a5a9c83a 	sub	r20,r20,r22
 1446e84:	a03fe11e 	bne	r20,zero,1446e0c <__alt_data_end+0xfffe160c>
 1446e88:	a809883a 	mov	r4,r21
 1446e8c:	800b883a 	mov	r5,r16
 1446e90:	144618c0 	call	144618c <_fflush_r>
 1446e94:	103fbb1e 	bne	r2,zero,1446d84 <__alt_data_end+0xfffe1584>
 1446e98:	0011883a 	mov	r8,zero
 1446e9c:	003fdb06 	br	1446e0c <__alt_data_end+0xfffe160c>
 1446ea0:	81000017 	ldw	r4,0(r16)
 1446ea4:	80800417 	ldw	r2,16(r16)
 1446ea8:	1100012e 	bgeu	r2,r4,1446eb0 <__sfvwrite_r+0x304>
 1446eac:	a4805a36 	bltu	r20,r18,1447018 <__sfvwrite_r+0x46c>
 1446eb0:	81c00517 	ldw	r7,20(r16)
 1446eb4:	91c01a36 	bltu	r18,r7,1446f20 <__sfvwrite_r+0x374>
 1446eb8:	80800917 	ldw	r2,36(r16)
 1446ebc:	81400717 	ldw	r5,28(r16)
 1446ec0:	a809883a 	mov	r4,r21
 1446ec4:	b80d883a 	mov	r6,r23
 1446ec8:	103ee83a 	callr	r2
 1446ecc:	1029883a 	mov	r20,r2
 1446ed0:	00bfac0e 	bge	zero,r2,1446d84 <__alt_data_end+0xfffe1584>
 1446ed4:	a005883a 	mov	r2,r20
 1446ed8:	003f9606 	br	1446d34 <__alt_data_end+0xfffe1534>
 1446edc:	b80d883a 	mov	r6,r23
 1446ee0:	e00b883a 	mov	r5,fp
 1446ee4:	da000115 	stw	r8,4(sp)
 1446ee8:	1447e200 	call	1447e20 <memmove>
 1446eec:	80800217 	ldw	r2,8(r16)
 1446ef0:	80c00017 	ldw	r3,0(r16)
 1446ef4:	da000117 	ldw	r8,4(sp)
 1446ef8:	15c5c83a 	sub	r2,r2,r23
 1446efc:	1def883a 	add	r23,r3,r23
 1446f00:	80800215 	stw	r2,8(r16)
 1446f04:	85c00015 	stw	r23,0(r16)
 1446f08:	003fbe06 	br	1446e04 <__alt_data_end+0xfffe1604>
 1446f0c:	81000017 	ldw	r4,0(r16)
 1446f10:	9039883a 	mov	fp,r18
 1446f14:	9029883a 	mov	r20,r18
 1446f18:	902d883a 	mov	r22,r18
 1446f1c:	003f7b06 	br	1446d0c <__alt_data_end+0xfffe150c>
 1446f20:	b80b883a 	mov	r5,r23
 1446f24:	900d883a 	mov	r6,r18
 1446f28:	1447e200 	call	1447e20 <memmove>
 1446f2c:	80c00217 	ldw	r3,8(r16)
 1446f30:	80800017 	ldw	r2,0(r16)
 1446f34:	9029883a 	mov	r20,r18
 1446f38:	1c87c83a 	sub	r3,r3,r18
 1446f3c:	1485883a 	add	r2,r2,r18
 1446f40:	80800015 	stw	r2,0(r16)
 1446f44:	80c00215 	stw	r3,8(r16)
 1446f48:	9005883a 	mov	r2,r18
 1446f4c:	003f7906 	br	1446d34 <__alt_data_end+0xfffe1534>
 1446f50:	e009883a 	mov	r4,fp
 1446f54:	01400284 	movi	r5,10
 1446f58:	900d883a 	mov	r6,r18
 1446f5c:	1447c000 	call	1447c00 <memchr>
 1446f60:	10003826 	beq	r2,zero,1447044 <__sfvwrite_r+0x498>
 1446f64:	10800044 	addi	r2,r2,1
 1446f68:	1729c83a 	sub	r20,r2,fp
 1446f6c:	02000044 	movi	r8,1
 1446f70:	003f8f06 	br	1446db0 <__alt_data_end+0xfffe15b0>
 1446f74:	80800517 	ldw	r2,20(r16)
 1446f78:	81400417 	ldw	r5,16(r16)
 1446f7c:	87000017 	ldw	fp,0(r16)
 1446f80:	10a9883a 	add	r20,r2,r2
 1446f84:	a085883a 	add	r2,r20,r2
 1446f88:	1028d7fa 	srli	r20,r2,31
 1446f8c:	e179c83a 	sub	fp,fp,r5
 1446f90:	e1000044 	addi	r4,fp,1
 1446f94:	a085883a 	add	r2,r20,r2
 1446f98:	1029d07a 	srai	r20,r2,1
 1446f9c:	2485883a 	add	r2,r4,r18
 1446fa0:	a00d883a 	mov	r6,r20
 1446fa4:	a080022e 	bgeu	r20,r2,1446fb0 <__sfvwrite_r+0x404>
 1446fa8:	1029883a 	mov	r20,r2
 1446fac:	100d883a 	mov	r6,r2
 1446fb0:	18c1000c 	andi	r3,r3,1024
 1446fb4:	a809883a 	mov	r4,r21
 1446fb8:	183f6a26 	beq	r3,zero,1446d64 <__alt_data_end+0xfffe1564>
 1446fbc:	300b883a 	mov	r5,r6
 1446fc0:	14474580 	call	1447458 <_malloc_r>
 1446fc4:	102d883a 	mov	r22,r2
 1446fc8:	103f6c26 	beq	r2,zero,1446d7c <__alt_data_end+0xfffe157c>
 1446fcc:	81400417 	ldw	r5,16(r16)
 1446fd0:	1009883a 	mov	r4,r2
 1446fd4:	e00d883a 	mov	r6,fp
 1446fd8:	1447ce80 	call	1447ce8 <memcpy>
 1446fdc:	8080030b 	ldhu	r2,12(r16)
 1446fe0:	00fedfc4 	movi	r3,-1153
 1446fe4:	10c4703a 	and	r2,r2,r3
 1446fe8:	10802014 	ori	r2,r2,128
 1446fec:	8080030d 	sth	r2,12(r16)
 1446ff0:	b709883a 	add	r4,r22,fp
 1446ff4:	a707c83a 	sub	r3,r20,fp
 1446ff8:	85800415 	stw	r22,16(r16)
 1446ffc:	85000515 	stw	r20,20(r16)
 1447000:	81000015 	stw	r4,0(r16)
 1447004:	9039883a 	mov	fp,r18
 1447008:	80c00215 	stw	r3,8(r16)
 144700c:	9029883a 	mov	r20,r18
 1447010:	902d883a 	mov	r22,r18
 1447014:	003f3d06 	br	1446d0c <__alt_data_end+0xfffe150c>
 1447018:	b80b883a 	mov	r5,r23
 144701c:	a00d883a 	mov	r6,r20
 1447020:	1447e200 	call	1447e20 <memmove>
 1447024:	80800017 	ldw	r2,0(r16)
 1447028:	a809883a 	mov	r4,r21
 144702c:	800b883a 	mov	r5,r16
 1447030:	1505883a 	add	r2,r2,r20
 1447034:	80800015 	stw	r2,0(r16)
 1447038:	144618c0 	call	144618c <_fflush_r>
 144703c:	103fa526 	beq	r2,zero,1446ed4 <__alt_data_end+0xfffe16d4>
 1447040:	003f5006 	br	1446d84 <__alt_data_end+0xfffe1584>
 1447044:	95000044 	addi	r20,r18,1
 1447048:	02000044 	movi	r8,1
 144704c:	003f5806 	br	1446db0 <__alt_data_end+0xfffe15b0>

01447050 <_fwalk>:
 1447050:	defff804 	addi	sp,sp,-32
 1447054:	dd400515 	stw	r21,20(sp)
 1447058:	2540b804 	addi	r21,r4,736
 144705c:	dd800615 	stw	r22,24(sp)
 1447060:	dd000415 	stw	r20,16(sp)
 1447064:	dfc00715 	stw	ra,28(sp)
 1447068:	dcc00315 	stw	r19,12(sp)
 144706c:	dc800215 	stw	r18,8(sp)
 1447070:	dc400115 	stw	r17,4(sp)
 1447074:	dc000015 	stw	r16,0(sp)
 1447078:	2829883a 	mov	r20,r5
 144707c:	002d883a 	mov	r22,zero
 1447080:	14467580 	call	1446758 <__sfp_lock_acquire>
 1447084:	a8001426 	beq	r21,zero,14470d8 <_fwalk+0x88>
 1447088:	04ffffc4 	movi	r19,-1
 144708c:	ac400117 	ldw	r17,4(r21)
 1447090:	ac800217 	ldw	r18,8(r21)
 1447094:	8c7fffc4 	addi	r17,r17,-1
 1447098:	88000d16 	blt	r17,zero,14470d0 <_fwalk+0x80>
 144709c:	94000304 	addi	r16,r18,12
 14470a0:	94800384 	addi	r18,r18,14
 14470a4:	80c0000f 	ldh	r3,0(r16)
 14470a8:	8c7fffc4 	addi	r17,r17,-1
 14470ac:	813ffd04 	addi	r4,r16,-12
 14470b0:	18000426 	beq	r3,zero,14470c4 <_fwalk+0x74>
 14470b4:	90c0000f 	ldh	r3,0(r18)
 14470b8:	1cc00226 	beq	r3,r19,14470c4 <_fwalk+0x74>
 14470bc:	a03ee83a 	callr	r20
 14470c0:	b0acb03a 	or	r22,r22,r2
 14470c4:	84001a04 	addi	r16,r16,104
 14470c8:	94801a04 	addi	r18,r18,104
 14470cc:	8cfff51e 	bne	r17,r19,14470a4 <__alt_data_end+0xfffe18a4>
 14470d0:	ad400017 	ldw	r21,0(r21)
 14470d4:	a83fed1e 	bne	r21,zero,144708c <__alt_data_end+0xfffe188c>
 14470d8:	144675c0 	call	144675c <__sfp_lock_release>
 14470dc:	b005883a 	mov	r2,r22
 14470e0:	dfc00717 	ldw	ra,28(sp)
 14470e4:	dd800617 	ldw	r22,24(sp)
 14470e8:	dd400517 	ldw	r21,20(sp)
 14470ec:	dd000417 	ldw	r20,16(sp)
 14470f0:	dcc00317 	ldw	r19,12(sp)
 14470f4:	dc800217 	ldw	r18,8(sp)
 14470f8:	dc400117 	ldw	r17,4(sp)
 14470fc:	dc000017 	ldw	r16,0(sp)
 1447100:	dec00804 	addi	sp,sp,32
 1447104:	f800283a 	ret

01447108 <_fwalk_reent>:
 1447108:	defff804 	addi	sp,sp,-32
 144710c:	dd400515 	stw	r21,20(sp)
 1447110:	2540b804 	addi	r21,r4,736
 1447114:	dd800615 	stw	r22,24(sp)
 1447118:	dd000415 	stw	r20,16(sp)
 144711c:	dcc00315 	stw	r19,12(sp)
 1447120:	dfc00715 	stw	ra,28(sp)
 1447124:	dc800215 	stw	r18,8(sp)
 1447128:	dc400115 	stw	r17,4(sp)
 144712c:	dc000015 	stw	r16,0(sp)
 1447130:	2027883a 	mov	r19,r4
 1447134:	2829883a 	mov	r20,r5
 1447138:	002d883a 	mov	r22,zero
 144713c:	14467580 	call	1446758 <__sfp_lock_acquire>
 1447140:	a8001326 	beq	r21,zero,1447190 <_fwalk_reent+0x88>
 1447144:	04bfffc4 	movi	r18,-1
 1447148:	ac400117 	ldw	r17,4(r21)
 144714c:	ac000217 	ldw	r16,8(r21)
 1447150:	8c7fffc4 	addi	r17,r17,-1
 1447154:	88000c16 	blt	r17,zero,1447188 <_fwalk_reent+0x80>
 1447158:	84000304 	addi	r16,r16,12
 144715c:	80c0000f 	ldh	r3,0(r16)
 1447160:	8c7fffc4 	addi	r17,r17,-1
 1447164:	817ffd04 	addi	r5,r16,-12
 1447168:	18000526 	beq	r3,zero,1447180 <_fwalk_reent+0x78>
 144716c:	80c0008f 	ldh	r3,2(r16)
 1447170:	9809883a 	mov	r4,r19
 1447174:	1c800226 	beq	r3,r18,1447180 <_fwalk_reent+0x78>
 1447178:	a03ee83a 	callr	r20
 144717c:	b0acb03a 	or	r22,r22,r2
 1447180:	84001a04 	addi	r16,r16,104
 1447184:	8cbff51e 	bne	r17,r18,144715c <__alt_data_end+0xfffe195c>
 1447188:	ad400017 	ldw	r21,0(r21)
 144718c:	a83fee1e 	bne	r21,zero,1447148 <__alt_data_end+0xfffe1948>
 1447190:	144675c0 	call	144675c <__sfp_lock_release>
 1447194:	b005883a 	mov	r2,r22
 1447198:	dfc00717 	ldw	ra,28(sp)
 144719c:	dd800617 	ldw	r22,24(sp)
 14471a0:	dd400517 	ldw	r21,20(sp)
 14471a4:	dd000417 	ldw	r20,16(sp)
 14471a8:	dcc00317 	ldw	r19,12(sp)
 14471ac:	dc800217 	ldw	r18,8(sp)
 14471b0:	dc400117 	ldw	r17,4(sp)
 14471b4:	dc000017 	ldw	r16,0(sp)
 14471b8:	dec00804 	addi	sp,sp,32
 14471bc:	f800283a 	ret

014471c0 <_setlocale_r>:
 14471c0:	30001b26 	beq	r6,zero,1447230 <_setlocale_r+0x70>
 14471c4:	01405174 	movhi	r5,325
 14471c8:	defffe04 	addi	sp,sp,-8
 14471cc:	2941f804 	addi	r5,r5,2016
 14471d0:	3009883a 	mov	r4,r6
 14471d4:	dc000015 	stw	r16,0(sp)
 14471d8:	dfc00115 	stw	ra,4(sp)
 14471dc:	3021883a 	mov	r16,r6
 14471e0:	144988c0 	call	144988c <strcmp>
 14471e4:	1000061e 	bne	r2,zero,1447200 <_setlocale_r+0x40>
 14471e8:	00805174 	movhi	r2,325
 14471ec:	1081f704 	addi	r2,r2,2012
 14471f0:	dfc00117 	ldw	ra,4(sp)
 14471f4:	dc000017 	ldw	r16,0(sp)
 14471f8:	dec00204 	addi	sp,sp,8
 14471fc:	f800283a 	ret
 1447200:	01405174 	movhi	r5,325
 1447204:	2941f704 	addi	r5,r5,2012
 1447208:	8009883a 	mov	r4,r16
 144720c:	144988c0 	call	144988c <strcmp>
 1447210:	103ff526 	beq	r2,zero,14471e8 <__alt_data_end+0xfffe19e8>
 1447214:	01405174 	movhi	r5,325
 1447218:	2941e204 	addi	r5,r5,1928
 144721c:	8009883a 	mov	r4,r16
 1447220:	144988c0 	call	144988c <strcmp>
 1447224:	103ff026 	beq	r2,zero,14471e8 <__alt_data_end+0xfffe19e8>
 1447228:	0005883a 	mov	r2,zero
 144722c:	003ff006 	br	14471f0 <__alt_data_end+0xfffe19f0>
 1447230:	00805174 	movhi	r2,325
 1447234:	1081f704 	addi	r2,r2,2012
 1447238:	f800283a 	ret

0144723c <__locale_charset>:
 144723c:	00805174 	movhi	r2,325
 1447240:	10837504 	addi	r2,r2,3540
 1447244:	f800283a 	ret

01447248 <__locale_mb_cur_max>:
 1447248:	00805174 	movhi	r2,325
 144724c:	10855304 	addi	r2,r2,5452
 1447250:	10800017 	ldw	r2,0(r2)
 1447254:	f800283a 	ret

01447258 <__locale_msgcharset>:
 1447258:	00805174 	movhi	r2,325
 144725c:	10836d04 	addi	r2,r2,3508
 1447260:	f800283a 	ret

01447264 <__locale_cjk_lang>:
 1447264:	0005883a 	mov	r2,zero
 1447268:	f800283a 	ret

0144726c <_localeconv_r>:
 144726c:	00805174 	movhi	r2,325
 1447270:	10837d04 	addi	r2,r2,3572
 1447274:	f800283a 	ret

01447278 <setlocale>:
 1447278:	00c05174 	movhi	r3,325
 144727c:	18c55204 	addi	r3,r3,5448
 1447280:	2005883a 	mov	r2,r4
 1447284:	19000017 	ldw	r4,0(r3)
 1447288:	280d883a 	mov	r6,r5
 144728c:	100b883a 	mov	r5,r2
 1447290:	14471c01 	jmpi	14471c0 <_setlocale_r>

01447294 <localeconv>:
 1447294:	00805174 	movhi	r2,325
 1447298:	10837d04 	addi	r2,r2,3572
 144729c:	f800283a 	ret

014472a0 <__smakebuf_r>:
 14472a0:	2880030b 	ldhu	r2,12(r5)
 14472a4:	10c0008c 	andi	r3,r2,2
 14472a8:	1800401e 	bne	r3,zero,14473ac <__smakebuf_r+0x10c>
 14472ac:	deffec04 	addi	sp,sp,-80
 14472b0:	dc000f15 	stw	r16,60(sp)
 14472b4:	2821883a 	mov	r16,r5
 14472b8:	2940038f 	ldh	r5,14(r5)
 14472bc:	dc401015 	stw	r17,64(sp)
 14472c0:	dfc01315 	stw	ra,76(sp)
 14472c4:	dcc01215 	stw	r19,72(sp)
 14472c8:	dc801115 	stw	r18,68(sp)
 14472cc:	2023883a 	mov	r17,r4
 14472d0:	28001b16 	blt	r5,zero,1447340 <__smakebuf_r+0xa0>
 14472d4:	d80d883a 	mov	r6,sp
 14472d8:	144b3040 	call	144b304 <_fstat_r>
 14472dc:	10001716 	blt	r2,zero,144733c <__smakebuf_r+0x9c>
 14472e0:	d8800117 	ldw	r2,4(sp)
 14472e4:	00e00014 	movui	r3,32768
 14472e8:	10bc000c 	andi	r2,r2,61440
 14472ec:	10c03726 	beq	r2,r3,14473cc <__smakebuf_r+0x12c>
 14472f0:	80c0030b 	ldhu	r3,12(r16)
 14472f4:	18c20014 	ori	r3,r3,2048
 14472f8:	80c0030d 	sth	r3,12(r16)
 14472fc:	00c80004 	movi	r3,8192
 1447300:	10c03c1e 	bne	r2,r3,14473f4 <__smakebuf_r+0x154>
 1447304:	8140038f 	ldh	r5,14(r16)
 1447308:	8809883a 	mov	r4,r17
 144730c:	144b35c0 	call	144b35c <_isatty_r>
 1447310:	10004e26 	beq	r2,zero,144744c <__smakebuf_r+0x1ac>
 1447314:	8080030b 	ldhu	r2,12(r16)
 1447318:	04c00044 	movi	r19,1
 144731c:	80c010c4 	addi	r3,r16,67
 1447320:	14c4b03a 	or	r2,r2,r19
 1447324:	8080030d 	sth	r2,12(r16)
 1447328:	80c00015 	stw	r3,0(r16)
 144732c:	80c00415 	stw	r3,16(r16)
 1447330:	84c00515 	stw	r19,20(r16)
 1447334:	04810004 	movi	r18,1024
 1447338:	00000706 	br	1447358 <__smakebuf_r+0xb8>
 144733c:	8080030b 	ldhu	r2,12(r16)
 1447340:	10c0200c 	andi	r3,r2,128
 1447344:	18001f1e 	bne	r3,zero,14473c4 <__smakebuf_r+0x124>
 1447348:	04810004 	movi	r18,1024
 144734c:	10820014 	ori	r2,r2,2048
 1447350:	8080030d 	sth	r2,12(r16)
 1447354:	0027883a 	mov	r19,zero
 1447358:	8809883a 	mov	r4,r17
 144735c:	900b883a 	mov	r5,r18
 1447360:	14474580 	call	1447458 <_malloc_r>
 1447364:	10002e26 	beq	r2,zero,1447420 <__smakebuf_r+0x180>
 1447368:	80c0030b 	ldhu	r3,12(r16)
 144736c:	01005134 	movhi	r4,324
 1447370:	2118fd04 	addi	r4,r4,25588
 1447374:	89000f15 	stw	r4,60(r17)
 1447378:	18c02014 	ori	r3,r3,128
 144737c:	80c0030d 	sth	r3,12(r16)
 1447380:	80800015 	stw	r2,0(r16)
 1447384:	80800415 	stw	r2,16(r16)
 1447388:	84800515 	stw	r18,20(r16)
 144738c:	98001c1e 	bne	r19,zero,1447400 <__smakebuf_r+0x160>
 1447390:	dfc01317 	ldw	ra,76(sp)
 1447394:	dcc01217 	ldw	r19,72(sp)
 1447398:	dc801117 	ldw	r18,68(sp)
 144739c:	dc401017 	ldw	r17,64(sp)
 14473a0:	dc000f17 	ldw	r16,60(sp)
 14473a4:	dec01404 	addi	sp,sp,80
 14473a8:	f800283a 	ret
 14473ac:	288010c4 	addi	r2,r5,67
 14473b0:	28800015 	stw	r2,0(r5)
 14473b4:	28800415 	stw	r2,16(r5)
 14473b8:	00800044 	movi	r2,1
 14473bc:	28800515 	stw	r2,20(r5)
 14473c0:	f800283a 	ret
 14473c4:	04801004 	movi	r18,64
 14473c8:	003fe006 	br	144734c <__alt_data_end+0xfffe1b4c>
 14473cc:	81000a17 	ldw	r4,40(r16)
 14473d0:	00c05174 	movhi	r3,325
 14473d4:	18e60a04 	addi	r3,r3,-26584
 14473d8:	20ffc51e 	bne	r4,r3,14472f0 <__alt_data_end+0xfffe1af0>
 14473dc:	80c0030b 	ldhu	r3,12(r16)
 14473e0:	01010004 	movi	r4,1024
 14473e4:	81001315 	stw	r4,76(r16)
 14473e8:	1906b03a 	or	r3,r3,r4
 14473ec:	80c0030d 	sth	r3,12(r16)
 14473f0:	003fc206 	br	14472fc <__alt_data_end+0xfffe1afc>
 14473f4:	0027883a 	mov	r19,zero
 14473f8:	04810004 	movi	r18,1024
 14473fc:	003fd606 	br	1447358 <__alt_data_end+0xfffe1b58>
 1447400:	8140038f 	ldh	r5,14(r16)
 1447404:	8809883a 	mov	r4,r17
 1447408:	144b35c0 	call	144b35c <_isatty_r>
 144740c:	103fe026 	beq	r2,zero,1447390 <__alt_data_end+0xfffe1b90>
 1447410:	8080030b 	ldhu	r2,12(r16)
 1447414:	10800054 	ori	r2,r2,1
 1447418:	8080030d 	sth	r2,12(r16)
 144741c:	003fdc06 	br	1447390 <__alt_data_end+0xfffe1b90>
 1447420:	8080030b 	ldhu	r2,12(r16)
 1447424:	10c0800c 	andi	r3,r2,512
 1447428:	183fd91e 	bne	r3,zero,1447390 <__alt_data_end+0xfffe1b90>
 144742c:	10800094 	ori	r2,r2,2
 1447430:	80c010c4 	addi	r3,r16,67
 1447434:	8080030d 	sth	r2,12(r16)
 1447438:	00800044 	movi	r2,1
 144743c:	80c00015 	stw	r3,0(r16)
 1447440:	80c00415 	stw	r3,16(r16)
 1447444:	80800515 	stw	r2,20(r16)
 1447448:	003fd106 	br	1447390 <__alt_data_end+0xfffe1b90>
 144744c:	04c00044 	movi	r19,1
 1447450:	04810004 	movi	r18,1024
 1447454:	003fc006 	br	1447358 <__alt_data_end+0xfffe1b58>

01447458 <_malloc_r>:
 1447458:	defff504 	addi	sp,sp,-44
 144745c:	dc800315 	stw	r18,12(sp)
 1447460:	dfc00a15 	stw	ra,40(sp)
 1447464:	df000915 	stw	fp,36(sp)
 1447468:	ddc00815 	stw	r23,32(sp)
 144746c:	dd800715 	stw	r22,28(sp)
 1447470:	dd400615 	stw	r21,24(sp)
 1447474:	dd000515 	stw	r20,20(sp)
 1447478:	dcc00415 	stw	r19,16(sp)
 144747c:	dc400215 	stw	r17,8(sp)
 1447480:	dc000115 	stw	r16,4(sp)
 1447484:	288002c4 	addi	r2,r5,11
 1447488:	00c00584 	movi	r3,22
 144748c:	2025883a 	mov	r18,r4
 1447490:	18802a2e 	bgeu	r3,r2,144753c <_malloc_r+0xe4>
 1447494:	047ffe04 	movi	r17,-8
 1447498:	1462703a 	and	r17,r2,r17
 144749c:	88009e16 	blt	r17,zero,1447718 <_malloc_r+0x2c0>
 14474a0:	89409d36 	bltu	r17,r5,1447718 <_malloc_r+0x2c0>
 14474a4:	144d6100 	call	144d610 <__malloc_lock>
 14474a8:	00807dc4 	movi	r2,503
 14474ac:	14402736 	bltu	r2,r17,144754c <_malloc_r+0xf4>
 14474b0:	8806d0fa 	srli	r3,r17,3
 14474b4:	04c05174 	movhi	r19,325
 14474b8:	9cc38b04 	addi	r19,r19,3628
 14474bc:	18c5883a 	add	r2,r3,r3
 14474c0:	1085883a 	add	r2,r2,r2
 14474c4:	1085883a 	add	r2,r2,r2
 14474c8:	9885883a 	add	r2,r19,r2
 14474cc:	14000317 	ldw	r16,12(r2)
 14474d0:	80814a26 	beq	r16,r2,14479fc <_malloc_r+0x5a4>
 14474d4:	80c00117 	ldw	r3,4(r16)
 14474d8:	81000317 	ldw	r4,12(r16)
 14474dc:	00bfff04 	movi	r2,-4
 14474e0:	1884703a 	and	r2,r3,r2
 14474e4:	81400217 	ldw	r5,8(r16)
 14474e8:	8085883a 	add	r2,r16,r2
 14474ec:	10c00117 	ldw	r3,4(r2)
 14474f0:	29000315 	stw	r4,12(r5)
 14474f4:	21400215 	stw	r5,8(r4)
 14474f8:	18c00054 	ori	r3,r3,1
 14474fc:	10c00115 	stw	r3,4(r2)
 1447500:	9009883a 	mov	r4,r18
 1447504:	144d6300 	call	144d630 <__malloc_unlock>
 1447508:	80800204 	addi	r2,r16,8
 144750c:	dfc00a17 	ldw	ra,40(sp)
 1447510:	df000917 	ldw	fp,36(sp)
 1447514:	ddc00817 	ldw	r23,32(sp)
 1447518:	dd800717 	ldw	r22,28(sp)
 144751c:	dd400617 	ldw	r21,24(sp)
 1447520:	dd000517 	ldw	r20,20(sp)
 1447524:	dcc00417 	ldw	r19,16(sp)
 1447528:	dc800317 	ldw	r18,12(sp)
 144752c:	dc400217 	ldw	r17,8(sp)
 1447530:	dc000117 	ldw	r16,4(sp)
 1447534:	dec00b04 	addi	sp,sp,44
 1447538:	f800283a 	ret
 144753c:	04400404 	movi	r17,16
 1447540:	89407536 	bltu	r17,r5,1447718 <_malloc_r+0x2c0>
 1447544:	144d6100 	call	144d610 <__malloc_lock>
 1447548:	003fd906 	br	14474b0 <__alt_data_end+0xfffe1cb0>
 144754c:	8806d27a 	srli	r3,r17,9
 1447550:	18007526 	beq	r3,zero,1447728 <_malloc_r+0x2d0>
 1447554:	00800104 	movi	r2,4
 1447558:	10c0ef36 	bltu	r2,r3,1447918 <_malloc_r+0x4c0>
 144755c:	8806d1ba 	srli	r3,r17,6
 1447560:	19c00e04 	addi	r7,r3,56
 1447564:	39cb883a 	add	r5,r7,r7
 1447568:	04c05174 	movhi	r19,325
 144756c:	294b883a 	add	r5,r5,r5
 1447570:	9cc38b04 	addi	r19,r19,3628
 1447574:	294b883a 	add	r5,r5,r5
 1447578:	994b883a 	add	r5,r19,r5
 144757c:	2c000317 	ldw	r16,12(r5)
 1447580:	2c000e26 	beq	r5,r16,14475bc <_malloc_r+0x164>
 1447584:	80800117 	ldw	r2,4(r16)
 1447588:	01bfff04 	movi	r6,-4
 144758c:	010003c4 	movi	r4,15
 1447590:	1184703a 	and	r2,r2,r6
 1447594:	1447c83a 	sub	r3,r2,r17
 1447598:	20c00716 	blt	r4,r3,14475b8 <_malloc_r+0x160>
 144759c:	1800650e 	bge	r3,zero,1447734 <_malloc_r+0x2dc>
 14475a0:	84000317 	ldw	r16,12(r16)
 14475a4:	2c000526 	beq	r5,r16,14475bc <_malloc_r+0x164>
 14475a8:	80800117 	ldw	r2,4(r16)
 14475ac:	1184703a 	and	r2,r2,r6
 14475b0:	1447c83a 	sub	r3,r2,r17
 14475b4:	20fff90e 	bge	r4,r3,144759c <__alt_data_end+0xfffe1d9c>
 14475b8:	39ffffc4 	addi	r7,r7,-1
 14475bc:	38c00044 	addi	r3,r7,1
 14475c0:	01805174 	movhi	r6,325
 14475c4:	9c000417 	ldw	r16,16(r19)
 14475c8:	31838b04 	addi	r6,r6,3628
 14475cc:	32400204 	addi	r9,r6,8
 14475d0:	82410326 	beq	r16,r9,14479e0 <_malloc_r+0x588>
 14475d4:	81000117 	ldw	r4,4(r16)
 14475d8:	00bfff04 	movi	r2,-4
 14475dc:	208e703a 	and	r7,r4,r2
 14475e0:	3c45c83a 	sub	r2,r7,r17
 14475e4:	010003c4 	movi	r4,15
 14475e8:	2080ee16 	blt	r4,r2,14479a4 <_malloc_r+0x54c>
 14475ec:	32400515 	stw	r9,20(r6)
 14475f0:	32400415 	stw	r9,16(r6)
 14475f4:	1000510e 	bge	r2,zero,144773c <_malloc_r+0x2e4>
 14475f8:	00807fc4 	movi	r2,511
 14475fc:	11c0ce36 	bltu	r2,r7,1447938 <_malloc_r+0x4e0>
 1447600:	3808d0fa 	srli	r4,r7,3
 1447604:	01c00044 	movi	r7,1
 1447608:	30800117 	ldw	r2,4(r6)
 144760c:	210b883a 	add	r5,r4,r4
 1447610:	294b883a 	add	r5,r5,r5
 1447614:	2009d0ba 	srai	r4,r4,2
 1447618:	294b883a 	add	r5,r5,r5
 144761c:	298b883a 	add	r5,r5,r6
 1447620:	2a000217 	ldw	r8,8(r5)
 1447624:	3908983a 	sll	r4,r7,r4
 1447628:	81400315 	stw	r5,12(r16)
 144762c:	82000215 	stw	r8,8(r16)
 1447630:	2088b03a 	or	r4,r4,r2
 1447634:	2c000215 	stw	r16,8(r5)
 1447638:	31000115 	stw	r4,4(r6)
 144763c:	44000315 	stw	r16,12(r8)
 1447640:	1805d0ba 	srai	r2,r3,2
 1447644:	01400044 	movi	r5,1
 1447648:	288a983a 	sll	r5,r5,r2
 144764c:	21404336 	bltu	r4,r5,144775c <_malloc_r+0x304>
 1447650:	2144703a 	and	r2,r4,r5
 1447654:	10000a1e 	bne	r2,zero,1447680 <_malloc_r+0x228>
 1447658:	00bfff04 	movi	r2,-4
 144765c:	294b883a 	add	r5,r5,r5
 1447660:	1886703a 	and	r3,r3,r2
 1447664:	2144703a 	and	r2,r4,r5
 1447668:	18c00104 	addi	r3,r3,4
 144766c:	1000041e 	bne	r2,zero,1447680 <_malloc_r+0x228>
 1447670:	294b883a 	add	r5,r5,r5
 1447674:	2144703a 	and	r2,r4,r5
 1447678:	18c00104 	addi	r3,r3,4
 144767c:	103ffc26 	beq	r2,zero,1447670 <__alt_data_end+0xfffe1e70>
 1447680:	023fff04 	movi	r8,-4
 1447684:	01c003c4 	movi	r7,15
 1447688:	18c5883a 	add	r2,r3,r3
 144768c:	1085883a 	add	r2,r2,r2
 1447690:	1085883a 	add	r2,r2,r2
 1447694:	9895883a 	add	r10,r19,r2
 1447698:	52c00304 	addi	r11,r10,12
 144769c:	1819883a 	mov	r12,r3
 14476a0:	5c000017 	ldw	r16,0(r11)
 14476a4:	59bffd04 	addi	r6,r11,-12
 14476a8:	8180041e 	bne	r16,r6,14476bc <_malloc_r+0x264>
 14476ac:	0000ce06 	br	14479e8 <_malloc_r+0x590>
 14476b0:	2000d70e 	bge	r4,zero,1447a10 <_malloc_r+0x5b8>
 14476b4:	84000317 	ldw	r16,12(r16)
 14476b8:	8180cb26 	beq	r16,r6,14479e8 <_malloc_r+0x590>
 14476bc:	80800117 	ldw	r2,4(r16)
 14476c0:	1204703a 	and	r2,r2,r8
 14476c4:	1449c83a 	sub	r4,r2,r17
 14476c8:	393ff90e 	bge	r7,r4,14476b0 <__alt_data_end+0xfffe1eb0>
 14476cc:	80800317 	ldw	r2,12(r16)
 14476d0:	80c00217 	ldw	r3,8(r16)
 14476d4:	89400054 	ori	r5,r17,1
 14476d8:	81400115 	stw	r5,4(r16)
 14476dc:	18800315 	stw	r2,12(r3)
 14476e0:	10c00215 	stw	r3,8(r2)
 14476e4:	8463883a 	add	r17,r16,r17
 14476e8:	9c400515 	stw	r17,20(r19)
 14476ec:	9c400415 	stw	r17,16(r19)
 14476f0:	20800054 	ori	r2,r4,1
 14476f4:	88800115 	stw	r2,4(r17)
 14476f8:	8a400315 	stw	r9,12(r17)
 14476fc:	8a400215 	stw	r9,8(r17)
 1447700:	8923883a 	add	r17,r17,r4
 1447704:	89000015 	stw	r4,0(r17)
 1447708:	9009883a 	mov	r4,r18
 144770c:	144d6300 	call	144d630 <__malloc_unlock>
 1447710:	80800204 	addi	r2,r16,8
 1447714:	003f7d06 	br	144750c <__alt_data_end+0xfffe1d0c>
 1447718:	00800304 	movi	r2,12
 144771c:	90800015 	stw	r2,0(r18)
 1447720:	0005883a 	mov	r2,zero
 1447724:	003f7906 	br	144750c <__alt_data_end+0xfffe1d0c>
 1447728:	01401f84 	movi	r5,126
 144772c:	01c00fc4 	movi	r7,63
 1447730:	003f8d06 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447734:	81000317 	ldw	r4,12(r16)
 1447738:	003f6a06 	br	14474e4 <__alt_data_end+0xfffe1ce4>
 144773c:	81c5883a 	add	r2,r16,r7
 1447740:	10c00117 	ldw	r3,4(r2)
 1447744:	9009883a 	mov	r4,r18
 1447748:	18c00054 	ori	r3,r3,1
 144774c:	10c00115 	stw	r3,4(r2)
 1447750:	144d6300 	call	144d630 <__malloc_unlock>
 1447754:	80800204 	addi	r2,r16,8
 1447758:	003f6c06 	br	144750c <__alt_data_end+0xfffe1d0c>
 144775c:	9c000217 	ldw	r16,8(r19)
 1447760:	00bfff04 	movi	r2,-4
 1447764:	85800117 	ldw	r22,4(r16)
 1447768:	b0ac703a 	and	r22,r22,r2
 144776c:	b4400336 	bltu	r22,r17,144777c <_malloc_r+0x324>
 1447770:	b445c83a 	sub	r2,r22,r17
 1447774:	00c003c4 	movi	r3,15
 1447778:	18805d16 	blt	r3,r2,14478f0 <_malloc_r+0x498>
 144777c:	05c05174 	movhi	r23,325
 1447780:	00805174 	movhi	r2,325
 1447784:	bdc55404 	addi	r23,r23,5456
 1447788:	10886f04 	addi	r2,r2,8636
 144778c:	15400017 	ldw	r21,0(r2)
 1447790:	b9000017 	ldw	r4,0(r23)
 1447794:	00ffffc4 	movi	r3,-1
 1447798:	858d883a 	add	r6,r16,r22
 144779c:	8d6b883a 	add	r21,r17,r21
 14477a0:	20c0e426 	beq	r4,r3,1447b34 <_malloc_r+0x6dc>
 14477a4:	ad4403c4 	addi	r21,r21,4111
 14477a8:	00fc0004 	movi	r3,-4096
 14477ac:	a8ea703a 	and	r21,r21,r3
 14477b0:	9009883a 	mov	r4,r18
 14477b4:	a80b883a 	mov	r5,r21
 14477b8:	d9800015 	stw	r6,0(sp)
 14477bc:	14496fc0 	call	14496fc <_sbrk_r>
 14477c0:	00ffffc4 	movi	r3,-1
 14477c4:	1029883a 	mov	r20,r2
 14477c8:	d9800017 	ldw	r6,0(sp)
 14477cc:	10c0a426 	beq	r2,r3,1447a60 <_malloc_r+0x608>
 14477d0:	1180a236 	bltu	r2,r6,1447a5c <_malloc_r+0x604>
 14477d4:	07005174 	movhi	fp,325
 14477d8:	e7087804 	addi	fp,fp,8672
 14477dc:	e0c00017 	ldw	r3,0(fp)
 14477e0:	a8c7883a 	add	r3,r21,r3
 14477e4:	e0c00015 	stw	r3,0(fp)
 14477e8:	3500da26 	beq	r6,r20,1447b54 <_malloc_r+0x6fc>
 14477ec:	b9000017 	ldw	r4,0(r23)
 14477f0:	00bfffc4 	movi	r2,-1
 14477f4:	2080e426 	beq	r4,r2,1447b88 <_malloc_r+0x730>
 14477f8:	a185c83a 	sub	r2,r20,r6
 14477fc:	1885883a 	add	r2,r3,r2
 1447800:	e0800015 	stw	r2,0(fp)
 1447804:	a0c001cc 	andi	r3,r20,7
 1447808:	1800b526 	beq	r3,zero,1447ae0 <_malloc_r+0x688>
 144780c:	a0e9c83a 	sub	r20,r20,r3
 1447810:	00840204 	movi	r2,4104
 1447814:	a5000204 	addi	r20,r20,8
 1447818:	10c7c83a 	sub	r3,r2,r3
 144781c:	a545883a 	add	r2,r20,r21
 1447820:	1083ffcc 	andi	r2,r2,4095
 1447824:	18abc83a 	sub	r21,r3,r2
 1447828:	9009883a 	mov	r4,r18
 144782c:	a80b883a 	mov	r5,r21
 1447830:	14496fc0 	call	14496fc <_sbrk_r>
 1447834:	00ffffc4 	movi	r3,-1
 1447838:	10c0d026 	beq	r2,r3,1447b7c <_malloc_r+0x724>
 144783c:	1507c83a 	sub	r3,r2,r20
 1447840:	a8c7883a 	add	r3,r21,r3
 1447844:	18c00054 	ori	r3,r3,1
 1447848:	e0800017 	ldw	r2,0(fp)
 144784c:	9d000215 	stw	r20,8(r19)
 1447850:	a0c00115 	stw	r3,4(r20)
 1447854:	a887883a 	add	r3,r21,r2
 1447858:	e0c00015 	stw	r3,0(fp)
 144785c:	84c00e26 	beq	r16,r19,1447898 <_malloc_r+0x440>
 1447860:	018003c4 	movi	r6,15
 1447864:	3580a02e 	bgeu	r6,r22,1447ae8 <_malloc_r+0x690>
 1447868:	81400117 	ldw	r5,4(r16)
 144786c:	013ffe04 	movi	r4,-8
 1447870:	b0bffd04 	addi	r2,r22,-12
 1447874:	1104703a 	and	r2,r2,r4
 1447878:	2900004c 	andi	r4,r5,1
 144787c:	1108b03a 	or	r4,r2,r4
 1447880:	81000115 	stw	r4,4(r16)
 1447884:	01400144 	movi	r5,5
 1447888:	8089883a 	add	r4,r16,r2
 144788c:	21400115 	stw	r5,4(r4)
 1447890:	21400215 	stw	r5,8(r4)
 1447894:	3080c036 	bltu	r6,r2,1447b98 <_malloc_r+0x740>
 1447898:	00805174 	movhi	r2,325
 144789c:	10886e04 	addi	r2,r2,8632
 14478a0:	11000017 	ldw	r4,0(r2)
 14478a4:	20c0012e 	bgeu	r4,r3,14478ac <_malloc_r+0x454>
 14478a8:	10c00015 	stw	r3,0(r2)
 14478ac:	00805174 	movhi	r2,325
 14478b0:	10886d04 	addi	r2,r2,8628
 14478b4:	11000017 	ldw	r4,0(r2)
 14478b8:	9c000217 	ldw	r16,8(r19)
 14478bc:	20c0012e 	bgeu	r4,r3,14478c4 <_malloc_r+0x46c>
 14478c0:	10c00015 	stw	r3,0(r2)
 14478c4:	80c00117 	ldw	r3,4(r16)
 14478c8:	00bfff04 	movi	r2,-4
 14478cc:	1886703a 	and	r3,r3,r2
 14478d0:	1c45c83a 	sub	r2,r3,r17
 14478d4:	1c400236 	bltu	r3,r17,14478e0 <_malloc_r+0x488>
 14478d8:	00c003c4 	movi	r3,15
 14478dc:	18800416 	blt	r3,r2,14478f0 <_malloc_r+0x498>
 14478e0:	9009883a 	mov	r4,r18
 14478e4:	144d6300 	call	144d630 <__malloc_unlock>
 14478e8:	0005883a 	mov	r2,zero
 14478ec:	003f0706 	br	144750c <__alt_data_end+0xfffe1d0c>
 14478f0:	88c00054 	ori	r3,r17,1
 14478f4:	80c00115 	stw	r3,4(r16)
 14478f8:	8463883a 	add	r17,r16,r17
 14478fc:	10800054 	ori	r2,r2,1
 1447900:	9c400215 	stw	r17,8(r19)
 1447904:	88800115 	stw	r2,4(r17)
 1447908:	9009883a 	mov	r4,r18
 144790c:	144d6300 	call	144d630 <__malloc_unlock>
 1447910:	80800204 	addi	r2,r16,8
 1447914:	003efd06 	br	144750c <__alt_data_end+0xfffe1d0c>
 1447918:	00800504 	movi	r2,20
 144791c:	10c0482e 	bgeu	r2,r3,1447a40 <_malloc_r+0x5e8>
 1447920:	00801504 	movi	r2,84
 1447924:	10c06836 	bltu	r2,r3,1447ac8 <_malloc_r+0x670>
 1447928:	8806d33a 	srli	r3,r17,12
 144792c:	19c01b84 	addi	r7,r3,110
 1447930:	39cb883a 	add	r5,r7,r7
 1447934:	003f0c06 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447938:	3804d27a 	srli	r2,r7,9
 144793c:	01000104 	movi	r4,4
 1447940:	2080422e 	bgeu	r4,r2,1447a4c <_malloc_r+0x5f4>
 1447944:	01000504 	movi	r4,20
 1447948:	20807c36 	bltu	r4,r2,1447b3c <_malloc_r+0x6e4>
 144794c:	110016c4 	addi	r4,r2,91
 1447950:	210b883a 	add	r5,r4,r4
 1447954:	294b883a 	add	r5,r5,r5
 1447958:	294b883a 	add	r5,r5,r5
 144795c:	994b883a 	add	r5,r19,r5
 1447960:	28800217 	ldw	r2,8(r5)
 1447964:	02005174 	movhi	r8,325
 1447968:	42038b04 	addi	r8,r8,3628
 144796c:	11406326 	beq	r2,r5,1447afc <_malloc_r+0x6a4>
 1447970:	01bfff04 	movi	r6,-4
 1447974:	11000117 	ldw	r4,4(r2)
 1447978:	2188703a 	and	r4,r4,r6
 144797c:	3900022e 	bgeu	r7,r4,1447988 <_malloc_r+0x530>
 1447980:	10800217 	ldw	r2,8(r2)
 1447984:	28bffb1e 	bne	r5,r2,1447974 <__alt_data_end+0xfffe2174>
 1447988:	11800317 	ldw	r6,12(r2)
 144798c:	99000117 	ldw	r4,4(r19)
 1447990:	81800315 	stw	r6,12(r16)
 1447994:	80800215 	stw	r2,8(r16)
 1447998:	34000215 	stw	r16,8(r6)
 144799c:	14000315 	stw	r16,12(r2)
 14479a0:	003f2706 	br	1447640 <__alt_data_end+0xfffe1e40>
 14479a4:	88c00054 	ori	r3,r17,1
 14479a8:	80c00115 	stw	r3,4(r16)
 14479ac:	8463883a 	add	r17,r16,r17
 14479b0:	34400515 	stw	r17,20(r6)
 14479b4:	34400415 	stw	r17,16(r6)
 14479b8:	10c00054 	ori	r3,r2,1
 14479bc:	8a400315 	stw	r9,12(r17)
 14479c0:	8a400215 	stw	r9,8(r17)
 14479c4:	88c00115 	stw	r3,4(r17)
 14479c8:	88a3883a 	add	r17,r17,r2
 14479cc:	88800015 	stw	r2,0(r17)
 14479d0:	9009883a 	mov	r4,r18
 14479d4:	144d6300 	call	144d630 <__malloc_unlock>
 14479d8:	80800204 	addi	r2,r16,8
 14479dc:	003ecb06 	br	144750c <__alt_data_end+0xfffe1d0c>
 14479e0:	31000117 	ldw	r4,4(r6)
 14479e4:	003f1606 	br	1447640 <__alt_data_end+0xfffe1e40>
 14479e8:	63000044 	addi	r12,r12,1
 14479ec:	608000cc 	andi	r2,r12,3
 14479f0:	5ac00204 	addi	r11,r11,8
 14479f4:	103f2a1e 	bne	r2,zero,14476a0 <__alt_data_end+0xfffe1ea0>
 14479f8:	00002106 	br	1447a80 <_malloc_r+0x628>
 14479fc:	80800204 	addi	r2,r16,8
 1447a00:	84000517 	ldw	r16,20(r16)
 1447a04:	143eb31e 	bne	r2,r16,14474d4 <__alt_data_end+0xfffe1cd4>
 1447a08:	18c00084 	addi	r3,r3,2
 1447a0c:	003eec06 	br	14475c0 <__alt_data_end+0xfffe1dc0>
 1447a10:	8085883a 	add	r2,r16,r2
 1447a14:	10c00117 	ldw	r3,4(r2)
 1447a18:	81000317 	ldw	r4,12(r16)
 1447a1c:	81400217 	ldw	r5,8(r16)
 1447a20:	18c00054 	ori	r3,r3,1
 1447a24:	10c00115 	stw	r3,4(r2)
 1447a28:	29000315 	stw	r4,12(r5)
 1447a2c:	21400215 	stw	r5,8(r4)
 1447a30:	9009883a 	mov	r4,r18
 1447a34:	144d6300 	call	144d630 <__malloc_unlock>
 1447a38:	80800204 	addi	r2,r16,8
 1447a3c:	003eb306 	br	144750c <__alt_data_end+0xfffe1d0c>
 1447a40:	19c016c4 	addi	r7,r3,91
 1447a44:	39cb883a 	add	r5,r7,r7
 1447a48:	003ec706 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447a4c:	3804d1ba 	srli	r2,r7,6
 1447a50:	11000e04 	addi	r4,r2,56
 1447a54:	210b883a 	add	r5,r4,r4
 1447a58:	003fbe06 	br	1447954 <__alt_data_end+0xfffe2154>
 1447a5c:	84ff5d26 	beq	r16,r19,14477d4 <__alt_data_end+0xfffe1fd4>
 1447a60:	9c000217 	ldw	r16,8(r19)
 1447a64:	00bfff04 	movi	r2,-4
 1447a68:	80c00117 	ldw	r3,4(r16)
 1447a6c:	1886703a 	and	r3,r3,r2
 1447a70:	003f9706 	br	14478d0 <__alt_data_end+0xfffe20d0>
 1447a74:	52800017 	ldw	r10,0(r10)
 1447a78:	18ffffc4 	addi	r3,r3,-1
 1447a7c:	50805c1e 	bne	r10,r2,1447bf0 <_malloc_r+0x798>
 1447a80:	190000cc 	andi	r4,r3,3
 1447a84:	50bffe04 	addi	r2,r10,-8
 1447a88:	203ffa1e 	bne	r4,zero,1447a74 <__alt_data_end+0xfffe2274>
 1447a8c:	98800117 	ldw	r2,4(r19)
 1447a90:	0146303a 	nor	r3,zero,r5
 1447a94:	1884703a 	and	r2,r3,r2
 1447a98:	98800115 	stw	r2,4(r19)
 1447a9c:	294b883a 	add	r5,r5,r5
 1447aa0:	117f2e36 	bltu	r2,r5,144775c <__alt_data_end+0xfffe1f5c>
 1447aa4:	283f2d26 	beq	r5,zero,144775c <__alt_data_end+0xfffe1f5c>
 1447aa8:	1146703a 	and	r3,r2,r5
 1447aac:	1800521e 	bne	r3,zero,1447bf8 <_malloc_r+0x7a0>
 1447ab0:	6007883a 	mov	r3,r12
 1447ab4:	294b883a 	add	r5,r5,r5
 1447ab8:	1148703a 	and	r4,r2,r5
 1447abc:	18c00104 	addi	r3,r3,4
 1447ac0:	203ffc26 	beq	r4,zero,1447ab4 <__alt_data_end+0xfffe22b4>
 1447ac4:	003ef006 	br	1447688 <__alt_data_end+0xfffe1e88>
 1447ac8:	00805504 	movi	r2,340
 1447acc:	10c01336 	bltu	r2,r3,1447b1c <_malloc_r+0x6c4>
 1447ad0:	8806d3fa 	srli	r3,r17,15
 1447ad4:	19c01dc4 	addi	r7,r3,119
 1447ad8:	39cb883a 	add	r5,r7,r7
 1447adc:	003ea206 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447ae0:	00c40004 	movi	r3,4096
 1447ae4:	003f4d06 	br	144781c <__alt_data_end+0xfffe201c>
 1447ae8:	00800044 	movi	r2,1
 1447aec:	a0800115 	stw	r2,4(r20)
 1447af0:	a021883a 	mov	r16,r20
 1447af4:	0007883a 	mov	r3,zero
 1447af8:	003f7506 	br	14478d0 <__alt_data_end+0xfffe20d0>
 1447afc:	200bd0ba 	srai	r5,r4,2
 1447b00:	01800044 	movi	r6,1
 1447b04:	41000117 	ldw	r4,4(r8)
 1447b08:	314a983a 	sll	r5,r6,r5
 1447b0c:	100d883a 	mov	r6,r2
 1447b10:	2908b03a 	or	r4,r5,r4
 1447b14:	41000115 	stw	r4,4(r8)
 1447b18:	003f9d06 	br	1447990 <__alt_data_end+0xfffe2190>
 1447b1c:	00815504 	movi	r2,1364
 1447b20:	10c01336 	bltu	r2,r3,1447b70 <_malloc_r+0x718>
 1447b24:	8806d4ba 	srli	r3,r17,18
 1447b28:	19c01f04 	addi	r7,r3,124
 1447b2c:	39cb883a 	add	r5,r7,r7
 1447b30:	003e8d06 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447b34:	ad400404 	addi	r21,r21,16
 1447b38:	003f1d06 	br	14477b0 <__alt_data_end+0xfffe1fb0>
 1447b3c:	01001504 	movi	r4,84
 1447b40:	20801c36 	bltu	r4,r2,1447bb4 <_malloc_r+0x75c>
 1447b44:	3804d33a 	srli	r2,r7,12
 1447b48:	11001b84 	addi	r4,r2,110
 1447b4c:	210b883a 	add	r5,r4,r4
 1447b50:	003f8006 	br	1447954 <__alt_data_end+0xfffe2154>
 1447b54:	3083ffcc 	andi	r2,r6,4095
 1447b58:	103f241e 	bne	r2,zero,14477ec <__alt_data_end+0xfffe1fec>
 1447b5c:	99000217 	ldw	r4,8(r19)
 1447b60:	ad85883a 	add	r2,r21,r22
 1447b64:	10800054 	ori	r2,r2,1
 1447b68:	20800115 	stw	r2,4(r4)
 1447b6c:	003f4a06 	br	1447898 <__alt_data_end+0xfffe2098>
 1447b70:	01403f04 	movi	r5,252
 1447b74:	01c01f84 	movi	r7,126
 1447b78:	003e7b06 	br	1447568 <__alt_data_end+0xfffe1d68>
 1447b7c:	00c00044 	movi	r3,1
 1447b80:	002b883a 	mov	r21,zero
 1447b84:	003f3006 	br	1447848 <__alt_data_end+0xfffe2048>
 1447b88:	00805174 	movhi	r2,325
 1447b8c:	10855404 	addi	r2,r2,5456
 1447b90:	15000015 	stw	r20,0(r2)
 1447b94:	003f1b06 	br	1447804 <__alt_data_end+0xfffe2004>
 1447b98:	9009883a 	mov	r4,r18
 1447b9c:	81400204 	addi	r5,r16,8
 1447ba0:	14468bc0 	call	14468bc <_free_r>
 1447ba4:	00805174 	movhi	r2,325
 1447ba8:	10887804 	addi	r2,r2,8672
 1447bac:	10c00017 	ldw	r3,0(r2)
 1447bb0:	003f3906 	br	1447898 <__alt_data_end+0xfffe2098>
 1447bb4:	01005504 	movi	r4,340
 1447bb8:	20800436 	bltu	r4,r2,1447bcc <_malloc_r+0x774>
 1447bbc:	3804d3fa 	srli	r2,r7,15
 1447bc0:	11001dc4 	addi	r4,r2,119
 1447bc4:	210b883a 	add	r5,r4,r4
 1447bc8:	003f6206 	br	1447954 <__alt_data_end+0xfffe2154>
 1447bcc:	01015504 	movi	r4,1364
 1447bd0:	20800436 	bltu	r4,r2,1447be4 <_malloc_r+0x78c>
 1447bd4:	3804d4ba 	srli	r2,r7,18
 1447bd8:	11001f04 	addi	r4,r2,124
 1447bdc:	210b883a 	add	r5,r4,r4
 1447be0:	003f5c06 	br	1447954 <__alt_data_end+0xfffe2154>
 1447be4:	01403f04 	movi	r5,252
 1447be8:	01001f84 	movi	r4,126
 1447bec:	003f5906 	br	1447954 <__alt_data_end+0xfffe2154>
 1447bf0:	98800117 	ldw	r2,4(r19)
 1447bf4:	003fa906 	br	1447a9c <__alt_data_end+0xfffe229c>
 1447bf8:	6007883a 	mov	r3,r12
 1447bfc:	003ea206 	br	1447688 <__alt_data_end+0xfffe1e88>

01447c00 <memchr>:
 1447c00:	208000cc 	andi	r2,r4,3
 1447c04:	280f883a 	mov	r7,r5
 1447c08:	10003526 	beq	r2,zero,1447ce0 <memchr+0xe0>
 1447c0c:	30bfffc4 	addi	r2,r6,-1
 1447c10:	30001b26 	beq	r6,zero,1447c80 <memchr+0x80>
 1447c14:	21800003 	ldbu	r6,0(r4)
 1447c18:	28c03fcc 	andi	r3,r5,255
 1447c1c:	30c01a26 	beq	r6,r3,1447c88 <memchr+0x88>
 1447c20:	180d883a 	mov	r6,r3
 1447c24:	00000406 	br	1447c38 <memchr+0x38>
 1447c28:	10001526 	beq	r2,zero,1447c80 <memchr+0x80>
 1447c2c:	20c00003 	ldbu	r3,0(r4)
 1447c30:	10bfffc4 	addi	r2,r2,-1
 1447c34:	19801426 	beq	r3,r6,1447c88 <memchr+0x88>
 1447c38:	21000044 	addi	r4,r4,1
 1447c3c:	20c000cc 	andi	r3,r4,3
 1447c40:	183ff91e 	bne	r3,zero,1447c28 <__alt_data_end+0xfffe2428>
 1447c44:	024000c4 	movi	r9,3
 1447c48:	48801136 	bltu	r9,r2,1447c90 <memchr+0x90>
 1447c4c:	10000c26 	beq	r2,zero,1447c80 <memchr+0x80>
 1447c50:	20c00003 	ldbu	r3,0(r4)
 1447c54:	29403fcc 	andi	r5,r5,255
 1447c58:	19400b26 	beq	r3,r5,1447c88 <memchr+0x88>
 1447c5c:	20c00044 	addi	r3,r4,1
 1447c60:	2085883a 	add	r2,r4,r2
 1447c64:	39803fcc 	andi	r6,r7,255
 1447c68:	00000306 	br	1447c78 <memchr+0x78>
 1447c6c:	18c00044 	addi	r3,r3,1
 1447c70:	197fffc3 	ldbu	r5,-1(r3)
 1447c74:	29800426 	beq	r5,r6,1447c88 <memchr+0x88>
 1447c78:	1809883a 	mov	r4,r3
 1447c7c:	18bffb1e 	bne	r3,r2,1447c6c <__alt_data_end+0xfffe246c>
 1447c80:	0005883a 	mov	r2,zero
 1447c84:	f800283a 	ret
 1447c88:	2005883a 	mov	r2,r4
 1447c8c:	f800283a 	ret
 1447c90:	28c03fcc 	andi	r3,r5,255
 1447c94:	1810923a 	slli	r8,r3,8
 1447c98:	02ffbff4 	movhi	r11,65279
 1447c9c:	02a02074 	movhi	r10,32897
 1447ca0:	40c6b03a 	or	r3,r8,r3
 1447ca4:	1810943a 	slli	r8,r3,16
 1447ca8:	5affbfc4 	addi	r11,r11,-257
 1447cac:	52a02004 	addi	r10,r10,-32640
 1447cb0:	40d0b03a 	or	r8,r8,r3
 1447cb4:	20c00017 	ldw	r3,0(r4)
 1447cb8:	40c6f03a 	xor	r3,r8,r3
 1447cbc:	1acd883a 	add	r6,r3,r11
 1447cc0:	00c6303a 	nor	r3,zero,r3
 1447cc4:	30c6703a 	and	r3,r6,r3
 1447cc8:	1a86703a 	and	r3,r3,r10
 1447ccc:	183fdf1e 	bne	r3,zero,1447c4c <__alt_data_end+0xfffe244c>
 1447cd0:	10bfff04 	addi	r2,r2,-4
 1447cd4:	21000104 	addi	r4,r4,4
 1447cd8:	48bff636 	bltu	r9,r2,1447cb4 <__alt_data_end+0xfffe24b4>
 1447cdc:	003fdb06 	br	1447c4c <__alt_data_end+0xfffe244c>
 1447ce0:	3005883a 	mov	r2,r6
 1447ce4:	003fd706 	br	1447c44 <__alt_data_end+0xfffe2444>

01447ce8 <memcpy>:
 1447ce8:	deffff04 	addi	sp,sp,-4
 1447cec:	dc000015 	stw	r16,0(sp)
 1447cf0:	00c003c4 	movi	r3,15
 1447cf4:	2005883a 	mov	r2,r4
 1447cf8:	1980432e 	bgeu	r3,r6,1447e08 <memcpy+0x120>
 1447cfc:	2146b03a 	or	r3,r4,r5
 1447d00:	18c000cc 	andi	r3,r3,3
 1447d04:	1800421e 	bne	r3,zero,1447e10 <memcpy+0x128>
 1447d08:	343ffc04 	addi	r16,r6,-16
 1447d0c:	8020d13a 	srli	r16,r16,4
 1447d10:	28c00104 	addi	r3,r5,4
 1447d14:	23400104 	addi	r13,r4,4
 1447d18:	801e913a 	slli	r15,r16,4
 1447d1c:	2b000204 	addi	r12,r5,8
 1447d20:	22c00204 	addi	r11,r4,8
 1447d24:	7bc00504 	addi	r15,r15,20
 1447d28:	2a800304 	addi	r10,r5,12
 1447d2c:	22400304 	addi	r9,r4,12
 1447d30:	2bdf883a 	add	r15,r5,r15
 1447d34:	2811883a 	mov	r8,r5
 1447d38:	200f883a 	mov	r7,r4
 1447d3c:	41000017 	ldw	r4,0(r8)
 1447d40:	39c00404 	addi	r7,r7,16
 1447d44:	18c00404 	addi	r3,r3,16
 1447d48:	393ffc15 	stw	r4,-16(r7)
 1447d4c:	1bbffc17 	ldw	r14,-16(r3)
 1447d50:	6b400404 	addi	r13,r13,16
 1447d54:	5ac00404 	addi	r11,r11,16
 1447d58:	6bbffc15 	stw	r14,-16(r13)
 1447d5c:	63800017 	ldw	r14,0(r12)
 1447d60:	4a400404 	addi	r9,r9,16
 1447d64:	42000404 	addi	r8,r8,16
 1447d68:	5bbffc15 	stw	r14,-16(r11)
 1447d6c:	53800017 	ldw	r14,0(r10)
 1447d70:	63000404 	addi	r12,r12,16
 1447d74:	52800404 	addi	r10,r10,16
 1447d78:	4bbffc15 	stw	r14,-16(r9)
 1447d7c:	1bffef1e 	bne	r3,r15,1447d3c <__alt_data_end+0xfffe253c>
 1447d80:	81c00044 	addi	r7,r16,1
 1447d84:	380e913a 	slli	r7,r7,4
 1447d88:	310003cc 	andi	r4,r6,15
 1447d8c:	02c000c4 	movi	r11,3
 1447d90:	11c7883a 	add	r3,r2,r7
 1447d94:	29cb883a 	add	r5,r5,r7
 1447d98:	59001f2e 	bgeu	r11,r4,1447e18 <memcpy+0x130>
 1447d9c:	1813883a 	mov	r9,r3
 1447da0:	2811883a 	mov	r8,r5
 1447da4:	200f883a 	mov	r7,r4
 1447da8:	42800017 	ldw	r10,0(r8)
 1447dac:	4a400104 	addi	r9,r9,4
 1447db0:	39ffff04 	addi	r7,r7,-4
 1447db4:	4abfff15 	stw	r10,-4(r9)
 1447db8:	42000104 	addi	r8,r8,4
 1447dbc:	59fffa36 	bltu	r11,r7,1447da8 <__alt_data_end+0xfffe25a8>
 1447dc0:	213fff04 	addi	r4,r4,-4
 1447dc4:	2008d0ba 	srli	r4,r4,2
 1447dc8:	318000cc 	andi	r6,r6,3
 1447dcc:	21000044 	addi	r4,r4,1
 1447dd0:	2109883a 	add	r4,r4,r4
 1447dd4:	2109883a 	add	r4,r4,r4
 1447dd8:	1907883a 	add	r3,r3,r4
 1447ddc:	290b883a 	add	r5,r5,r4
 1447de0:	30000626 	beq	r6,zero,1447dfc <memcpy+0x114>
 1447de4:	198d883a 	add	r6,r3,r6
 1447de8:	29c00003 	ldbu	r7,0(r5)
 1447dec:	18c00044 	addi	r3,r3,1
 1447df0:	29400044 	addi	r5,r5,1
 1447df4:	19ffffc5 	stb	r7,-1(r3)
 1447df8:	19bffb1e 	bne	r3,r6,1447de8 <__alt_data_end+0xfffe25e8>
 1447dfc:	dc000017 	ldw	r16,0(sp)
 1447e00:	dec00104 	addi	sp,sp,4
 1447e04:	f800283a 	ret
 1447e08:	2007883a 	mov	r3,r4
 1447e0c:	003ff406 	br	1447de0 <__alt_data_end+0xfffe25e0>
 1447e10:	2007883a 	mov	r3,r4
 1447e14:	003ff306 	br	1447de4 <__alt_data_end+0xfffe25e4>
 1447e18:	200d883a 	mov	r6,r4
 1447e1c:	003ff006 	br	1447de0 <__alt_data_end+0xfffe25e0>

01447e20 <memmove>:
 1447e20:	2005883a 	mov	r2,r4
 1447e24:	29000b2e 	bgeu	r5,r4,1447e54 <memmove+0x34>
 1447e28:	298f883a 	add	r7,r5,r6
 1447e2c:	21c0092e 	bgeu	r4,r7,1447e54 <memmove+0x34>
 1447e30:	2187883a 	add	r3,r4,r6
 1447e34:	198bc83a 	sub	r5,r3,r6
 1447e38:	30004b26 	beq	r6,zero,1447f68 <memmove+0x148>
 1447e3c:	39ffffc4 	addi	r7,r7,-1
 1447e40:	39000003 	ldbu	r4,0(r7)
 1447e44:	18ffffc4 	addi	r3,r3,-1
 1447e48:	19000005 	stb	r4,0(r3)
 1447e4c:	197ffb1e 	bne	r3,r5,1447e3c <__alt_data_end+0xfffe263c>
 1447e50:	f800283a 	ret
 1447e54:	00c003c4 	movi	r3,15
 1447e58:	1980412e 	bgeu	r3,r6,1447f60 <memmove+0x140>
 1447e5c:	1146b03a 	or	r3,r2,r5
 1447e60:	18c000cc 	andi	r3,r3,3
 1447e64:	1800411e 	bne	r3,zero,1447f6c <memmove+0x14c>
 1447e68:	33fffc04 	addi	r15,r6,-16
 1447e6c:	781ed13a 	srli	r15,r15,4
 1447e70:	28c00104 	addi	r3,r5,4
 1447e74:	13400104 	addi	r13,r2,4
 1447e78:	781c913a 	slli	r14,r15,4
 1447e7c:	2b000204 	addi	r12,r5,8
 1447e80:	12c00204 	addi	r11,r2,8
 1447e84:	73800504 	addi	r14,r14,20
 1447e88:	2a800304 	addi	r10,r5,12
 1447e8c:	12400304 	addi	r9,r2,12
 1447e90:	2b9d883a 	add	r14,r5,r14
 1447e94:	2811883a 	mov	r8,r5
 1447e98:	100f883a 	mov	r7,r2
 1447e9c:	41000017 	ldw	r4,0(r8)
 1447ea0:	39c00404 	addi	r7,r7,16
 1447ea4:	18c00404 	addi	r3,r3,16
 1447ea8:	393ffc15 	stw	r4,-16(r7)
 1447eac:	193ffc17 	ldw	r4,-16(r3)
 1447eb0:	6b400404 	addi	r13,r13,16
 1447eb4:	5ac00404 	addi	r11,r11,16
 1447eb8:	693ffc15 	stw	r4,-16(r13)
 1447ebc:	61000017 	ldw	r4,0(r12)
 1447ec0:	4a400404 	addi	r9,r9,16
 1447ec4:	42000404 	addi	r8,r8,16
 1447ec8:	593ffc15 	stw	r4,-16(r11)
 1447ecc:	51000017 	ldw	r4,0(r10)
 1447ed0:	63000404 	addi	r12,r12,16
 1447ed4:	52800404 	addi	r10,r10,16
 1447ed8:	493ffc15 	stw	r4,-16(r9)
 1447edc:	1bbfef1e 	bne	r3,r14,1447e9c <__alt_data_end+0xfffe269c>
 1447ee0:	79000044 	addi	r4,r15,1
 1447ee4:	2008913a 	slli	r4,r4,4
 1447ee8:	328003cc 	andi	r10,r6,15
 1447eec:	02c000c4 	movi	r11,3
 1447ef0:	1107883a 	add	r3,r2,r4
 1447ef4:	290b883a 	add	r5,r5,r4
 1447ef8:	5a801e2e 	bgeu	r11,r10,1447f74 <memmove+0x154>
 1447efc:	1813883a 	mov	r9,r3
 1447f00:	2811883a 	mov	r8,r5
 1447f04:	500f883a 	mov	r7,r10
 1447f08:	41000017 	ldw	r4,0(r8)
 1447f0c:	4a400104 	addi	r9,r9,4
 1447f10:	39ffff04 	addi	r7,r7,-4
 1447f14:	493fff15 	stw	r4,-4(r9)
 1447f18:	42000104 	addi	r8,r8,4
 1447f1c:	59fffa36 	bltu	r11,r7,1447f08 <__alt_data_end+0xfffe2708>
 1447f20:	513fff04 	addi	r4,r10,-4
 1447f24:	2008d0ba 	srli	r4,r4,2
 1447f28:	318000cc 	andi	r6,r6,3
 1447f2c:	21000044 	addi	r4,r4,1
 1447f30:	2109883a 	add	r4,r4,r4
 1447f34:	2109883a 	add	r4,r4,r4
 1447f38:	1907883a 	add	r3,r3,r4
 1447f3c:	290b883a 	add	r5,r5,r4
 1447f40:	30000926 	beq	r6,zero,1447f68 <memmove+0x148>
 1447f44:	198d883a 	add	r6,r3,r6
 1447f48:	29c00003 	ldbu	r7,0(r5)
 1447f4c:	18c00044 	addi	r3,r3,1
 1447f50:	29400044 	addi	r5,r5,1
 1447f54:	19ffffc5 	stb	r7,-1(r3)
 1447f58:	19bffb1e 	bne	r3,r6,1447f48 <__alt_data_end+0xfffe2748>
 1447f5c:	f800283a 	ret
 1447f60:	1007883a 	mov	r3,r2
 1447f64:	003ff606 	br	1447f40 <__alt_data_end+0xfffe2740>
 1447f68:	f800283a 	ret
 1447f6c:	1007883a 	mov	r3,r2
 1447f70:	003ff406 	br	1447f44 <__alt_data_end+0xfffe2744>
 1447f74:	500d883a 	mov	r6,r10
 1447f78:	003ff106 	br	1447f40 <__alt_data_end+0xfffe2740>

01447f7c <memset>:
 1447f7c:	20c000cc 	andi	r3,r4,3
 1447f80:	2005883a 	mov	r2,r4
 1447f84:	18004326 	beq	r3,zero,1448094 <memset+0x118>
 1447f88:	31ffffc4 	addi	r7,r6,-1
 1447f8c:	30004026 	beq	r6,zero,1448090 <memset+0x114>
 1447f90:	2813883a 	mov	r9,r5
 1447f94:	200d883a 	mov	r6,r4
 1447f98:	2007883a 	mov	r3,r4
 1447f9c:	00000406 	br	1447fb0 <memset+0x34>
 1447fa0:	3a3fffc4 	addi	r8,r7,-1
 1447fa4:	31800044 	addi	r6,r6,1
 1447fa8:	38003926 	beq	r7,zero,1448090 <memset+0x114>
 1447fac:	400f883a 	mov	r7,r8
 1447fb0:	18c00044 	addi	r3,r3,1
 1447fb4:	32400005 	stb	r9,0(r6)
 1447fb8:	1a0000cc 	andi	r8,r3,3
 1447fbc:	403ff81e 	bne	r8,zero,1447fa0 <__alt_data_end+0xfffe27a0>
 1447fc0:	010000c4 	movi	r4,3
 1447fc4:	21c02d2e 	bgeu	r4,r7,144807c <memset+0x100>
 1447fc8:	29803fcc 	andi	r6,r5,255
 1447fcc:	3008923a 	slli	r4,r6,8
 1447fd0:	218cb03a 	or	r6,r4,r6
 1447fd4:	3008943a 	slli	r4,r6,16
 1447fd8:	218cb03a 	or	r6,r4,r6
 1447fdc:	010003c4 	movi	r4,15
 1447fe0:	21c0182e 	bgeu	r4,r7,1448044 <memset+0xc8>
 1447fe4:	3b3ffc04 	addi	r12,r7,-16
 1447fe8:	6018d13a 	srli	r12,r12,4
 1447fec:	1a000104 	addi	r8,r3,4
 1447ff0:	1ac00204 	addi	r11,r3,8
 1447ff4:	6008913a 	slli	r4,r12,4
 1447ff8:	1a800304 	addi	r10,r3,12
 1447ffc:	1813883a 	mov	r9,r3
 1448000:	21000504 	addi	r4,r4,20
 1448004:	1909883a 	add	r4,r3,r4
 1448008:	49800015 	stw	r6,0(r9)
 144800c:	41800015 	stw	r6,0(r8)
 1448010:	59800015 	stw	r6,0(r11)
 1448014:	51800015 	stw	r6,0(r10)
 1448018:	42000404 	addi	r8,r8,16
 144801c:	4a400404 	addi	r9,r9,16
 1448020:	5ac00404 	addi	r11,r11,16
 1448024:	52800404 	addi	r10,r10,16
 1448028:	413ff71e 	bne	r8,r4,1448008 <__alt_data_end+0xfffe2808>
 144802c:	63000044 	addi	r12,r12,1
 1448030:	6018913a 	slli	r12,r12,4
 1448034:	39c003cc 	andi	r7,r7,15
 1448038:	010000c4 	movi	r4,3
 144803c:	1b07883a 	add	r3,r3,r12
 1448040:	21c00e2e 	bgeu	r4,r7,144807c <memset+0x100>
 1448044:	1813883a 	mov	r9,r3
 1448048:	3811883a 	mov	r8,r7
 144804c:	010000c4 	movi	r4,3
 1448050:	49800015 	stw	r6,0(r9)
 1448054:	423fff04 	addi	r8,r8,-4
 1448058:	4a400104 	addi	r9,r9,4
 144805c:	223ffc36 	bltu	r4,r8,1448050 <__alt_data_end+0xfffe2850>
 1448060:	393fff04 	addi	r4,r7,-4
 1448064:	2008d0ba 	srli	r4,r4,2
 1448068:	39c000cc 	andi	r7,r7,3
 144806c:	21000044 	addi	r4,r4,1
 1448070:	2109883a 	add	r4,r4,r4
 1448074:	2109883a 	add	r4,r4,r4
 1448078:	1907883a 	add	r3,r3,r4
 144807c:	38000426 	beq	r7,zero,1448090 <memset+0x114>
 1448080:	19cf883a 	add	r7,r3,r7
 1448084:	19400005 	stb	r5,0(r3)
 1448088:	18c00044 	addi	r3,r3,1
 144808c:	19fffd1e 	bne	r3,r7,1448084 <__alt_data_end+0xfffe2884>
 1448090:	f800283a 	ret
 1448094:	2007883a 	mov	r3,r4
 1448098:	300f883a 	mov	r7,r6
 144809c:	003fc806 	br	1447fc0 <__alt_data_end+0xfffe27c0>

014480a0 <_Balloc>:
 14480a0:	20801317 	ldw	r2,76(r4)
 14480a4:	defffc04 	addi	sp,sp,-16
 14480a8:	dc400115 	stw	r17,4(sp)
 14480ac:	dc000015 	stw	r16,0(sp)
 14480b0:	dfc00315 	stw	ra,12(sp)
 14480b4:	dc800215 	stw	r18,8(sp)
 14480b8:	2023883a 	mov	r17,r4
 14480bc:	2821883a 	mov	r16,r5
 14480c0:	10000f26 	beq	r2,zero,1448100 <_Balloc+0x60>
 14480c4:	8407883a 	add	r3,r16,r16
 14480c8:	18c7883a 	add	r3,r3,r3
 14480cc:	10c7883a 	add	r3,r2,r3
 14480d0:	18800017 	ldw	r2,0(r3)
 14480d4:	10001126 	beq	r2,zero,144811c <_Balloc+0x7c>
 14480d8:	11000017 	ldw	r4,0(r2)
 14480dc:	19000015 	stw	r4,0(r3)
 14480e0:	10000415 	stw	zero,16(r2)
 14480e4:	10000315 	stw	zero,12(r2)
 14480e8:	dfc00317 	ldw	ra,12(sp)
 14480ec:	dc800217 	ldw	r18,8(sp)
 14480f0:	dc400117 	ldw	r17,4(sp)
 14480f4:	dc000017 	ldw	r16,0(sp)
 14480f8:	dec00404 	addi	sp,sp,16
 14480fc:	f800283a 	ret
 1448100:	01400104 	movi	r5,4
 1448104:	01800844 	movi	r6,33
 1448108:	144af3c0 	call	144af3c <_calloc_r>
 144810c:	88801315 	stw	r2,76(r17)
 1448110:	103fec1e 	bne	r2,zero,14480c4 <__alt_data_end+0xfffe28c4>
 1448114:	0005883a 	mov	r2,zero
 1448118:	003ff306 	br	14480e8 <__alt_data_end+0xfffe28e8>
 144811c:	01400044 	movi	r5,1
 1448120:	2c24983a 	sll	r18,r5,r16
 1448124:	8809883a 	mov	r4,r17
 1448128:	91800144 	addi	r6,r18,5
 144812c:	318d883a 	add	r6,r6,r6
 1448130:	318d883a 	add	r6,r6,r6
 1448134:	144af3c0 	call	144af3c <_calloc_r>
 1448138:	103ff626 	beq	r2,zero,1448114 <__alt_data_end+0xfffe2914>
 144813c:	14000115 	stw	r16,4(r2)
 1448140:	14800215 	stw	r18,8(r2)
 1448144:	003fe606 	br	14480e0 <__alt_data_end+0xfffe28e0>

01448148 <_Bfree>:
 1448148:	28000826 	beq	r5,zero,144816c <_Bfree+0x24>
 144814c:	28c00117 	ldw	r3,4(r5)
 1448150:	20801317 	ldw	r2,76(r4)
 1448154:	18c7883a 	add	r3,r3,r3
 1448158:	18c7883a 	add	r3,r3,r3
 144815c:	10c5883a 	add	r2,r2,r3
 1448160:	10c00017 	ldw	r3,0(r2)
 1448164:	28c00015 	stw	r3,0(r5)
 1448168:	11400015 	stw	r5,0(r2)
 144816c:	f800283a 	ret

01448170 <__multadd>:
 1448170:	defff704 	addi	sp,sp,-36
 1448174:	dc800215 	stw	r18,8(sp)
 1448178:	2c800417 	ldw	r18,16(r5)
 144817c:	ddc00715 	stw	r23,28(sp)
 1448180:	dd800615 	stw	r22,24(sp)
 1448184:	dd000415 	stw	r20,16(sp)
 1448188:	dcc00315 	stw	r19,12(sp)
 144818c:	dc400115 	stw	r17,4(sp)
 1448190:	dc000015 	stw	r16,0(sp)
 1448194:	dfc00815 	stw	ra,32(sp)
 1448198:	dd400515 	stw	r21,20(sp)
 144819c:	2827883a 	mov	r19,r5
 14481a0:	2029883a 	mov	r20,r4
 14481a4:	3023883a 	mov	r17,r6
 14481a8:	3821883a 	mov	r16,r7
 14481ac:	2d800504 	addi	r22,r5,20
 14481b0:	002f883a 	mov	r23,zero
 14481b4:	b5400017 	ldw	r21,0(r22)
 14481b8:	880b883a 	mov	r5,r17
 14481bc:	bdc00044 	addi	r23,r23,1
 14481c0:	a93fffcc 	andi	r4,r21,65535
 14481c4:	14423f80 	call	14423f8 <__mulsi3>
 14481c8:	1421883a 	add	r16,r2,r16
 14481cc:	a808d43a 	srli	r4,r21,16
 14481d0:	802ad43a 	srli	r21,r16,16
 14481d4:	880b883a 	mov	r5,r17
 14481d8:	14423f80 	call	14423f8 <__mulsi3>
 14481dc:	a88f883a 	add	r7,r21,r2
 14481e0:	3804943a 	slli	r2,r7,16
 14481e4:	80ffffcc 	andi	r3,r16,65535
 14481e8:	b5800104 	addi	r22,r22,4
 14481ec:	10c7883a 	add	r3,r2,r3
 14481f0:	b0ffff15 	stw	r3,-4(r22)
 14481f4:	3820d43a 	srli	r16,r7,16
 14481f8:	bcbfee16 	blt	r23,r18,14481b4 <__alt_data_end+0xfffe29b4>
 14481fc:	80000926 	beq	r16,zero,1448224 <__multadd+0xb4>
 1448200:	98800217 	ldw	r2,8(r19)
 1448204:	9080130e 	bge	r18,r2,1448254 <__multadd+0xe4>
 1448208:	90800144 	addi	r2,r18,5
 144820c:	1085883a 	add	r2,r2,r2
 1448210:	1085883a 	add	r2,r2,r2
 1448214:	9885883a 	add	r2,r19,r2
 1448218:	14000015 	stw	r16,0(r2)
 144821c:	94800044 	addi	r18,r18,1
 1448220:	9c800415 	stw	r18,16(r19)
 1448224:	9805883a 	mov	r2,r19
 1448228:	dfc00817 	ldw	ra,32(sp)
 144822c:	ddc00717 	ldw	r23,28(sp)
 1448230:	dd800617 	ldw	r22,24(sp)
 1448234:	dd400517 	ldw	r21,20(sp)
 1448238:	dd000417 	ldw	r20,16(sp)
 144823c:	dcc00317 	ldw	r19,12(sp)
 1448240:	dc800217 	ldw	r18,8(sp)
 1448244:	dc400117 	ldw	r17,4(sp)
 1448248:	dc000017 	ldw	r16,0(sp)
 144824c:	dec00904 	addi	sp,sp,36
 1448250:	f800283a 	ret
 1448254:	99400117 	ldw	r5,4(r19)
 1448258:	a009883a 	mov	r4,r20
 144825c:	29400044 	addi	r5,r5,1
 1448260:	14480a00 	call	14480a0 <_Balloc>
 1448264:	99800417 	ldw	r6,16(r19)
 1448268:	99400304 	addi	r5,r19,12
 144826c:	11000304 	addi	r4,r2,12
 1448270:	31800084 	addi	r6,r6,2
 1448274:	318d883a 	add	r6,r6,r6
 1448278:	318d883a 	add	r6,r6,r6
 144827c:	1023883a 	mov	r17,r2
 1448280:	1447ce80 	call	1447ce8 <memcpy>
 1448284:	99000117 	ldw	r4,4(r19)
 1448288:	a0c01317 	ldw	r3,76(r20)
 144828c:	2109883a 	add	r4,r4,r4
 1448290:	2109883a 	add	r4,r4,r4
 1448294:	1907883a 	add	r3,r3,r4
 1448298:	18800017 	ldw	r2,0(r3)
 144829c:	98800015 	stw	r2,0(r19)
 14482a0:	1cc00015 	stw	r19,0(r3)
 14482a4:	8827883a 	mov	r19,r17
 14482a8:	003fd706 	br	1448208 <__alt_data_end+0xfffe2a08>

014482ac <__s2b>:
 14482ac:	defff904 	addi	sp,sp,-28
 14482b0:	dc400115 	stw	r17,4(sp)
 14482b4:	dc000015 	stw	r16,0(sp)
 14482b8:	2023883a 	mov	r17,r4
 14482bc:	2821883a 	mov	r16,r5
 14482c0:	39000204 	addi	r4,r7,8
 14482c4:	01400244 	movi	r5,9
 14482c8:	dcc00315 	stw	r19,12(sp)
 14482cc:	dc800215 	stw	r18,8(sp)
 14482d0:	dfc00615 	stw	ra,24(sp)
 14482d4:	dd400515 	stw	r21,20(sp)
 14482d8:	dd000415 	stw	r20,16(sp)
 14482dc:	3825883a 	mov	r18,r7
 14482e0:	3027883a 	mov	r19,r6
 14482e4:	14423380 	call	1442338 <__divsi3>
 14482e8:	00c00044 	movi	r3,1
 14482ec:	000b883a 	mov	r5,zero
 14482f0:	1880030e 	bge	r3,r2,1448300 <__s2b+0x54>
 14482f4:	18c7883a 	add	r3,r3,r3
 14482f8:	29400044 	addi	r5,r5,1
 14482fc:	18bffd16 	blt	r3,r2,14482f4 <__alt_data_end+0xfffe2af4>
 1448300:	8809883a 	mov	r4,r17
 1448304:	14480a00 	call	14480a0 <_Balloc>
 1448308:	d8c00717 	ldw	r3,28(sp)
 144830c:	10c00515 	stw	r3,20(r2)
 1448310:	00c00044 	movi	r3,1
 1448314:	10c00415 	stw	r3,16(r2)
 1448318:	00c00244 	movi	r3,9
 144831c:	1cc0210e 	bge	r3,r19,14483a4 <__s2b+0xf8>
 1448320:	80eb883a 	add	r21,r16,r3
 1448324:	a829883a 	mov	r20,r21
 1448328:	84e1883a 	add	r16,r16,r19
 144832c:	a1c00007 	ldb	r7,0(r20)
 1448330:	8809883a 	mov	r4,r17
 1448334:	a5000044 	addi	r20,r20,1
 1448338:	100b883a 	mov	r5,r2
 144833c:	01800284 	movi	r6,10
 1448340:	39fff404 	addi	r7,r7,-48
 1448344:	14481700 	call	1448170 <__multadd>
 1448348:	a43ff81e 	bne	r20,r16,144832c <__alt_data_end+0xfffe2b2c>
 144834c:	ace1883a 	add	r16,r21,r19
 1448350:	843ffe04 	addi	r16,r16,-8
 1448354:	9c800a0e 	bge	r19,r18,1448380 <__s2b+0xd4>
 1448358:	94e5c83a 	sub	r18,r18,r19
 144835c:	84a5883a 	add	r18,r16,r18
 1448360:	81c00007 	ldb	r7,0(r16)
 1448364:	8809883a 	mov	r4,r17
 1448368:	84000044 	addi	r16,r16,1
 144836c:	100b883a 	mov	r5,r2
 1448370:	01800284 	movi	r6,10
 1448374:	39fff404 	addi	r7,r7,-48
 1448378:	14481700 	call	1448170 <__multadd>
 144837c:	84bff81e 	bne	r16,r18,1448360 <__alt_data_end+0xfffe2b60>
 1448380:	dfc00617 	ldw	ra,24(sp)
 1448384:	dd400517 	ldw	r21,20(sp)
 1448388:	dd000417 	ldw	r20,16(sp)
 144838c:	dcc00317 	ldw	r19,12(sp)
 1448390:	dc800217 	ldw	r18,8(sp)
 1448394:	dc400117 	ldw	r17,4(sp)
 1448398:	dc000017 	ldw	r16,0(sp)
 144839c:	dec00704 	addi	sp,sp,28
 14483a0:	f800283a 	ret
 14483a4:	84000284 	addi	r16,r16,10
 14483a8:	1827883a 	mov	r19,r3
 14483ac:	003fe906 	br	1448354 <__alt_data_end+0xfffe2b54>

014483b0 <__hi0bits>:
 14483b0:	20bfffec 	andhi	r2,r4,65535
 14483b4:	1000141e 	bne	r2,zero,1448408 <__hi0bits+0x58>
 14483b8:	2008943a 	slli	r4,r4,16
 14483bc:	00800404 	movi	r2,16
 14483c0:	20ffc02c 	andhi	r3,r4,65280
 14483c4:	1800021e 	bne	r3,zero,14483d0 <__hi0bits+0x20>
 14483c8:	2008923a 	slli	r4,r4,8
 14483cc:	10800204 	addi	r2,r2,8
 14483d0:	20fc002c 	andhi	r3,r4,61440
 14483d4:	1800021e 	bne	r3,zero,14483e0 <__hi0bits+0x30>
 14483d8:	2008913a 	slli	r4,r4,4
 14483dc:	10800104 	addi	r2,r2,4
 14483e0:	20f0002c 	andhi	r3,r4,49152
 14483e4:	1800031e 	bne	r3,zero,14483f4 <__hi0bits+0x44>
 14483e8:	2109883a 	add	r4,r4,r4
 14483ec:	10800084 	addi	r2,r2,2
 14483f0:	2109883a 	add	r4,r4,r4
 14483f4:	20000316 	blt	r4,zero,1448404 <__hi0bits+0x54>
 14483f8:	2110002c 	andhi	r4,r4,16384
 14483fc:	2000041e 	bne	r4,zero,1448410 <__hi0bits+0x60>
 1448400:	00800804 	movi	r2,32
 1448404:	f800283a 	ret
 1448408:	0005883a 	mov	r2,zero
 144840c:	003fec06 	br	14483c0 <__alt_data_end+0xfffe2bc0>
 1448410:	10800044 	addi	r2,r2,1
 1448414:	f800283a 	ret

01448418 <__lo0bits>:
 1448418:	20c00017 	ldw	r3,0(r4)
 144841c:	188001cc 	andi	r2,r3,7
 1448420:	10000826 	beq	r2,zero,1448444 <__lo0bits+0x2c>
 1448424:	1880004c 	andi	r2,r3,1
 1448428:	1000211e 	bne	r2,zero,14484b0 <__lo0bits+0x98>
 144842c:	1880008c 	andi	r2,r3,2
 1448430:	1000211e 	bne	r2,zero,14484b8 <__lo0bits+0xa0>
 1448434:	1806d0ba 	srli	r3,r3,2
 1448438:	00800084 	movi	r2,2
 144843c:	20c00015 	stw	r3,0(r4)
 1448440:	f800283a 	ret
 1448444:	18bfffcc 	andi	r2,r3,65535
 1448448:	10001326 	beq	r2,zero,1448498 <__lo0bits+0x80>
 144844c:	0005883a 	mov	r2,zero
 1448450:	19403fcc 	andi	r5,r3,255
 1448454:	2800021e 	bne	r5,zero,1448460 <__lo0bits+0x48>
 1448458:	1806d23a 	srli	r3,r3,8
 144845c:	10800204 	addi	r2,r2,8
 1448460:	194003cc 	andi	r5,r3,15
 1448464:	2800021e 	bne	r5,zero,1448470 <__lo0bits+0x58>
 1448468:	1806d13a 	srli	r3,r3,4
 144846c:	10800104 	addi	r2,r2,4
 1448470:	194000cc 	andi	r5,r3,3
 1448474:	2800021e 	bne	r5,zero,1448480 <__lo0bits+0x68>
 1448478:	1806d0ba 	srli	r3,r3,2
 144847c:	10800084 	addi	r2,r2,2
 1448480:	1940004c 	andi	r5,r3,1
 1448484:	2800081e 	bne	r5,zero,14484a8 <__lo0bits+0x90>
 1448488:	1806d07a 	srli	r3,r3,1
 144848c:	1800051e 	bne	r3,zero,14484a4 <__lo0bits+0x8c>
 1448490:	00800804 	movi	r2,32
 1448494:	f800283a 	ret
 1448498:	1806d43a 	srli	r3,r3,16
 144849c:	00800404 	movi	r2,16
 14484a0:	003feb06 	br	1448450 <__alt_data_end+0xfffe2c50>
 14484a4:	10800044 	addi	r2,r2,1
 14484a8:	20c00015 	stw	r3,0(r4)
 14484ac:	f800283a 	ret
 14484b0:	0005883a 	mov	r2,zero
 14484b4:	f800283a 	ret
 14484b8:	1806d07a 	srli	r3,r3,1
 14484bc:	00800044 	movi	r2,1
 14484c0:	20c00015 	stw	r3,0(r4)
 14484c4:	f800283a 	ret

014484c8 <__i2b>:
 14484c8:	defffd04 	addi	sp,sp,-12
 14484cc:	dc000015 	stw	r16,0(sp)
 14484d0:	04000044 	movi	r16,1
 14484d4:	dc400115 	stw	r17,4(sp)
 14484d8:	2823883a 	mov	r17,r5
 14484dc:	800b883a 	mov	r5,r16
 14484e0:	dfc00215 	stw	ra,8(sp)
 14484e4:	14480a00 	call	14480a0 <_Balloc>
 14484e8:	14400515 	stw	r17,20(r2)
 14484ec:	14000415 	stw	r16,16(r2)
 14484f0:	dfc00217 	ldw	ra,8(sp)
 14484f4:	dc400117 	ldw	r17,4(sp)
 14484f8:	dc000017 	ldw	r16,0(sp)
 14484fc:	dec00304 	addi	sp,sp,12
 1448500:	f800283a 	ret

01448504 <__multiply>:
 1448504:	deffef04 	addi	sp,sp,-68
 1448508:	dc400815 	stw	r17,32(sp)
 144850c:	dc000715 	stw	r16,28(sp)
 1448510:	2c400417 	ldw	r17,16(r5)
 1448514:	34000417 	ldw	r16,16(r6)
 1448518:	dd800d15 	stw	r22,52(sp)
 144851c:	dc800915 	stw	r18,36(sp)
 1448520:	dfc01015 	stw	ra,64(sp)
 1448524:	df000f15 	stw	fp,60(sp)
 1448528:	ddc00e15 	stw	r23,56(sp)
 144852c:	dd400c15 	stw	r21,48(sp)
 1448530:	dd000b15 	stw	r20,44(sp)
 1448534:	dcc00a15 	stw	r19,40(sp)
 1448538:	2825883a 	mov	r18,r5
 144853c:	302d883a 	mov	r22,r6
 1448540:	8c009116 	blt	r17,r16,1448788 <__multiply+0x284>
 1448544:	8005883a 	mov	r2,r16
 1448548:	8821883a 	mov	r16,r17
 144854c:	1023883a 	mov	r17,r2
 1448550:	90800217 	ldw	r2,8(r18)
 1448554:	8447883a 	add	r3,r16,r17
 1448558:	d8c00215 	stw	r3,8(sp)
 144855c:	91400117 	ldw	r5,4(r18)
 1448560:	10c0010e 	bge	r2,r3,1448568 <__multiply+0x64>
 1448564:	29400044 	addi	r5,r5,1
 1448568:	14480a00 	call	14480a0 <_Balloc>
 144856c:	d8c00217 	ldw	r3,8(sp)
 1448570:	d8800615 	stw	r2,24(sp)
 1448574:	18eb883a 	add	r21,r3,r3
 1448578:	ad6b883a 	add	r21,r21,r21
 144857c:	10c00504 	addi	r3,r2,20
 1448580:	1d6b883a 	add	r21,r3,r21
 1448584:	d8c00115 	stw	r3,4(sp)
 1448588:	dd400315 	stw	r21,12(sp)
 144858c:	1805883a 	mov	r2,r3
 1448590:	1d40042e 	bgeu	r3,r21,14485a4 <__multiply+0xa0>
 1448594:	d8c00317 	ldw	r3,12(sp)
 1448598:	10000015 	stw	zero,0(r2)
 144859c:	10800104 	addi	r2,r2,4
 14485a0:	10fffc36 	bltu	r2,r3,1448594 <__alt_data_end+0xfffe2d94>
 14485a4:	8c63883a 	add	r17,r17,r17
 14485a8:	b5800504 	addi	r22,r22,20
 14485ac:	8c63883a 	add	r17,r17,r17
 14485b0:	94800504 	addi	r18,r18,20
 14485b4:	8421883a 	add	r16,r16,r16
 14485b8:	b463883a 	add	r17,r22,r17
 14485bc:	8421883a 	add	r16,r16,r16
 14485c0:	dd800015 	stw	r22,0(sp)
 14485c4:	dc800415 	stw	r18,16(sp)
 14485c8:	dc400515 	stw	r17,20(sp)
 14485cc:	9429883a 	add	r20,r18,r16
 14485d0:	b4404f2e 	bgeu	r22,r17,1448710 <__multiply+0x20c>
 14485d4:	d8c00017 	ldw	r3,0(sp)
 14485d8:	1c800017 	ldw	r18,0(r3)
 14485dc:	943fffcc 	andi	r16,r18,65535
 14485e0:	80001e26 	beq	r16,zero,144865c <__multiply+0x158>
 14485e4:	dd800117 	ldw	r22,4(sp)
 14485e8:	dd400417 	ldw	r21,16(sp)
 14485ec:	0025883a 	mov	r18,zero
 14485f0:	adc00017 	ldw	r23,0(r21)
 14485f4:	b4c00017 	ldw	r19,0(r22)
 14485f8:	800b883a 	mov	r5,r16
 14485fc:	b93fffcc 	andi	r4,r23,65535
 1448600:	14423f80 	call	14423f8 <__mulsi3>
 1448604:	9c7fffcc 	andi	r17,r19,65535
 1448608:	8885883a 	add	r2,r17,r2
 144860c:	b808d43a 	srli	r4,r23,16
 1448610:	14a3883a 	add	r17,r2,r18
 1448614:	9826d43a 	srli	r19,r19,16
 1448618:	8824d43a 	srli	r18,r17,16
 144861c:	800b883a 	mov	r5,r16
 1448620:	14423f80 	call	14423f8 <__mulsi3>
 1448624:	9885883a 	add	r2,r19,r2
 1448628:	14a7883a 	add	r19,r2,r18
 144862c:	88ffffcc 	andi	r3,r17,65535
 1448630:	9822943a 	slli	r17,r19,16
 1448634:	ad400104 	addi	r21,r21,4
 1448638:	b005883a 	mov	r2,r22
 144863c:	88c6b03a 	or	r3,r17,r3
 1448640:	b0c00015 	stw	r3,0(r22)
 1448644:	9824d43a 	srli	r18,r19,16
 1448648:	b5800104 	addi	r22,r22,4
 144864c:	ad3fe836 	bltu	r21,r20,14485f0 <__alt_data_end+0xfffe2df0>
 1448650:	d8c00017 	ldw	r3,0(sp)
 1448654:	14800115 	stw	r18,4(r2)
 1448658:	1c800017 	ldw	r18,0(r3)
 144865c:	9024d43a 	srli	r18,r18,16
 1448660:	90002226 	beq	r18,zero,14486ec <__multiply+0x1e8>
 1448664:	d8c00117 	ldw	r3,4(sp)
 1448668:	dd800417 	ldw	r22,16(sp)
 144866c:	002f883a 	mov	r23,zero
 1448670:	1f000017 	ldw	fp,0(r3)
 1448674:	1823883a 	mov	r17,r3
 1448678:	182b883a 	mov	r21,r3
 144867c:	e021883a 	mov	r16,fp
 1448680:	00000106 	br	1448688 <__multiply+0x184>
 1448684:	982b883a 	mov	r21,r19
 1448688:	b100000b 	ldhu	r4,0(r22)
 144868c:	8020d43a 	srli	r16,r16,16
 1448690:	900b883a 	mov	r5,r18
 1448694:	14423f80 	call	14423f8 <__mulsi3>
 1448698:	1405883a 	add	r2,r2,r16
 144869c:	15ef883a 	add	r23,r2,r23
 14486a0:	b804943a 	slli	r2,r23,16
 14486a4:	e0ffffcc 	andi	r3,fp,65535
 14486a8:	8c400104 	addi	r17,r17,4
 14486ac:	10c6b03a 	or	r3,r2,r3
 14486b0:	88ffff15 	stw	r3,-4(r17)
 14486b4:	b5800104 	addi	r22,r22,4
 14486b8:	b13fff17 	ldw	r4,-4(r22)
 14486bc:	acc00104 	addi	r19,r21,4
 14486c0:	900b883a 	mov	r5,r18
 14486c4:	2008d43a 	srli	r4,r4,16
 14486c8:	9c000017 	ldw	r16,0(r19)
 14486cc:	14423f80 	call	14423f8 <__mulsi3>
 14486d0:	b806d43a 	srli	r3,r23,16
 14486d4:	813fffcc 	andi	r4,r16,65535
 14486d8:	1105883a 	add	r2,r2,r4
 14486dc:	10f9883a 	add	fp,r2,r3
 14486e0:	e02ed43a 	srli	r23,fp,16
 14486e4:	b53fe736 	bltu	r22,r20,1448684 <__alt_data_end+0xfffe2e84>
 14486e8:	af000115 	stw	fp,4(r21)
 14486ec:	d8c00017 	ldw	r3,0(sp)
 14486f0:	d9000517 	ldw	r4,20(sp)
 14486f4:	18c00104 	addi	r3,r3,4
 14486f8:	d8c00015 	stw	r3,0(sp)
 14486fc:	d8c00117 	ldw	r3,4(sp)
 1448700:	18c00104 	addi	r3,r3,4
 1448704:	d8c00115 	stw	r3,4(sp)
 1448708:	d8c00017 	ldw	r3,0(sp)
 144870c:	193fb136 	bltu	r3,r4,14485d4 <__alt_data_end+0xfffe2dd4>
 1448710:	d8c00217 	ldw	r3,8(sp)
 1448714:	00c00c0e 	bge	zero,r3,1448748 <__multiply+0x244>
 1448718:	d8c00317 	ldw	r3,12(sp)
 144871c:	18bfff17 	ldw	r2,-4(r3)
 1448720:	1d7fff04 	addi	r21,r3,-4
 1448724:	10000326 	beq	r2,zero,1448734 <__multiply+0x230>
 1448728:	00000706 	br	1448748 <__multiply+0x244>
 144872c:	a8800017 	ldw	r2,0(r21)
 1448730:	1000051e 	bne	r2,zero,1448748 <__multiply+0x244>
 1448734:	d8c00217 	ldw	r3,8(sp)
 1448738:	ad7fff04 	addi	r21,r21,-4
 144873c:	18ffffc4 	addi	r3,r3,-1
 1448740:	d8c00215 	stw	r3,8(sp)
 1448744:	183ff91e 	bne	r3,zero,144872c <__alt_data_end+0xfffe2f2c>
 1448748:	d8c00617 	ldw	r3,24(sp)
 144874c:	d9000217 	ldw	r4,8(sp)
 1448750:	1805883a 	mov	r2,r3
 1448754:	19000415 	stw	r4,16(r3)
 1448758:	dfc01017 	ldw	ra,64(sp)
 144875c:	df000f17 	ldw	fp,60(sp)
 1448760:	ddc00e17 	ldw	r23,56(sp)
 1448764:	dd800d17 	ldw	r22,52(sp)
 1448768:	dd400c17 	ldw	r21,48(sp)
 144876c:	dd000b17 	ldw	r20,44(sp)
 1448770:	dcc00a17 	ldw	r19,40(sp)
 1448774:	dc800917 	ldw	r18,36(sp)
 1448778:	dc400817 	ldw	r17,32(sp)
 144877c:	dc000717 	ldw	r16,28(sp)
 1448780:	dec01104 	addi	sp,sp,68
 1448784:	f800283a 	ret
 1448788:	3025883a 	mov	r18,r6
 144878c:	282d883a 	mov	r22,r5
 1448790:	003f6f06 	br	1448550 <__alt_data_end+0xfffe2d50>

01448794 <__pow5mult>:
 1448794:	defffa04 	addi	sp,sp,-24
 1448798:	dcc00315 	stw	r19,12(sp)
 144879c:	dc800215 	stw	r18,8(sp)
 14487a0:	dc000015 	stw	r16,0(sp)
 14487a4:	dfc00515 	stw	ra,20(sp)
 14487a8:	dd000415 	stw	r20,16(sp)
 14487ac:	dc400115 	stw	r17,4(sp)
 14487b0:	308000cc 	andi	r2,r6,3
 14487b4:	3021883a 	mov	r16,r6
 14487b8:	2027883a 	mov	r19,r4
 14487bc:	2825883a 	mov	r18,r5
 14487c0:	10002e1e 	bne	r2,zero,144887c <__pow5mult+0xe8>
 14487c4:	8021d0ba 	srai	r16,r16,2
 14487c8:	80001a26 	beq	r16,zero,1448834 <__pow5mult+0xa0>
 14487cc:	9c401217 	ldw	r17,72(r19)
 14487d0:	8800061e 	bne	r17,zero,14487ec <__pow5mult+0x58>
 14487d4:	00003406 	br	14488a8 <__pow5mult+0x114>
 14487d8:	8021d07a 	srai	r16,r16,1
 14487dc:	80001526 	beq	r16,zero,1448834 <__pow5mult+0xa0>
 14487e0:	88800017 	ldw	r2,0(r17)
 14487e4:	10001c26 	beq	r2,zero,1448858 <__pow5mult+0xc4>
 14487e8:	1023883a 	mov	r17,r2
 14487ec:	80c0004c 	andi	r3,r16,1
 14487f0:	183ff926 	beq	r3,zero,14487d8 <__alt_data_end+0xfffe2fd8>
 14487f4:	900b883a 	mov	r5,r18
 14487f8:	880d883a 	mov	r6,r17
 14487fc:	9809883a 	mov	r4,r19
 1448800:	14485040 	call	1448504 <__multiply>
 1448804:	90001b26 	beq	r18,zero,1448874 <__pow5mult+0xe0>
 1448808:	91c00117 	ldw	r7,4(r18)
 144880c:	98c01317 	ldw	r3,76(r19)
 1448810:	8021d07a 	srai	r16,r16,1
 1448814:	39cf883a 	add	r7,r7,r7
 1448818:	39cf883a 	add	r7,r7,r7
 144881c:	19c7883a 	add	r3,r3,r7
 1448820:	19000017 	ldw	r4,0(r3)
 1448824:	91000015 	stw	r4,0(r18)
 1448828:	1c800015 	stw	r18,0(r3)
 144882c:	1025883a 	mov	r18,r2
 1448830:	803feb1e 	bne	r16,zero,14487e0 <__alt_data_end+0xfffe2fe0>
 1448834:	9005883a 	mov	r2,r18
 1448838:	dfc00517 	ldw	ra,20(sp)
 144883c:	dd000417 	ldw	r20,16(sp)
 1448840:	dcc00317 	ldw	r19,12(sp)
 1448844:	dc800217 	ldw	r18,8(sp)
 1448848:	dc400117 	ldw	r17,4(sp)
 144884c:	dc000017 	ldw	r16,0(sp)
 1448850:	dec00604 	addi	sp,sp,24
 1448854:	f800283a 	ret
 1448858:	9809883a 	mov	r4,r19
 144885c:	880b883a 	mov	r5,r17
 1448860:	880d883a 	mov	r6,r17
 1448864:	14485040 	call	1448504 <__multiply>
 1448868:	88800015 	stw	r2,0(r17)
 144886c:	10000015 	stw	zero,0(r2)
 1448870:	003fdd06 	br	14487e8 <__alt_data_end+0xfffe2fe8>
 1448874:	1025883a 	mov	r18,r2
 1448878:	003fd706 	br	14487d8 <__alt_data_end+0xfffe2fd8>
 144887c:	10bfffc4 	addi	r2,r2,-1
 1448880:	1085883a 	add	r2,r2,r2
 1448884:	00c05174 	movhi	r3,325
 1448888:	18c1fb04 	addi	r3,r3,2028
 144888c:	1085883a 	add	r2,r2,r2
 1448890:	1885883a 	add	r2,r3,r2
 1448894:	11800017 	ldw	r6,0(r2)
 1448898:	000f883a 	mov	r7,zero
 144889c:	14481700 	call	1448170 <__multadd>
 14488a0:	1025883a 	mov	r18,r2
 14488a4:	003fc706 	br	14487c4 <__alt_data_end+0xfffe2fc4>
 14488a8:	05000044 	movi	r20,1
 14488ac:	9809883a 	mov	r4,r19
 14488b0:	a00b883a 	mov	r5,r20
 14488b4:	14480a00 	call	14480a0 <_Balloc>
 14488b8:	1023883a 	mov	r17,r2
 14488bc:	00809c44 	movi	r2,625
 14488c0:	88800515 	stw	r2,20(r17)
 14488c4:	8d000415 	stw	r20,16(r17)
 14488c8:	9c401215 	stw	r17,72(r19)
 14488cc:	88000015 	stw	zero,0(r17)
 14488d0:	003fc606 	br	14487ec <__alt_data_end+0xfffe2fec>

014488d4 <__lshift>:
 14488d4:	defff904 	addi	sp,sp,-28
 14488d8:	dd000415 	stw	r20,16(sp)
 14488dc:	dcc00315 	stw	r19,12(sp)
 14488e0:	3029d17a 	srai	r20,r6,5
 14488e4:	2cc00417 	ldw	r19,16(r5)
 14488e8:	28800217 	ldw	r2,8(r5)
 14488ec:	dd400515 	stw	r21,20(sp)
 14488f0:	a4e7883a 	add	r19,r20,r19
 14488f4:	dc800215 	stw	r18,8(sp)
 14488f8:	dc400115 	stw	r17,4(sp)
 14488fc:	dc000015 	stw	r16,0(sp)
 1448900:	dfc00615 	stw	ra,24(sp)
 1448904:	9c000044 	addi	r16,r19,1
 1448908:	2823883a 	mov	r17,r5
 144890c:	302b883a 	mov	r21,r6
 1448910:	2025883a 	mov	r18,r4
 1448914:	29400117 	ldw	r5,4(r5)
 1448918:	1400030e 	bge	r2,r16,1448928 <__lshift+0x54>
 144891c:	1085883a 	add	r2,r2,r2
 1448920:	29400044 	addi	r5,r5,1
 1448924:	143ffd16 	blt	r2,r16,144891c <__alt_data_end+0xfffe311c>
 1448928:	9009883a 	mov	r4,r18
 144892c:	14480a00 	call	14480a0 <_Balloc>
 1448930:	11c00504 	addi	r7,r2,20
 1448934:	0500090e 	bge	zero,r20,144895c <__lshift+0x88>
 1448938:	3811883a 	mov	r8,r7
 144893c:	0007883a 	mov	r3,zero
 1448940:	40000015 	stw	zero,0(r8)
 1448944:	18c00044 	addi	r3,r3,1
 1448948:	42000104 	addi	r8,r8,4
 144894c:	1d3ffc1e 	bne	r3,r20,1448940 <__alt_data_end+0xfffe3140>
 1448950:	18c7883a 	add	r3,r3,r3
 1448954:	18c7883a 	add	r3,r3,r3
 1448958:	38cf883a 	add	r7,r7,r3
 144895c:	89000417 	ldw	r4,16(r17)
 1448960:	88c00504 	addi	r3,r17,20
 1448964:	a98007cc 	andi	r6,r21,31
 1448968:	2109883a 	add	r4,r4,r4
 144896c:	2109883a 	add	r4,r4,r4
 1448970:	1909883a 	add	r4,r3,r4
 1448974:	30002326 	beq	r6,zero,1448a04 <__lshift+0x130>
 1448978:	01400804 	movi	r5,32
 144897c:	298bc83a 	sub	r5,r5,r6
 1448980:	0013883a 	mov	r9,zero
 1448984:	1a000017 	ldw	r8,0(r3)
 1448988:	3815883a 	mov	r10,r7
 144898c:	39c00104 	addi	r7,r7,4
 1448990:	4190983a 	sll	r8,r8,r6
 1448994:	18c00104 	addi	r3,r3,4
 1448998:	4a10b03a 	or	r8,r9,r8
 144899c:	3a3fff15 	stw	r8,-4(r7)
 14489a0:	1a3fff17 	ldw	r8,-4(r3)
 14489a4:	4152d83a 	srl	r9,r8,r5
 14489a8:	193ff636 	bltu	r3,r4,1448984 <__alt_data_end+0xfffe3184>
 14489ac:	52400115 	stw	r9,4(r10)
 14489b0:	48000126 	beq	r9,zero,14489b8 <__lshift+0xe4>
 14489b4:	9c000084 	addi	r16,r19,2
 14489b8:	89000117 	ldw	r4,4(r17)
 14489bc:	90c01317 	ldw	r3,76(r18)
 14489c0:	843fffc4 	addi	r16,r16,-1
 14489c4:	2109883a 	add	r4,r4,r4
 14489c8:	2109883a 	add	r4,r4,r4
 14489cc:	1907883a 	add	r3,r3,r4
 14489d0:	19000017 	ldw	r4,0(r3)
 14489d4:	14000415 	stw	r16,16(r2)
 14489d8:	89000015 	stw	r4,0(r17)
 14489dc:	1c400015 	stw	r17,0(r3)
 14489e0:	dfc00617 	ldw	ra,24(sp)
 14489e4:	dd400517 	ldw	r21,20(sp)
 14489e8:	dd000417 	ldw	r20,16(sp)
 14489ec:	dcc00317 	ldw	r19,12(sp)
 14489f0:	dc800217 	ldw	r18,8(sp)
 14489f4:	dc400117 	ldw	r17,4(sp)
 14489f8:	dc000017 	ldw	r16,0(sp)
 14489fc:	dec00704 	addi	sp,sp,28
 1448a00:	f800283a 	ret
 1448a04:	19400017 	ldw	r5,0(r3)
 1448a08:	39c00104 	addi	r7,r7,4
 1448a0c:	18c00104 	addi	r3,r3,4
 1448a10:	397fff15 	stw	r5,-4(r7)
 1448a14:	193ffb36 	bltu	r3,r4,1448a04 <__alt_data_end+0xfffe3204>
 1448a18:	003fe706 	br	14489b8 <__alt_data_end+0xfffe31b8>

01448a1c <__mcmp>:
 1448a1c:	20800417 	ldw	r2,16(r4)
 1448a20:	28c00417 	ldw	r3,16(r5)
 1448a24:	10c5c83a 	sub	r2,r2,r3
 1448a28:	1000111e 	bne	r2,zero,1448a70 <__mcmp+0x54>
 1448a2c:	18c7883a 	add	r3,r3,r3
 1448a30:	18c7883a 	add	r3,r3,r3
 1448a34:	21000504 	addi	r4,r4,20
 1448a38:	29400504 	addi	r5,r5,20
 1448a3c:	20c5883a 	add	r2,r4,r3
 1448a40:	28cb883a 	add	r5,r5,r3
 1448a44:	00000106 	br	1448a4c <__mcmp+0x30>
 1448a48:	20800a2e 	bgeu	r4,r2,1448a74 <__mcmp+0x58>
 1448a4c:	10bfff04 	addi	r2,r2,-4
 1448a50:	297fff04 	addi	r5,r5,-4
 1448a54:	11800017 	ldw	r6,0(r2)
 1448a58:	28c00017 	ldw	r3,0(r5)
 1448a5c:	30fffa26 	beq	r6,r3,1448a48 <__alt_data_end+0xfffe3248>
 1448a60:	30c00236 	bltu	r6,r3,1448a6c <__mcmp+0x50>
 1448a64:	00800044 	movi	r2,1
 1448a68:	f800283a 	ret
 1448a6c:	00bfffc4 	movi	r2,-1
 1448a70:	f800283a 	ret
 1448a74:	0005883a 	mov	r2,zero
 1448a78:	f800283a 	ret

01448a7c <__mdiff>:
 1448a7c:	defffb04 	addi	sp,sp,-20
 1448a80:	dc000015 	stw	r16,0(sp)
 1448a84:	2821883a 	mov	r16,r5
 1448a88:	dcc00315 	stw	r19,12(sp)
 1448a8c:	300b883a 	mov	r5,r6
 1448a90:	2027883a 	mov	r19,r4
 1448a94:	8009883a 	mov	r4,r16
 1448a98:	dc800215 	stw	r18,8(sp)
 1448a9c:	dfc00415 	stw	ra,16(sp)
 1448aa0:	dc400115 	stw	r17,4(sp)
 1448aa4:	3025883a 	mov	r18,r6
 1448aa8:	1448a1c0 	call	1448a1c <__mcmp>
 1448aac:	10005226 	beq	r2,zero,1448bf8 <__mdiff+0x17c>
 1448ab0:	10004c16 	blt	r2,zero,1448be4 <__mdiff+0x168>
 1448ab4:	0023883a 	mov	r17,zero
 1448ab8:	81400117 	ldw	r5,4(r16)
 1448abc:	9809883a 	mov	r4,r19
 1448ac0:	14480a00 	call	14480a0 <_Balloc>
 1448ac4:	83400417 	ldw	r13,16(r16)
 1448ac8:	93800417 	ldw	r14,16(r18)
 1448acc:	81000504 	addi	r4,r16,20
 1448ad0:	6b59883a 	add	r12,r13,r13
 1448ad4:	739d883a 	add	r14,r14,r14
 1448ad8:	6319883a 	add	r12,r12,r12
 1448adc:	91800504 	addi	r6,r18,20
 1448ae0:	739d883a 	add	r14,r14,r14
 1448ae4:	14400315 	stw	r17,12(r2)
 1448ae8:	2319883a 	add	r12,r4,r12
 1448aec:	339d883a 	add	r14,r6,r14
 1448af0:	12400504 	addi	r9,r2,20
 1448af4:	0007883a 	mov	r3,zero
 1448af8:	22000017 	ldw	r8,0(r4)
 1448afc:	32800017 	ldw	r10,0(r6)
 1448b00:	4ac00104 	addi	r11,r9,4
 1448b04:	41ffffcc 	andi	r7,r8,65535
 1448b08:	38c7883a 	add	r3,r7,r3
 1448b0c:	51ffffcc 	andi	r7,r10,65535
 1448b10:	19cfc83a 	sub	r7,r3,r7
 1448b14:	4010d43a 	srli	r8,r8,16
 1448b18:	5014d43a 	srli	r10,r10,16
 1448b1c:	3807d43a 	srai	r3,r7,16
 1448b20:	39ffffcc 	andi	r7,r7,65535
 1448b24:	4291c83a 	sub	r8,r8,r10
 1448b28:	40c7883a 	add	r3,r8,r3
 1448b2c:	1810943a 	slli	r8,r3,16
 1448b30:	31800104 	addi	r6,r6,4
 1448b34:	21000104 	addi	r4,r4,4
 1448b38:	41ceb03a 	or	r7,r8,r7
 1448b3c:	49c00015 	stw	r7,0(r9)
 1448b40:	1807d43a 	srai	r3,r3,16
 1448b44:	580b883a 	mov	r5,r11
 1448b48:	5813883a 	mov	r9,r11
 1448b4c:	33bfea36 	bltu	r6,r14,1448af8 <__alt_data_end+0xfffe32f8>
 1448b50:	2011883a 	mov	r8,r4
 1448b54:	2300152e 	bgeu	r4,r12,1448bac <__mdiff+0x130>
 1448b58:	21400017 	ldw	r5,0(r4)
 1448b5c:	4a400104 	addi	r9,r9,4
 1448b60:	21000104 	addi	r4,r4,4
 1448b64:	29ffffcc 	andi	r7,r5,65535
 1448b68:	38c7883a 	add	r3,r7,r3
 1448b6c:	280ad43a 	srli	r5,r5,16
 1448b70:	180dd43a 	srai	r6,r3,16
 1448b74:	19ffffcc 	andi	r7,r3,65535
 1448b78:	3147883a 	add	r3,r6,r5
 1448b7c:	180a943a 	slli	r5,r3,16
 1448b80:	1807d43a 	srai	r3,r3,16
 1448b84:	29ceb03a 	or	r7,r5,r7
 1448b88:	49ffff15 	stw	r7,-4(r9)
 1448b8c:	233ff236 	bltu	r4,r12,1448b58 <__alt_data_end+0xfffe3358>
 1448b90:	0206303a 	nor	r3,zero,r8
 1448b94:	1b07883a 	add	r3,r3,r12
 1448b98:	1806d0ba 	srli	r3,r3,2
 1448b9c:	18c00044 	addi	r3,r3,1
 1448ba0:	18c7883a 	add	r3,r3,r3
 1448ba4:	18c7883a 	add	r3,r3,r3
 1448ba8:	58cb883a 	add	r5,r11,r3
 1448bac:	28ffff04 	addi	r3,r5,-4
 1448bb0:	3800041e 	bne	r7,zero,1448bc4 <__mdiff+0x148>
 1448bb4:	18ffff04 	addi	r3,r3,-4
 1448bb8:	19000017 	ldw	r4,0(r3)
 1448bbc:	6b7fffc4 	addi	r13,r13,-1
 1448bc0:	203ffc26 	beq	r4,zero,1448bb4 <__alt_data_end+0xfffe33b4>
 1448bc4:	13400415 	stw	r13,16(r2)
 1448bc8:	dfc00417 	ldw	ra,16(sp)
 1448bcc:	dcc00317 	ldw	r19,12(sp)
 1448bd0:	dc800217 	ldw	r18,8(sp)
 1448bd4:	dc400117 	ldw	r17,4(sp)
 1448bd8:	dc000017 	ldw	r16,0(sp)
 1448bdc:	dec00504 	addi	sp,sp,20
 1448be0:	f800283a 	ret
 1448be4:	8005883a 	mov	r2,r16
 1448be8:	04400044 	movi	r17,1
 1448bec:	9021883a 	mov	r16,r18
 1448bf0:	1025883a 	mov	r18,r2
 1448bf4:	003fb006 	br	1448ab8 <__alt_data_end+0xfffe32b8>
 1448bf8:	9809883a 	mov	r4,r19
 1448bfc:	000b883a 	mov	r5,zero
 1448c00:	14480a00 	call	14480a0 <_Balloc>
 1448c04:	00c00044 	movi	r3,1
 1448c08:	10c00415 	stw	r3,16(r2)
 1448c0c:	10000515 	stw	zero,20(r2)
 1448c10:	003fed06 	br	1448bc8 <__alt_data_end+0xfffe33c8>

01448c14 <__ulp>:
 1448c14:	295ffc2c 	andhi	r5,r5,32752
 1448c18:	00bf3034 	movhi	r2,64704
 1448c1c:	2887883a 	add	r3,r5,r2
 1448c20:	00c0020e 	bge	zero,r3,1448c2c <__ulp+0x18>
 1448c24:	0005883a 	mov	r2,zero
 1448c28:	f800283a 	ret
 1448c2c:	00c7c83a 	sub	r3,zero,r3
 1448c30:	180bd53a 	srai	r5,r3,20
 1448c34:	008004c4 	movi	r2,19
 1448c38:	11400a0e 	bge	r2,r5,1448c64 <__ulp+0x50>
 1448c3c:	00800c84 	movi	r2,50
 1448c40:	0007883a 	mov	r3,zero
 1448c44:	11400516 	blt	r2,r5,1448c5c <__ulp+0x48>
 1448c48:	00800cc4 	movi	r2,51
 1448c4c:	114bc83a 	sub	r5,r2,r5
 1448c50:	00800044 	movi	r2,1
 1448c54:	1144983a 	sll	r2,r2,r5
 1448c58:	f800283a 	ret
 1448c5c:	00800044 	movi	r2,1
 1448c60:	f800283a 	ret
 1448c64:	00800234 	movhi	r2,8
 1448c68:	1147d83a 	sra	r3,r2,r5
 1448c6c:	0005883a 	mov	r2,zero
 1448c70:	f800283a 	ret

01448c74 <__b2d>:
 1448c74:	defffa04 	addi	sp,sp,-24
 1448c78:	dc000015 	stw	r16,0(sp)
 1448c7c:	24000417 	ldw	r16,16(r4)
 1448c80:	dc400115 	stw	r17,4(sp)
 1448c84:	24400504 	addi	r17,r4,20
 1448c88:	8421883a 	add	r16,r16,r16
 1448c8c:	8421883a 	add	r16,r16,r16
 1448c90:	8c21883a 	add	r16,r17,r16
 1448c94:	dc800215 	stw	r18,8(sp)
 1448c98:	84bfff17 	ldw	r18,-4(r16)
 1448c9c:	dd000415 	stw	r20,16(sp)
 1448ca0:	dcc00315 	stw	r19,12(sp)
 1448ca4:	9009883a 	mov	r4,r18
 1448ca8:	2829883a 	mov	r20,r5
 1448cac:	dfc00515 	stw	ra,20(sp)
 1448cb0:	14483b00 	call	14483b0 <__hi0bits>
 1448cb4:	00c00804 	movi	r3,32
 1448cb8:	1887c83a 	sub	r3,r3,r2
 1448cbc:	a0c00015 	stw	r3,0(r20)
 1448cc0:	00c00284 	movi	r3,10
 1448cc4:	84ffff04 	addi	r19,r16,-4
 1448cc8:	18801216 	blt	r3,r2,1448d14 <__b2d+0xa0>
 1448ccc:	014002c4 	movi	r5,11
 1448cd0:	2889c83a 	sub	r4,r5,r2
 1448cd4:	9106d83a 	srl	r3,r18,r4
 1448cd8:	18cffc34 	orhi	r3,r3,16368
 1448cdc:	8cc0282e 	bgeu	r17,r19,1448d80 <__b2d+0x10c>
 1448ce0:	817ffe17 	ldw	r5,-8(r16)
 1448ce4:	290ad83a 	srl	r5,r5,r4
 1448ce8:	10800544 	addi	r2,r2,21
 1448cec:	9084983a 	sll	r2,r18,r2
 1448cf0:	2884b03a 	or	r2,r5,r2
 1448cf4:	dfc00517 	ldw	ra,20(sp)
 1448cf8:	dd000417 	ldw	r20,16(sp)
 1448cfc:	dcc00317 	ldw	r19,12(sp)
 1448d00:	dc800217 	ldw	r18,8(sp)
 1448d04:	dc400117 	ldw	r17,4(sp)
 1448d08:	dc000017 	ldw	r16,0(sp)
 1448d0c:	dec00604 	addi	sp,sp,24
 1448d10:	f800283a 	ret
 1448d14:	113ffd44 	addi	r4,r2,-11
 1448d18:	8cc00f2e 	bgeu	r17,r19,1448d58 <__b2d+0xe4>
 1448d1c:	81bffe04 	addi	r6,r16,-8
 1448d20:	817ffe17 	ldw	r5,-8(r16)
 1448d24:	20001326 	beq	r4,zero,1448d74 <__b2d+0x100>
 1448d28:	00c00ac4 	movi	r3,43
 1448d2c:	1885c83a 	sub	r2,r3,r2
 1448d30:	2886d83a 	srl	r3,r5,r2
 1448d34:	9124983a 	sll	r18,r18,r4
 1448d38:	90e4b03a 	or	r18,r18,r3
 1448d3c:	90cffc34 	orhi	r3,r18,16368
 1448d40:	8980112e 	bgeu	r17,r6,1448d88 <__b2d+0x114>
 1448d44:	81bffd17 	ldw	r6,-12(r16)
 1448d48:	308cd83a 	srl	r6,r6,r2
 1448d4c:	2904983a 	sll	r2,r5,r4
 1448d50:	1184b03a 	or	r2,r2,r6
 1448d54:	003fe706 	br	1448cf4 <__alt_data_end+0xfffe34f4>
 1448d58:	20000526 	beq	r4,zero,1448d70 <__b2d+0xfc>
 1448d5c:	9124983a 	sll	r18,r18,r4
 1448d60:	000d883a 	mov	r6,zero
 1448d64:	000b883a 	mov	r5,zero
 1448d68:	90cffc34 	orhi	r3,r18,16368
 1448d6c:	003ff706 	br	1448d4c <__alt_data_end+0xfffe354c>
 1448d70:	000b883a 	mov	r5,zero
 1448d74:	90cffc34 	orhi	r3,r18,16368
 1448d78:	2805883a 	mov	r2,r5
 1448d7c:	003fdd06 	br	1448cf4 <__alt_data_end+0xfffe34f4>
 1448d80:	000b883a 	mov	r5,zero
 1448d84:	003fd806 	br	1448ce8 <__alt_data_end+0xfffe34e8>
 1448d88:	000d883a 	mov	r6,zero
 1448d8c:	003fef06 	br	1448d4c <__alt_data_end+0xfffe354c>

01448d90 <__d2b>:
 1448d90:	defff704 	addi	sp,sp,-36
 1448d94:	dc000215 	stw	r16,8(sp)
 1448d98:	3021883a 	mov	r16,r6
 1448d9c:	dc400315 	stw	r17,12(sp)
 1448da0:	8022907a 	slli	r17,r16,1
 1448da4:	dd400715 	stw	r21,28(sp)
 1448da8:	282b883a 	mov	r21,r5
 1448dac:	01400044 	movi	r5,1
 1448db0:	dd000615 	stw	r20,24(sp)
 1448db4:	dcc00515 	stw	r19,20(sp)
 1448db8:	dc800415 	stw	r18,16(sp)
 1448dbc:	dfc00815 	stw	ra,32(sp)
 1448dc0:	3829883a 	mov	r20,r7
 1448dc4:	dc800917 	ldw	r18,36(sp)
 1448dc8:	8822d57a 	srli	r17,r17,21
 1448dcc:	14480a00 	call	14480a0 <_Balloc>
 1448dd0:	1027883a 	mov	r19,r2
 1448dd4:	00800434 	movhi	r2,16
 1448dd8:	10bfffc4 	addi	r2,r2,-1
 1448ddc:	808c703a 	and	r6,r16,r2
 1448de0:	88000126 	beq	r17,zero,1448de8 <__d2b+0x58>
 1448de4:	31800434 	orhi	r6,r6,16
 1448de8:	d9800015 	stw	r6,0(sp)
 1448dec:	a8001f26 	beq	r21,zero,1448e6c <__d2b+0xdc>
 1448df0:	d9000104 	addi	r4,sp,4
 1448df4:	dd400115 	stw	r21,4(sp)
 1448df8:	14484180 	call	1448418 <__lo0bits>
 1448dfc:	d8c00017 	ldw	r3,0(sp)
 1448e00:	1000291e 	bne	r2,zero,1448ea8 <__d2b+0x118>
 1448e04:	d9000117 	ldw	r4,4(sp)
 1448e08:	99000515 	stw	r4,20(r19)
 1448e0c:	1820c03a 	cmpne	r16,r3,zero
 1448e10:	84000044 	addi	r16,r16,1
 1448e14:	98c00615 	stw	r3,24(r19)
 1448e18:	9c000415 	stw	r16,16(r19)
 1448e1c:	88001b1e 	bne	r17,zero,1448e8c <__d2b+0xfc>
 1448e20:	800690ba 	slli	r3,r16,2
 1448e24:	10bef384 	addi	r2,r2,-1074
 1448e28:	a0800015 	stw	r2,0(r20)
 1448e2c:	98c5883a 	add	r2,r19,r3
 1448e30:	11000417 	ldw	r4,16(r2)
 1448e34:	8020917a 	slli	r16,r16,5
 1448e38:	14483b00 	call	14483b0 <__hi0bits>
 1448e3c:	8085c83a 	sub	r2,r16,r2
 1448e40:	90800015 	stw	r2,0(r18)
 1448e44:	9805883a 	mov	r2,r19
 1448e48:	dfc00817 	ldw	ra,32(sp)
 1448e4c:	dd400717 	ldw	r21,28(sp)
 1448e50:	dd000617 	ldw	r20,24(sp)
 1448e54:	dcc00517 	ldw	r19,20(sp)
 1448e58:	dc800417 	ldw	r18,16(sp)
 1448e5c:	dc400317 	ldw	r17,12(sp)
 1448e60:	dc000217 	ldw	r16,8(sp)
 1448e64:	dec00904 	addi	sp,sp,36
 1448e68:	f800283a 	ret
 1448e6c:	d809883a 	mov	r4,sp
 1448e70:	14484180 	call	1448418 <__lo0bits>
 1448e74:	d8c00017 	ldw	r3,0(sp)
 1448e78:	04000044 	movi	r16,1
 1448e7c:	9c000415 	stw	r16,16(r19)
 1448e80:	98c00515 	stw	r3,20(r19)
 1448e84:	10800804 	addi	r2,r2,32
 1448e88:	883fe526 	beq	r17,zero,1448e20 <__alt_data_end+0xfffe3620>
 1448e8c:	8c7ef344 	addi	r17,r17,-1075
 1448e90:	88a3883a 	add	r17,r17,r2
 1448e94:	00c00d44 	movi	r3,53
 1448e98:	a4400015 	stw	r17,0(r20)
 1448e9c:	1885c83a 	sub	r2,r3,r2
 1448ea0:	90800015 	stw	r2,0(r18)
 1448ea4:	003fe706 	br	1448e44 <__alt_data_end+0xfffe3644>
 1448ea8:	01000804 	movi	r4,32
 1448eac:	2089c83a 	sub	r4,r4,r2
 1448eb0:	1908983a 	sll	r4,r3,r4
 1448eb4:	d9400117 	ldw	r5,4(sp)
 1448eb8:	1886d83a 	srl	r3,r3,r2
 1448ebc:	2148b03a 	or	r4,r4,r5
 1448ec0:	99000515 	stw	r4,20(r19)
 1448ec4:	d8c00015 	stw	r3,0(sp)
 1448ec8:	003fd006 	br	1448e0c <__alt_data_end+0xfffe360c>

01448ecc <__ratio>:
 1448ecc:	defff904 	addi	sp,sp,-28
 1448ed0:	dc400315 	stw	r17,12(sp)
 1448ed4:	2823883a 	mov	r17,r5
 1448ed8:	d9400104 	addi	r5,sp,4
 1448edc:	dfc00615 	stw	ra,24(sp)
 1448ee0:	dcc00515 	stw	r19,20(sp)
 1448ee4:	dc800415 	stw	r18,16(sp)
 1448ee8:	2027883a 	mov	r19,r4
 1448eec:	dc000215 	stw	r16,8(sp)
 1448ef0:	1448c740 	call	1448c74 <__b2d>
 1448ef4:	8809883a 	mov	r4,r17
 1448ef8:	d80b883a 	mov	r5,sp
 1448efc:	1025883a 	mov	r18,r2
 1448f00:	1821883a 	mov	r16,r3
 1448f04:	1448c740 	call	1448c74 <__b2d>
 1448f08:	8a400417 	ldw	r9,16(r17)
 1448f0c:	9a000417 	ldw	r8,16(r19)
 1448f10:	100d883a 	mov	r6,r2
 1448f14:	d8800017 	ldw	r2,0(sp)
 1448f18:	4251c83a 	sub	r8,r8,r9
 1448f1c:	4012917a 	slli	r9,r8,5
 1448f20:	da000117 	ldw	r8,4(sp)
 1448f24:	4091c83a 	sub	r8,r8,r2
 1448f28:	4251883a 	add	r8,r8,r9
 1448f2c:	02000d0e 	bge	zero,r8,1448f64 <__ratio+0x98>
 1448f30:	4010953a 	slli	r8,r8,20
 1448f34:	4421883a 	add	r16,r8,r16
 1448f38:	9009883a 	mov	r4,r18
 1448f3c:	800b883a 	mov	r5,r16
 1448f40:	180f883a 	mov	r7,r3
 1448f44:	14406dc0 	call	14406dc <__divdf3>
 1448f48:	dfc00617 	ldw	ra,24(sp)
 1448f4c:	dcc00517 	ldw	r19,20(sp)
 1448f50:	dc800417 	ldw	r18,16(sp)
 1448f54:	dc400317 	ldw	r17,12(sp)
 1448f58:	dc000217 	ldw	r16,8(sp)
 1448f5c:	dec00704 	addi	sp,sp,28
 1448f60:	f800283a 	ret
 1448f64:	4010953a 	slli	r8,r8,20
 1448f68:	1a07c83a 	sub	r3,r3,r8
 1448f6c:	003ff206 	br	1448f38 <__alt_data_end+0xfffe3738>

01448f70 <_mprec_log10>:
 1448f70:	defffe04 	addi	sp,sp,-8
 1448f74:	dc000015 	stw	r16,0(sp)
 1448f78:	dfc00115 	stw	ra,4(sp)
 1448f7c:	008005c4 	movi	r2,23
 1448f80:	2021883a 	mov	r16,r4
 1448f84:	11000d0e 	bge	r2,r4,1448fbc <_mprec_log10+0x4c>
 1448f88:	0005883a 	mov	r2,zero
 1448f8c:	00cffc34 	movhi	r3,16368
 1448f90:	843fffc4 	addi	r16,r16,-1
 1448f94:	1009883a 	mov	r4,r2
 1448f98:	180b883a 	mov	r5,r3
 1448f9c:	000d883a 	mov	r6,zero
 1448fa0:	01d00934 	movhi	r7,16420
 1448fa4:	144105c0 	call	144105c <__muldf3>
 1448fa8:	803ff91e 	bne	r16,zero,1448f90 <__alt_data_end+0xfffe3790>
 1448fac:	dfc00117 	ldw	ra,4(sp)
 1448fb0:	dc000017 	ldw	r16,0(sp)
 1448fb4:	dec00204 	addi	sp,sp,8
 1448fb8:	f800283a 	ret
 1448fbc:	202090fa 	slli	r16,r4,3
 1448fc0:	00805174 	movhi	r2,325
 1448fc4:	10821204 	addi	r2,r2,2120
 1448fc8:	1421883a 	add	r16,r2,r16
 1448fcc:	80800017 	ldw	r2,0(r16)
 1448fd0:	80c00117 	ldw	r3,4(r16)
 1448fd4:	dfc00117 	ldw	ra,4(sp)
 1448fd8:	dc000017 	ldw	r16,0(sp)
 1448fdc:	dec00204 	addi	sp,sp,8
 1448fe0:	f800283a 	ret

01448fe4 <__copybits>:
 1448fe4:	297fffc4 	addi	r5,r5,-1
 1448fe8:	280fd17a 	srai	r7,r5,5
 1448fec:	30c00417 	ldw	r3,16(r6)
 1448ff0:	30800504 	addi	r2,r6,20
 1448ff4:	39c00044 	addi	r7,r7,1
 1448ff8:	18c7883a 	add	r3,r3,r3
 1448ffc:	39cf883a 	add	r7,r7,r7
 1449000:	18c7883a 	add	r3,r3,r3
 1449004:	39cf883a 	add	r7,r7,r7
 1449008:	10c7883a 	add	r3,r2,r3
 144900c:	21cf883a 	add	r7,r4,r7
 1449010:	10c00d2e 	bgeu	r2,r3,1449048 <__copybits+0x64>
 1449014:	200b883a 	mov	r5,r4
 1449018:	12000017 	ldw	r8,0(r2)
 144901c:	29400104 	addi	r5,r5,4
 1449020:	10800104 	addi	r2,r2,4
 1449024:	2a3fff15 	stw	r8,-4(r5)
 1449028:	10fffb36 	bltu	r2,r3,1449018 <__alt_data_end+0xfffe3818>
 144902c:	1985c83a 	sub	r2,r3,r6
 1449030:	10bffac4 	addi	r2,r2,-21
 1449034:	1004d0ba 	srli	r2,r2,2
 1449038:	10800044 	addi	r2,r2,1
 144903c:	1085883a 	add	r2,r2,r2
 1449040:	1085883a 	add	r2,r2,r2
 1449044:	2089883a 	add	r4,r4,r2
 1449048:	21c0032e 	bgeu	r4,r7,1449058 <__copybits+0x74>
 144904c:	20000015 	stw	zero,0(r4)
 1449050:	21000104 	addi	r4,r4,4
 1449054:	21fffd36 	bltu	r4,r7,144904c <__alt_data_end+0xfffe384c>
 1449058:	f800283a 	ret

0144905c <__any_on>:
 144905c:	20c00417 	ldw	r3,16(r4)
 1449060:	2805d17a 	srai	r2,r5,5
 1449064:	21000504 	addi	r4,r4,20
 1449068:	18800d0e 	bge	r3,r2,14490a0 <__any_on+0x44>
 144906c:	18c7883a 	add	r3,r3,r3
 1449070:	18c7883a 	add	r3,r3,r3
 1449074:	20c7883a 	add	r3,r4,r3
 1449078:	20c0192e 	bgeu	r4,r3,14490e0 <__any_on+0x84>
 144907c:	18bfff17 	ldw	r2,-4(r3)
 1449080:	18ffff04 	addi	r3,r3,-4
 1449084:	1000041e 	bne	r2,zero,1449098 <__any_on+0x3c>
 1449088:	20c0142e 	bgeu	r4,r3,14490dc <__any_on+0x80>
 144908c:	18ffff04 	addi	r3,r3,-4
 1449090:	19400017 	ldw	r5,0(r3)
 1449094:	283ffc26 	beq	r5,zero,1449088 <__alt_data_end+0xfffe3888>
 1449098:	00800044 	movi	r2,1
 144909c:	f800283a 	ret
 14490a0:	10c00a0e 	bge	r2,r3,14490cc <__any_on+0x70>
 14490a4:	1085883a 	add	r2,r2,r2
 14490a8:	1085883a 	add	r2,r2,r2
 14490ac:	294007cc 	andi	r5,r5,31
 14490b0:	2087883a 	add	r3,r4,r2
 14490b4:	283ff026 	beq	r5,zero,1449078 <__alt_data_end+0xfffe3878>
 14490b8:	19800017 	ldw	r6,0(r3)
 14490bc:	3144d83a 	srl	r2,r6,r5
 14490c0:	114a983a 	sll	r5,r2,r5
 14490c4:	29bff41e 	bne	r5,r6,1449098 <__alt_data_end+0xfffe3898>
 14490c8:	003feb06 	br	1449078 <__alt_data_end+0xfffe3878>
 14490cc:	1085883a 	add	r2,r2,r2
 14490d0:	1085883a 	add	r2,r2,r2
 14490d4:	2087883a 	add	r3,r4,r2
 14490d8:	003fe706 	br	1449078 <__alt_data_end+0xfffe3878>
 14490dc:	f800283a 	ret
 14490e0:	0005883a 	mov	r2,zero
 14490e4:	f800283a 	ret

014490e8 <_realloc_r>:
 14490e8:	defff604 	addi	sp,sp,-40
 14490ec:	dcc00315 	stw	r19,12(sp)
 14490f0:	dc400115 	stw	r17,4(sp)
 14490f4:	dfc00915 	stw	ra,36(sp)
 14490f8:	df000815 	stw	fp,32(sp)
 14490fc:	ddc00715 	stw	r23,28(sp)
 1449100:	dd800615 	stw	r22,24(sp)
 1449104:	dd400515 	stw	r21,20(sp)
 1449108:	dd000415 	stw	r20,16(sp)
 144910c:	dc800215 	stw	r18,8(sp)
 1449110:	dc000015 	stw	r16,0(sp)
 1449114:	2827883a 	mov	r19,r5
 1449118:	3023883a 	mov	r17,r6
 144911c:	2800bf26 	beq	r5,zero,144941c <_realloc_r+0x334>
 1449120:	2025883a 	mov	r18,r4
 1449124:	144d6100 	call	144d610 <__malloc_lock>
 1449128:	98ffff17 	ldw	r3,-4(r19)
 144912c:	01bfff04 	movi	r6,-4
 1449130:	890002c4 	addi	r4,r17,11
 1449134:	01c00584 	movi	r7,22
 1449138:	9d7ffe04 	addi	r21,r19,-8
 144913c:	19a0703a 	and	r16,r3,r6
 1449140:	39003f2e 	bgeu	r7,r4,1449240 <_realloc_r+0x158>
 1449144:	053ffe04 	movi	r20,-8
 1449148:	2528703a 	and	r20,r4,r20
 144914c:	a00f883a 	mov	r7,r20
 1449150:	a0008216 	blt	r20,zero,144935c <_realloc_r+0x274>
 1449154:	a4408136 	bltu	r20,r17,144935c <_realloc_r+0x274>
 1449158:	81c03c0e 	bge	r16,r7,144924c <_realloc_r+0x164>
 144915c:	07005174 	movhi	fp,325
 1449160:	e7038b04 	addi	fp,fp,3628
 1449164:	e1000217 	ldw	r4,8(fp)
 1449168:	ac05883a 	add	r2,r21,r16
 144916c:	2080bf26 	beq	r4,r2,144946c <_realloc_r+0x384>
 1449170:	11000117 	ldw	r4,4(r2)
 1449174:	023fff84 	movi	r8,-2
 1449178:	2210703a 	and	r8,r4,r8
 144917c:	1211883a 	add	r8,r2,r8
 1449180:	41400117 	ldw	r5,4(r8)
 1449184:	2940004c 	andi	r5,r5,1
 1449188:	28004a1e 	bne	r5,zero,14492b4 <_realloc_r+0x1cc>
 144918c:	017fff04 	movi	r5,-4
 1449190:	2148703a 	and	r4,r4,r5
 1449194:	2409883a 	add	r4,r4,r16
 1449198:	21c0ad0e 	bge	r4,r7,1449450 <_realloc_r+0x368>
 144919c:	18c0004c 	andi	r3,r3,1
 14491a0:	18007f1e 	bne	r3,zero,14493a0 <_realloc_r+0x2b8>
 14491a4:	9dfffe17 	ldw	r23,-8(r19)
 14491a8:	adefc83a 	sub	r23,r21,r23
 14491ac:	bd800117 	ldw	r22,4(r23)
 14491b0:	b14a703a 	and	r5,r22,r5
 14491b4:	216d883a 	add	r22,r4,r5
 14491b8:	b1c04516 	blt	r22,r7,14492d0 <_realloc_r+0x1e8>
 14491bc:	10c00317 	ldw	r3,12(r2)
 14491c0:	10800217 	ldw	r2,8(r2)
 14491c4:	81bfff04 	addi	r6,r16,-4
 14491c8:	bc400204 	addi	r17,r23,8
 14491cc:	10c00315 	stw	r3,12(r2)
 14491d0:	18800215 	stw	r2,8(r3)
 14491d4:	b9400217 	ldw	r5,8(r23)
 14491d8:	b8c00317 	ldw	r3,12(r23)
 14491dc:	00800904 	movi	r2,36
 14491e0:	28c00315 	stw	r3,12(r5)
 14491e4:	19400215 	stw	r5,8(r3)
 14491e8:	1180ef36 	bltu	r2,r6,14495a8 <_realloc_r+0x4c0>
 14491ec:	008004c4 	movi	r2,19
 14491f0:	1180da2e 	bgeu	r2,r6,144955c <_realloc_r+0x474>
 14491f4:	98800017 	ldw	r2,0(r19)
 14491f8:	b8800215 	stw	r2,8(r23)
 14491fc:	98800117 	ldw	r2,4(r19)
 1449200:	b8800315 	stw	r2,12(r23)
 1449204:	008006c4 	movi	r2,27
 1449208:	1180fc2e 	bgeu	r2,r6,14495fc <_realloc_r+0x514>
 144920c:	98800217 	ldw	r2,8(r19)
 1449210:	b8800415 	stw	r2,16(r23)
 1449214:	98800317 	ldw	r2,12(r19)
 1449218:	b8800515 	stw	r2,20(r23)
 144921c:	00800904 	movi	r2,36
 1449220:	3080421e 	bne	r6,r2,144932c <_realloc_r+0x244>
 1449224:	98800417 	ldw	r2,16(r19)
 1449228:	9cc00604 	addi	r19,r19,24
 144922c:	b8c00804 	addi	r3,r23,32
 1449230:	b8800615 	stw	r2,24(r23)
 1449234:	98bfff17 	ldw	r2,-4(r19)
 1449238:	b8800715 	stw	r2,28(r23)
 144923c:	00003d06 	br	1449334 <_realloc_r+0x24c>
 1449240:	01c00404 	movi	r7,16
 1449244:	3829883a 	mov	r20,r7
 1449248:	003fc206 	br	1449154 <__alt_data_end+0xfffe3954>
 144924c:	9823883a 	mov	r17,r19
 1449250:	850fc83a 	sub	r7,r16,r20
 1449254:	008003c4 	movi	r2,15
 1449258:	18c0004c 	andi	r3,r3,1
 144925c:	11c04336 	bltu	r2,r7,144936c <_realloc_r+0x284>
 1449260:	1c06b03a 	or	r3,r3,r16
 1449264:	a8c00115 	stw	r3,4(r21)
 1449268:	ac21883a 	add	r16,r21,r16
 144926c:	80c00117 	ldw	r3,4(r16)
 1449270:	18c00054 	ori	r3,r3,1
 1449274:	80c00115 	stw	r3,4(r16)
 1449278:	9009883a 	mov	r4,r18
 144927c:	144d6300 	call	144d630 <__malloc_unlock>
 1449280:	8805883a 	mov	r2,r17
 1449284:	dfc00917 	ldw	ra,36(sp)
 1449288:	df000817 	ldw	fp,32(sp)
 144928c:	ddc00717 	ldw	r23,28(sp)
 1449290:	dd800617 	ldw	r22,24(sp)
 1449294:	dd400517 	ldw	r21,20(sp)
 1449298:	dd000417 	ldw	r20,16(sp)
 144929c:	dcc00317 	ldw	r19,12(sp)
 14492a0:	dc800217 	ldw	r18,8(sp)
 14492a4:	dc400117 	ldw	r17,4(sp)
 14492a8:	dc000017 	ldw	r16,0(sp)
 14492ac:	dec00a04 	addi	sp,sp,40
 14492b0:	f800283a 	ret
 14492b4:	18c0004c 	andi	r3,r3,1
 14492b8:	1800391e 	bne	r3,zero,14493a0 <_realloc_r+0x2b8>
 14492bc:	9dfffe17 	ldw	r23,-8(r19)
 14492c0:	00bfff04 	movi	r2,-4
 14492c4:	adefc83a 	sub	r23,r21,r23
 14492c8:	b9400117 	ldw	r5,4(r23)
 14492cc:	288a703a 	and	r5,r5,r2
 14492d0:	2c2d883a 	add	r22,r5,r16
 14492d4:	b1c03216 	blt	r22,r7,14493a0 <_realloc_r+0x2b8>
 14492d8:	b8800317 	ldw	r2,12(r23)
 14492dc:	b8c00217 	ldw	r3,8(r23)
 14492e0:	81bfff04 	addi	r6,r16,-4
 14492e4:	01000904 	movi	r4,36
 14492e8:	18800315 	stw	r2,12(r3)
 14492ec:	10c00215 	stw	r3,8(r2)
 14492f0:	bc400204 	addi	r17,r23,8
 14492f4:	2180ac36 	bltu	r4,r6,14495a8 <_realloc_r+0x4c0>
 14492f8:	008004c4 	movi	r2,19
 14492fc:	1180972e 	bgeu	r2,r6,144955c <_realloc_r+0x474>
 1449300:	98800017 	ldw	r2,0(r19)
 1449304:	b8800215 	stw	r2,8(r23)
 1449308:	98800117 	ldw	r2,4(r19)
 144930c:	b8800315 	stw	r2,12(r23)
 1449310:	008006c4 	movi	r2,27
 1449314:	1180b92e 	bgeu	r2,r6,14495fc <_realloc_r+0x514>
 1449318:	98800217 	ldw	r2,8(r19)
 144931c:	b8800415 	stw	r2,16(r23)
 1449320:	98800317 	ldw	r2,12(r19)
 1449324:	b8800515 	stw	r2,20(r23)
 1449328:	313fbe26 	beq	r6,r4,1449224 <__alt_data_end+0xfffe3a24>
 144932c:	b8c00604 	addi	r3,r23,24
 1449330:	9cc00404 	addi	r19,r19,16
 1449334:	98800017 	ldw	r2,0(r19)
 1449338:	b021883a 	mov	r16,r22
 144933c:	b82b883a 	mov	r21,r23
 1449340:	18800015 	stw	r2,0(r3)
 1449344:	98800117 	ldw	r2,4(r19)
 1449348:	18800115 	stw	r2,4(r3)
 144934c:	98800217 	ldw	r2,8(r19)
 1449350:	18800215 	stw	r2,8(r3)
 1449354:	b8c00117 	ldw	r3,4(r23)
 1449358:	003fbd06 	br	1449250 <__alt_data_end+0xfffe3a50>
 144935c:	00800304 	movi	r2,12
 1449360:	90800015 	stw	r2,0(r18)
 1449364:	0005883a 	mov	r2,zero
 1449368:	003fc606 	br	1449284 <__alt_data_end+0xfffe3a84>
 144936c:	1d06b03a 	or	r3,r3,r20
 1449370:	ad0b883a 	add	r5,r21,r20
 1449374:	a8c00115 	stw	r3,4(r21)
 1449378:	38800054 	ori	r2,r7,1
 144937c:	28800115 	stw	r2,4(r5)
 1449380:	29cf883a 	add	r7,r5,r7
 1449384:	38800117 	ldw	r2,4(r7)
 1449388:	9009883a 	mov	r4,r18
 144938c:	29400204 	addi	r5,r5,8
 1449390:	10800054 	ori	r2,r2,1
 1449394:	38800115 	stw	r2,4(r7)
 1449398:	14468bc0 	call	14468bc <_free_r>
 144939c:	003fb606 	br	1449278 <__alt_data_end+0xfffe3a78>
 14493a0:	880b883a 	mov	r5,r17
 14493a4:	9009883a 	mov	r4,r18
 14493a8:	14474580 	call	1447458 <_malloc_r>
 14493ac:	1023883a 	mov	r17,r2
 14493b0:	1000aa26 	beq	r2,zero,144965c <_realloc_r+0x574>
 14493b4:	98ffff17 	ldw	r3,-4(r19)
 14493b8:	113ffe04 	addi	r4,r2,-8
 14493bc:	00bfff84 	movi	r2,-2
 14493c0:	1884703a 	and	r2,r3,r2
 14493c4:	a885883a 	add	r2,r21,r2
 14493c8:	20808626 	beq	r4,r2,14495e4 <_realloc_r+0x4fc>
 14493cc:	81bfff04 	addi	r6,r16,-4
 14493d0:	00800904 	movi	r2,36
 14493d4:	11807036 	bltu	r2,r6,1449598 <_realloc_r+0x4b0>
 14493d8:	00c004c4 	movi	r3,19
 14493dc:	19805636 	bltu	r3,r6,1449538 <_realloc_r+0x450>
 14493e0:	8805883a 	mov	r2,r17
 14493e4:	9807883a 	mov	r3,r19
 14493e8:	19000017 	ldw	r4,0(r3)
 14493ec:	11000015 	stw	r4,0(r2)
 14493f0:	19000117 	ldw	r4,4(r3)
 14493f4:	11000115 	stw	r4,4(r2)
 14493f8:	18c00217 	ldw	r3,8(r3)
 14493fc:	10c00215 	stw	r3,8(r2)
 1449400:	980b883a 	mov	r5,r19
 1449404:	9009883a 	mov	r4,r18
 1449408:	14468bc0 	call	14468bc <_free_r>
 144940c:	9009883a 	mov	r4,r18
 1449410:	144d6300 	call	144d630 <__malloc_unlock>
 1449414:	8805883a 	mov	r2,r17
 1449418:	003f9a06 	br	1449284 <__alt_data_end+0xfffe3a84>
 144941c:	300b883a 	mov	r5,r6
 1449420:	dfc00917 	ldw	ra,36(sp)
 1449424:	df000817 	ldw	fp,32(sp)
 1449428:	ddc00717 	ldw	r23,28(sp)
 144942c:	dd800617 	ldw	r22,24(sp)
 1449430:	dd400517 	ldw	r21,20(sp)
 1449434:	dd000417 	ldw	r20,16(sp)
 1449438:	dcc00317 	ldw	r19,12(sp)
 144943c:	dc800217 	ldw	r18,8(sp)
 1449440:	dc400117 	ldw	r17,4(sp)
 1449444:	dc000017 	ldw	r16,0(sp)
 1449448:	dec00a04 	addi	sp,sp,40
 144944c:	14474581 	jmpi	1447458 <_malloc_r>
 1449450:	11400317 	ldw	r5,12(r2)
 1449454:	10800217 	ldw	r2,8(r2)
 1449458:	9823883a 	mov	r17,r19
 144945c:	2021883a 	mov	r16,r4
 1449460:	11400315 	stw	r5,12(r2)
 1449464:	28800215 	stw	r2,8(r5)
 1449468:	003f7906 	br	1449250 <__alt_data_end+0xfffe3a50>
 144946c:	21000117 	ldw	r4,4(r4)
 1449470:	00bfff04 	movi	r2,-4
 1449474:	a1800404 	addi	r6,r20,16
 1449478:	2088703a 	and	r4,r4,r2
 144947c:	2409883a 	add	r4,r4,r16
 1449480:	2180380e 	bge	r4,r6,1449564 <_realloc_r+0x47c>
 1449484:	18c0004c 	andi	r3,r3,1
 1449488:	183fc51e 	bne	r3,zero,14493a0 <__alt_data_end+0xfffe3ba0>
 144948c:	9dfffe17 	ldw	r23,-8(r19)
 1449490:	adefc83a 	sub	r23,r21,r23
 1449494:	b9400117 	ldw	r5,4(r23)
 1449498:	288a703a 	and	r5,r5,r2
 144949c:	216d883a 	add	r22,r4,r5
 14494a0:	b1bf8b16 	blt	r22,r6,14492d0 <__alt_data_end+0xfffe3ad0>
 14494a4:	b8800317 	ldw	r2,12(r23)
 14494a8:	b8c00217 	ldw	r3,8(r23)
 14494ac:	81bfff04 	addi	r6,r16,-4
 14494b0:	01000904 	movi	r4,36
 14494b4:	18800315 	stw	r2,12(r3)
 14494b8:	10c00215 	stw	r3,8(r2)
 14494bc:	bc400204 	addi	r17,r23,8
 14494c0:	21805a36 	bltu	r4,r6,144962c <_realloc_r+0x544>
 14494c4:	008004c4 	movi	r2,19
 14494c8:	1180562e 	bgeu	r2,r6,1449624 <_realloc_r+0x53c>
 14494cc:	98800017 	ldw	r2,0(r19)
 14494d0:	b8800215 	stw	r2,8(r23)
 14494d4:	98800117 	ldw	r2,4(r19)
 14494d8:	b8800315 	stw	r2,12(r23)
 14494dc:	008006c4 	movi	r2,27
 14494e0:	11805636 	bltu	r2,r6,144963c <_realloc_r+0x554>
 14494e4:	b8800404 	addi	r2,r23,16
 14494e8:	9cc00204 	addi	r19,r19,8
 14494ec:	98c00017 	ldw	r3,0(r19)
 14494f0:	10c00015 	stw	r3,0(r2)
 14494f4:	98c00117 	ldw	r3,4(r19)
 14494f8:	10c00115 	stw	r3,4(r2)
 14494fc:	98c00217 	ldw	r3,8(r19)
 1449500:	10c00215 	stw	r3,8(r2)
 1449504:	bd07883a 	add	r3,r23,r20
 1449508:	b505c83a 	sub	r2,r22,r20
 144950c:	e0c00215 	stw	r3,8(fp)
 1449510:	10800054 	ori	r2,r2,1
 1449514:	18800115 	stw	r2,4(r3)
 1449518:	b8800117 	ldw	r2,4(r23)
 144951c:	9009883a 	mov	r4,r18
 1449520:	1080004c 	andi	r2,r2,1
 1449524:	a0a8b03a 	or	r20,r20,r2
 1449528:	bd000115 	stw	r20,4(r23)
 144952c:	144d6300 	call	144d630 <__malloc_unlock>
 1449530:	8805883a 	mov	r2,r17
 1449534:	003f5306 	br	1449284 <__alt_data_end+0xfffe3a84>
 1449538:	98c00017 	ldw	r3,0(r19)
 144953c:	88c00015 	stw	r3,0(r17)
 1449540:	98c00117 	ldw	r3,4(r19)
 1449544:	88c00115 	stw	r3,4(r17)
 1449548:	00c006c4 	movi	r3,27
 144954c:	19801d36 	bltu	r3,r6,14495c4 <_realloc_r+0x4dc>
 1449550:	88800204 	addi	r2,r17,8
 1449554:	98c00204 	addi	r3,r19,8
 1449558:	003fa306 	br	14493e8 <__alt_data_end+0xfffe3be8>
 144955c:	8807883a 	mov	r3,r17
 1449560:	003f7406 	br	1449334 <__alt_data_end+0xfffe3b34>
 1449564:	ad2b883a 	add	r21,r21,r20
 1449568:	2505c83a 	sub	r2,r4,r20
 144956c:	e5400215 	stw	r21,8(fp)
 1449570:	10800054 	ori	r2,r2,1
 1449574:	a8800115 	stw	r2,4(r21)
 1449578:	98bfff17 	ldw	r2,-4(r19)
 144957c:	9009883a 	mov	r4,r18
 1449580:	1080004c 	andi	r2,r2,1
 1449584:	a0a8b03a 	or	r20,r20,r2
 1449588:	9d3fff15 	stw	r20,-4(r19)
 144958c:	144d6300 	call	144d630 <__malloc_unlock>
 1449590:	9805883a 	mov	r2,r19
 1449594:	003f3b06 	br	1449284 <__alt_data_end+0xfffe3a84>
 1449598:	8809883a 	mov	r4,r17
 144959c:	980b883a 	mov	r5,r19
 14495a0:	1447e200 	call	1447e20 <memmove>
 14495a4:	003f9606 	br	1449400 <__alt_data_end+0xfffe3c00>
 14495a8:	8809883a 	mov	r4,r17
 14495ac:	980b883a 	mov	r5,r19
 14495b0:	1447e200 	call	1447e20 <memmove>
 14495b4:	b8c00117 	ldw	r3,4(r23)
 14495b8:	b021883a 	mov	r16,r22
 14495bc:	b82b883a 	mov	r21,r23
 14495c0:	003f2306 	br	1449250 <__alt_data_end+0xfffe3a50>
 14495c4:	98c00217 	ldw	r3,8(r19)
 14495c8:	88c00215 	stw	r3,8(r17)
 14495cc:	98c00317 	ldw	r3,12(r19)
 14495d0:	88c00315 	stw	r3,12(r17)
 14495d4:	30800c26 	beq	r6,r2,1449608 <_realloc_r+0x520>
 14495d8:	88800404 	addi	r2,r17,16
 14495dc:	98c00404 	addi	r3,r19,16
 14495e0:	003f8106 	br	14493e8 <__alt_data_end+0xfffe3be8>
 14495e4:	893fff17 	ldw	r4,-4(r17)
 14495e8:	00bfff04 	movi	r2,-4
 14495ec:	9823883a 	mov	r17,r19
 14495f0:	2084703a 	and	r2,r4,r2
 14495f4:	80a1883a 	add	r16,r16,r2
 14495f8:	003f1506 	br	1449250 <__alt_data_end+0xfffe3a50>
 14495fc:	b8c00404 	addi	r3,r23,16
 1449600:	9cc00204 	addi	r19,r19,8
 1449604:	003f4b06 	br	1449334 <__alt_data_end+0xfffe3b34>
 1449608:	99000417 	ldw	r4,16(r19)
 144960c:	88800604 	addi	r2,r17,24
 1449610:	98c00604 	addi	r3,r19,24
 1449614:	89000415 	stw	r4,16(r17)
 1449618:	99000517 	ldw	r4,20(r19)
 144961c:	89000515 	stw	r4,20(r17)
 1449620:	003f7106 	br	14493e8 <__alt_data_end+0xfffe3be8>
 1449624:	8805883a 	mov	r2,r17
 1449628:	003fb006 	br	14494ec <__alt_data_end+0xfffe3cec>
 144962c:	8809883a 	mov	r4,r17
 1449630:	980b883a 	mov	r5,r19
 1449634:	1447e200 	call	1447e20 <memmove>
 1449638:	003fb206 	br	1449504 <__alt_data_end+0xfffe3d04>
 144963c:	98800217 	ldw	r2,8(r19)
 1449640:	b8800415 	stw	r2,16(r23)
 1449644:	98800317 	ldw	r2,12(r19)
 1449648:	b8800515 	stw	r2,20(r23)
 144964c:	31000726 	beq	r6,r4,144966c <_realloc_r+0x584>
 1449650:	b8800604 	addi	r2,r23,24
 1449654:	9cc00404 	addi	r19,r19,16
 1449658:	003fa406 	br	14494ec <__alt_data_end+0xfffe3cec>
 144965c:	9009883a 	mov	r4,r18
 1449660:	144d6300 	call	144d630 <__malloc_unlock>
 1449664:	0005883a 	mov	r2,zero
 1449668:	003f0606 	br	1449284 <__alt_data_end+0xfffe3a84>
 144966c:	98c00417 	ldw	r3,16(r19)
 1449670:	9cc00604 	addi	r19,r19,24
 1449674:	b8800804 	addi	r2,r23,32
 1449678:	b8c00615 	stw	r3,24(r23)
 144967c:	98ffff17 	ldw	r3,-4(r19)
 1449680:	b8c00715 	stw	r3,28(r23)
 1449684:	003f9906 	br	14494ec <__alt_data_end+0xfffe3cec>

01449688 <__fpclassifyd>:
 1449688:	00a00034 	movhi	r2,32768
 144968c:	10bfffc4 	addi	r2,r2,-1
 1449690:	2884703a 	and	r2,r5,r2
 1449694:	10000726 	beq	r2,zero,14496b4 <__fpclassifyd+0x2c>
 1449698:	00fffc34 	movhi	r3,65520
 144969c:	019ff834 	movhi	r6,32736
 14496a0:	28c7883a 	add	r3,r5,r3
 14496a4:	31bfffc4 	addi	r6,r6,-1
 14496a8:	30c00536 	bltu	r6,r3,14496c0 <__fpclassifyd+0x38>
 14496ac:	00800104 	movi	r2,4
 14496b0:	f800283a 	ret
 14496b4:	2000021e 	bne	r4,zero,14496c0 <__fpclassifyd+0x38>
 14496b8:	00800084 	movi	r2,2
 14496bc:	f800283a 	ret
 14496c0:	00dffc34 	movhi	r3,32752
 14496c4:	019ff834 	movhi	r6,32736
 14496c8:	28cb883a 	add	r5,r5,r3
 14496cc:	31bfffc4 	addi	r6,r6,-1
 14496d0:	317ff62e 	bgeu	r6,r5,14496ac <__alt_data_end+0xfffe3eac>
 14496d4:	01400434 	movhi	r5,16
 14496d8:	297fffc4 	addi	r5,r5,-1
 14496dc:	28800236 	bltu	r5,r2,14496e8 <__fpclassifyd+0x60>
 14496e0:	008000c4 	movi	r2,3
 14496e4:	f800283a 	ret
 14496e8:	10c00226 	beq	r2,r3,14496f4 <__fpclassifyd+0x6c>
 14496ec:	0005883a 	mov	r2,zero
 14496f0:	f800283a 	ret
 14496f4:	2005003a 	cmpeq	r2,r4,zero
 14496f8:	f800283a 	ret

014496fc <_sbrk_r>:
 14496fc:	defffd04 	addi	sp,sp,-12
 1449700:	dc000015 	stw	r16,0(sp)
 1449704:	04005174 	movhi	r16,325
 1449708:	dc400115 	stw	r17,4(sp)
 144970c:	84087004 	addi	r16,r16,8640
 1449710:	2023883a 	mov	r17,r4
 1449714:	2809883a 	mov	r4,r5
 1449718:	dfc00215 	stw	ra,8(sp)
 144971c:	80000015 	stw	zero,0(r16)
 1449720:	144d8240 	call	144d824 <sbrk>
 1449724:	00ffffc4 	movi	r3,-1
 1449728:	10c00526 	beq	r2,r3,1449740 <_sbrk_r+0x44>
 144972c:	dfc00217 	ldw	ra,8(sp)
 1449730:	dc400117 	ldw	r17,4(sp)
 1449734:	dc000017 	ldw	r16,0(sp)
 1449738:	dec00304 	addi	sp,sp,12
 144973c:	f800283a 	ret
 1449740:	80c00017 	ldw	r3,0(r16)
 1449744:	183ff926 	beq	r3,zero,144972c <__alt_data_end+0xfffe3f2c>
 1449748:	88c00015 	stw	r3,0(r17)
 144974c:	003ff706 	br	144972c <__alt_data_end+0xfffe3f2c>

01449750 <__sread>:
 1449750:	defffe04 	addi	sp,sp,-8
 1449754:	dc000015 	stw	r16,0(sp)
 1449758:	2821883a 	mov	r16,r5
 144975c:	2940038f 	ldh	r5,14(r5)
 1449760:	dfc00115 	stw	ra,4(sp)
 1449764:	144b40c0 	call	144b40c <_read_r>
 1449768:	10000716 	blt	r2,zero,1449788 <__sread+0x38>
 144976c:	80c01417 	ldw	r3,80(r16)
 1449770:	1887883a 	add	r3,r3,r2
 1449774:	80c01415 	stw	r3,80(r16)
 1449778:	dfc00117 	ldw	ra,4(sp)
 144977c:	dc000017 	ldw	r16,0(sp)
 1449780:	dec00204 	addi	sp,sp,8
 1449784:	f800283a 	ret
 1449788:	80c0030b 	ldhu	r3,12(r16)
 144978c:	18fbffcc 	andi	r3,r3,61439
 1449790:	80c0030d 	sth	r3,12(r16)
 1449794:	dfc00117 	ldw	ra,4(sp)
 1449798:	dc000017 	ldw	r16,0(sp)
 144979c:	dec00204 	addi	sp,sp,8
 14497a0:	f800283a 	ret

014497a4 <__seofread>:
 14497a4:	0005883a 	mov	r2,zero
 14497a8:	f800283a 	ret

014497ac <__swrite>:
 14497ac:	2880030b 	ldhu	r2,12(r5)
 14497b0:	defffb04 	addi	sp,sp,-20
 14497b4:	dcc00315 	stw	r19,12(sp)
 14497b8:	dc800215 	stw	r18,8(sp)
 14497bc:	dc400115 	stw	r17,4(sp)
 14497c0:	dc000015 	stw	r16,0(sp)
 14497c4:	dfc00415 	stw	ra,16(sp)
 14497c8:	10c0400c 	andi	r3,r2,256
 14497cc:	2821883a 	mov	r16,r5
 14497d0:	2027883a 	mov	r19,r4
 14497d4:	3025883a 	mov	r18,r6
 14497d8:	3823883a 	mov	r17,r7
 14497dc:	18000526 	beq	r3,zero,14497f4 <__swrite+0x48>
 14497e0:	2940038f 	ldh	r5,14(r5)
 14497e4:	000d883a 	mov	r6,zero
 14497e8:	01c00084 	movi	r7,2
 14497ec:	144b3b00 	call	144b3b0 <_lseek_r>
 14497f0:	8080030b 	ldhu	r2,12(r16)
 14497f4:	8140038f 	ldh	r5,14(r16)
 14497f8:	10bbffcc 	andi	r2,r2,61439
 14497fc:	9809883a 	mov	r4,r19
 1449800:	900d883a 	mov	r6,r18
 1449804:	880f883a 	mov	r7,r17
 1449808:	8080030d 	sth	r2,12(r16)
 144980c:	dfc00417 	ldw	ra,16(sp)
 1449810:	dcc00317 	ldw	r19,12(sp)
 1449814:	dc800217 	ldw	r18,8(sp)
 1449818:	dc400117 	ldw	r17,4(sp)
 144981c:	dc000017 	ldw	r16,0(sp)
 1449820:	dec00504 	addi	sp,sp,20
 1449824:	144ae8c1 	jmpi	144ae8c <_write_r>

01449828 <__sseek>:
 1449828:	defffe04 	addi	sp,sp,-8
 144982c:	dc000015 	stw	r16,0(sp)
 1449830:	2821883a 	mov	r16,r5
 1449834:	2940038f 	ldh	r5,14(r5)
 1449838:	dfc00115 	stw	ra,4(sp)
 144983c:	144b3b00 	call	144b3b0 <_lseek_r>
 1449840:	00ffffc4 	movi	r3,-1
 1449844:	10c00826 	beq	r2,r3,1449868 <__sseek+0x40>
 1449848:	80c0030b 	ldhu	r3,12(r16)
 144984c:	80801415 	stw	r2,80(r16)
 1449850:	18c40014 	ori	r3,r3,4096
 1449854:	80c0030d 	sth	r3,12(r16)
 1449858:	dfc00117 	ldw	ra,4(sp)
 144985c:	dc000017 	ldw	r16,0(sp)
 1449860:	dec00204 	addi	sp,sp,8
 1449864:	f800283a 	ret
 1449868:	80c0030b 	ldhu	r3,12(r16)
 144986c:	18fbffcc 	andi	r3,r3,61439
 1449870:	80c0030d 	sth	r3,12(r16)
 1449874:	dfc00117 	ldw	ra,4(sp)
 1449878:	dc000017 	ldw	r16,0(sp)
 144987c:	dec00204 	addi	sp,sp,8
 1449880:	f800283a 	ret

01449884 <__sclose>:
 1449884:	2940038f 	ldh	r5,14(r5)
 1449888:	144aee81 	jmpi	144aee8 <_close_r>

0144988c <strcmp>:
 144988c:	2144b03a 	or	r2,r4,r5
 1449890:	108000cc 	andi	r2,r2,3
 1449894:	1000171e 	bne	r2,zero,14498f4 <strcmp+0x68>
 1449898:	20800017 	ldw	r2,0(r4)
 144989c:	28c00017 	ldw	r3,0(r5)
 14498a0:	10c0141e 	bne	r2,r3,14498f4 <strcmp+0x68>
 14498a4:	027fbff4 	movhi	r9,65279
 14498a8:	4a7fbfc4 	addi	r9,r9,-257
 14498ac:	0086303a 	nor	r3,zero,r2
 14498b0:	02202074 	movhi	r8,32897
 14498b4:	1245883a 	add	r2,r2,r9
 14498b8:	42202004 	addi	r8,r8,-32640
 14498bc:	10c4703a 	and	r2,r2,r3
 14498c0:	1204703a 	and	r2,r2,r8
 14498c4:	10000226 	beq	r2,zero,14498d0 <strcmp+0x44>
 14498c8:	00001706 	br	1449928 <strcmp+0x9c>
 14498cc:	1000161e 	bne	r2,zero,1449928 <strcmp+0x9c>
 14498d0:	21000104 	addi	r4,r4,4
 14498d4:	20c00017 	ldw	r3,0(r4)
 14498d8:	29400104 	addi	r5,r5,4
 14498dc:	29800017 	ldw	r6,0(r5)
 14498e0:	1a4f883a 	add	r7,r3,r9
 14498e4:	00c4303a 	nor	r2,zero,r3
 14498e8:	3884703a 	and	r2,r7,r2
 14498ec:	1204703a 	and	r2,r2,r8
 14498f0:	19bff626 	beq	r3,r6,14498cc <__alt_data_end+0xfffe40cc>
 14498f4:	20800007 	ldb	r2,0(r4)
 14498f8:	1000051e 	bne	r2,zero,1449910 <strcmp+0x84>
 14498fc:	00000606 	br	1449918 <strcmp+0x8c>
 1449900:	21000044 	addi	r4,r4,1
 1449904:	20800007 	ldb	r2,0(r4)
 1449908:	29400044 	addi	r5,r5,1
 144990c:	10000226 	beq	r2,zero,1449918 <strcmp+0x8c>
 1449910:	28c00007 	ldb	r3,0(r5)
 1449914:	10fffa26 	beq	r2,r3,1449900 <__alt_data_end+0xfffe4100>
 1449918:	20800003 	ldbu	r2,0(r4)
 144991c:	28c00003 	ldbu	r3,0(r5)
 1449920:	10c5c83a 	sub	r2,r2,r3
 1449924:	f800283a 	ret
 1449928:	0005883a 	mov	r2,zero
 144992c:	f800283a 	ret

01449930 <__sprint_r.part.0>:
 1449930:	28801917 	ldw	r2,100(r5)
 1449934:	defff604 	addi	sp,sp,-40
 1449938:	dd400515 	stw	r21,20(sp)
 144993c:	dcc00315 	stw	r19,12(sp)
 1449940:	dfc00915 	stw	ra,36(sp)
 1449944:	df000815 	stw	fp,32(sp)
 1449948:	ddc00715 	stw	r23,28(sp)
 144994c:	dd800615 	stw	r22,24(sp)
 1449950:	dd000415 	stw	r20,16(sp)
 1449954:	dc800215 	stw	r18,8(sp)
 1449958:	dc400115 	stw	r17,4(sp)
 144995c:	dc000015 	stw	r16,0(sp)
 1449960:	1088000c 	andi	r2,r2,8192
 1449964:	2827883a 	mov	r19,r5
 1449968:	302b883a 	mov	r21,r6
 144996c:	10002d26 	beq	r2,zero,1449a24 <__sprint_r.part.0+0xf4>
 1449970:	30800217 	ldw	r2,8(r6)
 1449974:	35800017 	ldw	r22,0(r6)
 1449978:	10002826 	beq	r2,zero,1449a1c <__sprint_r.part.0+0xec>
 144997c:	2029883a 	mov	r20,r4
 1449980:	b5c00104 	addi	r23,r22,4
 1449984:	04bfffc4 	movi	r18,-1
 1449988:	bc400017 	ldw	r17,0(r23)
 144998c:	b4000017 	ldw	r16,0(r22)
 1449990:	0039883a 	mov	fp,zero
 1449994:	8822d0ba 	srli	r17,r17,2
 1449998:	04400316 	blt	zero,r17,14499a8 <__sprint_r.part.0+0x78>
 144999c:	00001706 	br	14499fc <__sprint_r.part.0+0xcc>
 14499a0:	84000104 	addi	r16,r16,4
 14499a4:	8f001526 	beq	r17,fp,14499fc <__sprint_r.part.0+0xcc>
 14499a8:	81400017 	ldw	r5,0(r16)
 14499ac:	a009883a 	mov	r4,r20
 14499b0:	980d883a 	mov	r6,r19
 14499b4:	144b1280 	call	144b128 <_fputwc_r>
 14499b8:	e7000044 	addi	fp,fp,1
 14499bc:	14bff81e 	bne	r2,r18,14499a0 <__alt_data_end+0xfffe41a0>
 14499c0:	9005883a 	mov	r2,r18
 14499c4:	a8000215 	stw	zero,8(r21)
 14499c8:	a8000115 	stw	zero,4(r21)
 14499cc:	dfc00917 	ldw	ra,36(sp)
 14499d0:	df000817 	ldw	fp,32(sp)
 14499d4:	ddc00717 	ldw	r23,28(sp)
 14499d8:	dd800617 	ldw	r22,24(sp)
 14499dc:	dd400517 	ldw	r21,20(sp)
 14499e0:	dd000417 	ldw	r20,16(sp)
 14499e4:	dcc00317 	ldw	r19,12(sp)
 14499e8:	dc800217 	ldw	r18,8(sp)
 14499ec:	dc400117 	ldw	r17,4(sp)
 14499f0:	dc000017 	ldw	r16,0(sp)
 14499f4:	dec00a04 	addi	sp,sp,40
 14499f8:	f800283a 	ret
 14499fc:	a8c00217 	ldw	r3,8(r21)
 1449a00:	8c63883a 	add	r17,r17,r17
 1449a04:	8c63883a 	add	r17,r17,r17
 1449a08:	1c45c83a 	sub	r2,r3,r17
 1449a0c:	a8800215 	stw	r2,8(r21)
 1449a10:	b5800204 	addi	r22,r22,8
 1449a14:	bdc00204 	addi	r23,r23,8
 1449a18:	103fdb1e 	bne	r2,zero,1449988 <__alt_data_end+0xfffe4188>
 1449a1c:	0005883a 	mov	r2,zero
 1449a20:	003fe806 	br	14499c4 <__alt_data_end+0xfffe41c4>
 1449a24:	1446bac0 	call	1446bac <__sfvwrite_r>
 1449a28:	003fe606 	br	14499c4 <__alt_data_end+0xfffe41c4>

01449a2c <__sprint_r>:
 1449a2c:	30c00217 	ldw	r3,8(r6)
 1449a30:	18000126 	beq	r3,zero,1449a38 <__sprint_r+0xc>
 1449a34:	14499301 	jmpi	1449930 <__sprint_r.part.0>
 1449a38:	30000115 	stw	zero,4(r6)
 1449a3c:	0005883a 	mov	r2,zero
 1449a40:	f800283a 	ret

01449a44 <___vfiprintf_internal_r>:
 1449a44:	defeca04 	addi	sp,sp,-1240
 1449a48:	dcc12f15 	stw	r19,1212(sp)
 1449a4c:	dfc13515 	stw	ra,1236(sp)
 1449a50:	df013415 	stw	fp,1232(sp)
 1449a54:	ddc13315 	stw	r23,1228(sp)
 1449a58:	dd813215 	stw	r22,1224(sp)
 1449a5c:	dd413115 	stw	r21,1220(sp)
 1449a60:	dd013015 	stw	r20,1216(sp)
 1449a64:	dc812e15 	stw	r18,1208(sp)
 1449a68:	dc412d15 	stw	r17,1204(sp)
 1449a6c:	dc012c15 	stw	r16,1200(sp)
 1449a70:	d9012115 	stw	r4,1156(sp)
 1449a74:	d9412015 	stw	r5,1152(sp)
 1449a78:	d9c12315 	stw	r7,1164(sp)
 1449a7c:	3027883a 	mov	r19,r6
 1449a80:	20000226 	beq	r4,zero,1449a8c <___vfiprintf_internal_r+0x48>
 1449a84:	20800e17 	ldw	r2,56(r4)
 1449a88:	1000f726 	beq	r2,zero,1449e68 <___vfiprintf_internal_r+0x424>
 1449a8c:	d8812017 	ldw	r2,1152(sp)
 1449a90:	10c0030b 	ldhu	r3,12(r2)
 1449a94:	1908000c 	andi	r4,r3,8192
 1449a98:	1805883a 	mov	r2,r3
 1449a9c:	2000081e 	bne	r4,zero,1449ac0 <___vfiprintf_internal_r+0x7c>
 1449aa0:	d9412017 	ldw	r5,1152(sp)
 1449aa4:	18880014 	ori	r2,r3,8192
 1449aa8:	00f7ffc4 	movi	r3,-8193
 1449aac:	29001917 	ldw	r4,100(r5)
 1449ab0:	2880030d 	sth	r2,12(r5)
 1449ab4:	20c8703a 	and	r4,r4,r3
 1449ab8:	29001915 	stw	r4,100(r5)
 1449abc:	1007883a 	mov	r3,r2
 1449ac0:	1100020c 	andi	r4,r2,8
 1449ac4:	2000a726 	beq	r4,zero,1449d64 <___vfiprintf_internal_r+0x320>
 1449ac8:	d9412017 	ldw	r5,1152(sp)
 1449acc:	29000417 	ldw	r4,16(r5)
 1449ad0:	2000a426 	beq	r4,zero,1449d64 <___vfiprintf_internal_r+0x320>
 1449ad4:	1080068c 	andi	r2,r2,26
 1449ad8:	01000284 	movi	r4,10
 1449adc:	1100ab26 	beq	r2,r4,1449d8c <___vfiprintf_internal_r+0x348>
 1449ae0:	d9010a04 	addi	r4,sp,1064
 1449ae4:	d94109c4 	addi	r5,sp,1063
 1449ae8:	07005174 	movhi	fp,325
 1449aec:	04405174 	movhi	r17,325
 1449af0:	2145c83a 	sub	r2,r4,r5
 1449af4:	e7024804 	addi	fp,fp,2336
 1449af8:	8c424404 	addi	r17,r17,2320
 1449afc:	d9011e15 	stw	r4,1144(sp)
 1449b00:	d9411f15 	stw	r5,1148(sp)
 1449b04:	dec11a15 	stw	sp,1128(sp)
 1449b08:	d8011c15 	stw	zero,1136(sp)
 1449b0c:	d8011b15 	stw	zero,1132(sp)
 1449b10:	d8012715 	stw	zero,1180(sp)
 1449b14:	d8012515 	stw	zero,1172(sp)
 1449b18:	d811883a 	mov	r8,sp
 1449b1c:	d8812815 	stw	r2,1184(sp)
 1449b20:	982f883a 	mov	r23,r19
 1449b24:	b8800007 	ldb	r2,0(r23)
 1449b28:	1003b026 	beq	r2,zero,144a9ec <___vfiprintf_internal_r+0xfa8>
 1449b2c:	01000944 	movi	r4,37
 1449b30:	1103ae26 	beq	r2,r4,144a9ec <___vfiprintf_internal_r+0xfa8>
 1449b34:	b805883a 	mov	r2,r23
 1449b38:	00000106 	br	1449b40 <___vfiprintf_internal_r+0xfc>
 1449b3c:	19000326 	beq	r3,r4,1449b4c <___vfiprintf_internal_r+0x108>
 1449b40:	10800044 	addi	r2,r2,1
 1449b44:	10c00007 	ldb	r3,0(r2)
 1449b48:	183ffc1e 	bne	r3,zero,1449b3c <__alt_data_end+0xfffe433c>
 1449b4c:	15e1c83a 	sub	r16,r2,r23
 1449b50:	1029883a 	mov	r20,r2
 1449b54:	80001026 	beq	r16,zero,1449b98 <___vfiprintf_internal_r+0x154>
 1449b58:	d8c11c17 	ldw	r3,1136(sp)
 1449b5c:	d8811b17 	ldw	r2,1132(sp)
 1449b60:	45c00015 	stw	r23,0(r8)
 1449b64:	80c7883a 	add	r3,r16,r3
 1449b68:	10800044 	addi	r2,r2,1
 1449b6c:	44000115 	stw	r16,4(r8)
 1449b70:	d8c11c15 	stw	r3,1136(sp)
 1449b74:	d8811b15 	stw	r2,1132(sp)
 1449b78:	010001c4 	movi	r4,7
 1449b7c:	2080740e 	bge	r4,r2,1449d50 <___vfiprintf_internal_r+0x30c>
 1449b80:	1803a71e 	bne	r3,zero,144aa20 <___vfiprintf_internal_r+0xfdc>
 1449b84:	d8c12517 	ldw	r3,1172(sp)
 1449b88:	d8011b15 	stw	zero,1132(sp)
 1449b8c:	d811883a 	mov	r8,sp
 1449b90:	1c07883a 	add	r3,r3,r16
 1449b94:	d8c12515 	stw	r3,1172(sp)
 1449b98:	a0800007 	ldb	r2,0(r20)
 1449b9c:	1002bf26 	beq	r2,zero,144a69c <___vfiprintf_internal_r+0xc58>
 1449ba0:	a5c00044 	addi	r23,r20,1
 1449ba4:	a1800047 	ldb	r6,1(r20)
 1449ba8:	d8011d85 	stb	zero,1142(sp)
 1449bac:	d8012205 	stb	zero,1160(sp)
 1449bb0:	043fffc4 	movi	r16,-1
 1449bb4:	d8012415 	stw	zero,1168(sp)
 1449bb8:	0025883a 	mov	r18,zero
 1449bbc:	05001604 	movi	r20,88
 1449bc0:	05400244 	movi	r21,9
 1449bc4:	4027883a 	mov	r19,r8
 1449bc8:	bdc00044 	addi	r23,r23,1
 1449bcc:	30bff804 	addi	r2,r6,-32
 1449bd0:	a0825636 	bltu	r20,r2,144a52c <___vfiprintf_internal_r+0xae8>
 1449bd4:	100490ba 	slli	r2,r2,2
 1449bd8:	01005174 	movhi	r4,325
 1449bdc:	2126fb04 	addi	r4,r4,-25620
 1449be0:	1105883a 	add	r2,r2,r4
 1449be4:	10800017 	ldw	r2,0(r2)
 1449be8:	1000683a 	jmp	r2
 1449bec:	0144a4bc 	xorhi	r5,zero,4754
 1449bf0:	0144a52c 	andhi	r5,zero,4756
 1449bf4:	0144a52c 	andhi	r5,zero,4756
 1449bf8:	0144a520 	cmpeqi	r5,zero,4756
 1449bfc:	0144a52c 	andhi	r5,zero,4756
 1449c00:	0144a52c 	andhi	r5,zero,4756
 1449c04:	0144a52c 	andhi	r5,zero,4756
 1449c08:	0144a52c 	andhi	r5,zero,4756
 1449c0c:	0144a52c 	andhi	r5,zero,4756
 1449c10:	0144a52c 	andhi	r5,zero,4756
 1449c14:	0144a2ac 	andhi	r5,zero,4746
 1449c18:	0144a4d4 	movui	r5,4755
 1449c1c:	0144a52c 	andhi	r5,zero,4756
 1449c20:	01449e80 	call	1449e8 <__alt_mem_ufm_flash_data-0x10bb618>
 1449c24:	0144a2d0 	cmplti	r5,zero,4747
 1449c28:	0144a52c 	andhi	r5,zero,4756
 1449c2c:	01449e8c 	andi	r5,zero,4730
 1449c30:	01449e98 	cmpnei	r5,zero,4730
 1449c34:	01449e98 	cmpnei	r5,zero,4730
 1449c38:	01449e98 	cmpnei	r5,zero,4730
 1449c3c:	01449e98 	cmpnei	r5,zero,4730
 1449c40:	01449e98 	cmpnei	r5,zero,4730
 1449c44:	01449e98 	cmpnei	r5,zero,4730
 1449c48:	01449e98 	cmpnei	r5,zero,4730
 1449c4c:	01449e98 	cmpnei	r5,zero,4730
 1449c50:	01449e98 	cmpnei	r5,zero,4730
 1449c54:	0144a52c 	andhi	r5,zero,4756
 1449c58:	0144a52c 	andhi	r5,zero,4756
 1449c5c:	0144a52c 	andhi	r5,zero,4756
 1449c60:	0144a52c 	andhi	r5,zero,4756
 1449c64:	0144a52c 	andhi	r5,zero,4756
 1449c68:	0144a52c 	andhi	r5,zero,4756
 1449c6c:	0144a52c 	andhi	r5,zero,4756
 1449c70:	0144a52c 	andhi	r5,zero,4756
 1449c74:	0144a52c 	andhi	r5,zero,4756
 1449c78:	0144a52c 	andhi	r5,zero,4756
 1449c7c:	01449ed8 	cmpnei	r5,zero,4731
 1449c80:	0144a52c 	andhi	r5,zero,4756
 1449c84:	0144a52c 	andhi	r5,zero,4756
 1449c88:	0144a52c 	andhi	r5,zero,4756
 1449c8c:	0144a52c 	andhi	r5,zero,4756
 1449c90:	0144a52c 	andhi	r5,zero,4756
 1449c94:	0144a52c 	andhi	r5,zero,4756
 1449c98:	0144a52c 	andhi	r5,zero,4756
 1449c9c:	0144a52c 	andhi	r5,zero,4756
 1449ca0:	0144a52c 	andhi	r5,zero,4756
 1449ca4:	0144a52c 	andhi	r5,zero,4756
 1449ca8:	0144a1c8 	cmpgei	r5,zero,4743
 1449cac:	0144a52c 	andhi	r5,zero,4756
 1449cb0:	0144a52c 	andhi	r5,zero,4756
 1449cb4:	0144a52c 	andhi	r5,zero,4756
 1449cb8:	0144a52c 	andhi	r5,zero,4756
 1449cbc:	0144a52c 	andhi	r5,zero,4756
 1449cc0:	0144a208 	cmpgei	r5,zero,4744
 1449cc4:	0144a52c 	andhi	r5,zero,4756
 1449cc8:	0144a52c 	andhi	r5,zero,4756
 1449ccc:	0144a24c 	andi	r5,zero,4745
 1449cd0:	0144a52c 	andhi	r5,zero,4756
 1449cd4:	0144a52c 	andhi	r5,zero,4756
 1449cd8:	0144a52c 	andhi	r5,zero,4756
 1449cdc:	0144a52c 	andhi	r5,zero,4756
 1449ce0:	0144a52c 	andhi	r5,zero,4756
 1449ce4:	0144a52c 	andhi	r5,zero,4756
 1449ce8:	0144a52c 	andhi	r5,zero,4756
 1449cec:	0144a52c 	andhi	r5,zero,4756
 1449cf0:	0144a52c 	andhi	r5,zero,4756
 1449cf4:	0144a52c 	andhi	r5,zero,4756
 1449cf8:	0144a194 	movui	r5,4742
 1449cfc:	0144a4e4 	muli	r5,zero,4755
 1449d00:	0144a52c 	andhi	r5,zero,4756
 1449d04:	0144a52c 	andhi	r5,zero,4756
 1449d08:	0144a52c 	andhi	r5,zero,4756
 1449d0c:	0144a320 	cmpeqi	r5,zero,4748
 1449d10:	0144a4e4 	muli	r5,zero,4755
 1449d14:	0144a52c 	andhi	r5,zero,4756
 1449d18:	0144a52c 	andhi	r5,zero,4756
 1449d1c:	0144a238 	rdprs	r5,zero,4744
 1449d20:	0144a52c 	andhi	r5,zero,4756
 1449d24:	0144a484 	movi	r5,4754
 1449d28:	0144a40c 	andi	r5,zero,4752
 1449d2c:	0144a440 	call	144a44 <__alt_mem_ufm_flash_data-0x10bb5bc>
 1449d30:	0144a32c 	andhi	r5,zero,4748
 1449d34:	0144a52c 	andhi	r5,zero,4756
 1449d38:	0144a338 	rdprs	r5,zero,4748
 1449d3c:	0144a52c 	andhi	r5,zero,4756
 1449d40:	0144a394 	movui	r5,4750
 1449d44:	0144a52c 	andhi	r5,zero,4756
 1449d48:	0144a52c 	andhi	r5,zero,4756
 1449d4c:	0144a3c8 	cmpgei	r5,zero,4751
 1449d50:	42000204 	addi	r8,r8,8
 1449d54:	d8c12517 	ldw	r3,1172(sp)
 1449d58:	1c07883a 	add	r3,r3,r16
 1449d5c:	d8c12515 	stw	r3,1172(sp)
 1449d60:	003f8d06 	br	1449b98 <__alt_data_end+0xfffe4398>
 1449d64:	d9012117 	ldw	r4,1156(sp)
 1449d68:	d9412017 	ldw	r5,1152(sp)
 1449d6c:	144470c0 	call	144470c <__swsetup_r>
 1449d70:	1000301e 	bne	r2,zero,1449e34 <___vfiprintf_internal_r+0x3f0>
 1449d74:	d8812017 	ldw	r2,1152(sp)
 1449d78:	01000284 	movi	r4,10
 1449d7c:	10c0030b 	ldhu	r3,12(r2)
 1449d80:	1805883a 	mov	r2,r3
 1449d84:	1080068c 	andi	r2,r2,26
 1449d88:	113f551e 	bne	r2,r4,1449ae0 <__alt_data_end+0xfffe42e0>
 1449d8c:	d9012017 	ldw	r4,1152(sp)
 1449d90:	2080038b 	ldhu	r2,14(r4)
 1449d94:	113fffcc 	andi	r4,r2,65535
 1449d98:	2120001c 	xori	r4,r4,32768
 1449d9c:	21200004 	addi	r4,r4,-32768
 1449da0:	203f4f16 	blt	r4,zero,1449ae0 <__alt_data_end+0xfffe42e0>
 1449da4:	d9412017 	ldw	r5,1152(sp)
 1449da8:	d9012117 	ldw	r4,1156(sp)
 1449dac:	d9c12317 	ldw	r7,1164(sp)
 1449db0:	2b001917 	ldw	r12,100(r5)
 1449db4:	2ac00717 	ldw	r11,28(r5)
 1449db8:	2a800917 	ldw	r10,36(r5)
 1449dbc:	02010004 	movi	r8,1024
 1449dc0:	18ffff4c 	andi	r3,r3,65533
 1449dc4:	da0b883a 	add	r5,sp,r8
 1449dc8:	980d883a 	mov	r6,r19
 1449dcc:	d8c1030d 	sth	r3,1036(sp)
 1449dd0:	db011915 	stw	r12,1124(sp)
 1449dd4:	d881038d 	sth	r2,1038(sp)
 1449dd8:	dac10715 	stw	r11,1052(sp)
 1449ddc:	da810915 	stw	r10,1060(sp)
 1449de0:	dec10015 	stw	sp,1024(sp)
 1449de4:	dec10415 	stw	sp,1040(sp)
 1449de8:	da010215 	stw	r8,1032(sp)
 1449dec:	da010515 	stw	r8,1044(sp)
 1449df0:	d8010615 	stw	zero,1048(sp)
 1449df4:	1449a440 	call	1449a44 <___vfiprintf_internal_r>
 1449df8:	1021883a 	mov	r16,r2
 1449dfc:	10000416 	blt	r2,zero,1449e10 <___vfiprintf_internal_r+0x3cc>
 1449e00:	d9012117 	ldw	r4,1156(sp)
 1449e04:	d9410004 	addi	r5,sp,1024
 1449e08:	144618c0 	call	144618c <_fflush_r>
 1449e0c:	10040f1e 	bne	r2,zero,144ae4c <___vfiprintf_internal_r+0x1408>
 1449e10:	d881030b 	ldhu	r2,1036(sp)
 1449e14:	1080100c 	andi	r2,r2,64
 1449e18:	10000426 	beq	r2,zero,1449e2c <___vfiprintf_internal_r+0x3e8>
 1449e1c:	d8c12017 	ldw	r3,1152(sp)
 1449e20:	1880030b 	ldhu	r2,12(r3)
 1449e24:	10801014 	ori	r2,r2,64
 1449e28:	1880030d 	sth	r2,12(r3)
 1449e2c:	8005883a 	mov	r2,r16
 1449e30:	00000106 	br	1449e38 <___vfiprintf_internal_r+0x3f4>
 1449e34:	00bfffc4 	movi	r2,-1
 1449e38:	dfc13517 	ldw	ra,1236(sp)
 1449e3c:	df013417 	ldw	fp,1232(sp)
 1449e40:	ddc13317 	ldw	r23,1228(sp)
 1449e44:	dd813217 	ldw	r22,1224(sp)
 1449e48:	dd413117 	ldw	r21,1220(sp)
 1449e4c:	dd013017 	ldw	r20,1216(sp)
 1449e50:	dcc12f17 	ldw	r19,1212(sp)
 1449e54:	dc812e17 	ldw	r18,1208(sp)
 1449e58:	dc412d17 	ldw	r17,1204(sp)
 1449e5c:	dc012c17 	ldw	r16,1200(sp)
 1449e60:	dec13604 	addi	sp,sp,1240
 1449e64:	f800283a 	ret
 1449e68:	14467480 	call	1446748 <__sinit>
 1449e6c:	003f0706 	br	1449a8c <__alt_data_end+0xfffe428c>
 1449e70:	d8c12417 	ldw	r3,1168(sp)
 1449e74:	d8812315 	stw	r2,1164(sp)
 1449e78:	00c7c83a 	sub	r3,zero,r3
 1449e7c:	d8c12415 	stw	r3,1168(sp)
 1449e80:	94800114 	ori	r18,r18,4
 1449e84:	b9800007 	ldb	r6,0(r23)
 1449e88:	003f4f06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 1449e8c:	94802014 	ori	r18,r18,128
 1449e90:	b9800007 	ldb	r6,0(r23)
 1449e94:	003f4c06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 1449e98:	dc012615 	stw	r16,1176(sp)
 1449e9c:	d8012415 	stw	zero,1168(sp)
 1449ea0:	35bff404 	addi	r22,r6,-48
 1449ea4:	0009883a 	mov	r4,zero
 1449ea8:	b821883a 	mov	r16,r23
 1449eac:	01400284 	movi	r5,10
 1449eb0:	14423f80 	call	14423f8 <__mulsi3>
 1449eb4:	81800007 	ldb	r6,0(r16)
 1449eb8:	1589883a 	add	r4,r2,r22
 1449ebc:	bdc00044 	addi	r23,r23,1
 1449ec0:	35bff404 	addi	r22,r6,-48
 1449ec4:	b821883a 	mov	r16,r23
 1449ec8:	adbff82e 	bgeu	r21,r22,1449eac <__alt_data_end+0xfffe46ac>
 1449ecc:	d9012415 	stw	r4,1168(sp)
 1449ed0:	dc012617 	ldw	r16,1176(sp)
 1449ed4:	003f3d06 	br	1449bcc <__alt_data_end+0xfffe43cc>
 1449ed8:	d8c12203 	ldbu	r3,1160(sp)
 1449edc:	94800414 	ori	r18,r18,16
 1449ee0:	9080080c 	andi	r2,r18,32
 1449ee4:	d8c11d85 	stb	r3,1142(sp)
 1449ee8:	9811883a 	mov	r8,r19
 1449eec:	d8c12317 	ldw	r3,1164(sp)
 1449ef0:	10018226 	beq	r2,zero,144a4fc <___vfiprintf_internal_r+0xab8>
 1449ef4:	d9012317 	ldw	r4,1164(sp)
 1449ef8:	18800117 	ldw	r2,4(r3)
 1449efc:	1cc00017 	ldw	r19,0(r3)
 1449f00:	21000204 	addi	r4,r4,8
 1449f04:	d9012315 	stw	r4,1164(sp)
 1449f08:	102b883a 	mov	r21,r2
 1449f0c:	10030016 	blt	r2,zero,144ab10 <___vfiprintf_internal_r+0x10cc>
 1449f10:	dd811d83 	ldbu	r22,1142(sp)
 1449f14:	8029883a 	mov	r20,r16
 1449f18:	00800044 	movi	r2,1
 1449f1c:	9d46b03a 	or	r3,r19,r21
 1449f20:	80000216 	blt	r16,zero,1449f2c <___vfiprintf_internal_r+0x4e8>
 1449f24:	013fdfc4 	movi	r4,-129
 1449f28:	9124703a 	and	r18,r18,r4
 1449f2c:	1801b41e 	bne	r3,zero,144a600 <___vfiprintf_internal_r+0xbbc>
 1449f30:	80028126 	beq	r16,zero,144a938 <___vfiprintf_internal_r+0xef4>
 1449f34:	10803fcc 	andi	r2,r2,255
 1449f38:	00c00044 	movi	r3,1
 1449f3c:	10c1d126 	beq	r2,r3,144a684 <___vfiprintf_internal_r+0xc40>
 1449f40:	00c00084 	movi	r3,2
 1449f44:	10c28626 	beq	r2,r3,144a960 <___vfiprintf_internal_r+0xf1c>
 1449f48:	d8c10a04 	addi	r3,sp,1064
 1449f4c:	9808d0fa 	srli	r4,r19,3
 1449f50:	a80a977a 	slli	r5,r21,29
 1449f54:	a82ad0fa 	srli	r21,r21,3
 1449f58:	9cc001cc 	andi	r19,r19,7
 1449f5c:	98800c04 	addi	r2,r19,48
 1449f60:	18ffffc4 	addi	r3,r3,-1
 1449f64:	2926b03a 	or	r19,r5,r4
 1449f68:	18800005 	stb	r2,0(r3)
 1449f6c:	9d48b03a 	or	r4,r19,r21
 1449f70:	203ff61e 	bne	r4,zero,1449f4c <__alt_data_end+0xfffe474c>
 1449f74:	9100004c 	andi	r4,r18,1
 1449f78:	d8c12215 	stw	r3,1160(sp)
 1449f7c:	2002b31e 	bne	r4,zero,144aa4c <___vfiprintf_internal_r+0x1008>
 1449f80:	d9411e17 	ldw	r5,1144(sp)
 1449f84:	28e9c83a 	sub	r20,r5,r3
 1449f88:	a02b883a 	mov	r21,r20
 1449f8c:	a400010e 	bge	r20,r16,1449f94 <___vfiprintf_internal_r+0x550>
 1449f90:	802b883a 	mov	r21,r16
 1449f94:	b5803fcc 	andi	r22,r22,255
 1449f98:	b580201c 	xori	r22,r22,128
 1449f9c:	b5bfe004 	addi	r22,r22,-128
 1449fa0:	b0000126 	beq	r22,zero,1449fa8 <___vfiprintf_internal_r+0x564>
 1449fa4:	ad400044 	addi	r21,r21,1
 1449fa8:	9280008c 	andi	r10,r18,2
 1449fac:	50000126 	beq	r10,zero,1449fb4 <___vfiprintf_internal_r+0x570>
 1449fb0:	ad400084 	addi	r21,r21,2
 1449fb4:	9580210c 	andi	r22,r18,132
 1449fb8:	b001751e 	bne	r22,zero,144a590 <___vfiprintf_internal_r+0xb4c>
 1449fbc:	d9012417 	ldw	r4,1168(sp)
 1449fc0:	2567c83a 	sub	r19,r4,r21
 1449fc4:	04c1720e 	bge	zero,r19,144a590 <___vfiprintf_internal_r+0xb4c>
 1449fc8:	01c00404 	movi	r7,16
 1449fcc:	d8c11c17 	ldw	r3,1136(sp)
 1449fd0:	3cc36b0e 	bge	r7,r19,144ad80 <___vfiprintf_internal_r+0x133c>
 1449fd4:	00805174 	movhi	r2,325
 1449fd8:	10824804 	addi	r2,r2,2336
 1449fdc:	dc012915 	stw	r16,1188(sp)
 1449fe0:	d9011b17 	ldw	r4,1132(sp)
 1449fe4:	9821883a 	mov	r16,r19
 1449fe8:	d8812615 	stw	r2,1176(sp)
 1449fec:	030001c4 	movi	r12,7
 1449ff0:	5027883a 	mov	r19,r10
 1449ff4:	00000506 	br	144a00c <___vfiprintf_internal_r+0x5c8>
 1449ff8:	21400084 	addi	r5,r4,2
 1449ffc:	42000204 	addi	r8,r8,8
 144a000:	1009883a 	mov	r4,r2
 144a004:	843ffc04 	addi	r16,r16,-16
 144a008:	3c000d0e 	bge	r7,r16,144a040 <___vfiprintf_internal_r+0x5fc>
 144a00c:	18c00404 	addi	r3,r3,16
 144a010:	20800044 	addi	r2,r4,1
 144a014:	47000015 	stw	fp,0(r8)
 144a018:	41c00115 	stw	r7,4(r8)
 144a01c:	d8c11c15 	stw	r3,1136(sp)
 144a020:	d8811b15 	stw	r2,1132(sp)
 144a024:	60bff40e 	bge	r12,r2,1449ff8 <__alt_data_end+0xfffe47f8>
 144a028:	18014b1e 	bne	r3,zero,144a558 <___vfiprintf_internal_r+0xb14>
 144a02c:	843ffc04 	addi	r16,r16,-16
 144a030:	0009883a 	mov	r4,zero
 144a034:	01400044 	movi	r5,1
 144a038:	d811883a 	mov	r8,sp
 144a03c:	3c3ff316 	blt	r7,r16,144a00c <__alt_data_end+0xfffe480c>
 144a040:	9815883a 	mov	r10,r19
 144a044:	8027883a 	mov	r19,r16
 144a048:	dc012917 	ldw	r16,1188(sp)
 144a04c:	d9012617 	ldw	r4,1176(sp)
 144a050:	98c7883a 	add	r3,r19,r3
 144a054:	44c00115 	stw	r19,4(r8)
 144a058:	41000015 	stw	r4,0(r8)
 144a05c:	d8c11c15 	stw	r3,1136(sp)
 144a060:	d9411b15 	stw	r5,1132(sp)
 144a064:	008001c4 	movi	r2,7
 144a068:	11425116 	blt	r2,r5,144a9b0 <___vfiprintf_internal_r+0xf6c>
 144a06c:	d9011d87 	ldb	r4,1142(sp)
 144a070:	42000204 	addi	r8,r8,8
 144a074:	28800044 	addi	r2,r5,1
 144a078:	20014a1e 	bne	r4,zero,144a5a4 <___vfiprintf_internal_r+0xb60>
 144a07c:	50000c26 	beq	r10,zero,144a0b0 <___vfiprintf_internal_r+0x66c>
 144a080:	d9011d04 	addi	r4,sp,1140
 144a084:	18c00084 	addi	r3,r3,2
 144a088:	41000015 	stw	r4,0(r8)
 144a08c:	01000084 	movi	r4,2
 144a090:	41000115 	stw	r4,4(r8)
 144a094:	d8c11c15 	stw	r3,1136(sp)
 144a098:	d8811b15 	stw	r2,1132(sp)
 144a09c:	010001c4 	movi	r4,7
 144a0a0:	20822016 	blt	r4,r2,144a924 <___vfiprintf_internal_r+0xee0>
 144a0a4:	100b883a 	mov	r5,r2
 144a0a8:	42000204 	addi	r8,r8,8
 144a0ac:	10800044 	addi	r2,r2,1
 144a0b0:	01002004 	movi	r4,128
 144a0b4:	b101de26 	beq	r22,r4,144a830 <___vfiprintf_internal_r+0xdec>
 144a0b8:	8521c83a 	sub	r16,r16,r20
 144a0bc:	0400230e 	bge	zero,r16,144a14c <___vfiprintf_internal_r+0x708>
 144a0c0:	04c00404 	movi	r19,16
 144a0c4:	9c030d0e 	bge	r19,r16,144acfc <___vfiprintf_internal_r+0x12b8>
 144a0c8:	00805174 	movhi	r2,325
 144a0cc:	10824404 	addi	r2,r2,2320
 144a0d0:	d8812615 	stw	r2,1176(sp)
 144a0d4:	058001c4 	movi	r22,7
 144a0d8:	00000506 	br	144a0f0 <___vfiprintf_internal_r+0x6ac>
 144a0dc:	28800084 	addi	r2,r5,2
 144a0e0:	42000204 	addi	r8,r8,8
 144a0e4:	200b883a 	mov	r5,r4
 144a0e8:	843ffc04 	addi	r16,r16,-16
 144a0ec:	9c000d0e 	bge	r19,r16,144a124 <___vfiprintf_internal_r+0x6e0>
 144a0f0:	18c00404 	addi	r3,r3,16
 144a0f4:	29000044 	addi	r4,r5,1
 144a0f8:	44400015 	stw	r17,0(r8)
 144a0fc:	44c00115 	stw	r19,4(r8)
 144a100:	d8c11c15 	stw	r3,1136(sp)
 144a104:	d9011b15 	stw	r4,1132(sp)
 144a108:	b13ff40e 	bge	r22,r4,144a0dc <__alt_data_end+0xfffe48dc>
 144a10c:	1801321e 	bne	r3,zero,144a5d8 <___vfiprintf_internal_r+0xb94>
 144a110:	843ffc04 	addi	r16,r16,-16
 144a114:	000b883a 	mov	r5,zero
 144a118:	00800044 	movi	r2,1
 144a11c:	d811883a 	mov	r8,sp
 144a120:	9c3ff316 	blt	r19,r16,144a0f0 <__alt_data_end+0xfffe48f0>
 144a124:	d9012617 	ldw	r4,1176(sp)
 144a128:	1c07883a 	add	r3,r3,r16
 144a12c:	44000115 	stw	r16,4(r8)
 144a130:	41000015 	stw	r4,0(r8)
 144a134:	d8c11c15 	stw	r3,1136(sp)
 144a138:	d8811b15 	stw	r2,1132(sp)
 144a13c:	010001c4 	movi	r4,7
 144a140:	20816216 	blt	r4,r2,144a6cc <___vfiprintf_internal_r+0xc88>
 144a144:	42000204 	addi	r8,r8,8
 144a148:	10800044 	addi	r2,r2,1
 144a14c:	d9012217 	ldw	r4,1160(sp)
 144a150:	1d07883a 	add	r3,r3,r20
 144a154:	45000115 	stw	r20,4(r8)
 144a158:	41000015 	stw	r4,0(r8)
 144a15c:	d8c11c15 	stw	r3,1136(sp)
 144a160:	d8811b15 	stw	r2,1132(sp)
 144a164:	010001c4 	movi	r4,7
 144a168:	2081610e 	bge	r4,r2,144a6f0 <___vfiprintf_internal_r+0xcac>
 144a16c:	1802211e 	bne	r3,zero,144a9f4 <___vfiprintf_internal_r+0xfb0>
 144a170:	d8011b15 	stw	zero,1132(sp)
 144a174:	9480010c 	andi	r18,r18,4
 144a178:	9002171e 	bne	r18,zero,144a9d8 <___vfiprintf_internal_r+0xf94>
 144a17c:	d9412417 	ldw	r5,1168(sp)
 144a180:	a9433716 	blt	r21,r5,144ae60 <___vfiprintf_internal_r+0x141c>
 144a184:	d8812517 	ldw	r2,1172(sp)
 144a188:	1545883a 	add	r2,r2,r21
 144a18c:	d8812515 	stw	r2,1172(sp)
 144a190:	00019a06 	br	144a7fc <___vfiprintf_internal_r+0xdb8>
 144a194:	d8c12317 	ldw	r3,1164(sp)
 144a198:	05400044 	movi	r21,1
 144a19c:	9811883a 	mov	r8,r19
 144a1a0:	18800017 	ldw	r2,0(r3)
 144a1a4:	18c00104 	addi	r3,r3,4
 144a1a8:	d8c12315 	stw	r3,1164(sp)
 144a1ac:	d8c10004 	addi	r3,sp,1024
 144a1b0:	d8011d85 	stb	zero,1142(sp)
 144a1b4:	d8810005 	stb	r2,1024(sp)
 144a1b8:	a829883a 	mov	r20,r21
 144a1bc:	d8c12215 	stw	r3,1160(sp)
 144a1c0:	0021883a 	mov	r16,zero
 144a1c4:	003f7806 	br	1449fa8 <__alt_data_end+0xfffe47a8>
 144a1c8:	94800414 	ori	r18,r18,16
 144a1cc:	9080080c 	andi	r2,r18,32
 144a1d0:	9811883a 	mov	r8,r19
 144a1d4:	10009026 	beq	r2,zero,144a418 <___vfiprintf_internal_r+0x9d4>
 144a1d8:	d8812317 	ldw	r2,1164(sp)
 144a1dc:	d8c12317 	ldw	r3,1164(sp)
 144a1e0:	14c00017 	ldw	r19,0(r2)
 144a1e4:	15400117 	ldw	r21,4(r2)
 144a1e8:	18c00204 	addi	r3,r3,8
 144a1ec:	d8c12315 	stw	r3,1164(sp)
 144a1f0:	0005883a 	mov	r2,zero
 144a1f4:	9d46b03a 	or	r3,r19,r21
 144a1f8:	d8011d85 	stb	zero,1142(sp)
 144a1fc:	8029883a 	mov	r20,r16
 144a200:	002d883a 	mov	r22,zero
 144a204:	003f4606 	br	1449f20 <__alt_data_end+0xfffe4720>
 144a208:	94800414 	ori	r18,r18,16
 144a20c:	9080080c 	andi	r2,r18,32
 144a210:	9811883a 	mov	r8,r19
 144a214:	10006226 	beq	r2,zero,144a3a0 <___vfiprintf_internal_r+0x95c>
 144a218:	d9012317 	ldw	r4,1164(sp)
 144a21c:	00800044 	movi	r2,1
 144a220:	24c00017 	ldw	r19,0(r4)
 144a224:	25400117 	ldw	r21,4(r4)
 144a228:	21000204 	addi	r4,r4,8
 144a22c:	d9012315 	stw	r4,1164(sp)
 144a230:	9d46b03a 	or	r3,r19,r21
 144a234:	003ff006 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144a238:	b9800007 	ldb	r6,0(r23)
 144a23c:	00801b04 	movi	r2,108
 144a240:	3082b226 	beq	r6,r2,144ad0c <___vfiprintf_internal_r+0x12c8>
 144a244:	94800414 	ori	r18,r18,16
 144a248:	003e5f06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a24c:	d8c12203 	ldbu	r3,1160(sp)
 144a250:	01005174 	movhi	r4,325
 144a254:	2101de04 	addi	r4,r4,1912
 144a258:	d8c11d85 	stb	r3,1142(sp)
 144a25c:	d9012715 	stw	r4,1180(sp)
 144a260:	90c0080c 	andi	r3,r18,32
 144a264:	9811883a 	mov	r8,r19
 144a268:	d8812317 	ldw	r2,1164(sp)
 144a26c:	18005f26 	beq	r3,zero,144a3ec <___vfiprintf_internal_r+0x9a8>
 144a270:	d9012317 	ldw	r4,1164(sp)
 144a274:	14c00017 	ldw	r19,0(r2)
 144a278:	15400117 	ldw	r21,4(r2)
 144a27c:	21000204 	addi	r4,r4,8
 144a280:	d9012315 	stw	r4,1164(sp)
 144a284:	9080004c 	andi	r2,r18,1
 144a288:	1001e226 	beq	r2,zero,144aa14 <___vfiprintf_internal_r+0xfd0>
 144a28c:	9d46b03a 	or	r3,r19,r21
 144a290:	18024e26 	beq	r3,zero,144abcc <___vfiprintf_internal_r+0x1188>
 144a294:	00800c04 	movi	r2,48
 144a298:	d8811d05 	stb	r2,1140(sp)
 144a29c:	d9811d45 	stb	r6,1141(sp)
 144a2a0:	94800094 	ori	r18,r18,2
 144a2a4:	00800084 	movi	r2,2
 144a2a8:	003fd306 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144a2ac:	d9012317 	ldw	r4,1164(sp)
 144a2b0:	d9412317 	ldw	r5,1164(sp)
 144a2b4:	21000017 	ldw	r4,0(r4)
 144a2b8:	28800104 	addi	r2,r5,4
 144a2bc:	d9012415 	stw	r4,1168(sp)
 144a2c0:	203eeb16 	blt	r4,zero,1449e70 <__alt_data_end+0xfffe4670>
 144a2c4:	d8812315 	stw	r2,1164(sp)
 144a2c8:	b9800007 	ldb	r6,0(r23)
 144a2cc:	003e3e06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a2d0:	b9800007 	ldb	r6,0(r23)
 144a2d4:	01000a84 	movi	r4,42
 144a2d8:	b8800044 	addi	r2,r23,1
 144a2dc:	3102d226 	beq	r6,r4,144ae28 <___vfiprintf_internal_r+0x13e4>
 144a2e0:	35bff404 	addi	r22,r6,-48
 144a2e4:	102f883a 	mov	r23,r2
 144a2e8:	0021883a 	mov	r16,zero
 144a2ec:	adbe3736 	bltu	r21,r22,1449bcc <__alt_data_end+0xfffe43cc>
 144a2f0:	0009883a 	mov	r4,zero
 144a2f4:	01400284 	movi	r5,10
 144a2f8:	14423f80 	call	14423f8 <__mulsi3>
 144a2fc:	b9800007 	ldb	r6,0(r23)
 144a300:	b089883a 	add	r4,r22,r2
 144a304:	bdc00044 	addi	r23,r23,1
 144a308:	35bff404 	addi	r22,r6,-48
 144a30c:	adbff92e 	bgeu	r21,r22,144a2f4 <__alt_data_end+0xfffe4af4>
 144a310:	2021883a 	mov	r16,r4
 144a314:	203e2d0e 	bge	r4,zero,1449bcc <__alt_data_end+0xfffe43cc>
 144a318:	043fffc4 	movi	r16,-1
 144a31c:	003e2b06 	br	1449bcc <__alt_data_end+0xfffe43cc>
 144a320:	94801014 	ori	r18,r18,64
 144a324:	b9800007 	ldb	r6,0(r23)
 144a328:	003e2706 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a32c:	94800814 	ori	r18,r18,32
 144a330:	b9800007 	ldb	r6,0(r23)
 144a334:	003e2406 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a338:	d9412317 	ldw	r5,1164(sp)
 144a33c:	d8812317 	ldw	r2,1164(sp)
 144a340:	d8011d85 	stb	zero,1142(sp)
 144a344:	29400017 	ldw	r5,0(r5)
 144a348:	9811883a 	mov	r8,r19
 144a34c:	14c00104 	addi	r19,r2,4
 144a350:	d9412215 	stw	r5,1160(sp)
 144a354:	28029026 	beq	r5,zero,144ad98 <___vfiprintf_internal_r+0x1354>
 144a358:	d9012217 	ldw	r4,1160(sp)
 144a35c:	80027616 	blt	r16,zero,144ad38 <___vfiprintf_internal_r+0x12f4>
 144a360:	000b883a 	mov	r5,zero
 144a364:	800d883a 	mov	r6,r16
 144a368:	da012a15 	stw	r8,1192(sp)
 144a36c:	1447c000 	call	1447c00 <memchr>
 144a370:	da012a17 	ldw	r8,1192(sp)
 144a374:	1002a026 	beq	r2,zero,144adf8 <___vfiprintf_internal_r+0x13b4>
 144a378:	d8c12217 	ldw	r3,1160(sp)
 144a37c:	10e9c83a 	sub	r20,r2,r3
 144a380:	85023816 	blt	r16,r20,144ac64 <___vfiprintf_internal_r+0x1220>
 144a384:	dd811d83 	ldbu	r22,1142(sp)
 144a388:	dcc12315 	stw	r19,1164(sp)
 144a38c:	0021883a 	mov	r16,zero
 144a390:	003efd06 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a394:	9080080c 	andi	r2,r18,32
 144a398:	9811883a 	mov	r8,r19
 144a39c:	103f9e1e 	bne	r2,zero,144a218 <__alt_data_end+0xfffe4a18>
 144a3a0:	9080040c 	andi	r2,r18,16
 144a3a4:	10021726 	beq	r2,zero,144ac04 <___vfiprintf_internal_r+0x11c0>
 144a3a8:	d9412317 	ldw	r5,1164(sp)
 144a3ac:	002b883a 	mov	r21,zero
 144a3b0:	00800044 	movi	r2,1
 144a3b4:	2cc00017 	ldw	r19,0(r5)
 144a3b8:	29400104 	addi	r5,r5,4
 144a3bc:	d9412315 	stw	r5,1164(sp)
 144a3c0:	9807883a 	mov	r3,r19
 144a3c4:	003f8c06 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144a3c8:	d8c12203 	ldbu	r3,1160(sp)
 144a3cc:	01005174 	movhi	r4,325
 144a3d0:	2101e304 	addi	r4,r4,1932
 144a3d4:	d8c11d85 	stb	r3,1142(sp)
 144a3d8:	d9012715 	stw	r4,1180(sp)
 144a3dc:	90c0080c 	andi	r3,r18,32
 144a3e0:	9811883a 	mov	r8,r19
 144a3e4:	d8812317 	ldw	r2,1164(sp)
 144a3e8:	183fa11e 	bne	r3,zero,144a270 <__alt_data_end+0xfffe4a70>
 144a3ec:	90c0040c 	andi	r3,r18,16
 144a3f0:	1801e526 	beq	r3,zero,144ab88 <___vfiprintf_internal_r+0x1144>
 144a3f4:	d9412317 	ldw	r5,1164(sp)
 144a3f8:	14c00017 	ldw	r19,0(r2)
 144a3fc:	002b883a 	mov	r21,zero
 144a400:	29400104 	addi	r5,r5,4
 144a404:	d9412315 	stw	r5,1164(sp)
 144a408:	003f9e06 	br	144a284 <__alt_data_end+0xfffe4a84>
 144a40c:	9080080c 	andi	r2,r18,32
 144a410:	9811883a 	mov	r8,r19
 144a414:	103f701e 	bne	r2,zero,144a1d8 <__alt_data_end+0xfffe49d8>
 144a418:	9080040c 	andi	r2,r18,16
 144a41c:	1001ef26 	beq	r2,zero,144abdc <___vfiprintf_internal_r+0x1198>
 144a420:	d9012317 	ldw	r4,1164(sp)
 144a424:	002b883a 	mov	r21,zero
 144a428:	0005883a 	mov	r2,zero
 144a42c:	24c00017 	ldw	r19,0(r4)
 144a430:	21000104 	addi	r4,r4,4
 144a434:	d9012315 	stw	r4,1164(sp)
 144a438:	9807883a 	mov	r3,r19
 144a43c:	003f6e06 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144a440:	d8c12317 	ldw	r3,1164(sp)
 144a444:	9811883a 	mov	r8,r19
 144a448:	00800c04 	movi	r2,48
 144a44c:	1cc00017 	ldw	r19,0(r3)
 144a450:	01005174 	movhi	r4,325
 144a454:	18c00104 	addi	r3,r3,4
 144a458:	d8811d05 	stb	r2,1140(sp)
 144a45c:	2101e304 	addi	r4,r4,1932
 144a460:	00801e04 	movi	r2,120
 144a464:	d8811d45 	stb	r2,1141(sp)
 144a468:	d8c12315 	stw	r3,1164(sp)
 144a46c:	002b883a 	mov	r21,zero
 144a470:	94800094 	ori	r18,r18,2
 144a474:	d9012715 	stw	r4,1180(sp)
 144a478:	00800084 	movi	r2,2
 144a47c:	9807883a 	mov	r3,r19
 144a480:	003f5d06 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144a484:	d8c12203 	ldbu	r3,1160(sp)
 144a488:	9080080c 	andi	r2,r18,32
 144a48c:	9811883a 	mov	r8,r19
 144a490:	d8c11d85 	stb	r3,1142(sp)
 144a494:	1001b126 	beq	r2,zero,144ab5c <___vfiprintf_internal_r+0x1118>
 144a498:	d9012317 	ldw	r4,1164(sp)
 144a49c:	d9412517 	ldw	r5,1172(sp)
 144a4a0:	20800017 	ldw	r2,0(r4)
 144a4a4:	2807d7fa 	srai	r3,r5,31
 144a4a8:	21000104 	addi	r4,r4,4
 144a4ac:	d9012315 	stw	r4,1164(sp)
 144a4b0:	11400015 	stw	r5,0(r2)
 144a4b4:	10c00115 	stw	r3,4(r2)
 144a4b8:	003d9a06 	br	1449b24 <__alt_data_end+0xfffe4324>
 144a4bc:	d8812207 	ldb	r2,1160(sp)
 144a4c0:	1001c41e 	bne	r2,zero,144abd4 <___vfiprintf_internal_r+0x1190>
 144a4c4:	00c00804 	movi	r3,32
 144a4c8:	d8c12205 	stb	r3,1160(sp)
 144a4cc:	b9800007 	ldb	r6,0(r23)
 144a4d0:	003dbd06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a4d4:	00c00ac4 	movi	r3,43
 144a4d8:	d8c12205 	stb	r3,1160(sp)
 144a4dc:	b9800007 	ldb	r6,0(r23)
 144a4e0:	003db906 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a4e4:	d8c12203 	ldbu	r3,1160(sp)
 144a4e8:	9080080c 	andi	r2,r18,32
 144a4ec:	9811883a 	mov	r8,r19
 144a4f0:	d8c11d85 	stb	r3,1142(sp)
 144a4f4:	d8c12317 	ldw	r3,1164(sp)
 144a4f8:	103e7e1e 	bne	r2,zero,1449ef4 <__alt_data_end+0xfffe46f4>
 144a4fc:	9080040c 	andi	r2,r18,16
 144a500:	1001a926 	beq	r2,zero,144aba8 <___vfiprintf_internal_r+0x1164>
 144a504:	1cc00017 	ldw	r19,0(r3)
 144a508:	d9412317 	ldw	r5,1164(sp)
 144a50c:	982bd7fa 	srai	r21,r19,31
 144a510:	29400104 	addi	r5,r5,4
 144a514:	d9412315 	stw	r5,1164(sp)
 144a518:	a805883a 	mov	r2,r21
 144a51c:	003e7b06 	br	1449f0c <__alt_data_end+0xfffe470c>
 144a520:	94800054 	ori	r18,r18,1
 144a524:	b9800007 	ldb	r6,0(r23)
 144a528:	003da706 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144a52c:	d8c12203 	ldbu	r3,1160(sp)
 144a530:	9811883a 	mov	r8,r19
 144a534:	d8c11d85 	stb	r3,1142(sp)
 144a538:	30005826 	beq	r6,zero,144a69c <___vfiprintf_internal_r+0xc58>
 144a53c:	05400044 	movi	r21,1
 144a540:	d8c10004 	addi	r3,sp,1024
 144a544:	d9810005 	stb	r6,1024(sp)
 144a548:	d8011d85 	stb	zero,1142(sp)
 144a54c:	a829883a 	mov	r20,r21
 144a550:	d8c12215 	stw	r3,1160(sp)
 144a554:	003f1a06 	br	144a1c0 <__alt_data_end+0xfffe49c0>
 144a558:	d9012117 	ldw	r4,1156(sp)
 144a55c:	d9412017 	ldw	r5,1152(sp)
 144a560:	d9811a04 	addi	r6,sp,1128
 144a564:	d9c12a15 	stw	r7,1192(sp)
 144a568:	db012b15 	stw	r12,1196(sp)
 144a56c:	14499300 	call	1449930 <__sprint_r.part.0>
 144a570:	d9c12a17 	ldw	r7,1192(sp)
 144a574:	db012b17 	ldw	r12,1196(sp)
 144a578:	10004e1e 	bne	r2,zero,144a6b4 <___vfiprintf_internal_r+0xc70>
 144a57c:	d9011b17 	ldw	r4,1132(sp)
 144a580:	d8c11c17 	ldw	r3,1136(sp)
 144a584:	d811883a 	mov	r8,sp
 144a588:	21400044 	addi	r5,r4,1
 144a58c:	003e9d06 	br	144a004 <__alt_data_end+0xfffe4804>
 144a590:	d9411b17 	ldw	r5,1132(sp)
 144a594:	d8c11c17 	ldw	r3,1136(sp)
 144a598:	28800044 	addi	r2,r5,1
 144a59c:	d9011d87 	ldb	r4,1142(sp)
 144a5a0:	203eb626 	beq	r4,zero,144a07c <__alt_data_end+0xfffe487c>
 144a5a4:	01000044 	movi	r4,1
 144a5a8:	d9411d84 	addi	r5,sp,1142
 144a5ac:	1907883a 	add	r3,r3,r4
 144a5b0:	41400015 	stw	r5,0(r8)
 144a5b4:	41000115 	stw	r4,4(r8)
 144a5b8:	d8c11c15 	stw	r3,1136(sp)
 144a5bc:	d8811b15 	stw	r2,1132(sp)
 144a5c0:	014001c4 	movi	r5,7
 144a5c4:	2880ce16 	blt	r5,r2,144a900 <___vfiprintf_internal_r+0xebc>
 144a5c8:	100b883a 	mov	r5,r2
 144a5cc:	42000204 	addi	r8,r8,8
 144a5d0:	10800044 	addi	r2,r2,1
 144a5d4:	003ea906 	br	144a07c <__alt_data_end+0xfffe487c>
 144a5d8:	d9012117 	ldw	r4,1156(sp)
 144a5dc:	d9412017 	ldw	r5,1152(sp)
 144a5e0:	d9811a04 	addi	r6,sp,1128
 144a5e4:	14499300 	call	1449930 <__sprint_r.part.0>
 144a5e8:	1000321e 	bne	r2,zero,144a6b4 <___vfiprintf_internal_r+0xc70>
 144a5ec:	d9411b17 	ldw	r5,1132(sp)
 144a5f0:	d8c11c17 	ldw	r3,1136(sp)
 144a5f4:	d811883a 	mov	r8,sp
 144a5f8:	28800044 	addi	r2,r5,1
 144a5fc:	003eba06 	br	144a0e8 <__alt_data_end+0xfffe48e8>
 144a600:	10803fcc 	andi	r2,r2,255
 144a604:	00c00044 	movi	r3,1
 144a608:	10fe4d1e 	bne	r2,r3,1449f40 <__alt_data_end+0xfffe4740>
 144a60c:	a800021e 	bne	r21,zero,144a618 <___vfiprintf_internal_r+0xbd4>
 144a610:	00800244 	movi	r2,9
 144a614:	14c01b2e 	bgeu	r2,r19,144a684 <___vfiprintf_internal_r+0xc40>
 144a618:	dc012215 	stw	r16,1160(sp)
 144a61c:	dd010a04 	addi	r20,sp,1064
 144a620:	a821883a 	mov	r16,r21
 144a624:	402b883a 	mov	r21,r8
 144a628:	9809883a 	mov	r4,r19
 144a62c:	800b883a 	mov	r5,r16
 144a630:	01800284 	movi	r6,10
 144a634:	000f883a 	mov	r7,zero
 144a638:	144be180 	call	144be18 <__umoddi3>
 144a63c:	10800c04 	addi	r2,r2,48
 144a640:	a53fffc4 	addi	r20,r20,-1
 144a644:	9809883a 	mov	r4,r19
 144a648:	800b883a 	mov	r5,r16
 144a64c:	01800284 	movi	r6,10
 144a650:	000f883a 	mov	r7,zero
 144a654:	a0800005 	stb	r2,0(r20)
 144a658:	144b7d80 	call	144b7d8 <__udivdi3>
 144a65c:	1027883a 	mov	r19,r2
 144a660:	10c4b03a 	or	r2,r2,r3
 144a664:	1821883a 	mov	r16,r3
 144a668:	103fef1e 	bne	r2,zero,144a628 <__alt_data_end+0xfffe4e28>
 144a66c:	d9011e17 	ldw	r4,1144(sp)
 144a670:	dc012217 	ldw	r16,1160(sp)
 144a674:	a811883a 	mov	r8,r21
 144a678:	dd012215 	stw	r20,1160(sp)
 144a67c:	2529c83a 	sub	r20,r4,r20
 144a680:	003e4106 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a684:	9cc00c04 	addi	r19,r19,48
 144a688:	d8c109c4 	addi	r3,sp,1063
 144a68c:	dcc109c5 	stb	r19,1063(sp)
 144a690:	dd012817 	ldw	r20,1184(sp)
 144a694:	d8c12215 	stw	r3,1160(sp)
 144a698:	003e3b06 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a69c:	d8811c17 	ldw	r2,1136(sp)
 144a6a0:	10000426 	beq	r2,zero,144a6b4 <___vfiprintf_internal_r+0xc70>
 144a6a4:	d9012117 	ldw	r4,1156(sp)
 144a6a8:	d9412017 	ldw	r5,1152(sp)
 144a6ac:	d9811a04 	addi	r6,sp,1128
 144a6b0:	14499300 	call	1449930 <__sprint_r.part.0>
 144a6b4:	d9412017 	ldw	r5,1152(sp)
 144a6b8:	2880030b 	ldhu	r2,12(r5)
 144a6bc:	1080100c 	andi	r2,r2,64
 144a6c0:	103ddc1e 	bne	r2,zero,1449e34 <__alt_data_end+0xfffe4634>
 144a6c4:	d8812517 	ldw	r2,1172(sp)
 144a6c8:	003ddb06 	br	1449e38 <__alt_data_end+0xfffe4638>
 144a6cc:	1801061e 	bne	r3,zero,144aae8 <___vfiprintf_internal_r+0x10a4>
 144a6d0:	d8c12217 	ldw	r3,1160(sp)
 144a6d4:	00800044 	movi	r2,1
 144a6d8:	dd000115 	stw	r20,4(sp)
 144a6dc:	d8c00015 	stw	r3,0(sp)
 144a6e0:	dd011c15 	stw	r20,1136(sp)
 144a6e4:	d8811b15 	stw	r2,1132(sp)
 144a6e8:	a007883a 	mov	r3,r20
 144a6ec:	d811883a 	mov	r8,sp
 144a6f0:	42000204 	addi	r8,r8,8
 144a6f4:	9480010c 	andi	r18,r18,4
 144a6f8:	90003426 	beq	r18,zero,144a7cc <___vfiprintf_internal_r+0xd88>
 144a6fc:	d9412417 	ldw	r5,1168(sp)
 144a700:	2d65c83a 	sub	r18,r5,r21
 144a704:	0480310e 	bge	zero,r18,144a7cc <___vfiprintf_internal_r+0xd88>
 144a708:	04000404 	movi	r16,16
 144a70c:	8481ad0e 	bge	r16,r18,144adc4 <___vfiprintf_internal_r+0x1380>
 144a710:	01405174 	movhi	r5,325
 144a714:	29424804 	addi	r5,r5,2336
 144a718:	d9011b17 	ldw	r4,1132(sp)
 144a71c:	d9412615 	stw	r5,1176(sp)
 144a720:	04c001c4 	movi	r19,7
 144a724:	dd012117 	ldw	r20,1156(sp)
 144a728:	dd812017 	ldw	r22,1152(sp)
 144a72c:	00000506 	br	144a744 <___vfiprintf_internal_r+0xd00>
 144a730:	21400084 	addi	r5,r4,2
 144a734:	42000204 	addi	r8,r8,8
 144a738:	1009883a 	mov	r4,r2
 144a73c:	94bffc04 	addi	r18,r18,-16
 144a740:	84800d0e 	bge	r16,r18,144a778 <___vfiprintf_internal_r+0xd34>
 144a744:	18c00404 	addi	r3,r3,16
 144a748:	20800044 	addi	r2,r4,1
 144a74c:	47000015 	stw	fp,0(r8)
 144a750:	44000115 	stw	r16,4(r8)
 144a754:	d8c11c15 	stw	r3,1136(sp)
 144a758:	d8811b15 	stw	r2,1132(sp)
 144a75c:	98bff40e 	bge	r19,r2,144a730 <__alt_data_end+0xfffe4f30>
 144a760:	1800291e 	bne	r3,zero,144a808 <___vfiprintf_internal_r+0xdc4>
 144a764:	94bffc04 	addi	r18,r18,-16
 144a768:	0009883a 	mov	r4,zero
 144a76c:	01400044 	movi	r5,1
 144a770:	d811883a 	mov	r8,sp
 144a774:	84bff316 	blt	r16,r18,144a744 <__alt_data_end+0xfffe4f44>
 144a778:	d8812617 	ldw	r2,1176(sp)
 144a77c:	1c87883a 	add	r3,r3,r18
 144a780:	44800115 	stw	r18,4(r8)
 144a784:	40800015 	stw	r2,0(r8)
 144a788:	d8c11c15 	stw	r3,1136(sp)
 144a78c:	d9411b15 	stw	r5,1132(sp)
 144a790:	008001c4 	movi	r2,7
 144a794:	11400d0e 	bge	r2,r5,144a7cc <___vfiprintf_internal_r+0xd88>
 144a798:	1800061e 	bne	r3,zero,144a7b4 <___vfiprintf_internal_r+0xd70>
 144a79c:	d8c12417 	ldw	r3,1168(sp)
 144a7a0:	a8c12e16 	blt	r21,r3,144ac5c <___vfiprintf_internal_r+0x1218>
 144a7a4:	d9012517 	ldw	r4,1172(sp)
 144a7a8:	2549883a 	add	r4,r4,r21
 144a7ac:	d9012515 	stw	r4,1172(sp)
 144a7b0:	00001206 	br	144a7fc <___vfiprintf_internal_r+0xdb8>
 144a7b4:	d9012117 	ldw	r4,1156(sp)
 144a7b8:	d9412017 	ldw	r5,1152(sp)
 144a7bc:	d9811a04 	addi	r6,sp,1128
 144a7c0:	14499300 	call	1449930 <__sprint_r.part.0>
 144a7c4:	103fbb1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144a7c8:	d8c11c17 	ldw	r3,1136(sp)
 144a7cc:	d8812417 	ldw	r2,1168(sp)
 144a7d0:	a880010e 	bge	r21,r2,144a7d8 <___vfiprintf_internal_r+0xd94>
 144a7d4:	102b883a 	mov	r21,r2
 144a7d8:	d9012517 	ldw	r4,1172(sp)
 144a7dc:	2549883a 	add	r4,r4,r21
 144a7e0:	d9012515 	stw	r4,1172(sp)
 144a7e4:	18000526 	beq	r3,zero,144a7fc <___vfiprintf_internal_r+0xdb8>
 144a7e8:	d9012117 	ldw	r4,1156(sp)
 144a7ec:	d9412017 	ldw	r5,1152(sp)
 144a7f0:	d9811a04 	addi	r6,sp,1128
 144a7f4:	14499300 	call	1449930 <__sprint_r.part.0>
 144a7f8:	103fae1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144a7fc:	d8011b15 	stw	zero,1132(sp)
 144a800:	d811883a 	mov	r8,sp
 144a804:	003cc706 	br	1449b24 <__alt_data_end+0xfffe4324>
 144a808:	a009883a 	mov	r4,r20
 144a80c:	b00b883a 	mov	r5,r22
 144a810:	d9811a04 	addi	r6,sp,1128
 144a814:	14499300 	call	1449930 <__sprint_r.part.0>
 144a818:	103fa61e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144a81c:	d9011b17 	ldw	r4,1132(sp)
 144a820:	d8c11c17 	ldw	r3,1136(sp)
 144a824:	d811883a 	mov	r8,sp
 144a828:	21400044 	addi	r5,r4,1
 144a82c:	003fc306 	br	144a73c <__alt_data_end+0xfffe4f3c>
 144a830:	d9012417 	ldw	r4,1168(sp)
 144a834:	256dc83a 	sub	r22,r4,r21
 144a838:	05be1f0e 	bge	zero,r22,144a0b8 <__alt_data_end+0xfffe48b8>
 144a83c:	04c00404 	movi	r19,16
 144a840:	9d81720e 	bge	r19,r22,144ae0c <___vfiprintf_internal_r+0x13c8>
 144a844:	00805174 	movhi	r2,325
 144a848:	10824404 	addi	r2,r2,2320
 144a84c:	d8812615 	stw	r2,1176(sp)
 144a850:	028001c4 	movi	r10,7
 144a854:	00000506 	br	144a86c <___vfiprintf_internal_r+0xe28>
 144a858:	29000084 	addi	r4,r5,2
 144a85c:	42000204 	addi	r8,r8,8
 144a860:	100b883a 	mov	r5,r2
 144a864:	b5bffc04 	addi	r22,r22,-16
 144a868:	9d800d0e 	bge	r19,r22,144a8a0 <___vfiprintf_internal_r+0xe5c>
 144a86c:	18c00404 	addi	r3,r3,16
 144a870:	28800044 	addi	r2,r5,1
 144a874:	44400015 	stw	r17,0(r8)
 144a878:	44c00115 	stw	r19,4(r8)
 144a87c:	d8c11c15 	stw	r3,1136(sp)
 144a880:	d8811b15 	stw	r2,1132(sp)
 144a884:	50bff40e 	bge	r10,r2,144a858 <__alt_data_end+0xfffe5058>
 144a888:	1800111e 	bne	r3,zero,144a8d0 <___vfiprintf_internal_r+0xe8c>
 144a88c:	b5bffc04 	addi	r22,r22,-16
 144a890:	000b883a 	mov	r5,zero
 144a894:	01000044 	movi	r4,1
 144a898:	d811883a 	mov	r8,sp
 144a89c:	9dbff316 	blt	r19,r22,144a86c <__alt_data_end+0xfffe506c>
 144a8a0:	d9412617 	ldw	r5,1176(sp)
 144a8a4:	1d87883a 	add	r3,r3,r22
 144a8a8:	45800115 	stw	r22,4(r8)
 144a8ac:	41400015 	stw	r5,0(r8)
 144a8b0:	d8c11c15 	stw	r3,1136(sp)
 144a8b4:	d9011b15 	stw	r4,1132(sp)
 144a8b8:	008001c4 	movi	r2,7
 144a8bc:	11008516 	blt	r2,r4,144aad4 <___vfiprintf_internal_r+0x1090>
 144a8c0:	42000204 	addi	r8,r8,8
 144a8c4:	20800044 	addi	r2,r4,1
 144a8c8:	200b883a 	mov	r5,r4
 144a8cc:	003dfa06 	br	144a0b8 <__alt_data_end+0xfffe48b8>
 144a8d0:	d9012117 	ldw	r4,1156(sp)
 144a8d4:	d9412017 	ldw	r5,1152(sp)
 144a8d8:	d9811a04 	addi	r6,sp,1128
 144a8dc:	da812a15 	stw	r10,1192(sp)
 144a8e0:	14499300 	call	1449930 <__sprint_r.part.0>
 144a8e4:	da812a17 	ldw	r10,1192(sp)
 144a8e8:	103f721e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144a8ec:	d9411b17 	ldw	r5,1132(sp)
 144a8f0:	d8c11c17 	ldw	r3,1136(sp)
 144a8f4:	d811883a 	mov	r8,sp
 144a8f8:	29000044 	addi	r4,r5,1
 144a8fc:	003fd906 	br	144a864 <__alt_data_end+0xfffe5064>
 144a900:	1800681e 	bne	r3,zero,144aaa4 <___vfiprintf_internal_r+0x1060>
 144a904:	50004d26 	beq	r10,zero,144aa3c <___vfiprintf_internal_r+0xff8>
 144a908:	d8811d04 	addi	r2,sp,1140
 144a90c:	00c00084 	movi	r3,2
 144a910:	d8800015 	stw	r2,0(sp)
 144a914:	d8c00115 	stw	r3,4(sp)
 144a918:	2005883a 	mov	r2,r4
 144a91c:	d811883a 	mov	r8,sp
 144a920:	003de006 	br	144a0a4 <__alt_data_end+0xfffe48a4>
 144a924:	1800551e 	bne	r3,zero,144aa7c <___vfiprintf_internal_r+0x1038>
 144a928:	000b883a 	mov	r5,zero
 144a92c:	00800044 	movi	r2,1
 144a930:	d811883a 	mov	r8,sp
 144a934:	003dde06 	br	144a0b0 <__alt_data_end+0xfffe48b0>
 144a938:	10803fcc 	andi	r2,r2,255
 144a93c:	1000191e 	bne	r2,zero,144a9a4 <___vfiprintf_internal_r+0xf60>
 144a940:	9080004c 	andi	r2,r18,1
 144a944:	10001726 	beq	r2,zero,144a9a4 <___vfiprintf_internal_r+0xf60>
 144a948:	00800c04 	movi	r2,48
 144a94c:	d8c109c4 	addi	r3,sp,1063
 144a950:	d88109c5 	stb	r2,1063(sp)
 144a954:	dd012817 	ldw	r20,1184(sp)
 144a958:	d8c12215 	stw	r3,1160(sp)
 144a95c:	003d8a06 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a960:	d9012717 	ldw	r4,1180(sp)
 144a964:	dd010a04 	addi	r20,sp,1064
 144a968:	988003cc 	andi	r2,r19,15
 144a96c:	a806973a 	slli	r3,r21,28
 144a970:	2085883a 	add	r2,r4,r2
 144a974:	9826d13a 	srli	r19,r19,4
 144a978:	10800003 	ldbu	r2,0(r2)
 144a97c:	a82ad13a 	srli	r21,r21,4
 144a980:	a53fffc4 	addi	r20,r20,-1
 144a984:	1ce6b03a 	or	r19,r3,r19
 144a988:	a0800005 	stb	r2,0(r20)
 144a98c:	9d44b03a 	or	r2,r19,r21
 144a990:	103ff51e 	bne	r2,zero,144a968 <__alt_data_end+0xfffe5168>
 144a994:	d9411e17 	ldw	r5,1144(sp)
 144a998:	dd012215 	stw	r20,1160(sp)
 144a99c:	2d29c83a 	sub	r20,r5,r20
 144a9a0:	003d7906 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a9a4:	d8c10a04 	addi	r3,sp,1064
 144a9a8:	d8c12215 	stw	r3,1160(sp)
 144a9ac:	003d7606 	br	1449f88 <__alt_data_end+0xfffe4788>
 144a9b0:	18009e1e 	bne	r3,zero,144ac2c <___vfiprintf_internal_r+0x11e8>
 144a9b4:	d8811d87 	ldb	r2,1142(sp)
 144a9b8:	10005f26 	beq	r2,zero,144ab38 <___vfiprintf_internal_r+0x10f4>
 144a9bc:	00c00044 	movi	r3,1
 144a9c0:	d9011d84 	addi	r4,sp,1142
 144a9c4:	1805883a 	mov	r2,r3
 144a9c8:	d9000015 	stw	r4,0(sp)
 144a9cc:	d8c00115 	stw	r3,4(sp)
 144a9d0:	d811883a 	mov	r8,sp
 144a9d4:	003efc06 	br	144a5c8 <__alt_data_end+0xfffe4dc8>
 144a9d8:	d9412417 	ldw	r5,1168(sp)
 144a9dc:	d811883a 	mov	r8,sp
 144a9e0:	2d65c83a 	sub	r18,r5,r21
 144a9e4:	04bf4816 	blt	zero,r18,144a708 <__alt_data_end+0xfffe4f08>
 144a9e8:	003f6c06 	br	144a79c <__alt_data_end+0xfffe4f9c>
 144a9ec:	b829883a 	mov	r20,r23
 144a9f0:	003c6906 	br	1449b98 <__alt_data_end+0xfffe4398>
 144a9f4:	d9012117 	ldw	r4,1156(sp)
 144a9f8:	d9412017 	ldw	r5,1152(sp)
 144a9fc:	d9811a04 	addi	r6,sp,1128
 144aa00:	14499300 	call	1449930 <__sprint_r.part.0>
 144aa04:	103f2b1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144aa08:	d8c11c17 	ldw	r3,1136(sp)
 144aa0c:	d811883a 	mov	r8,sp
 144aa10:	003f3806 	br	144a6f4 <__alt_data_end+0xfffe4ef4>
 144aa14:	00800084 	movi	r2,2
 144aa18:	9d46b03a 	or	r3,r19,r21
 144aa1c:	003df606 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144aa20:	d9012117 	ldw	r4,1156(sp)
 144aa24:	d9412017 	ldw	r5,1152(sp)
 144aa28:	d9811a04 	addi	r6,sp,1128
 144aa2c:	14499300 	call	1449930 <__sprint_r.part.0>
 144aa30:	103f201e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144aa34:	d811883a 	mov	r8,sp
 144aa38:	003cc606 	br	1449d54 <__alt_data_end+0xfffe4554>
 144aa3c:	000b883a 	mov	r5,zero
 144aa40:	2005883a 	mov	r2,r4
 144aa44:	d811883a 	mov	r8,sp
 144aa48:	003d9906 	br	144a0b0 <__alt_data_end+0xfffe48b0>
 144aa4c:	10803fcc 	andi	r2,r2,255
 144aa50:	1080201c 	xori	r2,r2,128
 144aa54:	10bfe004 	addi	r2,r2,-128
 144aa58:	01000c04 	movi	r4,48
 144aa5c:	1100b226 	beq	r2,r4,144ad28 <___vfiprintf_internal_r+0x12e4>
 144aa60:	d9412217 	ldw	r5,1160(sp)
 144aa64:	d8811e17 	ldw	r2,1144(sp)
 144aa68:	193fffc5 	stb	r4,-1(r3)
 144aa6c:	297fffc4 	addi	r5,r5,-1
 144aa70:	d9412215 	stw	r5,1160(sp)
 144aa74:	1169c83a 	sub	r20,r2,r5
 144aa78:	003d4306 	br	1449f88 <__alt_data_end+0xfffe4788>
 144aa7c:	d9012117 	ldw	r4,1156(sp)
 144aa80:	d9412017 	ldw	r5,1152(sp)
 144aa84:	d9811a04 	addi	r6,sp,1128
 144aa88:	14499300 	call	1449930 <__sprint_r.part.0>
 144aa8c:	103f091e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144aa90:	d9411b17 	ldw	r5,1132(sp)
 144aa94:	d8c11c17 	ldw	r3,1136(sp)
 144aa98:	d811883a 	mov	r8,sp
 144aa9c:	28800044 	addi	r2,r5,1
 144aaa0:	003d8306 	br	144a0b0 <__alt_data_end+0xfffe48b0>
 144aaa4:	d9012117 	ldw	r4,1156(sp)
 144aaa8:	d9412017 	ldw	r5,1152(sp)
 144aaac:	d9811a04 	addi	r6,sp,1128
 144aab0:	da812a15 	stw	r10,1192(sp)
 144aab4:	14499300 	call	1449930 <__sprint_r.part.0>
 144aab8:	da812a17 	ldw	r10,1192(sp)
 144aabc:	103efd1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144aac0:	d9411b17 	ldw	r5,1132(sp)
 144aac4:	d8c11c17 	ldw	r3,1136(sp)
 144aac8:	d811883a 	mov	r8,sp
 144aacc:	28800044 	addi	r2,r5,1
 144aad0:	003d6a06 	br	144a07c <__alt_data_end+0xfffe487c>
 144aad4:	1800a01e 	bne	r3,zero,144ad58 <___vfiprintf_internal_r+0x1314>
 144aad8:	000b883a 	mov	r5,zero
 144aadc:	00800044 	movi	r2,1
 144aae0:	d811883a 	mov	r8,sp
 144aae4:	003d7406 	br	144a0b8 <__alt_data_end+0xfffe48b8>
 144aae8:	d9012117 	ldw	r4,1156(sp)
 144aaec:	d9412017 	ldw	r5,1152(sp)
 144aaf0:	d9811a04 	addi	r6,sp,1128
 144aaf4:	14499300 	call	1449930 <__sprint_r.part.0>
 144aaf8:	103eee1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144aafc:	d8811b17 	ldw	r2,1132(sp)
 144ab00:	d8c11c17 	ldw	r3,1136(sp)
 144ab04:	d811883a 	mov	r8,sp
 144ab08:	10800044 	addi	r2,r2,1
 144ab0c:	003d8f06 	br	144a14c <__alt_data_end+0xfffe494c>
 144ab10:	04e7c83a 	sub	r19,zero,r19
 144ab14:	9804c03a 	cmpne	r2,r19,zero
 144ab18:	056bc83a 	sub	r21,zero,r21
 144ab1c:	a8abc83a 	sub	r21,r21,r2
 144ab20:	05800b44 	movi	r22,45
 144ab24:	dd811d85 	stb	r22,1142(sp)
 144ab28:	8029883a 	mov	r20,r16
 144ab2c:	00800044 	movi	r2,1
 144ab30:	9d46b03a 	or	r3,r19,r21
 144ab34:	003cfa06 	br	1449f20 <__alt_data_end+0xfffe4720>
 144ab38:	000b883a 	mov	r5,zero
 144ab3c:	00800044 	movi	r2,1
 144ab40:	d811883a 	mov	r8,sp
 144ab44:	503d5a26 	beq	r10,zero,144a0b0 <__alt_data_end+0xfffe48b0>
 144ab48:	00c00084 	movi	r3,2
 144ab4c:	d9011d04 	addi	r4,sp,1140
 144ab50:	d9000015 	stw	r4,0(sp)
 144ab54:	d8c00115 	stw	r3,4(sp)
 144ab58:	003d5206 	br	144a0a4 <__alt_data_end+0xfffe48a4>
 144ab5c:	9080040c 	andi	r2,r18,16
 144ab60:	1000421e 	bne	r2,zero,144ac6c <___vfiprintf_internal_r+0x1228>
 144ab64:	9480100c 	andi	r18,r18,64
 144ab68:	90009c26 	beq	r18,zero,144addc <___vfiprintf_internal_r+0x1398>
 144ab6c:	d9412317 	ldw	r5,1164(sp)
 144ab70:	d8c12517 	ldw	r3,1172(sp)
 144ab74:	28800017 	ldw	r2,0(r5)
 144ab78:	29400104 	addi	r5,r5,4
 144ab7c:	d9412315 	stw	r5,1164(sp)
 144ab80:	10c0000d 	sth	r3,0(r2)
 144ab84:	003be706 	br	1449b24 <__alt_data_end+0xfffe4324>
 144ab88:	90c0100c 	andi	r3,r18,64
 144ab8c:	18003e26 	beq	r3,zero,144ac88 <___vfiprintf_internal_r+0x1244>
 144ab90:	d8c12317 	ldw	r3,1164(sp)
 144ab94:	14c0000b 	ldhu	r19,0(r2)
 144ab98:	002b883a 	mov	r21,zero
 144ab9c:	18c00104 	addi	r3,r3,4
 144aba0:	d8c12315 	stw	r3,1164(sp)
 144aba4:	003db706 	br	144a284 <__alt_data_end+0xfffe4a84>
 144aba8:	9080100c 	andi	r2,r18,64
 144abac:	10004c26 	beq	r2,zero,144ace0 <___vfiprintf_internal_r+0x129c>
 144abb0:	1cc0000f 	ldh	r19,0(r3)
 144abb4:	d8812317 	ldw	r2,1164(sp)
 144abb8:	982bd7fa 	srai	r21,r19,31
 144abbc:	10800104 	addi	r2,r2,4
 144abc0:	d8812315 	stw	r2,1164(sp)
 144abc4:	a805883a 	mov	r2,r21
 144abc8:	003cd006 	br	1449f0c <__alt_data_end+0xfffe470c>
 144abcc:	00800084 	movi	r2,2
 144abd0:	003d8906 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144abd4:	b9800007 	ldb	r6,0(r23)
 144abd8:	003bfb06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144abdc:	9080100c 	andi	r2,r18,64
 144abe0:	10003726 	beq	r2,zero,144acc0 <___vfiprintf_internal_r+0x127c>
 144abe4:	d9412317 	ldw	r5,1164(sp)
 144abe8:	002b883a 	mov	r21,zero
 144abec:	0005883a 	mov	r2,zero
 144abf0:	2cc0000b 	ldhu	r19,0(r5)
 144abf4:	29400104 	addi	r5,r5,4
 144abf8:	d9412315 	stw	r5,1164(sp)
 144abfc:	9807883a 	mov	r3,r19
 144ac00:	003d7d06 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144ac04:	9080100c 	andi	r2,r18,64
 144ac08:	10002526 	beq	r2,zero,144aca0 <___vfiprintf_internal_r+0x125c>
 144ac0c:	d8812317 	ldw	r2,1164(sp)
 144ac10:	002b883a 	mov	r21,zero
 144ac14:	14c0000b 	ldhu	r19,0(r2)
 144ac18:	10800104 	addi	r2,r2,4
 144ac1c:	d8812315 	stw	r2,1164(sp)
 144ac20:	9807883a 	mov	r3,r19
 144ac24:	00800044 	movi	r2,1
 144ac28:	003d7306 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144ac2c:	d9012117 	ldw	r4,1156(sp)
 144ac30:	d9412017 	ldw	r5,1152(sp)
 144ac34:	d9811a04 	addi	r6,sp,1128
 144ac38:	da812a15 	stw	r10,1192(sp)
 144ac3c:	14499300 	call	1449930 <__sprint_r.part.0>
 144ac40:	da812a17 	ldw	r10,1192(sp)
 144ac44:	103e9b1e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144ac48:	d9411b17 	ldw	r5,1132(sp)
 144ac4c:	d8c11c17 	ldw	r3,1136(sp)
 144ac50:	d811883a 	mov	r8,sp
 144ac54:	28800044 	addi	r2,r5,1
 144ac58:	003e5006 	br	144a59c <__alt_data_end+0xfffe4d9c>
 144ac5c:	182b883a 	mov	r21,r3
 144ac60:	003ed006 	br	144a7a4 <__alt_data_end+0xfffe4fa4>
 144ac64:	8029883a 	mov	r20,r16
 144ac68:	003dc606 	br	144a384 <__alt_data_end+0xfffe4b84>
 144ac6c:	d8c12317 	ldw	r3,1164(sp)
 144ac70:	d9012517 	ldw	r4,1172(sp)
 144ac74:	18800017 	ldw	r2,0(r3)
 144ac78:	18c00104 	addi	r3,r3,4
 144ac7c:	d8c12315 	stw	r3,1164(sp)
 144ac80:	11000015 	stw	r4,0(r2)
 144ac84:	003ba706 	br	1449b24 <__alt_data_end+0xfffe4324>
 144ac88:	d9012317 	ldw	r4,1164(sp)
 144ac8c:	14c00017 	ldw	r19,0(r2)
 144ac90:	002b883a 	mov	r21,zero
 144ac94:	21000104 	addi	r4,r4,4
 144ac98:	d9012315 	stw	r4,1164(sp)
 144ac9c:	003d7906 	br	144a284 <__alt_data_end+0xfffe4a84>
 144aca0:	d8c12317 	ldw	r3,1164(sp)
 144aca4:	002b883a 	mov	r21,zero
 144aca8:	00800044 	movi	r2,1
 144acac:	1cc00017 	ldw	r19,0(r3)
 144acb0:	18c00104 	addi	r3,r3,4
 144acb4:	d8c12315 	stw	r3,1164(sp)
 144acb8:	9807883a 	mov	r3,r19
 144acbc:	003d4e06 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144acc0:	d8812317 	ldw	r2,1164(sp)
 144acc4:	002b883a 	mov	r21,zero
 144acc8:	14c00017 	ldw	r19,0(r2)
 144accc:	10800104 	addi	r2,r2,4
 144acd0:	d8812315 	stw	r2,1164(sp)
 144acd4:	9807883a 	mov	r3,r19
 144acd8:	0005883a 	mov	r2,zero
 144acdc:	003d4606 	br	144a1f8 <__alt_data_end+0xfffe49f8>
 144ace0:	1cc00017 	ldw	r19,0(r3)
 144ace4:	d8c12317 	ldw	r3,1164(sp)
 144ace8:	982bd7fa 	srai	r21,r19,31
 144acec:	18c00104 	addi	r3,r3,4
 144acf0:	d8c12315 	stw	r3,1164(sp)
 144acf4:	a805883a 	mov	r2,r21
 144acf8:	003c8406 	br	1449f0c <__alt_data_end+0xfffe470c>
 144acfc:	01005174 	movhi	r4,325
 144ad00:	21024404 	addi	r4,r4,2320
 144ad04:	d9012615 	stw	r4,1176(sp)
 144ad08:	003d0606 	br	144a124 <__alt_data_end+0xfffe4924>
 144ad0c:	b9800043 	ldbu	r6,1(r23)
 144ad10:	94800814 	ori	r18,r18,32
 144ad14:	bdc00044 	addi	r23,r23,1
 144ad18:	31803fcc 	andi	r6,r6,255
 144ad1c:	3180201c 	xori	r6,r6,128
 144ad20:	31bfe004 	addi	r6,r6,-128
 144ad24:	003ba806 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144ad28:	d8811e17 	ldw	r2,1144(sp)
 144ad2c:	d8c12217 	ldw	r3,1160(sp)
 144ad30:	10e9c83a 	sub	r20,r2,r3
 144ad34:	003c9406 	br	1449f88 <__alt_data_end+0xfffe4788>
 144ad38:	da012a15 	stw	r8,1192(sp)
 144ad3c:	14425540 	call	1442554 <strlen>
 144ad40:	1029883a 	mov	r20,r2
 144ad44:	dd811d83 	ldbu	r22,1142(sp)
 144ad48:	dcc12315 	stw	r19,1164(sp)
 144ad4c:	0021883a 	mov	r16,zero
 144ad50:	da012a17 	ldw	r8,1192(sp)
 144ad54:	003c8c06 	br	1449f88 <__alt_data_end+0xfffe4788>
 144ad58:	d9012117 	ldw	r4,1156(sp)
 144ad5c:	d9412017 	ldw	r5,1152(sp)
 144ad60:	d9811a04 	addi	r6,sp,1128
 144ad64:	14499300 	call	1449930 <__sprint_r.part.0>
 144ad68:	103e521e 	bne	r2,zero,144a6b4 <__alt_data_end+0xfffe4eb4>
 144ad6c:	d9411b17 	ldw	r5,1132(sp)
 144ad70:	d8c11c17 	ldw	r3,1136(sp)
 144ad74:	d811883a 	mov	r8,sp
 144ad78:	28800044 	addi	r2,r5,1
 144ad7c:	003cce06 	br	144a0b8 <__alt_data_end+0xfffe48b8>
 144ad80:	01405174 	movhi	r5,325
 144ad84:	29424804 	addi	r5,r5,2336
 144ad88:	d9412615 	stw	r5,1176(sp)
 144ad8c:	d9411b17 	ldw	r5,1132(sp)
 144ad90:	29400044 	addi	r5,r5,1
 144ad94:	003cad06 	br	144a04c <__alt_data_end+0xfffe484c>
 144ad98:	00800184 	movi	r2,6
 144ad9c:	1400012e 	bgeu	r2,r16,144ada4 <___vfiprintf_internal_r+0x1360>
 144ada0:	1021883a 	mov	r16,r2
 144ada4:	8029883a 	mov	r20,r16
 144ada8:	802b883a 	mov	r21,r16
 144adac:	80001c16 	blt	r16,zero,144ae20 <___vfiprintf_internal_r+0x13dc>
 144adb0:	00c05174 	movhi	r3,325
 144adb4:	18c1e804 	addi	r3,r3,1952
 144adb8:	dcc12315 	stw	r19,1164(sp)
 144adbc:	d8c12215 	stw	r3,1160(sp)
 144adc0:	003cff06 	br	144a1c0 <__alt_data_end+0xfffe49c0>
 144adc4:	d9411b17 	ldw	r5,1132(sp)
 144adc8:	00805174 	movhi	r2,325
 144adcc:	10824804 	addi	r2,r2,2336
 144add0:	d8812615 	stw	r2,1176(sp)
 144add4:	29400044 	addi	r5,r5,1
 144add8:	003e6706 	br	144a778 <__alt_data_end+0xfffe4f78>
 144addc:	d9012317 	ldw	r4,1164(sp)
 144ade0:	d9412517 	ldw	r5,1172(sp)
 144ade4:	20800017 	ldw	r2,0(r4)
 144ade8:	21000104 	addi	r4,r4,4
 144adec:	d9012315 	stw	r4,1164(sp)
 144adf0:	11400015 	stw	r5,0(r2)
 144adf4:	003b4b06 	br	1449b24 <__alt_data_end+0xfffe4324>
 144adf8:	8029883a 	mov	r20,r16
 144adfc:	dd811d83 	ldbu	r22,1142(sp)
 144ae00:	dcc12315 	stw	r19,1164(sp)
 144ae04:	0021883a 	mov	r16,zero
 144ae08:	003c5f06 	br	1449f88 <__alt_data_end+0xfffe4788>
 144ae0c:	01005174 	movhi	r4,325
 144ae10:	21024404 	addi	r4,r4,2320
 144ae14:	d9012615 	stw	r4,1176(sp)
 144ae18:	1009883a 	mov	r4,r2
 144ae1c:	003ea006 	br	144a8a0 <__alt_data_end+0xfffe50a0>
 144ae20:	002b883a 	mov	r21,zero
 144ae24:	003fe206 	br	144adb0 <__alt_data_end+0xfffe55b0>
 144ae28:	d9412317 	ldw	r5,1164(sp)
 144ae2c:	b807883a 	mov	r3,r23
 144ae30:	102f883a 	mov	r23,r2
 144ae34:	2c000017 	ldw	r16,0(r5)
 144ae38:	29000104 	addi	r4,r5,4
 144ae3c:	d9012315 	stw	r4,1164(sp)
 144ae40:	80000416 	blt	r16,zero,144ae54 <___vfiprintf_internal_r+0x1410>
 144ae44:	19800047 	ldb	r6,1(r3)
 144ae48:	003b5f06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144ae4c:	043fffc4 	movi	r16,-1
 144ae50:	003bef06 	br	1449e10 <__alt_data_end+0xfffe4610>
 144ae54:	043fffc4 	movi	r16,-1
 144ae58:	19800047 	ldb	r6,1(r3)
 144ae5c:	003b5a06 	br	1449bc8 <__alt_data_end+0xfffe43c8>
 144ae60:	282b883a 	mov	r21,r5
 144ae64:	003cc706 	br	144a184 <__alt_data_end+0xfffe4984>

0144ae68 <__vfiprintf_internal>:
 144ae68:	2007883a 	mov	r3,r4
 144ae6c:	01005174 	movhi	r4,325
 144ae70:	21055204 	addi	r4,r4,5448
 144ae74:	21000017 	ldw	r4,0(r4)
 144ae78:	2805883a 	mov	r2,r5
 144ae7c:	300f883a 	mov	r7,r6
 144ae80:	180b883a 	mov	r5,r3
 144ae84:	100d883a 	mov	r6,r2
 144ae88:	1449a441 	jmpi	1449a44 <___vfiprintf_internal_r>

0144ae8c <_write_r>:
 144ae8c:	defffd04 	addi	sp,sp,-12
 144ae90:	dc000015 	stw	r16,0(sp)
 144ae94:	04005174 	movhi	r16,325
 144ae98:	dc400115 	stw	r17,4(sp)
 144ae9c:	84087004 	addi	r16,r16,8640
 144aea0:	2023883a 	mov	r17,r4
 144aea4:	2809883a 	mov	r4,r5
 144aea8:	300b883a 	mov	r5,r6
 144aeac:	380d883a 	mov	r6,r7
 144aeb0:	dfc00215 	stw	ra,8(sp)
 144aeb4:	80000015 	stw	zero,0(r16)
 144aeb8:	144d9240 	call	144d924 <write>
 144aebc:	00ffffc4 	movi	r3,-1
 144aec0:	10c00526 	beq	r2,r3,144aed8 <_write_r+0x4c>
 144aec4:	dfc00217 	ldw	ra,8(sp)
 144aec8:	dc400117 	ldw	r17,4(sp)
 144aecc:	dc000017 	ldw	r16,0(sp)
 144aed0:	dec00304 	addi	sp,sp,12
 144aed4:	f800283a 	ret
 144aed8:	80c00017 	ldw	r3,0(r16)
 144aedc:	183ff926 	beq	r3,zero,144aec4 <__alt_data_end+0xfffe56c4>
 144aee0:	88c00015 	stw	r3,0(r17)
 144aee4:	003ff706 	br	144aec4 <__alt_data_end+0xfffe56c4>

0144aee8 <_close_r>:
 144aee8:	defffd04 	addi	sp,sp,-12
 144aeec:	dc000015 	stw	r16,0(sp)
 144aef0:	04005174 	movhi	r16,325
 144aef4:	dc400115 	stw	r17,4(sp)
 144aef8:	84087004 	addi	r16,r16,8640
 144aefc:	2023883a 	mov	r17,r4
 144af00:	2809883a 	mov	r4,r5
 144af04:	dfc00215 	stw	ra,8(sp)
 144af08:	80000015 	stw	zero,0(r16)
 144af0c:	144d0900 	call	144d090 <close>
 144af10:	00ffffc4 	movi	r3,-1
 144af14:	10c00526 	beq	r2,r3,144af2c <_close_r+0x44>
 144af18:	dfc00217 	ldw	ra,8(sp)
 144af1c:	dc400117 	ldw	r17,4(sp)
 144af20:	dc000017 	ldw	r16,0(sp)
 144af24:	dec00304 	addi	sp,sp,12
 144af28:	f800283a 	ret
 144af2c:	80c00017 	ldw	r3,0(r16)
 144af30:	183ff926 	beq	r3,zero,144af18 <__alt_data_end+0xfffe5718>
 144af34:	88c00015 	stw	r3,0(r17)
 144af38:	003ff706 	br	144af18 <__alt_data_end+0xfffe5718>

0144af3c <_calloc_r>:
 144af3c:	defffe04 	addi	sp,sp,-8
 144af40:	dc000015 	stw	r16,0(sp)
 144af44:	2021883a 	mov	r16,r4
 144af48:	2809883a 	mov	r4,r5
 144af4c:	300b883a 	mov	r5,r6
 144af50:	dfc00115 	stw	ra,4(sp)
 144af54:	14423f80 	call	14423f8 <__mulsi3>
 144af58:	8009883a 	mov	r4,r16
 144af5c:	100b883a 	mov	r5,r2
 144af60:	14474580 	call	1447458 <_malloc_r>
 144af64:	1021883a 	mov	r16,r2
 144af68:	10002826 	beq	r2,zero,144b00c <_calloc_r+0xd0>
 144af6c:	11bfff17 	ldw	r6,-4(r2)
 144af70:	00bfff04 	movi	r2,-4
 144af74:	00c00904 	movi	r3,36
 144af78:	308c703a 	and	r6,r6,r2
 144af7c:	308d883a 	add	r6,r6,r2
 144af80:	19801436 	bltu	r3,r6,144afd4 <_calloc_r+0x98>
 144af84:	008004c4 	movi	r2,19
 144af88:	11800936 	bltu	r2,r6,144afb0 <_calloc_r+0x74>
 144af8c:	8005883a 	mov	r2,r16
 144af90:	10000015 	stw	zero,0(r2)
 144af94:	10000115 	stw	zero,4(r2)
 144af98:	10000215 	stw	zero,8(r2)
 144af9c:	8005883a 	mov	r2,r16
 144afa0:	dfc00117 	ldw	ra,4(sp)
 144afa4:	dc000017 	ldw	r16,0(sp)
 144afa8:	dec00204 	addi	sp,sp,8
 144afac:	f800283a 	ret
 144afb0:	80000015 	stw	zero,0(r16)
 144afb4:	80000115 	stw	zero,4(r16)
 144afb8:	008006c4 	movi	r2,27
 144afbc:	11800d2e 	bgeu	r2,r6,144aff4 <_calloc_r+0xb8>
 144afc0:	80000215 	stw	zero,8(r16)
 144afc4:	80000315 	stw	zero,12(r16)
 144afc8:	30c00c26 	beq	r6,r3,144affc <_calloc_r+0xc0>
 144afcc:	80800404 	addi	r2,r16,16
 144afd0:	003fef06 	br	144af90 <__alt_data_end+0xfffe5790>
 144afd4:	8009883a 	mov	r4,r16
 144afd8:	000b883a 	mov	r5,zero
 144afdc:	1447f7c0 	call	1447f7c <memset>
 144afe0:	8005883a 	mov	r2,r16
 144afe4:	dfc00117 	ldw	ra,4(sp)
 144afe8:	dc000017 	ldw	r16,0(sp)
 144afec:	dec00204 	addi	sp,sp,8
 144aff0:	f800283a 	ret
 144aff4:	80800204 	addi	r2,r16,8
 144aff8:	003fe506 	br	144af90 <__alt_data_end+0xfffe5790>
 144affc:	80000415 	stw	zero,16(r16)
 144b000:	80800604 	addi	r2,r16,24
 144b004:	80000515 	stw	zero,20(r16)
 144b008:	003fe106 	br	144af90 <__alt_data_end+0xfffe5790>
 144b00c:	0005883a 	mov	r2,zero
 144b010:	003fe306 	br	144afa0 <__alt_data_end+0xfffe57a0>

0144b014 <_fclose_r>:
 144b014:	28003226 	beq	r5,zero,144b0e0 <_fclose_r+0xcc>
 144b018:	defffc04 	addi	sp,sp,-16
 144b01c:	dc400115 	stw	r17,4(sp)
 144b020:	2023883a 	mov	r17,r4
 144b024:	dc000015 	stw	r16,0(sp)
 144b028:	dfc00315 	stw	ra,12(sp)
 144b02c:	dc800215 	stw	r18,8(sp)
 144b030:	2821883a 	mov	r16,r5
 144b034:	14467580 	call	1446758 <__sfp_lock_acquire>
 144b038:	88000226 	beq	r17,zero,144b044 <_fclose_r+0x30>
 144b03c:	88800e17 	ldw	r2,56(r17)
 144b040:	10002926 	beq	r2,zero,144b0e8 <_fclose_r+0xd4>
 144b044:	8080030f 	ldh	r2,12(r16)
 144b048:	10002226 	beq	r2,zero,144b0d4 <_fclose_r+0xc0>
 144b04c:	8809883a 	mov	r4,r17
 144b050:	800b883a 	mov	r5,r16
 144b054:	144618c0 	call	144618c <_fflush_r>
 144b058:	1025883a 	mov	r18,r2
 144b05c:	80800b17 	ldw	r2,44(r16)
 144b060:	10000426 	beq	r2,zero,144b074 <_fclose_r+0x60>
 144b064:	81400717 	ldw	r5,28(r16)
 144b068:	8809883a 	mov	r4,r17
 144b06c:	103ee83a 	callr	r2
 144b070:	10002616 	blt	r2,zero,144b10c <_fclose_r+0xf8>
 144b074:	8080030b 	ldhu	r2,12(r16)
 144b078:	1080200c 	andi	r2,r2,128
 144b07c:	10001f1e 	bne	r2,zero,144b0fc <_fclose_r+0xe8>
 144b080:	81400c17 	ldw	r5,48(r16)
 144b084:	28000526 	beq	r5,zero,144b09c <_fclose_r+0x88>
 144b088:	80801004 	addi	r2,r16,64
 144b08c:	28800226 	beq	r5,r2,144b098 <_fclose_r+0x84>
 144b090:	8809883a 	mov	r4,r17
 144b094:	14468bc0 	call	14468bc <_free_r>
 144b098:	80000c15 	stw	zero,48(r16)
 144b09c:	81401117 	ldw	r5,68(r16)
 144b0a0:	28000326 	beq	r5,zero,144b0b0 <_fclose_r+0x9c>
 144b0a4:	8809883a 	mov	r4,r17
 144b0a8:	14468bc0 	call	14468bc <_free_r>
 144b0ac:	80001115 	stw	zero,68(r16)
 144b0b0:	8000030d 	sth	zero,12(r16)
 144b0b4:	144675c0 	call	144675c <__sfp_lock_release>
 144b0b8:	9005883a 	mov	r2,r18
 144b0bc:	dfc00317 	ldw	ra,12(sp)
 144b0c0:	dc800217 	ldw	r18,8(sp)
 144b0c4:	dc400117 	ldw	r17,4(sp)
 144b0c8:	dc000017 	ldw	r16,0(sp)
 144b0cc:	dec00404 	addi	sp,sp,16
 144b0d0:	f800283a 	ret
 144b0d4:	144675c0 	call	144675c <__sfp_lock_release>
 144b0d8:	0005883a 	mov	r2,zero
 144b0dc:	003ff706 	br	144b0bc <__alt_data_end+0xfffe58bc>
 144b0e0:	0005883a 	mov	r2,zero
 144b0e4:	f800283a 	ret
 144b0e8:	8809883a 	mov	r4,r17
 144b0ec:	14467480 	call	1446748 <__sinit>
 144b0f0:	8080030f 	ldh	r2,12(r16)
 144b0f4:	103fd51e 	bne	r2,zero,144b04c <__alt_data_end+0xfffe584c>
 144b0f8:	003ff606 	br	144b0d4 <__alt_data_end+0xfffe58d4>
 144b0fc:	81400417 	ldw	r5,16(r16)
 144b100:	8809883a 	mov	r4,r17
 144b104:	14468bc0 	call	14468bc <_free_r>
 144b108:	003fdd06 	br	144b080 <__alt_data_end+0xfffe5880>
 144b10c:	04bfffc4 	movi	r18,-1
 144b110:	003fd806 	br	144b074 <__alt_data_end+0xfffe5874>

0144b114 <fclose>:
 144b114:	00805174 	movhi	r2,325
 144b118:	10855204 	addi	r2,r2,5448
 144b11c:	200b883a 	mov	r5,r4
 144b120:	11000017 	ldw	r4,0(r2)
 144b124:	144b0141 	jmpi	144b014 <_fclose_r>

0144b128 <_fputwc_r>:
 144b128:	3080030b 	ldhu	r2,12(r6)
 144b12c:	defff804 	addi	sp,sp,-32
 144b130:	dcc00415 	stw	r19,16(sp)
 144b134:	dc800315 	stw	r18,12(sp)
 144b138:	dc000115 	stw	r16,4(sp)
 144b13c:	dfc00715 	stw	ra,28(sp)
 144b140:	dd400615 	stw	r21,24(sp)
 144b144:	dd000515 	stw	r20,20(sp)
 144b148:	dc400215 	stw	r17,8(sp)
 144b14c:	10c8000c 	andi	r3,r2,8192
 144b150:	3021883a 	mov	r16,r6
 144b154:	2027883a 	mov	r19,r4
 144b158:	2825883a 	mov	r18,r5
 144b15c:	1800051e 	bne	r3,zero,144b174 <_fputwc_r+0x4c>
 144b160:	30c01917 	ldw	r3,100(r6)
 144b164:	10880014 	ori	r2,r2,8192
 144b168:	3080030d 	sth	r2,12(r6)
 144b16c:	18880014 	ori	r2,r3,8192
 144b170:	30801915 	stw	r2,100(r6)
 144b174:	14472480 	call	1447248 <__locale_mb_cur_max>
 144b178:	00c00044 	movi	r3,1
 144b17c:	10c03e26 	beq	r2,r3,144b278 <_fputwc_r+0x150>
 144b180:	9809883a 	mov	r4,r19
 144b184:	d80b883a 	mov	r5,sp
 144b188:	900d883a 	mov	r6,r18
 144b18c:	81c01704 	addi	r7,r16,92
 144b190:	144b5d80 	call	144b5d8 <_wcrtomb_r>
 144b194:	1029883a 	mov	r20,r2
 144b198:	00bfffc4 	movi	r2,-1
 144b19c:	a0802026 	beq	r20,r2,144b220 <_fputwc_r+0xf8>
 144b1a0:	d9400003 	ldbu	r5,0(sp)
 144b1a4:	a0001c26 	beq	r20,zero,144b218 <_fputwc_r+0xf0>
 144b1a8:	0023883a 	mov	r17,zero
 144b1ac:	05400284 	movi	r21,10
 144b1b0:	00000906 	br	144b1d8 <_fputwc_r+0xb0>
 144b1b4:	80800017 	ldw	r2,0(r16)
 144b1b8:	11400005 	stb	r5,0(r2)
 144b1bc:	80c00017 	ldw	r3,0(r16)
 144b1c0:	18c00044 	addi	r3,r3,1
 144b1c4:	80c00015 	stw	r3,0(r16)
 144b1c8:	8c400044 	addi	r17,r17,1
 144b1cc:	dc45883a 	add	r2,sp,r17
 144b1d0:	8d00112e 	bgeu	r17,r20,144b218 <_fputwc_r+0xf0>
 144b1d4:	11400003 	ldbu	r5,0(r2)
 144b1d8:	80c00217 	ldw	r3,8(r16)
 144b1dc:	18ffffc4 	addi	r3,r3,-1
 144b1e0:	80c00215 	stw	r3,8(r16)
 144b1e4:	183ff30e 	bge	r3,zero,144b1b4 <__alt_data_end+0xfffe59b4>
 144b1e8:	80800617 	ldw	r2,24(r16)
 144b1ec:	18801916 	blt	r3,r2,144b254 <_fputwc_r+0x12c>
 144b1f0:	80800017 	ldw	r2,0(r16)
 144b1f4:	11400005 	stb	r5,0(r2)
 144b1f8:	80800017 	ldw	r2,0(r16)
 144b1fc:	10c00003 	ldbu	r3,0(r2)
 144b200:	10800044 	addi	r2,r2,1
 144b204:	1d402326 	beq	r3,r21,144b294 <_fputwc_r+0x16c>
 144b208:	80800015 	stw	r2,0(r16)
 144b20c:	8c400044 	addi	r17,r17,1
 144b210:	dc45883a 	add	r2,sp,r17
 144b214:	8d3fef36 	bltu	r17,r20,144b1d4 <__alt_data_end+0xfffe59d4>
 144b218:	9005883a 	mov	r2,r18
 144b21c:	00000406 	br	144b230 <_fputwc_r+0x108>
 144b220:	80c0030b 	ldhu	r3,12(r16)
 144b224:	a005883a 	mov	r2,r20
 144b228:	18c01014 	ori	r3,r3,64
 144b22c:	80c0030d 	sth	r3,12(r16)
 144b230:	dfc00717 	ldw	ra,28(sp)
 144b234:	dd400617 	ldw	r21,24(sp)
 144b238:	dd000517 	ldw	r20,20(sp)
 144b23c:	dcc00417 	ldw	r19,16(sp)
 144b240:	dc800317 	ldw	r18,12(sp)
 144b244:	dc400217 	ldw	r17,8(sp)
 144b248:	dc000117 	ldw	r16,4(sp)
 144b24c:	dec00804 	addi	sp,sp,32
 144b250:	f800283a 	ret
 144b254:	9809883a 	mov	r4,r19
 144b258:	29403fcc 	andi	r5,r5,255
 144b25c:	800d883a 	mov	r6,r16
 144b260:	144b4680 	call	144b468 <__swbuf_r>
 144b264:	10bfffe0 	cmpeqi	r2,r2,-1
 144b268:	10803fcc 	andi	r2,r2,255
 144b26c:	103fd626 	beq	r2,zero,144b1c8 <__alt_data_end+0xfffe59c8>
 144b270:	00bfffc4 	movi	r2,-1
 144b274:	003fee06 	br	144b230 <__alt_data_end+0xfffe5a30>
 144b278:	90ffffc4 	addi	r3,r18,-1
 144b27c:	01003f84 	movi	r4,254
 144b280:	20ffbf36 	bltu	r4,r3,144b180 <__alt_data_end+0xfffe5980>
 144b284:	900b883a 	mov	r5,r18
 144b288:	dc800005 	stb	r18,0(sp)
 144b28c:	1029883a 	mov	r20,r2
 144b290:	003fc506 	br	144b1a8 <__alt_data_end+0xfffe59a8>
 144b294:	9809883a 	mov	r4,r19
 144b298:	a80b883a 	mov	r5,r21
 144b29c:	800d883a 	mov	r6,r16
 144b2a0:	144b4680 	call	144b468 <__swbuf_r>
 144b2a4:	10bfffe0 	cmpeqi	r2,r2,-1
 144b2a8:	003fef06 	br	144b268 <__alt_data_end+0xfffe5a68>

0144b2ac <fputwc>:
 144b2ac:	defffc04 	addi	sp,sp,-16
 144b2b0:	dc000115 	stw	r16,4(sp)
 144b2b4:	04005174 	movhi	r16,325
 144b2b8:	84055204 	addi	r16,r16,5448
 144b2bc:	dc400215 	stw	r17,8(sp)
 144b2c0:	2023883a 	mov	r17,r4
 144b2c4:	81000017 	ldw	r4,0(r16)
 144b2c8:	dfc00315 	stw	ra,12(sp)
 144b2cc:	280d883a 	mov	r6,r5
 144b2d0:	20000626 	beq	r4,zero,144b2ec <fputwc+0x40>
 144b2d4:	20800e17 	ldw	r2,56(r4)
 144b2d8:	1000041e 	bne	r2,zero,144b2ec <fputwc+0x40>
 144b2dc:	d9400015 	stw	r5,0(sp)
 144b2e0:	14467480 	call	1446748 <__sinit>
 144b2e4:	81000017 	ldw	r4,0(r16)
 144b2e8:	d9800017 	ldw	r6,0(sp)
 144b2ec:	880b883a 	mov	r5,r17
 144b2f0:	dfc00317 	ldw	ra,12(sp)
 144b2f4:	dc400217 	ldw	r17,8(sp)
 144b2f8:	dc000117 	ldw	r16,4(sp)
 144b2fc:	dec00404 	addi	sp,sp,16
 144b300:	144b1281 	jmpi	144b128 <_fputwc_r>

0144b304 <_fstat_r>:
 144b304:	defffd04 	addi	sp,sp,-12
 144b308:	dc000015 	stw	r16,0(sp)
 144b30c:	04005174 	movhi	r16,325
 144b310:	dc400115 	stw	r17,4(sp)
 144b314:	84087004 	addi	r16,r16,8640
 144b318:	2023883a 	mov	r17,r4
 144b31c:	2809883a 	mov	r4,r5
 144b320:	300b883a 	mov	r5,r6
 144b324:	dfc00215 	stw	ra,8(sp)
 144b328:	80000015 	stw	zero,0(r16)
 144b32c:	144d1e40 	call	144d1e4 <fstat>
 144b330:	00ffffc4 	movi	r3,-1
 144b334:	10c00526 	beq	r2,r3,144b34c <_fstat_r+0x48>
 144b338:	dfc00217 	ldw	ra,8(sp)
 144b33c:	dc400117 	ldw	r17,4(sp)
 144b340:	dc000017 	ldw	r16,0(sp)
 144b344:	dec00304 	addi	sp,sp,12
 144b348:	f800283a 	ret
 144b34c:	80c00017 	ldw	r3,0(r16)
 144b350:	183ff926 	beq	r3,zero,144b338 <__alt_data_end+0xfffe5b38>
 144b354:	88c00015 	stw	r3,0(r17)
 144b358:	003ff706 	br	144b338 <__alt_data_end+0xfffe5b38>

0144b35c <_isatty_r>:
 144b35c:	defffd04 	addi	sp,sp,-12
 144b360:	dc000015 	stw	r16,0(sp)
 144b364:	04005174 	movhi	r16,325
 144b368:	dc400115 	stw	r17,4(sp)
 144b36c:	84087004 	addi	r16,r16,8640
 144b370:	2023883a 	mov	r17,r4
 144b374:	2809883a 	mov	r4,r5
 144b378:	dfc00215 	stw	ra,8(sp)
 144b37c:	80000015 	stw	zero,0(r16)
 144b380:	144d2ec0 	call	144d2ec <isatty>
 144b384:	00ffffc4 	movi	r3,-1
 144b388:	10c00526 	beq	r2,r3,144b3a0 <_isatty_r+0x44>
 144b38c:	dfc00217 	ldw	ra,8(sp)
 144b390:	dc400117 	ldw	r17,4(sp)
 144b394:	dc000017 	ldw	r16,0(sp)
 144b398:	dec00304 	addi	sp,sp,12
 144b39c:	f800283a 	ret
 144b3a0:	80c00017 	ldw	r3,0(r16)
 144b3a4:	183ff926 	beq	r3,zero,144b38c <__alt_data_end+0xfffe5b8c>
 144b3a8:	88c00015 	stw	r3,0(r17)
 144b3ac:	003ff706 	br	144b38c <__alt_data_end+0xfffe5b8c>

0144b3b0 <_lseek_r>:
 144b3b0:	defffd04 	addi	sp,sp,-12
 144b3b4:	dc000015 	stw	r16,0(sp)
 144b3b8:	04005174 	movhi	r16,325
 144b3bc:	dc400115 	stw	r17,4(sp)
 144b3c0:	84087004 	addi	r16,r16,8640
 144b3c4:	2023883a 	mov	r17,r4
 144b3c8:	2809883a 	mov	r4,r5
 144b3cc:	300b883a 	mov	r5,r6
 144b3d0:	380d883a 	mov	r6,r7
 144b3d4:	dfc00215 	stw	ra,8(sp)
 144b3d8:	80000015 	stw	zero,0(r16)
 144b3dc:	144d4cc0 	call	144d4cc <lseek>
 144b3e0:	00ffffc4 	movi	r3,-1
 144b3e4:	10c00526 	beq	r2,r3,144b3fc <_lseek_r+0x4c>
 144b3e8:	dfc00217 	ldw	ra,8(sp)
 144b3ec:	dc400117 	ldw	r17,4(sp)
 144b3f0:	dc000017 	ldw	r16,0(sp)
 144b3f4:	dec00304 	addi	sp,sp,12
 144b3f8:	f800283a 	ret
 144b3fc:	80c00017 	ldw	r3,0(r16)
 144b400:	183ff926 	beq	r3,zero,144b3e8 <__alt_data_end+0xfffe5be8>
 144b404:	88c00015 	stw	r3,0(r17)
 144b408:	003ff706 	br	144b3e8 <__alt_data_end+0xfffe5be8>

0144b40c <_read_r>:
 144b40c:	defffd04 	addi	sp,sp,-12
 144b410:	dc000015 	stw	r16,0(sp)
 144b414:	04005174 	movhi	r16,325
 144b418:	dc400115 	stw	r17,4(sp)
 144b41c:	84087004 	addi	r16,r16,8640
 144b420:	2023883a 	mov	r17,r4
 144b424:	2809883a 	mov	r4,r5
 144b428:	300b883a 	mov	r5,r6
 144b42c:	380d883a 	mov	r6,r7
 144b430:	dfc00215 	stw	ra,8(sp)
 144b434:	80000015 	stw	zero,0(r16)
 144b438:	144d6a00 	call	144d6a0 <read>
 144b43c:	00ffffc4 	movi	r3,-1
 144b440:	10c00526 	beq	r2,r3,144b458 <_read_r+0x4c>
 144b444:	dfc00217 	ldw	ra,8(sp)
 144b448:	dc400117 	ldw	r17,4(sp)
 144b44c:	dc000017 	ldw	r16,0(sp)
 144b450:	dec00304 	addi	sp,sp,12
 144b454:	f800283a 	ret
 144b458:	80c00017 	ldw	r3,0(r16)
 144b45c:	183ff926 	beq	r3,zero,144b444 <__alt_data_end+0xfffe5c44>
 144b460:	88c00015 	stw	r3,0(r17)
 144b464:	003ff706 	br	144b444 <__alt_data_end+0xfffe5c44>

0144b468 <__swbuf_r>:
 144b468:	defffc04 	addi	sp,sp,-16
 144b46c:	dc800215 	stw	r18,8(sp)
 144b470:	dc400115 	stw	r17,4(sp)
 144b474:	dc000015 	stw	r16,0(sp)
 144b478:	dfc00315 	stw	ra,12(sp)
 144b47c:	2025883a 	mov	r18,r4
 144b480:	2823883a 	mov	r17,r5
 144b484:	3021883a 	mov	r16,r6
 144b488:	20000226 	beq	r4,zero,144b494 <__swbuf_r+0x2c>
 144b48c:	20800e17 	ldw	r2,56(r4)
 144b490:	10004126 	beq	r2,zero,144b598 <__swbuf_r+0x130>
 144b494:	80c00617 	ldw	r3,24(r16)
 144b498:	8180030b 	ldhu	r6,12(r16)
 144b49c:	80c00215 	stw	r3,8(r16)
 144b4a0:	30c0020c 	andi	r3,r6,8
 144b4a4:	18003526 	beq	r3,zero,144b57c <__swbuf_r+0x114>
 144b4a8:	80c00417 	ldw	r3,16(r16)
 144b4ac:	18003326 	beq	r3,zero,144b57c <__swbuf_r+0x114>
 144b4b0:	3088000c 	andi	r2,r6,8192
 144b4b4:	8c403fcc 	andi	r17,r17,255
 144b4b8:	10001726 	beq	r2,zero,144b518 <__swbuf_r+0xb0>
 144b4bc:	80800017 	ldw	r2,0(r16)
 144b4c0:	81000517 	ldw	r4,20(r16)
 144b4c4:	10c7c83a 	sub	r3,r2,r3
 144b4c8:	19001d0e 	bge	r3,r4,144b540 <__swbuf_r+0xd8>
 144b4cc:	18c00044 	addi	r3,r3,1
 144b4d0:	81400217 	ldw	r5,8(r16)
 144b4d4:	11000044 	addi	r4,r2,1
 144b4d8:	81000015 	stw	r4,0(r16)
 144b4dc:	297fffc4 	addi	r5,r5,-1
 144b4e0:	81400215 	stw	r5,8(r16)
 144b4e4:	14400005 	stb	r17,0(r2)
 144b4e8:	80800517 	ldw	r2,20(r16)
 144b4ec:	10c01d26 	beq	r2,r3,144b564 <__swbuf_r+0xfc>
 144b4f0:	8080030b 	ldhu	r2,12(r16)
 144b4f4:	1080004c 	andi	r2,r2,1
 144b4f8:	1000181e 	bne	r2,zero,144b55c <__swbuf_r+0xf4>
 144b4fc:	8805883a 	mov	r2,r17
 144b500:	dfc00317 	ldw	ra,12(sp)
 144b504:	dc800217 	ldw	r18,8(sp)
 144b508:	dc400117 	ldw	r17,4(sp)
 144b50c:	dc000017 	ldw	r16,0(sp)
 144b510:	dec00404 	addi	sp,sp,16
 144b514:	f800283a 	ret
 144b518:	81001917 	ldw	r4,100(r16)
 144b51c:	00b7ffc4 	movi	r2,-8193
 144b520:	31880014 	ori	r6,r6,8192
 144b524:	2084703a 	and	r2,r4,r2
 144b528:	80801915 	stw	r2,100(r16)
 144b52c:	80800017 	ldw	r2,0(r16)
 144b530:	81000517 	ldw	r4,20(r16)
 144b534:	8180030d 	sth	r6,12(r16)
 144b538:	10c7c83a 	sub	r3,r2,r3
 144b53c:	193fe316 	blt	r3,r4,144b4cc <__alt_data_end+0xfffe5ccc>
 144b540:	9009883a 	mov	r4,r18
 144b544:	800b883a 	mov	r5,r16
 144b548:	144618c0 	call	144618c <_fflush_r>
 144b54c:	1000091e 	bne	r2,zero,144b574 <__swbuf_r+0x10c>
 144b550:	80800017 	ldw	r2,0(r16)
 144b554:	00c00044 	movi	r3,1
 144b558:	003fdd06 	br	144b4d0 <__alt_data_end+0xfffe5cd0>
 144b55c:	00800284 	movi	r2,10
 144b560:	88bfe61e 	bne	r17,r2,144b4fc <__alt_data_end+0xfffe5cfc>
 144b564:	9009883a 	mov	r4,r18
 144b568:	800b883a 	mov	r5,r16
 144b56c:	144618c0 	call	144618c <_fflush_r>
 144b570:	103fe226 	beq	r2,zero,144b4fc <__alt_data_end+0xfffe5cfc>
 144b574:	00bfffc4 	movi	r2,-1
 144b578:	003fe106 	br	144b500 <__alt_data_end+0xfffe5d00>
 144b57c:	9009883a 	mov	r4,r18
 144b580:	800b883a 	mov	r5,r16
 144b584:	144470c0 	call	144470c <__swsetup_r>
 144b588:	1000051e 	bne	r2,zero,144b5a0 <__swbuf_r+0x138>
 144b58c:	8180030b 	ldhu	r6,12(r16)
 144b590:	80c00417 	ldw	r3,16(r16)
 144b594:	003fc606 	br	144b4b0 <__alt_data_end+0xfffe5cb0>
 144b598:	14467480 	call	1446748 <__sinit>
 144b59c:	003fbd06 	br	144b494 <__alt_data_end+0xfffe5c94>
 144b5a0:	80c0030b 	ldhu	r3,12(r16)
 144b5a4:	00bfffc4 	movi	r2,-1
 144b5a8:	18c01014 	ori	r3,r3,64
 144b5ac:	80c0030d 	sth	r3,12(r16)
 144b5b0:	00c00244 	movi	r3,9
 144b5b4:	90c00015 	stw	r3,0(r18)
 144b5b8:	003fd106 	br	144b500 <__alt_data_end+0xfffe5d00>

0144b5bc <__swbuf>:
 144b5bc:	00c05174 	movhi	r3,325
 144b5c0:	18c55204 	addi	r3,r3,5448
 144b5c4:	2005883a 	mov	r2,r4
 144b5c8:	19000017 	ldw	r4,0(r3)
 144b5cc:	280d883a 	mov	r6,r5
 144b5d0:	100b883a 	mov	r5,r2
 144b5d4:	144b4681 	jmpi	144b468 <__swbuf_r>

0144b5d8 <_wcrtomb_r>:
 144b5d8:	defff604 	addi	sp,sp,-40
 144b5dc:	00805174 	movhi	r2,325
 144b5e0:	dc800815 	stw	r18,32(sp)
 144b5e4:	dc400715 	stw	r17,28(sp)
 144b5e8:	dc000615 	stw	r16,24(sp)
 144b5ec:	10855604 	addi	r2,r2,5464
 144b5f0:	dfc00915 	stw	ra,36(sp)
 144b5f4:	2021883a 	mov	r16,r4
 144b5f8:	3823883a 	mov	r17,r7
 144b5fc:	14800017 	ldw	r18,0(r2)
 144b600:	28001426 	beq	r5,zero,144b654 <_wcrtomb_r+0x7c>
 144b604:	d9400415 	stw	r5,16(sp)
 144b608:	d9800515 	stw	r6,20(sp)
 144b60c:	144723c0 	call	144723c <__locale_charset>
 144b610:	d9400417 	ldw	r5,16(sp)
 144b614:	d9800517 	ldw	r6,20(sp)
 144b618:	8009883a 	mov	r4,r16
 144b61c:	dc400015 	stw	r17,0(sp)
 144b620:	100f883a 	mov	r7,r2
 144b624:	903ee83a 	callr	r18
 144b628:	00ffffc4 	movi	r3,-1
 144b62c:	10c0031e 	bne	r2,r3,144b63c <_wcrtomb_r+0x64>
 144b630:	88000015 	stw	zero,0(r17)
 144b634:	00c02284 	movi	r3,138
 144b638:	80c00015 	stw	r3,0(r16)
 144b63c:	dfc00917 	ldw	ra,36(sp)
 144b640:	dc800817 	ldw	r18,32(sp)
 144b644:	dc400717 	ldw	r17,28(sp)
 144b648:	dc000617 	ldw	r16,24(sp)
 144b64c:	dec00a04 	addi	sp,sp,40
 144b650:	f800283a 	ret
 144b654:	144723c0 	call	144723c <__locale_charset>
 144b658:	8009883a 	mov	r4,r16
 144b65c:	dc400015 	stw	r17,0(sp)
 144b660:	d9400104 	addi	r5,sp,4
 144b664:	000d883a 	mov	r6,zero
 144b668:	100f883a 	mov	r7,r2
 144b66c:	903ee83a 	callr	r18
 144b670:	003fed06 	br	144b628 <__alt_data_end+0xfffe5e28>

0144b674 <wcrtomb>:
 144b674:	defff504 	addi	sp,sp,-44
 144b678:	dc400515 	stw	r17,20(sp)
 144b67c:	dc000415 	stw	r16,16(sp)
 144b680:	dfc00a15 	stw	ra,40(sp)
 144b684:	dd400915 	stw	r21,36(sp)
 144b688:	dd000815 	stw	r20,32(sp)
 144b68c:	dcc00715 	stw	r19,28(sp)
 144b690:	dc800615 	stw	r18,24(sp)
 144b694:	2021883a 	mov	r16,r4
 144b698:	3023883a 	mov	r17,r6
 144b69c:	20001d26 	beq	r4,zero,144b714 <wcrtomb+0xa0>
 144b6a0:	04805174 	movhi	r18,325
 144b6a4:	94855204 	addi	r18,r18,5448
 144b6a8:	00805174 	movhi	r2,325
 144b6ac:	95400017 	ldw	r21,0(r18)
 144b6b0:	10855604 	addi	r2,r2,5464
 144b6b4:	15000017 	ldw	r20,0(r2)
 144b6b8:	2827883a 	mov	r19,r5
 144b6bc:	144723c0 	call	144723c <__locale_charset>
 144b6c0:	a809883a 	mov	r4,r21
 144b6c4:	dc400015 	stw	r17,0(sp)
 144b6c8:	800b883a 	mov	r5,r16
 144b6cc:	980d883a 	mov	r6,r19
 144b6d0:	100f883a 	mov	r7,r2
 144b6d4:	a03ee83a 	callr	r20
 144b6d8:	00ffffc4 	movi	r3,-1
 144b6dc:	10c0041e 	bne	r2,r3,144b6f0 <wcrtomb+0x7c>
 144b6e0:	90c00017 	ldw	r3,0(r18)
 144b6e4:	01002284 	movi	r4,138
 144b6e8:	88000015 	stw	zero,0(r17)
 144b6ec:	19000015 	stw	r4,0(r3)
 144b6f0:	dfc00a17 	ldw	ra,40(sp)
 144b6f4:	dd400917 	ldw	r21,36(sp)
 144b6f8:	dd000817 	ldw	r20,32(sp)
 144b6fc:	dcc00717 	ldw	r19,28(sp)
 144b700:	dc800617 	ldw	r18,24(sp)
 144b704:	dc400517 	ldw	r17,20(sp)
 144b708:	dc000417 	ldw	r16,16(sp)
 144b70c:	dec00b04 	addi	sp,sp,44
 144b710:	f800283a 	ret
 144b714:	04805174 	movhi	r18,325
 144b718:	94855204 	addi	r18,r18,5448
 144b71c:	00805174 	movhi	r2,325
 144b720:	94c00017 	ldw	r19,0(r18)
 144b724:	10855604 	addi	r2,r2,5464
 144b728:	14000017 	ldw	r16,0(r2)
 144b72c:	144723c0 	call	144723c <__locale_charset>
 144b730:	9809883a 	mov	r4,r19
 144b734:	dc400015 	stw	r17,0(sp)
 144b738:	d9400104 	addi	r5,sp,4
 144b73c:	000d883a 	mov	r6,zero
 144b740:	100f883a 	mov	r7,r2
 144b744:	803ee83a 	callr	r16
 144b748:	003fe306 	br	144b6d8 <__alt_data_end+0xfffe5ed8>

0144b74c <__ascii_wctomb>:
 144b74c:	28000526 	beq	r5,zero,144b764 <__ascii_wctomb+0x18>
 144b750:	00803fc4 	movi	r2,255
 144b754:	11800536 	bltu	r2,r6,144b76c <__ascii_wctomb+0x20>
 144b758:	29800005 	stb	r6,0(r5)
 144b75c:	00800044 	movi	r2,1
 144b760:	f800283a 	ret
 144b764:	0005883a 	mov	r2,zero
 144b768:	f800283a 	ret
 144b76c:	00802284 	movi	r2,138
 144b770:	20800015 	stw	r2,0(r4)
 144b774:	00bfffc4 	movi	r2,-1
 144b778:	f800283a 	ret

0144b77c <_wctomb_r>:
 144b77c:	00805174 	movhi	r2,325
 144b780:	defff904 	addi	sp,sp,-28
 144b784:	10855604 	addi	r2,r2,5464
 144b788:	dfc00615 	stw	ra,24(sp)
 144b78c:	dc400515 	stw	r17,20(sp)
 144b790:	dc000415 	stw	r16,16(sp)
 144b794:	3823883a 	mov	r17,r7
 144b798:	14000017 	ldw	r16,0(r2)
 144b79c:	d9000115 	stw	r4,4(sp)
 144b7a0:	d9400215 	stw	r5,8(sp)
 144b7a4:	d9800315 	stw	r6,12(sp)
 144b7a8:	144723c0 	call	144723c <__locale_charset>
 144b7ac:	d9000117 	ldw	r4,4(sp)
 144b7b0:	d9400217 	ldw	r5,8(sp)
 144b7b4:	d9800317 	ldw	r6,12(sp)
 144b7b8:	dc400015 	stw	r17,0(sp)
 144b7bc:	100f883a 	mov	r7,r2
 144b7c0:	803ee83a 	callr	r16
 144b7c4:	dfc00617 	ldw	ra,24(sp)
 144b7c8:	dc400517 	ldw	r17,20(sp)
 144b7cc:	dc000417 	ldw	r16,16(sp)
 144b7d0:	dec00704 	addi	sp,sp,28
 144b7d4:	f800283a 	ret

0144b7d8 <__udivdi3>:
 144b7d8:	defff504 	addi	sp,sp,-44
 144b7dc:	dcc00415 	stw	r19,16(sp)
 144b7e0:	dc000115 	stw	r16,4(sp)
 144b7e4:	dfc00a15 	stw	ra,40(sp)
 144b7e8:	df000915 	stw	fp,36(sp)
 144b7ec:	ddc00815 	stw	r23,32(sp)
 144b7f0:	dd800715 	stw	r22,28(sp)
 144b7f4:	dd400615 	stw	r21,24(sp)
 144b7f8:	dd000515 	stw	r20,20(sp)
 144b7fc:	dc800315 	stw	r18,12(sp)
 144b800:	dc400215 	stw	r17,8(sp)
 144b804:	2027883a 	mov	r19,r4
 144b808:	2821883a 	mov	r16,r5
 144b80c:	3800471e 	bne	r7,zero,144b92c <__udivdi3+0x154>
 144b810:	3025883a 	mov	r18,r6
 144b814:	2023883a 	mov	r17,r4
 144b818:	2980592e 	bgeu	r5,r6,144b980 <__udivdi3+0x1a8>
 144b81c:	00bfffd4 	movui	r2,65535
 144b820:	2829883a 	mov	r20,r5
 144b824:	1180b236 	bltu	r2,r6,144baf0 <__udivdi3+0x318>
 144b828:	00803fc4 	movi	r2,255
 144b82c:	1181622e 	bgeu	r2,r6,144bdb8 <__udivdi3+0x5e0>
 144b830:	00800204 	movi	r2,8
 144b834:	1007883a 	mov	r3,r2
 144b838:	3084d83a 	srl	r2,r6,r2
 144b83c:	01005174 	movhi	r4,325
 144b840:	21019904 	addi	r4,r4,1636
 144b844:	2085883a 	add	r2,r4,r2
 144b848:	11000003 	ldbu	r4,0(r2)
 144b84c:	20c9883a 	add	r4,r4,r3
 144b850:	00c00804 	movi	r3,32
 144b854:	1907c83a 	sub	r3,r3,r4
 144b858:	18000526 	beq	r3,zero,144b870 <__udivdi3+0x98>
 144b85c:	80e0983a 	sll	r16,r16,r3
 144b860:	9908d83a 	srl	r4,r19,r4
 144b864:	30e4983a 	sll	r18,r6,r3
 144b868:	98e2983a 	sll	r17,r19,r3
 144b86c:	8128b03a 	or	r20,r16,r4
 144b870:	902ad43a 	srli	r21,r18,16
 144b874:	a009883a 	mov	r4,r20
 144b878:	95bfffcc 	andi	r22,r18,65535
 144b87c:	a80b883a 	mov	r5,r21
 144b880:	14423f00 	call	14423f0 <__umodsi3>
 144b884:	a009883a 	mov	r4,r20
 144b888:	a80b883a 	mov	r5,r21
 144b88c:	102f883a 	mov	r23,r2
 144b890:	14423e80 	call	14423e8 <__udivsi3>
 144b894:	1009883a 	mov	r4,r2
 144b898:	b00b883a 	mov	r5,r22
 144b89c:	1021883a 	mov	r16,r2
 144b8a0:	14423f80 	call	14423f8 <__mulsi3>
 144b8a4:	b82e943a 	slli	r23,r23,16
 144b8a8:	8808d43a 	srli	r4,r17,16
 144b8ac:	b906b03a 	or	r3,r23,r4
 144b8b0:	1880052e 	bgeu	r3,r2,144b8c8 <__udivdi3+0xf0>
 144b8b4:	1c87883a 	add	r3,r3,r18
 144b8b8:	813fffc4 	addi	r4,r16,-1
 144b8bc:	1c800136 	bltu	r3,r18,144b8c4 <__udivdi3+0xec>
 144b8c0:	18815236 	bltu	r3,r2,144be0c <__udivdi3+0x634>
 144b8c4:	2021883a 	mov	r16,r4
 144b8c8:	18a7c83a 	sub	r19,r3,r2
 144b8cc:	9809883a 	mov	r4,r19
 144b8d0:	a80b883a 	mov	r5,r21
 144b8d4:	14423f00 	call	14423f0 <__umodsi3>
 144b8d8:	1029883a 	mov	r20,r2
 144b8dc:	9809883a 	mov	r4,r19
 144b8e0:	a80b883a 	mov	r5,r21
 144b8e4:	a028943a 	slli	r20,r20,16
 144b8e8:	14423e80 	call	14423e8 <__udivsi3>
 144b8ec:	1009883a 	mov	r4,r2
 144b8f0:	b00b883a 	mov	r5,r22
 144b8f4:	8c7fffcc 	andi	r17,r17,65535
 144b8f8:	1027883a 	mov	r19,r2
 144b8fc:	a462b03a 	or	r17,r20,r17
 144b900:	14423f80 	call	14423f8 <__mulsi3>
 144b904:	8880052e 	bgeu	r17,r2,144b91c <__udivdi3+0x144>
 144b908:	8ca3883a 	add	r17,r17,r18
 144b90c:	98ffffc4 	addi	r3,r19,-1
 144b910:	8c811036 	bltu	r17,r18,144bd54 <__udivdi3+0x57c>
 144b914:	88810f2e 	bgeu	r17,r2,144bd54 <__udivdi3+0x57c>
 144b918:	9cffff84 	addi	r19,r19,-2
 144b91c:	8020943a 	slli	r16,r16,16
 144b920:	0007883a 	mov	r3,zero
 144b924:	9c04b03a 	or	r2,r19,r16
 144b928:	00006006 	br	144baac <__udivdi3+0x2d4>
 144b92c:	29c05d36 	bltu	r5,r7,144baa4 <__udivdi3+0x2cc>
 144b930:	00bfffd4 	movui	r2,65535
 144b934:	11c0692e 	bgeu	r2,r7,144badc <__udivdi3+0x304>
 144b938:	00804034 	movhi	r2,256
 144b93c:	10bfffc4 	addi	r2,r2,-1
 144b940:	11c10e2e 	bgeu	r2,r7,144bd7c <__udivdi3+0x5a4>
 144b944:	01400604 	movi	r5,24
 144b948:	2811883a 	mov	r8,r5
 144b94c:	394ad83a 	srl	r5,r7,r5
 144b950:	00805174 	movhi	r2,325
 144b954:	10819904 	addi	r2,r2,1636
 144b958:	114b883a 	add	r5,r2,r5
 144b95c:	29400003 	ldbu	r5,0(r5)
 144b960:	00c00804 	movi	r3,32
 144b964:	2a0b883a 	add	r5,r5,r8
 144b968:	196fc83a 	sub	r23,r3,r5
 144b96c:	b8006b1e 	bne	r23,zero,144bb1c <__udivdi3+0x344>
 144b970:	3c011436 	bltu	r7,r16,144bdc4 <__udivdi3+0x5ec>
 144b974:	9985403a 	cmpgeu	r2,r19,r6
 144b978:	0007883a 	mov	r3,zero
 144b97c:	00004b06 	br	144baac <__udivdi3+0x2d4>
 144b980:	3000041e 	bne	r6,zero,144b994 <__udivdi3+0x1bc>
 144b984:	01000044 	movi	r4,1
 144b988:	000b883a 	mov	r5,zero
 144b98c:	14423e80 	call	14423e8 <__udivsi3>
 144b990:	1025883a 	mov	r18,r2
 144b994:	00bfffd4 	movui	r2,65535
 144b998:	14805b2e 	bgeu	r2,r18,144bb08 <__udivdi3+0x330>
 144b99c:	00804034 	movhi	r2,256
 144b9a0:	10bfffc4 	addi	r2,r2,-1
 144b9a4:	1480fe2e 	bgeu	r2,r18,144bda0 <__udivdi3+0x5c8>
 144b9a8:	00800604 	movi	r2,24
 144b9ac:	1007883a 	mov	r3,r2
 144b9b0:	9084d83a 	srl	r2,r18,r2
 144b9b4:	01005174 	movhi	r4,325
 144b9b8:	21019904 	addi	r4,r4,1636
 144b9bc:	2085883a 	add	r2,r4,r2
 144b9c0:	11800003 	ldbu	r6,0(r2)
 144b9c4:	01c00804 	movi	r7,32
 144b9c8:	30c7883a 	add	r3,r6,r3
 144b9cc:	38cfc83a 	sub	r7,r7,r3
 144b9d0:	3800a71e 	bne	r7,zero,144bc70 <__udivdi3+0x498>
 144b9d4:	9028d43a 	srli	r20,r18,16
 144b9d8:	84a1c83a 	sub	r16,r16,r18
 144b9dc:	957fffcc 	andi	r21,r18,65535
 144b9e0:	00c00044 	movi	r3,1
 144b9e4:	8009883a 	mov	r4,r16
 144b9e8:	a00b883a 	mov	r5,r20
 144b9ec:	d8c00015 	stw	r3,0(sp)
 144b9f0:	14423f00 	call	14423f0 <__umodsi3>
 144b9f4:	8009883a 	mov	r4,r16
 144b9f8:	a00b883a 	mov	r5,r20
 144b9fc:	102d883a 	mov	r22,r2
 144ba00:	14423e80 	call	14423e8 <__udivsi3>
 144ba04:	1009883a 	mov	r4,r2
 144ba08:	a80b883a 	mov	r5,r21
 144ba0c:	1021883a 	mov	r16,r2
 144ba10:	14423f80 	call	14423f8 <__mulsi3>
 144ba14:	b02c943a 	slli	r22,r22,16
 144ba18:	880ed43a 	srli	r7,r17,16
 144ba1c:	d8c00017 	ldw	r3,0(sp)
 144ba20:	b1ccb03a 	or	r6,r22,r7
 144ba24:	3080052e 	bgeu	r6,r2,144ba3c <__udivdi3+0x264>
 144ba28:	348d883a 	add	r6,r6,r18
 144ba2c:	813fffc4 	addi	r4,r16,-1
 144ba30:	34800136 	bltu	r6,r18,144ba38 <__udivdi3+0x260>
 144ba34:	3080f236 	bltu	r6,r2,144be00 <__udivdi3+0x628>
 144ba38:	2021883a 	mov	r16,r4
 144ba3c:	30a7c83a 	sub	r19,r6,r2
 144ba40:	9809883a 	mov	r4,r19
 144ba44:	a00b883a 	mov	r5,r20
 144ba48:	d8c00015 	stw	r3,0(sp)
 144ba4c:	14423f00 	call	14423f0 <__umodsi3>
 144ba50:	102d883a 	mov	r22,r2
 144ba54:	9809883a 	mov	r4,r19
 144ba58:	a00b883a 	mov	r5,r20
 144ba5c:	b02c943a 	slli	r22,r22,16
 144ba60:	14423e80 	call	14423e8 <__udivsi3>
 144ba64:	1009883a 	mov	r4,r2
 144ba68:	a80b883a 	mov	r5,r21
 144ba6c:	8c7fffcc 	andi	r17,r17,65535
 144ba70:	1027883a 	mov	r19,r2
 144ba74:	b462b03a 	or	r17,r22,r17
 144ba78:	14423f80 	call	14423f8 <__mulsi3>
 144ba7c:	d8c00017 	ldw	r3,0(sp)
 144ba80:	8880052e 	bgeu	r17,r2,144ba98 <__udivdi3+0x2c0>
 144ba84:	8ca3883a 	add	r17,r17,r18
 144ba88:	993fffc4 	addi	r4,r19,-1
 144ba8c:	8c80af36 	bltu	r17,r18,144bd4c <__udivdi3+0x574>
 144ba90:	8880ae2e 	bgeu	r17,r2,144bd4c <__udivdi3+0x574>
 144ba94:	9cffff84 	addi	r19,r19,-2
 144ba98:	8020943a 	slli	r16,r16,16
 144ba9c:	9c04b03a 	or	r2,r19,r16
 144baa0:	00000206 	br	144baac <__udivdi3+0x2d4>
 144baa4:	0007883a 	mov	r3,zero
 144baa8:	0005883a 	mov	r2,zero
 144baac:	dfc00a17 	ldw	ra,40(sp)
 144bab0:	df000917 	ldw	fp,36(sp)
 144bab4:	ddc00817 	ldw	r23,32(sp)
 144bab8:	dd800717 	ldw	r22,28(sp)
 144babc:	dd400617 	ldw	r21,24(sp)
 144bac0:	dd000517 	ldw	r20,20(sp)
 144bac4:	dcc00417 	ldw	r19,16(sp)
 144bac8:	dc800317 	ldw	r18,12(sp)
 144bacc:	dc400217 	ldw	r17,8(sp)
 144bad0:	dc000117 	ldw	r16,4(sp)
 144bad4:	dec00b04 	addi	sp,sp,44
 144bad8:	f800283a 	ret
 144badc:	00803fc4 	movi	r2,255
 144bae0:	11c0a92e 	bgeu	r2,r7,144bd88 <__udivdi3+0x5b0>
 144bae4:	01400204 	movi	r5,8
 144bae8:	2811883a 	mov	r8,r5
 144baec:	003f9706 	br	144b94c <__alt_data_end+0xfffe614c>
 144baf0:	00804034 	movhi	r2,256
 144baf4:	10bfffc4 	addi	r2,r2,-1
 144baf8:	1180a62e 	bgeu	r2,r6,144bd94 <__udivdi3+0x5bc>
 144bafc:	00800604 	movi	r2,24
 144bb00:	1007883a 	mov	r3,r2
 144bb04:	003f4c06 	br	144b838 <__alt_data_end+0xfffe6038>
 144bb08:	00803fc4 	movi	r2,255
 144bb0c:	1480a72e 	bgeu	r2,r18,144bdac <__udivdi3+0x5d4>
 144bb10:	00800204 	movi	r2,8
 144bb14:	1007883a 	mov	r3,r2
 144bb18:	003fa506 	br	144b9b0 <__alt_data_end+0xfffe61b0>
 144bb1c:	3178d83a 	srl	fp,r6,r5
 144bb20:	3dce983a 	sll	r7,r7,r23
 144bb24:	8168d83a 	srl	r20,r16,r5
 144bb28:	9950d83a 	srl	r8,r19,r5
 144bb2c:	3f38b03a 	or	fp,r7,fp
 144bb30:	e024d43a 	srli	r18,fp,16
 144bb34:	85e0983a 	sll	r16,r16,r23
 144bb38:	a009883a 	mov	r4,r20
 144bb3c:	900b883a 	mov	r5,r18
 144bb40:	8220b03a 	or	r16,r16,r8
 144bb44:	35ea983a 	sll	r21,r6,r23
 144bb48:	14423f00 	call	14423f0 <__umodsi3>
 144bb4c:	a009883a 	mov	r4,r20
 144bb50:	900b883a 	mov	r5,r18
 144bb54:	1023883a 	mov	r17,r2
 144bb58:	e5bfffcc 	andi	r22,fp,65535
 144bb5c:	14423e80 	call	14423e8 <__udivsi3>
 144bb60:	1009883a 	mov	r4,r2
 144bb64:	b00b883a 	mov	r5,r22
 144bb68:	1029883a 	mov	r20,r2
 144bb6c:	14423f80 	call	14423f8 <__mulsi3>
 144bb70:	8806943a 	slli	r3,r17,16
 144bb74:	8014d43a 	srli	r10,r16,16
 144bb78:	1a92b03a 	or	r9,r3,r10
 144bb7c:	4880042e 	bgeu	r9,r2,144bb90 <__udivdi3+0x3b8>
 144bb80:	4f13883a 	add	r9,r9,fp
 144bb84:	a0ffffc4 	addi	r3,r20,-1
 144bb88:	4f00952e 	bgeu	r9,fp,144bde0 <__udivdi3+0x608>
 144bb8c:	1829883a 	mov	r20,r3
 144bb90:	48a3c83a 	sub	r17,r9,r2
 144bb94:	8809883a 	mov	r4,r17
 144bb98:	900b883a 	mov	r5,r18
 144bb9c:	14423f00 	call	14423f0 <__umodsi3>
 144bba0:	8809883a 	mov	r4,r17
 144bba4:	900b883a 	mov	r5,r18
 144bba8:	d8800015 	stw	r2,0(sp)
 144bbac:	14423e80 	call	14423e8 <__udivsi3>
 144bbb0:	1009883a 	mov	r4,r2
 144bbb4:	b00b883a 	mov	r5,r22
 144bbb8:	1023883a 	mov	r17,r2
 144bbbc:	14423f80 	call	14423f8 <__mulsi3>
 144bbc0:	d8c00017 	ldw	r3,0(sp)
 144bbc4:	823fffcc 	andi	r8,r16,65535
 144bbc8:	1806943a 	slli	r3,r3,16
 144bbcc:	1a20b03a 	or	r16,r3,r8
 144bbd0:	8080042e 	bgeu	r16,r2,144bbe4 <__udivdi3+0x40c>
 144bbd4:	8721883a 	add	r16,r16,fp
 144bbd8:	88ffffc4 	addi	r3,r17,-1
 144bbdc:	87007c2e 	bgeu	r16,fp,144bdd0 <__udivdi3+0x5f8>
 144bbe0:	1823883a 	mov	r17,r3
 144bbe4:	a028943a 	slli	r20,r20,16
 144bbe8:	acbfffcc 	andi	r18,r21,65535
 144bbec:	900b883a 	mov	r5,r18
 144bbf0:	8d28b03a 	or	r20,r17,r20
 144bbf4:	a022d43a 	srli	r17,r20,16
 144bbf8:	a5bfffcc 	andi	r22,r20,65535
 144bbfc:	b009883a 	mov	r4,r22
 144bc00:	a82ad43a 	srli	r21,r21,16
 144bc04:	80a1c83a 	sub	r16,r16,r2
 144bc08:	14423f80 	call	14423f8 <__mulsi3>
 144bc0c:	8809883a 	mov	r4,r17
 144bc10:	900b883a 	mov	r5,r18
 144bc14:	1039883a 	mov	fp,r2
 144bc18:	14423f80 	call	14423f8 <__mulsi3>
 144bc1c:	8809883a 	mov	r4,r17
 144bc20:	a80b883a 	mov	r5,r21
 144bc24:	1025883a 	mov	r18,r2
 144bc28:	14423f80 	call	14423f8 <__mulsi3>
 144bc2c:	b009883a 	mov	r4,r22
 144bc30:	a80b883a 	mov	r5,r21
 144bc34:	1023883a 	mov	r17,r2
 144bc38:	14423f80 	call	14423f8 <__mulsi3>
 144bc3c:	e006d43a 	srli	r3,fp,16
 144bc40:	9085883a 	add	r2,r18,r2
 144bc44:	10c7883a 	add	r3,r2,r3
 144bc48:	1c80022e 	bgeu	r3,r18,144bc54 <__udivdi3+0x47c>
 144bc4c:	00800074 	movhi	r2,1
 144bc50:	88a3883a 	add	r17,r17,r2
 144bc54:	1808d43a 	srli	r4,r3,16
 144bc58:	8909883a 	add	r4,r17,r4
 144bc5c:	81004436 	bltu	r16,r4,144bd70 <__udivdi3+0x598>
 144bc60:	81003e26 	beq	r16,r4,144bd5c <__udivdi3+0x584>
 144bc64:	a005883a 	mov	r2,r20
 144bc68:	0007883a 	mov	r3,zero
 144bc6c:	003f8f06 	br	144baac <__alt_data_end+0xfffe62ac>
 144bc70:	91e4983a 	sll	r18,r18,r7
 144bc74:	80eed83a 	srl	r23,r16,r3
 144bc78:	81cc983a 	sll	r6,r16,r7
 144bc7c:	9028d43a 	srli	r20,r18,16
 144bc80:	98c6d83a 	srl	r3,r19,r3
 144bc84:	b809883a 	mov	r4,r23
 144bc88:	a00b883a 	mov	r5,r20
 144bc8c:	30ecb03a 	or	r22,r6,r3
 144bc90:	99e2983a 	sll	r17,r19,r7
 144bc94:	14423f00 	call	14423f0 <__umodsi3>
 144bc98:	b809883a 	mov	r4,r23
 144bc9c:	a00b883a 	mov	r5,r20
 144bca0:	1021883a 	mov	r16,r2
 144bca4:	957fffcc 	andi	r21,r18,65535
 144bca8:	14423e80 	call	14423e8 <__udivsi3>
 144bcac:	a80b883a 	mov	r5,r21
 144bcb0:	1009883a 	mov	r4,r2
 144bcb4:	102f883a 	mov	r23,r2
 144bcb8:	14423f80 	call	14423f8 <__mulsi3>
 144bcbc:	8020943a 	slli	r16,r16,16
 144bcc0:	b00ad43a 	srli	r5,r22,16
 144bcc4:	814cb03a 	or	r6,r16,r5
 144bcc8:	3080062e 	bgeu	r6,r2,144bce4 <__udivdi3+0x50c>
 144bccc:	348d883a 	add	r6,r6,r18
 144bcd0:	b8ffffc4 	addi	r3,r23,-1
 144bcd4:	34804836 	bltu	r6,r18,144bdf8 <__udivdi3+0x620>
 144bcd8:	3080472e 	bgeu	r6,r2,144bdf8 <__udivdi3+0x620>
 144bcdc:	bdffff84 	addi	r23,r23,-2
 144bce0:	348d883a 	add	r6,r6,r18
 144bce4:	30a7c83a 	sub	r19,r6,r2
 144bce8:	9809883a 	mov	r4,r19
 144bcec:	a00b883a 	mov	r5,r20
 144bcf0:	14423f00 	call	14423f0 <__umodsi3>
 144bcf4:	9809883a 	mov	r4,r19
 144bcf8:	a00b883a 	mov	r5,r20
 144bcfc:	1039883a 	mov	fp,r2
 144bd00:	14423e80 	call	14423e8 <__udivsi3>
 144bd04:	1009883a 	mov	r4,r2
 144bd08:	a80b883a 	mov	r5,r21
 144bd0c:	e038943a 	slli	fp,fp,16
 144bd10:	1027883a 	mov	r19,r2
 144bd14:	14423f80 	call	14423f8 <__mulsi3>
 144bd18:	b1bfffcc 	andi	r6,r22,65535
 144bd1c:	e18cb03a 	or	r6,fp,r6
 144bd20:	3080062e 	bgeu	r6,r2,144bd3c <__udivdi3+0x564>
 144bd24:	348d883a 	add	r6,r6,r18
 144bd28:	98ffffc4 	addi	r3,r19,-1
 144bd2c:	34803036 	bltu	r6,r18,144bdf0 <__udivdi3+0x618>
 144bd30:	30802f2e 	bgeu	r6,r2,144bdf0 <__udivdi3+0x618>
 144bd34:	9cffff84 	addi	r19,r19,-2
 144bd38:	348d883a 	add	r6,r6,r18
 144bd3c:	b82e943a 	slli	r23,r23,16
 144bd40:	30a1c83a 	sub	r16,r6,r2
 144bd44:	9dc6b03a 	or	r3,r19,r23
 144bd48:	003f2606 	br	144b9e4 <__alt_data_end+0xfffe61e4>
 144bd4c:	2027883a 	mov	r19,r4
 144bd50:	003f5106 	br	144ba98 <__alt_data_end+0xfffe6298>
 144bd54:	1827883a 	mov	r19,r3
 144bd58:	003ef006 	br	144b91c <__alt_data_end+0xfffe611c>
 144bd5c:	1808943a 	slli	r4,r3,16
 144bd60:	9dc6983a 	sll	r3,r19,r23
 144bd64:	e73fffcc 	andi	fp,fp,65535
 144bd68:	2709883a 	add	r4,r4,fp
 144bd6c:	193fbd2e 	bgeu	r3,r4,144bc64 <__alt_data_end+0xfffe6464>
 144bd70:	a0bfffc4 	addi	r2,r20,-1
 144bd74:	0007883a 	mov	r3,zero
 144bd78:	003f4c06 	br	144baac <__alt_data_end+0xfffe62ac>
 144bd7c:	01400404 	movi	r5,16
 144bd80:	2811883a 	mov	r8,r5
 144bd84:	003ef106 	br	144b94c <__alt_data_end+0xfffe614c>
 144bd88:	000b883a 	mov	r5,zero
 144bd8c:	0011883a 	mov	r8,zero
 144bd90:	003eee06 	br	144b94c <__alt_data_end+0xfffe614c>
 144bd94:	00800404 	movi	r2,16
 144bd98:	1007883a 	mov	r3,r2
 144bd9c:	003ea606 	br	144b838 <__alt_data_end+0xfffe6038>
 144bda0:	00800404 	movi	r2,16
 144bda4:	1007883a 	mov	r3,r2
 144bda8:	003f0106 	br	144b9b0 <__alt_data_end+0xfffe61b0>
 144bdac:	0005883a 	mov	r2,zero
 144bdb0:	0007883a 	mov	r3,zero
 144bdb4:	003efe06 	br	144b9b0 <__alt_data_end+0xfffe61b0>
 144bdb8:	0005883a 	mov	r2,zero
 144bdbc:	0007883a 	mov	r3,zero
 144bdc0:	003e9d06 	br	144b838 <__alt_data_end+0xfffe6038>
 144bdc4:	0007883a 	mov	r3,zero
 144bdc8:	00800044 	movi	r2,1
 144bdcc:	003f3706 	br	144baac <__alt_data_end+0xfffe62ac>
 144bdd0:	80bf832e 	bgeu	r16,r2,144bbe0 <__alt_data_end+0xfffe63e0>
 144bdd4:	8c7fff84 	addi	r17,r17,-2
 144bdd8:	8721883a 	add	r16,r16,fp
 144bddc:	003f8106 	br	144bbe4 <__alt_data_end+0xfffe63e4>
 144bde0:	48bf6a2e 	bgeu	r9,r2,144bb8c <__alt_data_end+0xfffe638c>
 144bde4:	a53fff84 	addi	r20,r20,-2
 144bde8:	4f13883a 	add	r9,r9,fp
 144bdec:	003f6806 	br	144bb90 <__alt_data_end+0xfffe6390>
 144bdf0:	1827883a 	mov	r19,r3
 144bdf4:	003fd106 	br	144bd3c <__alt_data_end+0xfffe653c>
 144bdf8:	182f883a 	mov	r23,r3
 144bdfc:	003fb906 	br	144bce4 <__alt_data_end+0xfffe64e4>
 144be00:	843fff84 	addi	r16,r16,-2
 144be04:	348d883a 	add	r6,r6,r18
 144be08:	003f0c06 	br	144ba3c <__alt_data_end+0xfffe623c>
 144be0c:	843fff84 	addi	r16,r16,-2
 144be10:	1c87883a 	add	r3,r3,r18
 144be14:	003eac06 	br	144b8c8 <__alt_data_end+0xfffe60c8>

0144be18 <__umoddi3>:
 144be18:	defff404 	addi	sp,sp,-48
 144be1c:	dd800815 	stw	r22,32(sp)
 144be20:	dc400315 	stw	r17,12(sp)
 144be24:	dc000215 	stw	r16,8(sp)
 144be28:	dfc00b15 	stw	ra,44(sp)
 144be2c:	df000a15 	stw	fp,40(sp)
 144be30:	ddc00915 	stw	r23,36(sp)
 144be34:	dd400715 	stw	r21,28(sp)
 144be38:	dd000615 	stw	r20,24(sp)
 144be3c:	dcc00515 	stw	r19,20(sp)
 144be40:	dc800415 	stw	r18,16(sp)
 144be44:	2021883a 	mov	r16,r4
 144be48:	2823883a 	mov	r17,r5
 144be4c:	282d883a 	mov	r22,r5
 144be50:	38003c1e 	bne	r7,zero,144bf44 <__umoddi3+0x12c>
 144be54:	3027883a 	mov	r19,r6
 144be58:	2029883a 	mov	r20,r4
 144be5c:	2980522e 	bgeu	r5,r6,144bfa8 <__umoddi3+0x190>
 144be60:	00bfffd4 	movui	r2,65535
 144be64:	1180a436 	bltu	r2,r6,144c0f8 <__umoddi3+0x2e0>
 144be68:	00803fc4 	movi	r2,255
 144be6c:	11815e2e 	bgeu	r2,r6,144c3e8 <__umoddi3+0x5d0>
 144be70:	01400204 	movi	r5,8
 144be74:	2805883a 	mov	r2,r5
 144be78:	314ad83a 	srl	r5,r6,r5
 144be7c:	00c05174 	movhi	r3,325
 144be80:	18c19904 	addi	r3,r3,1636
 144be84:	194b883a 	add	r5,r3,r5
 144be88:	29000003 	ldbu	r4,0(r5)
 144be8c:	2089883a 	add	r4,r4,r2
 144be90:	00800804 	movi	r2,32
 144be94:	1105c83a 	sub	r2,r2,r4
 144be98:	10010c26 	beq	r2,zero,144c2cc <__umoddi3+0x4b4>
 144be9c:	88a2983a 	sll	r17,r17,r2
 144bea0:	8108d83a 	srl	r4,r16,r4
 144bea4:	30a6983a 	sll	r19,r6,r2
 144bea8:	80a8983a 	sll	r20,r16,r2
 144beac:	1025883a 	mov	r18,r2
 144beb0:	892cb03a 	or	r22,r17,r4
 144beb4:	9822d43a 	srli	r17,r19,16
 144beb8:	b009883a 	mov	r4,r22
 144bebc:	9d7fffcc 	andi	r21,r19,65535
 144bec0:	880b883a 	mov	r5,r17
 144bec4:	14423f00 	call	14423f0 <__umodsi3>
 144bec8:	b009883a 	mov	r4,r22
 144becc:	880b883a 	mov	r5,r17
 144bed0:	102f883a 	mov	r23,r2
 144bed4:	14423e80 	call	14423e8 <__udivsi3>
 144bed8:	1009883a 	mov	r4,r2
 144bedc:	a80b883a 	mov	r5,r21
 144bee0:	14423f80 	call	14423f8 <__mulsi3>
 144bee4:	b82e943a 	slli	r23,r23,16
 144bee8:	a008d43a 	srli	r4,r20,16
 144beec:	b906b03a 	or	r3,r23,r4
 144bef0:	1880042e 	bgeu	r3,r2,144bf04 <__umoddi3+0xec>
 144bef4:	1cc7883a 	add	r3,r3,r19
 144bef8:	1cc00236 	bltu	r3,r19,144bf04 <__umoddi3+0xec>
 144befc:	1880012e 	bgeu	r3,r2,144bf04 <__umoddi3+0xec>
 144bf00:	1cc7883a 	add	r3,r3,r19
 144bf04:	18a1c83a 	sub	r16,r3,r2
 144bf08:	8009883a 	mov	r4,r16
 144bf0c:	880b883a 	mov	r5,r17
 144bf10:	14423f00 	call	14423f0 <__umodsi3>
 144bf14:	8009883a 	mov	r4,r16
 144bf18:	880b883a 	mov	r5,r17
 144bf1c:	102d883a 	mov	r22,r2
 144bf20:	14423e80 	call	14423e8 <__udivsi3>
 144bf24:	1009883a 	mov	r4,r2
 144bf28:	a80b883a 	mov	r5,r21
 144bf2c:	b02c943a 	slli	r22,r22,16
 144bf30:	14423f80 	call	14423f8 <__mulsi3>
 144bf34:	a13fffcc 	andi	r4,r20,65535
 144bf38:	b106b03a 	or	r3,r22,r4
 144bf3c:	1880572e 	bgeu	r3,r2,144c09c <__umoddi3+0x284>
 144bf40:	00005206 	br	144c08c <__umoddi3+0x274>
 144bf44:	29c05936 	bltu	r5,r7,144c0ac <__umoddi3+0x294>
 144bf48:	00bfffd4 	movui	r2,65535
 144bf4c:	11c0652e 	bgeu	r2,r7,144c0e4 <__umoddi3+0x2cc>
 144bf50:	00804034 	movhi	r2,256
 144bf54:	10bfffc4 	addi	r2,r2,-1
 144bf58:	11c1172e 	bgeu	r2,r7,144c3b8 <__umoddi3+0x5a0>
 144bf5c:	01400604 	movi	r5,24
 144bf60:	282b883a 	mov	r21,r5
 144bf64:	394ad83a 	srl	r5,r7,r5
 144bf68:	00c05174 	movhi	r3,325
 144bf6c:	18c19904 	addi	r3,r3,1636
 144bf70:	194b883a 	add	r5,r3,r5
 144bf74:	28800003 	ldbu	r2,0(r5)
 144bf78:	00c00804 	movi	r3,32
 144bf7c:	156b883a 	add	r21,r2,r21
 144bf80:	1d69c83a 	sub	r20,r3,r21
 144bf84:	a000671e 	bne	r20,zero,144c124 <__umoddi3+0x30c>
 144bf88:	3c400136 	bltu	r7,r17,144bf90 <__umoddi3+0x178>
 144bf8c:	81812336 	bltu	r16,r6,144c41c <__umoddi3+0x604>
 144bf90:	8185c83a 	sub	r2,r16,r6
 144bf94:	89e3c83a 	sub	r17,r17,r7
 144bf98:	8087803a 	cmpltu	r3,r16,r2
 144bf9c:	88edc83a 	sub	r22,r17,r3
 144bfa0:	b007883a 	mov	r3,r22
 144bfa4:	00004306 	br	144c0b4 <__umoddi3+0x29c>
 144bfa8:	3000041e 	bne	r6,zero,144bfbc <__umoddi3+0x1a4>
 144bfac:	01000044 	movi	r4,1
 144bfb0:	000b883a 	mov	r5,zero
 144bfb4:	14423e80 	call	14423e8 <__udivsi3>
 144bfb8:	1027883a 	mov	r19,r2
 144bfbc:	00bfffd4 	movui	r2,65535
 144bfc0:	14c0532e 	bgeu	r2,r19,144c110 <__umoddi3+0x2f8>
 144bfc4:	00804034 	movhi	r2,256
 144bfc8:	10bfffc4 	addi	r2,r2,-1
 144bfcc:	14c1032e 	bgeu	r2,r19,144c3dc <__umoddi3+0x5c4>
 144bfd0:	00800604 	movi	r2,24
 144bfd4:	1007883a 	mov	r3,r2
 144bfd8:	9884d83a 	srl	r2,r19,r2
 144bfdc:	01005174 	movhi	r4,325
 144bfe0:	21019904 	addi	r4,r4,1636
 144bfe4:	2085883a 	add	r2,r4,r2
 144bfe8:	11000003 	ldbu	r4,0(r2)
 144bfec:	00800804 	movi	r2,32
 144bff0:	20c7883a 	add	r3,r4,r3
 144bff4:	10c5c83a 	sub	r2,r2,r3
 144bff8:	1000b61e 	bne	r2,zero,144c2d4 <__umoddi3+0x4bc>
 144bffc:	982ad43a 	srli	r21,r19,16
 144c000:	8ce3c83a 	sub	r17,r17,r19
 144c004:	9dbfffcc 	andi	r22,r19,65535
 144c008:	0025883a 	mov	r18,zero
 144c00c:	8809883a 	mov	r4,r17
 144c010:	a80b883a 	mov	r5,r21
 144c014:	14423f00 	call	14423f0 <__umodsi3>
 144c018:	8809883a 	mov	r4,r17
 144c01c:	a80b883a 	mov	r5,r21
 144c020:	102f883a 	mov	r23,r2
 144c024:	14423e80 	call	14423e8 <__udivsi3>
 144c028:	1009883a 	mov	r4,r2
 144c02c:	b00b883a 	mov	r5,r22
 144c030:	14423f80 	call	14423f8 <__mulsi3>
 144c034:	b82e943a 	slli	r23,r23,16
 144c038:	a008d43a 	srli	r4,r20,16
 144c03c:	b906b03a 	or	r3,r23,r4
 144c040:	1880032e 	bgeu	r3,r2,144c050 <__umoddi3+0x238>
 144c044:	1cc7883a 	add	r3,r3,r19
 144c048:	1cc00136 	bltu	r3,r19,144c050 <__umoddi3+0x238>
 144c04c:	1880f136 	bltu	r3,r2,144c414 <__umoddi3+0x5fc>
 144c050:	18a1c83a 	sub	r16,r3,r2
 144c054:	8009883a 	mov	r4,r16
 144c058:	a80b883a 	mov	r5,r21
 144c05c:	14423f00 	call	14423f0 <__umodsi3>
 144c060:	8009883a 	mov	r4,r16
 144c064:	a80b883a 	mov	r5,r21
 144c068:	1023883a 	mov	r17,r2
 144c06c:	14423e80 	call	14423e8 <__udivsi3>
 144c070:	1009883a 	mov	r4,r2
 144c074:	b00b883a 	mov	r5,r22
 144c078:	8822943a 	slli	r17,r17,16
 144c07c:	14423f80 	call	14423f8 <__mulsi3>
 144c080:	a13fffcc 	andi	r4,r20,65535
 144c084:	8906b03a 	or	r3,r17,r4
 144c088:	1880042e 	bgeu	r3,r2,144c09c <__umoddi3+0x284>
 144c08c:	1cc7883a 	add	r3,r3,r19
 144c090:	1cc00236 	bltu	r3,r19,144c09c <__umoddi3+0x284>
 144c094:	1880012e 	bgeu	r3,r2,144c09c <__umoddi3+0x284>
 144c098:	1cc7883a 	add	r3,r3,r19
 144c09c:	1887c83a 	sub	r3,r3,r2
 144c0a0:	1c84d83a 	srl	r2,r3,r18
 144c0a4:	0007883a 	mov	r3,zero
 144c0a8:	00000206 	br	144c0b4 <__umoddi3+0x29c>
 144c0ac:	2005883a 	mov	r2,r4
 144c0b0:	2807883a 	mov	r3,r5
 144c0b4:	dfc00b17 	ldw	ra,44(sp)
 144c0b8:	df000a17 	ldw	fp,40(sp)
 144c0bc:	ddc00917 	ldw	r23,36(sp)
 144c0c0:	dd800817 	ldw	r22,32(sp)
 144c0c4:	dd400717 	ldw	r21,28(sp)
 144c0c8:	dd000617 	ldw	r20,24(sp)
 144c0cc:	dcc00517 	ldw	r19,20(sp)
 144c0d0:	dc800417 	ldw	r18,16(sp)
 144c0d4:	dc400317 	ldw	r17,12(sp)
 144c0d8:	dc000217 	ldw	r16,8(sp)
 144c0dc:	dec00c04 	addi	sp,sp,48
 144c0e0:	f800283a 	ret
 144c0e4:	00803fc4 	movi	r2,255
 144c0e8:	11c0b02e 	bgeu	r2,r7,144c3ac <__umoddi3+0x594>
 144c0ec:	01400204 	movi	r5,8
 144c0f0:	282b883a 	mov	r21,r5
 144c0f4:	003f9b06 	br	144bf64 <__alt_data_end+0xfffe6764>
 144c0f8:	00804034 	movhi	r2,256
 144c0fc:	10bfffc4 	addi	r2,r2,-1
 144c100:	1180b02e 	bgeu	r2,r6,144c3c4 <__umoddi3+0x5ac>
 144c104:	01400604 	movi	r5,24
 144c108:	2805883a 	mov	r2,r5
 144c10c:	003f5a06 	br	144be78 <__alt_data_end+0xfffe6678>
 144c110:	00803fc4 	movi	r2,255
 144c114:	14c0ae2e 	bgeu	r2,r19,144c3d0 <__umoddi3+0x5b8>
 144c118:	00800204 	movi	r2,8
 144c11c:	1007883a 	mov	r3,r2
 144c120:	003fad06 	br	144bfd8 <__alt_data_end+0xfffe67d8>
 144c124:	3d0a983a 	sll	r5,r7,r20
 144c128:	356cd83a 	srl	r22,r6,r21
 144c12c:	8d78d83a 	srl	fp,r17,r21
 144c130:	8d10983a 	sll	r8,r17,r20
 144c134:	2dacb03a 	or	r22,r5,r22
 144c138:	b02ed43a 	srli	r23,r22,16
 144c13c:	8564d83a 	srl	r18,r16,r21
 144c140:	e009883a 	mov	r4,fp
 144c144:	b80b883a 	mov	r5,r23
 144c148:	44a4b03a 	or	r18,r8,r18
 144c14c:	3526983a 	sll	r19,r6,r20
 144c150:	14423f00 	call	14423f0 <__umodsi3>
 144c154:	e009883a 	mov	r4,fp
 144c158:	b80b883a 	mov	r5,r23
 144c15c:	b47fffcc 	andi	r17,r22,65535
 144c160:	d8800015 	stw	r2,0(sp)
 144c164:	14423e80 	call	14423e8 <__udivsi3>
 144c168:	1009883a 	mov	r4,r2
 144c16c:	880b883a 	mov	r5,r17
 144c170:	1039883a 	mov	fp,r2
 144c174:	14423f80 	call	14423f8 <__mulsi3>
 144c178:	d9800017 	ldw	r6,0(sp)
 144c17c:	9008d43a 	srli	r4,r18,16
 144c180:	8520983a 	sll	r16,r16,r20
 144c184:	300c943a 	slli	r6,r6,16
 144c188:	3106b03a 	or	r3,r6,r4
 144c18c:	1880042e 	bgeu	r3,r2,144c1a0 <__umoddi3+0x388>
 144c190:	1d87883a 	add	r3,r3,r22
 144c194:	e13fffc4 	addi	r4,fp,-1
 144c198:	1d809a2e 	bgeu	r3,r22,144c404 <__umoddi3+0x5ec>
 144c19c:	2039883a 	mov	fp,r4
 144c1a0:	1887c83a 	sub	r3,r3,r2
 144c1a4:	1809883a 	mov	r4,r3
 144c1a8:	b80b883a 	mov	r5,r23
 144c1ac:	d8c00115 	stw	r3,4(sp)
 144c1b0:	14423f00 	call	14423f0 <__umodsi3>
 144c1b4:	d8c00117 	ldw	r3,4(sp)
 144c1b8:	b80b883a 	mov	r5,r23
 144c1bc:	d8800015 	stw	r2,0(sp)
 144c1c0:	1809883a 	mov	r4,r3
 144c1c4:	14423e80 	call	14423e8 <__udivsi3>
 144c1c8:	880b883a 	mov	r5,r17
 144c1cc:	1009883a 	mov	r4,r2
 144c1d0:	102f883a 	mov	r23,r2
 144c1d4:	14423f80 	call	14423f8 <__mulsi3>
 144c1d8:	d9800017 	ldw	r6,0(sp)
 144c1dc:	947fffcc 	andi	r17,r18,65535
 144c1e0:	300c943a 	slli	r6,r6,16
 144c1e4:	3464b03a 	or	r18,r6,r17
 144c1e8:	9080042e 	bgeu	r18,r2,144c1fc <__umoddi3+0x3e4>
 144c1ec:	95a5883a 	add	r18,r18,r22
 144c1f0:	b8ffffc4 	addi	r3,r23,-1
 144c1f4:	95807f2e 	bgeu	r18,r22,144c3f4 <__umoddi3+0x5dc>
 144c1f8:	182f883a 	mov	r23,r3
 144c1fc:	e038943a 	slli	fp,fp,16
 144c200:	980cd43a 	srli	r6,r19,16
 144c204:	98ffffcc 	andi	r3,r19,65535
 144c208:	bf38b03a 	or	fp,r23,fp
 144c20c:	e02ed43a 	srli	r23,fp,16
 144c210:	e73fffcc 	andi	fp,fp,65535
 144c214:	180b883a 	mov	r5,r3
 144c218:	e009883a 	mov	r4,fp
 144c21c:	d9800015 	stw	r6,0(sp)
 144c220:	d8c00115 	stw	r3,4(sp)
 144c224:	90a5c83a 	sub	r18,r18,r2
 144c228:	14423f80 	call	14423f8 <__mulsi3>
 144c22c:	d8c00117 	ldw	r3,4(sp)
 144c230:	b809883a 	mov	r4,r23
 144c234:	1023883a 	mov	r17,r2
 144c238:	180b883a 	mov	r5,r3
 144c23c:	14423f80 	call	14423f8 <__mulsi3>
 144c240:	d9800017 	ldw	r6,0(sp)
 144c244:	b809883a 	mov	r4,r23
 144c248:	d8800115 	stw	r2,4(sp)
 144c24c:	300b883a 	mov	r5,r6
 144c250:	302f883a 	mov	r23,r6
 144c254:	14423f80 	call	14423f8 <__mulsi3>
 144c258:	e009883a 	mov	r4,fp
 144c25c:	b80b883a 	mov	r5,r23
 144c260:	d8800015 	stw	r2,0(sp)
 144c264:	14423f80 	call	14423f8 <__mulsi3>
 144c268:	d8c00117 	ldw	r3,4(sp)
 144c26c:	880cd43a 	srli	r6,r17,16
 144c270:	d9c00017 	ldw	r7,0(sp)
 144c274:	1885883a 	add	r2,r3,r2
 144c278:	118d883a 	add	r6,r2,r6
 144c27c:	30c0022e 	bgeu	r6,r3,144c288 <__umoddi3+0x470>
 144c280:	00800074 	movhi	r2,1
 144c284:	388f883a 	add	r7,r7,r2
 144c288:	3006d43a 	srli	r3,r6,16
 144c28c:	300c943a 	slli	r6,r6,16
 144c290:	8c7fffcc 	andi	r17,r17,65535
 144c294:	38c7883a 	add	r3,r7,r3
 144c298:	3463883a 	add	r17,r6,r17
 144c29c:	90c03d36 	bltu	r18,r3,144c394 <__umoddi3+0x57c>
 144c2a0:	90c06026 	beq	r18,r3,144c424 <__umoddi3+0x60c>
 144c2a4:	90c9c83a 	sub	r4,r18,r3
 144c2a8:	880f883a 	mov	r7,r17
 144c2ac:	81cfc83a 	sub	r7,r16,r7
 144c2b0:	81c7803a 	cmpltu	r3,r16,r7
 144c2b4:	20c7c83a 	sub	r3,r4,r3
 144c2b8:	1d44983a 	sll	r2,r3,r21
 144c2bc:	3d0ed83a 	srl	r7,r7,r20
 144c2c0:	1d06d83a 	srl	r3,r3,r20
 144c2c4:	11c4b03a 	or	r2,r2,r7
 144c2c8:	003f7a06 	br	144c0b4 <__alt_data_end+0xfffe68b4>
 144c2cc:	0025883a 	mov	r18,zero
 144c2d0:	003ef806 	br	144beb4 <__alt_data_end+0xfffe66b4>
 144c2d4:	98a6983a 	sll	r19,r19,r2
 144c2d8:	88e8d83a 	srl	r20,r17,r3
 144c2dc:	80c6d83a 	srl	r3,r16,r3
 144c2e0:	982ad43a 	srli	r21,r19,16
 144c2e4:	88a2983a 	sll	r17,r17,r2
 144c2e8:	a009883a 	mov	r4,r20
 144c2ec:	a80b883a 	mov	r5,r21
 144c2f0:	88eeb03a 	or	r23,r17,r3
 144c2f4:	1025883a 	mov	r18,r2
 144c2f8:	14423f00 	call	14423f0 <__umodsi3>
 144c2fc:	a009883a 	mov	r4,r20
 144c300:	a80b883a 	mov	r5,r21
 144c304:	1023883a 	mov	r17,r2
 144c308:	9dbfffcc 	andi	r22,r19,65535
 144c30c:	14423e80 	call	14423e8 <__udivsi3>
 144c310:	1009883a 	mov	r4,r2
 144c314:	b00b883a 	mov	r5,r22
 144c318:	14423f80 	call	14423f8 <__mulsi3>
 144c31c:	8822943a 	slli	r17,r17,16
 144c320:	b808d43a 	srli	r4,r23,16
 144c324:	84a8983a 	sll	r20,r16,r18
 144c328:	8906b03a 	or	r3,r17,r4
 144c32c:	1880042e 	bgeu	r3,r2,144c340 <__umoddi3+0x528>
 144c330:	1cc7883a 	add	r3,r3,r19
 144c334:	1cc00236 	bltu	r3,r19,144c340 <__umoddi3+0x528>
 144c338:	1880012e 	bgeu	r3,r2,144c340 <__umoddi3+0x528>
 144c33c:	1cc7883a 	add	r3,r3,r19
 144c340:	18a1c83a 	sub	r16,r3,r2
 144c344:	8009883a 	mov	r4,r16
 144c348:	a80b883a 	mov	r5,r21
 144c34c:	14423f00 	call	14423f0 <__umodsi3>
 144c350:	8009883a 	mov	r4,r16
 144c354:	a80b883a 	mov	r5,r21
 144c358:	1039883a 	mov	fp,r2
 144c35c:	14423e80 	call	14423e8 <__udivsi3>
 144c360:	1009883a 	mov	r4,r2
 144c364:	b00b883a 	mov	r5,r22
 144c368:	14423f80 	call	14423f8 <__mulsi3>
 144c36c:	e006943a 	slli	r3,fp,16
 144c370:	b93fffcc 	andi	r4,r23,65535
 144c374:	1906b03a 	or	r3,r3,r4
 144c378:	1880042e 	bgeu	r3,r2,144c38c <__umoddi3+0x574>
 144c37c:	1cc7883a 	add	r3,r3,r19
 144c380:	1cc00236 	bltu	r3,r19,144c38c <__umoddi3+0x574>
 144c384:	1880012e 	bgeu	r3,r2,144c38c <__umoddi3+0x574>
 144c388:	1cc7883a 	add	r3,r3,r19
 144c38c:	18a3c83a 	sub	r17,r3,r2
 144c390:	003f1e06 	br	144c00c <__alt_data_end+0xfffe680c>
 144c394:	8ccfc83a 	sub	r7,r17,r19
 144c398:	1d89c83a 	sub	r4,r3,r22
 144c39c:	89e3803a 	cmpltu	r17,r17,r7
 144c3a0:	2463c83a 	sub	r17,r4,r17
 144c3a4:	9449c83a 	sub	r4,r18,r17
 144c3a8:	003fc006 	br	144c2ac <__alt_data_end+0xfffe6aac>
 144c3ac:	000b883a 	mov	r5,zero
 144c3b0:	002b883a 	mov	r21,zero
 144c3b4:	003eeb06 	br	144bf64 <__alt_data_end+0xfffe6764>
 144c3b8:	01400404 	movi	r5,16
 144c3bc:	282b883a 	mov	r21,r5
 144c3c0:	003ee806 	br	144bf64 <__alt_data_end+0xfffe6764>
 144c3c4:	01400404 	movi	r5,16
 144c3c8:	2805883a 	mov	r2,r5
 144c3cc:	003eaa06 	br	144be78 <__alt_data_end+0xfffe6678>
 144c3d0:	0005883a 	mov	r2,zero
 144c3d4:	0007883a 	mov	r3,zero
 144c3d8:	003eff06 	br	144bfd8 <__alt_data_end+0xfffe67d8>
 144c3dc:	00800404 	movi	r2,16
 144c3e0:	1007883a 	mov	r3,r2
 144c3e4:	003efc06 	br	144bfd8 <__alt_data_end+0xfffe67d8>
 144c3e8:	000b883a 	mov	r5,zero
 144c3ec:	0005883a 	mov	r2,zero
 144c3f0:	003ea106 	br	144be78 <__alt_data_end+0xfffe6678>
 144c3f4:	90bf802e 	bgeu	r18,r2,144c1f8 <__alt_data_end+0xfffe69f8>
 144c3f8:	bdffff84 	addi	r23,r23,-2
 144c3fc:	95a5883a 	add	r18,r18,r22
 144c400:	003f7e06 	br	144c1fc <__alt_data_end+0xfffe69fc>
 144c404:	18bf652e 	bgeu	r3,r2,144c19c <__alt_data_end+0xfffe699c>
 144c408:	e73fff84 	addi	fp,fp,-2
 144c40c:	1d87883a 	add	r3,r3,r22
 144c410:	003f6306 	br	144c1a0 <__alt_data_end+0xfffe69a0>
 144c414:	1cc7883a 	add	r3,r3,r19
 144c418:	003f0d06 	br	144c050 <__alt_data_end+0xfffe6850>
 144c41c:	8005883a 	mov	r2,r16
 144c420:	003edf06 	br	144bfa0 <__alt_data_end+0xfffe67a0>
 144c424:	847fdb36 	bltu	r16,r17,144c394 <__alt_data_end+0xfffe6b94>
 144c428:	880f883a 	mov	r7,r17
 144c42c:	0009883a 	mov	r4,zero
 144c430:	003f9e06 	br	144c2ac <__alt_data_end+0xfffe6aac>

0144c434 <__adddf3>:
 144c434:	02000434 	movhi	r8,16
 144c438:	423fffc4 	addi	r8,r8,-1
 144c43c:	defffb04 	addi	sp,sp,-20
 144c440:	2a12703a 	and	r9,r5,r8
 144c444:	2806d7fa 	srli	r3,r5,31
 144c448:	3a10703a 	and	r8,r7,r8
 144c44c:	3804d53a 	srli	r2,r7,20
 144c450:	3014d77a 	srli	r10,r6,29
 144c454:	dc000015 	stw	r16,0(sp)
 144c458:	481290fa 	slli	r9,r9,3
 144c45c:	2820d53a 	srli	r16,r5,20
 144c460:	401090fa 	slli	r8,r8,3
 144c464:	200ad77a 	srli	r5,r4,29
 144c468:	380ed7fa 	srli	r7,r7,31
 144c46c:	dc800215 	stw	r18,8(sp)
 144c470:	dc400115 	stw	r17,4(sp)
 144c474:	dfc00415 	stw	ra,16(sp)
 144c478:	dcc00315 	stw	r19,12(sp)
 144c47c:	1c803fcc 	andi	r18,r3,255
 144c480:	8401ffcc 	andi	r16,r16,2047
 144c484:	494ab03a 	or	r5,r9,r5
 144c488:	202290fa 	slli	r17,r4,3
 144c48c:	1081ffcc 	andi	r2,r2,2047
 144c490:	4290b03a 	or	r8,r8,r10
 144c494:	300c90fa 	slli	r6,r6,3
 144c498:	91c07026 	beq	r18,r7,144c65c <__adddf3+0x228>
 144c49c:	8087c83a 	sub	r3,r16,r2
 144c4a0:	00c0b30e 	bge	zero,r3,144c770 <__adddf3+0x33c>
 144c4a4:	10002a1e 	bne	r2,zero,144c550 <__adddf3+0x11c>
 144c4a8:	4184b03a 	or	r2,r8,r6
 144c4ac:	1000991e 	bne	r2,zero,144c714 <__adddf3+0x2e0>
 144c4b0:	888001cc 	andi	r2,r17,7
 144c4b4:	10005b26 	beq	r2,zero,144c624 <__adddf3+0x1f0>
 144c4b8:	88c003cc 	andi	r3,r17,15
 144c4bc:	00800104 	movi	r2,4
 144c4c0:	18805826 	beq	r3,r2,144c624 <__adddf3+0x1f0>
 144c4c4:	89800104 	addi	r6,r17,4
 144c4c8:	3463803a 	cmpltu	r17,r6,r17
 144c4cc:	2c4b883a 	add	r5,r5,r17
 144c4d0:	2880202c 	andhi	r2,r5,128
 144c4d4:	9007883a 	mov	r3,r18
 144c4d8:	3023883a 	mov	r17,r6
 144c4dc:	10005426 	beq	r2,zero,144c630 <__adddf3+0x1fc>
 144c4e0:	84000044 	addi	r16,r16,1
 144c4e4:	0081ffc4 	movi	r2,2047
 144c4e8:	8080c126 	beq	r16,r2,144c7f0 <__adddf3+0x3bc>
 144c4ec:	013fe034 	movhi	r4,65408
 144c4f0:	213fffc4 	addi	r4,r4,-1
 144c4f4:	290a703a 	and	r5,r5,r4
 144c4f8:	2804977a 	slli	r2,r5,29
 144c4fc:	280a927a 	slli	r5,r5,9
 144c500:	8822d0fa 	srli	r17,r17,3
 144c504:	8401ffcc 	andi	r16,r16,2047
 144c508:	2808d33a 	srli	r4,r5,12
 144c50c:	1444b03a 	or	r2,r2,r17
 144c510:	8401ffcc 	andi	r16,r16,2047
 144c514:	800a953a 	slli	r5,r16,20
 144c518:	18c03fcc 	andi	r3,r3,255
 144c51c:	04000434 	movhi	r16,16
 144c520:	180697fa 	slli	r3,r3,31
 144c524:	843fffc4 	addi	r16,r16,-1
 144c528:	2420703a 	and	r16,r4,r16
 144c52c:	8160b03a 	or	r16,r16,r5
 144c530:	80c6b03a 	or	r3,r16,r3
 144c534:	dfc00417 	ldw	ra,16(sp)
 144c538:	dcc00317 	ldw	r19,12(sp)
 144c53c:	dc800217 	ldw	r18,8(sp)
 144c540:	dc400117 	ldw	r17,4(sp)
 144c544:	dc000017 	ldw	r16,0(sp)
 144c548:	dec00504 	addi	sp,sp,20
 144c54c:	f800283a 	ret
 144c550:	0081ffc4 	movi	r2,2047
 144c554:	80bfd626 	beq	r16,r2,144c4b0 <__alt_data_end+0xfffe6cb0>
 144c558:	42002034 	orhi	r8,r8,128
 144c55c:	00800e04 	movi	r2,56
 144c560:	10c0a616 	blt	r2,r3,144c7fc <__adddf3+0x3c8>
 144c564:	008007c4 	movi	r2,31
 144c568:	10c0c916 	blt	r2,r3,144c890 <__adddf3+0x45c>
 144c56c:	00800804 	movi	r2,32
 144c570:	10c5c83a 	sub	r2,r2,r3
 144c574:	408e983a 	sll	r7,r8,r2
 144c578:	30c8d83a 	srl	r4,r6,r3
 144c57c:	3084983a 	sll	r2,r6,r2
 144c580:	40c6d83a 	srl	r3,r8,r3
 144c584:	390cb03a 	or	r6,r7,r4
 144c588:	1004c03a 	cmpne	r2,r2,zero
 144c58c:	308cb03a 	or	r6,r6,r2
 144c590:	898dc83a 	sub	r6,r17,r6
 144c594:	89a3803a 	cmpltu	r17,r17,r6
 144c598:	28cbc83a 	sub	r5,r5,r3
 144c59c:	2c4bc83a 	sub	r5,r5,r17
 144c5a0:	3023883a 	mov	r17,r6
 144c5a4:	2880202c 	andhi	r2,r5,128
 144c5a8:	10006d26 	beq	r2,zero,144c760 <__adddf3+0x32c>
 144c5ac:	04c02034 	movhi	r19,128
 144c5b0:	9cffffc4 	addi	r19,r19,-1
 144c5b4:	2ce6703a 	and	r19,r5,r19
 144c5b8:	98007e26 	beq	r19,zero,144c7b4 <__adddf3+0x380>
 144c5bc:	9809883a 	mov	r4,r19
 144c5c0:	14422680 	call	1442268 <__clzsi2>
 144c5c4:	10fffe04 	addi	r3,r2,-8
 144c5c8:	010007c4 	movi	r4,31
 144c5cc:	20c07f16 	blt	r4,r3,144c7cc <__adddf3+0x398>
 144c5d0:	01400a04 	movi	r5,40
 144c5d4:	2885c83a 	sub	r2,r5,r2
 144c5d8:	888ad83a 	srl	r5,r17,r2
 144c5dc:	98e6983a 	sll	r19,r19,r3
 144c5e0:	88e2983a 	sll	r17,r17,r3
 144c5e4:	2ce6b03a 	or	r19,r5,r19
 144c5e8:	1c007c16 	blt	r3,r16,144c7dc <__adddf3+0x3a8>
 144c5ec:	1c21c83a 	sub	r16,r3,r16
 144c5f0:	81400044 	addi	r5,r16,1
 144c5f4:	00c007c4 	movi	r3,31
 144c5f8:	19409816 	blt	r3,r5,144c85c <__adddf3+0x428>
 144c5fc:	1c21c83a 	sub	r16,r3,r16
 144c600:	8c08983a 	sll	r4,r17,r16
 144c604:	8946d83a 	srl	r3,r17,r5
 144c608:	9c20983a 	sll	r16,r19,r16
 144c60c:	2008c03a 	cmpne	r4,r4,zero
 144c610:	994ad83a 	srl	r5,r19,r5
 144c614:	1c06b03a 	or	r3,r3,r16
 144c618:	1922b03a 	or	r17,r3,r4
 144c61c:	0021883a 	mov	r16,zero
 144c620:	003fa306 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c624:	2880202c 	andhi	r2,r5,128
 144c628:	9007883a 	mov	r3,r18
 144c62c:	103fac1e 	bne	r2,zero,144c4e0 <__alt_data_end+0xfffe6ce0>
 144c630:	2804977a 	slli	r2,r5,29
 144c634:	8822d0fa 	srli	r17,r17,3
 144c638:	0101ffc4 	movi	r4,2047
 144c63c:	280ad0fa 	srli	r5,r5,3
 144c640:	1444b03a 	or	r2,r2,r17
 144c644:	81002c26 	beq	r16,r4,144c6f8 <__adddf3+0x2c4>
 144c648:	8120703a 	and	r16,r16,r4
 144c64c:	01000434 	movhi	r4,16
 144c650:	213fffc4 	addi	r4,r4,-1
 144c654:	2908703a 	and	r4,r5,r4
 144c658:	003fad06 	br	144c510 <__alt_data_end+0xfffe6d10>
 144c65c:	8089c83a 	sub	r4,r16,r2
 144c660:	01006a0e 	bge	zero,r4,144c80c <__adddf3+0x3d8>
 144c664:	10003326 	beq	r2,zero,144c734 <__adddf3+0x300>
 144c668:	0081ffc4 	movi	r2,2047
 144c66c:	80bf9026 	beq	r16,r2,144c4b0 <__alt_data_end+0xfffe6cb0>
 144c670:	42002034 	orhi	r8,r8,128
 144c674:	00800e04 	movi	r2,56
 144c678:	1100b116 	blt	r2,r4,144c940 <__adddf3+0x50c>
 144c67c:	008007c4 	movi	r2,31
 144c680:	1100e216 	blt	r2,r4,144ca0c <__adddf3+0x5d8>
 144c684:	00800804 	movi	r2,32
 144c688:	1105c83a 	sub	r2,r2,r4
 144c68c:	4092983a 	sll	r9,r8,r2
 144c690:	310ed83a 	srl	r7,r6,r4
 144c694:	3084983a 	sll	r2,r6,r2
 144c698:	4110d83a 	srl	r8,r8,r4
 144c69c:	49ccb03a 	or	r6,r9,r7
 144c6a0:	1004c03a 	cmpne	r2,r2,zero
 144c6a4:	308cb03a 	or	r6,r6,r2
 144c6a8:	344d883a 	add	r6,r6,r17
 144c6ac:	3463803a 	cmpltu	r17,r6,r17
 144c6b0:	414b883a 	add	r5,r8,r5
 144c6b4:	2c4b883a 	add	r5,r5,r17
 144c6b8:	3023883a 	mov	r17,r6
 144c6bc:	2880202c 	andhi	r2,r5,128
 144c6c0:	10002726 	beq	r2,zero,144c760 <__adddf3+0x32c>
 144c6c4:	84000044 	addi	r16,r16,1
 144c6c8:	0081ffc4 	movi	r2,2047
 144c6cc:	8080ae26 	beq	r16,r2,144c988 <__adddf3+0x554>
 144c6d0:	00bfe034 	movhi	r2,65408
 144c6d4:	10bfffc4 	addi	r2,r2,-1
 144c6d8:	288a703a 	and	r5,r5,r2
 144c6dc:	880cd07a 	srli	r6,r17,1
 144c6e0:	280897fa 	slli	r4,r5,31
 144c6e4:	88c0004c 	andi	r3,r17,1
 144c6e8:	30e2b03a 	or	r17,r6,r3
 144c6ec:	280ad07a 	srli	r5,r5,1
 144c6f0:	8922b03a 	or	r17,r17,r4
 144c6f4:	003f6e06 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c6f8:	1148b03a 	or	r4,r2,r5
 144c6fc:	20003c26 	beq	r4,zero,144c7f0 <__adddf3+0x3bc>
 144c700:	29000234 	orhi	r4,r5,8
 144c704:	01400434 	movhi	r5,16
 144c708:	297fffc4 	addi	r5,r5,-1
 144c70c:	2148703a 	and	r4,r4,r5
 144c710:	003f7f06 	br	144c510 <__alt_data_end+0xfffe6d10>
 144c714:	18ffffc4 	addi	r3,r3,-1
 144c718:	18004d1e 	bne	r3,zero,144c850 <__adddf3+0x41c>
 144c71c:	898dc83a 	sub	r6,r17,r6
 144c720:	89a3803a 	cmpltu	r17,r17,r6
 144c724:	2a0bc83a 	sub	r5,r5,r8
 144c728:	2c4bc83a 	sub	r5,r5,r17
 144c72c:	3023883a 	mov	r17,r6
 144c730:	003f9c06 	br	144c5a4 <__alt_data_end+0xfffe6da4>
 144c734:	4184b03a 	or	r2,r8,r6
 144c738:	103f5d26 	beq	r2,zero,144c4b0 <__alt_data_end+0xfffe6cb0>
 144c73c:	213fffc4 	addi	r4,r4,-1
 144c740:	203fd926 	beq	r4,zero,144c6a8 <__alt_data_end+0xfffe6ea8>
 144c744:	0081ffc4 	movi	r2,2047
 144c748:	80bfca1e 	bne	r16,r2,144c674 <__alt_data_end+0xfffe6e74>
 144c74c:	003f5806 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c750:	10c8b03a 	or	r4,r2,r3
 144c754:	20008b26 	beq	r4,zero,144c984 <__adddf3+0x550>
 144c758:	100b883a 	mov	r5,r2
 144c75c:	1823883a 	mov	r17,r3
 144c760:	888001cc 	andi	r2,r17,7
 144c764:	103f541e 	bne	r2,zero,144c4b8 <__alt_data_end+0xfffe6cb8>
 144c768:	9007883a 	mov	r3,r18
 144c76c:	003fb006 	br	144c630 <__alt_data_end+0xfffe6e30>
 144c770:	1800531e 	bne	r3,zero,144c8c0 <__adddf3+0x48c>
 144c774:	80800044 	addi	r2,r16,1
 144c778:	1081ffcc 	andi	r2,r2,2047
 144c77c:	00c00044 	movi	r3,1
 144c780:	1880990e 	bge	r3,r2,144c9e8 <__adddf3+0x5b4>
 144c784:	8985c83a 	sub	r2,r17,r6
 144c788:	8887803a 	cmpltu	r3,r17,r2
 144c78c:	2a27c83a 	sub	r19,r5,r8
 144c790:	98e7c83a 	sub	r19,r19,r3
 144c794:	98c0202c 	andhi	r3,r19,128
 144c798:	18006226 	beq	r3,zero,144c924 <__adddf3+0x4f0>
 144c79c:	3463c83a 	sub	r17,r6,r17
 144c7a0:	4151c83a 	sub	r8,r8,r5
 144c7a4:	344d803a 	cmpltu	r6,r6,r17
 144c7a8:	41a7c83a 	sub	r19,r8,r6
 144c7ac:	3825883a 	mov	r18,r7
 144c7b0:	983f821e 	bne	r19,zero,144c5bc <__alt_data_end+0xfffe6dbc>
 144c7b4:	8809883a 	mov	r4,r17
 144c7b8:	14422680 	call	1442268 <__clzsi2>
 144c7bc:	10800804 	addi	r2,r2,32
 144c7c0:	10fffe04 	addi	r3,r2,-8
 144c7c4:	010007c4 	movi	r4,31
 144c7c8:	20ff810e 	bge	r4,r3,144c5d0 <__alt_data_end+0xfffe6dd0>
 144c7cc:	14fff604 	addi	r19,r2,-40
 144c7d0:	8ce6983a 	sll	r19,r17,r19
 144c7d4:	0023883a 	mov	r17,zero
 144c7d8:	1c3f840e 	bge	r3,r16,144c5ec <__alt_data_end+0xfffe6dec>
 144c7dc:	017fe034 	movhi	r5,65408
 144c7e0:	297fffc4 	addi	r5,r5,-1
 144c7e4:	80e1c83a 	sub	r16,r16,r3
 144c7e8:	994a703a 	and	r5,r19,r5
 144c7ec:	003f3006 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c7f0:	0009883a 	mov	r4,zero
 144c7f4:	0005883a 	mov	r2,zero
 144c7f8:	003f4506 	br	144c510 <__alt_data_end+0xfffe6d10>
 144c7fc:	418cb03a 	or	r6,r8,r6
 144c800:	300cc03a 	cmpne	r6,r6,zero
 144c804:	0007883a 	mov	r3,zero
 144c808:	003f6106 	br	144c590 <__alt_data_end+0xfffe6d90>
 144c80c:	2000921e 	bne	r4,zero,144ca58 <__adddf3+0x624>
 144c810:	80800044 	addi	r2,r16,1
 144c814:	11c1ffcc 	andi	r7,r2,2047
 144c818:	01000044 	movi	r4,1
 144c81c:	21c0610e 	bge	r4,r7,144c9a4 <__adddf3+0x570>
 144c820:	0101ffc4 	movi	r4,2047
 144c824:	1100a326 	beq	r2,r4,144cab4 <__adddf3+0x680>
 144c828:	344d883a 	add	r6,r6,r17
 144c82c:	3463803a 	cmpltu	r17,r6,r17
 144c830:	414b883a 	add	r5,r8,r5
 144c834:	2c4b883a 	add	r5,r5,r17
 144c838:	282297fa 	slli	r17,r5,31
 144c83c:	300cd07a 	srli	r6,r6,1
 144c840:	280ad07a 	srli	r5,r5,1
 144c844:	1021883a 	mov	r16,r2
 144c848:	89a2b03a 	or	r17,r17,r6
 144c84c:	003f1806 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c850:	0081ffc4 	movi	r2,2047
 144c854:	80bf411e 	bne	r16,r2,144c55c <__alt_data_end+0xfffe6d5c>
 144c858:	003f1506 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c85c:	80bff844 	addi	r2,r16,-31
 144c860:	00c00804 	movi	r3,32
 144c864:	9884d83a 	srl	r2,r19,r2
 144c868:	28c04a26 	beq	r5,r3,144c994 <__adddf3+0x560>
 144c86c:	00c00fc4 	movi	r3,63
 144c870:	1c21c83a 	sub	r16,r3,r16
 144c874:	9c26983a 	sll	r19,r19,r16
 144c878:	9c62b03a 	or	r17,r19,r17
 144c87c:	8822c03a 	cmpne	r17,r17,zero
 144c880:	88a2b03a 	or	r17,r17,r2
 144c884:	000b883a 	mov	r5,zero
 144c888:	0021883a 	mov	r16,zero
 144c88c:	003fb406 	br	144c760 <__alt_data_end+0xfffe6f60>
 144c890:	18bff804 	addi	r2,r3,-32
 144c894:	01000804 	movi	r4,32
 144c898:	4084d83a 	srl	r2,r8,r2
 144c89c:	19003f26 	beq	r3,r4,144c99c <__adddf3+0x568>
 144c8a0:	01001004 	movi	r4,64
 144c8a4:	20c7c83a 	sub	r3,r4,r3
 144c8a8:	40d0983a 	sll	r8,r8,r3
 144c8ac:	418cb03a 	or	r6,r8,r6
 144c8b0:	300cc03a 	cmpne	r6,r6,zero
 144c8b4:	308cb03a 	or	r6,r6,r2
 144c8b8:	0007883a 	mov	r3,zero
 144c8bc:	003f3406 	br	144c590 <__alt_data_end+0xfffe6d90>
 144c8c0:	80002326 	beq	r16,zero,144c950 <__adddf3+0x51c>
 144c8c4:	0101ffc4 	movi	r4,2047
 144c8c8:	11005e26 	beq	r2,r4,144ca44 <__adddf3+0x610>
 144c8cc:	00c7c83a 	sub	r3,zero,r3
 144c8d0:	29402034 	orhi	r5,r5,128
 144c8d4:	01000e04 	movi	r4,56
 144c8d8:	20c07216 	blt	r4,r3,144caa4 <__adddf3+0x670>
 144c8dc:	010007c4 	movi	r4,31
 144c8e0:	20c0ce16 	blt	r4,r3,144cc1c <__adddf3+0x7e8>
 144c8e4:	01000804 	movi	r4,32
 144c8e8:	20c9c83a 	sub	r4,r4,r3
 144c8ec:	2914983a 	sll	r10,r5,r4
 144c8f0:	88d2d83a 	srl	r9,r17,r3
 144c8f4:	8908983a 	sll	r4,r17,r4
 144c8f8:	28c6d83a 	srl	r3,r5,r3
 144c8fc:	5262b03a 	or	r17,r10,r9
 144c900:	2008c03a 	cmpne	r4,r4,zero
 144c904:	8922b03a 	or	r17,r17,r4
 144c908:	3463c83a 	sub	r17,r6,r17
 144c90c:	40c7c83a 	sub	r3,r8,r3
 144c910:	344d803a 	cmpltu	r6,r6,r17
 144c914:	198bc83a 	sub	r5,r3,r6
 144c918:	1021883a 	mov	r16,r2
 144c91c:	3825883a 	mov	r18,r7
 144c920:	003f2006 	br	144c5a4 <__alt_data_end+0xfffe6da4>
 144c924:	9886b03a 	or	r3,r19,r2
 144c928:	1800141e 	bne	r3,zero,144c97c <__adddf3+0x548>
 144c92c:	0007883a 	mov	r3,zero
 144c930:	000b883a 	mov	r5,zero
 144c934:	0023883a 	mov	r17,zero
 144c938:	0021883a 	mov	r16,zero
 144c93c:	003f3c06 	br	144c630 <__alt_data_end+0xfffe6e30>
 144c940:	418cb03a 	or	r6,r8,r6
 144c944:	300cc03a 	cmpne	r6,r6,zero
 144c948:	0011883a 	mov	r8,zero
 144c94c:	003f5606 	br	144c6a8 <__alt_data_end+0xfffe6ea8>
 144c950:	2c48b03a 	or	r4,r5,r17
 144c954:	20003b26 	beq	r4,zero,144ca44 <__adddf3+0x610>
 144c958:	00c6303a 	nor	r3,zero,r3
 144c95c:	1800371e 	bne	r3,zero,144ca3c <__adddf3+0x608>
 144c960:	3463c83a 	sub	r17,r6,r17
 144c964:	414bc83a 	sub	r5,r8,r5
 144c968:	344d803a 	cmpltu	r6,r6,r17
 144c96c:	298bc83a 	sub	r5,r5,r6
 144c970:	1021883a 	mov	r16,r2
 144c974:	3825883a 	mov	r18,r7
 144c978:	003f0a06 	br	144c5a4 <__alt_data_end+0xfffe6da4>
 144c97c:	1023883a 	mov	r17,r2
 144c980:	003f0d06 	br	144c5b8 <__alt_data_end+0xfffe6db8>
 144c984:	0007883a 	mov	r3,zero
 144c988:	000b883a 	mov	r5,zero
 144c98c:	0023883a 	mov	r17,zero
 144c990:	003f2706 	br	144c630 <__alt_data_end+0xfffe6e30>
 144c994:	0027883a 	mov	r19,zero
 144c998:	003fb706 	br	144c878 <__alt_data_end+0xfffe7078>
 144c99c:	0011883a 	mov	r8,zero
 144c9a0:	003fc206 	br	144c8ac <__alt_data_end+0xfffe70ac>
 144c9a4:	2c44b03a 	or	r2,r5,r17
 144c9a8:	8000871e 	bne	r16,zero,144cbc8 <__adddf3+0x794>
 144c9ac:	1000b126 	beq	r2,zero,144cc74 <__adddf3+0x840>
 144c9b0:	4184b03a 	or	r2,r8,r6
 144c9b4:	103ebe26 	beq	r2,zero,144c4b0 <__alt_data_end+0xfffe6cb0>
 144c9b8:	3445883a 	add	r2,r6,r17
 144c9bc:	1463803a 	cmpltu	r17,r2,r17
 144c9c0:	414b883a 	add	r5,r8,r5
 144c9c4:	2c4b883a 	add	r5,r5,r17
 144c9c8:	28c0202c 	andhi	r3,r5,128
 144c9cc:	1023883a 	mov	r17,r2
 144c9d0:	183f6326 	beq	r3,zero,144c760 <__alt_data_end+0xfffe6f60>
 144c9d4:	00bfe034 	movhi	r2,65408
 144c9d8:	10bfffc4 	addi	r2,r2,-1
 144c9dc:	2021883a 	mov	r16,r4
 144c9e0:	288a703a 	and	r5,r5,r2
 144c9e4:	003eb206 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144c9e8:	2c44b03a 	or	r2,r5,r17
 144c9ec:	8000251e 	bne	r16,zero,144ca84 <__adddf3+0x650>
 144c9f0:	10004b1e 	bne	r2,zero,144cb20 <__adddf3+0x6ec>
 144c9f4:	4184b03a 	or	r2,r8,r6
 144c9f8:	103fe226 	beq	r2,zero,144c984 <__alt_data_end+0xfffe7184>
 144c9fc:	400b883a 	mov	r5,r8
 144ca00:	3023883a 	mov	r17,r6
 144ca04:	3825883a 	mov	r18,r7
 144ca08:	003ea906 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144ca0c:	20bff804 	addi	r2,r4,-32
 144ca10:	01c00804 	movi	r7,32
 144ca14:	4084d83a 	srl	r2,r8,r2
 144ca18:	21c07e26 	beq	r4,r7,144cc14 <__adddf3+0x7e0>
 144ca1c:	01c01004 	movi	r7,64
 144ca20:	3909c83a 	sub	r4,r7,r4
 144ca24:	4110983a 	sll	r8,r8,r4
 144ca28:	418cb03a 	or	r6,r8,r6
 144ca2c:	300cc03a 	cmpne	r6,r6,zero
 144ca30:	308cb03a 	or	r6,r6,r2
 144ca34:	0011883a 	mov	r8,zero
 144ca38:	003f1b06 	br	144c6a8 <__alt_data_end+0xfffe6ea8>
 144ca3c:	0101ffc4 	movi	r4,2047
 144ca40:	113fa41e 	bne	r2,r4,144c8d4 <__alt_data_end+0xfffe70d4>
 144ca44:	400b883a 	mov	r5,r8
 144ca48:	3023883a 	mov	r17,r6
 144ca4c:	1021883a 	mov	r16,r2
 144ca50:	3825883a 	mov	r18,r7
 144ca54:	003e9606 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144ca58:	80001a1e 	bne	r16,zero,144cac4 <__adddf3+0x690>
 144ca5c:	2c4eb03a 	or	r7,r5,r17
 144ca60:	38005526 	beq	r7,zero,144cbb8 <__adddf3+0x784>
 144ca64:	0108303a 	nor	r4,zero,r4
 144ca68:	2000511e 	bne	r4,zero,144cbb0 <__adddf3+0x77c>
 144ca6c:	89a3883a 	add	r17,r17,r6
 144ca70:	414b883a 	add	r5,r8,r5
 144ca74:	898d803a 	cmpltu	r6,r17,r6
 144ca78:	298b883a 	add	r5,r5,r6
 144ca7c:	1021883a 	mov	r16,r2
 144ca80:	003f0e06 	br	144c6bc <__alt_data_end+0xfffe6ebc>
 144ca84:	1000341e 	bne	r2,zero,144cb58 <__adddf3+0x724>
 144ca88:	4184b03a 	or	r2,r8,r6
 144ca8c:	10006f26 	beq	r2,zero,144cc4c <__adddf3+0x818>
 144ca90:	400b883a 	mov	r5,r8
 144ca94:	3023883a 	mov	r17,r6
 144ca98:	3825883a 	mov	r18,r7
 144ca9c:	0401ffc4 	movi	r16,2047
 144caa0:	003e8306 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144caa4:	2c62b03a 	or	r17,r5,r17
 144caa8:	8822c03a 	cmpne	r17,r17,zero
 144caac:	0007883a 	mov	r3,zero
 144cab0:	003f9506 	br	144c908 <__alt_data_end+0xfffe7108>
 144cab4:	1021883a 	mov	r16,r2
 144cab8:	000b883a 	mov	r5,zero
 144cabc:	0023883a 	mov	r17,zero
 144cac0:	003edb06 	br	144c630 <__alt_data_end+0xfffe6e30>
 144cac4:	01c1ffc4 	movi	r7,2047
 144cac8:	11c03b26 	beq	r2,r7,144cbb8 <__adddf3+0x784>
 144cacc:	0109c83a 	sub	r4,zero,r4
 144cad0:	29402034 	orhi	r5,r5,128
 144cad4:	01c00e04 	movi	r7,56
 144cad8:	39006216 	blt	r7,r4,144cc64 <__adddf3+0x830>
 144cadc:	01c007c4 	movi	r7,31
 144cae0:	39006b16 	blt	r7,r4,144cc90 <__adddf3+0x85c>
 144cae4:	01c00804 	movi	r7,32
 144cae8:	390fc83a 	sub	r7,r7,r4
 144caec:	29d4983a 	sll	r10,r5,r7
 144caf0:	8912d83a 	srl	r9,r17,r4
 144caf4:	89ce983a 	sll	r7,r17,r7
 144caf8:	2908d83a 	srl	r4,r5,r4
 144cafc:	5262b03a 	or	r17,r10,r9
 144cb00:	380ac03a 	cmpne	r5,r7,zero
 144cb04:	8962b03a 	or	r17,r17,r5
 144cb08:	89a3883a 	add	r17,r17,r6
 144cb0c:	2211883a 	add	r8,r4,r8
 144cb10:	898d803a 	cmpltu	r6,r17,r6
 144cb14:	418b883a 	add	r5,r8,r6
 144cb18:	1021883a 	mov	r16,r2
 144cb1c:	003ee706 	br	144c6bc <__alt_data_end+0xfffe6ebc>
 144cb20:	4184b03a 	or	r2,r8,r6
 144cb24:	103e6226 	beq	r2,zero,144c4b0 <__alt_data_end+0xfffe6cb0>
 144cb28:	8987c83a 	sub	r3,r17,r6
 144cb2c:	88c9803a 	cmpltu	r4,r17,r3
 144cb30:	2a05c83a 	sub	r2,r5,r8
 144cb34:	1105c83a 	sub	r2,r2,r4
 144cb38:	1100202c 	andhi	r4,r2,128
 144cb3c:	203f0426 	beq	r4,zero,144c750 <__alt_data_end+0xfffe6f50>
 144cb40:	3463c83a 	sub	r17,r6,r17
 144cb44:	414bc83a 	sub	r5,r8,r5
 144cb48:	344d803a 	cmpltu	r6,r6,r17
 144cb4c:	298bc83a 	sub	r5,r5,r6
 144cb50:	3825883a 	mov	r18,r7
 144cb54:	003e5606 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cb58:	4184b03a 	or	r2,r8,r6
 144cb5c:	10002b26 	beq	r2,zero,144cc0c <__adddf3+0x7d8>
 144cb60:	2804d0fa 	srli	r2,r5,3
 144cb64:	8822d0fa 	srli	r17,r17,3
 144cb68:	280a977a 	slli	r5,r5,29
 144cb6c:	10c0022c 	andhi	r3,r2,8
 144cb70:	2c62b03a 	or	r17,r5,r17
 144cb74:	18000826 	beq	r3,zero,144cb98 <__adddf3+0x764>
 144cb78:	4008d0fa 	srli	r4,r8,3
 144cb7c:	20c0022c 	andhi	r3,r4,8
 144cb80:	1800051e 	bne	r3,zero,144cb98 <__adddf3+0x764>
 144cb84:	300cd0fa 	srli	r6,r6,3
 144cb88:	4010977a 	slli	r8,r8,29
 144cb8c:	2005883a 	mov	r2,r4
 144cb90:	3825883a 	mov	r18,r7
 144cb94:	41a2b03a 	or	r17,r8,r6
 144cb98:	880ad77a 	srli	r5,r17,29
 144cb9c:	100490fa 	slli	r2,r2,3
 144cba0:	882290fa 	slli	r17,r17,3
 144cba4:	0401ffc4 	movi	r16,2047
 144cba8:	288ab03a 	or	r5,r5,r2
 144cbac:	003e4006 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cbb0:	01c1ffc4 	movi	r7,2047
 144cbb4:	11ffc71e 	bne	r2,r7,144cad4 <__alt_data_end+0xfffe72d4>
 144cbb8:	400b883a 	mov	r5,r8
 144cbbc:	3023883a 	mov	r17,r6
 144cbc0:	1021883a 	mov	r16,r2
 144cbc4:	003e3a06 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cbc8:	10002d26 	beq	r2,zero,144cc80 <__adddf3+0x84c>
 144cbcc:	4184b03a 	or	r2,r8,r6
 144cbd0:	10000e26 	beq	r2,zero,144cc0c <__adddf3+0x7d8>
 144cbd4:	2804d0fa 	srli	r2,r5,3
 144cbd8:	8822d0fa 	srli	r17,r17,3
 144cbdc:	280a977a 	slli	r5,r5,29
 144cbe0:	10c0022c 	andhi	r3,r2,8
 144cbe4:	2c62b03a 	or	r17,r5,r17
 144cbe8:	183feb26 	beq	r3,zero,144cb98 <__alt_data_end+0xfffe7398>
 144cbec:	4008d0fa 	srli	r4,r8,3
 144cbf0:	20c0022c 	andhi	r3,r4,8
 144cbf4:	183fe81e 	bne	r3,zero,144cb98 <__alt_data_end+0xfffe7398>
 144cbf8:	300cd0fa 	srli	r6,r6,3
 144cbfc:	4010977a 	slli	r8,r8,29
 144cc00:	2005883a 	mov	r2,r4
 144cc04:	41a2b03a 	or	r17,r8,r6
 144cc08:	003fe306 	br	144cb98 <__alt_data_end+0xfffe7398>
 144cc0c:	0401ffc4 	movi	r16,2047
 144cc10:	003e2706 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cc14:	0011883a 	mov	r8,zero
 144cc18:	003f8306 	br	144ca28 <__alt_data_end+0xfffe7228>
 144cc1c:	193ff804 	addi	r4,r3,-32
 144cc20:	02400804 	movi	r9,32
 144cc24:	2908d83a 	srl	r4,r5,r4
 144cc28:	1a402526 	beq	r3,r9,144ccc0 <__adddf3+0x88c>
 144cc2c:	02401004 	movi	r9,64
 144cc30:	48c7c83a 	sub	r3,r9,r3
 144cc34:	28ca983a 	sll	r5,r5,r3
 144cc38:	2c62b03a 	or	r17,r5,r17
 144cc3c:	8822c03a 	cmpne	r17,r17,zero
 144cc40:	8922b03a 	or	r17,r17,r4
 144cc44:	0007883a 	mov	r3,zero
 144cc48:	003f2f06 	br	144c908 <__alt_data_end+0xfffe7108>
 144cc4c:	01402034 	movhi	r5,128
 144cc50:	0007883a 	mov	r3,zero
 144cc54:	297fffc4 	addi	r5,r5,-1
 144cc58:	047ffe04 	movi	r17,-8
 144cc5c:	0401ffc4 	movi	r16,2047
 144cc60:	003e7306 	br	144c630 <__alt_data_end+0xfffe6e30>
 144cc64:	2c62b03a 	or	r17,r5,r17
 144cc68:	8822c03a 	cmpne	r17,r17,zero
 144cc6c:	0009883a 	mov	r4,zero
 144cc70:	003fa506 	br	144cb08 <__alt_data_end+0xfffe7308>
 144cc74:	400b883a 	mov	r5,r8
 144cc78:	3023883a 	mov	r17,r6
 144cc7c:	003e0c06 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cc80:	400b883a 	mov	r5,r8
 144cc84:	3023883a 	mov	r17,r6
 144cc88:	0401ffc4 	movi	r16,2047
 144cc8c:	003e0806 	br	144c4b0 <__alt_data_end+0xfffe6cb0>
 144cc90:	21fff804 	addi	r7,r4,-32
 144cc94:	02400804 	movi	r9,32
 144cc98:	29ced83a 	srl	r7,r5,r7
 144cc9c:	22400a26 	beq	r4,r9,144ccc8 <__adddf3+0x894>
 144cca0:	02401004 	movi	r9,64
 144cca4:	4909c83a 	sub	r4,r9,r4
 144cca8:	290a983a 	sll	r5,r5,r4
 144ccac:	2c62b03a 	or	r17,r5,r17
 144ccb0:	8822c03a 	cmpne	r17,r17,zero
 144ccb4:	89e2b03a 	or	r17,r17,r7
 144ccb8:	0009883a 	mov	r4,zero
 144ccbc:	003f9206 	br	144cb08 <__alt_data_end+0xfffe7308>
 144ccc0:	000b883a 	mov	r5,zero
 144ccc4:	003fdc06 	br	144cc38 <__alt_data_end+0xfffe7438>
 144ccc8:	000b883a 	mov	r5,zero
 144cccc:	003ff706 	br	144ccac <__alt_data_end+0xfffe74ac>

0144ccd0 <__eqdf2>:
 144ccd0:	2804d53a 	srli	r2,r5,20
 144ccd4:	3806d53a 	srli	r3,r7,20
 144ccd8:	02000434 	movhi	r8,16
 144ccdc:	423fffc4 	addi	r8,r8,-1
 144cce0:	1081ffcc 	andi	r2,r2,2047
 144cce4:	0241ffc4 	movi	r9,2047
 144cce8:	2a14703a 	and	r10,r5,r8
 144ccec:	18c1ffcc 	andi	r3,r3,2047
 144ccf0:	3a10703a 	and	r8,r7,r8
 144ccf4:	280ad7fa 	srli	r5,r5,31
 144ccf8:	380ed7fa 	srli	r7,r7,31
 144ccfc:	12400f26 	beq	r2,r9,144cd3c <__eqdf2+0x6c>
 144cd00:	0241ffc4 	movi	r9,2047
 144cd04:	1a400326 	beq	r3,r9,144cd14 <__eqdf2+0x44>
 144cd08:	10c00526 	beq	r2,r3,144cd20 <__eqdf2+0x50>
 144cd0c:	00800044 	movi	r2,1
 144cd10:	f800283a 	ret
 144cd14:	4192b03a 	or	r9,r8,r6
 144cd18:	483ffc1e 	bne	r9,zero,144cd0c <__alt_data_end+0xfffe750c>
 144cd1c:	10fffb1e 	bne	r2,r3,144cd0c <__alt_data_end+0xfffe750c>
 144cd20:	523ffa1e 	bne	r10,r8,144cd0c <__alt_data_end+0xfffe750c>
 144cd24:	21bff91e 	bne	r4,r6,144cd0c <__alt_data_end+0xfffe750c>
 144cd28:	29c00826 	beq	r5,r7,144cd4c <__eqdf2+0x7c>
 144cd2c:	103ff71e 	bne	r2,zero,144cd0c <__alt_data_end+0xfffe750c>
 144cd30:	5104b03a 	or	r2,r10,r4
 144cd34:	1004c03a 	cmpne	r2,r2,zero
 144cd38:	f800283a 	ret
 144cd3c:	5112b03a 	or	r9,r10,r4
 144cd40:	483fef26 	beq	r9,zero,144cd00 <__alt_data_end+0xfffe7500>
 144cd44:	00800044 	movi	r2,1
 144cd48:	f800283a 	ret
 144cd4c:	0005883a 	mov	r2,zero
 144cd50:	f800283a 	ret

0144cd54 <__gedf2>:
 144cd54:	2804d53a 	srli	r2,r5,20
 144cd58:	3806d53a 	srli	r3,r7,20
 144cd5c:	02000434 	movhi	r8,16
 144cd60:	423fffc4 	addi	r8,r8,-1
 144cd64:	0241ffc4 	movi	r9,2047
 144cd68:	1081ffcc 	andi	r2,r2,2047
 144cd6c:	2a14703a 	and	r10,r5,r8
 144cd70:	1a46703a 	and	r3,r3,r9
 144cd74:	3a10703a 	and	r8,r7,r8
 144cd78:	280ad7fa 	srli	r5,r5,31
 144cd7c:	380ed7fa 	srli	r7,r7,31
 144cd80:	12400b26 	beq	r2,r9,144cdb0 <__gedf2+0x5c>
 144cd84:	1a401626 	beq	r3,r9,144cde0 <__gedf2+0x8c>
 144cd88:	10000c1e 	bne	r2,zero,144cdbc <__gedf2+0x68>
 144cd8c:	5112b03a 	or	r9,r10,r4
 144cd90:	4813003a 	cmpeq	r9,r9,zero
 144cd94:	4817883a 	mov	r11,r9
 144cd98:	18000c1e 	bne	r3,zero,144cdcc <__gedf2+0x78>
 144cd9c:	4198b03a 	or	r12,r8,r6
 144cda0:	60000a1e 	bne	r12,zero,144cdcc <__gedf2+0x78>
 144cda4:	48001326 	beq	r9,zero,144cdf4 <__gedf2+0xa0>
 144cda8:	0005883a 	mov	r2,zero
 144cdac:	f800283a 	ret
 144cdb0:	5112b03a 	or	r9,r10,r4
 144cdb4:	4800191e 	bne	r9,zero,144ce1c <__gedf2+0xc8>
 144cdb8:	18800926 	beq	r3,r2,144cde0 <__gedf2+0x8c>
 144cdbc:	18000b1e 	bne	r3,zero,144cdec <__gedf2+0x98>
 144cdc0:	4192b03a 	or	r9,r8,r6
 144cdc4:	0017883a 	mov	r11,zero
 144cdc8:	48000a26 	beq	r9,zero,144cdf4 <__gedf2+0xa0>
 144cdcc:	39c03fcc 	andi	r7,r7,255
 144cdd0:	58000726 	beq	r11,zero,144cdf0 <__gedf2+0x9c>
 144cdd4:	3800081e 	bne	r7,zero,144cdf8 <__gedf2+0xa4>
 144cdd8:	00bfffc4 	movi	r2,-1
 144cddc:	f800283a 	ret
 144cde0:	4192b03a 	or	r9,r8,r6
 144cde4:	48000d1e 	bne	r9,zero,144ce1c <__gedf2+0xc8>
 144cde8:	103fe826 	beq	r2,zero,144cd8c <__alt_data_end+0xfffe758c>
 144cdec:	39c03fcc 	andi	r7,r7,255
 144cdf0:	29c00326 	beq	r5,r7,144ce00 <__gedf2+0xac>
 144cdf4:	283ff81e 	bne	r5,zero,144cdd8 <__alt_data_end+0xfffe75d8>
 144cdf8:	00800044 	movi	r2,1
 144cdfc:	f800283a 	ret
 144ce00:	18bffc16 	blt	r3,r2,144cdf4 <__alt_data_end+0xfffe75f4>
 144ce04:	10c00316 	blt	r2,r3,144ce14 <__gedf2+0xc0>
 144ce08:	42bffa36 	bltu	r8,r10,144cdf4 <__alt_data_end+0xfffe75f4>
 144ce0c:	52000526 	beq	r10,r8,144ce24 <__gedf2+0xd0>
 144ce10:	523fe52e 	bgeu	r10,r8,144cda8 <__alt_data_end+0xfffe75a8>
 144ce14:	283ff026 	beq	r5,zero,144cdd8 <__alt_data_end+0xfffe75d8>
 144ce18:	003ff706 	br	144cdf8 <__alt_data_end+0xfffe75f8>
 144ce1c:	00bfff84 	movi	r2,-2
 144ce20:	f800283a 	ret
 144ce24:	313ff336 	bltu	r6,r4,144cdf4 <__alt_data_end+0xfffe75f4>
 144ce28:	21bfdf2e 	bgeu	r4,r6,144cda8 <__alt_data_end+0xfffe75a8>
 144ce2c:	283fea26 	beq	r5,zero,144cdd8 <__alt_data_end+0xfffe75d8>
 144ce30:	003ff106 	br	144cdf8 <__alt_data_end+0xfffe75f8>

0144ce34 <__ledf2>:
 144ce34:	2804d53a 	srli	r2,r5,20
 144ce38:	3810d53a 	srli	r8,r7,20
 144ce3c:	00c00434 	movhi	r3,16
 144ce40:	18ffffc4 	addi	r3,r3,-1
 144ce44:	0241ffc4 	movi	r9,2047
 144ce48:	1081ffcc 	andi	r2,r2,2047
 144ce4c:	28d4703a 	and	r10,r5,r3
 144ce50:	4250703a 	and	r8,r8,r9
 144ce54:	38c6703a 	and	r3,r7,r3
 144ce58:	280ad7fa 	srli	r5,r5,31
 144ce5c:	380ed7fa 	srli	r7,r7,31
 144ce60:	12400b26 	beq	r2,r9,144ce90 <__ledf2+0x5c>
 144ce64:	42401926 	beq	r8,r9,144cecc <__ledf2+0x98>
 144ce68:	10000c1e 	bne	r2,zero,144ce9c <__ledf2+0x68>
 144ce6c:	5112b03a 	or	r9,r10,r4
 144ce70:	4813003a 	cmpeq	r9,r9,zero
 144ce74:	4817883a 	mov	r11,r9
 144ce78:	40000f26 	beq	r8,zero,144ceb8 <__ledf2+0x84>
 144ce7c:	39c03fcc 	andi	r7,r7,255
 144ce80:	58001826 	beq	r11,zero,144cee4 <__ledf2+0xb0>
 144ce84:	38000a1e 	bne	r7,zero,144ceb0 <__ledf2+0x7c>
 144ce88:	00bfffc4 	movi	r2,-1
 144ce8c:	f800283a 	ret
 144ce90:	5112b03a 	or	r9,r10,r4
 144ce94:	48000f1e 	bne	r9,zero,144ced4 <__ledf2+0xa0>
 144ce98:	40800c26 	beq	r8,r2,144cecc <__ledf2+0x98>
 144ce9c:	4000101e 	bne	r8,zero,144cee0 <__ledf2+0xac>
 144cea0:	1992b03a 	or	r9,r3,r6
 144cea4:	0017883a 	mov	r11,zero
 144cea8:	483ff41e 	bne	r9,zero,144ce7c <__alt_data_end+0xfffe767c>
 144ceac:	283ff61e 	bne	r5,zero,144ce88 <__alt_data_end+0xfffe7688>
 144ceb0:	00800044 	movi	r2,1
 144ceb4:	f800283a 	ret
 144ceb8:	1998b03a 	or	r12,r3,r6
 144cebc:	603fef1e 	bne	r12,zero,144ce7c <__alt_data_end+0xfffe767c>
 144cec0:	483ffa26 	beq	r9,zero,144ceac <__alt_data_end+0xfffe76ac>
 144cec4:	0005883a 	mov	r2,zero
 144cec8:	f800283a 	ret
 144cecc:	1992b03a 	or	r9,r3,r6
 144ced0:	48000226 	beq	r9,zero,144cedc <__ledf2+0xa8>
 144ced4:	00800084 	movi	r2,2
 144ced8:	f800283a 	ret
 144cedc:	103fe326 	beq	r2,zero,144ce6c <__alt_data_end+0xfffe766c>
 144cee0:	39c03fcc 	andi	r7,r7,255
 144cee4:	29fff11e 	bne	r5,r7,144ceac <__alt_data_end+0xfffe76ac>
 144cee8:	40bff016 	blt	r8,r2,144ceac <__alt_data_end+0xfffe76ac>
 144ceec:	12000316 	blt	r2,r8,144cefc <__ledf2+0xc8>
 144cef0:	1abfee36 	bltu	r3,r10,144ceac <__alt_data_end+0xfffe76ac>
 144cef4:	50c00326 	beq	r10,r3,144cf04 <__ledf2+0xd0>
 144cef8:	50fff22e 	bgeu	r10,r3,144cec4 <__alt_data_end+0xfffe76c4>
 144cefc:	283fe226 	beq	r5,zero,144ce88 <__alt_data_end+0xfffe7688>
 144cf00:	003feb06 	br	144ceb0 <__alt_data_end+0xfffe76b0>
 144cf04:	313fe936 	bltu	r6,r4,144ceac <__alt_data_end+0xfffe76ac>
 144cf08:	21bfee2e 	bgeu	r4,r6,144cec4 <__alt_data_end+0xfffe76c4>
 144cf0c:	283fde26 	beq	r5,zero,144ce88 <__alt_data_end+0xfffe7688>
 144cf10:	003fe706 	br	144ceb0 <__alt_data_end+0xfffe76b0>

0144cf14 <__fixdfsi>:
 144cf14:	2806d53a 	srli	r3,r5,20
 144cf18:	00800434 	movhi	r2,16
 144cf1c:	10bfffc4 	addi	r2,r2,-1
 144cf20:	18c1ffcc 	andi	r3,r3,2047
 144cf24:	0180ff84 	movi	r6,1022
 144cf28:	2884703a 	and	r2,r5,r2
 144cf2c:	280ad7fa 	srli	r5,r5,31
 144cf30:	30c0130e 	bge	r6,r3,144cf80 <__fixdfsi+0x6c>
 144cf34:	01810744 	movi	r6,1053
 144cf38:	30c00d16 	blt	r6,r3,144cf70 <__fixdfsi+0x5c>
 144cf3c:	01810cc4 	movi	r6,1075
 144cf40:	30cdc83a 	sub	r6,r6,r3
 144cf44:	01c007c4 	movi	r7,31
 144cf48:	10800434 	orhi	r2,r2,16
 144cf4c:	39800e0e 	bge	r7,r6,144cf88 <__fixdfsi+0x74>
 144cf50:	010104c4 	movi	r4,1043
 144cf54:	20c7c83a 	sub	r3,r4,r3
 144cf58:	10c6d83a 	srl	r3,r2,r3
 144cf5c:	29403fcc 	andi	r5,r5,255
 144cf60:	0145c83a 	sub	r2,zero,r5
 144cf64:	1884f03a 	xor	r2,r3,r2
 144cf68:	1145883a 	add	r2,r2,r5
 144cf6c:	f800283a 	ret
 144cf70:	00a00034 	movhi	r2,32768
 144cf74:	10bfffc4 	addi	r2,r2,-1
 144cf78:	2885883a 	add	r2,r5,r2
 144cf7c:	f800283a 	ret
 144cf80:	0005883a 	mov	r2,zero
 144cf84:	f800283a 	ret
 144cf88:	18fefb44 	addi	r3,r3,-1043
 144cf8c:	2188d83a 	srl	r4,r4,r6
 144cf90:	10c6983a 	sll	r3,r2,r3
 144cf94:	20c6b03a 	or	r3,r4,r3
 144cf98:	003ff006 	br	144cf5c <__alt_data_end+0xfffe775c>

0144cf9c <__floatunsidf>:
 144cf9c:	defffe04 	addi	sp,sp,-8
 144cfa0:	dc000015 	stw	r16,0(sp)
 144cfa4:	dfc00115 	stw	ra,4(sp)
 144cfa8:	2021883a 	mov	r16,r4
 144cfac:	20001026 	beq	r4,zero,144cff0 <__floatunsidf+0x54>
 144cfb0:	14422680 	call	1442268 <__clzsi2>
 144cfb4:	01410784 	movi	r5,1054
 144cfb8:	100d883a 	mov	r6,r2
 144cfbc:	288bc83a 	sub	r5,r5,r2
 144cfc0:	00800284 	movi	r2,10
 144cfc4:	11801616 	blt	r2,r6,144d020 <__floatunsidf+0x84>
 144cfc8:	008002c4 	movi	r2,11
 144cfcc:	1185c83a 	sub	r2,r2,r6
 144cfd0:	8084d83a 	srl	r2,r16,r2
 144cfd4:	00c00434 	movhi	r3,16
 144cfd8:	31c00544 	addi	r7,r6,21
 144cfdc:	18ffffc4 	addi	r3,r3,-1
 144cfe0:	81e0983a 	sll	r16,r16,r7
 144cfe4:	10cc703a 	and	r6,r2,r3
 144cfe8:	2941ffcc 	andi	r5,r5,2047
 144cfec:	00000206 	br	144cff8 <__floatunsidf+0x5c>
 144cff0:	000b883a 	mov	r5,zero
 144cff4:	000d883a 	mov	r6,zero
 144cff8:	280a953a 	slli	r5,r5,20
 144cffc:	00c00434 	movhi	r3,16
 144d000:	18ffffc4 	addi	r3,r3,-1
 144d004:	30c6703a 	and	r3,r6,r3
 144d008:	8005883a 	mov	r2,r16
 144d00c:	1946b03a 	or	r3,r3,r5
 144d010:	dfc00117 	ldw	ra,4(sp)
 144d014:	dc000017 	ldw	r16,0(sp)
 144d018:	dec00204 	addi	sp,sp,8
 144d01c:	f800283a 	ret
 144d020:	31bffd44 	addi	r6,r6,-11
 144d024:	818c983a 	sll	r6,r16,r6
 144d028:	00800434 	movhi	r2,16
 144d02c:	10bfffc4 	addi	r2,r2,-1
 144d030:	2941ffcc 	andi	r5,r5,2047
 144d034:	0021883a 	mov	r16,zero
 144d038:	308c703a 	and	r6,r6,r2
 144d03c:	003fee06 	br	144cff8 <__alt_data_end+0xfffe77f8>

0144d040 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d040:	defffe04 	addi	sp,sp,-8
 144d044:	dfc00115 	stw	ra,4(sp)
 144d048:	df000015 	stw	fp,0(sp)
 144d04c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d050:	00805174 	movhi	r2,325
 144d054:	10855c04 	addi	r2,r2,5488
 144d058:	10800017 	ldw	r2,0(r2)
 144d05c:	10000526 	beq	r2,zero,144d074 <alt_get_errno+0x34>
 144d060:	00805174 	movhi	r2,325
 144d064:	10855c04 	addi	r2,r2,5488
 144d068:	10800017 	ldw	r2,0(r2)
 144d06c:	103ee83a 	callr	r2
 144d070:	00000206 	br	144d07c <alt_get_errno+0x3c>
 144d074:	00805174 	movhi	r2,325
 144d078:	10887004 	addi	r2,r2,8640
}
 144d07c:	e037883a 	mov	sp,fp
 144d080:	dfc00117 	ldw	ra,4(sp)
 144d084:	df000017 	ldw	fp,0(sp)
 144d088:	dec00204 	addi	sp,sp,8
 144d08c:	f800283a 	ret

0144d090 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 144d090:	defffb04 	addi	sp,sp,-20
 144d094:	dfc00415 	stw	ra,16(sp)
 144d098:	df000315 	stw	fp,12(sp)
 144d09c:	df000304 	addi	fp,sp,12
 144d0a0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 144d0a4:	e0bfff17 	ldw	r2,-4(fp)
 144d0a8:	10000816 	blt	r2,zero,144d0cc <close+0x3c>
 144d0ac:	e13fff17 	ldw	r4,-4(fp)
 144d0b0:	01400304 	movi	r5,12
 144d0b4:	14423f80 	call	14423f8 <__mulsi3>
 144d0b8:	1007883a 	mov	r3,r2
 144d0bc:	00805174 	movhi	r2,325
 144d0c0:	10849704 	addi	r2,r2,4700
 144d0c4:	1885883a 	add	r2,r3,r2
 144d0c8:	00000106 	br	144d0d0 <close+0x40>
 144d0cc:	0005883a 	mov	r2,zero
 144d0d0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 144d0d4:	e0bffd17 	ldw	r2,-12(fp)
 144d0d8:	10001926 	beq	r2,zero,144d140 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 144d0dc:	e0bffd17 	ldw	r2,-12(fp)
 144d0e0:	10800017 	ldw	r2,0(r2)
 144d0e4:	10800417 	ldw	r2,16(r2)
 144d0e8:	10000626 	beq	r2,zero,144d104 <close+0x74>
 144d0ec:	e0bffd17 	ldw	r2,-12(fp)
 144d0f0:	10800017 	ldw	r2,0(r2)
 144d0f4:	10800417 	ldw	r2,16(r2)
 144d0f8:	e13ffd17 	ldw	r4,-12(fp)
 144d0fc:	103ee83a 	callr	r2
 144d100:	00000106 	br	144d108 <close+0x78>
 144d104:	0005883a 	mov	r2,zero
 144d108:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 144d10c:	e13fff17 	ldw	r4,-4(fp)
 144d110:	144d7a40 	call	144d7a4 <alt_release_fd>
    if (rval < 0)
 144d114:	e0bffe17 	ldw	r2,-8(fp)
 144d118:	1000070e 	bge	r2,zero,144d138 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 144d11c:	144d0400 	call	144d040 <alt_get_errno>
 144d120:	1007883a 	mov	r3,r2
 144d124:	e0bffe17 	ldw	r2,-8(fp)
 144d128:	0085c83a 	sub	r2,zero,r2
 144d12c:	18800015 	stw	r2,0(r3)
      return -1;
 144d130:	00bfffc4 	movi	r2,-1
 144d134:	00000706 	br	144d154 <close+0xc4>
    }
    return 0;
 144d138:	0005883a 	mov	r2,zero
 144d13c:	00000506 	br	144d154 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 144d140:	144d0400 	call	144d040 <alt_get_errno>
 144d144:	1007883a 	mov	r3,r2
 144d148:	00801444 	movi	r2,81
 144d14c:	18800015 	stw	r2,0(r3)
    return -1;
 144d150:	00bfffc4 	movi	r2,-1
  }
}
 144d154:	e037883a 	mov	sp,fp
 144d158:	dfc00117 	ldw	ra,4(sp)
 144d15c:	df000017 	ldw	fp,0(sp)
 144d160:	dec00204 	addi	sp,sp,8
 144d164:	f800283a 	ret

0144d168 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 144d168:	defffc04 	addi	sp,sp,-16
 144d16c:	df000315 	stw	fp,12(sp)
 144d170:	df000304 	addi	fp,sp,12
 144d174:	e13ffd15 	stw	r4,-12(fp)
 144d178:	e17ffe15 	stw	r5,-8(fp)
 144d17c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 144d180:	e0bfff17 	ldw	r2,-4(fp)
}
 144d184:	e037883a 	mov	sp,fp
 144d188:	df000017 	ldw	fp,0(sp)
 144d18c:	dec00104 	addi	sp,sp,4
 144d190:	f800283a 	ret

0144d194 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d194:	defffe04 	addi	sp,sp,-8
 144d198:	dfc00115 	stw	ra,4(sp)
 144d19c:	df000015 	stw	fp,0(sp)
 144d1a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d1a4:	00805174 	movhi	r2,325
 144d1a8:	10855c04 	addi	r2,r2,5488
 144d1ac:	10800017 	ldw	r2,0(r2)
 144d1b0:	10000526 	beq	r2,zero,144d1c8 <alt_get_errno+0x34>
 144d1b4:	00805174 	movhi	r2,325
 144d1b8:	10855c04 	addi	r2,r2,5488
 144d1bc:	10800017 	ldw	r2,0(r2)
 144d1c0:	103ee83a 	callr	r2
 144d1c4:	00000206 	br	144d1d0 <alt_get_errno+0x3c>
 144d1c8:	00805174 	movhi	r2,325
 144d1cc:	10887004 	addi	r2,r2,8640
}
 144d1d0:	e037883a 	mov	sp,fp
 144d1d4:	dfc00117 	ldw	ra,4(sp)
 144d1d8:	df000017 	ldw	fp,0(sp)
 144d1dc:	dec00204 	addi	sp,sp,8
 144d1e0:	f800283a 	ret

0144d1e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 144d1e4:	defffb04 	addi	sp,sp,-20
 144d1e8:	dfc00415 	stw	ra,16(sp)
 144d1ec:	df000315 	stw	fp,12(sp)
 144d1f0:	df000304 	addi	fp,sp,12
 144d1f4:	e13ffe15 	stw	r4,-8(fp)
 144d1f8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 144d1fc:	e0bffe17 	ldw	r2,-8(fp)
 144d200:	10000816 	blt	r2,zero,144d224 <fstat+0x40>
 144d204:	e13ffe17 	ldw	r4,-8(fp)
 144d208:	01400304 	movi	r5,12
 144d20c:	14423f80 	call	14423f8 <__mulsi3>
 144d210:	1007883a 	mov	r3,r2
 144d214:	00805174 	movhi	r2,325
 144d218:	10849704 	addi	r2,r2,4700
 144d21c:	1885883a 	add	r2,r3,r2
 144d220:	00000106 	br	144d228 <fstat+0x44>
 144d224:	0005883a 	mov	r2,zero
 144d228:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 144d22c:	e0bffd17 	ldw	r2,-12(fp)
 144d230:	10001026 	beq	r2,zero,144d274 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 144d234:	e0bffd17 	ldw	r2,-12(fp)
 144d238:	10800017 	ldw	r2,0(r2)
 144d23c:	10800817 	ldw	r2,32(r2)
 144d240:	10000726 	beq	r2,zero,144d260 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 144d244:	e0bffd17 	ldw	r2,-12(fp)
 144d248:	10800017 	ldw	r2,0(r2)
 144d24c:	10800817 	ldw	r2,32(r2)
 144d250:	e13ffd17 	ldw	r4,-12(fp)
 144d254:	e17fff17 	ldw	r5,-4(fp)
 144d258:	103ee83a 	callr	r2
 144d25c:	00000a06 	br	144d288 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 144d260:	e0bfff17 	ldw	r2,-4(fp)
 144d264:	00c80004 	movi	r3,8192
 144d268:	10c00115 	stw	r3,4(r2)
      return 0;
 144d26c:	0005883a 	mov	r2,zero
 144d270:	00000506 	br	144d288 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 144d274:	144d1940 	call	144d194 <alt_get_errno>
 144d278:	1007883a 	mov	r3,r2
 144d27c:	00801444 	movi	r2,81
 144d280:	18800015 	stw	r2,0(r3)
    return -1;
 144d284:	00bfffc4 	movi	r2,-1
  }
}
 144d288:	e037883a 	mov	sp,fp
 144d28c:	dfc00117 	ldw	ra,4(sp)
 144d290:	df000017 	ldw	fp,0(sp)
 144d294:	dec00204 	addi	sp,sp,8
 144d298:	f800283a 	ret

0144d29c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d29c:	defffe04 	addi	sp,sp,-8
 144d2a0:	dfc00115 	stw	ra,4(sp)
 144d2a4:	df000015 	stw	fp,0(sp)
 144d2a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d2ac:	00805174 	movhi	r2,325
 144d2b0:	10855c04 	addi	r2,r2,5488
 144d2b4:	10800017 	ldw	r2,0(r2)
 144d2b8:	10000526 	beq	r2,zero,144d2d0 <alt_get_errno+0x34>
 144d2bc:	00805174 	movhi	r2,325
 144d2c0:	10855c04 	addi	r2,r2,5488
 144d2c4:	10800017 	ldw	r2,0(r2)
 144d2c8:	103ee83a 	callr	r2
 144d2cc:	00000206 	br	144d2d8 <alt_get_errno+0x3c>
 144d2d0:	00805174 	movhi	r2,325
 144d2d4:	10887004 	addi	r2,r2,8640
}
 144d2d8:	e037883a 	mov	sp,fp
 144d2dc:	dfc00117 	ldw	ra,4(sp)
 144d2e0:	df000017 	ldw	fp,0(sp)
 144d2e4:	dec00204 	addi	sp,sp,8
 144d2e8:	f800283a 	ret

0144d2ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 144d2ec:	deffed04 	addi	sp,sp,-76
 144d2f0:	dfc01215 	stw	ra,72(sp)
 144d2f4:	df001115 	stw	fp,68(sp)
 144d2f8:	df001104 	addi	fp,sp,68
 144d2fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 144d300:	e0bfff17 	ldw	r2,-4(fp)
 144d304:	10000816 	blt	r2,zero,144d328 <isatty+0x3c>
 144d308:	e13fff17 	ldw	r4,-4(fp)
 144d30c:	01400304 	movi	r5,12
 144d310:	14423f80 	call	14423f8 <__mulsi3>
 144d314:	1007883a 	mov	r3,r2
 144d318:	00805174 	movhi	r2,325
 144d31c:	10849704 	addi	r2,r2,4700
 144d320:	1885883a 	add	r2,r3,r2
 144d324:	00000106 	br	144d32c <isatty+0x40>
 144d328:	0005883a 	mov	r2,zero
 144d32c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 144d330:	e0bfef17 	ldw	r2,-68(fp)
 144d334:	10000e26 	beq	r2,zero,144d370 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 144d338:	e0bfef17 	ldw	r2,-68(fp)
 144d33c:	10800017 	ldw	r2,0(r2)
 144d340:	10800817 	ldw	r2,32(r2)
 144d344:	1000021e 	bne	r2,zero,144d350 <isatty+0x64>
    {
      return 1;
 144d348:	00800044 	movi	r2,1
 144d34c:	00000d06 	br	144d384 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 144d350:	e0bff004 	addi	r2,fp,-64
 144d354:	e13fff17 	ldw	r4,-4(fp)
 144d358:	100b883a 	mov	r5,r2
 144d35c:	144d1e40 	call	144d1e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 144d360:	e0bff117 	ldw	r2,-60(fp)
 144d364:	10880020 	cmpeqi	r2,r2,8192
 144d368:	10803fcc 	andi	r2,r2,255
 144d36c:	00000506 	br	144d384 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 144d370:	144d29c0 	call	144d29c <alt_get_errno>
 144d374:	1007883a 	mov	r3,r2
 144d378:	00801444 	movi	r2,81
 144d37c:	18800015 	stw	r2,0(r3)
    return 0;
 144d380:	0005883a 	mov	r2,zero
  }
}
 144d384:	e037883a 	mov	sp,fp
 144d388:	dfc00117 	ldw	ra,4(sp)
 144d38c:	df000017 	ldw	fp,0(sp)
 144d390:	dec00204 	addi	sp,sp,8
 144d394:	f800283a 	ret

0144d398 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 144d398:	defffc04 	addi	sp,sp,-16
 144d39c:	df000315 	stw	fp,12(sp)
 144d3a0:	df000304 	addi	fp,sp,12
 144d3a4:	e13ffd15 	stw	r4,-12(fp)
 144d3a8:	e17ffe15 	stw	r5,-8(fp)
 144d3ac:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 144d3b0:	e0fffe17 	ldw	r3,-8(fp)
 144d3b4:	e0bffd17 	ldw	r2,-12(fp)
 144d3b8:	18800c26 	beq	r3,r2,144d3ec <alt_load_section+0x54>
  {
    while( to != end )
 144d3bc:	00000806 	br	144d3e0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 144d3c0:	e0bffe17 	ldw	r2,-8(fp)
 144d3c4:	10c00104 	addi	r3,r2,4
 144d3c8:	e0fffe15 	stw	r3,-8(fp)
 144d3cc:	e0fffd17 	ldw	r3,-12(fp)
 144d3d0:	19000104 	addi	r4,r3,4
 144d3d4:	e13ffd15 	stw	r4,-12(fp)
 144d3d8:	18c00017 	ldw	r3,0(r3)
 144d3dc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 144d3e0:	e0fffe17 	ldw	r3,-8(fp)
 144d3e4:	e0bfff17 	ldw	r2,-4(fp)
 144d3e8:	18bff51e 	bne	r3,r2,144d3c0 <__alt_data_end+0xfffe7bc0>
    {
      *to++ = *from++;
    }
  }
}
 144d3ec:	e037883a 	mov	sp,fp
 144d3f0:	df000017 	ldw	fp,0(sp)
 144d3f4:	dec00104 	addi	sp,sp,4
 144d3f8:	f800283a 	ret

0144d3fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 144d3fc:	defffe04 	addi	sp,sp,-8
 144d400:	dfc00115 	stw	ra,4(sp)
 144d404:	df000015 	stw	fp,0(sp)
 144d408:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 144d40c:	01005174 	movhi	r4,325
 144d410:	21056704 	addi	r4,r4,5532
 144d414:	01405174 	movhi	r5,325
 144d418:	29426404 	addi	r5,r5,2448
 144d41c:	01805174 	movhi	r6,325
 144d420:	31856704 	addi	r6,r6,5532
 144d424:	144d3980 	call	144d398 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 144d428:	01005134 	movhi	r4,324
 144d42c:	21000804 	addi	r4,r4,32
 144d430:	01405134 	movhi	r5,324
 144d434:	29400804 	addi	r5,r5,32
 144d438:	01805134 	movhi	r6,324
 144d43c:	31808b04 	addi	r6,r6,556
 144d440:	144d3980 	call	144d398 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 144d444:	01005174 	movhi	r4,325
 144d448:	21014204 	addi	r4,r4,1288
 144d44c:	01405174 	movhi	r5,325
 144d450:	29414204 	addi	r5,r5,1288
 144d454:	01805174 	movhi	r6,325
 144d458:	31826404 	addi	r6,r6,2448
 144d45c:	144d3980 	call	144d398 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 144d460:	144f50c0 	call	144f50c <alt_dcache_flush_all>
  alt_icache_flush_all();
 144d464:	144f7640 	call	144f764 <alt_icache_flush_all>
}
 144d468:	e037883a 	mov	sp,fp
 144d46c:	dfc00117 	ldw	ra,4(sp)
 144d470:	df000017 	ldw	fp,0(sp)
 144d474:	dec00204 	addi	sp,sp,8
 144d478:	f800283a 	ret

0144d47c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d47c:	defffe04 	addi	sp,sp,-8
 144d480:	dfc00115 	stw	ra,4(sp)
 144d484:	df000015 	stw	fp,0(sp)
 144d488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d48c:	00805174 	movhi	r2,325
 144d490:	10855c04 	addi	r2,r2,5488
 144d494:	10800017 	ldw	r2,0(r2)
 144d498:	10000526 	beq	r2,zero,144d4b0 <alt_get_errno+0x34>
 144d49c:	00805174 	movhi	r2,325
 144d4a0:	10855c04 	addi	r2,r2,5488
 144d4a4:	10800017 	ldw	r2,0(r2)
 144d4a8:	103ee83a 	callr	r2
 144d4ac:	00000206 	br	144d4b8 <alt_get_errno+0x3c>
 144d4b0:	00805174 	movhi	r2,325
 144d4b4:	10887004 	addi	r2,r2,8640
}
 144d4b8:	e037883a 	mov	sp,fp
 144d4bc:	dfc00117 	ldw	ra,4(sp)
 144d4c0:	df000017 	ldw	fp,0(sp)
 144d4c4:	dec00204 	addi	sp,sp,8
 144d4c8:	f800283a 	ret

0144d4cc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 144d4cc:	defff904 	addi	sp,sp,-28
 144d4d0:	dfc00615 	stw	ra,24(sp)
 144d4d4:	df000515 	stw	fp,20(sp)
 144d4d8:	df000504 	addi	fp,sp,20
 144d4dc:	e13ffd15 	stw	r4,-12(fp)
 144d4e0:	e17ffe15 	stw	r5,-8(fp)
 144d4e4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 144d4e8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 144d4ec:	e0bffd17 	ldw	r2,-12(fp)
 144d4f0:	10000816 	blt	r2,zero,144d514 <lseek+0x48>
 144d4f4:	e13ffd17 	ldw	r4,-12(fp)
 144d4f8:	01400304 	movi	r5,12
 144d4fc:	14423f80 	call	14423f8 <__mulsi3>
 144d500:	1007883a 	mov	r3,r2
 144d504:	00805174 	movhi	r2,325
 144d508:	10849704 	addi	r2,r2,4700
 144d50c:	1885883a 	add	r2,r3,r2
 144d510:	00000106 	br	144d518 <lseek+0x4c>
 144d514:	0005883a 	mov	r2,zero
 144d518:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 144d51c:	e0bffc17 	ldw	r2,-16(fp)
 144d520:	10001026 	beq	r2,zero,144d564 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 144d524:	e0bffc17 	ldw	r2,-16(fp)
 144d528:	10800017 	ldw	r2,0(r2)
 144d52c:	10800717 	ldw	r2,28(r2)
 144d530:	10000926 	beq	r2,zero,144d558 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 144d534:	e0bffc17 	ldw	r2,-16(fp)
 144d538:	10800017 	ldw	r2,0(r2)
 144d53c:	10800717 	ldw	r2,28(r2)
 144d540:	e13ffc17 	ldw	r4,-16(fp)
 144d544:	e17ffe17 	ldw	r5,-8(fp)
 144d548:	e1bfff17 	ldw	r6,-4(fp)
 144d54c:	103ee83a 	callr	r2
 144d550:	e0bffb15 	stw	r2,-20(fp)
 144d554:	00000506 	br	144d56c <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 144d558:	00bfde84 	movi	r2,-134
 144d55c:	e0bffb15 	stw	r2,-20(fp)
 144d560:	00000206 	br	144d56c <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 144d564:	00bfebc4 	movi	r2,-81
 144d568:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 144d56c:	e0bffb17 	ldw	r2,-20(fp)
 144d570:	1000070e 	bge	r2,zero,144d590 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 144d574:	144d47c0 	call	144d47c <alt_get_errno>
 144d578:	1007883a 	mov	r3,r2
 144d57c:	e0bffb17 	ldw	r2,-20(fp)
 144d580:	0085c83a 	sub	r2,zero,r2
 144d584:	18800015 	stw	r2,0(r3)
    rc = -1;
 144d588:	00bfffc4 	movi	r2,-1
 144d58c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 144d590:	e0bffb17 	ldw	r2,-20(fp)
}
 144d594:	e037883a 	mov	sp,fp
 144d598:	dfc00117 	ldw	ra,4(sp)
 144d59c:	df000017 	ldw	fp,0(sp)
 144d5a0:	dec00204 	addi	sp,sp,8
 144d5a4:	f800283a 	ret

0144d5a8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 144d5a8:	defffd04 	addi	sp,sp,-12
 144d5ac:	dfc00215 	stw	ra,8(sp)
 144d5b0:	df000115 	stw	fp,4(sp)
 144d5b4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 144d5b8:	0009883a 	mov	r4,zero
 144d5bc:	144da5c0 	call	144da5c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 144d5c0:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 144d5c4:	144da900 	call	144da90 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 144d5c8:	01005174 	movhi	r4,325
 144d5cc:	21024f04 	addi	r4,r4,2364
 144d5d0:	01405174 	movhi	r5,325
 144d5d4:	29424f04 	addi	r5,r5,2364
 144d5d8:	01805174 	movhi	r6,325
 144d5dc:	31824f04 	addi	r6,r6,2364
 144d5e0:	144fb300 	call	144fb30 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 144d5e4:	d1232017 	ldw	r4,-29568(gp)
 144d5e8:	d0e32117 	ldw	r3,-29564(gp)
 144d5ec:	d0a32217 	ldw	r2,-29560(gp)
 144d5f0:	180b883a 	mov	r5,r3
 144d5f4:	100d883a 	mov	r6,r2
 144d5f8:	14402680 	call	1440268 <main>
 144d5fc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 144d600:	01000044 	movi	r4,1
 144d604:	144d0900 	call	144d090 <close>
  exit (result);
 144d608:	e13fff17 	ldw	r4,-4(fp)
 144d60c:	145028c0 	call	145028c <exit>

0144d610 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 144d610:	defffe04 	addi	sp,sp,-8
 144d614:	df000115 	stw	fp,4(sp)
 144d618:	df000104 	addi	fp,sp,4
 144d61c:	e13fff15 	stw	r4,-4(fp)
}
 144d620:	e037883a 	mov	sp,fp
 144d624:	df000017 	ldw	fp,0(sp)
 144d628:	dec00104 	addi	sp,sp,4
 144d62c:	f800283a 	ret

0144d630 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 144d630:	defffe04 	addi	sp,sp,-8
 144d634:	df000115 	stw	fp,4(sp)
 144d638:	df000104 	addi	fp,sp,4
 144d63c:	e13fff15 	stw	r4,-4(fp)
}
 144d640:	e037883a 	mov	sp,fp
 144d644:	df000017 	ldw	fp,0(sp)
 144d648:	dec00104 	addi	sp,sp,4
 144d64c:	f800283a 	ret

0144d650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d650:	defffe04 	addi	sp,sp,-8
 144d654:	dfc00115 	stw	ra,4(sp)
 144d658:	df000015 	stw	fp,0(sp)
 144d65c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d660:	00805174 	movhi	r2,325
 144d664:	10855c04 	addi	r2,r2,5488
 144d668:	10800017 	ldw	r2,0(r2)
 144d66c:	10000526 	beq	r2,zero,144d684 <alt_get_errno+0x34>
 144d670:	00805174 	movhi	r2,325
 144d674:	10855c04 	addi	r2,r2,5488
 144d678:	10800017 	ldw	r2,0(r2)
 144d67c:	103ee83a 	callr	r2
 144d680:	00000206 	br	144d68c <alt_get_errno+0x3c>
 144d684:	00805174 	movhi	r2,325
 144d688:	10887004 	addi	r2,r2,8640
}
 144d68c:	e037883a 	mov	sp,fp
 144d690:	dfc00117 	ldw	ra,4(sp)
 144d694:	df000017 	ldw	fp,0(sp)
 144d698:	dec00204 	addi	sp,sp,8
 144d69c:	f800283a 	ret

0144d6a0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 144d6a0:	defff904 	addi	sp,sp,-28
 144d6a4:	dfc00615 	stw	ra,24(sp)
 144d6a8:	df000515 	stw	fp,20(sp)
 144d6ac:	df000504 	addi	fp,sp,20
 144d6b0:	e13ffd15 	stw	r4,-12(fp)
 144d6b4:	e17ffe15 	stw	r5,-8(fp)
 144d6b8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 144d6bc:	e0bffd17 	ldw	r2,-12(fp)
 144d6c0:	10000816 	blt	r2,zero,144d6e4 <read+0x44>
 144d6c4:	e13ffd17 	ldw	r4,-12(fp)
 144d6c8:	01400304 	movi	r5,12
 144d6cc:	14423f80 	call	14423f8 <__mulsi3>
 144d6d0:	1007883a 	mov	r3,r2
 144d6d4:	00805174 	movhi	r2,325
 144d6d8:	10849704 	addi	r2,r2,4700
 144d6dc:	1885883a 	add	r2,r3,r2
 144d6e0:	00000106 	br	144d6e8 <read+0x48>
 144d6e4:	0005883a 	mov	r2,zero
 144d6e8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 144d6ec:	e0bffb17 	ldw	r2,-20(fp)
 144d6f0:	10002226 	beq	r2,zero,144d77c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 144d6f4:	e0bffb17 	ldw	r2,-20(fp)
 144d6f8:	10800217 	ldw	r2,8(r2)
 144d6fc:	108000cc 	andi	r2,r2,3
 144d700:	10800060 	cmpeqi	r2,r2,1
 144d704:	1000181e 	bne	r2,zero,144d768 <read+0xc8>
        (fd->dev->read))
 144d708:	e0bffb17 	ldw	r2,-20(fp)
 144d70c:	10800017 	ldw	r2,0(r2)
 144d710:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 144d714:	10001426 	beq	r2,zero,144d768 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 144d718:	e0bffb17 	ldw	r2,-20(fp)
 144d71c:	10800017 	ldw	r2,0(r2)
 144d720:	10800517 	ldw	r2,20(r2)
 144d724:	e0ffff17 	ldw	r3,-4(fp)
 144d728:	e13ffb17 	ldw	r4,-20(fp)
 144d72c:	e17ffe17 	ldw	r5,-8(fp)
 144d730:	180d883a 	mov	r6,r3
 144d734:	103ee83a 	callr	r2
 144d738:	e0bffc15 	stw	r2,-16(fp)
 144d73c:	e0bffc17 	ldw	r2,-16(fp)
 144d740:	1000070e 	bge	r2,zero,144d760 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 144d744:	144d6500 	call	144d650 <alt_get_errno>
 144d748:	1007883a 	mov	r3,r2
 144d74c:	e0bffc17 	ldw	r2,-16(fp)
 144d750:	0085c83a 	sub	r2,zero,r2
 144d754:	18800015 	stw	r2,0(r3)
          return -1;
 144d758:	00bfffc4 	movi	r2,-1
 144d75c:	00000c06 	br	144d790 <read+0xf0>
        }
        return rval;
 144d760:	e0bffc17 	ldw	r2,-16(fp)
 144d764:	00000a06 	br	144d790 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 144d768:	144d6500 	call	144d650 <alt_get_errno>
 144d76c:	1007883a 	mov	r3,r2
 144d770:	00800344 	movi	r2,13
 144d774:	18800015 	stw	r2,0(r3)
 144d778:	00000406 	br	144d78c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 144d77c:	144d6500 	call	144d650 <alt_get_errno>
 144d780:	1007883a 	mov	r3,r2
 144d784:	00801444 	movi	r2,81
 144d788:	18800015 	stw	r2,0(r3)
  }
  return -1;
 144d78c:	00bfffc4 	movi	r2,-1
}
 144d790:	e037883a 	mov	sp,fp
 144d794:	dfc00117 	ldw	ra,4(sp)
 144d798:	df000017 	ldw	fp,0(sp)
 144d79c:	dec00204 	addi	sp,sp,8
 144d7a0:	f800283a 	ret

0144d7a4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 144d7a4:	defffc04 	addi	sp,sp,-16
 144d7a8:	dfc00315 	stw	ra,12(sp)
 144d7ac:	df000215 	stw	fp,8(sp)
 144d7b0:	dc000115 	stw	r16,4(sp)
 144d7b4:	df000204 	addi	fp,sp,8
 144d7b8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 144d7bc:	e0bffe17 	ldw	r2,-8(fp)
 144d7c0:	108000d0 	cmplti	r2,r2,3
 144d7c4:	1000111e 	bne	r2,zero,144d80c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 144d7c8:	04005174 	movhi	r16,325
 144d7cc:	84049704 	addi	r16,r16,4700
 144d7d0:	e0bffe17 	ldw	r2,-8(fp)
 144d7d4:	1009883a 	mov	r4,r2
 144d7d8:	01400304 	movi	r5,12
 144d7dc:	14423f80 	call	14423f8 <__mulsi3>
 144d7e0:	8085883a 	add	r2,r16,r2
 144d7e4:	10800204 	addi	r2,r2,8
 144d7e8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 144d7ec:	04005174 	movhi	r16,325
 144d7f0:	84049704 	addi	r16,r16,4700
 144d7f4:	e0bffe17 	ldw	r2,-8(fp)
 144d7f8:	1009883a 	mov	r4,r2
 144d7fc:	01400304 	movi	r5,12
 144d800:	14423f80 	call	14423f8 <__mulsi3>
 144d804:	8085883a 	add	r2,r16,r2
 144d808:	10000015 	stw	zero,0(r2)
  }
}
 144d80c:	e6ffff04 	addi	sp,fp,-4
 144d810:	dfc00217 	ldw	ra,8(sp)
 144d814:	df000117 	ldw	fp,4(sp)
 144d818:	dc000017 	ldw	r16,0(sp)
 144d81c:	dec00304 	addi	sp,sp,12
 144d820:	f800283a 	ret

0144d824 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 144d824:	defff904 	addi	sp,sp,-28
 144d828:	df000615 	stw	fp,24(sp)
 144d82c:	df000604 	addi	fp,sp,24
 144d830:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144d834:	0005303a 	rdctl	r2,status
 144d838:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144d83c:	e0fffc17 	ldw	r3,-16(fp)
 144d840:	00bfff84 	movi	r2,-2
 144d844:	1884703a 	and	r2,r3,r2
 144d848:	1001703a 	wrctl	status,r2
  
  return context;
 144d84c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 144d850:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 144d854:	d0a00c17 	ldw	r2,-32720(gp)
 144d858:	10c000c4 	addi	r3,r2,3
 144d85c:	00bfff04 	movi	r2,-4
 144d860:	1884703a 	and	r2,r3,r2
 144d864:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 144d868:	d0e00c17 	ldw	r3,-32720(gp)
 144d86c:	e0bfff17 	ldw	r2,-4(fp)
 144d870:	1887883a 	add	r3,r3,r2
 144d874:	008051b4 	movhi	r2,326
 144d878:	10960004 	addi	r2,r2,22528
 144d87c:	10c0062e 	bgeu	r2,r3,144d898 <sbrk+0x74>
 144d880:	e0bffa17 	ldw	r2,-24(fp)
 144d884:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144d888:	e0bffd17 	ldw	r2,-12(fp)
 144d88c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 144d890:	00bfffc4 	movi	r2,-1
 144d894:	00000b06 	br	144d8c4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 144d898:	d0a00c17 	ldw	r2,-32720(gp)
 144d89c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 144d8a0:	d0e00c17 	ldw	r3,-32720(gp)
 144d8a4:	e0bfff17 	ldw	r2,-4(fp)
 144d8a8:	1885883a 	add	r2,r3,r2
 144d8ac:	d0a00c15 	stw	r2,-32720(gp)
 144d8b0:	e0bffa17 	ldw	r2,-24(fp)
 144d8b4:	e0bffe15 	stw	r2,-8(fp)
 144d8b8:	e0bffe17 	ldw	r2,-8(fp)
 144d8bc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 144d8c0:	e0bffb17 	ldw	r2,-20(fp)
} 
 144d8c4:	e037883a 	mov	sp,fp
 144d8c8:	df000017 	ldw	fp,0(sp)
 144d8cc:	dec00104 	addi	sp,sp,4
 144d8d0:	f800283a 	ret

0144d8d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144d8d4:	defffe04 	addi	sp,sp,-8
 144d8d8:	dfc00115 	stw	ra,4(sp)
 144d8dc:	df000015 	stw	fp,0(sp)
 144d8e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144d8e4:	00805174 	movhi	r2,325
 144d8e8:	10855c04 	addi	r2,r2,5488
 144d8ec:	10800017 	ldw	r2,0(r2)
 144d8f0:	10000526 	beq	r2,zero,144d908 <alt_get_errno+0x34>
 144d8f4:	00805174 	movhi	r2,325
 144d8f8:	10855c04 	addi	r2,r2,5488
 144d8fc:	10800017 	ldw	r2,0(r2)
 144d900:	103ee83a 	callr	r2
 144d904:	00000206 	br	144d910 <alt_get_errno+0x3c>
 144d908:	00805174 	movhi	r2,325
 144d90c:	10887004 	addi	r2,r2,8640
}
 144d910:	e037883a 	mov	sp,fp
 144d914:	dfc00117 	ldw	ra,4(sp)
 144d918:	df000017 	ldw	fp,0(sp)
 144d91c:	dec00204 	addi	sp,sp,8
 144d920:	f800283a 	ret

0144d924 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 144d924:	defff904 	addi	sp,sp,-28
 144d928:	dfc00615 	stw	ra,24(sp)
 144d92c:	df000515 	stw	fp,20(sp)
 144d930:	df000504 	addi	fp,sp,20
 144d934:	e13ffd15 	stw	r4,-12(fp)
 144d938:	e17ffe15 	stw	r5,-8(fp)
 144d93c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 144d940:	e0bffd17 	ldw	r2,-12(fp)
 144d944:	10000816 	blt	r2,zero,144d968 <write+0x44>
 144d948:	e13ffd17 	ldw	r4,-12(fp)
 144d94c:	01400304 	movi	r5,12
 144d950:	14423f80 	call	14423f8 <__mulsi3>
 144d954:	1007883a 	mov	r3,r2
 144d958:	00805174 	movhi	r2,325
 144d95c:	10849704 	addi	r2,r2,4700
 144d960:	1885883a 	add	r2,r3,r2
 144d964:	00000106 	br	144d96c <write+0x48>
 144d968:	0005883a 	mov	r2,zero
 144d96c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 144d970:	e0bffb17 	ldw	r2,-20(fp)
 144d974:	10002126 	beq	r2,zero,144d9fc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 144d978:	e0bffb17 	ldw	r2,-20(fp)
 144d97c:	10800217 	ldw	r2,8(r2)
 144d980:	108000cc 	andi	r2,r2,3
 144d984:	10001826 	beq	r2,zero,144d9e8 <write+0xc4>
 144d988:	e0bffb17 	ldw	r2,-20(fp)
 144d98c:	10800017 	ldw	r2,0(r2)
 144d990:	10800617 	ldw	r2,24(r2)
 144d994:	10001426 	beq	r2,zero,144d9e8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 144d998:	e0bffb17 	ldw	r2,-20(fp)
 144d99c:	10800017 	ldw	r2,0(r2)
 144d9a0:	10800617 	ldw	r2,24(r2)
 144d9a4:	e0ffff17 	ldw	r3,-4(fp)
 144d9a8:	e13ffb17 	ldw	r4,-20(fp)
 144d9ac:	e17ffe17 	ldw	r5,-8(fp)
 144d9b0:	180d883a 	mov	r6,r3
 144d9b4:	103ee83a 	callr	r2
 144d9b8:	e0bffc15 	stw	r2,-16(fp)
 144d9bc:	e0bffc17 	ldw	r2,-16(fp)
 144d9c0:	1000070e 	bge	r2,zero,144d9e0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 144d9c4:	144d8d40 	call	144d8d4 <alt_get_errno>
 144d9c8:	1007883a 	mov	r3,r2
 144d9cc:	e0bffc17 	ldw	r2,-16(fp)
 144d9d0:	0085c83a 	sub	r2,zero,r2
 144d9d4:	18800015 	stw	r2,0(r3)
        return -1;
 144d9d8:	00bfffc4 	movi	r2,-1
 144d9dc:	00000c06 	br	144da10 <write+0xec>
      }
      return rval;
 144d9e0:	e0bffc17 	ldw	r2,-16(fp)
 144d9e4:	00000a06 	br	144da10 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 144d9e8:	144d8d40 	call	144d8d4 <alt_get_errno>
 144d9ec:	1007883a 	mov	r3,r2
 144d9f0:	00800344 	movi	r2,13
 144d9f4:	18800015 	stw	r2,0(r3)
 144d9f8:	00000406 	br	144da0c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 144d9fc:	144d8d40 	call	144d8d4 <alt_get_errno>
 144da00:	1007883a 	mov	r3,r2
 144da04:	00801444 	movi	r2,81
 144da08:	18800015 	stw	r2,0(r3)
  }
  return -1;
 144da0c:	00bfffc4 	movi	r2,-1
}
 144da10:	e037883a 	mov	sp,fp
 144da14:	dfc00117 	ldw	ra,4(sp)
 144da18:	df000017 	ldw	fp,0(sp)
 144da1c:	dec00204 	addi	sp,sp,8
 144da20:	f800283a 	ret

0144da24 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 144da24:	defffd04 	addi	sp,sp,-12
 144da28:	dfc00215 	stw	ra,8(sp)
 144da2c:	df000115 	stw	fp,4(sp)
 144da30:	df000104 	addi	fp,sp,4
 144da34:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 144da38:	e13fff17 	ldw	r4,-4(fp)
 144da3c:	01405174 	movhi	r5,325
 144da40:	29455904 	addi	r5,r5,5476
 144da44:	144f5780 	call	144f578 <alt_dev_llist_insert>
}
 144da48:	e037883a 	mov	sp,fp
 144da4c:	dfc00117 	ldw	ra,4(sp)
 144da50:	df000017 	ldw	fp,0(sp)
 144da54:	dec00204 	addi	sp,sp,8
 144da58:	f800283a 	ret

0144da5c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 144da5c:	defffd04 	addi	sp,sp,-12
 144da60:	dfc00215 	stw	ra,8(sp)
 144da64:	df000115 	stw	fp,4(sp)
 144da68:	df000104 	addi	fp,sp,4
 144da6c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_QSYS, nios2_qsys);
 144da70:	144ffe80 	call	144ffe8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 144da74:	00800044 	movi	r2,1
 144da78:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 144da7c:	e037883a 	mov	sp,fp
 144da80:	dfc00117 	ldw	ra,4(sp)
 144da84:	df000017 	ldw	fp,0(sp)
 144da88:	dec00204 	addi	sp,sp,8
 144da8c:	f800283a 	ret

0144da90 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 144da90:	defffe04 	addi	sp,sp,-8
 144da94:	dfc00115 	stw	ra,4(sp)
 144da98:	df000015 	stw	fp,0(sp)
 144da9c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_QSYS, timer_qsys);
 144daa0:	01001004 	movi	r4,64
 144daa4:	000b883a 	mov	r5,zero
 144daa8:	01800084 	movi	r6,2
 144daac:	01c0fa04 	movi	r7,1000
 144dab0:	144ddac0 	call	144ddac <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 144dab4:	01005174 	movhi	r4,325
 144dab8:	2104f704 	addi	r4,r4,5084
 144dabc:	144da240 	call	144da24 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 144dac0:	0001883a 	nop
    ALTERA_MODULAR_ADC_INIT ( MODULAR_ADC, modular_adc);
 144dac4:	01005174 	movhi	r4,325
 144dac8:	21050204 	addi	r4,r4,5128
 144dacc:	000b883a 	mov	r5,zero
 144dad0:	000d883a 	mov	r6,zero
 144dad4:	144df840 	call	144df84 <altera_modular_adc_init>
    ALTERA_ONCHIP_FLASH_INIT ( UFM_FLASH, ufm_flash);
 144dad8:	01005174 	movhi	r4,325
 144dadc:	21051104 	addi	r4,r4,5188
 144dae0:	144ec180 	call	144ec18 <altera_onchip_flash_init>
    I2C_OPENCORES_INIT ( CAPSENSE_I2C, capsense_i2c);
 144dae4:	0001883a 	nop
    I2C_OPENCORES_INIT ( RH_TEMP_I2C, rh_temp_i2c);
 144dae8:	0001883a 	nop
}
 144daec:	e037883a 	mov	sp,fp
 144daf0:	dfc00117 	ldw	ra,4(sp)
 144daf4:	df000017 	ldw	fp,0(sp)
 144daf8:	dec00204 	addi	sp,sp,8
 144dafc:	f800283a 	ret

0144db00 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 144db00:	defffa04 	addi	sp,sp,-24
 144db04:	dfc00515 	stw	ra,20(sp)
 144db08:	df000415 	stw	fp,16(sp)
 144db0c:	df000404 	addi	fp,sp,16
 144db10:	e13ffd15 	stw	r4,-12(fp)
 144db14:	e17ffe15 	stw	r5,-8(fp)
 144db18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 144db1c:	e0bffd17 	ldw	r2,-12(fp)
 144db20:	10800017 	ldw	r2,0(r2)
 144db24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 144db28:	e0bffc17 	ldw	r2,-16(fp)
 144db2c:	10c00a04 	addi	r3,r2,40
 144db30:	e0bffd17 	ldw	r2,-12(fp)
 144db34:	10800217 	ldw	r2,8(r2)
 144db38:	1809883a 	mov	r4,r3
 144db3c:	e17ffe17 	ldw	r5,-8(fp)
 144db40:	e1bfff17 	ldw	r6,-4(fp)
 144db44:	100f883a 	mov	r7,r2
 144db48:	144dbc00 	call	144dbc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 144db4c:	e037883a 	mov	sp,fp
 144db50:	dfc00117 	ldw	ra,4(sp)
 144db54:	df000017 	ldw	fp,0(sp)
 144db58:	dec00204 	addi	sp,sp,8
 144db5c:	f800283a 	ret

0144db60 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 144db60:	defffa04 	addi	sp,sp,-24
 144db64:	dfc00515 	stw	ra,20(sp)
 144db68:	df000415 	stw	fp,16(sp)
 144db6c:	df000404 	addi	fp,sp,16
 144db70:	e13ffd15 	stw	r4,-12(fp)
 144db74:	e17ffe15 	stw	r5,-8(fp)
 144db78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 144db7c:	e0bffd17 	ldw	r2,-12(fp)
 144db80:	10800017 	ldw	r2,0(r2)
 144db84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 144db88:	e0bffc17 	ldw	r2,-16(fp)
 144db8c:	10c00a04 	addi	r3,r2,40
 144db90:	e0bffd17 	ldw	r2,-12(fp)
 144db94:	10800217 	ldw	r2,8(r2)
 144db98:	1809883a 	mov	r4,r3
 144db9c:	e17ffe17 	ldw	r5,-8(fp)
 144dba0:	e1bfff17 	ldw	r6,-4(fp)
 144dba4:	100f883a 	mov	r7,r2
 144dba8:	144dca40 	call	144dca4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 144dbac:	e037883a 	mov	sp,fp
 144dbb0:	dfc00117 	ldw	ra,4(sp)
 144dbb4:	df000017 	ldw	fp,0(sp)
 144dbb8:	dec00204 	addi	sp,sp,8
 144dbbc:	f800283a 	ret

0144dbc0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 144dbc0:	defff704 	addi	sp,sp,-36
 144dbc4:	df000815 	stw	fp,32(sp)
 144dbc8:	df000804 	addi	fp,sp,32
 144dbcc:	e13ffc15 	stw	r4,-16(fp)
 144dbd0:	e17ffd15 	stw	r5,-12(fp)
 144dbd4:	e1bffe15 	stw	r6,-8(fp)
 144dbd8:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 144dbdc:	e0bffc17 	ldw	r2,-16(fp)
 144dbe0:	10800017 	ldw	r2,0(r2)
 144dbe4:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 144dbe8:	e0bffd17 	ldw	r2,-12(fp)
 144dbec:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 144dbf0:	e0bffe17 	ldw	r2,-8(fp)
 144dbf4:	e0fffd17 	ldw	r3,-12(fp)
 144dbf8:	1885883a 	add	r2,r3,r2
 144dbfc:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 144dc00:	00001406 	br	144dc54 <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 144dc04:	e0bff917 	ldw	r2,-28(fp)
 144dc08:	10800037 	ldwio	r2,0(r2)
 144dc0c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 144dc10:	e0bffb17 	ldw	r2,-20(fp)
 144dc14:	10a0000c 	andi	r2,r2,32768
 144dc18:	10000626 	beq	r2,zero,144dc34 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 144dc1c:	e0bff817 	ldw	r2,-32(fp)
 144dc20:	10c00044 	addi	r3,r2,1
 144dc24:	e0fff815 	stw	r3,-32(fp)
 144dc28:	e0fffb17 	ldw	r3,-20(fp)
 144dc2c:	10c00005 	stb	r3,0(r2)
 144dc30:	00000806 	br	144dc54 <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
 144dc34:	e0fff817 	ldw	r3,-32(fp)
 144dc38:	e0bffd17 	ldw	r2,-12(fp)
 144dc3c:	18800126 	beq	r3,r2,144dc44 <altera_avalon_jtag_uart_read+0x84>
      break;
 144dc40:	00000706 	br	144dc60 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
 144dc44:	e0bfff17 	ldw	r2,-4(fp)
 144dc48:	1090000c 	andi	r2,r2,16384
 144dc4c:	10000126 	beq	r2,zero,144dc54 <altera_avalon_jtag_uart_read+0x94>
      break;   
 144dc50:	00000306 	br	144dc60 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 144dc54:	e0fff817 	ldw	r3,-32(fp)
 144dc58:	e0bffa17 	ldw	r2,-24(fp)
 144dc5c:	18bfe936 	bltu	r3,r2,144dc04 <__alt_data_end+0xfffe8404>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
 144dc60:	e0fff817 	ldw	r3,-32(fp)
 144dc64:	e0bffd17 	ldw	r2,-12(fp)
 144dc68:	18800426 	beq	r3,r2,144dc7c <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
 144dc6c:	e0fff817 	ldw	r3,-32(fp)
 144dc70:	e0bffd17 	ldw	r2,-12(fp)
 144dc74:	1885c83a 	sub	r2,r3,r2
 144dc78:	00000606 	br	144dc94 <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
 144dc7c:	e0bfff17 	ldw	r2,-4(fp)
 144dc80:	1090000c 	andi	r2,r2,16384
 144dc84:	10000226 	beq	r2,zero,144dc90 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
 144dc88:	00bffd44 	movi	r2,-11
 144dc8c:	00000106 	br	144dc94 <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
 144dc90:	00bffec4 	movi	r2,-5
}
 144dc94:	e037883a 	mov	sp,fp
 144dc98:	df000017 	ldw	fp,0(sp)
 144dc9c:	dec00104 	addi	sp,sp,4
 144dca0:	f800283a 	ret

0144dca4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 144dca4:	defff904 	addi	sp,sp,-28
 144dca8:	df000615 	stw	fp,24(sp)
 144dcac:	df000604 	addi	fp,sp,24
 144dcb0:	e13ffc15 	stw	r4,-16(fp)
 144dcb4:	e17ffd15 	stw	r5,-12(fp)
 144dcb8:	e1bffe15 	stw	r6,-8(fp)
 144dcbc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 144dcc0:	e0bffc17 	ldw	r2,-16(fp)
 144dcc4:	10800017 	ldw	r2,0(r2)
 144dcc8:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 144dccc:	e0bffe17 	ldw	r2,-8(fp)
 144dcd0:	e0fffd17 	ldw	r3,-12(fp)
 144dcd4:	1885883a 	add	r2,r3,r2
 144dcd8:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 144dcdc:	00000e06 	br	144dd18 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 144dce0:	e0bffa17 	ldw	r2,-24(fp)
 144dce4:	10800104 	addi	r2,r2,4
 144dce8:	10800037 	ldwio	r2,0(r2)
 144dcec:	10bfffec 	andhi	r2,r2,65535
 144dcf0:	10000926 	beq	r2,zero,144dd18 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 144dcf4:	e0fffa17 	ldw	r3,-24(fp)
 144dcf8:	e0bffd17 	ldw	r2,-12(fp)
 144dcfc:	11000044 	addi	r4,r2,1
 144dd00:	e13ffd15 	stw	r4,-12(fp)
 144dd04:	10800003 	ldbu	r2,0(r2)
 144dd08:	10803fcc 	andi	r2,r2,255
 144dd0c:	1080201c 	xori	r2,r2,128
 144dd10:	10bfe004 	addi	r2,r2,-128
 144dd14:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 144dd18:	e0fffd17 	ldw	r3,-12(fp)
 144dd1c:	e0bffb17 	ldw	r2,-20(fp)
 144dd20:	18bfef36 	bltu	r3,r2,144dce0 <__alt_data_end+0xfffe84e0>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 144dd24:	e0bffe17 	ldw	r2,-8(fp)
}
 144dd28:	e037883a 	mov	sp,fp
 144dd2c:	df000017 	ldw	fp,0(sp)
 144dd30:	dec00104 	addi	sp,sp,4
 144dd34:	f800283a 	ret

0144dd38 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 144dd38:	defffa04 	addi	sp,sp,-24
 144dd3c:	dfc00515 	stw	ra,20(sp)
 144dd40:	df000415 	stw	fp,16(sp)
 144dd44:	df000404 	addi	fp,sp,16
 144dd48:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 144dd4c:	0007883a 	mov	r3,zero
 144dd50:	e0bfff17 	ldw	r2,-4(fp)
 144dd54:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 144dd58:	e0bfff17 	ldw	r2,-4(fp)
 144dd5c:	10800104 	addi	r2,r2,4
 144dd60:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144dd64:	0005303a 	rdctl	r2,status
 144dd68:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144dd6c:	e0fffd17 	ldw	r3,-12(fp)
 144dd70:	00bfff84 	movi	r2,-2
 144dd74:	1884703a 	and	r2,r3,r2
 144dd78:	1001703a 	wrctl	status,r2
  
  return context;
 144dd7c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 144dd80:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 144dd84:	144fee40 	call	144fee4 <alt_tick>
 144dd88:	e0bffc17 	ldw	r2,-16(fp)
 144dd8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144dd90:	e0bffe17 	ldw	r2,-8(fp)
 144dd94:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 144dd98:	e037883a 	mov	sp,fp
 144dd9c:	dfc00117 	ldw	ra,4(sp)
 144dda0:	df000017 	ldw	fp,0(sp)
 144dda4:	dec00204 	addi	sp,sp,8
 144dda8:	f800283a 	ret

0144ddac <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 144ddac:	defff804 	addi	sp,sp,-32
 144ddb0:	dfc00715 	stw	ra,28(sp)
 144ddb4:	df000615 	stw	fp,24(sp)
 144ddb8:	df000604 	addi	fp,sp,24
 144ddbc:	e13ffc15 	stw	r4,-16(fp)
 144ddc0:	e17ffd15 	stw	r5,-12(fp)
 144ddc4:	e1bffe15 	stw	r6,-8(fp)
 144ddc8:	e1ffff15 	stw	r7,-4(fp)
 144ddcc:	e0bfff17 	ldw	r2,-4(fp)
 144ddd0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 144ddd4:	00805174 	movhi	r2,325
 144ddd8:	10887504 	addi	r2,r2,8660
 144dddc:	10800017 	ldw	r2,0(r2)
 144dde0:	1000041e 	bne	r2,zero,144ddf4 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 144dde4:	00805174 	movhi	r2,325
 144dde8:	10887504 	addi	r2,r2,8660
 144ddec:	e0fffb17 	ldw	r3,-20(fp)
 144ddf0:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 144ddf4:	e0bffc17 	ldw	r2,-16(fp)
 144ddf8:	10800104 	addi	r2,r2,4
 144ddfc:	00c001c4 	movi	r3,7
 144de00:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 144de04:	d8000015 	stw	zero,0(sp)
 144de08:	e13ffd17 	ldw	r4,-12(fp)
 144de0c:	e17ffe17 	ldw	r5,-8(fp)
 144de10:	01805174 	movhi	r6,325
 144de14:	31b74e04 	addi	r6,r6,-8904
 144de18:	e1fffc17 	ldw	r7,-16(fp)
 144de1c:	144f7800 	call	144f780 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 144de20:	e037883a 	mov	sp,fp
 144de24:	dfc00117 	ldw	ra,4(sp)
 144de28:	df000017 	ldw	fp,0(sp)
 144de2c:	dec00204 	addi	sp,sp,8
 144de30:	f800283a 	ret

0144de34 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
 144de34:	defff904 	addi	sp,sp,-28
 144de38:	dfc00615 	stw	ra,24(sp)
 144de3c:	df000515 	stw	fp,20(sp)
 144de40:	df000504 	addi	fp,sp,20
 144de44:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
 144de48:	e0bfff17 	ldw	r2,-4(fp)
 144de4c:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
 144de50:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
 144de54:	e0bffb17 	ldw	r2,-20(fp)
 144de58:	10001926 	beq	r2,zero,144dec0 <alt_adc_irq+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144de5c:	0005303a 	rdctl	r2,status
 144de60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144de64:	e0fffd17 	ldw	r3,-12(fp)
 144de68:	00bfff84 	movi	r2,-2
 144de6c:	1884703a 	and	r2,r3,r2
 144de70:	1001703a 	wrctl	status,r2
  
  return context;
 144de74:	e0bffd17 	ldw	r2,-12(fp)
	{
	    cpu_sr = alt_irq_disable_all();
 144de78:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
 144de7c:	e0bffb17 	ldw	r2,-20(fp)
 144de80:	10800a17 	ldw	r2,40(r2)
 144de84:	10000626 	beq	r2,zero,144dea0 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
 144de88:	e0bffb17 	ldw	r2,-20(fp)
 144de8c:	10800a17 	ldw	r2,40(r2)
 144de90:	e0fffb17 	ldw	r3,-20(fp)
 144de94:	18c00b17 	ldw	r3,44(r3)
 144de98:	1809883a 	mov	r4,r3
 144de9c:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
 144dea0:	e0bffb17 	ldw	r2,-20(fp)
 144dea4:	10800c17 	ldw	r2,48(r2)
 144dea8:	1009883a 	mov	r4,r2
 144deac:	144e2bc0 	call	144e2bc <adc_clear_interrupt_status>
 144deb0:	e0bffc17 	ldw	r2,-16(fp)
 144deb4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144deb8:	e0bffe17 	ldw	r2,-8(fp)
 144debc:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
 144dec0:	0001883a 	nop
}
 144dec4:	e037883a 	mov	sp,fp
 144dec8:	dfc00117 	ldw	ra,4(sp)
 144decc:	df000017 	ldw	fp,0(sp)
 144ded0:	dec00204 	addi	sp,sp,8
 144ded4:	f800283a 	ret

0144ded8 <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
 144ded8:	defff804 	addi	sp,sp,-32
 144dedc:	df000715 	stw	fp,28(sp)
 144dee0:	df000704 	addi	fp,sp,28
 144dee4:	e13ffd15 	stw	r4,-12(fp)
 144dee8:	e17ffe15 	stw	r5,-8(fp)
 144deec:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
 144def0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
 144def4:	e0bfff17 	ldw	r2,-4(fp)
 144def8:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
 144defc:	e0bffe17 	ldw	r2,-8(fp)
 144df00:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
 144df04:	e0bffd17 	ldw	r2,-12(fp)
 144df08:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
 144df0c:	e0bffa17 	ldw	r2,-24(fp)
 144df10:	1000021e 	bne	r2,zero,144df1c <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
 144df14:	00bffa84 	movi	r2,-22
 144df18:	00001606 	br	144df74 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
 144df1c:	e03ff915 	stw	zero,-28(fp)
 144df20:	00001006 	br	144df64 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
 144df24:	e0bff917 	ldw	r2,-28(fp)
 144df28:	1085883a 	add	r2,r2,r2
 144df2c:	1085883a 	add	r2,r2,r2
 144df30:	1007883a 	mov	r3,r2
 144df34:	e0bffc17 	ldw	r2,-16(fp)
 144df38:	1885883a 	add	r2,r3,r2
 144df3c:	10800037 	ldwio	r2,0(r2)
 144df40:	1007883a 	mov	r3,r2
 144df44:	e0bffa17 	ldw	r2,-24(fp)
 144df48:	10c00015 	stw	r3,0(r2)

       dest_buf++;
 144df4c:	e0bffa17 	ldw	r2,-24(fp)
 144df50:	10800104 	addi	r2,r2,4
 144df54:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
 144df58:	e0bff917 	ldw	r2,-28(fp)
 144df5c:	10800044 	addi	r2,r2,1
 144df60:	e0bff915 	stw	r2,-28(fp)
 144df64:	e0fff917 	ldw	r3,-28(fp)
 144df68:	e0bffb17 	ldw	r2,-20(fp)
 144df6c:	18bfed36 	bltu	r3,r2,144df24 <__alt_data_end+0xfffe8724>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
 144df70:	0005883a 	mov	r2,zero

}
 144df74:	e037883a 	mov	sp,fp
 144df78:	df000017 	ldw	fp,0(sp)
 144df7c:	dec00104 	addi	sp,sp,4
 144df80:	f800283a 	ret

0144df84 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
 144df84:	defffa04 	addi	sp,sp,-24
 144df88:	dfc00515 	stw	ra,20(sp)
 144df8c:	df000415 	stw	fp,16(sp)
 144df90:	df000404 	addi	fp,sp,16
 144df94:	e13ffd15 	stw	r4,-12(fp)
 144df98:	e17ffe15 	stw	r5,-8(fp)
 144df9c:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
 144dfa0:	e13ffd17 	ldw	r4,-12(fp)
 144dfa4:	d1600d04 	addi	r5,gp,-32716
 144dfa8:	144f5780 	call	144f578 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
 144dfac:	e0bffe17 	ldw	r2,-8(fp)
 144dfb0:	10000b16 	blt	r2,zero,144dfe0 <altera_modular_adc_init+0x5c>
 144dfb4:	e0bfff17 	ldw	r2,-4(fp)
 144dfb8:	10000916 	blt	r2,zero,144dfe0 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
 144dfbc:	e0fffe17 	ldw	r3,-8(fp)
 144dfc0:	e0bfff17 	ldw	r2,-4(fp)
 144dfc4:	d8000015 	stw	zero,0(sp)
 144dfc8:	1809883a 	mov	r4,r3
 144dfcc:	100b883a 	mov	r5,r2
 144dfd0:	01805174 	movhi	r6,325
 144dfd4:	31b78d04 	addi	r6,r6,-8652
 144dfd8:	e1fffd17 	ldw	r7,-12(fp)
 144dfdc:	144f7800 	call	144f780 <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
 144dfe0:	e037883a 	mov	sp,fp
 144dfe4:	dfc00117 	ldw	ra,4(sp)
 144dfe8:	df000017 	ldw	fp,0(sp)
 144dfec:	dec00204 	addi	sp,sp,8
 144dff0:	f800283a 	ret

0144dff4 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
 144dff4:	defffa04 	addi	sp,sp,-24
 144dff8:	dfc00515 	stw	ra,20(sp)
 144dffc:	df000415 	stw	fp,16(sp)
 144e000:	df000404 	addi	fp,sp,16
 144e004:	e13ffc15 	stw	r4,-16(fp)
 144e008:	e17ffd15 	stw	r5,-12(fp)
 144e00c:	e1bffe15 	stw	r6,-8(fp)
 144e010:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
 144e014:	e0bffc17 	ldw	r2,-16(fp)
 144e018:	e0fffd17 	ldw	r3,-12(fp)
 144e01c:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
 144e020:	e0bffc17 	ldw	r2,-16(fp)
 144e024:	e0fffe17 	ldw	r3,-8(fp)
 144e028:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
 144e02c:	e0bffc17 	ldw	r2,-16(fp)
 144e030:	e0ffff17 	ldw	r3,-4(fp)
 144e034:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
 144e038:	e0bffd17 	ldw	r2,-12(fp)
 144e03c:	10000726 	beq	r2,zero,144e05c <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
 144e040:	e0bfff17 	ldw	r2,-4(fp)
 144e044:	1009883a 	mov	r4,r2
 144e048:	144e2bc0 	call	144e2bc <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
 144e04c:	e0bfff17 	ldw	r2,-4(fp)
 144e050:	1009883a 	mov	r4,r2
 144e054:	144e2380 	call	144e238 <adc_interrupt_enable>
 144e058:	00000606 	br	144e074 <alt_adc_register_callback+0x80>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
 144e05c:	e0bfff17 	ldw	r2,-4(fp)
 144e060:	1009883a 	mov	r4,r2
 144e064:	144e2780 	call	144e278 <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
 144e068:	e0bfff17 	ldw	r2,-4(fp)
 144e06c:	1009883a 	mov	r4,r2
 144e070:	144e2bc0 	call	144e2bc <adc_clear_interrupt_status>
	}
	
    
	
    return ;
 144e074:	0001883a 	nop
}
 144e078:	e037883a 	mov	sp,fp
 144e07c:	dfc00117 	ldw	ra,4(sp)
 144e080:	df000017 	ldw	fp,0(sp)
 144e084:	dec00204 	addi	sp,sp,8
 144e088:	f800283a 	ret

0144e08c <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
 144e08c:	defffc04 	addi	sp,sp,-16
 144e090:	dfc00315 	stw	ra,12(sp)
 144e094:	df000215 	stw	fp,8(sp)
 144e098:	df000204 	addi	fp,sp,8
 144e09c:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
 144e0a0:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
 144e0a4:	e13fff17 	ldw	r4,-4(fp)
 144e0a8:	d1600d04 	addi	r5,gp,-32716
 144e0ac:	144f61c0 	call	144f61c <alt_find_dev>
 144e0b0:	e0bffe15 	stw	r2,-8(fp)

    return dev;
 144e0b4:	e0bffe17 	ldw	r2,-8(fp)
}
 144e0b8:	e037883a 	mov	sp,fp
 144e0bc:	dfc00117 	ldw	ra,4(sp)
 144e0c0:	df000017 	ldw	fp,0(sp)
 144e0c4:	dec00204 	addi	sp,sp,8
 144e0c8:	f800283a 	ret

0144e0cc <adc_stop>:

void adc_stop(int sequencer_base)
{
 144e0cc:	defffe04 	addi	sp,sp,-8
 144e0d0:	df000115 	stw	fp,4(sp)
 144e0d4:	df000104 	addi	fp,sp,4
 144e0d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
 144e0dc:	e0bfff17 	ldw	r2,-4(fp)
 144e0e0:	e0ffff17 	ldw	r3,-4(fp)
 144e0e4:	19000037 	ldwio	r4,0(r3)
 144e0e8:	00ffff84 	movi	r3,-2
 144e0ec:	20c6703a 	and	r3,r4,r3
 144e0f0:	10c00035 	stwio	r3,0(r2)
 144e0f4:	0001883a 	nop
 144e0f8:	e0bfff17 	ldw	r2,-4(fp)
 144e0fc:	10800037 	ldwio	r2,0(r2)
 144e100:	1080004c 	andi	r2,r2,1
 144e104:	103ffc1e 	bne	r2,zero,144e0f8 <__alt_data_end+0xfffe88f8>
}
 144e108:	e037883a 	mov	sp,fp
 144e10c:	df000017 	ldw	fp,0(sp)
 144e110:	dec00104 	addi	sp,sp,4
 144e114:	f800283a 	ret

0144e118 <adc_start>:

void adc_start(int sequencer_base)
{
 144e118:	defffe04 	addi	sp,sp,-8
 144e11c:	df000115 	stw	fp,4(sp)
 144e120:	df000104 	addi	fp,sp,4
 144e124:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
 144e128:	e0bfff17 	ldw	r2,-4(fp)
 144e12c:	e0ffff17 	ldw	r3,-4(fp)
 144e130:	18c00037 	ldwio	r3,0(r3)
 144e134:	18c00054 	ori	r3,r3,1
 144e138:	10c00035 	stwio	r3,0(r2)
}
 144e13c:	e037883a 	mov	sp,fp
 144e140:	df000017 	ldw	fp,0(sp)
 144e144:	dec00104 	addi	sp,sp,4
 144e148:	f800283a 	ret

0144e14c <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
 144e14c:	defffe04 	addi	sp,sp,-8
 144e150:	df000115 	stw	fp,4(sp)
 144e154:	df000104 	addi	fp,sp,4
 144e158:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
 144e15c:	e0bfff17 	ldw	r2,-4(fp)
 144e160:	e0ffff17 	ldw	r3,-4(fp)
 144e164:	19000037 	ldwio	r4,0(r3)
 144e168:	00fffc44 	movi	r3,-15
 144e16c:	20c6703a 	and	r3,r4,r3
 144e170:	18c00094 	ori	r3,r3,2
 144e174:	10c00035 	stwio	r3,0(r2)
}
 144e178:	e037883a 	mov	sp,fp
 144e17c:	df000017 	ldw	fp,0(sp)
 144e180:	dec00104 	addi	sp,sp,4
 144e184:	f800283a 	ret

0144e188 <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
 144e188:	defffe04 	addi	sp,sp,-8
 144e18c:	df000115 	stw	fp,4(sp)
 144e190:	df000104 	addi	fp,sp,4
 144e194:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
 144e198:	e0bfff17 	ldw	r2,-4(fp)
 144e19c:	e0ffff17 	ldw	r3,-4(fp)
 144e1a0:	19000037 	ldwio	r4,0(r3)
 144e1a4:	00fffc44 	movi	r3,-15
 144e1a8:	20c6703a 	and	r3,r4,r3
 144e1ac:	10c00035 	stwio	r3,0(r2)
}
 144e1b0:	e037883a 	mov	sp,fp
 144e1b4:	df000017 	ldw	fp,0(sp)
 144e1b8:	dec00104 	addi	sp,sp,4
 144e1bc:	f800283a 	ret

0144e1c0 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
 144e1c0:	defffc04 	addi	sp,sp,-16
 144e1c4:	dfc00315 	stw	ra,12(sp)
 144e1c8:	df000215 	stw	fp,8(sp)
 144e1cc:	df000204 	addi	fp,sp,8
 144e1d0:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
 144e1d4:	e0bfff17 	ldw	r2,-4(fp)
 144e1d8:	10800037 	ldwio	r2,0(r2)
 144e1dc:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
 144e1e0:	e13fff17 	ldw	r4,-4(fp)
 144e1e4:	144e0cc0 	call	144e0cc <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
 144e1e8:	e0bfff17 	ldw	r2,-4(fp)
 144e1ec:	e0ffff17 	ldw	r3,-4(fp)
 144e1f0:	18c00037 	ldwio	r3,0(r3)
 144e1f4:	18c00394 	ori	r3,r3,14
 144e1f8:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
 144e1fc:	e13fff17 	ldw	r4,-4(fp)
 144e200:	144e1180 	call	144e118 <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 144e204:	0001883a 	nop
 144e208:	e0bfff17 	ldw	r2,-4(fp)
 144e20c:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
 144e210:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
 144e214:	103ffc1e 	bne	r2,zero,144e208 <__alt_data_end+0xfffe8a08>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
 144e218:	e0bfff17 	ldw	r2,-4(fp)
 144e21c:	e0fffe17 	ldw	r3,-8(fp)
 144e220:	10c00035 	stwio	r3,0(r2)
}
 144e224:	e037883a 	mov	sp,fp
 144e228:	dfc00117 	ldw	ra,4(sp)
 144e22c:	df000017 	ldw	fp,0(sp)
 144e230:	dec00204 	addi	sp,sp,8
 144e234:	f800283a 	ret

0144e238 <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
 144e238:	defffe04 	addi	sp,sp,-8
 144e23c:	df000115 	stw	fp,4(sp)
 144e240:	df000104 	addi	fp,sp,4
 144e244:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
 144e248:	e0bfff17 	ldw	r2,-4(fp)
 144e24c:	10804004 	addi	r2,r2,256
 144e250:	1007883a 	mov	r3,r2
 144e254:	e0bfff17 	ldw	r2,-4(fp)
 144e258:	10804004 	addi	r2,r2,256
 144e25c:	10800037 	ldwio	r2,0(r2)
 144e260:	10800054 	ori	r2,r2,1
 144e264:	18800035 	stwio	r2,0(r3)
}
 144e268:	e037883a 	mov	sp,fp
 144e26c:	df000017 	ldw	fp,0(sp)
 144e270:	dec00104 	addi	sp,sp,4
 144e274:	f800283a 	ret

0144e278 <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
 144e278:	defffe04 	addi	sp,sp,-8
 144e27c:	df000115 	stw	fp,4(sp)
 144e280:	df000104 	addi	fp,sp,4
 144e284:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
 144e288:	e0bfff17 	ldw	r2,-4(fp)
 144e28c:	10804004 	addi	r2,r2,256
 144e290:	1009883a 	mov	r4,r2
 144e294:	e0bfff17 	ldw	r2,-4(fp)
 144e298:	10804004 	addi	r2,r2,256
 144e29c:	10c00037 	ldwio	r3,0(r2)
 144e2a0:	00bfff84 	movi	r2,-2
 144e2a4:	1884703a 	and	r2,r3,r2
 144e2a8:	20800035 	stwio	r2,0(r4)
}
 144e2ac:	e037883a 	mov	sp,fp
 144e2b0:	df000017 	ldw	fp,0(sp)
 144e2b4:	dec00104 	addi	sp,sp,4
 144e2b8:	f800283a 	ret

0144e2bc <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
 144e2bc:	defffe04 	addi	sp,sp,-8
 144e2c0:	df000115 	stw	fp,4(sp)
 144e2c4:	df000104 	addi	fp,sp,4
 144e2c8:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
 144e2cc:	e0bfff17 	ldw	r2,-4(fp)
 144e2d0:	10804104 	addi	r2,r2,260
 144e2d4:	1007883a 	mov	r3,r2
 144e2d8:	e0bfff17 	ldw	r2,-4(fp)
 144e2dc:	10804104 	addi	r2,r2,260
 144e2e0:	10800037 	ldwio	r2,0(r2)
 144e2e4:	10800054 	ori	r2,r2,1
 144e2e8:	18800035 	stwio	r2,0(r3)
}
 144e2ec:	e037883a 	mov	sp,fp
 144e2f0:	df000017 	ldw	fp,0(sp)
 144e2f4:	dec00104 	addi	sp,sp,4
 144e2f8:	f800283a 	ret

0144e2fc <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
 144e2fc:	defffe04 	addi	sp,sp,-8
 144e300:	df000115 	stw	fp,4(sp)
 144e304:	df000104 	addi	fp,sp,4
 144e308:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
 144e30c:	e0bfff17 	ldw	r2,-4(fp)
 144e310:	10804104 	addi	r2,r2,260
 144e314:	10800037 	ldwio	r2,0(r2)
 144e318:	1080004c 	andi	r2,r2,1
 144e31c:	10000226 	beq	r2,zero,144e328 <adc_interrupt_asserted+0x2c>
 144e320:	00bfffc4 	movi	r2,-1
 144e324:	00000106 	br	144e32c <adc_interrupt_asserted+0x30>
 144e328:	0005883a 	mov	r2,zero
}
 144e32c:	e037883a 	mov	sp,fp
 144e330:	df000017 	ldw	fp,0(sp)
 144e334:	dec00104 	addi	sp,sp,4
 144e338:	f800283a 	ret

0144e33c <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
 144e33c:	defffe04 	addi	sp,sp,-8
 144e340:	df000115 	stw	fp,4(sp)
 144e344:	df000104 	addi	fp,sp,4
 144e348:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
 144e34c:	0001883a 	nop
 144e350:	e0bfff17 	ldw	r2,-4(fp)
 144e354:	10804104 	addi	r2,r2,260
 144e358:	10800037 	ldwio	r2,0(r2)
 144e35c:	1080004c 	andi	r2,r2,1
 144e360:	103ffb26 	beq	r2,zero,144e350 <__alt_data_end+0xfffe8b50>
}
 144e364:	e037883a 	mov	sp,fp
 144e368:	df000017 	ldw	fp,0(sp)
 144e36c:	dec00104 	addi	sp,sp,4
 144e370:	f800283a 	ret

0144e374 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 144e374:	defffd04 	addi	sp,sp,-12
 144e378:	dfc00215 	stw	ra,8(sp)
 144e37c:	df000115 	stw	fp,4(sp)
 144e380:	df000104 	addi	fp,sp,4
 144e384:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 144e388:	e13fff17 	ldw	r4,-4(fp)
 144e38c:	01405174 	movhi	r5,325
 144e390:	29456204 	addi	r5,r5,5512
 144e394:	144f5780 	call	144f578 <alt_dev_llist_insert>
}
 144e398:	e037883a 	mov	sp,fp
 144e39c:	dfc00117 	ldw	ra,4(sp)
 144e3a0:	df000017 	ldw	fp,0(sp)
 144e3a4:	dec00204 	addi	sp,sp,8
 144e3a8:	f800283a 	ret

0144e3ac <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 144e3ac:	defff704 	addi	sp,sp,-36
 144e3b0:	dfc00815 	stw	ra,32(sp)
 144e3b4:	df000715 	stw	fp,28(sp)
 144e3b8:	df000704 	addi	fp,sp,28
 144e3bc:	e13ffc15 	stw	r4,-16(fp)
 144e3c0:	e17ffd15 	stw	r5,-12(fp)
 144e3c4:	e1bffe15 	stw	r6,-8(fp)
 144e3c8:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
 144e3cc:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
 144e3d0:	e0bffc17 	ldw	r2,-16(fp)
 144e3d4:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
 144e3d8:	e0bffa17 	ldw	r2,-24(fp)
 144e3dc:	10800b17 	ldw	r2,44(r2)
 144e3e0:	e0fffd17 	ldw	r3,-12(fp)
 144e3e4:	1880060e 	bge	r3,r2,144e400 <alt_onchip_flash_read+0x54>
 144e3e8:	e0fffd17 	ldw	r3,-12(fp)
 144e3ec:	e0bfff17 	ldw	r2,-4(fp)
 144e3f0:	1885883a 	add	r2,r3,r2
 144e3f4:	e0fffa17 	ldw	r3,-24(fp)
 144e3f8:	18c00b17 	ldw	r3,44(r3)
 144e3fc:	1880020e 	bge	r3,r2,144e408 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
 144e400:	00bffc84 	movi	r2,-14
 144e404:	00001706 	br	144e464 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 144e408:	e0bffa17 	ldw	r2,-24(fp)
 144e40c:	10c00a17 	ldw	r3,40(r2)
 144e410:	e0bffd17 	ldw	r2,-12(fp)
 144e414:	1887883a 	add	r3,r3,r2
 144e418:	e0bfff17 	ldw	r2,-4(fp)
 144e41c:	e13ffe17 	ldw	r4,-8(fp)
 144e420:	180b883a 	mov	r5,r3
 144e424:	100d883a 	mov	r6,r2
 144e428:	1447ce80 	call	1447ce8 <memcpy>

    if (NULL != flash->csr_base) {
 144e42c:	e0bffa17 	ldw	r2,-24(fp)
 144e430:	10802f17 	ldw	r2,188(r2)
 144e434:	10000a26 	beq	r2,zero,144e460 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
 144e438:	e0bffa17 	ldw	r2,-24(fp)
 144e43c:	10802f17 	ldw	r2,188(r2)
 144e440:	10800037 	ldwio	r2,0(r2)
 144e444:	1080010c 	andi	r2,r2,4
 144e448:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
 144e44c:	e0bffb17 	ldw	r2,-20(fp)
 144e450:	10800120 	cmpeqi	r2,r2,4
 144e454:	1000021e 	bne	r2,zero,144e460 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
 144e458:	00bffec4 	movi	r2,-5
 144e45c:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
 144e460:	e0bff917 	ldw	r2,-28(fp)
}
 144e464:	e037883a 	mov	sp,fp
 144e468:	dfc00117 	ldw	ra,4(sp)
 144e46c:	df000017 	ldw	fp,0(sp)
 144e470:	dec00204 	addi	sp,sp,8
 144e474:	f800283a 	ret

0144e478 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
 144e478:	defffa04 	addi	sp,sp,-24
 144e47c:	df000515 	stw	fp,20(sp)
 144e480:	df000504 	addi	fp,sp,20
 144e484:	e13ffd15 	stw	r4,-12(fp)
 144e488:	e17ffe15 	stw	r5,-8(fp)
 144e48c:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
 144e490:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
 144e494:	e0bffd17 	ldw	r2,-12(fp)
 144e498:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
 144e49c:	e0bfff17 	ldw	r2,-4(fp)
 144e4a0:	10000426 	beq	r2,zero,144e4b4 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
 144e4a4:	e0bffc17 	ldw	r2,-16(fp)
 144e4a8:	10c00c17 	ldw	r3,48(r2)
 144e4ac:	e0bfff17 	ldw	r2,-4(fp)
 144e4b0:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
 144e4b4:	e0bffc17 	ldw	r2,-16(fp)
 144e4b8:	10800c17 	ldw	r2,48(r2)
 144e4bc:	1000031e 	bne	r2,zero,144e4cc <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
 144e4c0:	00bffd04 	movi	r2,-12
 144e4c4:	e0bffb15 	stw	r2,-20(fp)
 144e4c8:	00000d06 	br	144e500 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 144e4cc:	e0bffc17 	ldw	r2,-16(fp)
 144e4d0:	10800c17 	ldw	r2,48(r2)
 144e4d4:	10800250 	cmplti	r2,r2,9
 144e4d8:	1000031e 	bne	r2,zero,144e4e8 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
 144e4dc:	00bffc84 	movi	r2,-14
 144e4e0:	e0bffb15 	stw	r2,-20(fp)
 144e4e4:	00000606 	br	144e500 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
 144e4e8:	e0bffe17 	ldw	r2,-8(fp)
 144e4ec:	10000426 	beq	r2,zero,144e500 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
 144e4f0:	e0bffc17 	ldw	r2,-16(fp)
 144e4f4:	10c00d04 	addi	r3,r2,52
 144e4f8:	e0bffe17 	ldw	r2,-8(fp)
 144e4fc:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
 144e500:	e0bffb17 	ldw	r2,-20(fp)
}
 144e504:	e037883a 	mov	sp,fp
 144e508:	df000017 	ldw	fp,0(sp)
 144e50c:	dec00104 	addi	sp,sp,4
 144e510:	f800283a 	ret

0144e514 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
 144e514:	defff904 	addi	sp,sp,-28
 144e518:	dfc00615 	stw	ra,24(sp)
 144e51c:	df000515 	stw	fp,20(sp)
 144e520:	df000504 	addi	fp,sp,20
 144e524:	e13ffe15 	stw	r4,-8(fp)
 144e528:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
 144e52c:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
 144e530:	e0bffe17 	ldw	r2,-8(fp)
 144e534:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
 144e538:	e0bffc17 	ldw	r2,-16(fp)
 144e53c:	10800b17 	ldw	r2,44(r2)
 144e540:	e0ffff17 	ldw	r3,-4(fp)
 144e544:	18800216 	blt	r3,r2,144e550 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
 144e548:	00bffc84 	movi	r2,-14
 144e54c:	00004606 	br	144e668 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
 144e550:	e0bffc17 	ldw	r2,-16(fp)
 144e554:	10802f17 	ldw	r2,188(r2)
 144e558:	10000326 	beq	r2,zero,144e568 <alt_onchip_flash_erase_block+0x54>
 144e55c:	e0bffc17 	ldw	r2,-16(fp)
 144e560:	10802e17 	ldw	r2,184(r2)
 144e564:	10000226 	beq	r2,zero,144e570 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
 144e568:	00bffb44 	movi	r2,-19
 144e56c:	00003e06 	br	144e668 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
 144e570:	e0bffc17 	ldw	r2,-16(fp)
 144e574:	10803f17 	ldw	r2,252(r2)
 144e578:	10ffffc4 	addi	r3,r2,-1
 144e57c:	e0bfff17 	ldw	r2,-4(fp)
 144e580:	1884703a 	and	r2,r3,r2
 144e584:	10000226 	beq	r2,zero,144e590 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
 144e588:	00bffa84 	movi	r2,-22
 144e58c:	00003606 	br	144e668 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 144e590:	e13ffc17 	ldw	r4,-16(fp)
 144e594:	144f0f00 	call	144f0f0 <alt_onchip_flash_poll_for_status_to_go_idle>
 144e598:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
 144e59c:	e0bffb17 	ldw	r2,-20(fp)
 144e5a0:	10000226 	beq	r2,zero,144e5ac <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
 144e5a4:	e0bffb17 	ldw	r2,-20(fp)
 144e5a8:	00002f06 	br	144e668 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 144e5ac:	e0bffc17 	ldw	r2,-16(fp)
 144e5b0:	10802f17 	ldw	r2,188(r2)
 144e5b4:	10c00104 	addi	r3,r2,4
 144e5b8:	e0bffc17 	ldw	r2,-16(fp)
 144e5bc:	10802f17 	ldw	r2,188(r2)
 144e5c0:	10800104 	addi	r2,r2,4
 144e5c4:	10800037 	ldwio	r2,0(r2)
 144e5c8:	113c002c 	andhi	r4,r2,61440
 144e5cc:	00802034 	movhi	r2,128
 144e5d0:	10bfffc4 	addi	r2,r2,-1
 144e5d4:	2084b03a 	or	r2,r4,r2
 144e5d8:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
 144e5dc:	e0bfff17 	ldw	r2,-4(fp)
 144e5e0:	1000010e 	bge	r2,zero,144e5e8 <alt_onchip_flash_erase_block+0xd4>
 144e5e4:	108000c4 	addi	r2,r2,3
 144e5e8:	1005d0ba 	srai	r2,r2,2
 144e5ec:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 144e5f0:	e0bffc17 	ldw	r2,-16(fp)
 144e5f4:	10802f17 	ldw	r2,188(r2)
 144e5f8:	10800104 	addi	r2,r2,4
 144e5fc:	e0fffc17 	ldw	r3,-16(fp)
 144e600:	18c02f17 	ldw	r3,188(r3)
 144e604:	18c00104 	addi	r3,r3,4
 144e608:	18c00037 	ldwio	r3,0(r3)
 144e60c:	193c002c 	andhi	r4,r3,61440
 144e610:	e0fffd17 	ldw	r3,-12(fp)
 144e614:	18c01c34 	orhi	r3,r3,112
 144e618:	20c6b03a 	or	r3,r4,r3
 144e61c:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 144e620:	e13ffc17 	ldw	r4,-16(fp)
 144e624:	144f0f00 	call	144f0f0 <alt_onchip_flash_poll_for_status_to_go_idle>
 144e628:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
 144e62c:	e13ffc17 	ldw	r4,-16(fp)
 144e630:	144f1700 	call	144f170 <alt_onchip_flash_poll_for_status_erase_passed>
 144e634:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 144e638:	e0bffc17 	ldw	r2,-16(fp)
 144e63c:	10802f17 	ldw	r2,188(r2)
 144e640:	10c00104 	addi	r3,r2,4
 144e644:	e0bffc17 	ldw	r2,-16(fp)
 144e648:	10802f17 	ldw	r2,188(r2)
 144e64c:	10800104 	addi	r2,r2,4
 144e650:	11000037 	ldwio	r4,0(r2)
 144e654:	00840034 	movhi	r2,4096
 144e658:	10bfffc4 	addi	r2,r2,-1
 144e65c:	2084b03a 	or	r2,r4,r2
 144e660:	18800035 	stwio	r2,0(r3)

    return ret_code;
 144e664:	e0bffb17 	ldw	r2,-20(fp)
}
 144e668:	e037883a 	mov	sp,fp
 144e66c:	dfc00117 	ldw	ra,4(sp)
 144e670:	df000017 	ldw	fp,0(sp)
 144e674:	dec00204 	addi	sp,sp,8
 144e678:	f800283a 	ret

0144e67c <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
 144e67c:	defff204 	addi	sp,sp,-56
 144e680:	dfc00d15 	stw	ra,52(sp)
 144e684:	df000c15 	stw	fp,48(sp)
 144e688:	df000c04 	addi	fp,sp,48
 144e68c:	e13ffc15 	stw	r4,-16(fp)
 144e690:	e17ffd15 	stw	r5,-12(fp)
 144e694:	e1bffe15 	stw	r6,-8(fp)
 144e698:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
 144e69c:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
 144e6a0:	e0bffc17 	ldw	r2,-16(fp)
 144e6a4:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
 144e6a8:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
 144e6ac:	e0bffe17 	ldw	r2,-8(fp)
 144e6b0:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 144e6b4:	e0bff817 	ldw	r2,-32(fp)
 144e6b8:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
 144e6bc:	e0fffd17 	ldw	r3,-12(fp)
 144e6c0:	18800a0e 	bge	r3,r2,144e6ec <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
 144e6c4:	e0bff817 	ldw	r2,-32(fp)
 144e6c8:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 144e6cc:	e0fffe17 	ldw	r3,-8(fp)
 144e6d0:	1880060e 	bge	r3,r2,144e6ec <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
 144e6d4:	e0bff817 	ldw	r2,-32(fp)
 144e6d8:	10c00b17 	ldw	r3,44(r2)
 144e6dc:	e0bffe17 	ldw	r2,-8(fp)
 144e6e0:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
 144e6e4:	e0800217 	ldw	r2,8(fp)
 144e6e8:	1880020e 	bge	r3,r2,144e6f4 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
 144e6ec:	00bffc84 	movi	r2,-14
 144e6f0:	00008e06 	br	144e92c <alt_onchip_flash_write_block+0x2b0>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
 144e6f4:	e0bff817 	ldw	r2,-32(fp)
 144e6f8:	10802f17 	ldw	r2,188(r2)
 144e6fc:	10000326 	beq	r2,zero,144e70c <alt_onchip_flash_write_block+0x90>
 144e700:	e0bff817 	ldw	r2,-32(fp)
 144e704:	10802e17 	ldw	r2,184(r2)
 144e708:	10000226 	beq	r2,zero,144e714 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
 144e70c:	00bffb44 	movi	r2,-19
 144e710:	00008606 	br	144e92c <alt_onchip_flash_write_block+0x2b0>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 144e714:	e13ff817 	ldw	r4,-32(fp)
 144e718:	144f0f00 	call	144f0f0 <alt_onchip_flash_poll_for_status_to_go_idle>
 144e71c:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
 144e720:	e0bff417 	ldw	r2,-48(fp)
 144e724:	10000226 	beq	r2,zero,144e730 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
 144e728:	e0bff417 	ldw	r2,-48(fp)
 144e72c:	00007f06 	br	144e92c <alt_onchip_flash_write_block+0x2b0>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 144e730:	e0bff817 	ldw	r2,-32(fp)
 144e734:	10802f17 	ldw	r2,188(r2)
 144e738:	10c00104 	addi	r3,r2,4
 144e73c:	e0bff817 	ldw	r2,-32(fp)
 144e740:	10802f17 	ldw	r2,188(r2)
 144e744:	10800104 	addi	r2,r2,4
 144e748:	10800037 	ldwio	r2,0(r2)
 144e74c:	113c002c 	andhi	r4,r2,61440
 144e750:	00802034 	movhi	r2,128
 144e754:	10bfffc4 	addi	r2,r2,-1
 144e758:	2084b03a 	or	r2,r4,r2
 144e75c:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
 144e760:	00006406 	br	144e8f4 <alt_onchip_flash_write_block+0x278>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 144e764:	00bfffc4 	movi	r2,-1
 144e768:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
 144e76c:	e0bff617 	ldw	r2,-40(fp)
 144e770:	108000cc 	andi	r2,r2,3
 144e774:	10001d1e 	bne	r2,zero,144e7ec <alt_onchip_flash_write_block+0x170>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 144e778:	e0bff617 	ldw	r2,-40(fp)
 144e77c:	10c00104 	addi	r3,r2,4
 144e780:	00bfff04 	movi	r2,-4
 144e784:	1884703a 	and	r2,r3,r2
 144e788:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
 144e78c:	e0fff717 	ldw	r3,-36(fp)
 144e790:	e0bff617 	ldw	r2,-40(fp)
 144e794:	1885c83a 	sub	r2,r3,r2
 144e798:	e0c00217 	ldw	r3,8(fp)
 144e79c:	1880010e 	bge	r3,r2,144e7a4 <alt_onchip_flash_write_block+0x128>
 144e7a0:	1805883a 	mov	r2,r3
 144e7a4:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
 144e7a8:	e0bff517 	ldw	r2,-44(fp)
 144e7ac:	e0ffff17 	ldw	r3,-4(fp)
 144e7b0:	1887883a 	add	r3,r3,r2
 144e7b4:	e0bff917 	ldw	r2,-28(fp)
 144e7b8:	e13ffb04 	addi	r4,fp,-20
 144e7bc:	180b883a 	mov	r5,r3
 144e7c0:	100d883a 	mov	r6,r2
 144e7c4:	1447ce80 	call	1447ce8 <memcpy>
            buffer_offset += length_of_current_write;
 144e7c8:	e0fff517 	ldw	r3,-44(fp)
 144e7cc:	e0bff917 	ldw	r2,-28(fp)
 144e7d0:	1885883a 	add	r2,r3,r2
 144e7d4:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
 144e7d8:	e0c00217 	ldw	r3,8(fp)
 144e7dc:	e0bff917 	ldw	r2,-28(fp)
 144e7e0:	1885c83a 	sub	r2,r3,r2
 144e7e4:	e0800215 	stw	r2,8(fp)
 144e7e8:	00002e06 	br	144e8a4 <alt_onchip_flash_write_block+0x228>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 144e7ec:	e0bff617 	ldw	r2,-40(fp)
 144e7f0:	108000cc 	andi	r2,r2,3
 144e7f4:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
 144e7f8:	e0fff617 	ldw	r3,-40(fp)
 144e7fc:	e0bffa17 	ldw	r2,-24(fp)
 144e800:	1885c83a 	sub	r2,r3,r2
 144e804:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 144e808:	e0bff617 	ldw	r2,-40(fp)
 144e80c:	10c00104 	addi	r3,r2,4
 144e810:	00bfff04 	movi	r2,-4
 144e814:	1884703a 	and	r2,r3,r2
 144e818:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
 144e81c:	e0fff717 	ldw	r3,-36(fp)
 144e820:	e0bff617 	ldw	r2,-40(fp)
 144e824:	1889c83a 	sub	r4,r3,r2
 144e828:	e0c00217 	ldw	r3,8(fp)
 144e82c:	e0bffa17 	ldw	r2,-24(fp)
 144e830:	1887883a 	add	r3,r3,r2
 144e834:	2005883a 	mov	r2,r4
 144e838:	1880010e 	bge	r3,r2,144e840 <alt_onchip_flash_write_block+0x1c4>
 144e83c:	1805883a 	mov	r2,r3
 144e840:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
 144e844:	e0fffb04 	addi	r3,fp,-20
 144e848:	e0bffa17 	ldw	r2,-24(fp)
 144e84c:	1885883a 	add	r2,r3,r2
 144e850:	1009883a 	mov	r4,r2
 144e854:	e0bff517 	ldw	r2,-44(fp)
 144e858:	e0ffff17 	ldw	r3,-4(fp)
 144e85c:	188b883a 	add	r5,r3,r2
 144e860:	e0fff917 	ldw	r3,-28(fp)
 144e864:	e0bffa17 	ldw	r2,-24(fp)
 144e868:	1885c83a 	sub	r2,r3,r2
 144e86c:	100d883a 	mov	r6,r2
 144e870:	1447ce80 	call	1447ce8 <memcpy>
            buffer_offset += length_of_current_write - padding;
 144e874:	e0fff917 	ldw	r3,-28(fp)
 144e878:	e0bffa17 	ldw	r2,-24(fp)
 144e87c:	1885c83a 	sub	r2,r3,r2
 144e880:	e0fff517 	ldw	r3,-44(fp)
 144e884:	1885883a 	add	r2,r3,r2
 144e888:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
 144e88c:	e0fffa17 	ldw	r3,-24(fp)
 144e890:	e0bff917 	ldw	r2,-28(fp)
 144e894:	1885c83a 	sub	r2,r3,r2
 144e898:	e0c00217 	ldw	r3,8(fp)
 144e89c:	1885883a 	add	r2,r3,r2
 144e8a0:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
 144e8a4:	e0bff817 	ldw	r2,-32(fp)
 144e8a8:	10c00a17 	ldw	r3,40(r2)
 144e8ac:	e0bff617 	ldw	r2,-40(fp)
 144e8b0:	1885883a 	add	r2,r3,r2
 144e8b4:	e0fffb17 	ldw	r3,-20(fp)
 144e8b8:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 144e8bc:	e13ff817 	ldw	r4,-32(fp)
 144e8c0:	144f0f00 	call	144f0f0 <alt_onchip_flash_poll_for_status_to_go_idle>
 144e8c4:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
 144e8c8:	e0bff417 	ldw	r2,-48(fp)
 144e8cc:	10000126 	beq	r2,zero,144e8d4 <alt_onchip_flash_write_block+0x258>
        {
            break;
 144e8d0:	00000a06 	br	144e8fc <alt_onchip_flash_write_block+0x280>
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
 144e8d4:	e13ff817 	ldw	r4,-32(fp)
 144e8d8:	144f1f00 	call	144f1f0 <alt_onchip_flash_poll_for_status_write_passed>
 144e8dc:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
 144e8e0:	e0bff417 	ldw	r2,-48(fp)
 144e8e4:	10000126 	beq	r2,zero,144e8ec <alt_onchip_flash_write_block+0x270>
        {
            break;
 144e8e8:	00000406 	br	144e8fc <alt_onchip_flash_write_block+0x280>
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
 144e8ec:	e0bff717 	ldw	r2,-36(fp)
 144e8f0:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
 144e8f4:	e0800217 	ldw	r2,8(fp)
 144e8f8:	103f9a1e 	bne	r2,zero,144e764 <__alt_data_end+0xfffe8f64>
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 144e8fc:	e0bff817 	ldw	r2,-32(fp)
 144e900:	10802f17 	ldw	r2,188(r2)
 144e904:	10c00104 	addi	r3,r2,4
 144e908:	e0bff817 	ldw	r2,-32(fp)
 144e90c:	10802f17 	ldw	r2,188(r2)
 144e910:	10800104 	addi	r2,r2,4
 144e914:	11000037 	ldwio	r4,0(r2)
 144e918:	00840034 	movhi	r2,4096
 144e91c:	10bfffc4 	addi	r2,r2,-1
 144e920:	2084b03a 	or	r2,r4,r2
 144e924:	18800035 	stwio	r2,0(r3)

    return ret_code;
 144e928:	e0bff417 	ldw	r2,-48(fp)
}
 144e92c:	e037883a 	mov	sp,fp
 144e930:	dfc00117 	ldw	ra,4(sp)
 144e934:	df000017 	ldw	fp,0(sp)
 144e938:	dec00204 	addi	sp,sp,8
 144e93c:	f800283a 	ret

0144e940 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
 144e940:	defff104 	addi	sp,sp,-60
 144e944:	dfc00e15 	stw	ra,56(sp)
 144e948:	df000d15 	stw	fp,52(sp)
 144e94c:	df000d04 	addi	fp,sp,52
 144e950:	e13ffc15 	stw	r4,-16(fp)
 144e954:	e17ffd15 	stw	r5,-12(fp)
 144e958:	e1bffe15 	stw	r6,-8(fp)
 144e95c:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
 144e960:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
 144e964:	e0bfff17 	ldw	r2,-4(fp)
 144e968:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
 144e96c:	e0bffd17 	ldw	r2,-12(fp)
 144e970:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
 144e974:	e0bffc17 	ldw	r2,-16(fp)
 144e978:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 144e97c:	e0bffa17 	ldw	r2,-24(fp)
 144e980:	10800b17 	ldw	r2,44(r2)
 144e984:	e0fffd17 	ldw	r3,-12(fp)
 144e988:	1880060e 	bge	r3,r2,144e9a4 <alt_onchip_flash_write+0x64>
 144e98c:	e0bffa17 	ldw	r2,-24(fp)
 144e990:	10c00b17 	ldw	r3,44(r2)
 144e994:	e0bffd17 	ldw	r2,-12(fp)
 144e998:	1887c83a 	sub	r3,r3,r2
 144e99c:	e0bfff17 	ldw	r2,-4(fp)
 144e9a0:	1880020e 	bge	r3,r2,144e9ac <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
 144e9a4:	00bffc84 	movi	r2,-14
 144e9a8:	00009606 	br	144ec04 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 144e9ac:	e03ff515 	stw	zero,-44(fp)
 144e9b0:	00008706 	br	144ebd0 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 144e9b4:	e0fffa17 	ldw	r3,-24(fp)
 144e9b8:	e0bff517 	ldw	r2,-44(fp)
 144e9bc:	1004913a 	slli	r2,r2,4
 144e9c0:	1885883a 	add	r2,r3,r2
 144e9c4:	10800d04 	addi	r2,r2,52
 144e9c8:	10800017 	ldw	r2,0(r2)
 144e9cc:	e0fffd17 	ldw	r3,-12(fp)
 144e9d0:	18807c16 	blt	r3,r2,144ebc4 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
 144e9d4:	e0fffa17 	ldw	r3,-24(fp)
 144e9d8:	e0bff517 	ldw	r2,-44(fp)
 144e9dc:	1004913a 	slli	r2,r2,4
 144e9e0:	1885883a 	add	r2,r3,r2
 144e9e4:	10800d04 	addi	r2,r2,52
 144e9e8:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
 144e9ec:	e13ffa17 	ldw	r4,-24(fp)
 144e9f0:	e0bff517 	ldw	r2,-44(fp)
 144e9f4:	1004913a 	slli	r2,r2,4
 144e9f8:	2085883a 	add	r2,r4,r2
 144e9fc:	10800e04 	addi	r2,r2,56
 144ea00:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
 144ea04:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 144ea08:	e0fffd17 	ldw	r3,-12(fp)
 144ea0c:	18806d0e 	bge	r3,r2,144ebc4 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
 144ea10:	e0fffa17 	ldw	r3,-24(fp)
 144ea14:	e0bff517 	ldw	r2,-44(fp)
 144ea18:	1004913a 	slli	r2,r2,4
 144ea1c:	1885883a 	add	r2,r3,r2
 144ea20:	10800d04 	addi	r2,r2,52
 144ea24:	10800017 	ldw	r2,0(r2)
 144ea28:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 144ea2c:	e03ff615 	stw	zero,-40(fp)
 144ea30:	00005c06 	br	144eba4 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
 144ea34:	e0fffd17 	ldw	r3,-12(fp)
 144ea38:	e0bff717 	ldw	r2,-36(fp)
 144ea3c:	18804d16 	blt	r3,r2,144eb74 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
 144ea40:	e0fffa17 	ldw	r3,-24(fp)
 144ea44:	e0bff517 	ldw	r2,-44(fp)
 144ea48:	10800104 	addi	r2,r2,4
 144ea4c:	1004913a 	slli	r2,r2,4
 144ea50:	1885883a 	add	r2,r3,r2
 144ea54:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
 144ea58:	e0bff717 	ldw	r2,-36(fp)
 144ea5c:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
 144ea60:	e0fffd17 	ldw	r3,-12(fp)
 144ea64:	1880430e 	bge	r3,r2,144eb74 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
 144ea68:	e0fffa17 	ldw	r3,-24(fp)
 144ea6c:	e0bff517 	ldw	r2,-44(fp)
 144ea70:	10800104 	addi	r2,r2,4
 144ea74:	1004913a 	slli	r2,r2,4
 144ea78:	1885883a 	add	r2,r3,r2
 144ea7c:	10c00017 	ldw	r3,0(r2)
 144ea80:	e0bff717 	ldw	r2,-36(fp)
 144ea84:	1887883a 	add	r3,r3,r2
 144ea88:	e0bffd17 	ldw	r2,-12(fp)
 144ea8c:	1885c83a 	sub	r2,r3,r2
 144ea90:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
 144ea94:	e0fffb17 	ldw	r3,-20(fp)
 144ea98:	e0bfff17 	ldw	r2,-4(fp)
 144ea9c:	1880010e 	bge	r3,r2,144eaa4 <alt_onchip_flash_write+0x164>
 144eaa0:	1805883a 	mov	r2,r3
 144eaa4:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
 144eaa8:	e0bffa17 	ldw	r2,-24(fp)
 144eaac:	10c00a17 	ldw	r3,40(r2)
 144eab0:	e0bffd17 	ldw	r2,-12(fp)
 144eab4:	1887883a 	add	r3,r3,r2
 144eab8:	e0bffb17 	ldw	r2,-20(fp)
 144eabc:	e13ffe17 	ldw	r4,-8(fp)
 144eac0:	180b883a 	mov	r5,r3
 144eac4:	100d883a 	mov	r6,r2
 144eac8:	14502c40 	call	14502c4 <memcmp>
 144eacc:	10001326 	beq	r2,zero,144eb1c <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
 144ead0:	e0bffa17 	ldw	r2,-24(fp)
 144ead4:	10800817 	ldw	r2,32(r2)
 144ead8:	e0fffa17 	ldw	r3,-24(fp)
 144eadc:	1809883a 	mov	r4,r3
 144eae0:	e17ff717 	ldw	r5,-36(fp)
 144eae4:	103ee83a 	callr	r2
 144eae8:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
 144eaec:	e0bff417 	ldw	r2,-48(fp)
 144eaf0:	10000a1e 	bne	r2,zero,144eb1c <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
 144eaf4:	e0bffa17 	ldw	r2,-24(fp)
 144eaf8:	10800917 	ldw	r2,36(r2)
 144eafc:	e13ffa17 	ldw	r4,-24(fp)
 144eb00:	e0fffb17 	ldw	r3,-20(fp)
 144eb04:	d8c00015 	stw	r3,0(sp)
 144eb08:	e17ff717 	ldw	r5,-36(fp)
 144eb0c:	e1bffd17 	ldw	r6,-12(fp)
 144eb10:	e1fffe17 	ldw	r7,-8(fp)
 144eb14:	103ee83a 	callr	r2
 144eb18:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 144eb1c:	e0ffff17 	ldw	r3,-4(fp)
 144eb20:	e0bffb17 	ldw	r2,-20(fp)
 144eb24:	18802e26 	beq	r3,r2,144ebe0 <alt_onchip_flash_write+0x2a0>
 144eb28:	e0bff417 	ldw	r2,-48(fp)
 144eb2c:	10002c1e 	bne	r2,zero,144ebe0 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
 144eb30:	e0ffff17 	ldw	r3,-4(fp)
 144eb34:	e0bffb17 	ldw	r2,-20(fp)
 144eb38:	1885c83a 	sub	r2,r3,r2
 144eb3c:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
 144eb40:	e0fffa17 	ldw	r3,-24(fp)
 144eb44:	e0bff517 	ldw	r2,-44(fp)
 144eb48:	10800104 	addi	r2,r2,4
 144eb4c:	1004913a 	slli	r2,r2,4
 144eb50:	1885883a 	add	r2,r3,r2
 144eb54:	10c00017 	ldw	r3,0(r2)
 144eb58:	e0bff717 	ldw	r2,-36(fp)
 144eb5c:	1885883a 	add	r2,r3,r2
 144eb60:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
 144eb64:	e0bffb17 	ldw	r2,-20(fp)
 144eb68:	e0fffe17 	ldw	r3,-8(fp)
 144eb6c:	1885883a 	add	r2,r3,r2
 144eb70:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
 144eb74:	e0fffa17 	ldw	r3,-24(fp)
 144eb78:	e0bff517 	ldw	r2,-44(fp)
 144eb7c:	10800104 	addi	r2,r2,4
 144eb80:	1004913a 	slli	r2,r2,4
 144eb84:	1885883a 	add	r2,r3,r2
 144eb88:	10800017 	ldw	r2,0(r2)
 144eb8c:	e0fff717 	ldw	r3,-36(fp)
 144eb90:	1885883a 	add	r2,r3,r2
 144eb94:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 144eb98:	e0bff617 	ldw	r2,-40(fp)
 144eb9c:	10800044 	addi	r2,r2,1
 144eba0:	e0bff615 	stw	r2,-40(fp)
 144eba4:	e0fffa17 	ldw	r3,-24(fp)
 144eba8:	e0bff517 	ldw	r2,-44(fp)
 144ebac:	1004913a 	slli	r2,r2,4
 144ebb0:	1885883a 	add	r2,r3,r2
 144ebb4:	10800f04 	addi	r2,r2,60
 144ebb8:	10800017 	ldw	r2,0(r2)
 144ebbc:	e0fff617 	ldw	r3,-40(fp)
 144ebc0:	18bf9c16 	blt	r3,r2,144ea34 <__alt_data_end+0xfffe9234>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 144ebc4:	e0bff517 	ldw	r2,-44(fp)
 144ebc8:	10800044 	addi	r2,r2,1
 144ebcc:	e0bff515 	stw	r2,-44(fp)
 144ebd0:	e0bffa17 	ldw	r2,-24(fp)
 144ebd4:	10800c17 	ldw	r2,48(r2)
 144ebd8:	e0fff517 	ldw	r3,-44(fp)
 144ebdc:	18bf7516 	blt	r3,r2,144e9b4 <__alt_data_end+0xfffe91b4>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
 144ebe0:	e0bffa17 	ldw	r2,-24(fp)
 144ebe4:	10c00a17 	ldw	r3,40(r2)
 144ebe8:	e0bff917 	ldw	r2,-28(fp)
 144ebec:	1887883a 	add	r3,r3,r2
 144ebf0:	e0bff817 	ldw	r2,-32(fp)
 144ebf4:	1809883a 	mov	r4,r3
 144ebf8:	100b883a 	mov	r5,r2
 144ebfc:	144f4e80 	call	144f4e8 <alt_dcache_flush>
    return ret_code;
 144ec00:	e0bff417 	ldw	r2,-48(fp)
}
 144ec04:	e037883a 	mov	sp,fp
 144ec08:	dfc00117 	ldw	ra,4(sp)
 144ec0c:	df000017 	ldw	fp,0(sp)
 144ec10:	dec00204 	addi	sp,sp,8
 144ec14:	f800283a 	ret

0144ec18 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
 144ec18:	defff504 	addi	sp,sp,-44
 144ec1c:	dfc00a15 	stw	ra,40(sp)
 144ec20:	df000915 	stw	fp,36(sp)
 144ec24:	dc000815 	stw	r16,32(sp)
 144ec28:	df000904 	addi	fp,sp,36
 144ec2c:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
 144ec30:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
 144ec34:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 144ec38:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 144ec3c:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 144ec40:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 144ec44:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
 144ec48:	e0bffe17 	ldw	r2,-8(fp)
 144ec4c:	10800d04 	addi	r2,r2,52
 144ec50:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
 144ec54:	e0bffe17 	ldw	r2,-8(fp)
 144ec58:	10802f17 	ldw	r2,188(r2)
 144ec5c:	10001926 	beq	r2,zero,144ecc4 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
 144ec60:	e0bffe17 	ldw	r2,-8(fp)
 144ec64:	10802f17 	ldw	r2,188(r2)
 144ec68:	10800037 	ldwio	r2,0(r2)
 144ec6c:	1080080c 	andi	r2,r2,32
 144ec70:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
 144ec74:	e0bffe17 	ldw	r2,-8(fp)
 144ec78:	10802f17 	ldw	r2,188(r2)
 144ec7c:	10800037 	ldwio	r2,0(r2)
 144ec80:	1080100c 	andi	r2,r2,64
 144ec84:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
 144ec88:	e0bffe17 	ldw	r2,-8(fp)
 144ec8c:	10802f17 	ldw	r2,188(r2)
 144ec90:	10800037 	ldwio	r2,0(r2)
 144ec94:	1080200c 	andi	r2,r2,128
 144ec98:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
 144ec9c:	e0bffe17 	ldw	r2,-8(fp)
 144eca0:	10802f17 	ldw	r2,188(r2)
 144eca4:	10800037 	ldwio	r2,0(r2)
 144eca8:	1080400c 	andi	r2,r2,256
 144ecac:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 144ecb0:	e0bffe17 	ldw	r2,-8(fp)
 144ecb4:	10802f17 	ldw	r2,188(r2)
 144ecb8:	10800037 	ldwio	r2,0(r2)
 144ecbc:	1080800c 	andi	r2,r2,512
 144ecc0:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 144ecc4:	e0bffe17 	ldw	r2,-8(fp)
 144ecc8:	10803017 	ldw	r2,192(r2)
 144eccc:	10800058 	cmpnei	r2,r2,1
 144ecd0:	10002f1e 	bne	r2,zero,144ed90 <altera_onchip_flash_init+0x178>
 144ecd4:	e0bff817 	ldw	r2,-32(fp)
 144ecd8:	10800820 	cmpeqi	r2,r2,32
 144ecdc:	10002c1e 	bne	r2,zero,144ed90 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 144ece0:	e0bff717 	ldw	r2,-36(fp)
 144ece4:	1004913a 	slli	r2,r2,4
 144ece8:	e0fffd17 	ldw	r3,-12(fp)
 144ecec:	1885883a 	add	r2,r3,r2
 144ecf0:	e0fffe17 	ldw	r3,-8(fp)
 144ecf4:	18c03117 	ldw	r3,196(r3)
 144ecf8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 144ecfc:	e0bff717 	ldw	r2,-36(fp)
 144ed00:	1004913a 	slli	r2,r2,4
 144ed04:	e0fffd17 	ldw	r3,-12(fp)
 144ed08:	1885883a 	add	r2,r3,r2
 144ed0c:	e0fffe17 	ldw	r3,-8(fp)
 144ed10:	19003217 	ldw	r4,200(r3)
 144ed14:	e0fffe17 	ldw	r3,-8(fp)
 144ed18:	18c03117 	ldw	r3,196(r3)
 144ed1c:	20c7c83a 	sub	r3,r4,r3
 144ed20:	18c00044 	addi	r3,r3,1
 144ed24:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 144ed28:	e0bff717 	ldw	r2,-36(fp)
 144ed2c:	1004913a 	slli	r2,r2,4
 144ed30:	e0fffd17 	ldw	r3,-12(fp)
 144ed34:	18a1883a 	add	r16,r3,r2
 144ed38:	e0fffe17 	ldw	r3,-8(fp)
 144ed3c:	e0bff717 	ldw	r2,-36(fp)
 144ed40:	1004913a 	slli	r2,r2,4
 144ed44:	1885883a 	add	r2,r3,r2
 144ed48:	10800e04 	addi	r2,r2,56
 144ed4c:	10c00017 	ldw	r3,0(r2)
 144ed50:	e0bffe17 	ldw	r2,-8(fp)
 144ed54:	10803f17 	ldw	r2,252(r2)
 144ed58:	1809883a 	mov	r4,r3
 144ed5c:	100b883a 	mov	r5,r2
 144ed60:	14423380 	call	1442338 <__divsi3>
 144ed64:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 144ed68:	e0bff717 	ldw	r2,-36(fp)
 144ed6c:	1004913a 	slli	r2,r2,4
 144ed70:	e0fffd17 	ldw	r3,-12(fp)
 144ed74:	1885883a 	add	r2,r3,r2
 144ed78:	e0fffe17 	ldw	r3,-8(fp)
 144ed7c:	18c03f17 	ldw	r3,252(r3)
 144ed80:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 144ed84:	e0bff717 	ldw	r2,-36(fp)
 144ed88:	10800044 	addi	r2,r2,1
 144ed8c:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 144ed90:	e0bffe17 	ldw	r2,-8(fp)
 144ed94:	10803317 	ldw	r2,204(r2)
 144ed98:	10800058 	cmpnei	r2,r2,1
 144ed9c:	10002f1e 	bne	r2,zero,144ee5c <altera_onchip_flash_init+0x244>
 144eda0:	e0bff917 	ldw	r2,-28(fp)
 144eda4:	10801020 	cmpeqi	r2,r2,64
 144eda8:	10002c1e 	bne	r2,zero,144ee5c <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 144edac:	e0bff717 	ldw	r2,-36(fp)
 144edb0:	1004913a 	slli	r2,r2,4
 144edb4:	e0fffd17 	ldw	r3,-12(fp)
 144edb8:	1885883a 	add	r2,r3,r2
 144edbc:	e0fffe17 	ldw	r3,-8(fp)
 144edc0:	18c03417 	ldw	r3,208(r3)
 144edc4:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 144edc8:	e0bff717 	ldw	r2,-36(fp)
 144edcc:	1004913a 	slli	r2,r2,4
 144edd0:	e0fffd17 	ldw	r3,-12(fp)
 144edd4:	1885883a 	add	r2,r3,r2
 144edd8:	e0fffe17 	ldw	r3,-8(fp)
 144eddc:	19003517 	ldw	r4,212(r3)
 144ede0:	e0fffe17 	ldw	r3,-8(fp)
 144ede4:	18c03417 	ldw	r3,208(r3)
 144ede8:	20c7c83a 	sub	r3,r4,r3
 144edec:	18c00044 	addi	r3,r3,1
 144edf0:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 144edf4:	e0bff717 	ldw	r2,-36(fp)
 144edf8:	1004913a 	slli	r2,r2,4
 144edfc:	e0fffd17 	ldw	r3,-12(fp)
 144ee00:	18a1883a 	add	r16,r3,r2
 144ee04:	e0fffe17 	ldw	r3,-8(fp)
 144ee08:	e0bff717 	ldw	r2,-36(fp)
 144ee0c:	1004913a 	slli	r2,r2,4
 144ee10:	1885883a 	add	r2,r3,r2
 144ee14:	10800e04 	addi	r2,r2,56
 144ee18:	10c00017 	ldw	r3,0(r2)
 144ee1c:	e0bffe17 	ldw	r2,-8(fp)
 144ee20:	10803f17 	ldw	r2,252(r2)
 144ee24:	1809883a 	mov	r4,r3
 144ee28:	100b883a 	mov	r5,r2
 144ee2c:	14423380 	call	1442338 <__divsi3>
 144ee30:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 144ee34:	e0bff717 	ldw	r2,-36(fp)
 144ee38:	1004913a 	slli	r2,r2,4
 144ee3c:	e0fffd17 	ldw	r3,-12(fp)
 144ee40:	1885883a 	add	r2,r3,r2
 144ee44:	e0fffe17 	ldw	r3,-8(fp)
 144ee48:	18c03f17 	ldw	r3,252(r3)
 144ee4c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 144ee50:	e0bff717 	ldw	r2,-36(fp)
 144ee54:	10800044 	addi	r2,r2,1
 144ee58:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 144ee5c:	e0bffe17 	ldw	r2,-8(fp)
 144ee60:	10803617 	ldw	r2,216(r2)
 144ee64:	10800058 	cmpnei	r2,r2,1
 144ee68:	10002f1e 	bne	r2,zero,144ef28 <altera_onchip_flash_init+0x310>
 144ee6c:	e0bffa17 	ldw	r2,-24(fp)
 144ee70:	10802020 	cmpeqi	r2,r2,128
 144ee74:	10002c1e 	bne	r2,zero,144ef28 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 144ee78:	e0bff717 	ldw	r2,-36(fp)
 144ee7c:	1004913a 	slli	r2,r2,4
 144ee80:	e0fffd17 	ldw	r3,-12(fp)
 144ee84:	1885883a 	add	r2,r3,r2
 144ee88:	e0fffe17 	ldw	r3,-8(fp)
 144ee8c:	18c03717 	ldw	r3,220(r3)
 144ee90:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 144ee94:	e0bff717 	ldw	r2,-36(fp)
 144ee98:	1004913a 	slli	r2,r2,4
 144ee9c:	e0fffd17 	ldw	r3,-12(fp)
 144eea0:	1885883a 	add	r2,r3,r2
 144eea4:	e0fffe17 	ldw	r3,-8(fp)
 144eea8:	19003817 	ldw	r4,224(r3)
 144eeac:	e0fffe17 	ldw	r3,-8(fp)
 144eeb0:	18c03717 	ldw	r3,220(r3)
 144eeb4:	20c7c83a 	sub	r3,r4,r3
 144eeb8:	18c00044 	addi	r3,r3,1
 144eebc:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 144eec0:	e0bff717 	ldw	r2,-36(fp)
 144eec4:	1004913a 	slli	r2,r2,4
 144eec8:	e0fffd17 	ldw	r3,-12(fp)
 144eecc:	18a1883a 	add	r16,r3,r2
 144eed0:	e0fffe17 	ldw	r3,-8(fp)
 144eed4:	e0bff717 	ldw	r2,-36(fp)
 144eed8:	1004913a 	slli	r2,r2,4
 144eedc:	1885883a 	add	r2,r3,r2
 144eee0:	10800e04 	addi	r2,r2,56
 144eee4:	10c00017 	ldw	r3,0(r2)
 144eee8:	e0bffe17 	ldw	r2,-8(fp)
 144eeec:	10803f17 	ldw	r2,252(r2)
 144eef0:	1809883a 	mov	r4,r3
 144eef4:	100b883a 	mov	r5,r2
 144eef8:	14423380 	call	1442338 <__divsi3>
 144eefc:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 144ef00:	e0bff717 	ldw	r2,-36(fp)
 144ef04:	1004913a 	slli	r2,r2,4
 144ef08:	e0fffd17 	ldw	r3,-12(fp)
 144ef0c:	1885883a 	add	r2,r3,r2
 144ef10:	e0fffe17 	ldw	r3,-8(fp)
 144ef14:	18c03f17 	ldw	r3,252(r3)
 144ef18:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 144ef1c:	e0bff717 	ldw	r2,-36(fp)
 144ef20:	10800044 	addi	r2,r2,1
 144ef24:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 144ef28:	e0bffe17 	ldw	r2,-8(fp)
 144ef2c:	10803917 	ldw	r2,228(r2)
 144ef30:	10800058 	cmpnei	r2,r2,1
 144ef34:	10002f1e 	bne	r2,zero,144eff4 <altera_onchip_flash_init+0x3dc>
 144ef38:	e0bffb17 	ldw	r2,-20(fp)
 144ef3c:	10804020 	cmpeqi	r2,r2,256
 144ef40:	10002c1e 	bne	r2,zero,144eff4 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 144ef44:	e0bff717 	ldw	r2,-36(fp)
 144ef48:	1004913a 	slli	r2,r2,4
 144ef4c:	e0fffd17 	ldw	r3,-12(fp)
 144ef50:	1885883a 	add	r2,r3,r2
 144ef54:	e0fffe17 	ldw	r3,-8(fp)
 144ef58:	18c03a17 	ldw	r3,232(r3)
 144ef5c:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 144ef60:	e0bff717 	ldw	r2,-36(fp)
 144ef64:	1004913a 	slli	r2,r2,4
 144ef68:	e0fffd17 	ldw	r3,-12(fp)
 144ef6c:	1885883a 	add	r2,r3,r2
 144ef70:	e0fffe17 	ldw	r3,-8(fp)
 144ef74:	19003b17 	ldw	r4,236(r3)
 144ef78:	e0fffe17 	ldw	r3,-8(fp)
 144ef7c:	18c03a17 	ldw	r3,232(r3)
 144ef80:	20c7c83a 	sub	r3,r4,r3
 144ef84:	18c00044 	addi	r3,r3,1
 144ef88:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 144ef8c:	e0bff717 	ldw	r2,-36(fp)
 144ef90:	1004913a 	slli	r2,r2,4
 144ef94:	e0fffd17 	ldw	r3,-12(fp)
 144ef98:	18a1883a 	add	r16,r3,r2
 144ef9c:	e0fffe17 	ldw	r3,-8(fp)
 144efa0:	e0bff717 	ldw	r2,-36(fp)
 144efa4:	1004913a 	slli	r2,r2,4
 144efa8:	1885883a 	add	r2,r3,r2
 144efac:	10800e04 	addi	r2,r2,56
 144efb0:	10c00017 	ldw	r3,0(r2)
 144efb4:	e0bffe17 	ldw	r2,-8(fp)
 144efb8:	10803f17 	ldw	r2,252(r2)
 144efbc:	1809883a 	mov	r4,r3
 144efc0:	100b883a 	mov	r5,r2
 144efc4:	14423380 	call	1442338 <__divsi3>
 144efc8:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 144efcc:	e0bff717 	ldw	r2,-36(fp)
 144efd0:	1004913a 	slli	r2,r2,4
 144efd4:	e0fffd17 	ldw	r3,-12(fp)
 144efd8:	1885883a 	add	r2,r3,r2
 144efdc:	e0fffe17 	ldw	r3,-8(fp)
 144efe0:	18c03f17 	ldw	r3,252(r3)
 144efe4:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 144efe8:	e0bff717 	ldw	r2,-36(fp)
 144efec:	10800044 	addi	r2,r2,1
 144eff0:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 144eff4:	e0bffe17 	ldw	r2,-8(fp)
 144eff8:	10803c17 	ldw	r2,240(r2)
 144effc:	10800058 	cmpnei	r2,r2,1
 144f000:	10002f1e 	bne	r2,zero,144f0c0 <altera_onchip_flash_init+0x4a8>
 144f004:	e0bffc17 	ldw	r2,-16(fp)
 144f008:	10808020 	cmpeqi	r2,r2,512
 144f00c:	10002c1e 	bne	r2,zero,144f0c0 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 144f010:	e0bff717 	ldw	r2,-36(fp)
 144f014:	1004913a 	slli	r2,r2,4
 144f018:	e0fffd17 	ldw	r3,-12(fp)
 144f01c:	1885883a 	add	r2,r3,r2
 144f020:	e0fffe17 	ldw	r3,-8(fp)
 144f024:	18c03d17 	ldw	r3,244(r3)
 144f028:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 144f02c:	e0bff717 	ldw	r2,-36(fp)
 144f030:	1004913a 	slli	r2,r2,4
 144f034:	e0fffd17 	ldw	r3,-12(fp)
 144f038:	1885883a 	add	r2,r3,r2
 144f03c:	e0fffe17 	ldw	r3,-8(fp)
 144f040:	19003e17 	ldw	r4,248(r3)
 144f044:	e0fffe17 	ldw	r3,-8(fp)
 144f048:	18c03d17 	ldw	r3,244(r3)
 144f04c:	20c7c83a 	sub	r3,r4,r3
 144f050:	18c00044 	addi	r3,r3,1
 144f054:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 144f058:	e0bff717 	ldw	r2,-36(fp)
 144f05c:	1004913a 	slli	r2,r2,4
 144f060:	e0fffd17 	ldw	r3,-12(fp)
 144f064:	18a1883a 	add	r16,r3,r2
 144f068:	e0fffe17 	ldw	r3,-8(fp)
 144f06c:	e0bff717 	ldw	r2,-36(fp)
 144f070:	1004913a 	slli	r2,r2,4
 144f074:	1885883a 	add	r2,r3,r2
 144f078:	10800e04 	addi	r2,r2,56
 144f07c:	10c00017 	ldw	r3,0(r2)
 144f080:	e0bffe17 	ldw	r2,-8(fp)
 144f084:	10803f17 	ldw	r2,252(r2)
 144f088:	1809883a 	mov	r4,r3
 144f08c:	100b883a 	mov	r5,r2
 144f090:	14423380 	call	1442338 <__divsi3>
 144f094:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 144f098:	e0bff717 	ldw	r2,-36(fp)
 144f09c:	1004913a 	slli	r2,r2,4
 144f0a0:	e0fffd17 	ldw	r3,-12(fp)
 144f0a4:	1885883a 	add	r2,r3,r2
 144f0a8:	e0fffe17 	ldw	r3,-8(fp)
 144f0ac:	18c03f17 	ldw	r3,252(r3)
 144f0b0:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 144f0b4:	e0bff717 	ldw	r2,-36(fp)
 144f0b8:	10800044 	addi	r2,r2,1
 144f0bc:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
 144f0c0:	e0bffe17 	ldw	r2,-8(fp)
 144f0c4:	e0fff717 	ldw	r3,-36(fp)
 144f0c8:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
 144f0cc:	e0bffe17 	ldw	r2,-8(fp)
 144f0d0:	1009883a 	mov	r4,r2
 144f0d4:	144e3740 	call	144e374 <alt_flash_device_register>
}
 144f0d8:	e6ffff04 	addi	sp,fp,-4
 144f0dc:	dfc00217 	ldw	ra,8(sp)
 144f0e0:	df000117 	ldw	fp,4(sp)
 144f0e4:	dc000017 	ldw	r16,0(sp)
 144f0e8:	dec00304 	addi	sp,sp,12
 144f0ec:	f800283a 	ret

0144f0f0 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 144f0f0:	defffb04 	addi	sp,sp,-20
 144f0f4:	df000415 	stw	fp,16(sp)
 144f0f8:	df000404 	addi	fp,sp,16
 144f0fc:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 144f100:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f104:	00817db4 	movhi	r2,1526
 144f108:	10b84004 	addi	r2,r2,-7936
 144f10c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f110:	00817db4 	movhi	r2,1526
 144f114:	10b84004 	addi	r2,r2,-7936
 144f118:	e0bffd15 	stw	r2,-12(fp)

    while (
 144f11c:	00000a06 	br	144f148 <alt_onchip_flash_poll_for_status_to_go_idle+0x58>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 144f120:	e0bffe17 	ldw	r2,-8(fp)
 144f124:	10000826 	beq	r2,zero,144f148 <alt_onchip_flash_poll_for_status_to_go_idle+0x58>
            count_down--;
 144f128:	e0bffd17 	ldw	r2,-12(fp)
 144f12c:	10bfffc4 	addi	r2,r2,-1
 144f130:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 144f134:	e0bffd17 	ldw	r2,-12(fp)
 144f138:	1000031e 	bne	r2,zero,144f148 <alt_onchip_flash_poll_for_status_to_go_idle+0x58>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 144f13c:	00bfe304 	movi	r2,-116
 144f140:	e0bffc15 	stw	r2,-16(fp)
                break;
 144f144:	00000506 	br	144f15c <alt_onchip_flash_poll_for_status_to_go_idle+0x6c>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 144f148:	e0bfff17 	ldw	r2,-4(fp)
 144f14c:	10802f17 	ldw	r2,188(r2)
 144f150:	10800037 	ldwio	r2,0(r2)
 144f154:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 144f158:	103ff11e 	bne	r2,zero,144f120 <__alt_data_end+0xfffe9920>
                break;
            }
        }
    }

    return ret_code;
 144f15c:	e0bffc17 	ldw	r2,-16(fp)
}
 144f160:	e037883a 	mov	sp,fp
 144f164:	df000017 	ldw	fp,0(sp)
 144f168:	dec00104 	addi	sp,sp,4
 144f16c:	f800283a 	ret

0144f170 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 144f170:	defffb04 	addi	sp,sp,-20
 144f174:	df000415 	stw	fp,16(sp)
 144f178:	df000404 	addi	fp,sp,16
 144f17c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 144f180:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f184:	00817db4 	movhi	r2,1526
 144f188:	10b84004 	addi	r2,r2,-7936
 144f18c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f190:	00817db4 	movhi	r2,1526
 144f194:	10b84004 	addi	r2,r2,-7936
 144f198:	e0bffd15 	stw	r2,-12(fp)

    while (
 144f19c:	00000a06 	br	144f1c8 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 144f1a0:	e0bffe17 	ldw	r2,-8(fp)
 144f1a4:	10000826 	beq	r2,zero,144f1c8 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
            count_down--;
 144f1a8:	e0bffd17 	ldw	r2,-12(fp)
 144f1ac:	10bfffc4 	addi	r2,r2,-1
 144f1b0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 144f1b4:	e0bffd17 	ldw	r2,-12(fp)
 144f1b8:	1000031e 	bne	r2,zero,144f1c8 <alt_onchip_flash_poll_for_status_erase_passed+0x58>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 144f1bc:	00bfe304 	movi	r2,-116
 144f1c0:	e0bffc15 	stw	r2,-16(fp)
                break;
 144f1c4:	00000506 	br	144f1dc <alt_onchip_flash_poll_for_status_erase_passed+0x6c>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 144f1c8:	e0bfff17 	ldw	r2,-4(fp)
 144f1cc:	10802f17 	ldw	r2,188(r2)
 144f1d0:	10800037 	ldwio	r2,0(r2)
 144f1d4:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 144f1d8:	103ff126 	beq	r2,zero,144f1a0 <__alt_data_end+0xfffe99a0>
                break;
            }
        }
    }

    return ret_code;
 144f1dc:	e0bffc17 	ldw	r2,-16(fp)
}
 144f1e0:	e037883a 	mov	sp,fp
 144f1e4:	df000017 	ldw	fp,0(sp)
 144f1e8:	dec00104 	addi	sp,sp,4
 144f1ec:	f800283a 	ret

0144f1f0 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 144f1f0:	defffb04 	addi	sp,sp,-20
 144f1f4:	df000415 	stw	fp,16(sp)
 144f1f8:	df000404 	addi	fp,sp,16
 144f1fc:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 144f200:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f204:	00817db4 	movhi	r2,1526
 144f208:	10b84004 	addi	r2,r2,-7936
 144f20c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 144f210:	00817db4 	movhi	r2,1526
 144f214:	10b84004 	addi	r2,r2,-7936
 144f218:	e0bffd15 	stw	r2,-12(fp)

    while (
 144f21c:	00000a06 	br	144f248 <alt_onchip_flash_poll_for_status_write_passed+0x58>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {
        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 144f220:	e0bffe17 	ldw	r2,-8(fp)
 144f224:	10000826 	beq	r2,zero,144f248 <alt_onchip_flash_poll_for_status_write_passed+0x58>
            count_down--;
 144f228:	e0bffd17 	ldw	r2,-12(fp)
 144f22c:	10bfffc4 	addi	r2,r2,-1
 144f230:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 144f234:	e0bffd17 	ldw	r2,-12(fp)
 144f238:	1000031e 	bne	r2,zero,144f248 <alt_onchip_flash_poll_for_status_write_passed+0x58>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 144f23c:	00bfe304 	movi	r2,-116
 144f240:	e0bffc15 	stw	r2,-16(fp)
                break;
 144f244:	00000506 	br	144f25c <alt_onchip_flash_poll_for_status_write_passed+0x6c>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 144f248:	e0bfff17 	ldw	r2,-4(fp)
 144f24c:	10802f17 	ldw	r2,188(r2)
 144f250:	10800037 	ldwio	r2,0(r2)
 144f254:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 144f258:	103ff126 	beq	r2,zero,144f220 <__alt_data_end+0xfffe9a20>
                break;
            }
        }
    }

    return ret_code;
 144f25c:	e0bffc17 	ldw	r2,-16(fp)
}
 144f260:	e037883a 	mov	sp,fp
 144f264:	df000017 	ldw	fp,0(sp)
 144f268:	dec00104 	addi	sp,sp,4
 144f26c:	f800283a 	ret

0144f270 <I2C_init>:
      clk = freuqency of the clock driving this component  ( in Hz)
      speed = SCL speed ie 100K, 400K ...            (in Hz)
15-OCT-07 initial release
*****************************************************************/
void I2C_init(alt_u32 base,alt_u32 clk,alt_u32 speed)
{
 144f270:	defffa04 	addi	sp,sp,-24
 144f274:	dfc00515 	stw	ra,20(sp)
 144f278:	df000415 	stw	fp,16(sp)
 144f27c:	df000404 	addi	fp,sp,16
 144f280:	e13ffd15 	stw	r4,-12(fp)
 144f284:	e17ffe15 	stw	r5,-8(fp)
 144f288:	e1bfff15 	stw	r6,-4(fp)
  alt_u32 prescale = (clk/( 5 * speed))-1;
 144f28c:	e13fff17 	ldw	r4,-4(fp)
 144f290:	01400144 	movi	r5,5
 144f294:	14423f80 	call	14423f8 <__mulsi3>
 144f298:	e13ffe17 	ldw	r4,-8(fp)
 144f29c:	100b883a 	mov	r5,r2
 144f2a0:	14423e80 	call	14423e8 <__udivsi3>
 144f2a4:	10bfffc4 	addi	r2,r2,-1
 144f2a8:	e0bffc15 	stw	r2,-16(fp)
#ifdef  I2C_DEBUG
        printf(" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",base,clk,speed,prescale);
#endif
  IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
 144f2ac:	e0bffd17 	ldw	r2,-12(fp)
 144f2b0:	10800204 	addi	r2,r2,8
 144f2b4:	0007883a 	mov	r3,zero
 144f2b8:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clearn any pening IRQ*/
 144f2bc:	e0bffd17 	ldw	r2,-12(fp)
 144f2c0:	10800404 	addi	r2,r2,16
 144f2c4:	1007883a 	mov	r3,r2
 144f2c8:	00800044 	movi	r2,1
 144f2cc:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale));  /* load low presacle bit*/
 144f2d0:	e0bffd17 	ldw	r2,-12(fp)
 144f2d4:	e0fffc17 	ldw	r3,-16(fp)
 144f2d8:	18c03fcc 	andi	r3,r3,255
 144f2dc:	10c00035 	stwio	r3,0(r2)

  IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale>>8)));  /* load upper prescale bit */
 144f2e0:	e0bffd17 	ldw	r2,-12(fp)
 144f2e4:	10800104 	addi	r2,r2,4
 144f2e8:	1007883a 	mov	r3,r2
 144f2ec:	e0bffc17 	ldw	r2,-16(fp)
 144f2f0:	1004d23a 	srli	r2,r2,8
 144f2f4:	10803fcc 	andi	r2,r2,255
 144f2f8:	18800035 	stwio	r2,0(r3)

  IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
 144f2fc:	e0bffd17 	ldw	r2,-12(fp)
 144f300:	10800204 	addi	r2,r2,8
 144f304:	1007883a 	mov	r3,r2
 144f308:	00802004 	movi	r2,128
 144f30c:	18800035 	stwio	r2,0(r3)

}
 144f310:	e037883a 	mov	sp,fp
 144f314:	dfc00117 	ldw	ra,4(sp)
 144f318:	df000017 	ldw	fp,0(sp)
 144f31c:	dec00204 	addi	sp,sp,8
 144f320:	f800283a 	ret

0144f324 <I2C_start>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
int I2C_start(alt_u32 base, alt_u32 add, alt_u32 read)
{
 144f324:	defffc04 	addi	sp,sp,-16
 144f328:	df000315 	stw	fp,12(sp)
 144f32c:	df000304 	addi	fp,sp,12
 144f330:	e13ffd15 	stw	r4,-12(fp)
 144f334:	e17ffe15 	stw	r5,-8(fp)
 144f338:	e1bfff15 	stw	r6,-4(fp)
#ifdef  I2C_DEBUG
        printf(" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",base,add,read);
#endif

          /* transmit the address shifted by one and the read/write bit*/
  IOWR_I2C_OPENCORES_TXR(base, ((add<<1) + (0x1 & read)));
 144f33c:	e0bffd17 	ldw	r2,-12(fp)
 144f340:	10800304 	addi	r2,r2,12
 144f344:	1007883a 	mov	r3,r2
 144f348:	e0bffe17 	ldw	r2,-8(fp)
 144f34c:	1085883a 	add	r2,r2,r2
 144f350:	1009883a 	mov	r4,r2
 144f354:	e0bfff17 	ldw	r2,-4(fp)
 144f358:	1080004c 	andi	r2,r2,1
 144f35c:	2085883a 	add	r2,r4,r2
 144f360:	18800035 	stwio	r2,0(r3)

          /* set start and write  bits which will start the transaction*/
  IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK );
 144f364:	e0bffd17 	ldw	r2,-12(fp)
 144f368:	10800404 	addi	r2,r2,16
 144f36c:	1007883a 	mov	r3,r2
 144f370:	00802404 	movi	r2,144
 144f374:	18800035 	stwio	r2,0(r3)

          /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
 144f378:	0001883a 	nop
 144f37c:	e0bffd17 	ldw	r2,-12(fp)
 144f380:	10800404 	addi	r2,r2,16
 144f384:	10800037 	ldwio	r2,0(r2)
 144f388:	1080008c 	andi	r2,r2,2
 144f38c:	103ffb1e 	bne	r2,zero,144f37c <__alt_data_end+0xfffe9b7c>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
 144f390:	e0bffd17 	ldw	r2,-12(fp)
 144f394:	10800404 	addi	r2,r2,16
 144f398:	10800037 	ldwio	r2,0(r2)
 144f39c:	1080200c 	andi	r2,r2,128
 144f3a0:	10000226 	beq	r2,zero,144f3ac <I2C_start+0x88>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
 144f3a4:	00800044 	movi	r2,1
 144f3a8:	00000106 	br	144f3b0 <I2C_start+0x8c>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
 144f3ac:	0005883a 	mov	r2,zero
   }
}
 144f3b0:	e037883a 	mov	sp,fp
 144f3b4:	df000017 	ldw	fp,0(sp)
 144f3b8:	dec00104 	addi	sp,sp,4
 144f3bc:	f800283a 	ret

0144f3c0 <I2C_read>:
return value
       byte read back.
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_read(alt_u32 base,alt_u32 last)
{
 144f3c0:	defffd04 	addi	sp,sp,-12
 144f3c4:	df000215 	stw	fp,8(sp)
 144f3c8:	df000204 	addi	fp,sp,8
 144f3cc:	e13ffe15 	stw	r4,-8(fp)
 144f3d0:	e17fff15 	stw	r5,-4(fp)
#ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith last0x%x\n",base,last);
#endif
  if( last)
 144f3d4:	e0bfff17 	ldw	r2,-4(fp)
 144f3d8:	10000626 	beq	r2,zero,144f3f4 <I2C_read+0x34>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK |
 144f3dc:	e0bffe17 	ldw	r2,-8(fp)
 144f3e0:	10800404 	addi	r2,r2,16
 144f3e4:	1007883a 	mov	r3,r2
 144f3e8:	00801a04 	movi	r2,104
 144f3ec:	18800035 	stwio	r2,0(r3)
 144f3f0:	00000506 	br	144f408 <I2C_read+0x48>
               I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK );
 144f3f4:	e0bffe17 	ldw	r2,-8(fp)
 144f3f8:	10800404 	addi	r2,r2,16
 144f3fc:	1007883a 	mov	r3,r2
 144f400:	00800804 	movi	r2,32
 144f404:	18800035 	stwio	r2,0(r3)
  }
          /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
 144f408:	0001883a 	nop
 144f40c:	e0bffe17 	ldw	r2,-8(fp)
 144f410:	10800404 	addi	r2,r2,16
 144f414:	10800037 	ldwio	r2,0(r2)
 144f418:	1080008c 	andi	r2,r2,2
 144f41c:	103ffb1e 	bne	r2,zero,144f40c <__alt_data_end+0xfffe9c0c>

         /* now read the data */
        return (IORD_I2C_OPENCORES_RXR(base));
 144f420:	e0bffe17 	ldw	r2,-8(fp)
 144f424:	10800304 	addi	r2,r2,12
 144f428:	10800037 	ldwio	r2,0(r2)

}
 144f42c:	e037883a 	mov	sp,fp
 144f430:	df000017 	ldw	fp,0(sp)
 144f434:	dec00104 	addi	sp,sp,4
 144f438:	f800283a 	ret

0144f43c <I2C_write>:
       0 if address is acknowledged
       1 if address was not acknowledged
15-OCT-07 initial release
*****************************************************************/
alt_u32 I2C_write(alt_u32 base,alt_u8 data, alt_u32 last)
{
 144f43c:	defffc04 	addi	sp,sp,-16
 144f440:	df000315 	stw	fp,12(sp)
 144f444:	df000304 	addi	fp,sp,12
 144f448:	e13ffd15 	stw	r4,-12(fp)
 144f44c:	2805883a 	mov	r2,r5
 144f450:	e1bfff15 	stw	r6,-4(fp)
 144f454:	e0bffe05 	stb	r2,-8(fp)
  #ifdef  I2C_DEBUG
        printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n",base,data,last);
#endif
                 /* transmit the data*/
  IOWR_I2C_OPENCORES_TXR(base, data);
 144f458:	e0bffd17 	ldw	r2,-12(fp)
 144f45c:	10800304 	addi	r2,r2,12
 144f460:	1007883a 	mov	r3,r2
 144f464:	e0bffe03 	ldbu	r2,-8(fp)
 144f468:	18800035 	stwio	r2,0(r3)

  if( last)
 144f46c:	e0bfff17 	ldw	r2,-4(fp)
 144f470:	10000626 	beq	r2,zero,144f48c <I2C_write+0x50>
  {
               /* start a read and no ack and stop bit*/
           IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK |
 144f474:	e0bffd17 	ldw	r2,-12(fp)
 144f478:	10800404 	addi	r2,r2,16
 144f47c:	1007883a 	mov	r3,r2
 144f480:	00801404 	movi	r2,80
 144f484:	18800035 	stwio	r2,0(r3)
 144f488:	00000506 	br	144f4a0 <I2C_write+0x64>
               I2C_OPENCORES_CR_STO_MSK);
  }
  else
  {
          /* start read*/
          IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK );
 144f48c:	e0bffd17 	ldw	r2,-12(fp)
 144f490:	10800404 	addi	r2,r2,16
 144f494:	1007883a 	mov	r3,r2
 144f498:	00800404 	movi	r2,16
 144f49c:	18800035 	stwio	r2,0(r3)
  }
           /* wait for the trnasaction to be over.*/
  while( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK);
 144f4a0:	0001883a 	nop
 144f4a4:	e0bffd17 	ldw	r2,-12(fp)
 144f4a8:	10800404 	addi	r2,r2,16
 144f4ac:	10800037 	ldwio	r2,0(r2)
 144f4b0:	1080008c 	andi	r2,r2,2
 144f4b4:	103ffb1e 	bne	r2,zero,144f4a4 <__alt_data_end+0xfffe9ca4>

         /* now check to see if the address was acknowledged */
   if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
 144f4b8:	e0bffd17 	ldw	r2,-12(fp)
 144f4bc:	10800404 	addi	r2,r2,16
 144f4c0:	10800037 	ldwio	r2,0(r2)
 144f4c4:	1080200c 	andi	r2,r2,128
 144f4c8:	10000226 	beq	r2,zero,144f4d4 <I2C_write+0x98>
   {
#ifdef  I2C_DEBUG
        printf("\tNOACK\n");
#endif
        return (I2C_NOACK);
 144f4cc:	00800044 	movi	r2,1
 144f4d0:	00000106 	br	144f4d8 <I2C_write+0x9c>
   else
   {
#ifdef  I2C_DEBUG
        printf("\tACK\n");
#endif
       return (I2C_ACK);
 144f4d4:	0005883a 	mov	r2,zero
   }

}
 144f4d8:	e037883a 	mov	sp,fp
 144f4dc:	df000017 	ldw	fp,0(sp)
 144f4e0:	dec00104 	addi	sp,sp,4
 144f4e4:	f800283a 	ret

0144f4e8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 144f4e8:	defffd04 	addi	sp,sp,-12
 144f4ec:	df000215 	stw	fp,8(sp)
 144f4f0:	df000204 	addi	fp,sp,8
 144f4f4:	e13ffe15 	stw	r4,-8(fp)
 144f4f8:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 144f4fc:	e037883a 	mov	sp,fp
 144f500:	df000017 	ldw	fp,0(sp)
 144f504:	dec00104 	addi	sp,sp,4
 144f508:	f800283a 	ret

0144f50c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 144f50c:	deffff04 	addi	sp,sp,-4
 144f510:	df000015 	stw	fp,0(sp)
 144f514:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 144f518:	e037883a 	mov	sp,fp
 144f51c:	df000017 	ldw	fp,0(sp)
 144f520:	dec00104 	addi	sp,sp,4
 144f524:	f800283a 	ret

0144f528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144f528:	defffe04 	addi	sp,sp,-8
 144f52c:	dfc00115 	stw	ra,4(sp)
 144f530:	df000015 	stw	fp,0(sp)
 144f534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144f538:	00805174 	movhi	r2,325
 144f53c:	10855c04 	addi	r2,r2,5488
 144f540:	10800017 	ldw	r2,0(r2)
 144f544:	10000526 	beq	r2,zero,144f55c <alt_get_errno+0x34>
 144f548:	00805174 	movhi	r2,325
 144f54c:	10855c04 	addi	r2,r2,5488
 144f550:	10800017 	ldw	r2,0(r2)
 144f554:	103ee83a 	callr	r2
 144f558:	00000206 	br	144f564 <alt_get_errno+0x3c>
 144f55c:	00805174 	movhi	r2,325
 144f560:	10887004 	addi	r2,r2,8640
}
 144f564:	e037883a 	mov	sp,fp
 144f568:	dfc00117 	ldw	ra,4(sp)
 144f56c:	df000017 	ldw	fp,0(sp)
 144f570:	dec00204 	addi	sp,sp,8
 144f574:	f800283a 	ret

0144f578 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 144f578:	defffa04 	addi	sp,sp,-24
 144f57c:	dfc00515 	stw	ra,20(sp)
 144f580:	df000415 	stw	fp,16(sp)
 144f584:	df000404 	addi	fp,sp,16
 144f588:	e13ffe15 	stw	r4,-8(fp)
 144f58c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 144f590:	e0bffe17 	ldw	r2,-8(fp)
 144f594:	10000326 	beq	r2,zero,144f5a4 <alt_dev_llist_insert+0x2c>
 144f598:	e0bffe17 	ldw	r2,-8(fp)
 144f59c:	10800217 	ldw	r2,8(r2)
 144f5a0:	1000061e 	bne	r2,zero,144f5bc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 144f5a4:	144f5280 	call	144f528 <alt_get_errno>
 144f5a8:	1007883a 	mov	r3,r2
 144f5ac:	00800584 	movi	r2,22
 144f5b0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 144f5b4:	00bffa84 	movi	r2,-22
 144f5b8:	00001306 	br	144f608 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 144f5bc:	e0bffe17 	ldw	r2,-8(fp)
 144f5c0:	e0ffff17 	ldw	r3,-4(fp)
 144f5c4:	e0fffc15 	stw	r3,-16(fp)
 144f5c8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 144f5cc:	e0bffd17 	ldw	r2,-12(fp)
 144f5d0:	e0fffc17 	ldw	r3,-16(fp)
 144f5d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 144f5d8:	e0bffc17 	ldw	r2,-16(fp)
 144f5dc:	10c00017 	ldw	r3,0(r2)
 144f5e0:	e0bffd17 	ldw	r2,-12(fp)
 144f5e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 144f5e8:	e0bffc17 	ldw	r2,-16(fp)
 144f5ec:	10800017 	ldw	r2,0(r2)
 144f5f0:	e0fffd17 	ldw	r3,-12(fp)
 144f5f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 144f5f8:	e0bffc17 	ldw	r2,-16(fp)
 144f5fc:	e0fffd17 	ldw	r3,-12(fp)
 144f600:	10c00015 	stw	r3,0(r2)

  return 0;  
 144f604:	0005883a 	mov	r2,zero
}
 144f608:	e037883a 	mov	sp,fp
 144f60c:	dfc00117 	ldw	ra,4(sp)
 144f610:	df000017 	ldw	fp,0(sp)
 144f614:	dec00204 	addi	sp,sp,8
 144f618:	f800283a 	ret

0144f61c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 144f61c:	defffa04 	addi	sp,sp,-24
 144f620:	dfc00515 	stw	ra,20(sp)
 144f624:	df000415 	stw	fp,16(sp)
 144f628:	df000404 	addi	fp,sp,16
 144f62c:	e13ffe15 	stw	r4,-8(fp)
 144f630:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 144f634:	e0bfff17 	ldw	r2,-4(fp)
 144f638:	10800017 	ldw	r2,0(r2)
 144f63c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 144f640:	e13ffe17 	ldw	r4,-8(fp)
 144f644:	14425540 	call	1442554 <strlen>
 144f648:	10800044 	addi	r2,r2,1
 144f64c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 144f650:	00000d06 	br	144f688 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 144f654:	e0bffc17 	ldw	r2,-16(fp)
 144f658:	10c00217 	ldw	r3,8(r2)
 144f65c:	e0bffd17 	ldw	r2,-12(fp)
 144f660:	1809883a 	mov	r4,r3
 144f664:	e17ffe17 	ldw	r5,-8(fp)
 144f668:	100d883a 	mov	r6,r2
 144f66c:	14502c40 	call	14502c4 <memcmp>
 144f670:	1000021e 	bne	r2,zero,144f67c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 144f674:	e0bffc17 	ldw	r2,-16(fp)
 144f678:	00000706 	br	144f698 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 144f67c:	e0bffc17 	ldw	r2,-16(fp)
 144f680:	10800017 	ldw	r2,0(r2)
 144f684:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 144f688:	e0fffc17 	ldw	r3,-16(fp)
 144f68c:	e0bfff17 	ldw	r2,-4(fp)
 144f690:	18bff01e 	bne	r3,r2,144f654 <__alt_data_end+0xfffe9e54>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 144f694:	0005883a 	mov	r2,zero
}
 144f698:	e037883a 	mov	sp,fp
 144f69c:	dfc00117 	ldw	ra,4(sp)
 144f6a0:	df000017 	ldw	fp,0(sp)
 144f6a4:	dec00204 	addi	sp,sp,8
 144f6a8:	f800283a 	ret

0144f6ac <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 144f6ac:	defffc04 	addi	sp,sp,-16
 144f6b0:	dfc00315 	stw	ra,12(sp)
 144f6b4:	df000215 	stw	fp,8(sp)
 144f6b8:	df000204 	addi	fp,sp,8
 144f6bc:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 144f6c0:	e13fff17 	ldw	r4,-4(fp)
 144f6c4:	d1601104 	addi	r5,gp,-32700
 144f6c8:	144f61c0 	call	144f61c <alt_find_dev>
 144f6cc:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 144f6d0:	e0bffe17 	ldw	r2,-8(fp)
 144f6d4:	10000926 	beq	r2,zero,144f6fc <alt_flash_open_dev+0x50>
 144f6d8:	e0bffe17 	ldw	r2,-8(fp)
 144f6dc:	10800317 	ldw	r2,12(r2)
 144f6e0:	10000626 	beq	r2,zero,144f6fc <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 144f6e4:	e0bffe17 	ldw	r2,-8(fp)
 144f6e8:	10800317 	ldw	r2,12(r2)
 144f6ec:	e13ffe17 	ldw	r4,-8(fp)
 144f6f0:	e17fff17 	ldw	r5,-4(fp)
 144f6f4:	103ee83a 	callr	r2
 144f6f8:	00000106 	br	144f700 <alt_flash_open_dev+0x54>
  }

  return dev;
 144f6fc:	e0bffe17 	ldw	r2,-8(fp)
}
 144f700:	e037883a 	mov	sp,fp
 144f704:	dfc00117 	ldw	ra,4(sp)
 144f708:	df000017 	ldw	fp,0(sp)
 144f70c:	dec00204 	addi	sp,sp,8
 144f710:	f800283a 	ret

0144f714 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 144f714:	defffd04 	addi	sp,sp,-12
 144f718:	dfc00215 	stw	ra,8(sp)
 144f71c:	df000115 	stw	fp,4(sp)
 144f720:	df000104 	addi	fp,sp,4
 144f724:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 144f728:	e0bfff17 	ldw	r2,-4(fp)
 144f72c:	10000726 	beq	r2,zero,144f74c <alt_flash_close_dev+0x38>
 144f730:	e0bfff17 	ldw	r2,-4(fp)
 144f734:	10800417 	ldw	r2,16(r2)
 144f738:	10000426 	beq	r2,zero,144f74c <alt_flash_close_dev+0x38>
  {
    fd->close(fd);
 144f73c:	e0bfff17 	ldw	r2,-4(fp)
 144f740:	10800417 	ldw	r2,16(r2)
 144f744:	e13fff17 	ldw	r4,-4(fp)
 144f748:	103ee83a 	callr	r2
  }
  return;
 144f74c:	0001883a 	nop
}
 144f750:	e037883a 	mov	sp,fp
 144f754:	dfc00117 	ldw	ra,4(sp)
 144f758:	df000017 	ldw	fp,0(sp)
 144f75c:	dec00204 	addi	sp,sp,8
 144f760:	f800283a 	ret

0144f764 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 144f764:	deffff04 	addi	sp,sp,-4
 144f768:	df000015 	stw	fp,0(sp)
 144f76c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 144f770:	e037883a 	mov	sp,fp
 144f774:	df000017 	ldw	fp,0(sp)
 144f778:	dec00104 	addi	sp,sp,4
 144f77c:	f800283a 	ret

0144f780 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 144f780:	defff904 	addi	sp,sp,-28
 144f784:	dfc00615 	stw	ra,24(sp)
 144f788:	df000515 	stw	fp,20(sp)
 144f78c:	df000504 	addi	fp,sp,20
 144f790:	e13ffc15 	stw	r4,-16(fp)
 144f794:	e17ffd15 	stw	r5,-12(fp)
 144f798:	e1bffe15 	stw	r6,-8(fp)
 144f79c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 144f7a0:	e0800217 	ldw	r2,8(fp)
 144f7a4:	d8800015 	stw	r2,0(sp)
 144f7a8:	e13ffc17 	ldw	r4,-16(fp)
 144f7ac:	e17ffd17 	ldw	r5,-12(fp)
 144f7b0:	e1bffe17 	ldw	r6,-8(fp)
 144f7b4:	e1ffff17 	ldw	r7,-4(fp)
 144f7b8:	144f9600 	call	144f960 <alt_iic_isr_register>
}  
 144f7bc:	e037883a 	mov	sp,fp
 144f7c0:	dfc00117 	ldw	ra,4(sp)
 144f7c4:	df000017 	ldw	fp,0(sp)
 144f7c8:	dec00204 	addi	sp,sp,8
 144f7cc:	f800283a 	ret

0144f7d0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 144f7d0:	defff904 	addi	sp,sp,-28
 144f7d4:	df000615 	stw	fp,24(sp)
 144f7d8:	df000604 	addi	fp,sp,24
 144f7dc:	e13ffe15 	stw	r4,-8(fp)
 144f7e0:	e17fff15 	stw	r5,-4(fp)
 144f7e4:	e0bfff17 	ldw	r2,-4(fp)
 144f7e8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144f7ec:	0005303a 	rdctl	r2,status
 144f7f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144f7f4:	e0fffb17 	ldw	r3,-20(fp)
 144f7f8:	00bfff84 	movi	r2,-2
 144f7fc:	1884703a 	and	r2,r3,r2
 144f800:	1001703a 	wrctl	status,r2
  
  return context;
 144f804:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 144f808:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 144f80c:	e0bffa17 	ldw	r2,-24(fp)
 144f810:	00c00044 	movi	r3,1
 144f814:	1884983a 	sll	r2,r3,r2
 144f818:	1007883a 	mov	r3,r2
 144f81c:	00805174 	movhi	r2,325
 144f820:	10887404 	addi	r2,r2,8656
 144f824:	10800017 	ldw	r2,0(r2)
 144f828:	1886b03a 	or	r3,r3,r2
 144f82c:	00805174 	movhi	r2,325
 144f830:	10887404 	addi	r2,r2,8656
 144f834:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 144f838:	00805174 	movhi	r2,325
 144f83c:	10887404 	addi	r2,r2,8656
 144f840:	10800017 	ldw	r2,0(r2)
 144f844:	100170fa 	wrctl	ienable,r2
 144f848:	e0bffc17 	ldw	r2,-16(fp)
 144f84c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144f850:	e0bffd17 	ldw	r2,-12(fp)
 144f854:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 144f858:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 144f85c:	0001883a 	nop
}
 144f860:	e037883a 	mov	sp,fp
 144f864:	df000017 	ldw	fp,0(sp)
 144f868:	dec00104 	addi	sp,sp,4
 144f86c:	f800283a 	ret

0144f870 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 144f870:	defff904 	addi	sp,sp,-28
 144f874:	df000615 	stw	fp,24(sp)
 144f878:	df000604 	addi	fp,sp,24
 144f87c:	e13ffe15 	stw	r4,-8(fp)
 144f880:	e17fff15 	stw	r5,-4(fp)
 144f884:	e0bfff17 	ldw	r2,-4(fp)
 144f888:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144f88c:	0005303a 	rdctl	r2,status
 144f890:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144f894:	e0fffb17 	ldw	r3,-20(fp)
 144f898:	00bfff84 	movi	r2,-2
 144f89c:	1884703a 	and	r2,r3,r2
 144f8a0:	1001703a 	wrctl	status,r2
  
  return context;
 144f8a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 144f8a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 144f8ac:	e0bffa17 	ldw	r2,-24(fp)
 144f8b0:	00c00044 	movi	r3,1
 144f8b4:	1884983a 	sll	r2,r3,r2
 144f8b8:	0084303a 	nor	r2,zero,r2
 144f8bc:	1007883a 	mov	r3,r2
 144f8c0:	00805174 	movhi	r2,325
 144f8c4:	10887404 	addi	r2,r2,8656
 144f8c8:	10800017 	ldw	r2,0(r2)
 144f8cc:	1886703a 	and	r3,r3,r2
 144f8d0:	00805174 	movhi	r2,325
 144f8d4:	10887404 	addi	r2,r2,8656
 144f8d8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 144f8dc:	00805174 	movhi	r2,325
 144f8e0:	10887404 	addi	r2,r2,8656
 144f8e4:	10800017 	ldw	r2,0(r2)
 144f8e8:	100170fa 	wrctl	ienable,r2
 144f8ec:	e0bffc17 	ldw	r2,-16(fp)
 144f8f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144f8f4:	e0bffd17 	ldw	r2,-12(fp)
 144f8f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 144f8fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 144f900:	0001883a 	nop
}
 144f904:	e037883a 	mov	sp,fp
 144f908:	df000017 	ldw	fp,0(sp)
 144f90c:	dec00104 	addi	sp,sp,4
 144f910:	f800283a 	ret

0144f914 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 144f914:	defffc04 	addi	sp,sp,-16
 144f918:	df000315 	stw	fp,12(sp)
 144f91c:	df000304 	addi	fp,sp,12
 144f920:	e13ffe15 	stw	r4,-8(fp)
 144f924:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 144f928:	000530fa 	rdctl	r2,ienable
 144f92c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 144f930:	e0bfff17 	ldw	r2,-4(fp)
 144f934:	00c00044 	movi	r3,1
 144f938:	1884983a 	sll	r2,r3,r2
 144f93c:	1007883a 	mov	r3,r2
 144f940:	e0bffd17 	ldw	r2,-12(fp)
 144f944:	1884703a 	and	r2,r3,r2
 144f948:	1004c03a 	cmpne	r2,r2,zero
 144f94c:	10803fcc 	andi	r2,r2,255
}
 144f950:	e037883a 	mov	sp,fp
 144f954:	df000017 	ldw	fp,0(sp)
 144f958:	dec00104 	addi	sp,sp,4
 144f95c:	f800283a 	ret

0144f960 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 144f960:	defff504 	addi	sp,sp,-44
 144f964:	dfc00a15 	stw	ra,40(sp)
 144f968:	df000915 	stw	fp,36(sp)
 144f96c:	df000904 	addi	fp,sp,36
 144f970:	e13ffc15 	stw	r4,-16(fp)
 144f974:	e17ffd15 	stw	r5,-12(fp)
 144f978:	e1bffe15 	stw	r6,-8(fp)
 144f97c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 144f980:	00bffa84 	movi	r2,-22
 144f984:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 144f988:	e0bffd17 	ldw	r2,-12(fp)
 144f98c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 144f990:	e0bff817 	ldw	r2,-32(fp)
 144f994:	10800808 	cmpgei	r2,r2,32
 144f998:	1000271e 	bne	r2,zero,144fa38 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144f99c:	0005303a 	rdctl	r2,status
 144f9a0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144f9a4:	e0fffa17 	ldw	r3,-24(fp)
 144f9a8:	00bfff84 	movi	r2,-2
 144f9ac:	1884703a 	and	r2,r3,r2
 144f9b0:	1001703a 	wrctl	status,r2
  
  return context;
 144f9b4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 144f9b8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 144f9bc:	00805174 	movhi	r2,325
 144f9c0:	10888204 	addi	r2,r2,8712
 144f9c4:	e0fff817 	ldw	r3,-32(fp)
 144f9c8:	180690fa 	slli	r3,r3,3
 144f9cc:	10c5883a 	add	r2,r2,r3
 144f9d0:	e0fffe17 	ldw	r3,-8(fp)
 144f9d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 144f9d8:	00805174 	movhi	r2,325
 144f9dc:	10888204 	addi	r2,r2,8712
 144f9e0:	e0fff817 	ldw	r3,-32(fp)
 144f9e4:	180690fa 	slli	r3,r3,3
 144f9e8:	10c5883a 	add	r2,r2,r3
 144f9ec:	10800104 	addi	r2,r2,4
 144f9f0:	e0ffff17 	ldw	r3,-4(fp)
 144f9f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 144f9f8:	e0bffe17 	ldw	r2,-8(fp)
 144f9fc:	10000526 	beq	r2,zero,144fa14 <alt_iic_isr_register+0xb4>
 144fa00:	e0bff817 	ldw	r2,-32(fp)
 144fa04:	e13ffc17 	ldw	r4,-16(fp)
 144fa08:	100b883a 	mov	r5,r2
 144fa0c:	144f7d00 	call	144f7d0 <alt_ic_irq_enable>
 144fa10:	00000406 	br	144fa24 <alt_iic_isr_register+0xc4>
 144fa14:	e0bff817 	ldw	r2,-32(fp)
 144fa18:	e13ffc17 	ldw	r4,-16(fp)
 144fa1c:	100b883a 	mov	r5,r2
 144fa20:	144f8700 	call	144f870 <alt_ic_irq_disable>
 144fa24:	e0bff715 	stw	r2,-36(fp)
 144fa28:	e0bff917 	ldw	r2,-28(fp)
 144fa2c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144fa30:	e0bffb17 	ldw	r2,-20(fp)
 144fa34:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 144fa38:	e0bff717 	ldw	r2,-36(fp)
}
 144fa3c:	e037883a 	mov	sp,fp
 144fa40:	dfc00117 	ldw	ra,4(sp)
 144fa44:	df000017 	ldw	fp,0(sp)
 144fa48:	dec00204 	addi	sp,sp,8
 144fa4c:	f800283a 	ret

0144fa50 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 144fa50:	defff804 	addi	sp,sp,-32
 144fa54:	dfc00715 	stw	ra,28(sp)
 144fa58:	df000615 	stw	fp,24(sp)
 144fa5c:	dc000515 	stw	r16,20(sp)
 144fa60:	df000604 	addi	fp,sp,24
 144fa64:	e13ffb15 	stw	r4,-20(fp)
 144fa68:	e17ffc15 	stw	r5,-16(fp)
 144fa6c:	e1bffd15 	stw	r6,-12(fp)
 144fa70:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 144fa74:	e13ffc17 	ldw	r4,-16(fp)
 144fa78:	e17ffd17 	ldw	r5,-12(fp)
 144fa7c:	e1bffe17 	ldw	r6,-8(fp)
 144fa80:	144fcec0 	call	144fcec <open>
 144fa84:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 144fa88:	e0bffa17 	ldw	r2,-24(fp)
 144fa8c:	10002216 	blt	r2,zero,144fb18 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 144fa90:	04005174 	movhi	r16,325
 144fa94:	84049704 	addi	r16,r16,4700
 144fa98:	e0bffa17 	ldw	r2,-24(fp)
 144fa9c:	1009883a 	mov	r4,r2
 144faa0:	01400304 	movi	r5,12
 144faa4:	14423f80 	call	14423f8 <__mulsi3>
 144faa8:	8085883a 	add	r2,r16,r2
 144faac:	10c00017 	ldw	r3,0(r2)
 144fab0:	e0bffb17 	ldw	r2,-20(fp)
 144fab4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 144fab8:	04005174 	movhi	r16,325
 144fabc:	84049704 	addi	r16,r16,4700
 144fac0:	e0bffa17 	ldw	r2,-24(fp)
 144fac4:	1009883a 	mov	r4,r2
 144fac8:	01400304 	movi	r5,12
 144facc:	14423f80 	call	14423f8 <__mulsi3>
 144fad0:	8085883a 	add	r2,r16,r2
 144fad4:	10800104 	addi	r2,r2,4
 144fad8:	10c00017 	ldw	r3,0(r2)
 144fadc:	e0bffb17 	ldw	r2,-20(fp)
 144fae0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 144fae4:	04005174 	movhi	r16,325
 144fae8:	84049704 	addi	r16,r16,4700
 144faec:	e0bffa17 	ldw	r2,-24(fp)
 144faf0:	1009883a 	mov	r4,r2
 144faf4:	01400304 	movi	r5,12
 144faf8:	14423f80 	call	14423f8 <__mulsi3>
 144fafc:	8085883a 	add	r2,r16,r2
 144fb00:	10800204 	addi	r2,r2,8
 144fb04:	10c00017 	ldw	r3,0(r2)
 144fb08:	e0bffb17 	ldw	r2,-20(fp)
 144fb0c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 144fb10:	e13ffa17 	ldw	r4,-24(fp)
 144fb14:	144d7a40 	call	144d7a4 <alt_release_fd>
  }
} 
 144fb18:	e6ffff04 	addi	sp,fp,-4
 144fb1c:	dfc00217 	ldw	ra,8(sp)
 144fb20:	df000117 	ldw	fp,4(sp)
 144fb24:	dc000017 	ldw	r16,0(sp)
 144fb28:	dec00304 	addi	sp,sp,12
 144fb2c:	f800283a 	ret

0144fb30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 144fb30:	defffb04 	addi	sp,sp,-20
 144fb34:	dfc00415 	stw	ra,16(sp)
 144fb38:	df000315 	stw	fp,12(sp)
 144fb3c:	df000304 	addi	fp,sp,12
 144fb40:	e13ffd15 	stw	r4,-12(fp)
 144fb44:	e17ffe15 	stw	r5,-8(fp)
 144fb48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 144fb4c:	01005174 	movhi	r4,325
 144fb50:	21049a04 	addi	r4,r4,4712
 144fb54:	e17ffd17 	ldw	r5,-12(fp)
 144fb58:	01800044 	movi	r6,1
 144fb5c:	01c07fc4 	movi	r7,511
 144fb60:	144fa500 	call	144fa50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 144fb64:	01005174 	movhi	r4,325
 144fb68:	21049704 	addi	r4,r4,4700
 144fb6c:	e17ffe17 	ldw	r5,-8(fp)
 144fb70:	000d883a 	mov	r6,zero
 144fb74:	01c07fc4 	movi	r7,511
 144fb78:	144fa500 	call	144fa50 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 144fb7c:	01005174 	movhi	r4,325
 144fb80:	21049d04 	addi	r4,r4,4724
 144fb84:	e17fff17 	ldw	r5,-4(fp)
 144fb88:	01800044 	movi	r6,1
 144fb8c:	01c07fc4 	movi	r7,511
 144fb90:	144fa500 	call	144fa50 <alt_open_fd>
}  
 144fb94:	e037883a 	mov	sp,fp
 144fb98:	dfc00117 	ldw	ra,4(sp)
 144fb9c:	df000017 	ldw	fp,0(sp)
 144fba0:	dec00204 	addi	sp,sp,8
 144fba4:	f800283a 	ret

0144fba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 144fba8:	defffe04 	addi	sp,sp,-8
 144fbac:	dfc00115 	stw	ra,4(sp)
 144fbb0:	df000015 	stw	fp,0(sp)
 144fbb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 144fbb8:	00805174 	movhi	r2,325
 144fbbc:	10855c04 	addi	r2,r2,5488
 144fbc0:	10800017 	ldw	r2,0(r2)
 144fbc4:	10000526 	beq	r2,zero,144fbdc <alt_get_errno+0x34>
 144fbc8:	00805174 	movhi	r2,325
 144fbcc:	10855c04 	addi	r2,r2,5488
 144fbd0:	10800017 	ldw	r2,0(r2)
 144fbd4:	103ee83a 	callr	r2
 144fbd8:	00000206 	br	144fbe4 <alt_get_errno+0x3c>
 144fbdc:	00805174 	movhi	r2,325
 144fbe0:	10887004 	addi	r2,r2,8640
}
 144fbe4:	e037883a 	mov	sp,fp
 144fbe8:	dfc00117 	ldw	ra,4(sp)
 144fbec:	df000017 	ldw	fp,0(sp)
 144fbf0:	dec00204 	addi	sp,sp,8
 144fbf4:	f800283a 	ret

0144fbf8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 144fbf8:	defffb04 	addi	sp,sp,-20
 144fbfc:	dfc00415 	stw	ra,16(sp)
 144fc00:	df000315 	stw	fp,12(sp)
 144fc04:	dc000215 	stw	r16,8(sp)
 144fc08:	df000304 	addi	fp,sp,12
 144fc0c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 144fc10:	e0bffe17 	ldw	r2,-8(fp)
 144fc14:	10800217 	ldw	r2,8(r2)
 144fc18:	10d00034 	orhi	r3,r2,16384
 144fc1c:	e0bffe17 	ldw	r2,-8(fp)
 144fc20:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 144fc24:	e03ffd15 	stw	zero,-12(fp)
 144fc28:	00002306 	br	144fcb8 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 144fc2c:	04005174 	movhi	r16,325
 144fc30:	84049704 	addi	r16,r16,4700
 144fc34:	e0bffd17 	ldw	r2,-12(fp)
 144fc38:	1009883a 	mov	r4,r2
 144fc3c:	01400304 	movi	r5,12
 144fc40:	14423f80 	call	14423f8 <__mulsi3>
 144fc44:	8085883a 	add	r2,r16,r2
 144fc48:	10c00017 	ldw	r3,0(r2)
 144fc4c:	e0bffe17 	ldw	r2,-8(fp)
 144fc50:	10800017 	ldw	r2,0(r2)
 144fc54:	1880151e 	bne	r3,r2,144fcac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 144fc58:	04005174 	movhi	r16,325
 144fc5c:	84049704 	addi	r16,r16,4700
 144fc60:	e0bffd17 	ldw	r2,-12(fp)
 144fc64:	1009883a 	mov	r4,r2
 144fc68:	01400304 	movi	r5,12
 144fc6c:	14423f80 	call	14423f8 <__mulsi3>
 144fc70:	8085883a 	add	r2,r16,r2
 144fc74:	10800204 	addi	r2,r2,8
 144fc78:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 144fc7c:	10000b0e 	bge	r2,zero,144fcac <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 144fc80:	e13ffd17 	ldw	r4,-12(fp)
 144fc84:	01400304 	movi	r5,12
 144fc88:	14423f80 	call	14423f8 <__mulsi3>
 144fc8c:	1007883a 	mov	r3,r2
 144fc90:	00805174 	movhi	r2,325
 144fc94:	10849704 	addi	r2,r2,4700
 144fc98:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 144fc9c:	e0bffe17 	ldw	r2,-8(fp)
 144fca0:	18800226 	beq	r3,r2,144fcac <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 144fca4:	00bffcc4 	movi	r2,-13
 144fca8:	00000a06 	br	144fcd4 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 144fcac:	e0bffd17 	ldw	r2,-12(fp)
 144fcb0:	10800044 	addi	r2,r2,1
 144fcb4:	e0bffd15 	stw	r2,-12(fp)
 144fcb8:	00805174 	movhi	r2,325
 144fcbc:	10855b04 	addi	r2,r2,5484
 144fcc0:	10800017 	ldw	r2,0(r2)
 144fcc4:	1007883a 	mov	r3,r2
 144fcc8:	e0bffd17 	ldw	r2,-12(fp)
 144fccc:	18bfd72e 	bgeu	r3,r2,144fc2c <__alt_data_end+0xfffea42c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 144fcd0:	0005883a 	mov	r2,zero
}
 144fcd4:	e6ffff04 	addi	sp,fp,-4
 144fcd8:	dfc00217 	ldw	ra,8(sp)
 144fcdc:	df000117 	ldw	fp,4(sp)
 144fce0:	dc000017 	ldw	r16,0(sp)
 144fce4:	dec00304 	addi	sp,sp,12
 144fce8:	f800283a 	ret

0144fcec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 144fcec:	defff604 	addi	sp,sp,-40
 144fcf0:	dfc00915 	stw	ra,36(sp)
 144fcf4:	df000815 	stw	fp,32(sp)
 144fcf8:	df000804 	addi	fp,sp,32
 144fcfc:	e13ffd15 	stw	r4,-12(fp)
 144fd00:	e17ffe15 	stw	r5,-8(fp)
 144fd04:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 144fd08:	00bfffc4 	movi	r2,-1
 144fd0c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 144fd10:	00bffb44 	movi	r2,-19
 144fd14:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 144fd18:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 144fd1c:	e13ffd17 	ldw	r4,-12(fp)
 144fd20:	01405174 	movhi	r5,325
 144fd24:	29455904 	addi	r5,r5,5476
 144fd28:	144f61c0 	call	144f61c <alt_find_dev>
 144fd2c:	e0bff815 	stw	r2,-32(fp)
 144fd30:	e0bff817 	ldw	r2,-32(fp)
 144fd34:	1000051e 	bne	r2,zero,144fd4c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 144fd38:	e13ffd17 	ldw	r4,-12(fp)
 144fd3c:	14500080 	call	1450008 <alt_find_file>
 144fd40:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 144fd44:	00800044 	movi	r2,1
 144fd48:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 144fd4c:	e0bff817 	ldw	r2,-32(fp)
 144fd50:	10002b26 	beq	r2,zero,144fe00 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 144fd54:	e13ff817 	ldw	r4,-32(fp)
 144fd58:	145011c0 	call	145011c <alt_get_fd>
 144fd5c:	e0bff915 	stw	r2,-28(fp)
 144fd60:	e0bff917 	ldw	r2,-28(fp)
 144fd64:	1000030e 	bge	r2,zero,144fd74 <open+0x88>
    {
      status = index;
 144fd68:	e0bff917 	ldw	r2,-28(fp)
 144fd6c:	e0bffa15 	stw	r2,-24(fp)
 144fd70:	00002506 	br	144fe08 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 144fd74:	e13ff917 	ldw	r4,-28(fp)
 144fd78:	01400304 	movi	r5,12
 144fd7c:	14423f80 	call	14423f8 <__mulsi3>
 144fd80:	1007883a 	mov	r3,r2
 144fd84:	00805174 	movhi	r2,325
 144fd88:	10849704 	addi	r2,r2,4700
 144fd8c:	1885883a 	add	r2,r3,r2
 144fd90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 144fd94:	e0fffe17 	ldw	r3,-8(fp)
 144fd98:	00900034 	movhi	r2,16384
 144fd9c:	10bfffc4 	addi	r2,r2,-1
 144fda0:	1886703a 	and	r3,r3,r2
 144fda4:	e0bffc17 	ldw	r2,-16(fp)
 144fda8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 144fdac:	e0bffb17 	ldw	r2,-20(fp)
 144fdb0:	1000051e 	bne	r2,zero,144fdc8 <open+0xdc>
 144fdb4:	e13ffc17 	ldw	r4,-16(fp)
 144fdb8:	144fbf80 	call	144fbf8 <alt_file_locked>
 144fdbc:	e0bffa15 	stw	r2,-24(fp)
 144fdc0:	e0bffa17 	ldw	r2,-24(fp)
 144fdc4:	10001016 	blt	r2,zero,144fe08 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 144fdc8:	e0bff817 	ldw	r2,-32(fp)
 144fdcc:	10800317 	ldw	r2,12(r2)
 144fdd0:	10000826 	beq	r2,zero,144fdf4 <open+0x108>
 144fdd4:	e0bff817 	ldw	r2,-32(fp)
 144fdd8:	10800317 	ldw	r2,12(r2)
 144fddc:	e13ffc17 	ldw	r4,-16(fp)
 144fde0:	e17ffd17 	ldw	r5,-12(fp)
 144fde4:	e1bffe17 	ldw	r6,-8(fp)
 144fde8:	e1ffff17 	ldw	r7,-4(fp)
 144fdec:	103ee83a 	callr	r2
 144fdf0:	00000106 	br	144fdf8 <open+0x10c>
 144fdf4:	0005883a 	mov	r2,zero
 144fdf8:	e0bffa15 	stw	r2,-24(fp)
 144fdfc:	00000206 	br	144fe08 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 144fe00:	00bffb44 	movi	r2,-19
 144fe04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 144fe08:	e0bffa17 	ldw	r2,-24(fp)
 144fe0c:	1000090e 	bge	r2,zero,144fe34 <open+0x148>
  {
    alt_release_fd (index);  
 144fe10:	e13ff917 	ldw	r4,-28(fp)
 144fe14:	144d7a40 	call	144d7a4 <alt_release_fd>
    ALT_ERRNO = -status;
 144fe18:	144fba80 	call	144fba8 <alt_get_errno>
 144fe1c:	1007883a 	mov	r3,r2
 144fe20:	e0bffa17 	ldw	r2,-24(fp)
 144fe24:	0085c83a 	sub	r2,zero,r2
 144fe28:	18800015 	stw	r2,0(r3)
    return -1;
 144fe2c:	00bfffc4 	movi	r2,-1
 144fe30:	00000106 	br	144fe38 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 144fe34:	e0bff917 	ldw	r2,-28(fp)
}
 144fe38:	e037883a 	mov	sp,fp
 144fe3c:	dfc00117 	ldw	ra,4(sp)
 144fe40:	df000017 	ldw	fp,0(sp)
 144fe44:	dec00204 	addi	sp,sp,8
 144fe48:	f800283a 	ret

0144fe4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 144fe4c:	defffa04 	addi	sp,sp,-24
 144fe50:	df000515 	stw	fp,20(sp)
 144fe54:	df000504 	addi	fp,sp,20
 144fe58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 144fe5c:	0005303a 	rdctl	r2,status
 144fe60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 144fe64:	e0fffc17 	ldw	r3,-16(fp)
 144fe68:	00bfff84 	movi	r2,-2
 144fe6c:	1884703a 	and	r2,r3,r2
 144fe70:	1001703a 	wrctl	status,r2
  
  return context;
 144fe74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 144fe78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 144fe7c:	e0bfff17 	ldw	r2,-4(fp)
 144fe80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 144fe84:	e0bffd17 	ldw	r2,-12(fp)
 144fe88:	10800017 	ldw	r2,0(r2)
 144fe8c:	e0fffd17 	ldw	r3,-12(fp)
 144fe90:	18c00117 	ldw	r3,4(r3)
 144fe94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 144fe98:	e0bffd17 	ldw	r2,-12(fp)
 144fe9c:	10800117 	ldw	r2,4(r2)
 144fea0:	e0fffd17 	ldw	r3,-12(fp)
 144fea4:	18c00017 	ldw	r3,0(r3)
 144fea8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 144feac:	e0bffd17 	ldw	r2,-12(fp)
 144feb0:	e0fffd17 	ldw	r3,-12(fp)
 144feb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 144feb8:	e0bffd17 	ldw	r2,-12(fp)
 144febc:	e0fffd17 	ldw	r3,-12(fp)
 144fec0:	10c00015 	stw	r3,0(r2)
 144fec4:	e0bffb17 	ldw	r2,-20(fp)
 144fec8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 144fecc:	e0bffe17 	ldw	r2,-8(fp)
 144fed0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 144fed4:	e037883a 	mov	sp,fp
 144fed8:	df000017 	ldw	fp,0(sp)
 144fedc:	dec00104 	addi	sp,sp,4
 144fee0:	f800283a 	ret

0144fee4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 144fee4:	defffb04 	addi	sp,sp,-20
 144fee8:	dfc00415 	stw	ra,16(sp)
 144feec:	df000315 	stw	fp,12(sp)
 144fef0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 144fef4:	d0a01417 	ldw	r2,-32688(gp)
 144fef8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 144fefc:	d0a32517 	ldw	r2,-29548(gp)
 144ff00:	10800044 	addi	r2,r2,1
 144ff04:	d0a32515 	stw	r2,-29548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 144ff08:	00002e06 	br	144ffc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 144ff0c:	e0bffd17 	ldw	r2,-12(fp)
 144ff10:	10800017 	ldw	r2,0(r2)
 144ff14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 144ff18:	e0bffd17 	ldw	r2,-12(fp)
 144ff1c:	10800403 	ldbu	r2,16(r2)
 144ff20:	10803fcc 	andi	r2,r2,255
 144ff24:	10000426 	beq	r2,zero,144ff38 <alt_tick+0x54>
 144ff28:	d0a32517 	ldw	r2,-29548(gp)
 144ff2c:	1000021e 	bne	r2,zero,144ff38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 144ff30:	e0bffd17 	ldw	r2,-12(fp)
 144ff34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 144ff38:	e0bffd17 	ldw	r2,-12(fp)
 144ff3c:	10800217 	ldw	r2,8(r2)
 144ff40:	d0e32517 	ldw	r3,-29548(gp)
 144ff44:	18801d36 	bltu	r3,r2,144ffbc <alt_tick+0xd8>
 144ff48:	e0bffd17 	ldw	r2,-12(fp)
 144ff4c:	10800403 	ldbu	r2,16(r2)
 144ff50:	10803fcc 	andi	r2,r2,255
 144ff54:	1000191e 	bne	r2,zero,144ffbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 144ff58:	e0bffd17 	ldw	r2,-12(fp)
 144ff5c:	10800317 	ldw	r2,12(r2)
 144ff60:	e0fffd17 	ldw	r3,-12(fp)
 144ff64:	18c00517 	ldw	r3,20(r3)
 144ff68:	1809883a 	mov	r4,r3
 144ff6c:	103ee83a 	callr	r2
 144ff70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 144ff74:	e0bfff17 	ldw	r2,-4(fp)
 144ff78:	1000031e 	bne	r2,zero,144ff88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 144ff7c:	e13ffd17 	ldw	r4,-12(fp)
 144ff80:	144fe4c0 	call	144fe4c <alt_alarm_stop>
 144ff84:	00000d06 	br	144ffbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 144ff88:	e0bffd17 	ldw	r2,-12(fp)
 144ff8c:	10c00217 	ldw	r3,8(r2)
 144ff90:	e0bfff17 	ldw	r2,-4(fp)
 144ff94:	1887883a 	add	r3,r3,r2
 144ff98:	e0bffd17 	ldw	r2,-12(fp)
 144ff9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 144ffa0:	e0bffd17 	ldw	r2,-12(fp)
 144ffa4:	10c00217 	ldw	r3,8(r2)
 144ffa8:	d0a32517 	ldw	r2,-29548(gp)
 144ffac:	1880032e 	bgeu	r3,r2,144ffbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 144ffb0:	e0bffd17 	ldw	r2,-12(fp)
 144ffb4:	00c00044 	movi	r3,1
 144ffb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 144ffbc:	e0bffe17 	ldw	r2,-8(fp)
 144ffc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 144ffc4:	e0fffd17 	ldw	r3,-12(fp)
 144ffc8:	d0a01404 	addi	r2,gp,-32688
 144ffcc:	18bfcf1e 	bne	r3,r2,144ff0c <__alt_data_end+0xfffea70c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 144ffd0:	0001883a 	nop
}
 144ffd4:	e037883a 	mov	sp,fp
 144ffd8:	dfc00117 	ldw	ra,4(sp)
 144ffdc:	df000017 	ldw	fp,0(sp)
 144ffe0:	dec00204 	addi	sp,sp,8
 144ffe4:	f800283a 	ret

0144ffe8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 144ffe8:	deffff04 	addi	sp,sp,-4
 144ffec:	df000015 	stw	fp,0(sp)
 144fff0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 144fff4:	000170fa 	wrctl	ienable,zero
}
 144fff8:	e037883a 	mov	sp,fp
 144fffc:	df000017 	ldw	fp,0(sp)
 1450000:	dec00104 	addi	sp,sp,4
 1450004:	f800283a 	ret

01450008 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1450008:	defffb04 	addi	sp,sp,-20
 145000c:	dfc00415 	stw	ra,16(sp)
 1450010:	df000315 	stw	fp,12(sp)
 1450014:	df000304 	addi	fp,sp,12
 1450018:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 145001c:	00805174 	movhi	r2,325
 1450020:	10855704 	addi	r2,r2,5468
 1450024:	10800017 	ldw	r2,0(r2)
 1450028:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 145002c:	00003106 	br	14500f4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 1450030:	e0bffd17 	ldw	r2,-12(fp)
 1450034:	10800217 	ldw	r2,8(r2)
 1450038:	1009883a 	mov	r4,r2
 145003c:	14425540 	call	1442554 <strlen>
 1450040:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 1450044:	e0bffd17 	ldw	r2,-12(fp)
 1450048:	10c00217 	ldw	r3,8(r2)
 145004c:	e0bffe17 	ldw	r2,-8(fp)
 1450050:	10bfffc4 	addi	r2,r2,-1
 1450054:	1885883a 	add	r2,r3,r2
 1450058:	10800003 	ldbu	r2,0(r2)
 145005c:	10803fcc 	andi	r2,r2,255
 1450060:	1080201c 	xori	r2,r2,128
 1450064:	10bfe004 	addi	r2,r2,-128
 1450068:	10800bd8 	cmpnei	r2,r2,47
 145006c:	1000031e 	bne	r2,zero,145007c <alt_find_file+0x74>
    {
      len -= 1;
 1450070:	e0bffe17 	ldw	r2,-8(fp)
 1450074:	10bfffc4 	addi	r2,r2,-1
 1450078:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 145007c:	e0bffe17 	ldw	r2,-8(fp)
 1450080:	e0ffff17 	ldw	r3,-4(fp)
 1450084:	1885883a 	add	r2,r3,r2
 1450088:	10800003 	ldbu	r2,0(r2)
 145008c:	10803fcc 	andi	r2,r2,255
 1450090:	1080201c 	xori	r2,r2,128
 1450094:	10bfe004 	addi	r2,r2,-128
 1450098:	10800be0 	cmpeqi	r2,r2,47
 145009c:	1000081e 	bne	r2,zero,14500c0 <alt_find_file+0xb8>
 14500a0:	e0bffe17 	ldw	r2,-8(fp)
 14500a4:	e0ffff17 	ldw	r3,-4(fp)
 14500a8:	1885883a 	add	r2,r3,r2
 14500ac:	10800003 	ldbu	r2,0(r2)
 14500b0:	10803fcc 	andi	r2,r2,255
 14500b4:	1080201c 	xori	r2,r2,128
 14500b8:	10bfe004 	addi	r2,r2,-128
 14500bc:	10000a1e 	bne	r2,zero,14500e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 14500c0:	e0bffd17 	ldw	r2,-12(fp)
 14500c4:	10c00217 	ldw	r3,8(r2)
 14500c8:	e0bffe17 	ldw	r2,-8(fp)
 14500cc:	1809883a 	mov	r4,r3
 14500d0:	e17fff17 	ldw	r5,-4(fp)
 14500d4:	100d883a 	mov	r6,r2
 14500d8:	14502c40 	call	14502c4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 14500dc:	1000021e 	bne	r2,zero,14500e8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 14500e0:	e0bffd17 	ldw	r2,-12(fp)
 14500e4:	00000806 	br	1450108 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 14500e8:	e0bffd17 	ldw	r2,-12(fp)
 14500ec:	10800017 	ldw	r2,0(r2)
 14500f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 14500f4:	e0fffd17 	ldw	r3,-12(fp)
 14500f8:	00805174 	movhi	r2,325
 14500fc:	10855704 	addi	r2,r2,5468
 1450100:	18bfcb1e 	bne	r3,r2,1450030 <__alt_data_end+0xfffea830>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1450104:	0005883a 	mov	r2,zero
}
 1450108:	e037883a 	mov	sp,fp
 145010c:	dfc00117 	ldw	ra,4(sp)
 1450110:	df000017 	ldw	fp,0(sp)
 1450114:	dec00204 	addi	sp,sp,8
 1450118:	f800283a 	ret

0145011c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 145011c:	defffa04 	addi	sp,sp,-24
 1450120:	dfc00515 	stw	ra,20(sp)
 1450124:	df000415 	stw	fp,16(sp)
 1450128:	dc000315 	stw	r16,12(sp)
 145012c:	df000404 	addi	fp,sp,16
 1450130:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 1450134:	00bffa04 	movi	r2,-24
 1450138:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 145013c:	e03ffc15 	stw	zero,-16(fp)
 1450140:	00002106 	br	14501c8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 1450144:	04005174 	movhi	r16,325
 1450148:	84049704 	addi	r16,r16,4700
 145014c:	e0bffc17 	ldw	r2,-16(fp)
 1450150:	1009883a 	mov	r4,r2
 1450154:	01400304 	movi	r5,12
 1450158:	14423f80 	call	14423f8 <__mulsi3>
 145015c:	8085883a 	add	r2,r16,r2
 1450160:	10800017 	ldw	r2,0(r2)
 1450164:	1000151e 	bne	r2,zero,14501bc <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 1450168:	04005174 	movhi	r16,325
 145016c:	84049704 	addi	r16,r16,4700
 1450170:	e0bffc17 	ldw	r2,-16(fp)
 1450174:	1009883a 	mov	r4,r2
 1450178:	01400304 	movi	r5,12
 145017c:	14423f80 	call	14423f8 <__mulsi3>
 1450180:	8085883a 	add	r2,r16,r2
 1450184:	e0fffe17 	ldw	r3,-8(fp)
 1450188:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 145018c:	00805174 	movhi	r2,325
 1450190:	10855b04 	addi	r2,r2,5484
 1450194:	10c00017 	ldw	r3,0(r2)
 1450198:	e0bffc17 	ldw	r2,-16(fp)
 145019c:	1880040e 	bge	r3,r2,14501b0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 14501a0:	00805174 	movhi	r2,325
 14501a4:	10855b04 	addi	r2,r2,5484
 14501a8:	e0fffc17 	ldw	r3,-16(fp)
 14501ac:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 14501b0:	e0bffc17 	ldw	r2,-16(fp)
 14501b4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 14501b8:	00000606 	br	14501d4 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 14501bc:	e0bffc17 	ldw	r2,-16(fp)
 14501c0:	10800044 	addi	r2,r2,1
 14501c4:	e0bffc15 	stw	r2,-16(fp)
 14501c8:	e0bffc17 	ldw	r2,-16(fp)
 14501cc:	10800810 	cmplti	r2,r2,32
 14501d0:	103fdc1e 	bne	r2,zero,1450144 <__alt_data_end+0xfffea944>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 14501d4:	e0bffd17 	ldw	r2,-12(fp)
}
 14501d8:	e6ffff04 	addi	sp,fp,-4
 14501dc:	dfc00217 	ldw	ra,8(sp)
 14501e0:	df000117 	ldw	fp,4(sp)
 14501e4:	dc000017 	ldw	r16,0(sp)
 14501e8:	dec00304 	addi	sp,sp,12
 14501ec:	f800283a 	ret

014501f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 14501f0:	defffe04 	addi	sp,sp,-8
 14501f4:	df000115 	stw	fp,4(sp)
 14501f8:	df000104 	addi	fp,sp,4
 14501fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 1450200:	e0bfff17 	ldw	r2,-4(fp)
 1450204:	10bffe84 	addi	r2,r2,-6
 1450208:	10c00428 	cmpgeui	r3,r2,16
 145020c:	18001a1e 	bne	r3,zero,1450278 <alt_exception_cause_generated_bad_addr+0x88>
 1450210:	100690ba 	slli	r3,r2,2
 1450214:	00805174 	movhi	r2,325
 1450218:	10808a04 	addi	r2,r2,552
 145021c:	1885883a 	add	r2,r3,r2
 1450220:	10800017 	ldw	r2,0(r2)
 1450224:	1000683a 	jmp	r2
 1450228:	01450268 	cmpgeui	r5,zero,5129
 145022c:	01450268 	cmpgeui	r5,zero,5129
 1450230:	01450278 	rdprs	r5,zero,5129
 1450234:	01450278 	rdprs	r5,zero,5129
 1450238:	01450278 	rdprs	r5,zero,5129
 145023c:	01450268 	cmpgeui	r5,zero,5129
 1450240:	01450270 	cmpltui	r5,zero,5129
 1450244:	01450278 	rdprs	r5,zero,5129
 1450248:	01450268 	cmpgeui	r5,zero,5129
 145024c:	01450268 	cmpgeui	r5,zero,5129
 1450250:	01450278 	rdprs	r5,zero,5129
 1450254:	01450268 	cmpgeui	r5,zero,5129
 1450258:	01450270 	cmpltui	r5,zero,5129
 145025c:	01450278 	rdprs	r5,zero,5129
 1450260:	01450278 	rdprs	r5,zero,5129
 1450264:	01450268 	cmpgeui	r5,zero,5129
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 1450268:	00800044 	movi	r2,1
 145026c:	00000306 	br	145027c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 1450270:	0005883a 	mov	r2,zero
 1450274:	00000106 	br	145027c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 1450278:	0005883a 	mov	r2,zero
  }
}
 145027c:	e037883a 	mov	sp,fp
 1450280:	df000017 	ldw	fp,0(sp)
 1450284:	dec00104 	addi	sp,sp,4
 1450288:	f800283a 	ret

0145028c <exit>:
 145028c:	defffe04 	addi	sp,sp,-8
 1450290:	000b883a 	mov	r5,zero
 1450294:	dc000015 	stw	r16,0(sp)
 1450298:	dfc00115 	stw	ra,4(sp)
 145029c:	2021883a 	mov	r16,r4
 14502a0:	14503400 	call	1450340 <__call_exitprocs>
 14502a4:	00805174 	movhi	r2,325
 14502a8:	10855104 	addi	r2,r2,5444
 14502ac:	11000017 	ldw	r4,0(r2)
 14502b0:	20800f17 	ldw	r2,60(r4)
 14502b4:	10000126 	beq	r2,zero,14502bc <exit+0x30>
 14502b8:	103ee83a 	callr	r2
 14502bc:	8009883a 	mov	r4,r16
 14502c0:	14504d40 	call	14504d4 <_exit>

014502c4 <memcmp>:
 14502c4:	01c000c4 	movi	r7,3
 14502c8:	3980192e 	bgeu	r7,r6,1450330 <memcmp+0x6c>
 14502cc:	2144b03a 	or	r2,r4,r5
 14502d0:	11c4703a 	and	r2,r2,r7
 14502d4:	10000f26 	beq	r2,zero,1450314 <memcmp+0x50>
 14502d8:	20800003 	ldbu	r2,0(r4)
 14502dc:	28c00003 	ldbu	r3,0(r5)
 14502e0:	10c0151e 	bne	r2,r3,1450338 <memcmp+0x74>
 14502e4:	31bfff84 	addi	r6,r6,-2
 14502e8:	01ffffc4 	movi	r7,-1
 14502ec:	00000406 	br	1450300 <memcmp+0x3c>
 14502f0:	20800003 	ldbu	r2,0(r4)
 14502f4:	28c00003 	ldbu	r3,0(r5)
 14502f8:	31bfffc4 	addi	r6,r6,-1
 14502fc:	10c00e1e 	bne	r2,r3,1450338 <memcmp+0x74>
 1450300:	21000044 	addi	r4,r4,1
 1450304:	29400044 	addi	r5,r5,1
 1450308:	31fff91e 	bne	r6,r7,14502f0 <__alt_data_end+0xfffeaaf0>
 145030c:	0005883a 	mov	r2,zero
 1450310:	f800283a 	ret
 1450314:	20c00017 	ldw	r3,0(r4)
 1450318:	28800017 	ldw	r2,0(r5)
 145031c:	1880041e 	bne	r3,r2,1450330 <memcmp+0x6c>
 1450320:	31bfff04 	addi	r6,r6,-4
 1450324:	21000104 	addi	r4,r4,4
 1450328:	29400104 	addi	r5,r5,4
 145032c:	39bff936 	bltu	r7,r6,1450314 <__alt_data_end+0xfffeab14>
 1450330:	303fe91e 	bne	r6,zero,14502d8 <__alt_data_end+0xfffeaad8>
 1450334:	003ff506 	br	145030c <__alt_data_end+0xfffeab0c>
 1450338:	10c5c83a 	sub	r2,r2,r3
 145033c:	f800283a 	ret

01450340 <__call_exitprocs>:
 1450340:	00805174 	movhi	r2,325
 1450344:	10855104 	addi	r2,r2,5444
 1450348:	10800017 	ldw	r2,0(r2)
 145034c:	defff404 	addi	sp,sp,-48
 1450350:	dd800815 	stw	r22,32(sp)
 1450354:	d8800015 	stw	r2,0(sp)
 1450358:	10805204 	addi	r2,r2,328
 145035c:	dd000615 	stw	r20,24(sp)
 1450360:	dc800415 	stw	r18,16(sp)
 1450364:	dfc00b15 	stw	ra,44(sp)
 1450368:	df000a15 	stw	fp,40(sp)
 145036c:	ddc00915 	stw	r23,36(sp)
 1450370:	dd400715 	stw	r21,28(sp)
 1450374:	dcc00515 	stw	r19,20(sp)
 1450378:	dc400315 	stw	r17,12(sp)
 145037c:	dc000215 	stw	r16,8(sp)
 1450380:	2025883a 	mov	r18,r4
 1450384:	2829883a 	mov	r20,r5
 1450388:	d8800115 	stw	r2,4(sp)
 145038c:	05bfffc4 	movi	r22,-1
 1450390:	d8800017 	ldw	r2,0(sp)
 1450394:	14c05217 	ldw	r19,328(r2)
 1450398:	98001d26 	beq	r19,zero,1450410 <__call_exitprocs+0xd0>
 145039c:	dd400117 	ldw	r21,4(sp)
 14503a0:	98800117 	ldw	r2,4(r19)
 14503a4:	173fffc4 	addi	fp,r2,-1
 14503a8:	e0000d16 	blt	fp,zero,14503e0 <__call_exitprocs+0xa0>
 14503ac:	14000044 	addi	r16,r2,1
 14503b0:	8421883a 	add	r16,r16,r16
 14503b4:	8421883a 	add	r16,r16,r16
 14503b8:	84402004 	addi	r17,r16,128
 14503bc:	9c63883a 	add	r17,r19,r17
 14503c0:	9c21883a 	add	r16,r19,r16
 14503c4:	a0001e26 	beq	r20,zero,1450440 <__call_exitprocs+0x100>
 14503c8:	80804017 	ldw	r2,256(r16)
 14503cc:	15001c26 	beq	r2,r20,1450440 <__call_exitprocs+0x100>
 14503d0:	e73fffc4 	addi	fp,fp,-1
 14503d4:	843fff04 	addi	r16,r16,-4
 14503d8:	8c7fff04 	addi	r17,r17,-4
 14503dc:	e5bff91e 	bne	fp,r22,14503c4 <__alt_data_end+0xfffeabc4>
 14503e0:	00800034 	movhi	r2,0
 14503e4:	10800004 	addi	r2,r2,0
 14503e8:	10000926 	beq	r2,zero,1450410 <__call_exitprocs+0xd0>
 14503ec:	98800117 	ldw	r2,4(r19)
 14503f0:	1000311e 	bne	r2,zero,14504b8 <__call_exitprocs+0x178>
 14503f4:	98800017 	ldw	r2,0(r19)
 14503f8:	10003426 	beq	r2,zero,14504cc <__call_exitprocs+0x18c>
 14503fc:	9809883a 	mov	r4,r19
 1450400:	a8800015 	stw	r2,0(r21)
 1450404:	00000000 	call	0 <__alt_mem_ufm_flash_data-0x1200000>
 1450408:	acc00017 	ldw	r19,0(r21)
 145040c:	983fe41e 	bne	r19,zero,14503a0 <__alt_data_end+0xfffeaba0>
 1450410:	dfc00b17 	ldw	ra,44(sp)
 1450414:	df000a17 	ldw	fp,40(sp)
 1450418:	ddc00917 	ldw	r23,36(sp)
 145041c:	dd800817 	ldw	r22,32(sp)
 1450420:	dd400717 	ldw	r21,28(sp)
 1450424:	dd000617 	ldw	r20,24(sp)
 1450428:	dcc00517 	ldw	r19,20(sp)
 145042c:	dc800417 	ldw	r18,16(sp)
 1450430:	dc400317 	ldw	r17,12(sp)
 1450434:	dc000217 	ldw	r16,8(sp)
 1450438:	dec00c04 	addi	sp,sp,48
 145043c:	f800283a 	ret
 1450440:	98800117 	ldw	r2,4(r19)
 1450444:	80c00017 	ldw	r3,0(r16)
 1450448:	10bfffc4 	addi	r2,r2,-1
 145044c:	17001526 	beq	r2,fp,14504a4 <__call_exitprocs+0x164>
 1450450:	80000015 	stw	zero,0(r16)
 1450454:	183fde26 	beq	r3,zero,14503d0 <__alt_data_end+0xfffeabd0>
 1450458:	00800044 	movi	r2,1
 145045c:	1708983a 	sll	r4,r2,fp
 1450460:	98806217 	ldw	r2,392(r19)
 1450464:	9dc00117 	ldw	r23,4(r19)
 1450468:	2084703a 	and	r2,r4,r2
 145046c:	1000061e 	bne	r2,zero,1450488 <__call_exitprocs+0x148>
 1450470:	183ee83a 	callr	r3
 1450474:	98800117 	ldw	r2,4(r19)
 1450478:	15ffc51e 	bne	r2,r23,1450390 <__alt_data_end+0xfffeab90>
 145047c:	a8800017 	ldw	r2,0(r21)
 1450480:	14ffd326 	beq	r2,r19,14503d0 <__alt_data_end+0xfffeabd0>
 1450484:	003fc206 	br	1450390 <__alt_data_end+0xfffeab90>
 1450488:	98806317 	ldw	r2,396(r19)
 145048c:	2084703a 	and	r2,r4,r2
 1450490:	1000061e 	bne	r2,zero,14504ac <__call_exitprocs+0x16c>
 1450494:	89400017 	ldw	r5,0(r17)
 1450498:	9009883a 	mov	r4,r18
 145049c:	183ee83a 	callr	r3
 14504a0:	003ff406 	br	1450474 <__alt_data_end+0xfffeac74>
 14504a4:	9f000115 	stw	fp,4(r19)
 14504a8:	003fea06 	br	1450454 <__alt_data_end+0xfffeac54>
 14504ac:	89000017 	ldw	r4,0(r17)
 14504b0:	183ee83a 	callr	r3
 14504b4:	003fef06 	br	1450474 <__alt_data_end+0xfffeac74>
 14504b8:	98800017 	ldw	r2,0(r19)
 14504bc:	982b883a 	mov	r21,r19
 14504c0:	1027883a 	mov	r19,r2
 14504c4:	983fb61e 	bne	r19,zero,14503a0 <__alt_data_end+0xfffeaba0>
 14504c8:	003fd106 	br	1450410 <__alt_data_end+0xfffeac10>
 14504cc:	0005883a 	mov	r2,zero
 14504d0:	003ffa06 	br	14504bc <__alt_data_end+0xfffeacbc>

014504d4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 14504d4:	defffd04 	addi	sp,sp,-12
 14504d8:	df000215 	stw	fp,8(sp)
 14504dc:	df000204 	addi	fp,sp,8
 14504e0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 14504e4:	0001883a 	nop
 14504e8:	e0bfff17 	ldw	r2,-4(fp)
 14504ec:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 14504f0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 14504f4:	10000226 	beq	r2,zero,1450500 <_exit+0x2c>
    ALT_SIM_FAIL();
 14504f8:	002af070 	cmpltui	zero,zero,43969
 14504fc:	00000106 	br	1450504 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 1450500:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1450504:	003fff06 	br	1450504 <__alt_data_end+0xfffead04>
