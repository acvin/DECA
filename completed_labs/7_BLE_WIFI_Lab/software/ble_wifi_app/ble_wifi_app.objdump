
ble_wifi_app.elf:     file format elf32-littlenios2
ble_wifi_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000240

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00025714 memsz 0x00025714 flags r-x
    LOAD off    0x00026734 vaddr 0x10025734 paddr 0x10027488 align 2**12
         filesz 0x00001d54 memsz 0x00001d54 flags rw-
    LOAD off    0x000291dc vaddr 0x100291dc paddr 0x100291dc align 2**12
         filesz 0x00000000 memsz 0x000004b4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000248b0  10000240  10000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c44  10024af0  10024af0  00025af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d54  10025734  10027488  00026734  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000004b4  100291dc  100291dc  000291dc  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_ddr3_emif_0 00000000  10029690  10029690  00028488  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00028488  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013c0  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003f5bd  00000000  00000000  00029870  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000e6c9  00000000  00000000  00068e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000128d2  00000000  00000000  000774f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00004720  00000000  00000000  00089dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00008342  00000000  00000000  0008e4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0002298a  00000000  00000000  0009682a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  000b91b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019b0  00000000  00000000  000b9218  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000c0cdd  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  000c0ce0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000c0cea  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000c0ceb  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000c0cec  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000c0cf0  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000c0cf4  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  000c0cf8  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  000c0d01  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  000c0d0a  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000b  00000000  00000000  000c0d13  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  000c0d1e  2**0
                  CONTENTS, READONLY
 29 .jdi          00004068  00000000  00000000  000c0d42  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0012560c  00000000  00000000  000c4daa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000240 l    d  .text	00000000 .text
10024af0 l    d  .rodata	00000000 .rodata
10025734 l    d  .rwdata	00000000 .rwdata
100291dc l    d  .bss	00000000 .bss
10029690 l    d  .mem_if_ddr3_emif_0	00000000 .mem_if_ddr3_emif_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ble_wifi_bsp//obj/HAL/src/crt0.o
10000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 cc2650.c
00000000 l    df *ABS*	00000000 cc3100.c
00000000 l    df *ABS*	00000000 hdc1000.c
00000000 l    df *ABS*	00000000 lis2dh12.c
00000000 l    df *ABS*	00000000 lis332ar.c
00000000 l    df *ABS*	00000000 i2c.c
100291dc l     O .bss	00000004 sclBase
100291e0 l     O .bss	00000004 sdaBase
00000000 l    df *ABS*	00000000 spi.c
10024af0 l     O .rodata	00000028 deviceInfo
00000000 l    df *ABS*	00000000 main.c
10000e54 l     F .text	00000424 configureSimpleLinkToDefaultState
10001278 l     F .text	0000002c initializeAppVariables
100012a4 l     F .text	000000c0 GetUserNum
10001364 l     F .text	00000118 GetUserInput
1000147c l     F .text	000001f8 ConfigureAPmode
1002736e l     O .rwdata	00000002 temperature.4347
10027370 l     O .rwdata	00000002 humidity.4348
10027372 l     O .rwdata	00000002 x_axis.4344
10027374 l     O .rwdata	00000002 y_axis.4345
10027376 l     O .rwdata	00000002 z_axis.4346
10002d98 l     F .text	0000030c slInterrupt
10002ac0 l     F .text	0000006c set_authentication_check
10002d1c l     F .text	0000007c get_domain_name
10002ca0 l     F .text	0000007c get_device_urn
10002b2c l     F .text	0000007c get_auth_name
10002ba8 l     F .text	0000007c get_auth_password
10002c24 l     F .text	0000007c get_auth_realm
100291f0 l     O .bss	00000004 count.4469
100291f4 l     O .bss	00000002 temperature.4464
100291f6 l     O .bss	00000002 humidity.4465
100291f8 l     O .bss	00000002 x_axis.4461
100291fa l     O .bss	00000002 y_axis.4462
100291fc l     O .bss	00000002 z_axis.4463
1002924c l     O .bss	00000028 macData.4470
00000000 l    df *ABS*	00000000 boardSL.c
100030a4 l     F .text	00000020 timerInterrupt
100030c4 l     F .text	0000006c slInterrupt
10029204 l     O .bss	00000004 count.2612
00000000 l    df *ABS*	00000000 device.c
00000000 l    df *ABS*	00000000 driver.c
00000000 l    df *ABS*	00000000 flowcont.c
00000000 l    df *ABS*	00000000 fs.c
00000000 l    df *ABS*	00000000 netapp.c
00000000 l    df *ABS*	00000000 netcfg.c
00000000 l    df *ABS*	00000000 nonos.c
00000000 l    df *ABS*	00000000 socket.c
00000000 l    df *ABS*	00000000 spawn.c
00000000 l    df *ABS*	00000000 wlan.c
00000000 l    df *ABS*	00000000 spiSL.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c5c4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 scanf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
10025116 l     O .rodata	00000010 zeroes.4166
10025126 l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 vfprintf.c
10025136 l     O .rodata	00000010 zeroes.4181
10025146 l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 vfscanf.c
1002515e l     O .rodata	00000022 basefix.4098
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
10025281 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1001287c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100143fc l     F .text	00000008 __fp_lock
10014404 l     F .text	00000008 __fp_unlock
10014418 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10025794 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 iswspace.c
00000000 l    df *ABS*	00000000 locale.c
10025bd8 l     O .rwdata	00000020 lc_ctype_charset
10025bb8 l     O .rwdata	00000020 lc_message_charset
10025bf8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mbrtowc.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
10025424 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 refill.c
10017860 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 sf_nan.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strtod.c
1002604c l     O .rwdata	00000014 fpi.2638
10025558 l     O .rodata	00000028 tinytens
10026038 l     O .rwdata	00000014 fpinan.2674
00000000 l    df *ABS*	00000000 strtoll_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 strtoull_r.c
00000000 l    df *ABS*	00000000 vfprintf.c
10025580 l     O .rodata	00000010 zeroes.4110
10025590 l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 vfprintf.c
1001b1b0 l     F .text	000000fc __sprint_r.part.0
100255b0 l     O .rodata	00000010 blanks.4125
100255a0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
1001cb00 l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
10021210 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10021330 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1002135c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
1002172c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10021820 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10021904 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10021ae0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
10027474 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10021d6c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10021eb4 l     F .text	00000038 alt_dev_reg
10026208 l     O .rwdata	00001060 JTAG_UART
10027268 l     O .rwdata	000000c4 CC3100_UART
1002732c l     O .rwdata	0000003c ADC
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100221d0 l     F .text	00000204 altera_avalon_jtag_uart_irq
100223d4 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
10022db0 l     F .text	00000098 altera_avalon_uart_irq
10022e48 l     F .text	000000e0 altera_avalon_uart_rxirq
10022f28 l     F .text	00000144 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
100230c0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
100232ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_modular_adc.c
100234e8 l     F .text	000000a4 alt_adc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10023d04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1002400c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
10024144 l     F .text	00000050 alt_get_errno
10024194 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10029240 g     O .bss	00000004 alt_instruction_exception_handler
1000b09c g     F .text	00000438 sl_WlanConnect
100032ec g     F .text	00000218 sl_Start
10017148 g     F .text	00000074 _mprec_log10
10000788 g     F .text	00000034 i2cSelect
1000c0b8 g     F .text	00000078 sl_WlanRxStatGet
100273d0 g     O .rwdata	00000004 _SlNetAppSendTokenValueCmdCtrl
10023780 g     F .text	0000004c adc_stop
1000925c g     F .text	00000130 sl_NetCfgGet
10003d8c g     F .text	0000018c _SlDrvDriverCBInit
10017234 g     F .text	0000008c __any_on
1001d734 g     F .text	00000054 _isatty_r
10025430 g     O .rodata	00000028 __mprec_tinytens
10021a28 g     F .text	00000078 alt_main
10003a80 g     F .text	0000006c sl_EventMaskGet
1000ca48 g     F .text	000000b8 _puts_r
10029590 g     O .bss	00000100 alt_irq
1001d788 g     F .text	0000005c _lseek_r
1000a3e8 g     F .text	000002dc sl_Accept
10027488 g       *ABS*	00000000 __flash_rwdata_start
10003a18 g     F .text	00000068 sl_EventMaskSet
1001fbe0 g     F .text	00000084 .hidden __eqdf2
10029690 g       *ABS*	00000000 __alt_heap_start
10025734 g     O .rwdata	0000000c rdata
1000493c g     F .text	00000304 _SlDrvMsgWrite
10003130 g     F .text	00000088 registerInterruptHandler
1000ca0c g     F .text	0000003c printf
1001da70 g     F .text	0000009c _wcrtomb_r
10017c8c g     F .text	0000005c __sseek
1001474c g     F .text	00000010 __sinit
1001d900 g     F .text	00000154 __swbuf_r
10000bf4 g     F .text	000000a4 i2cReadNoAddress
1000028c g     F .text	0000001c cc2650Init
10015474 g     F .text	0000007c _setlocale_r
100145b8 g     F .text	00000064 __sfmoreglue
1001b194 g     F .text	0000001c ungetc
10009e00 g     F .text	00000254 sl_Connect
10021ac0 g     F .text	00000020 __malloc_unlock
10017d94 g     F .text	00001540 _strtod_r
100032c4 g     F .text	00000028 sl_Task
100088c4 g     F .text	000001b4 _sl_HandleAsync_PingResponse
1000bd14 g     F .text	0000005c sl_WlanProfileDel
1000bfa0 g     F .text	000000c0 sl_WlanRxFilterGet
1000070c g     F .text	0000007c i2cNAck
100273f0 g     O .rwdata	00000004 _SlListenCmdCtrl
100161d8 g     F .text	0000015c memmove
10007bfc g     F .text	00000058 sl_NetAppStart
100291e8 g     O .bss	00000004 g_PingPacketsRecv
10009978 g     F .text	000000e8 sl_Bind
10014734 g     F .text	00000018 _cleanup
10016334 g     F .text	000000a8 _Balloc
10007c54 g     F .text	00000058 sl_NetAppStop
100083ec g     F .text	00000024 _sl_HandleAsync_DnsGetHostByAddr
1000991c g     F .text	0000005c sl_Close
1001fc64 g     F .text	000000e0 .hidden __gtdf2
10007470 g     F .text	0000013c _sl_GetCreateFsMode
10024554 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000b34 g     F .text	000000c0 i2cRead
10000000 g     F .entry	0000001c __reset
1002392c g     F .text	00000044 adc_interrupt_disable
10000020 g       *ABS*	00000000 __flash_exceptions_start
10009668 g     F .text	00000144 _sl_TruncatePayloadByProtocol
1001caa8 g     F .text	00000058 _fstat_r
100016a8 g     F .text	0000012c SimpleLinkWlanEventHandler
1002922c g     O .bss	00000004 errno
100126dc g     F .text	00000024 __svfscanf
10017c08 g     F .text	00000008 __seofread
10027388 g     O .rwdata	00000004 _SlDeviceSetCmdCtrl
10002a04 g     F .text	000000bc set_port_number
10019ed0 g     F .text	00001068 ___svfiprintf_internal_r
10023638 g     F .text	00000070 altera_modular_adc_init
10029238 g     O .bss	00000004 alt_argv
10008fc0 g     F .text	000001e8 _SlDrvNetAppEventHandler
1002f368 g       *ABS*	00000000 _gp
10021d3c g     F .text	00000030 usleep
1000938c g     F .text	00000038 _SlNonOsSemSet
1000a938 g     F .text	000000b0 sl_Recv
10000690 g     F .text	0000007c i2cAck
100097ac g     F .text	000000d8 _sl_ParseAddress
1002574c g     O .rwdata	0000000b GET_token
1000a6c4 g     F .text	00000098 sl_Htonl
10026088 g     O .rwdata	00000180 alt_fd_list
100273a0 g     O .rwdata	00000004 _SlFsCloseCmdCtrl
10023eb0 g     F .text	00000090 alt_find_dev
1000c784 g     F .text	00000138 memcpy
1001d4a0 g     F .text	00000294 __hexnan
1000bf10 g     F .text	00000090 sl_WlanRxFilterSet
10009884 g     F .text	00000098 sl_Socket
1001440c g     F .text	0000000c _cleanup_r
1000031c g     F .text	000000d0 hdc1000Read
10020ea0 g     F .text	000000d0 .hidden __floatsidf
1002383c g     F .text	00000038 adc_set_mode_run_continuously
10027394 g     O .rwdata	00000008 g_H2NCnysPattern
100240cc g     F .text	00000078 alt_io_redirect
1001fd44 g     F .text	000000e0 .hidden __ltdf2
10024af0 g       *ABS*	00000000 __DTOR_END__
1002738c g     O .rwdata	00000008 g_H2NSyncPattern
1000cb00 g     F .text	00000014 puts
10023f70 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10015f60 g     F .text	000000f0 mbrtowc
1000bd70 g     F .text	000000ac sl_WlanGetNetworkList
100007bc g     F .text	00000090 i2cStart
10017a24 g     F .text	00000074 __fpclassifyd
10012700 g     F .text	0000004c _vfscanf_r
100170a4 g     F .text	000000a4 __ratio
10025788 g     O .rwdata	0000000b GET_ZAXIS_token
1001c620 g     F .text	00000024 __vfiprintf_internal
10025764 g     O .rwdata	0000000b GET_HUMID_token
100225d0 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
1000c9e0 g     F .text	0000002c _printf_r
1000c6e0 g     F .text	00000008 .hidden __udivsi3
1002177c g     F .text	000000a4 isatty
10015444 g     F .text	00000030 iswspace
10025480 g     O .rodata	000000c8 __mprec_tens
100005b4 g     F .text	0000005c lis332arInit
100154f0 g     F .text	0000000c __locale_charset
100041e8 g     F .text	00000068 _SlDrvCmdSend
1002737c g     O .rwdata	00000004 _SlEventMaskSetCmdCtrl
1001e9c0 g     F .text	000000b8 .hidden __lesf2
1000aed8 g     F .text	00000058 SL_FD_ISSET
1001dcd0 g     F .text	00000074 .hidden __fixunsdfsi
1002473c g     F .text	0000008c alt_icache_flush
10029228 g     O .bss	00000004 __malloc_top_pad
100273b8 g     O .rwdata	00000004 _SlNetAppStopCtrl
10019990 g     F .text	00000024 strtoul
10027444 g     O .rwdata	00000004 __mb_cur_max
10015520 g     F .text	0000000c _localeconv_r
100199b4 g     F .text	00000354 _strtoull_r
10016734 g     F .text	0000003c __i2b
10014e30 g     F .text	000004a4 __sfvwrite_r
100273a4 g     O .rwdata	00000004 _SlFsReadCmdCtrl
10017a98 g     F .text	00000054 _sbrk_r
10007418 g     F .text	00000058 _sl_Strlen
10004250 g     F .text	000003a4 _SlDrvDataReadOp
1000c060 g     F .text	0000002c sl_WlanRxStatStart
1001d7e4 g     F .text	0000005c _read_r
10027478 g     O .rwdata	00000008 altera_modular_adc_list
10004c40 g     F .text	000009e8 _SlDrvMsgRead
100091a8 g     F .text	000000b4 sl_NetCfgSet
10027468 g     O .rwdata	00000004 alt_max_fd
10009c24 g     F .text	000001dc sl_RecvFrom
1001c7b8 g     F .text	00000100 _fclose_r
100143cc g     F .text	00000030 fflush
10029224 g     O .bss	00000004 __malloc_max_sbrked_mem
1001ea78 g     F .text	0000089c .hidden __adddf3
1001e894 g     F .text	00000074 .hidden __nesf2
1000aa94 g     F .text	00000100 sl_GetSockOpt
100009ec g     F .text	000000a8 i2cRead8bit
10007374 g     F .text	000000a4 _SlDrvFlowContDeinit
10016e4c g     F .text	0000011c __b2d
1001e304 g     F .text	00000590 .hidden __umoddi3
10021954 g     F .text	000000d4 lseek
10000610 g     F .text	00000080 lis332arRead
1000be1c g     F .text	000000f4 sl_WlanRxFilterAdd
100072cc g     F .text	000000a8 _SlDrvFlowContInit
1002743c g     O .rwdata	00000004 _global_impure_ptr
100172c0 g     F .text	000005a0 _realloc_r
10029690 g       *ABS*	00000000 __bss_end
1002163c g     F .text	000000f0 alt_iic_isr_register
1002929c g     O .bss	00000015 g_auth_realm
10024450 g     F .text	00000104 alt_tick
10029490 g     O .bss	00000100 __hexdig
1001dd44 g     F .text	000005c0 .hidden __udivdi3
1001c8cc g     F .text	00000184 _fputwc_r
100239f0 g     F .text	00000038 adc_wait_for_interrupt
10025458 g     O .rodata	00000028 __mprec_bigtens
10016518 g     F .text	00000104 __s2b
10020f70 g     F .text	000000a4 .hidden __floatunsidf
100273f8 g     O .rwdata	00000004 _SlRecvCmdCtrl
10016bf4 g     F .text	00000060 __mcmp
10022d08 g     F .text	000000a8 altera_avalon_uart_init
100273fc g     O .rwdata	00000004 _SlSetSockOptCmdCtrl
1000084c g     F .text	0000007c i2cStop
1001476c g     F .text	00000018 __fp_lock_all
10008dfc g     F .text	000000c8 sl_NetAppSendTokenValue
100215f0 g     F .text	0000004c alt_ic_irq_enabled
100243b8 g     F .text	00000098 alt_alarm_stop
10008244 g     F .text	000001a8 _sl_HandleAsync_DnsGetHostByService
1000cf38 g     F .text	00000024 strtol
10029230 g     O .bss	00000004 alt_irq_active
10008a78 g     F .text	000002d0 sl_NetAppPingStart
100000fc g     F .exceptions	000000d0 alt_irq_handler
10026060 g     O .rwdata	00000028 alt_dev_null
10027400 g     O .rwdata	00000004 _SlGetSockOptCmdCtrl
100273d4 g     O .rwdata	00000004 _SlNetAppGetCmdCtrl
1000790c g     F .text	00000180 sl_FsWrite
10023800 g     F .text	0000003c adc_set_mode_run_once
1002577c g     O .rwdata	0000000b GET_YAXIS_token
10002514 g     F .text	0000009c SimpleLinkSockEventHandler
1000ae84 g     F .text	00000054 SL_FD_CLR
10023cc0 g     F .text	00000044 alt_dcache_flush_all
1001661c g     F .text	00000068 __hi0bits
100036c8 g     F .text	00000144 _sl_HandleAsync_Stop
10020e18 g     F .text	00000088 .hidden __fixdfsi
100002c4 g     F .text	00000058 hdc1000Init
1000b598 g     F .text	00000110 sl_WlanPolicyGet
1000c4b0 g     F .text	00000024 spiSL_Close
100192d4 g     F .text	0000001c strtod
10027488 g       *ABS*	00000000 __ram_rwdata_end
10027460 g     O .rwdata	00000008 alt_dev_list
10021dbc g     F .text	000000f8 write
10027368 g     O .rwdata	00000002 reg_addr
1001e908 g     F .text	000000b8 .hidden __gtsf2
10029200 g     O .bss	00000004 pIrqEventHandler
10025734 g       *ABS*	00000000 __ram_rodata_end
100213ac g     F .text	000000b0 fstat
1001fd44 g     F .text	000000e0 .hidden __ledf2
10008410 g     F .text	00000268 sl_NetAppDnsGetHostByName
10029468 g     O .bss	00000028 g__SlNonOsCB
100237cc g     F .text	00000034 adc_start
1001696c g     F .text	00000140 __pow5mult
1001b2c4 g     F .text	0000135c ___vfiprintf_internal_r
1002921c g     O .bss	00000004 __nlocale_changed
1000c6e8 g     F .text	00000008 .hidden __umodsi3
100040cc g     F .text	0000011c _SlDrvCmdOp
1000cb50 g     F .text	0000002c _scanf_r
10006284 g     F .text	00000158 _SlDrvClassifyRxMsg
1000b500 g     F .text	00000098 sl_WlanPolicySet
10025740 g     O .rwdata	0000000b POST_token
1000af58 g     F .text	00000144 _sl_HandleAsync_Select
10029690 g       *ABS*	00000000 end
1000a75c g     F .text	0000007c sl_Htons
10003c14 g     F .text	000000b4 sl_DevSet
10007ff4 g     F .text	00000250 sl_NetAppDnsGetHostByService
1000c6fc g     F .text	0000000c _atoi_r
1002333c g     F .text	000001ac altera_avalon_uart_write
1002210c g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000074 alt_instruction_exception_entry
100273e0 g     O .rwdata	00000004 _SlSockSocketCmdCtrl
10024af0 g       *ABS*	00000000 __CTOR_LIST__
20000000 g       *ABS*	00000000 __alt_stack_pointer
10022c58 g     F .text	00000060 altera_avalon_uart_write_fd
100211ac g     F .text	00000064 .hidden __clzsi2
10022cb8 g     F .text	00000050 altera_avalon_uart_close_fd
100227dc g     F .text	00000218 altera_avalon_jtag_uart_write
10029208 g     O .bss	00000004 g_pCB
10025098 g     O .rodata	00000038 _SlActionLookupTable
1001475c g     F .text	00000004 __sfp_lock_acquire
100160f0 g     F .text	000000e8 memchr
1000eeec g     F .text	00001ffc ___vfprintf_internal_r
1000cb7c g     F .text	00000058 _sprintf_r
10027404 g     O .rwdata	00000004 _SlSelectCmdCtrl
100273ec g     O .rwdata	00000004 _SlSendCmdCtrl
10014b40 g     F .text	000002f0 _free_r
100154fc g     F .text	00000010 __locale_mb_cur_max
10008d48 g     F .text	000000b4 sl_NetAppSet
10024928 g     F .text	00000194 __call_exitprocs
1002741c g     O .rwdata	00000004 _SlRxFilterAddtCmdCtrl
10029218 g     O .bss	00000004 __mlocale_changed
10027448 g     O .rwdata	00000004 __malloc_sbrk_base
10000240 g     F .text	0000004c _start
10029244 g     O .bss	00000004 _alt_tick_rate
1000a9e8 g     F .text	000000ac sl_SetSockOpt
100193f4 g     F .text	00000314 _strtoll_r
100273b0 g     O .rwdata	00000004 _SlFsDeleteCmdCtrl
1000a7d8 g     F .text	00000160 _sl_HandleAsync_Accept
10016aac g     F .text	00000148 __lshift
100229f4 g     F .text	00000204 alt_avalon_spi_command
1000049c g     F .text	00000118 lis2dh12Read
100273c4 g     O .rwdata	00000004 _SlGetHostByServiceCtrl
10029248 g     O .bss	00000004 _alt_nticks
10021b30 g     F .text	000000fc read
100273d8 g     O .rwdata	00000004 _SlNetCfgSetCmdCtrl
10021f20 g     F .text	00000088 alt_sys_init
10019d08 g     F .text	000001c8 __ssprint_r
1000c08c g     F .text	0000002c sl_WlanRxStatStop
10024814 g     F .text	00000114 __register_exitproc
10008ec4 g     F .text	000000fc sl_NetAppGet
10000c98 g     F .text	00000084 spiTransfer
1001d840 g     F .text	000000c0 strncmp
100273c0 g     O .rwdata	00000004 _SlRegisterServiceCtrl
10006114 g     F .text	00000170 _SlDrvMsgReadSpawnCtx
100273ac g     O .rwdata	00000004 _SlFsGetInfoCmdCtrl
10008678 g     F .text	000001c8 _sl_HandleAsync_DnsGetHostByName
10016770 g     F .text	000001fc __multiply
1002247c g     F .text	00000068 altera_avalon_jtag_uart_close
10025734 g       *ABS*	00000000 __ram_rwdata_start
10024af0 g       *ABS*	00000000 __ram_rodata_start
10029274 g     O .bss	00000028 __malloc_current_mallinfo
1001e894 g     F .text	00000074 .hidden __eqsf2
10016f68 g     F .text	0000013c __d2b
100273e8 g     O .rwdata	00000004 _SlRecvfomCmdCtrl
100031e4 g     F .text	0000002c CC3100_enable
100067bc g     F .text	00000074 _SlDrvBasicCmd
10027420 g     O .rwdata	00000004 _SlRxFilterSetCmdCtrl
10021fa8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10019708 g     F .text	00000288 _strtoul_r
10024688 g     F .text	000000b4 alt_get_fd
10023b68 g     F .text	00000158 alt_busy_sleep
100273c8 g     O .rwdata	00000004 _SlGetHostByNameCtrl
1001c6a0 g     F .text	00000054 _close_r
10003210 g     F .text	000000b4 _sl_GetStartResponseConvert
1000c708 g     F .text	0000007c memcmp
10022068 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10029690 g       *ABS*	00000000 __alt_stack_base
100220b8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10001890 g     F .text	00000c64 SimpleLinkHttpServerCallback
1000ab94 g     F .text	000002a0 sl_Select
1001274c g     F .text	00000130 __swsetup_r
100238ec g     F .text	00000040 adc_interrupt_enable
1001f314 g     F .text	000008cc .hidden __divdf3
1001461c g     F .text	00000118 __sfp
100171bc g     F .text	00000078 __copybits
10025c30 g     O .rwdata	00000408 __malloc_av_
10014768 g     F .text	00000004 __sinit_lock_release
1001fe24 g     F .text	00000724 .hidden __muldf3
10017bb4 g     F .text	00000054 __sread
100149dc g     F .text	00000040 fread
10027384 g     O .rwdata	00000004 _SlDeviceGetCmdCtrl
10024574 g     F .text	00000114 alt_find_file
10009a60 g     F .text	000001c4 sl_SendTo
10023d54 g     F .text	000000a4 alt_dev_llist_insert
10021aa0 g     F .text	00000020 __malloc_lock
10021c8c g     F .text	000000b0 sbrk
1000cf5c g     F .text	00001f90 ___svfprintf_internal_r
10003aec g     F .text	00000128 sl_DevGet
10027428 g     O .rwdata	00000004 _SlSmartConfigStartCmdCtrl
100141a4 g     F .text	00000228 _fflush_r
1001c6f4 g     F .text	000000c4 _calloc_r
100094f0 g     F .text	000000bc _SlNonOsMainLoopTask
100291dc g       *ABS*	00000000 __bss_start
10027434 g     O .rwdata	00000004 _SlWlanCfgGetCmdCtrl
1000c8bc g     F .text	00000124 memset
100025b0 g     F .text	00000454 main
1002923c g     O .bss	00000004 alt_envp
10003cc8 g     F .text	000000c4 _SlDrvDeviceEventHandler
10029220 g     O .bss	00000004 __malloc_max_total_mem
10022008 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
1001da54 g     F .text	0000001c __swbuf
1000768c g     F .text	000000fc sl_FsClose
1001e9c0 g     F .text	000000b8 .hidden __ltsf2
10000e38 g     F .text	0000001c spiInit
1002358c g     F .text	000000ac alt_adc_word_read
1001479c g     F .text	00000240 _fread_r
10025770 g     O .rwdata	0000000b GET_XAXIS_token
10017ce8 g     F .text	00000008 __sclose
20000000 g       *ABS*	00000000 __alt_heap_limit
100002a8 g     F .text	0000001c cc3100Init
1001c8b8 g     F .text	00000014 fclose
10027408 g     O .rwdata	00000004 _SlPolicySetCmdCtrl
10021014 g     F .text	00000198 .hidden __truncdfsf2
1000ccd8 g     F .text	00000260 _strtol_r
10012a7c g     F .text	00001728 _dtoa_r
1001570c g     F .text	000007a8 _malloc_r
1001dbe4 g     F .text	00000030 __ascii_wctomb
1002746c g     O .rwdata	00000004 alt_errno
1001af38 g     F .text	000000d4 __submore
100063dc g     F .text	00000070 _SlDrvShiftDWord
10027380 g     O .rwdata	00000004 _SlEventMaskGetCmdCtrl
100152d4 g     F .text	000000b8 _fwalk
10016094 g     F .text	0000005c _mbtowc_r
1000c630 g     F .text	00000054 .hidden __divsi3
1002739c g     O .rwdata	00000004 _SlFsOpenCmdCtrl
100292b1 g     O .bss	00000010 g_device_urn
10014a1c g     F .text	00000124 _malloc_trim_r
10024af0 g       *ABS*	00000000 __CTOR_END__
10017cf0 g     F .text	000000a4 strcmp
10024af0 g       *ABS*	00000000 __flash_rodata_start
10024af0 g       *ABS*	00000000 __DTOR_LIST__
1000c488 g     F .text	00000028 spiSL_Open
1000b6a8 g     F .text	00000480 sl_WlanProfileAdd
10007cac g     F .text	0000012c sl_NetAppGetServiceList
10006e9c g     F .text	000000b8 _SlDrvObjInit
1001fbe0 g     F .text	00000084 .hidden __nedf2
10021eec g     F .text	00000034 alt_irq_init
10021c2c g     F .text	00000060 alt_release_fd
1000cbd4 g     F .text	0000006c sprintf
100255dc g     O .rodata	00000100 .hidden __clz_tab
1000c2d4 g     F .text	000000a8 sl_WlanSet
10000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif_0
100273e4 g     O .rwdata	00000004 _SlSockCloseCmdCtrl
10029214 g     O .bss	00000004 _PathLocale
100192f0 g     F .text	00000104 strtof
100247c8 g     F .text	00000014 atexit
1001e908 g     F .text	000000b8 .hidden __gesf2
1001c644 g     F .text	0000005c _write_r
100017d4 g     F .text	000000bc SimpleLinkNetAppEventHandler
1001552c g     F .text	0000001c setlocale
1000cb14 g     F .text	0000003c scanf
10017bac g     F .text	00000008 nanf
10027440 g     O .rwdata	00000004 _impure_ptr
10029234 g     O .bss	00000004 alt_argc
10027378 g     O .rwdata	00000004 _SlStopCmdCtrl
10015eb4 g     F .text	000000ac _mbrtowc_r
10023e54 g     F .text	0000005c _do_dtors
10015518 g     F .text	00000008 __locale_cjk_lang
1001787c g     F .text	000001a8 __srefill_r
100003ec g     F .text	000000b0 initLIS2DH12
10006830 g     F .text	00000340 _SlDrvWaitForPoolObj
10000020 g       .exceptions	00000000 alt_irq_entry
10016050 g     F .text	00000044 __ascii_mbtowc
1000a1ec g     F .text	00000190 sl_Send
10016dec g     F .text	00000060 __ulp
10014784 g     F .text	00000018 __fp_unlock_all
10027414 g     O .rwdata	00000004 _SlProfileDelCmdCtrl
100273bc g     O .rwdata	00000004 _SlGetServiceListeCtrl
10027458 g     O .rwdata	00000008 alt_fs_list
100292c1 g     O .bss	00000015 g_auth_password
100291ec g     O .bss	00000004 sta_IP
1000bb28 g     F .text	000001ec sl_WlanProfileGet
100273f4 g     O .rwdata	00000004 _SlAcceptCmdCtrl
10007f84 g     F .text	00000070 sl_NetAppMDNSUnRegisterService
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000c4d4 g     F .text	00000050 spiSL_Read
10003504 g     F .text	000001c4 _sl_HandleAsync_InitComplete
10015548 g     F .text	0000000c localeconv
1000c130 g     F .text	0000002c sl_WlanSmartConfigStop
10000a94 g     F .text	000000a0 i2cWrite
1000c278 g     F .text	0000005c sl_WlanSetMode
1002145c g     F .text	00000050 alt_ic_isr_register
1001cc00 g     F .text	00000084 __hexdig_init
10027488 g       *ABS*	00000000 _edata
100093c4 g     F .text	000000a0 _SlNonOsSemGet
10022bf8 g     F .text	00000060 altera_avalon_uart_read_fd
10029690 g       *ABS*	00000000 _end
1002742c g     O .rwdata	00000004 _SlWlanSetModeCmdCtrl
1000c524 g     F .text	000000a0 spiSL_Write
1000a054 g     F .text	00000198 _sl_HandleAsync_Connect
100239b0 g     F .text	00000040 adc_interrupt_asserted
100273dc g     O .rwdata	00000004 _SlNetCfgGetCmdCtrl
10007dd8 g     F .text	0000012c sl_NetAppMDNSRegisterUnregisterService
1000af30 g     F .text	00000028 SL_FD_ZERO
10000240 g       *ABS*	00000000 __ram_exceptions_end
10012674 g     F .text	00000068 vfscanf
1000380c g     F .text	0000020c sl_Stop
100224e4 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1002920c g     O .bss	00000004 pPingCallBackFunc
1000a37c g     F .text	0000006c sl_Listen
100031b8 g     F .text	0000002c CC3100_disable
1002154c g     F .text	000000a4 alt_ic_irq_disable
10017c10 g     F .text	0000007c __swrite
10027418 g     O .rwdata	00000004 _SlWlanGetNetworkListCtrl
10027410 g     O .rwdata	00000004 _SlProfileGetCmdCtrl
100095ac g     F .text	000000bc _sl_BuildAddress
1002744c g     O .rwdata	00000004 __malloc_trim_threshold
10023970 g     F .text	00000040 adc_clear_interrupt_status
1001550c g     F .text	0000000c __locale_msgcharset
10029304 g     O .bss	00000164 g_StatMem
100247dc g     F .text	00000038 exit
1000c15c g     F .text	0000011c sl_WlanSmartConfigStart
1001538c g     F .text	000000b8 _fwalk_reent
10016c54 g     F .text	00000198 __mdiff
1000c684 g     F .text	0000005c .hidden __modsi3
100273b4 g     O .rwdata	00000004 _SlNetAppStartCtrl
100273a8 g     O .rwdata	00000004 _SlFsWriteCmdCtrl
10027438 g     O .rwdata	00000004 __ctype_ptr__
10005628 g     F .text	00000960 _SlAsyncEventGenericHandler
10005f88 g     F .text	0000018c _SlDrvMsgReadCmdCtx
20000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10014760 g     F .text	00000004 __sfp_lock_release
10008840 g     F .text	00000084 CopyPingResultsToReport
10025758 g     O .rwdata	0000000b GET_TEMP_token
10017aec g     F .text	000000c0 __sccl
1000c6f0 g     F .text	0000000c atoi
10025180 g     O .rodata	00000101 _ctype_
1002736a g     O .rwdata	00000004 wdata
10027450 g     O .rwdata	00000004 __mbtowc
1002306c g     F .text	00000054 altera_avalon_uart_close
10023740 g     F .text	00000040 altera_modular_adc_open
10024abc g     F .text	00000034 _exit
10023a28 g     F .text	00000140 alt_alarm_start
1001dc70 g     F .text	00000060 .hidden __muldi3
10015554 g     F .text	000001b8 __smakebuf_r
1000cc40 g     F .text	00000098 strlen
100008c8 g     F .text	00000124 i2cWrite8bit
10024260 g     F .text	00000158 open
100292d6 g     O .bss	00000019 g_domain_name
1001fc64 g     F .text	000000e0 .hidden __gedf2
1001cc84 g     F .text	0000081c __gethex
10007b70 g     F .text	0000008c sl_FsDel
100291e4 g     O .bss	00000001 g_Status
1000ae34 g     F .text	00000050 SL_FD_SET
10023874 g     F .text	00000078 adc_recalibrate
10027454 g     O .rwdata	00000004 __wctomb
100070bc g     F .text	00000210 _SlFindAndSetActiveObj
10007a8c g     F .text	000000e4 sl_FsGetInfo
1001b2ac g     F .text	00000018 __sprint_r
10023f40 g     F .text	00000030 alt_icache_flush_all
10027470 g     O .rwdata	00000004 alt_priority_mask
100214ac g     F .text	000000a0 alt_ic_irq_enable
10010ee8 g     F .text	00000024 __vfprintf_internal
10023110 g     F .text	000001dc altera_avalon_uart_read
1001dc14 g     F .text	0000005c _wctomb_r
10003f18 g     F .text	00000120 _SlDrvDriverCBDeinit
10006b70 g     F .text	0000032c _SlDrvReleasePoolObj
10020548 g     F .text	000008d0 .hidden __subdf3
10006f90 g     F .text	0000012c _SlRemoveFromList
10029210 g     O .bss	00000001 gFirstCmdMode
10016684 g     F .text	000000b0 __lo0bits
100273cc g     O .rwdata	00000004 _SlNetAppSetCmdCtrl
100024f4 g     F .text	00000020 SimpleLinkPingReport
10010f0c g     F .text	00001768 __svfscanf_r
10027424 g     O .rwdata	00000004 _SlRxFilterGetCmdCtrl
10027480 g     O .rwdata	00000008 alt_alarm_list
1000c37c g     F .text	0000010c sl_WlanGet
1001b00c g     F .text	00000188 _ungetc_r
1002740c g     O .rwdata	00000004 _SlPolicyGetCmdCtrl
10023df8 g     F .text	0000005c _do_ctors
1000644c g     F .text	00000370 _SlDrvRxHdrRead
1001db0c g     F .text	000000d8 wcrtomb
10021260 g     F .text	000000d0 close
100045f4 g     F .text	00000348 _SlDrvDataWriteOp
100075ac g     F .text	000000e0 sl_FsOpen
10000d1c g     F .text	0000011c spiBiRead
10021884 g     F .text	00000080 alt_load
10001674 g     F .text	00000034 SimpleLinkGeneralEventHandler
10007f04 g     F .text	00000080 sl_NetAppMDNSRegisterService
10006f54 g     F .text	0000003c _SlDrvObjDeInit
1000b4d4 g     F .text	0000002c sl_WlanDisconnect
10027430 g     O .rwdata	00000004 _SlWlanCfgSetCmdCtrl
1001ca50 g     F .text	00000058 fputwc
100292ef g     O .bss	00000015 g_auth_name
10009464 g     F .text	0000008c _SlNonOsSpawn
100236a8 g     F .text	00000098 alt_adc_register_callback
00000000  w      *UND*	00000000 free
10014764 g     F .text	00000004 __sinit_lock_acquire
10016404 g     F .text	00000114 __multadd
100163dc g     F .text	00000028 _Bfree
10007788 g     F .text	00000184 sl_FsRead
10004038 g     F .text	00000094 _SlDrvRxIrqHandler



Disassembly of section .entry:

10000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
10000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
10000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
10000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
1000000c:	00bffd16 	blt	zero,r2,10000004 <__alt_data_end+0xf0000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000010:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000014:	08409014 	ori	at,at,576
    jmp r1
10000018:	0800683a 	jmp	at
1000001c:	00000000 	call	10000000 <__reset>

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008400f4 	movhi	r2,4099
10000140:	10a56404 	addi	r2,r2,-27248
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008400f4 	movhi	r2,4099
10000158:	10a56404 	addi	r2,r2,-27248
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf000012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf0000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
100001e0:	000531fa 	rdctl	r2,exception
100001e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
100001e8:	e0bffd17 	ldw	r2,-12(fp)
100001ec:	10801f0c 	andi	r2,r2,124
100001f0:	1004d0ba 	srli	r2,r2,2
100001f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
100001f8:	0005333a 	rdctl	r2,badaddr
100001fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
10000200:	d0a7b617 	ldw	r2,-24872(gp)
10000204:	10000726 	beq	r2,zero,10000224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
10000208:	d0a7b617 	ldw	r2,-24872(gp)
1000020c:	e0fffd17 	ldw	r3,-12(fp)
10000210:	1809883a 	mov	r4,r3
10000214:	e17fff17 	ldw	r5,-4(fp)
10000218:	e1bffe17 	ldw	r6,-8(fp)
1000021c:	103ee83a 	callr	r2
10000220:	00000206 	br	1000022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000228:	0005883a 	mov	r2,zero
}
1000022c:	e037883a 	mov	sp,fp
10000230:	dfc00117 	ldw	ra,4(sp)
10000234:	df000017 	ldw	fp,0(sp)
10000238:	dec00204 	addi	sp,sp,8
1000023c:	f800283a 	ret

Disassembly of section .text:

10000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
10000240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
10000244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
10000248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
1000024c:	00bffd16 	blt	zero,r2,10000244 <__alt_data_end+0xf0000244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000250:	06c80034 	movhi	sp,8192
    ori sp, sp, %lo(__alt_stack_pointer)
10000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000258:	068400b4 	movhi	gp,4098
    ori gp, gp, %lo(_gp)
1000025c:	d6bcda14 	ori	gp,gp,62312
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000260:	008400b4 	movhi	r2,4098
    ori r2, r2, %lo(__bss_start)
10000264:	10a47714 	ori	r2,r2,37340

    movhi r3, %hi(__bss_end)
10000268:	00c400b4 	movhi	r3,4098
    ori r3, r3, %lo(__bss_end)
1000026c:	18e5a414 	ori	r3,r3,38544

    beq r2, r3, 1f
10000270:	10c00326 	beq	r2,r3,10000280 <_start+0x40>

0:
    stw zero, (r2)
10000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000027c:	10fffd36 	bltu	r2,r3,10000274 <__alt_data_end+0xf0000274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000280:	00218840 	call	10021884 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000284:	0021a280 	call	10021a28 <alt_main>

10000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000288:	003fff06 	br	10000288 <__alt_data_end+0xf0000288>

1000028c <cc2650Init>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void cc2650Init (void)
{
1000028c:	deffff04 	addi	sp,sp,-4
10000290:	df000015 	stw	fp,0(sp)
10000294:	d839883a 	mov	fp,sp
}
10000298:	e037883a 	mov	sp,fp
1000029c:	df000017 	ldw	fp,0(sp)
100002a0:	dec00104 	addi	sp,sp,4
100002a4:	f800283a 	ret

100002a8 <cc3100Init>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void cc3100Init (void)
{
100002a8:	deffff04 	addi	sp,sp,-4
100002ac:	df000015 	stw	fp,0(sp)
100002b0:	d839883a 	mov	fp,sp

}
100002b4:	e037883a 	mov	sp,fp
100002b8:	df000017 	ldw	fp,0(sp)
100002bc:	dec00104 	addi	sp,sp,4
100002c0:	f800283a 	ret

100002c4 <hdc1000Init>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void hdc1000Init (void)
{
100002c4:	defffd04 	addi	sp,sp,-12
100002c8:	dfc00215 	stw	ra,8(sp)
100002cc:	df000115 	stw	fp,4(sp)
100002d0:	df000104 	addi	fp,sp,4


	/********************************************
	 * Set SDA/SCL for device
	 ********************************************/
	i2cSelect(RH_TEMP_SCL_BASE, RH_TEMP_SDA_BASE);
100002d4:	01080034 	movhi	r4,8192
100002d8:	21050004 	addi	r4,r4,5120
100002dc:	01480034 	movhi	r5,8192
100002e0:	2944f804 	addi	r5,r5,5088
100002e4:	00007880 	call	10000788 <i2cSelect>

	/********************************************
	 * Set acquisition for temperature and
	 * humidity.  Set resolution.
	 ********************************************/
	dataWrite[0] = (HDC1000_BOTH_ACQUIRE | HDC1000_TRES_14BIT | HDC1000_HRES_14BIT); //0x10
100002e8:	00800404 	movi	r2,16
100002ec:	e0bfff05 	stb	r2,-4(fp)
	dataWrite[1] = 0x00; //Reserved, must be 0
100002f0:	e03fff45 	stb	zero,-3(fp)
	i2cWrite(HDC1000_ADDR_WTR, HDC1000_CONFIG_ADDR, dataWrite, 2);
100002f4:	01002004 	movi	r4,128
100002f8:	01400084 	movi	r5,2
100002fc:	e1bfff04 	addi	r6,fp,-4
10000300:	01c00084 	movi	r7,2
10000304:	0000a940 	call	10000a94 <i2cWrite>
}
10000308:	e037883a 	mov	sp,fp
1000030c:	dfc00117 	ldw	ra,4(sp)
10000310:	df000017 	ldw	fp,0(sp)
10000314:	dec00204 	addi	sp,sp,8
10000318:	f800283a 	ret

1000031c <hdc1000Read>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void hdc1000Read (alt_u16 *temperature, alt_u16 *humidity)
{
1000031c:	defffa04 	addi	sp,sp,-24
10000320:	dfc00515 	stw	ra,20(sp)
10000324:	df000415 	stw	fp,16(sp)
10000328:	df000404 	addi	fp,sp,16
1000032c:	e13ffe15 	stw	r4,-8(fp)
10000330:	e17fff15 	stw	r5,-4(fp)


	/********************************************
	 * Set SDA/SCL for device
	 ********************************************/
	i2cSelect(RH_TEMP_SCL_BASE, RH_TEMP_SDA_BASE);
10000334:	01080034 	movhi	r4,8192
10000338:	21050004 	addi	r4,r4,5120
1000033c:	01480034 	movhi	r5,8192
10000340:	2944f804 	addi	r5,r5,5088
10000344:	00007880 	call	10000788 <i2cSelect>
#endif

	/********************************************
	 * Trigger measurements
	 ********************************************/
	i2cWrite(HDC1000_ADDR_WTR, HDC1000_TRIGGERG_ADDR, 0, 0);
10000348:	01002004 	movi	r4,128
1000034c:	000b883a 	mov	r5,zero
10000350:	000d883a 	mov	r6,zero
10000354:	000f883a 	mov	r7,zero
10000358:	0000a940 	call	10000a94 <i2cWrite>
	/********************************************
	 * Wait for complete
	 ********************************************/
	do
	{
		drdyn = IORD(RH_TEMP_DRDY_BASE, 0);
1000035c:	00880034 	movhi	r2,8192
10000360:	10851804 	addi	r2,r2,5216
10000364:	10800037 	ldwio	r2,0(r2)
10000368:	e0bffc05 	stb	r2,-16(fp)
	} while(drdyn);
1000036c:	e0bffc03 	ldbu	r2,-16(fp)
10000370:	103ffa1e 	bne	r2,zero,1000035c <__alt_data_end+0xf000035c>

	/********************************************
	 * Read Data
	 ********************************************/
	i2cReadNoAddress(HDC1000_ADDR_RDR, dataRead, 4);
10000374:	e0bffc44 	addi	r2,fp,-15
10000378:	01002044 	movi	r4,129
1000037c:	100b883a 	mov	r5,r2
10000380:	01800104 	movi	r6,4
10000384:	0000bf40 	call	10000bf4 <i2cReadNoAddress>

	*temperature = ((dataRead[0] << 8) | dataRead[1]);
10000388:	e0bffc43 	ldbu	r2,-15(fp)
1000038c:	10803fcc 	andi	r2,r2,255
10000390:	1004923a 	slli	r2,r2,8
10000394:	1007883a 	mov	r3,r2
10000398:	e0bffc83 	ldbu	r2,-14(fp)
1000039c:	10803fcc 	andi	r2,r2,255
100003a0:	1884b03a 	or	r2,r3,r2
100003a4:	1007883a 	mov	r3,r2
100003a8:	e0bffe17 	ldw	r2,-8(fp)
100003ac:	10c0000d 	sth	r3,0(r2)
	*humidity = ((dataRead[2] << 8) | dataRead[3]);
100003b0:	e0bffcc3 	ldbu	r2,-13(fp)
100003b4:	10803fcc 	andi	r2,r2,255
100003b8:	1004923a 	slli	r2,r2,8
100003bc:	1007883a 	mov	r3,r2
100003c0:	e0bffd03 	ldbu	r2,-12(fp)
100003c4:	10803fcc 	andi	r2,r2,255
100003c8:	1884b03a 	or	r2,r3,r2
100003cc:	1007883a 	mov	r3,r2
100003d0:	e0bfff17 	ldw	r2,-4(fp)
100003d4:	10c0000d 	sth	r3,0(r2)

	//*temperature = (((dataRead[0] << 8) | dataRead[1]) / 65536) * 165 - 40;
	//*humidity = (((dataRead[0] << 8) | dataRead[1]) / 65536);
}
100003d8:	e037883a 	mov	sp,fp
100003dc:	dfc00117 	ldw	ra,4(sp)
100003e0:	df000017 	ldw	fp,0(sp)
100003e4:	dec00204 	addi	sp,sp,8
100003e8:	f800283a 	ret

100003ec <initLIS2DH12>:
alt_u16 wdata[2]  = {0x2097,0x23b8};
alt_u16 rdata[6]  = {0xa800,0xa900,0xAA00,0xAB00,0xAC00,0xAD00};


int initLIS2DH12(void)
{
100003ec:	defffc04 	addi	sp,sp,-16
100003f0:	dfc00315 	stw	ra,12(sp)
100003f4:	df000215 	stw	fp,8(sp)
100003f8:	df000204 	addi	fp,sp,8
	int i;
	alt_u16  reg_read=0xA000;
100003fc:	00a80004 	movi	r2,-24576
10000400:	e0bffe0d 	sth	r2,-8(fp)
	alt_u16   reg_data[2];


	IOWR_ALTERA_AVALON_SPI_CONTROL(SPI_GSENSOR_BASE,0x00);          //Initialize the spi control reg
10000404:	0007883a 	mov	r3,zero
10000408:	00880034 	movhi	r2,8192
1000040c:	10848304 	addi	r2,r2,4620
10000410:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_GSENSOR_BASE, 0x2097);		//setup data rate and enable x,y,z axes
10000414:	00c825c4 	movi	r3,8343
10000418:	00880034 	movhi	r2,8192
1000041c:	10848104 	addi	r2,r2,4612
10000420:	10c00035 	stwio	r3,0(r2)
	usleep(100*2000);
10000424:	010000f4 	movhi	r4,3
10000428:	21035004 	addi	r4,r4,3392
1000042c:	0021d3c0 	call	10021d3c <usleep>
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_GSENSOR_BASE, 0x23b8);		//full scale, high resolution
10000430:	00c8ee04 	movi	r3,9144
10000434:	00880034 	movhi	r2,8192
10000438:	10848104 	addi	r2,r2,4612
1000043c:	10c00035 	stwio	r3,0(r2)
	usleep(100*2000);
10000440:	010000f4 	movhi	r4,3
10000444:	21035004 	addi	r4,r4,3392
10000448:	0021d3c0 	call	10021d3c <usleep>

	// Read the Device ID register
	IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_GSENSOR_BASE, (0x8F00)); // setup address to read from (0x0F), MSbit is R/Wn
1000044c:	00e3c014 	movui	r3,36608
10000450:	00880034 	movhi	r2,8192
10000454:	10848104 	addi	r2,r2,4612
10000458:	10c00035 	stwio	r3,0(r2)
	usleep(100*2000);
1000045c:	010000f4 	movhi	r4,3
10000460:	21035004 	addi	r4,r4,3392
10000464:	0021d3c0 	call	10021d3c <usleep>
	if((IORD_ALTERA_AVALON_SPI_RXDATA(SPI_GSENSOR_BASE))!=0x33)   // verify the device id matches (0x33)
10000468:	00880034 	movhi	r2,8192
1000046c:	10848004 	addi	r2,r2,4608
10000470:	10800037 	ldwio	r2,0(r2)
10000474:	10800ce0 	cmpeqi	r2,r2,51
10000478:	1000021e 	bne	r2,zero,10000484 <initLIS2DH12+0x98>
		return -1;
1000047c:	00bfffc4 	movi	r2,-1
10000480:	00000106 	br	10000488 <initLIS2DH12+0x9c>

	return 1; // success
10000484:	00800044 	movi	r2,1
}
10000488:	e037883a 	mov	sp,fp
1000048c:	dfc00117 	ldw	ra,4(sp)
10000490:	df000017 	ldw	fp,0(sp)
10000494:	dec00204 	addi	sp,sp,8
10000498:	f800283a 	ret

1000049c <lis2dh12Read>:

void lis2dh12Read(alt_u16 *data_x, alt_u16 *data_y, alt_u16 *data_z)
{
1000049c:	defff804 	addi	sp,sp,-32
100004a0:	dfc00715 	stw	ra,28(sp)
100004a4:	df000615 	stw	fp,24(sp)
100004a8:	df000604 	addi	fp,sp,24
100004ac:	e13ffd15 	stw	r4,-12(fp)
100004b0:	e17ffe15 	stw	r5,-8(fp)
100004b4:	e1bfff15 	stw	r6,-4(fp)
	int i;
	alt_u8   data[6];


	  for(i=0;i<6;i++){
100004b8:	e03ffa15 	stw	zero,-24(fp)
100004bc:	00001706 	br	1000051c <lis2dh12Read+0x80>
		  IOWR_ALTERA_AVALON_SPI_TXDATA(SPI_GSENSOR_BASE, rdata[i]);
100004c0:	008400b4 	movhi	r2,4098
100004c4:	1095cd04 	addi	r2,r2,22324
100004c8:	e0fffa17 	ldw	r3,-24(fp)
100004cc:	18c7883a 	add	r3,r3,r3
100004d0:	10c5883a 	add	r2,r2,r3
100004d4:	1080000b 	ldhu	r2,0(r2)
100004d8:	10ffffcc 	andi	r3,r2,65535
100004dc:	00880034 	movhi	r2,8192
100004e0:	10848104 	addi	r2,r2,4612
100004e4:	10c00035 	stwio	r3,0(r2)
		  usleep(100*200);
100004e8:	01138804 	movi	r4,20000
100004ec:	0021d3c0 	call	10021d3c <usleep>
		  data[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_GSENSOR_BASE);
100004f0:	00880034 	movhi	r2,8192
100004f4:	10848004 	addi	r2,r2,4608
100004f8:	10800037 	ldwio	r2,0(r2)
100004fc:	1009883a 	mov	r4,r2
10000500:	e0fffb04 	addi	r3,fp,-20
10000504:	e0bffa17 	ldw	r2,-24(fp)
10000508:	1885883a 	add	r2,r3,r2
1000050c:	11000005 	stb	r4,0(r2)
{
	int i;
	alt_u8   data[6];


	  for(i=0;i<6;i++){
10000510:	e0bffa17 	ldw	r2,-24(fp)
10000514:	10800044 	addi	r2,r2,1
10000518:	e0bffa15 	stw	r2,-24(fp)
1000051c:	e0bffa17 	ldw	r2,-24(fp)
10000520:	10800190 	cmplti	r2,r2,6
10000524:	103fe61e 	bne	r2,zero,100004c0 <__alt_data_end+0xf00004c0>
		  usleep(100*200);
		  data[i] = IORD_ALTERA_AVALON_SPI_RXDATA(SPI_GSENSOR_BASE);
	   }

	  //raw data values
	  *data_x = ((data[1]<<8)|data[0]);
10000528:	e0bffb43 	ldbu	r2,-19(fp)
1000052c:	10803fcc 	andi	r2,r2,255
10000530:	1004923a 	slli	r2,r2,8
10000534:	1007883a 	mov	r3,r2
10000538:	e0bffb03 	ldbu	r2,-20(fp)
1000053c:	10803fcc 	andi	r2,r2,255
10000540:	1884b03a 	or	r2,r3,r2
10000544:	1007883a 	mov	r3,r2
10000548:	e0bffd17 	ldw	r2,-12(fp)
1000054c:	10c0000d 	sth	r3,0(r2)
	  *data_y = ((data[3]<<8)|data[2]);
10000550:	e0bffbc3 	ldbu	r2,-17(fp)
10000554:	10803fcc 	andi	r2,r2,255
10000558:	1004923a 	slli	r2,r2,8
1000055c:	1007883a 	mov	r3,r2
10000560:	e0bffb83 	ldbu	r2,-18(fp)
10000564:	10803fcc 	andi	r2,r2,255
10000568:	1884b03a 	or	r2,r3,r2
1000056c:	1007883a 	mov	r3,r2
10000570:	e0bffe17 	ldw	r2,-8(fp)
10000574:	10c0000d 	sth	r3,0(r2)
	  *data_z = ((data[5]<<8)|data[4]);
10000578:	e0bffc43 	ldbu	r2,-15(fp)
1000057c:	10803fcc 	andi	r2,r2,255
10000580:	1004923a 	slli	r2,r2,8
10000584:	1007883a 	mov	r3,r2
10000588:	e0bffc03 	ldbu	r2,-16(fp)
1000058c:	10803fcc 	andi	r2,r2,255
10000590:	1884b03a 	or	r2,r3,r2
10000594:	1007883a 	mov	r3,r2
10000598:	e0bfff17 	ldw	r2,-4(fp)
1000059c:	10c0000d 	sth	r3,0(r2)

	  // actual g values, unused:
	  // x = (float)(data_x/16.0)*12.0;
	  // y = (float)(data_y/16.0)*12.0;
	  // z = (float)(data_z/16.0)*12.0;
}
100005a0:	e037883a 	mov	sp,fp
100005a4:	dfc00117 	ldw	ra,4(sp)
100005a8:	df000017 	ldw	fp,0(sp)
100005ac:	dec00204 	addi	sp,sp,8
100005b0:	f800283a 	ret

100005b4 <lis332arInit>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void lis332arInit (void)
{
100005b4:	defffe04 	addi	sp,sp,-8
100005b8:	dfc00115 	stw	ra,4(sp)
100005bc:	df000015 	stw	fp,0(sp)
100005c0:	d839883a 	mov	fp,sp
	/********************************************
	 * Start Sequencer
	 ********************************************/
	IOWR(ADC_SEQUENCER_CSR_BASE, 0, 0);
100005c4:	0007883a 	mov	r3,zero
100005c8:	00880034 	movhi	r2,8192
100005cc:	10851c04 	addi	r2,r2,5232
100005d0:	10c00035 	stwio	r3,0(r2)
	usleep(10);
100005d4:	01000284 	movi	r4,10
100005d8:	0021d3c0 	call	10021d3c <usleep>
	IOWR(ADC_SEQUENCER_CSR_BASE, 0, 1);
100005dc:	00c00044 	movi	r3,1
100005e0:	00880034 	movhi	r2,8192
100005e4:	10851c04 	addi	r2,r2,5232
100005e8:	10c00035 	stwio	r3,0(r2)

	/********************************************
	 * Enable accelerometer
	 ********************************************/
	IOWR_ALTERA_AVALON_PIO_DATA(G_SENSOR_PIO_BASE, 0x0);
100005ec:	0007883a 	mov	r3,zero
100005f0:	00880034 	movhi	r2,8192
100005f4:	1084f004 	addi	r2,r2,5056
100005f8:	10c00035 	stwio	r3,0(r2)
}
100005fc:	e037883a 	mov	sp,fp
10000600:	dfc00117 	ldw	ra,4(sp)
10000604:	df000017 	ldw	fp,0(sp)
10000608:	dec00204 	addi	sp,sp,8
1000060c:	f800283a 	ret

10000610 <lis332arRead>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void lis332arRead (alt_u16 *x, alt_u16 *y, alt_u16 *z)
{
10000610:	defffb04 	addi	sp,sp,-20
10000614:	dfc00415 	stw	ra,16(sp)
10000618:	df000315 	stw	fp,12(sp)
1000061c:	df000304 	addi	fp,sp,12
10000620:	e13ffd15 	stw	r4,-12(fp)
10000624:	e17ffe15 	stw	r5,-8(fp)
10000628:	e1bfff15 	stw	r6,-4(fp)
	/********************************************
	 * Read Sequence 0, 1, 2
	 ********************************************/
	*x = IORD(ADC_SAMPLE_STORE_CSR_BASE, 0);
1000062c:	00880034 	movhi	r2,8192
10000630:	10840004 	addi	r2,r2,4096
10000634:	10800037 	ldwio	r2,0(r2)
10000638:	1007883a 	mov	r3,r2
1000063c:	e0bffd17 	ldw	r2,-12(fp)
10000640:	10c0000d 	sth	r3,0(r2)
	*y = IORD(ADC_SAMPLE_STORE_CSR_BASE, 1);
10000644:	00880034 	movhi	r2,8192
10000648:	10840104 	addi	r2,r2,4100
1000064c:	10800037 	ldwio	r2,0(r2)
10000650:	1007883a 	mov	r3,r2
10000654:	e0bffe17 	ldw	r2,-8(fp)
10000658:	10c0000d 	sth	r3,0(r2)
	*z = IORD(ADC_SAMPLE_STORE_CSR_BASE, 2);
1000065c:	00880034 	movhi	r2,8192
10000660:	10840204 	addi	r2,r2,4104
10000664:	10800037 	ldwio	r2,0(r2)
10000668:	1007883a 	mov	r3,r2
1000066c:	e0bfff17 	ldw	r2,-4(fp)
10000670:	10c0000d 	sth	r3,0(r2)

	//alt_printf("%x %x %x\n", *x, *y, *z);
	usleep(3);
10000674:	010000c4 	movi	r4,3
10000678:	0021d3c0 	call	10021d3c <usleep>
}
1000067c:	e037883a 	mov	sp,fp
10000680:	dfc00117 	ldw	ra,4(sp)
10000684:	df000017 	ldw	fp,0(sp)
10000688:	dec00204 	addi	sp,sp,8
1000068c:	f800283a 	ret

10000690 <i2cAck>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cAck (void)
{
10000690:	defffe04 	addi	sp,sp,-8
10000694:	dfc00115 	stw	ra,4(sp)
10000698:	df000015 	stw	fp,0(sp)
1000069c:	d839883a 	mov	fp,sp

	IOWR(sdaBase, 0, 0);
100006a0:	d0a79e17 	ldw	r2,-24968(gp)
100006a4:	0007883a 	mov	r3,zero
100006a8:	10c00035 	stwio	r3,0(r2)
	usleep(1);
100006ac:	01000044 	movi	r4,1
100006b0:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 1);
100006b4:	d0a79d17 	ldw	r2,-24972(gp)
100006b8:	1007883a 	mov	r3,r2
100006bc:	00800044 	movi	r2,1
100006c0:	18800035 	stwio	r2,0(r3)
	usleep(1);
100006c4:	01000044 	movi	r4,1
100006c8:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 0);
100006cc:	d0a79d17 	ldw	r2,-24972(gp)
100006d0:	0007883a 	mov	r3,zero
100006d4:	10c00035 	stwio	r3,0(r2)
	usleep(1);
100006d8:	01000044 	movi	r4,1
100006dc:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sdaBase, 0, 1);
100006e0:	d0a79e17 	ldw	r2,-24968(gp)
100006e4:	1007883a 	mov	r3,r2
100006e8:	00800044 	movi	r2,1
100006ec:	18800035 	stwio	r2,0(r3)
	usleep(1);
100006f0:	01000044 	movi	r4,1
100006f4:	0021d3c0 	call	10021d3c <usleep>
}
100006f8:	e037883a 	mov	sp,fp
100006fc:	dfc00117 	ldw	ra,4(sp)
10000700:	df000017 	ldw	fp,0(sp)
10000704:	dec00204 	addi	sp,sp,8
10000708:	f800283a 	ret

1000070c <i2cNAck>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cNAck (void)
{
1000070c:	defffe04 	addi	sp,sp,-8
10000710:	dfc00115 	stw	ra,4(sp)
10000714:	df000015 	stw	fp,0(sp)
10000718:	d839883a 	mov	fp,sp
	IOWR(sdaBase, 0, 1);
1000071c:	d0a79e17 	ldw	r2,-24968(gp)
10000720:	1007883a 	mov	r3,r2
10000724:	00800044 	movi	r2,1
10000728:	18800035 	stwio	r2,0(r3)
	usleep(1);
1000072c:	01000044 	movi	r4,1
10000730:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 1);
10000734:	d0a79d17 	ldw	r2,-24972(gp)
10000738:	1007883a 	mov	r3,r2
1000073c:	00800044 	movi	r2,1
10000740:	18800035 	stwio	r2,0(r3)
	usleep(1);
10000744:	01000044 	movi	r4,1
10000748:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 0);
1000074c:	d0a79d17 	ldw	r2,-24972(gp)
10000750:	0007883a 	mov	r3,zero
10000754:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10000758:	01000044 	movi	r4,1
1000075c:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sdaBase, 0, 0);
10000760:	d0a79e17 	ldw	r2,-24968(gp)
10000764:	0007883a 	mov	r3,zero
10000768:	10c00035 	stwio	r3,0(r2)
	usleep(1);
1000076c:	01000044 	movi	r4,1
10000770:	0021d3c0 	call	10021d3c <usleep>
}
10000774:	e037883a 	mov	sp,fp
10000778:	dfc00117 	ldw	ra,4(sp)
1000077c:	df000017 	ldw	fp,0(sp)
10000780:	dec00204 	addi	sp,sp,8
10000784:	f800283a 	ret

10000788 <i2cSelect>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cSelect (alt_u32 scl, alt_u32 sda)
{
10000788:	defffd04 	addi	sp,sp,-12
1000078c:	df000215 	stw	fp,8(sp)
10000790:	df000204 	addi	fp,sp,8
10000794:	e13ffe15 	stw	r4,-8(fp)
10000798:	e17fff15 	stw	r5,-4(fp)
	sclBase = scl;
1000079c:	e0bffe17 	ldw	r2,-8(fp)
100007a0:	d0a79d15 	stw	r2,-24972(gp)
	sdaBase = sda;
100007a4:	e0bfff17 	ldw	r2,-4(fp)
100007a8:	d0a79e15 	stw	r2,-24968(gp)
}
100007ac:	e037883a 	mov	sp,fp
100007b0:	df000017 	ldw	fp,0(sp)
100007b4:	dec00104 	addi	sp,sp,4
100007b8:	f800283a 	ret

100007bc <i2cStart>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cStart (void)
{
100007bc:	defffe04 	addi	sp,sp,-8
100007c0:	dfc00115 	stw	ra,4(sp)
100007c4:	df000015 	stw	fp,0(sp)
100007c8:	d839883a 	mov	fp,sp
	IOWR(sdaBase, I2C_DIR_OFFSET_ADDR, I2C_OUTPUT);
100007cc:	d0a79e17 	ldw	r2,-24968(gp)
100007d0:	10800104 	addi	r2,r2,4
100007d4:	1007883a 	mov	r3,r2
100007d8:	00800044 	movi	r2,1
100007dc:	18800035 	stwio	r2,0(r3)

	IOWR(sdaBase, 0, 1);
100007e0:	d0a79e17 	ldw	r2,-24968(gp)
100007e4:	1007883a 	mov	r3,r2
100007e8:	00800044 	movi	r2,1
100007ec:	18800035 	stwio	r2,0(r3)
	usleep(1);
100007f0:	01000044 	movi	r4,1
100007f4:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 1);
100007f8:	d0a79d17 	ldw	r2,-24972(gp)
100007fc:	1007883a 	mov	r3,r2
10000800:	00800044 	movi	r2,1
10000804:	18800035 	stwio	r2,0(r3)
	usleep(1);
10000808:	01000044 	movi	r4,1
1000080c:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sdaBase, 0, 0);
10000810:	d0a79e17 	ldw	r2,-24968(gp)
10000814:	0007883a 	mov	r3,zero
10000818:	10c00035 	stwio	r3,0(r2)
	usleep(1);
1000081c:	01000044 	movi	r4,1
10000820:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 0);
10000824:	d0a79d17 	ldw	r2,-24972(gp)
10000828:	0007883a 	mov	r3,zero
1000082c:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10000830:	01000044 	movi	r4,1
10000834:	0021d3c0 	call	10021d3c <usleep>
}
10000838:	e037883a 	mov	sp,fp
1000083c:	dfc00117 	ldw	ra,4(sp)
10000840:	df000017 	ldw	fp,0(sp)
10000844:	dec00204 	addi	sp,sp,8
10000848:	f800283a 	ret

1000084c <i2cStop>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cStop (void)
{
1000084c:	defffe04 	addi	sp,sp,-8
10000850:	dfc00115 	stw	ra,4(sp)
10000854:	df000015 	stw	fp,0(sp)
10000858:	d839883a 	mov	fp,sp
	IOWR(sdaBase, 0, 0);
1000085c:	d0a79e17 	ldw	r2,-24968(gp)
10000860:	0007883a 	mov	r3,zero
10000864:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10000868:	01000044 	movi	r4,1
1000086c:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 0);
10000870:	d0a79d17 	ldw	r2,-24972(gp)
10000874:	0007883a 	mov	r3,zero
10000878:	10c00035 	stwio	r3,0(r2)
	usleep(1);
1000087c:	01000044 	movi	r4,1
10000880:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 1);
10000884:	d0a79d17 	ldw	r2,-24972(gp)
10000888:	1007883a 	mov	r3,r2
1000088c:	00800044 	movi	r2,1
10000890:	18800035 	stwio	r2,0(r3)
	usleep(1);
10000894:	01000044 	movi	r4,1
10000898:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sdaBase, 0, 1);
1000089c:	d0a79e17 	ldw	r2,-24968(gp)
100008a0:	1007883a 	mov	r3,r2
100008a4:	00800044 	movi	r2,1
100008a8:	18800035 	stwio	r2,0(r3)
	usleep(1);
100008ac:	01000044 	movi	r4,1
100008b0:	0021d3c0 	call	10021d3c <usleep>
}
100008b4:	e037883a 	mov	sp,fp
100008b8:	dfc00117 	ldw	ra,4(sp)
100008bc:	df000017 	ldw	fp,0(sp)
100008c0:	dec00204 	addi	sp,sp,8
100008c4:	f800283a 	ret

100008c8 <i2cWrite8bit>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
alt_u8 i2cWrite8bit	(unsigned char val)
{
100008c8:	defffc04 	addi	sp,sp,-16
100008cc:	dfc00315 	stw	ra,12(sp)
100008d0:	df000215 	stw	fp,8(sp)
100008d4:	df000204 	addi	fp,sp,8
100008d8:	2005883a 	mov	r2,r4
100008dc:	e0bfff05 	stb	r2,-4(fp)


	/********************************************
	 * Make sure SCL is low
	 ********************************************/
	IOWR(sclBase, 0, 0);
100008e0:	d0a79d17 	ldw	r2,-24972(gp)
100008e4:	0007883a 	mov	r3,zero
100008e8:	10c00035 	stwio	r3,0(r2)
	usleep(1);
100008ec:	01000044 	movi	r4,1
100008f0:	0021d3c0 	call	10021d3c <usleep>

	/********************************************
	 * Clock out Data, MSB -> LSB
	 ********************************************/
	for ( i = 7; i >= 0; i--)
100008f4:	008001c4 	movi	r2,7
100008f8:	e0bffe05 	stb	r2,-8(fp)
100008fc:	00001706 	br	1000095c <i2cWrite8bit+0x94>
	{
		IOWR(sdaBase, 0, ((val >> i) & 1));
10000900:	d0a79e17 	ldw	r2,-24968(gp)
10000904:	1009883a 	mov	r4,r2
10000908:	e0ffff03 	ldbu	r3,-4(fp)
1000090c:	e0bffe07 	ldb	r2,-8(fp)
10000910:	1885d83a 	sra	r2,r3,r2
10000914:	1080004c 	andi	r2,r2,1
10000918:	20800035 	stwio	r2,0(r4)
		usleep(1);
1000091c:	01000044 	movi	r4,1
10000920:	0021d3c0 	call	10021d3c <usleep>

		IOWR(sclBase, 0, 1);
10000924:	d0a79d17 	ldw	r2,-24972(gp)
10000928:	1007883a 	mov	r3,r2
1000092c:	00800044 	movi	r2,1
10000930:	18800035 	stwio	r2,0(r3)
		usleep(1);
10000934:	01000044 	movi	r4,1
10000938:	0021d3c0 	call	10021d3c <usleep>

		IOWR(sclBase, 0, 0);
1000093c:	d0a79d17 	ldw	r2,-24972(gp)
10000940:	0007883a 	mov	r3,zero
10000944:	10c00035 	stwio	r3,0(r2)
		usleep(1);
10000948:	01000044 	movi	r4,1
1000094c:	0021d3c0 	call	10021d3c <usleep>
	usleep(1);

	/********************************************
	 * Clock out Data, MSB -> LSB
	 ********************************************/
	for ( i = 7; i >= 0; i--)
10000950:	e0bffe03 	ldbu	r2,-8(fp)
10000954:	10bfffc4 	addi	r2,r2,-1
10000958:	e0bffe05 	stb	r2,-8(fp)
1000095c:	e0bffe07 	ldb	r2,-8(fp)
10000960:	103fe70e 	bge	r2,zero,10000900 <__alt_data_end+0xf0000900>
	}

	/********************************************
	 * Check Ack
	 ********************************************/
	IOWR(sdaBase, I2C_DIR_OFFSET_ADDR, I2C_INPUT);
10000964:	d0a79e17 	ldw	r2,-24968(gp)
10000968:	10800104 	addi	r2,r2,4
1000096c:	0007883a 	mov	r3,zero
10000970:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10000974:	01000044 	movi	r4,1
10000978:	0021d3c0 	call	10021d3c <usleep>

	bAck = IORD(sdaBase, 0);
1000097c:	d0a79e17 	ldw	r2,-24968(gp)
10000980:	10800037 	ldwio	r2,0(r2)
10000984:	e0bffe45 	stb	r2,-7(fp)

	IOWR(sclBase, 0, 1);
10000988:	d0a79d17 	ldw	r2,-24972(gp)
1000098c:	1007883a 	mov	r3,r2
10000990:	00800044 	movi	r2,1
10000994:	18800035 	stwio	r2,0(r3)
	usleep(1);
10000998:	01000044 	movi	r4,1
1000099c:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sclBase, 0, 0);
100009a0:	d0a79d17 	ldw	r2,-24972(gp)
100009a4:	0007883a 	mov	r3,zero
100009a8:	10c00035 	stwio	r3,0(r2)
	usleep(1);
100009ac:	01000044 	movi	r4,1
100009b0:	0021d3c0 	call	10021d3c <usleep>

	IOWR(sdaBase, I2C_DIR_OFFSET_ADDR, I2C_OUTPUT);
100009b4:	d0a79e17 	ldw	r2,-24968(gp)
100009b8:	10800104 	addi	r2,r2,4
100009bc:	1007883a 	mov	r3,r2
100009c0:	00800044 	movi	r2,1
100009c4:	18800035 	stwio	r2,0(r3)
	usleep(1);
100009c8:	01000044 	movi	r4,1
100009cc:	0021d3c0 	call	10021d3c <usleep>
	return (bAck & 1);
100009d0:	e0bffe43 	ldbu	r2,-7(fp)
100009d4:	1080004c 	andi	r2,r2,1
}
100009d8:	e037883a 	mov	sp,fp
100009dc:	dfc00117 	ldw	ra,4(sp)
100009e0:	df000017 	ldw	fp,0(sp)
100009e4:	dec00204 	addi	sp,sp,8
100009e8:	f800283a 	ret

100009ec <i2cRead8bit>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
alt_u8 i2cRead8bit (void)
{
100009ec:	defffd04 	addi	sp,sp,-12
100009f0:	dfc00215 	stw	ra,8(sp)
100009f4:	df000115 	stw	fp,4(sp)
100009f8:	df000104 	addi	fp,sp,4
	alt_8  i;
	alt_u8 dbit, data = 0;
100009fc:	e03fff45 	stb	zero,-3(fp)

	for ( i = 0; i < 8; i++)
10000a00:	e03fff05 	stb	zero,-4(fp)
10000a04:	00001a06 	br	10000a70 <i2cRead8bit+0x84>
	{
		IOWR(sclBase, 0, 1);
10000a08:	d0a79d17 	ldw	r2,-24972(gp)
10000a0c:	1007883a 	mov	r3,r2
10000a10:	00800044 	movi	r2,1
10000a14:	18800035 	stwio	r2,0(r3)
		usleep(1);
10000a18:	01000044 	movi	r4,1
10000a1c:	0021d3c0 	call	10021d3c <usleep>

		data = (data << 1);
10000a20:	e0bfff43 	ldbu	r2,-3(fp)
10000a24:	1085883a 	add	r2,r2,r2
10000a28:	e0bfff45 	stb	r2,-3(fp)
		dbit = IORD(sdaBase, 0);
10000a2c:	d0a79e17 	ldw	r2,-24968(gp)
10000a30:	10800037 	ldwio	r2,0(r2)
10000a34:	e0bfff85 	stb	r2,-2(fp)
		data |= (dbit & 1);
10000a38:	e0bfff83 	ldbu	r2,-2(fp)
10000a3c:	1080004c 	andi	r2,r2,1
10000a40:	1007883a 	mov	r3,r2
10000a44:	e0bfff43 	ldbu	r2,-3(fp)
10000a48:	1884b03a 	or	r2,r3,r2
10000a4c:	e0bfff45 	stb	r2,-3(fp)

		IOWR(sclBase, 0, 0);
10000a50:	d0a79d17 	ldw	r2,-24972(gp)
10000a54:	0007883a 	mov	r3,zero
10000a58:	10c00035 	stwio	r3,0(r2)
		usleep(1);
10000a5c:	01000044 	movi	r4,1
10000a60:	0021d3c0 	call	10021d3c <usleep>
alt_u8 i2cRead8bit (void)
{
	alt_8  i;
	alt_u8 dbit, data = 0;

	for ( i = 0; i < 8; i++)
10000a64:	e0bfff03 	ldbu	r2,-4(fp)
10000a68:	10800044 	addi	r2,r2,1
10000a6c:	e0bfff05 	stb	r2,-4(fp)
10000a70:	e0bfff07 	ldb	r2,-4(fp)
10000a74:	10800210 	cmplti	r2,r2,8
10000a78:	103fe31e 	bne	r2,zero,10000a08 <__alt_data_end+0xf0000a08>

		IOWR(sclBase, 0, 0);
		usleep(1);
	}

	return data;
10000a7c:	e0bfff43 	ldbu	r2,-3(fp)
}
10000a80:	e037883a 	mov	sp,fp
10000a84:	dfc00117 	ldw	ra,4(sp)
10000a88:	df000017 	ldw	fp,0(sp)
10000a8c:	dec00204 	addi	sp,sp,8
10000a90:	f800283a 	ret

10000a94 <i2cWrite>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
alt_u8 i2cWrite (alt_u8 inst, alt_u8 devAddr, alt_u8 *dPtr, alt_u8 len)
{
10000a94:	defff904 	addi	sp,sp,-28
10000a98:	dfc00615 	stw	ra,24(sp)
10000a9c:	df000515 	stw	fp,20(sp)
10000aa0:	df000504 	addi	fp,sp,20
10000aa4:	2807883a 	mov	r3,r5
10000aa8:	e1bffe15 	stw	r6,-8(fp)
10000aac:	3805883a 	mov	r2,r7
10000ab0:	e13ffc05 	stb	r4,-16(fp)
10000ab4:	e0fffd05 	stb	r3,-12(fp)
10000ab8:	e0bfff05 	stb	r2,-4(fp)
	alt_8  i;

	i2cStart	 ();
10000abc:	00007bc0 	call	100007bc <i2cStart>
	i2cWrite8bit (inst);
10000ac0:	e0bffc03 	ldbu	r2,-16(fp)
10000ac4:	1009883a 	mov	r4,r2
10000ac8:	00008c80 	call	100008c8 <i2cWrite8bit>
	i2cWrite8bit (devAddr);
10000acc:	e0bffd03 	ldbu	r2,-12(fp)
10000ad0:	1009883a 	mov	r4,r2
10000ad4:	00008c80 	call	100008c8 <i2cWrite8bit>

	for (i = 0; i < len; i++)
10000ad8:	e03ffb05 	stb	zero,-20(fp)
10000adc:	00000b06 	br	10000b0c <i2cWrite+0x78>
	{
		i2cWrite8bit (*dPtr);
10000ae0:	e0bffe17 	ldw	r2,-8(fp)
10000ae4:	10800003 	ldbu	r2,0(r2)
10000ae8:	10803fcc 	andi	r2,r2,255
10000aec:	1009883a 	mov	r4,r2
10000af0:	00008c80 	call	100008c8 <i2cWrite8bit>
		dPtr++;
10000af4:	e0bffe17 	ldw	r2,-8(fp)
10000af8:	10800044 	addi	r2,r2,1
10000afc:	e0bffe15 	stw	r2,-8(fp)

	i2cStart	 ();
	i2cWrite8bit (inst);
	i2cWrite8bit (devAddr);

	for (i = 0; i < len; i++)
10000b00:	e0bffb03 	ldbu	r2,-20(fp)
10000b04:	10800044 	addi	r2,r2,1
10000b08:	e0bffb05 	stb	r2,-20(fp)
10000b0c:	e0fffb07 	ldb	r3,-20(fp)
10000b10:	e0bfff03 	ldbu	r2,-4(fp)
10000b14:	18bff216 	blt	r3,r2,10000ae0 <__alt_data_end+0xf0000ae0>
	{
		i2cWrite8bit (*dPtr);
		dPtr++;
		//devAddr++;
	}
	i2cStop		 ();
10000b18:	000084c0 	call	1000084c <i2cStop>

	return 0;
10000b1c:	0005883a 	mov	r2,zero
}
10000b20:	e037883a 	mov	sp,fp
10000b24:	dfc00117 	ldw	ra,4(sp)
10000b28:	df000017 	ldw	fp,0(sp)
10000b2c:	dec00204 	addi	sp,sp,8
10000b30:	f800283a 	ret

10000b34 <i2cRead>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cRead (alt_u8 inst, alt_u8 devAddr, alt_u8 *dPtr, alt_u8 len)
{
10000b34:	defff904 	addi	sp,sp,-28
10000b38:	dfc00615 	stw	ra,24(sp)
10000b3c:	df000515 	stw	fp,20(sp)
10000b40:	df000504 	addi	fp,sp,20
10000b44:	2807883a 	mov	r3,r5
10000b48:	e1bffe15 	stw	r6,-8(fp)
10000b4c:	3805883a 	mov	r2,r7
10000b50:	e13ffc05 	stb	r4,-16(fp)
10000b54:	e0fffd05 	stb	r3,-12(fp)
10000b58:	e0bfff05 	stb	r2,-4(fp)
	alt_8  i;

	i2cStart	 ();
10000b5c:	00007bc0 	call	100007bc <i2cStart>
	i2cWrite8bit (inst);
10000b60:	e0bffc03 	ldbu	r2,-16(fp)
10000b64:	1009883a 	mov	r4,r2
10000b68:	00008c80 	call	100008c8 <i2cWrite8bit>
	i2cWrite8bit (devAddr);
10000b6c:	e0bffd03 	ldbu	r2,-12(fp)
10000b70:	1009883a 	mov	r4,r2
10000b74:	00008c80 	call	100008c8 <i2cWrite8bit>
	i2cStart	 ();
10000b78:	00007bc0 	call	100007bc <i2cStart>
	i2cWrite8bit (inst + 1);
10000b7c:	e0bffc03 	ldbu	r2,-16(fp)
10000b80:	10800044 	addi	r2,r2,1
10000b84:	10803fcc 	andi	r2,r2,255
10000b88:	1009883a 	mov	r4,r2
10000b8c:	00008c80 	call	100008c8 <i2cWrite8bit>

	for (i = 0; i < len; i++)
10000b90:	e03ffb05 	stb	zero,-20(fp)
10000b94:	00000e06 	br	10000bd0 <i2cRead+0x9c>
	{
		*dPtr = i2cRead8bit();
10000b98:	00009ec0 	call	100009ec <i2cRead8bit>
10000b9c:	1007883a 	mov	r3,r2
10000ba0:	e0bffe17 	ldw	r2,-8(fp)
10000ba4:	10c00005 	stb	r3,0(r2)

		if (i < (len - 1))
10000ba8:	e0fffb07 	ldb	r3,-20(fp)
10000bac:	e0bfff03 	ldbu	r2,-4(fp)
10000bb0:	10bfffc4 	addi	r2,r2,-1
10000bb4:	1880020e 	bge	r3,r2,10000bc0 <i2cRead+0x8c>
			i2cAck();
10000bb8:	00006900 	call	10000690 <i2cAck>
10000bbc:	00000106 	br	10000bc4 <i2cRead+0x90>
		else
			i2cNAck();
10000bc0:	000070c0 	call	1000070c <i2cNAck>
	i2cWrite8bit (inst);
	i2cWrite8bit (devAddr);
	i2cStart	 ();
	i2cWrite8bit (inst + 1);

	for (i = 0; i < len; i++)
10000bc4:	e0bffb03 	ldbu	r2,-20(fp)
10000bc8:	10800044 	addi	r2,r2,1
10000bcc:	e0bffb05 	stb	r2,-20(fp)
10000bd0:	e0fffb07 	ldb	r3,-20(fp)
10000bd4:	e0bfff03 	ldbu	r2,-4(fp)
10000bd8:	18bfef16 	blt	r3,r2,10000b98 <__alt_data_end+0xf0000b98>
			i2cAck();
		else
			i2cNAck();
	}

	i2cStop		 ();
10000bdc:	000084c0 	call	1000084c <i2cStop>
}
10000be0:	e037883a 	mov	sp,fp
10000be4:	dfc00117 	ldw	ra,4(sp)
10000be8:	df000017 	ldw	fp,0(sp)
10000bec:	dec00204 	addi	sp,sp,8
10000bf0:	f800283a 	ret

10000bf4 <i2cReadNoAddress>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
void i2cReadNoAddress (alt_u8 inst, alt_u8 *dPtr, alt_u8 len)
{
10000bf4:	defffa04 	addi	sp,sp,-24
10000bf8:	dfc00515 	stw	ra,20(sp)
10000bfc:	df000415 	stw	fp,16(sp)
10000c00:	df000404 	addi	fp,sp,16
10000c04:	2007883a 	mov	r3,r4
10000c08:	e17ffe15 	stw	r5,-8(fp)
10000c0c:	3005883a 	mov	r2,r6
10000c10:	e0fffd05 	stb	r3,-12(fp)
10000c14:	e0bfff05 	stb	r2,-4(fp)
	alt_8  i;

	i2cStart	 ();
10000c18:	00007bc0 	call	100007bc <i2cStart>
	i2cWrite8bit (inst);
10000c1c:	e0bffd03 	ldbu	r2,-12(fp)
10000c20:	1009883a 	mov	r4,r2
10000c24:	00008c80 	call	100008c8 <i2cWrite8bit>

	for (i = 0; i < len; i++)
10000c28:	e03ffc05 	stb	zero,-16(fp)
10000c2c:	00001106 	br	10000c74 <i2cReadNoAddress+0x80>
	{
		*dPtr = i2cRead8bit();
10000c30:	00009ec0 	call	100009ec <i2cRead8bit>
10000c34:	1007883a 	mov	r3,r2
10000c38:	e0bffe17 	ldw	r2,-8(fp)
10000c3c:	10c00005 	stb	r3,0(r2)

		if (i < (len - 1))
10000c40:	e0fffc07 	ldb	r3,-16(fp)
10000c44:	e0bfff03 	ldbu	r2,-4(fp)
10000c48:	10bfffc4 	addi	r2,r2,-1
10000c4c:	1880020e 	bge	r3,r2,10000c58 <i2cReadNoAddress+0x64>
			i2cAck();
10000c50:	00006900 	call	10000690 <i2cAck>
10000c54:	00000106 	br	10000c5c <i2cReadNoAddress+0x68>
		else
			i2cNAck();
10000c58:	000070c0 	call	1000070c <i2cNAck>

		dPtr++;
10000c5c:	e0bffe17 	ldw	r2,-8(fp)
10000c60:	10800044 	addi	r2,r2,1
10000c64:	e0bffe15 	stw	r2,-8(fp)
	alt_8  i;

	i2cStart	 ();
	i2cWrite8bit (inst);

	for (i = 0; i < len; i++)
10000c68:	e0bffc03 	ldbu	r2,-16(fp)
10000c6c:	10800044 	addi	r2,r2,1
10000c70:	e0bffc05 	stb	r2,-16(fp)
10000c74:	e0fffc07 	ldb	r3,-16(fp)
10000c78:	e0bfff03 	ldbu	r2,-4(fp)
10000c7c:	18bfec16 	blt	r3,r2,10000c30 <__alt_data_end+0xf0000c30>
			i2cNAck();

		dPtr++;
	}

	i2cStop		 ();
10000c80:	000084c0 	call	1000084c <i2cStop>
}
10000c84:	e037883a 	mov	sp,fp
10000c88:	dfc00117 	ldw	ra,4(sp)
10000c8c:	df000017 	ldw	fp,0(sp)
10000c90:	dec00204 	addi	sp,sp,8
10000c94:	f800283a 	ret

10000c98 <spiTransfer>:
void spiTransfer (SPI_DEVICE deviceId,
                  void       *outPtr,
                  int32_t    outBytes,
                  void       *inPtr,
                  int32_t    inBytes)
{
10000c98:	defff604 	addi	sp,sp,-40
10000c9c:	dfc00915 	stw	ra,36(sp)
10000ca0:	df000815 	stw	fp,32(sp)
10000ca4:	df000804 	addi	fp,sp,32
10000ca8:	e13ffc15 	stw	r4,-16(fp)
10000cac:	e17ffd15 	stw	r5,-12(fp)
10000cb0:	e1bffe15 	stw	r6,-8(fp)
10000cb4:	e1ffff15 	stw	r7,-4(fp)
	const DEVICE_INFO *devPtr;
	devPtr      = &deviceInfo [deviceId];
10000cb8:	e0bffc17 	ldw	r2,-16(fp)
10000cbc:	10c00524 	muli	r3,r2,20
10000cc0:	008400b4 	movhi	r2,4098
10000cc4:	1092bc04 	addi	r2,r2,19184
10000cc8:	1885883a 	add	r2,r3,r2
10000ccc:	e0bffb15 	stw	r2,-20(fp)


	alt_avalon_spi_command(devPtr->base, devPtr->sSelect,
10000cd0:	e0bffb17 	ldw	r2,-20(fp)
10000cd4:	11000017 	ldw	r4,0(r2)
10000cd8:	e0bffb17 	ldw	r2,-20(fp)
10000cdc:	11400117 	ldw	r5,4(r2)
10000ce0:	e1bffe17 	ldw	r6,-8(fp)
10000ce4:	e0c00217 	ldw	r3,8(fp)
10000ce8:	e0bffb17 	ldw	r2,-20(fp)
10000cec:	10800217 	ldw	r2,8(r2)
10000cf0:	d8c00015 	stw	r3,0(sp)
10000cf4:	e0ffff17 	ldw	r3,-4(fp)
10000cf8:	d8c00115 	stw	r3,4(sp)
10000cfc:	d8800215 	stw	r2,8(sp)
10000d00:	e1fffd17 	ldw	r7,-12(fp)
10000d04:	00229f40 	call	100229f4 <alt_avalon_spi_command>
			outBytes, outPtr, inBytes, inPtr, devPtr->flags);
}
10000d08:	e037883a 	mov	sp,fp
10000d0c:	dfc00117 	ldw	ra,4(sp)
10000d10:	df000017 	ldw	fp,0(sp)
10000d14:	dec00204 	addi	sp,sp,8
10000d18:	f800283a 	ret

10000d1c <spiBiRead>:
 ******************************************************************************/
void spiBiRead (SPI_DEVICE deviceId,
				void       *outPtr,
				void       *inPtr,
				int32_t    numBytes)
{
10000d1c:	defff304 	addi	sp,sp,-52
10000d20:	dfc00c15 	stw	ra,48(sp)
10000d24:	df000b15 	stw	fp,44(sp)
10000d28:	df000b04 	addi	fp,sp,44
10000d2c:	e13ffc15 	stw	r4,-16(fp)
10000d30:	e17ffd15 	stw	r5,-12(fp)
10000d34:	e1bffe15 	stw	r6,-8(fp)
10000d38:	e1ffff15 	stw	r7,-4(fp)
	const	DEVICE_INFO *devPtr = &deviceInfo [deviceId];
10000d3c:	e0bffc17 	ldw	r2,-16(fp)
10000d40:	10c00524 	muli	r3,r2,20
10000d44:	008400b4 	movhi	r2,4098
10000d48:	1092bc04 	addi	r2,r2,19184
10000d4c:	1885883a 	add	r2,r3,r2
10000d50:	e0bff815 	stw	r2,-32(fp)
	uint8_t				*bufInPtr,
						*bufOutPtr;



	IOWR_ALTERA_AVALON_PIO_DATA(devPtr->pioDirBase, 1);
10000d54:	e0bff817 	ldw	r2,-32(fp)
10000d58:	10800417 	ldw	r2,16(r2)
10000d5c:	1007883a 	mov	r3,r2
10000d60:	00800044 	movi	r2,1
10000d64:	18800035 	stwio	r2,0(r3)

	/********************************************
	* Number of write bytes
	********************************************/
	numWriteBytes = numBytes;// - devPtr->numReadBytes;
10000d68:	e0bfff17 	ldw	r2,-4(fp)
10000d6c:	e0bff915 	stw	r2,-28(fp)

	/********************************************
	* Start
	********************************************/
	alt_avalon_spi_command(devPtr->base, devPtr->sSelect,
10000d70:	e0bff817 	ldw	r2,-32(fp)
10000d74:	11000017 	ldw	r4,0(r2)
10000d78:	e0bff817 	ldw	r2,-32(fp)
10000d7c:	11400117 	ldw	r5,4(r2)
10000d80:	e0fff917 	ldw	r3,-28(fp)
10000d84:	d8000015 	stw	zero,0(sp)
10000d88:	d8000115 	stw	zero,4(sp)
10000d8c:	00800044 	movi	r2,1
10000d90:	d8800215 	stw	r2,8(sp)
10000d94:	180d883a 	mov	r6,r3
10000d98:	e1fffd17 	ldw	r7,-12(fp)
10000d9c:	00229f40 	call	100229f4 <alt_avalon_spi_command>
			numWriteBytes, outPtr, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);

	/********************************************
	* Manually changing SDO to input with PIO.
	********************************************/
	IOWR_ALTERA_AVALON_PIO_DATA(devPtr->pioDirBase, 0);
10000da0:	e0bff817 	ldw	r2,-32(fp)
10000da4:	10800417 	ldw	r2,16(r2)
10000da8:	0007883a 	mov	r3,zero
10000dac:	10c00035 	stwio	r3,0(r2)

	/********************************************
	* Finish read with
	********************************************/
	bufInPtr = inPtr;// + numWriteBytes;
10000db0:	e0bffe17 	ldw	r2,-8(fp)
10000db4:	e0bffa15 	stw	r2,-24(fp)
	bufOutPtr = outPtr;// + numWriteBytes;
10000db8:	e0bffd17 	ldw	r2,-12(fp)
10000dbc:	e0bffb15 	stw	r2,-20(fp)

	alt_avalon_spi_command(devPtr->base, devPtr->sSelect,
10000dc0:	e0bff817 	ldw	r2,-32(fp)
10000dc4:	11000017 	ldw	r4,0(r2)
10000dc8:	e0bff817 	ldw	r2,-32(fp)
10000dcc:	11400117 	ldw	r5,4(r2)
10000dd0:	e0bff817 	ldw	r2,-32(fp)
10000dd4:	10c00317 	ldw	r3,12(r2)
10000dd8:	e0bff817 	ldw	r2,-32(fp)
10000ddc:	10800217 	ldw	r2,8(r2)
10000de0:	d8c00015 	stw	r3,0(sp)
10000de4:	e0fffa17 	ldw	r3,-24(fp)
10000de8:	d8c00115 	stw	r3,4(sp)
10000dec:	d8800215 	stw	r2,8(sp)
10000df0:	000d883a 	mov	r6,zero
10000df4:	e1fffb17 	ldw	r7,-20(fp)
10000df8:	00229f40 	call	100229f4 <alt_avalon_spi_command>
			0, bufOutPtr, devPtr->numReadBytes, bufInPtr, devPtr->flags);

	/********************************************
	* De-assert SO
	********************************************/
	IOWR_ALTERA_AVALON_SPI_CONTROL(devPtr->base, 0);
10000dfc:	e0bff817 	ldw	r2,-32(fp)
10000e00:	10800017 	ldw	r2,0(r2)
10000e04:	10800304 	addi	r2,r2,12
10000e08:	0007883a 	mov	r3,zero
10000e0c:	10c00035 	stwio	r3,0(r2)

	/********************************************
	* Manually changing SDO back to output with PIO.
	********************************************/
	IOWR_ALTERA_AVALON_PIO_DATA(devPtr->pioDirBase, 1);
10000e10:	e0bff817 	ldw	r2,-32(fp)
10000e14:	10800417 	ldw	r2,16(r2)
10000e18:	1007883a 	mov	r3,r2
10000e1c:	00800044 	movi	r2,1
10000e20:	18800035 	stwio	r2,0(r3)
}
10000e24:	e037883a 	mov	sp,fp
10000e28:	dfc00117 	ldw	ra,4(sp)
10000e2c:	df000017 	ldw	fp,0(sp)
10000e30:	dec00204 	addi	sp,sp,8
10000e34:	f800283a 	ret

10000e38 <spiInit>:
 *   Initialize all SPI controllers which are connected to the
 *   NIOS processor.  Note that this function initializes the
 *   SPI controllers, not devices connected to the SPI controllers.
 ******************************************************************************/
void spiInit (void)
{
10000e38:	deffff04 	addi	sp,sp,-4
10000e3c:	df000015 	stw	fp,0(sp)
10000e40:	d839883a 	mov	fp,sp
}
10000e44:	e037883a 	mov	sp,fp
10000e48:	df000017 	ldw	fp,0(sp)
10000e4c:	dec00104 	addi	sp,sp,4
10000e50:	f800283a 	ret

10000e54 <configureSimpleLinkToDefaultState>:
static _i32 get_auth_realm (_u8 *auth_realm);
static _i32 get_device_urn (_u8 *device_urn);
static _i32 get_domain_name (_u8 *domain_name);

static _i32 configureSimpleLinkToDefaultState(_i8 *pConfig)
{
10000e54:	deffe104 	addi	sp,sp,-124
10000e58:	dfc01e15 	stw	ra,120(sp)
10000e5c:	df001d15 	stw	fp,116(sp)
10000e60:	df001d04 	addi	fp,sp,116
10000e64:	e13fff15 	stw	r4,-4(fp)
    SlVersionFull   ver = {0};
10000e68:	e03fee15 	stw	zero,-72(fp)
10000e6c:	e03fef15 	stw	zero,-68(fp)
10000e70:	e03ff015 	stw	zero,-64(fp)
10000e74:	e03ff115 	stw	zero,-60(fp)
10000e78:	e03ff215 	stw	zero,-56(fp)
10000e7c:	e03ff315 	stw	zero,-52(fp)
10000e80:	e03ff415 	stw	zero,-48(fp)
10000e84:	e03ff515 	stw	zero,-44(fp)
10000e88:	e03ff615 	stw	zero,-40(fp)
10000e8c:	e03ff715 	stw	zero,-36(fp)
10000e90:	e03ff815 	stw	zero,-32(fp)
    _WlanRxFilterOperationCommandBuff_t  RxFilterIdMask = {0};
10000e94:	e03ff915 	stw	zero,-28(fp)
10000e98:	e03ffa15 	stw	zero,-24(fp)
10000e9c:	e03ffb15 	stw	zero,-20(fp)
10000ea0:	e03ffc15 	stw	zero,-16(fp)
10000ea4:	e03ffd15 	stw	zero,-12(fp)

    _u8           val = 1;
10000ea8:	00800044 	movi	r2,1
10000eac:	e0bffe05 	stb	r2,-8(fp)
    _u8           configOpt = 0;
10000eb0:	e03ffe45 	stb	zero,-7(fp)
    _u8           configLen = 0;
10000eb4:	e03ffe85 	stb	zero,-6(fp)
    _u8           power = 0;
10000eb8:	e03ffec5 	stb	zero,-5(fp)

    _i32          retVal = -1;
10000ebc:	00bfffc4 	movi	r2,-1
10000ec0:	e0bfec15 	stw	r2,-80(fp)
    _i32          mode = -1;
10000ec4:	00bfffc4 	movi	r2,-1
10000ec8:	e0bfed15 	stw	r2,-76(fp)

    mode = sl_Start(0, pConfig, 0);
10000ecc:	0009883a 	mov	r4,zero
10000ed0:	e17fff17 	ldw	r5,-4(fp)
10000ed4:	000d883a 	mov	r6,zero
10000ed8:	00032ec0 	call	100032ec <sl_Start>
10000edc:	10bfffcc 	andi	r2,r2,65535
10000ee0:	10a0001c 	xori	r2,r2,32768
10000ee4:	10a00004 	addi	r2,r2,-32768
10000ee8:	e0bfed15 	stw	r2,-76(fp)
    ASSERT_ON_ERROR(mode);
10000eec:	e0bfed17 	ldw	r2,-76(fp)
10000ef0:	1000020e 	bge	r2,zero,10000efc <configureSimpleLinkToDefaultState+0xa8>
10000ef4:	e0bfed17 	ldw	r2,-76(fp)
10000ef8:	0000da06 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

        /* If the device is not in station-mode, try configuring it in station-mode */
    if (ROLE_STA != mode)
10000efc:	e0bfed17 	ldw	r2,-76(fp)
10000f00:	10002c26 	beq	r2,zero,10000fb4 <configureSimpleLinkToDefaultState+0x160>
    {
        if (ROLE_AP == mode)
10000f04:	e0bfed17 	ldw	r2,-76(fp)
10000f08:	10800098 	cmpnei	r2,r2,2
10000f0c:	1000051e 	bne	r2,zero,10000f24 <configureSimpleLinkToDefaultState+0xd0>
        {
            /* If the device is in AP mode, we need to wait for this event before doing anything */
            while(!IS_IP_ACQUIRED(g_Status));
10000f10:	0001883a 	nop
10000f14:	d0a79f03 	ldbu	r2,-24964(gp)
10000f18:	10803fcc 	andi	r2,r2,255
10000f1c:	1080008c 	andi	r2,r2,2
10000f20:	103ffc26 	beq	r2,zero,10000f14 <__alt_data_end+0xf0000f14>
        }

        /* Switch to STA role and restart */
        retVal = sl_WlanSetMode(ROLE_STA);
10000f24:	0009883a 	mov	r4,zero
10000f28:	000c2780 	call	1000c278 <sl_WlanSetMode>
10000f2c:	10bfffcc 	andi	r2,r2,65535
10000f30:	10a0001c 	xori	r2,r2,32768
10000f34:	10a00004 	addi	r2,r2,-32768
10000f38:	e0bfec15 	stw	r2,-80(fp)
        ASSERT_ON_ERROR(retVal);
10000f3c:	e0bfec17 	ldw	r2,-80(fp)
10000f40:	1000020e 	bge	r2,zero,10000f4c <configureSimpleLinkToDefaultState+0xf8>
10000f44:	e0bfec17 	ldw	r2,-80(fp)
10000f48:	0000c606 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

        retVal = sl_Stop(SL_STOP_TIMEOUT);
10000f4c:	01003fc4 	movi	r4,255
10000f50:	000380c0 	call	1000380c <sl_Stop>
10000f54:	10bfffcc 	andi	r2,r2,65535
10000f58:	10a0001c 	xori	r2,r2,32768
10000f5c:	10a00004 	addi	r2,r2,-32768
10000f60:	e0bfec15 	stw	r2,-80(fp)
        ASSERT_ON_ERROR(retVal);
10000f64:	e0bfec17 	ldw	r2,-80(fp)
10000f68:	1000020e 	bge	r2,zero,10000f74 <configureSimpleLinkToDefaultState+0x120>
10000f6c:	e0bfec17 	ldw	r2,-80(fp)
10000f70:	0000bc06 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

        retVal = sl_Start(0, pConfig, 0);
10000f74:	0009883a 	mov	r4,zero
10000f78:	e17fff17 	ldw	r5,-4(fp)
10000f7c:	000d883a 	mov	r6,zero
10000f80:	00032ec0 	call	100032ec <sl_Start>
10000f84:	10bfffcc 	andi	r2,r2,65535
10000f88:	10a0001c 	xori	r2,r2,32768
10000f8c:	10a00004 	addi	r2,r2,-32768
10000f90:	e0bfec15 	stw	r2,-80(fp)
        ASSERT_ON_ERROR(retVal);
10000f94:	e0bfec17 	ldw	r2,-80(fp)
10000f98:	1000020e 	bge	r2,zero,10000fa4 <configureSimpleLinkToDefaultState+0x150>
10000f9c:	e0bfec17 	ldw	r2,-80(fp)
10000fa0:	0000b006 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

        /* Check if the device is in station again */
        if (ROLE_STA != retVal)
10000fa4:	e0bfec17 	ldw	r2,-80(fp)
10000fa8:	10000226 	beq	r2,zero,10000fb4 <configureSimpleLinkToDefaultState+0x160>
        {
            /* We don't want to proceed if the device is not coming up in station-mode */
            ASSERT_ON_ERROR(DEVICE_NOT_IN_STATION_MODE);
10000fac:	00be0c04 	movi	r2,-2000
10000fb0:	0000ac06 	br	10001264 <configureSimpleLinkToDefaultState+0x410>
        }
    }

    /* Get the device's version-information */
    configOpt = SL_DEVICE_GENERAL_VERSION;
10000fb4:	00800304 	movi	r2,12
10000fb8:	e0bffe45 	stb	r2,-7(fp)
    configLen = sizeof(ver);
10000fbc:	00800b04 	movi	r2,44
10000fc0:	e0bffe85 	stb	r2,-6(fp)
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
10000fc4:	e17ffe44 	addi	r5,fp,-7
10000fc8:	e0fffe84 	addi	r3,fp,-6
10000fcc:	e0bfee04 	addi	r2,fp,-72
10000fd0:	01000044 	movi	r4,1
10000fd4:	180d883a 	mov	r6,r3
10000fd8:	100f883a 	mov	r7,r2
10000fdc:	0003aec0 	call	10003aec <sl_DevGet>
10000fe0:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
10000fe4:	e0bfec17 	ldw	r2,-80(fp)
10000fe8:	1000020e 	bge	r2,zero,10000ff4 <configureSimpleLinkToDefaultState+0x1a0>
10000fec:	e0bfec17 	ldw	r2,-80(fp)
10000ff0:	00009c06 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    printf("Host Driver Version: %s\n",SL_DRIVER_VERSION);
10000ff4:	010400b4 	movhi	r4,4098
10000ff8:	2112c604 	addi	r4,r4,19224
10000ffc:	014400b4 	movhi	r5,4098
10001000:	2952cd04 	addi	r5,r5,19252
10001004:	000ca0c0 	call	1000ca0c <printf>
    printf("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n",
10001008:	e37ff417 	ldw	r13,-48(fp)
1000100c:	e33ff517 	ldw	r12,-44(fp)
10001010:	e2fff617 	ldw	r11,-40(fp)
10001014:	e2bff717 	ldw	r10,-36(fp)
10001018:	e27fef17 	ldw	r9,-68(fp)
1000101c:	e23ff017 	ldw	r8,-64(fp)
10001020:	e1fff117 	ldw	r7,-60(fp)
10001024:	e1bff217 	ldw	r6,-56(fp)
                        ver.NwpVersion[0],ver.NwpVersion[1],ver.NwpVersion[2],ver.NwpVersion[3],
                        ver.ChipFwAndPhyVersion.FwVersion[0],ver.ChipFwAndPhyVersion.FwVersion[1],
                        ver.ChipFwAndPhyVersion.FwVersion[2],ver.ChipFwAndPhyVersion.FwVersion[3],
                        ver.ChipFwAndPhyVersion.PhyVersion[0],ver.ChipFwAndPhyVersion.PhyVersion[1],
10001028:	e0bff303 	ldbu	r2,-52(fp)
    configLen = sizeof(ver);
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
    ASSERT_ON_ERROR(retVal);

    printf("Host Driver Version: %s\n",SL_DRIVER_VERSION);
    printf("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n",
1000102c:	11403fcc 	andi	r5,r2,255
                        ver.NwpVersion[0],ver.NwpVersion[1],ver.NwpVersion[2],ver.NwpVersion[3],
                        ver.ChipFwAndPhyVersion.FwVersion[0],ver.ChipFwAndPhyVersion.FwVersion[1],
                        ver.ChipFwAndPhyVersion.FwVersion[2],ver.ChipFwAndPhyVersion.FwVersion[3],
                        ver.ChipFwAndPhyVersion.PhyVersion[0],ver.ChipFwAndPhyVersion.PhyVersion[1],
10001030:	e0bff343 	ldbu	r2,-51(fp)
    configLen = sizeof(ver);
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
    ASSERT_ON_ERROR(retVal);

    printf("Host Driver Version: %s\n",SL_DRIVER_VERSION);
    printf("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n",
10001034:	11003fcc 	andi	r4,r2,255
                        ver.NwpVersion[0],ver.NwpVersion[1],ver.NwpVersion[2],ver.NwpVersion[3],
                        ver.ChipFwAndPhyVersion.FwVersion[0],ver.ChipFwAndPhyVersion.FwVersion[1],
                        ver.ChipFwAndPhyVersion.FwVersion[2],ver.ChipFwAndPhyVersion.FwVersion[3],
                        ver.ChipFwAndPhyVersion.PhyVersion[0],ver.ChipFwAndPhyVersion.PhyVersion[1],
                        ver.ChipFwAndPhyVersion.PhyVersion[2],ver.ChipFwAndPhyVersion.PhyVersion[3]);
10001038:	e0bff383 	ldbu	r2,-50(fp)
    configLen = sizeof(ver);
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
    ASSERT_ON_ERROR(retVal);

    printf("Host Driver Version: %s\n",SL_DRIVER_VERSION);
    printf("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n",
1000103c:	10c03fcc 	andi	r3,r2,255
                        ver.NwpVersion[0],ver.NwpVersion[1],ver.NwpVersion[2],ver.NwpVersion[3],
                        ver.ChipFwAndPhyVersion.FwVersion[0],ver.ChipFwAndPhyVersion.FwVersion[1],
                        ver.ChipFwAndPhyVersion.FwVersion[2],ver.ChipFwAndPhyVersion.FwVersion[3],
                        ver.ChipFwAndPhyVersion.PhyVersion[0],ver.ChipFwAndPhyVersion.PhyVersion[1],
                        ver.ChipFwAndPhyVersion.PhyVersion[2],ver.ChipFwAndPhyVersion.PhyVersion[3]);
10001040:	e0bff3c3 	ldbu	r2,-49(fp)
    configLen = sizeof(ver);
    retVal = sl_DevGet(SL_DEVICE_GENERAL_CONFIGURATION, &configOpt, &configLen, (_u8 *)(&ver));
    ASSERT_ON_ERROR(retVal);

    printf("Host Driver Version: %s\n",SL_DRIVER_VERSION);
    printf("Build Version %d.%d.%d.%d.31.%d.%d.%d.%d.%d.%d.%d.%d\n",
10001044:	10803fcc 	andi	r2,r2,255
10001048:	da800015 	stw	r10,0(sp)
1000104c:	da400115 	stw	r9,4(sp)
10001050:	da000215 	stw	r8,8(sp)
10001054:	d9c00315 	stw	r7,12(sp)
10001058:	d9800415 	stw	r6,16(sp)
1000105c:	d9400515 	stw	r5,20(sp)
10001060:	d9000615 	stw	r4,24(sp)
10001064:	d8c00715 	stw	r3,28(sp)
10001068:	d8800815 	stw	r2,32(sp)
1000106c:	010400b4 	movhi	r4,4098
10001070:	2112cf04 	addi	r4,r4,19260
10001074:	680b883a 	mov	r5,r13
10001078:	600d883a 	mov	r6,r12
1000107c:	580f883a 	mov	r7,r11
10001080:	000ca0c0 	call	1000ca0c <printf>
                        ver.ChipFwAndPhyVersion.FwVersion[2],ver.ChipFwAndPhyVersion.FwVersion[3],
                        ver.ChipFwAndPhyVersion.PhyVersion[0],ver.ChipFwAndPhyVersion.PhyVersion[1],
                        ver.ChipFwAndPhyVersion.PhyVersion[2],ver.ChipFwAndPhyVersion.PhyVersion[3]);

    /* Set connection policy to Auto + SmartConfig (Device's default connection policy) */
    retVal = sl_WlanPolicySet(SL_POLICY_CONNECTION, SL_CONNECTION_POLICY(1, 0, 0, 0, 1), NULL, 0);
10001084:	01000404 	movi	r4,16
10001088:	01400444 	movi	r5,17
1000108c:	000d883a 	mov	r6,zero
10001090:	000f883a 	mov	r7,zero
10001094:	000b5000 	call	1000b500 <sl_WlanPolicySet>
10001098:	10bfffcc 	andi	r2,r2,65535
1000109c:	10a0001c 	xori	r2,r2,32768
100010a0:	10a00004 	addi	r2,r2,-32768
100010a4:	e0bfec15 	stw	r2,-80(fp)
    //ASSERT_ON_ERROR(retVal);

    /* Remove all profiles */
    retVal = sl_WlanProfileDel(0xFF);
100010a8:	01003fc4 	movi	r4,255
100010ac:	000bd140 	call	1000bd14 <sl_WlanProfileDel>
100010b0:	10bfffcc 	andi	r2,r2,65535
100010b4:	10a0001c 	xori	r2,r2,32768
100010b8:	10a00004 	addi	r2,r2,-32768
100010bc:	e0bfec15 	stw	r2,-80(fp)
    /*
     * Device in station-mode. Disconnect previous connection if any
     * The function returns 0 if 'Disconnected done', negative number if already disconnected
     * Wait for 'disconnection' event if 0 is returned, Ignore other return-codes
     */
    retVal = sl_WlanDisconnect();
100010c0:	000b4d40 	call	1000b4d4 <sl_WlanDisconnect>
100010c4:	10bfffcc 	andi	r2,r2,65535
100010c8:	10a0001c 	xori	r2,r2,32768
100010cc:	10a00004 	addi	r2,r2,-32768
100010d0:	e0bfec15 	stw	r2,-80(fp)
    if(0 == retVal)
100010d4:	e0bfec17 	ldw	r2,-80(fp)
100010d8:	1000051e 	bne	r2,zero,100010f0 <configureSimpleLinkToDefaultState+0x29c>
    {
        /* Wait */
        while(IS_CONNECTED(g_Status));
100010dc:	0001883a 	nop
100010e0:	d0a79f03 	ldbu	r2,-24964(gp)
100010e4:	10803fcc 	andi	r2,r2,255
100010e8:	1080004c 	andi	r2,r2,1
100010ec:	103ffc1e 	bne	r2,zero,100010e0 <__alt_data_end+0xf00010e0>
    }

    /* Enable DHCP client*/
    retVal = sl_NetCfgSet(SL_IPV4_STA_P2P_CL_DHCP_ENABLE,1,1,&val);
100010f0:	e0bffe04 	addi	r2,fp,-8
100010f4:	01000104 	movi	r4,4
100010f8:	01400044 	movi	r5,1
100010fc:	01800044 	movi	r6,1
10001100:	100f883a 	mov	r7,r2
10001104:	00091a80 	call	100091a8 <sl_NetCfgSet>
10001108:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
1000110c:	e0bfec17 	ldw	r2,-80(fp)
10001110:	1000020e 	bge	r2,zero,1000111c <configureSimpleLinkToDefaultState+0x2c8>
10001114:	e0bfec17 	ldw	r2,-80(fp)
10001118:	00005206 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    /* Disable scan */
    configOpt = SL_SCAN_POLICY(0);
1000111c:	e03ffe45 	stb	zero,-7(fp)
    retVal = sl_WlanPolicySet(SL_POLICY_SCAN , configOpt, NULL, 0);
10001120:	e0bffe43 	ldbu	r2,-7(fp)
10001124:	10803fcc 	andi	r2,r2,255
10001128:	01000804 	movi	r4,32
1000112c:	100b883a 	mov	r5,r2
10001130:	000d883a 	mov	r6,zero
10001134:	000f883a 	mov	r7,zero
10001138:	000b5000 	call	1000b500 <sl_WlanPolicySet>
1000113c:	10bfffcc 	andi	r2,r2,65535
10001140:	10a0001c 	xori	r2,r2,32768
10001144:	10a00004 	addi	r2,r2,-32768
10001148:	e0bfec15 	stw	r2,-80(fp)
//    ASSERT_ON_ERROR(retVal);

    /* Set Tx power level for station mode
       Number between 0-15, as dB offset from max power - 0 will set maximum power */
    power = 0;
1000114c:	e03ffec5 	stb	zero,-5(fp)
    retVal = sl_WlanSet(SL_WLAN_CFG_GENERAL_PARAM_ID, WLAN_GENERAL_PARAM_OPT_STA_TX_POWER, 1, (_u8 *)&power);
10001150:	e0bffec4 	addi	r2,fp,-5
10001154:	01000044 	movi	r4,1
10001158:	01400284 	movi	r5,10
1000115c:	01800044 	movi	r6,1
10001160:	100f883a 	mov	r7,r2
10001164:	000c2d40 	call	1000c2d4 <sl_WlanSet>
10001168:	10bfffcc 	andi	r2,r2,65535
1000116c:	10a0001c 	xori	r2,r2,32768
10001170:	10a00004 	addi	r2,r2,-32768
10001174:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
10001178:	e0bfec17 	ldw	r2,-80(fp)
1000117c:	1000020e 	bge	r2,zero,10001188 <configureSimpleLinkToDefaultState+0x334>
10001180:	e0bfec17 	ldw	r2,-80(fp)
10001184:	00003706 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    /* Set PM policy to normal */
    retVal = sl_WlanPolicySet(SL_POLICY_PM , SL_NORMAL_POLICY, NULL, 0);
10001188:	01000c04 	movi	r4,48
1000118c:	000b883a 	mov	r5,zero
10001190:	000d883a 	mov	r6,zero
10001194:	000f883a 	mov	r7,zero
10001198:	000b5000 	call	1000b500 <sl_WlanPolicySet>
1000119c:	10bfffcc 	andi	r2,r2,65535
100011a0:	10a0001c 	xori	r2,r2,32768
100011a4:	10a00004 	addi	r2,r2,-32768
100011a8:	e0bfec15 	stw	r2,-80(fp)
    //ASSERT_ON_ERROR(retVal);

    /* Unregister mDNS services */
    retVal = sl_NetAppMDNSUnRegisterService(0, 0);
100011ac:	0009883a 	mov	r4,zero
100011b0:	000b883a 	mov	r5,zero
100011b4:	0007f840 	call	10007f84 <sl_NetAppMDNSUnRegisterService>
100011b8:	10bfffcc 	andi	r2,r2,65535
100011bc:	10a0001c 	xori	r2,r2,32768
100011c0:	10a00004 	addi	r2,r2,-32768
100011c4:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
100011c8:	e0bfec17 	ldw	r2,-80(fp)
100011cc:	1000020e 	bge	r2,zero,100011d8 <configureSimpleLinkToDefaultState+0x384>
100011d0:	e0bfec17 	ldw	r2,-80(fp)
100011d4:	00002306 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    /* Remove  all 64 filters (8*8) */
    memset(RxFilterIdMask.FilterIdMask, 0xFF, 8);
100011d8:	e0bff904 	addi	r2,fp,-28
100011dc:	1009883a 	mov	r4,r2
100011e0:	01403fc4 	movi	r5,255
100011e4:	01800204 	movi	r6,8
100011e8:	000c8bc0 	call	1000c8bc <memset>
    retVal = sl_WlanRxFilterSet(SL_REMOVE_RX_FILTER, (_u8 *)&RxFilterIdMask,
100011ec:	e0bff904 	addi	r2,fp,-28
100011f0:	01000044 	movi	r4,1
100011f4:	100b883a 	mov	r5,r2
100011f8:	01800504 	movi	r6,20
100011fc:	000bf100 	call	1000bf10 <sl_WlanRxFilterSet>
10001200:	10bfffcc 	andi	r2,r2,65535
10001204:	10a0001c 	xori	r2,r2,32768
10001208:	10a00004 	addi	r2,r2,-32768
1000120c:	e0bfec15 	stw	r2,-80(fp)
                       sizeof(_WlanRxFilterOperationCommandBuff_t));
    ASSERT_ON_ERROR(retVal);
10001210:	e0bfec17 	ldw	r2,-80(fp)
10001214:	1000020e 	bge	r2,zero,10001220 <configureSimpleLinkToDefaultState+0x3cc>
10001218:	e0bfec17 	ldw	r2,-80(fp)
1000121c:	00001106 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    retVal = sl_Stop(SL_STOP_TIMEOUT);
10001220:	01003fc4 	movi	r4,255
10001224:	000380c0 	call	1000380c <sl_Stop>
10001228:	10bfffcc 	andi	r2,r2,65535
1000122c:	10a0001c 	xori	r2,r2,32768
10001230:	10a00004 	addi	r2,r2,-32768
10001234:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
10001238:	e0bfec17 	ldw	r2,-80(fp)
1000123c:	1000020e 	bge	r2,zero,10001248 <configureSimpleLinkToDefaultState+0x3f4>
10001240:	e0bfec17 	ldw	r2,-80(fp)
10001244:	00000706 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    retVal = initializeAppVariables();
10001248:	00012780 	call	10001278 <initializeAppVariables>
1000124c:	e0bfec15 	stw	r2,-80(fp)
    ASSERT_ON_ERROR(retVal);
10001250:	e0bfec17 	ldw	r2,-80(fp)
10001254:	1000020e 	bge	r2,zero,10001260 <configureSimpleLinkToDefaultState+0x40c>
10001258:	e0bfec17 	ldw	r2,-80(fp)
1000125c:	00000106 	br	10001264 <configureSimpleLinkToDefaultState+0x410>

    return retVal; /* Success */
10001260:	e0bfec17 	ldw	r2,-80(fp)
}
10001264:	e037883a 	mov	sp,fp
10001268:	dfc00117 	ldw	ra,4(sp)
1000126c:	df000017 	ldw	fp,0(sp)
10001270:	dec00204 	addi	sp,sp,8
10001274:	f800283a 	ret

10001278 <initializeAppVariables>:
    \param[in]  None

    \return     0 on success, negative error-code on error
*/
static _i32 initializeAppVariables()
{
10001278:	deffff04 	addi	sp,sp,-4
1000127c:	df000015 	stw	fp,0(sp)
10001280:	d839883a 	mov	fp,sp
    g_Status = 0;
10001284:	d0279f05 	stb	zero,-24964(gp)
    g_PingPacketsRecv = 0;
10001288:	d027a015 	stw	zero,-24960(gp)
    sta_IP = 0;
1000128c:	d027a115 	stw	zero,-24956(gp)

    return SUCCESS;
10001290:	0005883a 	mov	r2,zero
}
10001294:	e037883a 	mov	sp,fp
10001298:	df000017 	ldw	fp,0(sp)
1000129c:	dec00104 	addi	sp,sp,4
100012a0:	f800283a 	ret

100012a4 <GetUserNum>:

static _i16 GetUserNum()
{
100012a4:	defff704 	addi	sp,sp,-36
100012a8:	dfc00815 	stw	ra,32(sp)
100012ac:	df000715 	stw	fp,28(sp)
100012b0:	df000704 	addi	fp,sp,28
    _i32   flag = 0;
100012b4:	e03ff915 	stw	zero,-28(fp)
    _i8    input[20] = {'\0'};
100012b8:	e03ffa8d 	sth	zero,-22(fp)
100012bc:	e03ffb0d 	sth	zero,-20(fp)
100012c0:	e03ffb8d 	sth	zero,-18(fp)
100012c4:	e03ffc0d 	sth	zero,-16(fp)
100012c8:	e03ffc8d 	sth	zero,-14(fp)
100012cc:	e03ffd0d 	sth	zero,-12(fp)
100012d0:	e03ffd8d 	sth	zero,-10(fp)
100012d4:	e03ffe0d 	sth	zero,-8(fp)
100012d8:	e03ffe8d 	sth	zero,-6(fp)
100012dc:	e03fff0d 	sth	zero,-4(fp)
    _i16   value = -1;
100012e0:	00bfffc4 	movi	r2,-1
100012e4:	e0bffa0d 	sth	r2,-24(fp)

    while (!flag)
100012e8:	00001606 	br	10001344 <GetUserNum+0xa0>
    {
        if(scanf("%s",input,sizeof(input)) != 0)
100012ec:	e0bffa84 	addi	r2,fp,-22
100012f0:	010400b4 	movhi	r4,4098
100012f4:	2112dd04 	addi	r4,r4,19316
100012f8:	100b883a 	mov	r5,r2
100012fc:	01800504 	movi	r6,20
10001300:	000cb140 	call	1000cb14 <scanf>
10001304:	10000f26 	beq	r2,zero,10001344 <GetUserNum+0xa0>
        {
            value = atoi((const char *)input);
10001308:	e0bffa84 	addi	r2,fp,-22
1000130c:	1009883a 	mov	r4,r2
10001310:	000c6f00 	call	1000c6f0 <atoi>
10001314:	e0bffa0d 	sth	r2,-24(fp)
            if (value > 0 && value < 5 )
10001318:	e0bffa0f 	ldh	r2,-24(fp)
1000131c:	0080060e 	bge	zero,r2,10001338 <GetUserNum+0x94>
10001320:	e0bffa0f 	ldh	r2,-24(fp)
10001324:	10800148 	cmpgei	r2,r2,5
10001328:	1000031e 	bne	r2,zero,10001338 <GetUserNum+0x94>
            {
                flag = 1;
1000132c:	00800044 	movi	r2,1
10001330:	e0bff915 	stw	r2,-28(fp)
10001334:	00000306 	br	10001344 <GetUserNum+0xa0>
            }
            else
            {
                printf("Invalid entry. Please try again:\n");
10001338:	010400b4 	movhi	r4,4098
1000133c:	2112de04 	addi	r4,r4,19320
10001340:	000cb000 	call	1000cb00 <puts>
{
    _i32   flag = 0;
    _i8    input[20] = {'\0'};
    _i16   value = -1;

    while (!flag)
10001344:	e0bff917 	ldw	r2,-28(fp)
10001348:	103fe826 	beq	r2,zero,100012ec <__alt_data_end+0xf00012ec>
                printf("Invalid entry. Please try again:\n");
            }
        }
    }

    return value;
1000134c:	e0bffa0b 	ldhu	r2,-24(fp)
}
10001350:	e037883a 	mov	sp,fp
10001354:	dfc00117 	ldw	ra,4(sp)
10001358:	df000017 	ldw	fp,0(sp)
1000135c:	dec00204 	addi	sp,sp,8
10001360:	f800283a 	ret

10001364 <GetUserInput>:

static UserInfo GetUserInput()
{
10001364:	deffe904 	addi	sp,sp,-92
10001368:	dfc01615 	stw	ra,88(sp)
1000136c:	df001515 	stw	fp,84(sp)
10001370:	df001504 	addi	fp,sp,84
10001374:	e13fff15 	stw	r4,-4(fp)
    UserInfo UserFunction;
    _i32   eflag = -1;
10001378:	00bfffc4 	movi	r2,-1
1000137c:	e0bfeb15 	stw	r2,-84(fp)
    _i32   wepflag = -1;
10001380:	00bfffc4 	movi	r2,-1
10001384:	e0bfec15 	stw	r2,-80(fp)
    _i32   length = -1;
10001388:	00bfffc4 	movi	r2,-1
1000138c:	e0bfed15 	stw	r2,-76(fp)

    printf("Please input the SSID name for AP mode: \n");
10001390:	010400b4 	movhi	r4,4098
10001394:	2112e704 	addi	r4,r4,19356
10001398:	000cb000 	call	1000cb00 <puts>
    //scanf("%[^\n]s",UserFunction.SSID,MAX_SSID_LEN);
    //fgets(UserFunction.SSID,MAX_SSID_LEN,stdin);
    strcpy(UserFunction.SSID, "DallasLogicWIFI"); // fixed SSID name can be entered here.
1000139c:	e0bfee04 	addi	r2,fp,-72
100013a0:	00db1b34 	movhi	r3,27756
100013a4:	18d85104 	addi	r3,r3,24900
100013a8:	10c00015 	stw	r3,0(r2)
100013ac:	00dbd334 	movhi	r3,28492
100013b0:	18dcd844 	addi	r3,r3,29537
100013b4:	10c00115 	stw	r3,4(r2)
100013b8:	00d5d8f4 	movhi	r3,22371
100013bc:	18da59c4 	addi	r3,r3,26983
100013c0:	10c00215 	stw	r3,8(r2)
100013c4:	00c01274 	movhi	r3,73
100013c8:	18d19244 	addi	r3,r3,17993
100013cc:	10c00315 	stw	r3,12(r2)

    printf("Encryption Types for AP mode:\n");
100013d0:	010400b4 	movhi	r4,4098
100013d4:	2112f204 	addi	r4,r4,19400
100013d8:	000cb000 	call	1000cb00 <puts>
    printf("1:  Open\n");
100013dc:	010400b4 	movhi	r4,4098
100013e0:	2112fa04 	addi	r4,r4,19432
100013e4:	000cb000 	call	1000cb00 <puts>
    printf("2:  WEP\n");
100013e8:	010400b4 	movhi	r4,4098
100013ec:	2112fd04 	addi	r4,r4,19444
100013f0:	000cb000 	call	1000cb00 <puts>
    printf("3:  WPA\n");
100013f4:	010400b4 	movhi	r4,4098
100013f8:	2112ff04 	addi	r4,r4,19452
100013fc:	000cb000 	call	1000cb00 <puts>
    printf("Please enter the corresponding number for the encryption type: \n");
10001400:	010400b4 	movhi	r4,4098
10001404:	21130104 	addi	r4,r4,19460
10001408:	000cb000 	call	1000cb00 <puts>
    //UserFunction.encryption = GetUserNum();
    UserFunction.encryption = 1;
1000140c:	00800044 	movi	r2,1
10001410:	e0bff615 	stw	r2,-40(fp)

    if (UserFunction.encryption != 1)
10001414:	e0bff617 	ldw	r2,-40(fp)
10001418:	10800060 	cmpeqi	r2,r2,1
1000141c:	10000a1e 	bne	r2,zero,10001448 <GetUserInput+0xe4>
    {
        printf ("Please enter the password for AP mode: \n");
10001420:	010400b4 	movhi	r4,4098
10001424:	21131104 	addi	r4,r4,19524
10001428:	000cb000 	call	1000cb00 <puts>
        scanf("%s",UserFunction.password,MAX_PASSKEY_LEN);
1000142c:	e0bfee04 	addi	r2,fp,-72
10001430:	10800904 	addi	r2,r2,36
10001434:	010400b4 	movhi	r4,4098
10001438:	2112dd04 	addi	r4,r4,19316
1000143c:	100b883a 	mov	r5,r2
10001440:	01800804 	movi	r6,32
10001444:	000cb140 	call	1000cb14 <scanf>
    }

    return UserFunction;
10001448:	e0bfff17 	ldw	r2,-4(fp)
1000144c:	1009883a 	mov	r4,r2
10001450:	e0ffee04 	addi	r3,fp,-72
10001454:	00801104 	movi	r2,68
10001458:	180b883a 	mov	r5,r3
1000145c:	100d883a 	mov	r6,r2
10001460:	000c7840 	call	1000c784 <memcpy>
}
10001464:	e0bfff17 	ldw	r2,-4(fp)
10001468:	e037883a 	mov	sp,fp
1000146c:	dfc00117 	ldw	ra,4(sp)
10001470:	df000017 	ldw	fp,0(sp)
10001474:	dec00204 	addi	sp,sp,8
10001478:	f800283a 	ret

1000147c <ConfigureAPmode>:

static _i32 ConfigureAPmode(UserInfo UserParams)
{
1000147c:	defff804 	addi	sp,sp,-32
10001480:	dfc00315 	stw	ra,12(sp)
10001484:	df000215 	stw	fp,8(sp)
10001488:	df000204 	addi	fp,sp,8
1000148c:	e1000215 	stw	r4,8(fp)
10001490:	e1400315 	stw	r5,12(fp)
10001494:	e1800415 	stw	r6,16(fp)
10001498:	e1c00515 	stw	r7,20(fp)
    _i32 retVal = -1;
1000149c:	00bfffc4 	movi	r2,-1
100014a0:	e0bffe15 	stw	r2,-8(fp)
    _u8 val = SL_SEC_TYPE_OPEN;
100014a4:	e03fff05 	stb	zero,-4(fp)

    /* Configure the SSID of the CC3100 */
    retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID, WLAN_AP_OPT_SSID,
               strlen((const char *)UserParams.SSID),
100014a8:	e1000204 	addi	r4,fp,8
100014ac:	000cc400 	call	1000cc40 <strlen>
{
    _i32 retVal = -1;
    _u8 val = SL_SEC_TYPE_OPEN;

    /* Configure the SSID of the CC3100 */
    retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID, WLAN_AP_OPT_SSID,
100014b0:	10bfffcc 	andi	r2,r2,65535
100014b4:	0009883a 	mov	r4,zero
100014b8:	000b883a 	mov	r5,zero
100014bc:	100d883a 	mov	r6,r2
100014c0:	e1c00204 	addi	r7,fp,8
100014c4:	000c2d40 	call	1000c2d4 <sl_WlanSet>
100014c8:	10bfffcc 	andi	r2,r2,65535
100014cc:	10a0001c 	xori	r2,r2,32768
100014d0:	10a00004 	addi	r2,r2,-32768
100014d4:	e0bffe15 	stw	r2,-8(fp)
               strlen((const char *)UserParams.SSID),
               UserParams.SSID);
    ASSERT_ON_ERROR(retVal);
100014d8:	e0bffe17 	ldw	r2,-8(fp)
100014dc:	1000020e 	bge	r2,zero,100014e8 <ConfigureAPmode+0x6c>
100014e0:	e0bffe17 	ldw	r2,-8(fp)
100014e4:	00005e06 	br	10001660 <ConfigureAPmode+0x1e4>

    /* Configure the Security parameter in the AP mode */
    switch(UserParams.encryption)
100014e8:	e0800a17 	ldw	r2,40(fp)
100014ec:	10c000a0 	cmpeqi	r3,r2,2
100014f0:	1800141e 	bne	r3,zero,10001544 <ConfigureAPmode+0xc8>
100014f4:	10c000e0 	cmpeqi	r3,r2,3
100014f8:	1800351e 	bne	r3,zero,100015d0 <ConfigureAPmode+0x154>
100014fc:	10800060 	cmpeqi	r2,r2,1
10001500:	10005626 	beq	r2,zero,1000165c <ConfigureAPmode+0x1e0>
    {
        case 1:
        {
            val = SL_SEC_TYPE_OPEN;
10001504:	e03fff05 	stb	zero,-4(fp)
            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
10001508:	e0bfff04 	addi	r2,fp,-4
1000150c:	0009883a 	mov	r4,zero
10001510:	01400184 	movi	r5,6
10001514:	01800044 	movi	r6,1
10001518:	100f883a 	mov	r7,r2
1000151c:	000c2d40 	call	1000c2d4 <sl_WlanSet>
10001520:	10bfffcc 	andi	r2,r2,65535
10001524:	10a0001c 	xori	r2,r2,32768
10001528:	10a00004 	addi	r2,r2,-32768
1000152c:	e0bffe15 	stw	r2,-8(fp)
                       WLAN_AP_OPT_SECURITY_TYPE,
                       1, &val);
            ASSERT_ON_ERROR(retVal);
10001530:	e0bffe17 	ldw	r2,-8(fp)
10001534:	1000020e 	bge	r2,zero,10001540 <ConfigureAPmode+0xc4>
10001538:	e0bffe17 	ldw	r2,-8(fp)
1000153c:	00004806 	br	10001660 <ConfigureAPmode+0x1e4>
        }
        break;
10001540:	00004606 	br	1000165c <ConfigureAPmode+0x1e0>

        case 2:
        {
            val = SL_SEC_TYPE_WEP;
10001544:	00800044 	movi	r2,1
10001548:	e0bfff05 	stb	r2,-4(fp)
            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
1000154c:	e0bfff04 	addi	r2,fp,-4
10001550:	0009883a 	mov	r4,zero
10001554:	01400184 	movi	r5,6
10001558:	01800044 	movi	r6,1
1000155c:	100f883a 	mov	r7,r2
10001560:	000c2d40 	call	1000c2d4 <sl_WlanSet>
10001564:	10bfffcc 	andi	r2,r2,65535
10001568:	10a0001c 	xori	r2,r2,32768
1000156c:	10a00004 	addi	r2,r2,-32768
10001570:	e0bffe15 	stw	r2,-8(fp)
                       WLAN_AP_OPT_SECURITY_TYPE,
                       1, &val);
            ASSERT_ON_ERROR(retVal);
10001574:	e0bffe17 	ldw	r2,-8(fp)
10001578:	1000020e 	bge	r2,zero,10001584 <ConfigureAPmode+0x108>
1000157c:	e0bffe17 	ldw	r2,-8(fp)
10001580:	00003706 	br	10001660 <ConfigureAPmode+0x1e4>

            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
                       WLAN_AP_OPT_PASSWORD,
                       strlen((const char *)UserParams.password),
10001584:	e0800b04 	addi	r2,fp,44
10001588:	1009883a 	mov	r4,r2
1000158c:	000cc400 	call	1000cc40 <strlen>
            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
                       WLAN_AP_OPT_SECURITY_TYPE,
                       1, &val);
            ASSERT_ON_ERROR(retVal);

            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
10001590:	10ffffcc 	andi	r3,r2,65535
10001594:	e0800b04 	addi	r2,fp,44
10001598:	0009883a 	mov	r4,zero
1000159c:	014001c4 	movi	r5,7
100015a0:	180d883a 	mov	r6,r3
100015a4:	100f883a 	mov	r7,r2
100015a8:	000c2d40 	call	1000c2d4 <sl_WlanSet>
100015ac:	10bfffcc 	andi	r2,r2,65535
100015b0:	10a0001c 	xori	r2,r2,32768
100015b4:	10a00004 	addi	r2,r2,-32768
100015b8:	e0bffe15 	stw	r2,-8(fp)
                       WLAN_AP_OPT_PASSWORD,
                       strlen((const char *)UserParams.password),
                       UserParams.password);
            ASSERT_ON_ERROR(retVal);
100015bc:	e0bffe17 	ldw	r2,-8(fp)
100015c0:	1000020e 	bge	r2,zero,100015cc <ConfigureAPmode+0x150>
100015c4:	e0bffe17 	ldw	r2,-8(fp)
100015c8:	00002506 	br	10001660 <ConfigureAPmode+0x1e4>
        }
        break;
100015cc:	00002306 	br	1000165c <ConfigureAPmode+0x1e0>

        case 3:
        {
            val = SL_SEC_TYPE_WPA;
100015d0:	00800084 	movi	r2,2
100015d4:	e0bfff05 	stb	r2,-4(fp)
            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
100015d8:	e0bfff04 	addi	r2,fp,-4
100015dc:	0009883a 	mov	r4,zero
100015e0:	01400184 	movi	r5,6
100015e4:	01800044 	movi	r6,1
100015e8:	100f883a 	mov	r7,r2
100015ec:	000c2d40 	call	1000c2d4 <sl_WlanSet>
100015f0:	10bfffcc 	andi	r2,r2,65535
100015f4:	10a0001c 	xori	r2,r2,32768
100015f8:	10a00004 	addi	r2,r2,-32768
100015fc:	e0bffe15 	stw	r2,-8(fp)
                       WLAN_AP_OPT_SECURITY_TYPE,
                       1, &val);
            ASSERT_ON_ERROR(retVal);
10001600:	e0bffe17 	ldw	r2,-8(fp)
10001604:	1000020e 	bge	r2,zero,10001610 <ConfigureAPmode+0x194>
10001608:	e0bffe17 	ldw	r2,-8(fp)
1000160c:	00001406 	br	10001660 <ConfigureAPmode+0x1e4>

            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
                       WLAN_AP_OPT_PASSWORD,
                       strlen((const char *)UserParams.password),
10001610:	e0800b04 	addi	r2,fp,44
10001614:	1009883a 	mov	r4,r2
10001618:	000cc400 	call	1000cc40 <strlen>
            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
                       WLAN_AP_OPT_SECURITY_TYPE,
                       1, &val);
            ASSERT_ON_ERROR(retVal);

            retVal = sl_WlanSet(SL_WLAN_CFG_AP_ID,
1000161c:	10ffffcc 	andi	r3,r2,65535
10001620:	e0800b04 	addi	r2,fp,44
10001624:	0009883a 	mov	r4,zero
10001628:	014001c4 	movi	r5,7
1000162c:	180d883a 	mov	r6,r3
10001630:	100f883a 	mov	r7,r2
10001634:	000c2d40 	call	1000c2d4 <sl_WlanSet>
10001638:	10bfffcc 	andi	r2,r2,65535
1000163c:	10a0001c 	xori	r2,r2,32768
10001640:	10a00004 	addi	r2,r2,-32768
10001644:	e0bffe15 	stw	r2,-8(fp)
                       WLAN_AP_OPT_PASSWORD,
                       strlen((const char *)UserParams.password),
                       UserParams.password);
            ASSERT_ON_ERROR(retVal);
10001648:	e0bffe17 	ldw	r2,-8(fp)
1000164c:	1000020e 	bge	r2,zero,10001658 <ConfigureAPmode+0x1dc>
10001650:	e0bffe17 	ldw	r2,-8(fp)
10001654:	00000206 	br	10001660 <ConfigureAPmode+0x1e4>
        }
        break;
10001658:	0001883a 	nop
    }

    return SUCCESS;
1000165c:	0005883a 	mov	r2,zero
}
10001660:	e037883a 	mov	sp,fp
10001664:	dfc00117 	ldw	ra,4(sp)
10001668:	df000017 	ldw	fp,0(sp)
1000166c:	dec00604 	addi	sp,sp,24
10001670:	f800283a 	ret

10001674 <SimpleLinkGeneralEventHandler>:

void SimpleLinkGeneralEventHandler(SlDeviceEvent_t *pDevEvent)
{
10001674:	defffd04 	addi	sp,sp,-12
10001678:	dfc00215 	stw	ra,8(sp)
1000167c:	df000115 	stw	fp,4(sp)
10001680:	df000104 	addi	fp,sp,4
10001684:	e13fff15 	stw	r4,-4(fp)
    /*
     * Most of the general errors are not FATAL are are to be handled
     * appropriately by the application
     */
    printf(" [GENERAL EVENT] \r\n");
10001688:	010400b4 	movhi	r4,4098
1000168c:	21131b04 	addi	r4,r4,19564
10001690:	000cb000 	call	1000cb00 <puts>
}
10001694:	e037883a 	mov	sp,fp
10001698:	dfc00117 	ldw	ra,4(sp)
1000169c:	df000017 	ldw	fp,0(sp)
100016a0:	dec00204 	addi	sp,sp,8
100016a4:	f800283a 	ret

100016a8 <SimpleLinkWlanEventHandler>:

void SimpleLinkWlanEventHandler(SlWlanEvent_t *pWlanEvent)
{
100016a8:	defffc04 	addi	sp,sp,-16
100016ac:	dfc00315 	stw	ra,12(sp)
100016b0:	df000215 	stw	fp,8(sp)
100016b4:	df000204 	addi	fp,sp,8
100016b8:	e13fff15 	stw	r4,-4(fp)
	if(pWlanEvent == NULL)
100016bc:	e0bfff17 	ldw	r2,-4(fp)
100016c0:	1000031e 	bne	r2,zero,100016d0 <SimpleLinkWlanEventHandler+0x28>
	        printf(" [WLAN EVENT] NULL Pointer Error \n\r");
100016c4:	010400b4 	movhi	r4,4098
100016c8:	21132004 	addi	r4,r4,19584
100016cc:	000ca0c0 	call	1000ca0c <printf>

	     switch(pWlanEvent->Event)
100016d0:	e0bfff17 	ldw	r2,-4(fp)
100016d4:	10800017 	ldw	r2,0(r2)
100016d8:	10c000a0 	cmpeqi	r3,r2,2
100016dc:	18000e1e 	bne	r3,zero,10001718 <SimpleLinkWlanEventHandler+0x70>
100016e0:	10c000e8 	cmpgeui	r3,r2,3
100016e4:	1800031e 	bne	r3,zero,100016f4 <SimpleLinkWlanEventHandler+0x4c>
100016e8:	10800060 	cmpeqi	r2,r2,1
100016ec:	1000061e 	bne	r2,zero,10001708 <SimpleLinkWlanEventHandler+0x60>
100016f0:	00002f06 	br	100017b0 <SimpleLinkWlanEventHandler+0x108>
100016f4:	10c00160 	cmpeqi	r3,r2,5
100016f8:	1800201e 	bne	r3,zero,1000177c <SimpleLinkWlanEventHandler+0xd4>
100016fc:	108001a0 	cmpeqi	r2,r2,6
10001700:	1000221e 	bne	r2,zero,1000178c <SimpleLinkWlanEventHandler+0xe4>
10001704:	00002a06 	br	100017b0 <SimpleLinkWlanEventHandler+0x108>
	    {
	        case SL_WLAN_CONNECT_EVENT:
	        {
	            SET_STATUS_BIT(g_Status, STATUS_BIT_CONNECTION);
10001708:	d0a79f03 	ldbu	r2,-24964(gp)
1000170c:	10800054 	ori	r2,r2,1
10001710:	d0a79f05 	stb	r2,-24964(gp)
	             * slWlanConnectAsyncResponse_t *pEventData = NULL;
	             * pEventData = &pWlanEvent->EventData.STAandP2PModeWlanConnected;
	             *
	             */
	        }
	        break;
10001714:	00002a06 	br	100017c0 <SimpleLinkWlanEventHandler+0x118>

	        case SL_WLAN_DISCONNECT_EVENT:
	        {
	            slWlanConnectAsyncResponse_t*  pEventData = NULL;
10001718:	e03ffe15 	stw	zero,-8(fp)

	            CLR_STATUS_BIT(g_Status, STATUS_BIT_CONNECTION);
1000171c:	d0e79f03 	ldbu	r3,-24964(gp)
10001720:	00bfff84 	movi	r2,-2
10001724:	1884703a 	and	r2,r3,r2
10001728:	d0a79f05 	stb	r2,-24964(gp)
	            CLR_STATUS_BIT(g_Status, STATUS_BIT_IP_ACQUIRED);
1000172c:	d0e79f03 	ldbu	r3,-24964(gp)
10001730:	00bfff44 	movi	r2,-3
10001734:	1884703a 	and	r2,r3,r2
10001738:	d0a79f05 	stb	r2,-24964(gp)

	            pEventData = &pWlanEvent->EventData.STAandP2PModeDisconnected;
1000173c:	e0bfff17 	ldw	r2,-4(fp)
10001740:	10800104 	addi	r2,r2,4
10001744:	e0bffe15 	stw	r2,-8(fp)

	            /* If the user has initiated 'Disconnect' request, 'reason_code' is SL_USER_INITIATED_DISCONNECTION */
	            if(SL_USER_INITIATED_DISCONNECTION == pEventData->reason_code)
10001748:	e0bffe17 	ldw	r2,-8(fp)
1000174c:	10801243 	ldbu	r2,73(r2)
10001750:	10803fcc 	andi	r2,r2,255
10001754:	10803218 	cmpnei	r2,r2,200
10001758:	1000041e 	bne	r2,zero,1000176c <SimpleLinkWlanEventHandler+0xc4>
	            {
	                printf(" Device disconnected from the AP on application's request \r\n");
1000175c:	010400b4 	movhi	r4,4098
10001760:	21132904 	addi	r4,r4,19620
10001764:	000cb000 	call	1000cb00 <puts>
	            else
	            {
	                printf(" Device disconnected from the AP on an ERROR..!! \r\n");
	            }
	        }
	        break;
10001768:	00001506 	br	100017c0 <SimpleLinkWlanEventHandler+0x118>
	            {
	                printf(" Device disconnected from the AP on application's request \r\n");
	            }
	            else
	            {
	                printf(" Device disconnected from the AP on an ERROR..!! \r\n");
1000176c:	010400b4 	movhi	r4,4098
10001770:	21133804 	addi	r4,r4,19680
10001774:	000cb000 	call	1000cb00 <puts>
	            }
	        }
	        break;
10001778:	00001106 	br	100017c0 <SimpleLinkWlanEventHandler+0x118>

	        case SL_WLAN_STA_CONNECTED_EVENT:
	        {
	            SET_STATUS_BIT(g_Status, STATUS_BIT_STA_CONNECTED);
1000177c:	d0a79f03 	ldbu	r2,-24964(gp)
10001780:	10800414 	ori	r2,r2,16
10001784:	d0a79f05 	stb	r2,-24964(gp)
	        }
	        break;
10001788:	00000d06 	br	100017c0 <SimpleLinkWlanEventHandler+0x118>

	        case SL_WLAN_STA_DISCONNECTED_EVENT:
	        {
	            CLR_STATUS_BIT(g_Status, STATUS_BIT_STA_CONNECTED);
1000178c:	d0e79f03 	ldbu	r3,-24964(gp)
10001790:	00bffbc4 	movi	r2,-17
10001794:	1884703a 	and	r2,r3,r2
10001798:	d0a79f05 	stb	r2,-24964(gp)
	            CLR_STATUS_BIT(g_Status, STATUS_BIT_IP_LEASED);
1000179c:	d0e79f03 	ldbu	r3,-24964(gp)
100017a0:	00bffdc4 	movi	r2,-9
100017a4:	1884703a 	and	r2,r3,r2
100017a8:	d0a79f05 	stb	r2,-24964(gp)
	        }
	        break;
100017ac:	00000406 	br	100017c0 <SimpleLinkWlanEventHandler+0x118>

	        default:
	        {
	            printf(" [WLAN EVENT] Unexpected event \r\n");
100017b0:	010400b4 	movhi	r4,4098
100017b4:	21134504 	addi	r4,r4,19732
100017b8:	000cb000 	call	1000cb00 <puts>
	        }
	        break;
100017bc:	0001883a 	nop
	     }
}
100017c0:	e037883a 	mov	sp,fp
100017c4:	dfc00117 	ldw	ra,4(sp)
100017c8:	df000017 	ldw	fp,0(sp)
100017cc:	dec00204 	addi	sp,sp,8
100017d0:	f800283a 	ret

100017d4 <SimpleLinkNetAppEventHandler>:

void SimpleLinkNetAppEventHandler(SlNetAppEvent_t *pNetAppEvent)
{
100017d4:	defffc04 	addi	sp,sp,-16
100017d8:	dfc00315 	stw	ra,12(sp)
100017dc:	df000215 	stw	fp,8(sp)
100017e0:	df000204 	addi	fp,sp,8
100017e4:	e13fff15 	stw	r4,-4(fp)
    if(pNetAppEvent == NULL)
100017e8:	e0bfff17 	ldw	r2,-4(fp)
100017ec:	1000031e 	bne	r2,zero,100017fc <SimpleLinkNetAppEventHandler+0x28>
        printf(" [NETAPP EVENT] NULL Pointer Error \n\r");
100017f0:	010400b4 	movhi	r4,4098
100017f4:	21134e04 	addi	r4,r4,19768
100017f8:	000ca0c0 	call	1000ca0c <printf>

    switch(pNetAppEvent->Event)
100017fc:	e0bfff17 	ldw	r2,-4(fp)
10001800:	10800017 	ldw	r2,0(r2)
10001804:	10c00060 	cmpeqi	r3,r2,1
10001808:	1800031e 	bne	r3,zero,10001818 <SimpleLinkNetAppEventHandler+0x44>
1000180c:	108000e0 	cmpeqi	r2,r2,3
10001810:	10000c1e 	bne	r2,zero,10001844 <SimpleLinkNetAppEventHandler+0x70>
10001814:	00001506 	br	1000186c <SimpleLinkNetAppEventHandler+0x98>
    {
        case SL_NETAPP_IPV4_IPACQUIRED_EVENT:
        {
        	printf(" [NETAPP EVENT] IP Acquire \n\r");
10001818:	010400b4 	movhi	r4,4098
1000181c:	21135804 	addi	r4,r4,19808
10001820:	000ca0c0 	call	1000ca0c <printf>
            SlIpV4AcquiredAsync_t *pEventData = NULL;
10001824:	e03ffe15 	stw	zero,-8(fp)

            SET_STATUS_BIT(g_Status, STATUS_BIT_IP_ACQUIRED);
10001828:	d0a79f03 	ldbu	r2,-24964(gp)
1000182c:	10800094 	ori	r2,r2,2
10001830:	d0a79f05 	stb	r2,-24964(gp)

            pEventData = &pNetAppEvent->EventData.ipAcquiredV4;
10001834:	e0bfff17 	ldw	r2,-4(fp)
10001838:	10800104 	addi	r2,r2,4
1000183c:	e0bffe15 	stw	r2,-8(fp)
        }
        break;
10001840:	00000e06 	br	1000187c <SimpleLinkNetAppEventHandler+0xa8>

        case SL_NETAPP_IP_LEASED_EVENT:
        {
        	printf(" [NETAPP EVENT] Lease Aquire \n\r");
10001844:	010400b4 	movhi	r4,4098
10001848:	21136004 	addi	r4,r4,19840
1000184c:	000ca0c0 	call	1000ca0c <printf>
            sta_IP = pNetAppEvent->EventData.ipLeased.ip_address;
10001850:	e0bfff17 	ldw	r2,-4(fp)
10001854:	10800117 	ldw	r2,4(r2)
10001858:	d0a7a115 	stw	r2,-24956(gp)
            SET_STATUS_BIT(g_Status, STATUS_BIT_IP_LEASED);
1000185c:	d0a79f03 	ldbu	r2,-24964(gp)
10001860:	10800214 	ori	r2,r2,8
10001864:	d0a79f05 	stb	r2,-24964(gp)
        }
        break;
10001868:	00000406 	br	1000187c <SimpleLinkNetAppEventHandler+0xa8>

        default:
        {
            printf(" [NETAPP EVENT] Unexpected event \r\n");
1000186c:	010400b4 	movhi	r4,4098
10001870:	21136804 	addi	r4,r4,19872
10001874:	000cb000 	call	1000cb00 <puts>
        }
        break;
10001878:	0001883a 	nop
    }
}
1000187c:	e037883a 	mov	sp,fp
10001880:	dfc00117 	ldw	ra,4(sp)
10001884:	df000017 	ldw	fp,0(sp)
10001888:	dec00204 	addi	sp,sp,8
1000188c:	f800283a 	ret

10001890 <SimpleLinkHttpServerCallback>:


void SimpleLinkHttpServerCallback(SlHttpServerEvent_t *pEvent,
                                  SlHttpServerResponse_t *pResponse)
{
10001890:	deffe804 	addi	sp,sp,-96
10001894:	dfc01715 	stw	ra,92(sp)
10001898:	df001615 	stw	fp,88(sp)
1000189c:	dc001515 	stw	r16,84(sp)
100018a0:	df001604 	addi	fp,sp,88
100018a4:	e13ffd15 	stw	r4,-12(fp)
100018a8:	e17ffe15 	stw	r5,-8(fp)
	static alt_u16 x_axis = 0x1111,
			y_axis = 0x2222,
			z_axis = 0x3333;
	static alt_u16 temperature = 0x4444,
			humidity = 0x5555;
	int tempCorrection = 0;
100018ac:	e03feb15 	stw	zero,-84(fp)
	char reply_buffer [50];
	int  replySz;

	printf(" [HTTP EVENT] event \r\n");
100018b0:	010400b4 	movhi	r4,4098
100018b4:	21137104 	addi	r4,r4,19908
100018b8:	000cb000 	call	1000cb00 <puts>

	if(pEvent == NULL || pResponse == NULL)
100018bc:	e0bffd17 	ldw	r2,-12(fp)
100018c0:	10000226 	beq	r2,zero,100018cc <SimpleLinkHttpServerCallback+0x3c>
100018c4:	e0bffe17 	ldw	r2,-8(fp)
100018c8:	1000031e 	bne	r2,zero,100018d8 <SimpleLinkHttpServerCallback+0x48>
		printf(" [HTTP EVENT] NULL Pointer Error \n\r");
100018cc:	010400b4 	movhi	r4,4098
100018d0:	21137704 	addi	r4,r4,19932
100018d4:	000ca0c0 	call	1000ca0c <printf>

	    switch (pEvent->Event)
100018d8:	e0bffd17 	ldw	r2,-12(fp)
100018dc:	10800017 	ldw	r2,0(r2)
100018e0:	10c00060 	cmpeqi	r3,r2,1
100018e4:	1800031e 	bne	r3,zero,100018f4 <SimpleLinkHttpServerCallback+0x64>
100018e8:	108000a0 	cmpeqi	r2,r2,2
100018ec:	1002251e 	bne	r2,zero,10002184 <SimpleLinkHttpServerCallback+0x8f4>
	            }
	        }
	        break;

	        default:
	        break;
100018f0:	0002fa06 	br	100024dc <SimpleLinkHttpServerCallback+0xc4c>

	    switch (pEvent->Event)
	    {
	        case SL_NETAPP_HTTPGETTOKENVALUE_EVENT:
	        {
	            _u8 status = 0;
100018f4:	e03fec05 	stb	zero,-80(fp)
	            _u8 *ptr = 0;
100018f8:	e03fea15 	stw	zero,-88(fp)

	            ptr = pResponse->ResponseData.token_value.data;
100018fc:	e0bffe17 	ldw	r2,-8(fp)
10001900:	10800217 	ldw	r2,8(r2)
10001904:	e0bfea15 	stw	r2,-88(fp)
	            pResponse->ResponseData.token_value.len = 0;
10001908:	e0bffe17 	ldw	r2,-8(fp)
1000190c:	10000105 	stb	zero,4(r2)
	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_token,
10001910:	e0bffd17 	ldw	r2,-12(fp)
10001914:	14000217 	ldw	r16,8(r2)
10001918:	010400b4 	movhi	r4,4098
1000191c:	2115d304 	addi	r4,r4,22348
10001920:	000cc400 	call	1000cc40 <strlen>
10001924:	8009883a 	mov	r4,r16
10001928:	014400b4 	movhi	r5,4098
1000192c:	2955d304 	addi	r5,r5,22348
10001930:	100d883a 	mov	r6,r2
10001934:	000c7080 	call	1000c708 <memcmp>
10001938:	10017b1e 	bne	r2,zero,10001f28 <SimpleLinkHttpServerCallback+0x698>
	                                         pal_Strlen(GET_token)) == 0)
	            {
	            	printf("LED event \n\r");
1000193c:	010400b4 	movhi	r4,4098
10001940:	21138004 	addi	r4,r4,19968
10001944:	000ca0c0 	call	1000ca0c <printf>

	            	status = IORD (BLUE_LEDS_BASE, 0);
10001948:	00880034 	movhi	r2,8192
1000194c:	1084e804 	addi	r2,r2,5024
10001950:	10800037 	ldwio	r2,0(r2)
10001954:	e0bfec05 	stb	r2,-80(fp)

	                pal_Memcpy(ptr, "LED0_", pal_Strlen("LED0_"));
10001958:	e13fea17 	ldw	r4,-88(fp)
1000195c:	014400b4 	movhi	r5,4098
10001960:	29538404 	addi	r5,r5,19984
10001964:	01800144 	movi	r6,5
10001968:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
1000196c:	e0bfea17 	ldw	r2,-88(fp)
10001970:	10800144 	addi	r2,r2,5
10001974:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001978:	e0bffe17 	ldw	r2,-8(fp)
1000197c:	10800103 	ldbu	r2,4(r2)
10001980:	10800144 	addi	r2,r2,5
10001984:	1007883a 	mov	r3,r2
10001988:	e0bffe17 	ldw	r2,-8(fp)
1000198c:	10c00105 	stb	r3,4(r2)
	                if(status & 0x01)
10001990:	e0bfec03 	ldbu	r2,-80(fp)
10001994:	1080004c 	andi	r2,r2,1
10001998:	10000f26 	beq	r2,zero,100019d8 <SimpleLinkHttpServerCallback+0x148>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
1000199c:	e13fea17 	ldw	r4,-88(fp)
100019a0:	014400b4 	movhi	r5,4098
100019a4:	29538604 	addi	r5,r5,19992
100019a8:	018000c4 	movi	r6,3
100019ac:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
100019b0:	e0bfea17 	ldw	r2,-88(fp)
100019b4:	108000c4 	addi	r2,r2,3
100019b8:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
100019bc:	e0bffe17 	ldw	r2,-8(fp)
100019c0:	10800103 	ldbu	r2,4(r2)
100019c4:	108000c4 	addi	r2,r2,3
100019c8:	1007883a 	mov	r3,r2
100019cc:	e0bffe17 	ldw	r2,-8(fp)
100019d0:	10c00105 	stb	r3,4(r2)
100019d4:	00000e06 	br	10001a10 <SimpleLinkHttpServerCallback+0x180>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
100019d8:	e13fea17 	ldw	r4,-88(fp)
100019dc:	014400b4 	movhi	r5,4098
100019e0:	29538704 	addi	r5,r5,19996
100019e4:	01800084 	movi	r6,2
100019e8:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
100019ec:	e0bfea17 	ldw	r2,-88(fp)
100019f0:	10800084 	addi	r2,r2,2
100019f4:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
100019f8:	e0bffe17 	ldw	r2,-8(fp)
100019fc:	10800103 	ldbu	r2,4(r2)
10001a00:	10800084 	addi	r2,r2,2
10001a04:	1007883a 	mov	r3,r2
10001a08:	e0bffe17 	ldw	r2,-8(fp)
10001a0c:	10c00105 	stb	r3,4(r2)

	                }

	                pal_Memcpy(ptr, "LED1_", pal_Strlen("LED1_"));
10001a10:	e13fea17 	ldw	r4,-88(fp)
10001a14:	014400b4 	movhi	r5,4098
10001a18:	29538804 	addi	r5,r5,20000
10001a1c:	01800144 	movi	r6,5
10001a20:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001a24:	e0bfea17 	ldw	r2,-88(fp)
10001a28:	10800144 	addi	r2,r2,5
10001a2c:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001a30:	e0bffe17 	ldw	r2,-8(fp)
10001a34:	10800103 	ldbu	r2,4(r2)
10001a38:	10800144 	addi	r2,r2,5
10001a3c:	1007883a 	mov	r3,r2
10001a40:	e0bffe17 	ldw	r2,-8(fp)
10001a44:	10c00105 	stb	r3,4(r2)
	                if(status & 0x02)
10001a48:	e0bfec03 	ldbu	r2,-80(fp)
10001a4c:	1080008c 	andi	r2,r2,2
10001a50:	10000f26 	beq	r2,zero,10001a90 <SimpleLinkHttpServerCallback+0x200>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001a54:	e13fea17 	ldw	r4,-88(fp)
10001a58:	014400b4 	movhi	r5,4098
10001a5c:	29538604 	addi	r5,r5,19992
10001a60:	018000c4 	movi	r6,3
10001a64:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001a68:	e0bfea17 	ldw	r2,-88(fp)
10001a6c:	108000c4 	addi	r2,r2,3
10001a70:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001a74:	e0bffe17 	ldw	r2,-8(fp)
10001a78:	10800103 	ldbu	r2,4(r2)
10001a7c:	108000c4 	addi	r2,r2,3
10001a80:	1007883a 	mov	r3,r2
10001a84:	e0bffe17 	ldw	r2,-8(fp)
10001a88:	10c00105 	stb	r3,4(r2)
10001a8c:	00000e06 	br	10001ac8 <SimpleLinkHttpServerCallback+0x238>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001a90:	e13fea17 	ldw	r4,-88(fp)
10001a94:	014400b4 	movhi	r5,4098
10001a98:	29538704 	addi	r5,r5,19996
10001a9c:	01800084 	movi	r6,2
10001aa0:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001aa4:	e0bfea17 	ldw	r2,-88(fp)
10001aa8:	10800084 	addi	r2,r2,2
10001aac:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001ab0:	e0bffe17 	ldw	r2,-8(fp)
10001ab4:	10800103 	ldbu	r2,4(r2)
10001ab8:	10800084 	addi	r2,r2,2
10001abc:	1007883a 	mov	r3,r2
10001ac0:	e0bffe17 	ldw	r2,-8(fp)
10001ac4:	10c00105 	stb	r3,4(r2)

	                }

	                pal_Memcpy(ptr,",LED2_", pal_Strlen(",LED2_"));
10001ac8:	e13fea17 	ldw	r4,-88(fp)
10001acc:	014400b4 	movhi	r5,4098
10001ad0:	29538a04 	addi	r5,r5,20008
10001ad4:	01800184 	movi	r6,6
10001ad8:	000c7840 	call	1000c784 <memcpy>
	                ptr += 6;
10001adc:	e0bfea17 	ldw	r2,-88(fp)
10001ae0:	10800184 	addi	r2,r2,6
10001ae4:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 6;
10001ae8:	e0bffe17 	ldw	r2,-8(fp)
10001aec:	10800103 	ldbu	r2,4(r2)
10001af0:	10800184 	addi	r2,r2,6
10001af4:	1007883a 	mov	r3,r2
10001af8:	e0bffe17 	ldw	r2,-8(fp)
10001afc:	10c00105 	stb	r3,4(r2)
	                if(status & 0x04)
10001b00:	e0bfec03 	ldbu	r2,-80(fp)
10001b04:	1080010c 	andi	r2,r2,4
10001b08:	10000f26 	beq	r2,zero,10001b48 <SimpleLinkHttpServerCallback+0x2b8>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001b0c:	e13fea17 	ldw	r4,-88(fp)
10001b10:	014400b4 	movhi	r5,4098
10001b14:	29538604 	addi	r5,r5,19992
10001b18:	018000c4 	movi	r6,3
10001b1c:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001b20:	e0bfea17 	ldw	r2,-88(fp)
10001b24:	108000c4 	addi	r2,r2,3
10001b28:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001b2c:	e0bffe17 	ldw	r2,-8(fp)
10001b30:	10800103 	ldbu	r2,4(r2)
10001b34:	108000c4 	addi	r2,r2,3
10001b38:	1007883a 	mov	r3,r2
10001b3c:	e0bffe17 	ldw	r2,-8(fp)
10001b40:	10c00105 	stb	r3,4(r2)
10001b44:	00000e06 	br	10001b80 <SimpleLinkHttpServerCallback+0x2f0>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001b48:	e13fea17 	ldw	r4,-88(fp)
10001b4c:	014400b4 	movhi	r5,4098
10001b50:	29538704 	addi	r5,r5,19996
10001b54:	01800084 	movi	r6,2
10001b58:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001b5c:	e0bfea17 	ldw	r2,-88(fp)
10001b60:	10800084 	addi	r2,r2,2
10001b64:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001b68:	e0bffe17 	ldw	r2,-8(fp)
10001b6c:	10800103 	ldbu	r2,4(r2)
10001b70:	10800084 	addi	r2,r2,2
10001b74:	1007883a 	mov	r3,r2
10001b78:	e0bffe17 	ldw	r2,-8(fp)
10001b7c:	10c00105 	stb	r3,4(r2)

	                }

	                pal_Memcpy(ptr, "LED3_", pal_Strlen("LED3_"));
10001b80:	e13fea17 	ldw	r4,-88(fp)
10001b84:	014400b4 	movhi	r5,4098
10001b88:	29538c04 	addi	r5,r5,20016
10001b8c:	01800144 	movi	r6,5
10001b90:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001b94:	e0bfea17 	ldw	r2,-88(fp)
10001b98:	10800144 	addi	r2,r2,5
10001b9c:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001ba0:	e0bffe17 	ldw	r2,-8(fp)
10001ba4:	10800103 	ldbu	r2,4(r2)
10001ba8:	10800144 	addi	r2,r2,5
10001bac:	1007883a 	mov	r3,r2
10001bb0:	e0bffe17 	ldw	r2,-8(fp)
10001bb4:	10c00105 	stb	r3,4(r2)
	                if(status & 0x08)
10001bb8:	e0bfec03 	ldbu	r2,-80(fp)
10001bbc:	1080020c 	andi	r2,r2,8
10001bc0:	10000f26 	beq	r2,zero,10001c00 <SimpleLinkHttpServerCallback+0x370>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001bc4:	e13fea17 	ldw	r4,-88(fp)
10001bc8:	014400b4 	movhi	r5,4098
10001bcc:	29538604 	addi	r5,r5,19992
10001bd0:	018000c4 	movi	r6,3
10001bd4:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001bd8:	e0bfea17 	ldw	r2,-88(fp)
10001bdc:	108000c4 	addi	r2,r2,3
10001be0:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001be4:	e0bffe17 	ldw	r2,-8(fp)
10001be8:	10800103 	ldbu	r2,4(r2)
10001bec:	108000c4 	addi	r2,r2,3
10001bf0:	1007883a 	mov	r3,r2
10001bf4:	e0bffe17 	ldw	r2,-8(fp)
10001bf8:	10c00105 	stb	r3,4(r2)
10001bfc:	00000e06 	br	10001c38 <SimpleLinkHttpServerCallback+0x3a8>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001c00:	e13fea17 	ldw	r4,-88(fp)
10001c04:	014400b4 	movhi	r5,4098
10001c08:	29538704 	addi	r5,r5,19996
10001c0c:	01800084 	movi	r6,2
10001c10:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001c14:	e0bfea17 	ldw	r2,-88(fp)
10001c18:	10800084 	addi	r2,r2,2
10001c1c:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001c20:	e0bffe17 	ldw	r2,-8(fp)
10001c24:	10800103 	ldbu	r2,4(r2)
10001c28:	10800084 	addi	r2,r2,2
10001c2c:	1007883a 	mov	r3,r2
10001c30:	e0bffe17 	ldw	r2,-8(fp)
10001c34:	10c00105 	stb	r3,4(r2)
	                }

	                pal_Memcpy(ptr, "LED4_", pal_Strlen("LED4_"));
10001c38:	e13fea17 	ldw	r4,-88(fp)
10001c3c:	014400b4 	movhi	r5,4098
10001c40:	29538e04 	addi	r5,r5,20024
10001c44:	01800144 	movi	r6,5
10001c48:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001c4c:	e0bfea17 	ldw	r2,-88(fp)
10001c50:	10800144 	addi	r2,r2,5
10001c54:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001c58:	e0bffe17 	ldw	r2,-8(fp)
10001c5c:	10800103 	ldbu	r2,4(r2)
10001c60:	10800144 	addi	r2,r2,5
10001c64:	1007883a 	mov	r3,r2
10001c68:	e0bffe17 	ldw	r2,-8(fp)
10001c6c:	10c00105 	stb	r3,4(r2)
	                if(status & 0x10)
10001c70:	e0bfec03 	ldbu	r2,-80(fp)
10001c74:	1080040c 	andi	r2,r2,16
10001c78:	10000f26 	beq	r2,zero,10001cb8 <SimpleLinkHttpServerCallback+0x428>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001c7c:	e13fea17 	ldw	r4,-88(fp)
10001c80:	014400b4 	movhi	r5,4098
10001c84:	29538604 	addi	r5,r5,19992
10001c88:	018000c4 	movi	r6,3
10001c8c:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001c90:	e0bfea17 	ldw	r2,-88(fp)
10001c94:	108000c4 	addi	r2,r2,3
10001c98:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001c9c:	e0bffe17 	ldw	r2,-8(fp)
10001ca0:	10800103 	ldbu	r2,4(r2)
10001ca4:	108000c4 	addi	r2,r2,3
10001ca8:	1007883a 	mov	r3,r2
10001cac:	e0bffe17 	ldw	r2,-8(fp)
10001cb0:	10c00105 	stb	r3,4(r2)
10001cb4:	00000e06 	br	10001cf0 <SimpleLinkHttpServerCallback+0x460>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001cb8:	e13fea17 	ldw	r4,-88(fp)
10001cbc:	014400b4 	movhi	r5,4098
10001cc0:	29538704 	addi	r5,r5,19996
10001cc4:	01800084 	movi	r6,2
10001cc8:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001ccc:	e0bfea17 	ldw	r2,-88(fp)
10001cd0:	10800084 	addi	r2,r2,2
10001cd4:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001cd8:	e0bffe17 	ldw	r2,-8(fp)
10001cdc:	10800103 	ldbu	r2,4(r2)
10001ce0:	10800084 	addi	r2,r2,2
10001ce4:	1007883a 	mov	r3,r2
10001ce8:	e0bffe17 	ldw	r2,-8(fp)
10001cec:	10c00105 	stb	r3,4(r2)
	                }
	                pal_Memcpy(ptr, "LED5_", pal_Strlen("LED5_"));
10001cf0:	e13fea17 	ldw	r4,-88(fp)
10001cf4:	014400b4 	movhi	r5,4098
10001cf8:	29539004 	addi	r5,r5,20032
10001cfc:	01800144 	movi	r6,5
10001d00:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001d04:	e0bfea17 	ldw	r2,-88(fp)
10001d08:	10800144 	addi	r2,r2,5
10001d0c:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001d10:	e0bffe17 	ldw	r2,-8(fp)
10001d14:	10800103 	ldbu	r2,4(r2)
10001d18:	10800144 	addi	r2,r2,5
10001d1c:	1007883a 	mov	r3,r2
10001d20:	e0bffe17 	ldw	r2,-8(fp)
10001d24:	10c00105 	stb	r3,4(r2)
	                if(status & 0x20)
10001d28:	e0bfec03 	ldbu	r2,-80(fp)
10001d2c:	1080080c 	andi	r2,r2,32
10001d30:	10000f26 	beq	r2,zero,10001d70 <SimpleLinkHttpServerCallback+0x4e0>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001d34:	e13fea17 	ldw	r4,-88(fp)
10001d38:	014400b4 	movhi	r5,4098
10001d3c:	29538604 	addi	r5,r5,19992
10001d40:	018000c4 	movi	r6,3
10001d44:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001d48:	e0bfea17 	ldw	r2,-88(fp)
10001d4c:	108000c4 	addi	r2,r2,3
10001d50:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001d54:	e0bffe17 	ldw	r2,-8(fp)
10001d58:	10800103 	ldbu	r2,4(r2)
10001d5c:	108000c4 	addi	r2,r2,3
10001d60:	1007883a 	mov	r3,r2
10001d64:	e0bffe17 	ldw	r2,-8(fp)
10001d68:	10c00105 	stb	r3,4(r2)
10001d6c:	00000e06 	br	10001da8 <SimpleLinkHttpServerCallback+0x518>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001d70:	e13fea17 	ldw	r4,-88(fp)
10001d74:	014400b4 	movhi	r5,4098
10001d78:	29538704 	addi	r5,r5,19996
10001d7c:	01800084 	movi	r6,2
10001d80:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001d84:	e0bfea17 	ldw	r2,-88(fp)
10001d88:	10800084 	addi	r2,r2,2
10001d8c:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001d90:	e0bffe17 	ldw	r2,-8(fp)
10001d94:	10800103 	ldbu	r2,4(r2)
10001d98:	10800084 	addi	r2,r2,2
10001d9c:	1007883a 	mov	r3,r2
10001da0:	e0bffe17 	ldw	r2,-8(fp)
10001da4:	10c00105 	stb	r3,4(r2)
	                }

	                pal_Memcpy(ptr, "LED6_", pal_Strlen("LED6_"));
10001da8:	e13fea17 	ldw	r4,-88(fp)
10001dac:	014400b4 	movhi	r5,4098
10001db0:	29539204 	addi	r5,r5,20040
10001db4:	01800144 	movi	r6,5
10001db8:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001dbc:	e0bfea17 	ldw	r2,-88(fp)
10001dc0:	10800144 	addi	r2,r2,5
10001dc4:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001dc8:	e0bffe17 	ldw	r2,-8(fp)
10001dcc:	10800103 	ldbu	r2,4(r2)
10001dd0:	10800144 	addi	r2,r2,5
10001dd4:	1007883a 	mov	r3,r2
10001dd8:	e0bffe17 	ldw	r2,-8(fp)
10001ddc:	10c00105 	stb	r3,4(r2)
	                if(status & 0x40)
10001de0:	e0bfec03 	ldbu	r2,-80(fp)
10001de4:	1080100c 	andi	r2,r2,64
10001de8:	10000f26 	beq	r2,zero,10001e28 <SimpleLinkHttpServerCallback+0x598>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001dec:	e13fea17 	ldw	r4,-88(fp)
10001df0:	014400b4 	movhi	r5,4098
10001df4:	29538604 	addi	r5,r5,19992
10001df8:	018000c4 	movi	r6,3
10001dfc:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001e00:	e0bfea17 	ldw	r2,-88(fp)
10001e04:	108000c4 	addi	r2,r2,3
10001e08:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001e0c:	e0bffe17 	ldw	r2,-8(fp)
10001e10:	10800103 	ldbu	r2,4(r2)
10001e14:	108000c4 	addi	r2,r2,3
10001e18:	1007883a 	mov	r3,r2
10001e1c:	e0bffe17 	ldw	r2,-8(fp)
10001e20:	10c00105 	stb	r3,4(r2)
10001e24:	00000e06 	br	10001e60 <SimpleLinkHttpServerCallback+0x5d0>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001e28:	e13fea17 	ldw	r4,-88(fp)
10001e2c:	014400b4 	movhi	r5,4098
10001e30:	29538704 	addi	r5,r5,19996
10001e34:	01800084 	movi	r6,2
10001e38:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001e3c:	e0bfea17 	ldw	r2,-88(fp)
10001e40:	10800084 	addi	r2,r2,2
10001e44:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001e48:	e0bffe17 	ldw	r2,-8(fp)
10001e4c:	10800103 	ldbu	r2,4(r2)
10001e50:	10800084 	addi	r2,r2,2
10001e54:	1007883a 	mov	r3,r2
10001e58:	e0bffe17 	ldw	r2,-8(fp)
10001e5c:	10c00105 	stb	r3,4(r2)
	                }
	                pal_Memcpy(ptr, "LED7_", pal_Strlen("LED7_"));
10001e60:	e13fea17 	ldw	r4,-88(fp)
10001e64:	014400b4 	movhi	r5,4098
10001e68:	29539404 	addi	r5,r5,20048
10001e6c:	01800144 	movi	r6,5
10001e70:	000c7840 	call	1000c784 <memcpy>
	                ptr += 5;
10001e74:	e0bfea17 	ldw	r2,-88(fp)
10001e78:	10800144 	addi	r2,r2,5
10001e7c:	e0bfea15 	stw	r2,-88(fp)
	                pResponse->ResponseData.token_value.len += 5;
10001e80:	e0bffe17 	ldw	r2,-8(fp)
10001e84:	10800103 	ldbu	r2,4(r2)
10001e88:	10800144 	addi	r2,r2,5
10001e8c:	1007883a 	mov	r3,r2
10001e90:	e0bffe17 	ldw	r2,-8(fp)
10001e94:	10c00105 	stb	r3,4(r2)
	                if(status & 0x80)
10001e98:	e0bfec03 	ldbu	r2,-80(fp)
10001e9c:	10803fcc 	andi	r2,r2,255
10001ea0:	1080201c 	xori	r2,r2,128
10001ea4:	10bfe004 	addi	r2,r2,-128
10001ea8:	10000f0e 	bge	r2,zero,10001ee8 <SimpleLinkHttpServerCallback+0x658>
	                {
	                    pal_Memcpy(ptr, "OFF", pal_Strlen("OFF"));
10001eac:	e13fea17 	ldw	r4,-88(fp)
10001eb0:	014400b4 	movhi	r5,4098
10001eb4:	29538604 	addi	r5,r5,19992
10001eb8:	018000c4 	movi	r6,3
10001ebc:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 3;
10001ec0:	e0bfea17 	ldw	r2,-88(fp)
10001ec4:	108000c4 	addi	r2,r2,3
10001ec8:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 3;
10001ecc:	e0bffe17 	ldw	r2,-8(fp)
10001ed0:	10800103 	ldbu	r2,4(r2)
10001ed4:	108000c4 	addi	r2,r2,3
10001ed8:	1007883a 	mov	r3,r2
10001edc:	e0bffe17 	ldw	r2,-8(fp)
10001ee0:	10c00105 	stb	r3,4(r2)
10001ee4:	00000e06 	br	10001f20 <SimpleLinkHttpServerCallback+0x690>
	                }
	                else
	                {
	                    pal_Memcpy(ptr, "ON", pal_Strlen("ON"));
10001ee8:	e13fea17 	ldw	r4,-88(fp)
10001eec:	014400b4 	movhi	r5,4098
10001ef0:	29538704 	addi	r5,r5,19996
10001ef4:	01800084 	movi	r6,2
10001ef8:	000c7840 	call	1000c784 <memcpy>
	                    ptr += 2;
10001efc:	e0bfea17 	ldw	r2,-88(fp)
10001f00:	10800084 	addi	r2,r2,2
10001f04:	e0bfea15 	stw	r2,-88(fp)
	                    pResponse->ResponseData.token_value.len += 2;
10001f08:	e0bffe17 	ldw	r2,-8(fp)
10001f0c:	10800103 	ldbu	r2,4(r2)
10001f10:	10800084 	addi	r2,r2,2
10001f14:	1007883a 	mov	r3,r2
10001f18:	e0bffe17 	ldw	r2,-8(fp)
10001f1c:	10c00105 	stb	r3,4(r2)

	                }
	                *ptr = '\0';
10001f20:	e0bfea17 	ldw	r2,-88(fp)
10001f24:	10000005 	stb	zero,0(r2)
	            }

	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_TEMP_token,
10001f28:	e0bffd17 	ldw	r2,-12(fp)
10001f2c:	14000217 	ldw	r16,8(r2)
10001f30:	010400b4 	movhi	r4,4098
10001f34:	2115d604 	addi	r4,r4,22360
10001f38:	000cc400 	call	1000cc40 <strlen>
10001f3c:	8009883a 	mov	r4,r16
10001f40:	014400b4 	movhi	r5,4098
10001f44:	2955d604 	addi	r5,r5,22360
10001f48:	100d883a 	mov	r6,r2
10001f4c:	000c7080 	call	1000c708 <memcmp>
10001f50:	1000141e 	bne	r2,zero,10001fa4 <SimpleLinkHttpServerCallback+0x714>
	            	           pal_Strlen(GET_TEMP_token)) == 0)
	            {
	        		//lis332arRead(&x_axis, &y_axis, &z_axis);
	        		hdc1000Read(&temperature, &humidity);
10001f54:	d1200184 	addi	r4,gp,-32762
10001f58:	d1600204 	addi	r5,gp,-32760
10001f5c:	000031c0 	call	1000031c <hdc1000Read>
	        		tempCorrection = temperature - 31755;
10001f60:	d0a0018b 	ldhu	r2,-32762(gp)
10001f64:	10bfffcc 	andi	r2,r2,65535
10001f68:	10a0fd44 	addi	r2,r2,-31755
10001f6c:	e0bfeb15 	stw	r2,-84(fp)

	        		replySz = sprintf(ptr, "TEMP_%d", tempCorrection);
10001f70:	e13fea17 	ldw	r4,-88(fp)
10001f74:	014400b4 	movhi	r5,4098
10001f78:	29539604 	addi	r5,r5,20056
10001f7c:	e1bfeb17 	ldw	r6,-84(fp)
10001f80:	000cbd40 	call	1000cbd4 <sprintf>
10001f84:	e0bfed15 	stw	r2,-76(fp)
	        		pResponse->ResponseData.token_value.len += replySz;
10001f88:	e0bffe17 	ldw	r2,-8(fp)
10001f8c:	10800103 	ldbu	r2,4(r2)
10001f90:	e0ffed17 	ldw	r3,-76(fp)
10001f94:	10c5883a 	add	r2,r2,r3
10001f98:	1007883a 	mov	r3,r2
10001f9c:	e0bffe17 	ldw	r2,-8(fp)
10001fa0:	10c00105 	stb	r3,4(r2)
	            	//pal_Memcpy(ptr, "TEMP_", pal_Strlen("TEMP_"));
	            	//ptr += 5;
	            	//pResponse->ResponseData.token_value.len += 5;
	            }

	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_HUMID_token,
10001fa4:	e0bffd17 	ldw	r2,-12(fp)
10001fa8:	14000217 	ldw	r16,8(r2)
10001fac:	010400b4 	movhi	r4,4098
10001fb0:	2115d904 	addi	r4,r4,22372
10001fb4:	000cc400 	call	1000cc40 <strlen>
10001fb8:	8009883a 	mov	r4,r16
10001fbc:	014400b4 	movhi	r5,4098
10001fc0:	2955d904 	addi	r5,r5,22372
10001fc4:	100d883a 	mov	r6,r2
10001fc8:	000c7080 	call	1000c708 <memcmp>
10001fcc:	10000f1e 	bne	r2,zero,1000200c <SimpleLinkHttpServerCallback+0x77c>
	            	           pal_Strlen(GET_HUMID_token)) == 0)
	            {
	            	//hdc1000Read(&temperature, &humidity);

	        		replySz = sprintf(ptr, "HUMI_%d", humidity);
10001fd0:	d0a0020b 	ldhu	r2,-32760(gp)
10001fd4:	10bfffcc 	andi	r2,r2,65535
10001fd8:	e13fea17 	ldw	r4,-88(fp)
10001fdc:	014400b4 	movhi	r5,4098
10001fe0:	29539804 	addi	r5,r5,20064
10001fe4:	100d883a 	mov	r6,r2
10001fe8:	000cbd40 	call	1000cbd4 <sprintf>
10001fec:	e0bfed15 	stw	r2,-76(fp)
	        		pResponse->ResponseData.token_value.len += replySz;
10001ff0:	e0bffe17 	ldw	r2,-8(fp)
10001ff4:	10800103 	ldbu	r2,4(r2)
10001ff8:	e0ffed17 	ldw	r3,-76(fp)
10001ffc:	10c5883a 	add	r2,r2,r3
10002000:	1007883a 	mov	r3,r2
10002004:	e0bffe17 	ldw	r2,-8(fp)
10002008:	10c00105 	stb	r3,4(r2)
	            	//pal_Memcpy(ptr, "HUMI_", pal_Strlen("HUMI_"));
	            	//ptr += 5;
	            	//pResponse->ResponseData.token_value.len += 5;
	            }

	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_XAXIS_token,
1000200c:	e0bffd17 	ldw	r2,-12(fp)
10002010:	14000217 	ldw	r16,8(r2)
10002014:	010400b4 	movhi	r4,4098
10002018:	2115dc04 	addi	r4,r4,22384
1000201c:	000cc400 	call	1000cc40 <strlen>
10002020:	8009883a 	mov	r4,r16
10002024:	014400b4 	movhi	r5,4098
10002028:	2955dc04 	addi	r5,r5,22384
1000202c:	100d883a 	mov	r6,r2
10002030:	000c7080 	call	1000c708 <memcmp>
10002034:	10001d1e 	bne	r2,zero,100020ac <SimpleLinkHttpServerCallback+0x81c>
	            	           pal_Strlen(GET_XAXIS_token)) == 0)
	            {
	            	if(IORD_ALTERA_AVALON_PIO_DATA(DECA_REV_PIO_BASE) == DECA_REVB)
10002038:	0005883a 	mov	r2,zero
1000203c:	10800037 	ldwio	r2,0(r2)
10002040:	10800058 	cmpnei	r2,r2,1
10002044:	1000051e 	bne	r2,zero,1000205c <SimpleLinkHttpServerCallback+0x7cc>
	            		lis332arRead(&x_axis, &y_axis, &z_axis); // REV_B
10002048:	d1200284 	addi	r4,gp,-32758
1000204c:	d1600304 	addi	r5,gp,-32756
10002050:	d1a00384 	addi	r6,gp,-32754
10002054:	00006100 	call	10000610 <lis332arRead>
10002058:	00000506 	br	10002070 <SimpleLinkHttpServerCallback+0x7e0>
	            	else
	            	{
	            		initLIS2DH12();
1000205c:	00003ec0 	call	100003ec <initLIS2DH12>
	            		lis2dh12Read(&x_axis, &y_axis, &z_axis); // REV_C
10002060:	d1200284 	addi	r4,gp,-32758
10002064:	d1600304 	addi	r5,gp,-32756
10002068:	d1a00384 	addi	r6,gp,-32754
1000206c:	000049c0 	call	1000049c <lis2dh12Read>
	            	}

	        		replySz = sprintf(ptr, "XAXI_%d", x_axis);
10002070:	d0a0028b 	ldhu	r2,-32758(gp)
10002074:	10bfffcc 	andi	r2,r2,65535
10002078:	e13fea17 	ldw	r4,-88(fp)
1000207c:	014400b4 	movhi	r5,4098
10002080:	29539a04 	addi	r5,r5,20072
10002084:	100d883a 	mov	r6,r2
10002088:	000cbd40 	call	1000cbd4 <sprintf>
1000208c:	e0bfed15 	stw	r2,-76(fp)
	        		pResponse->ResponseData.token_value.len += replySz;
10002090:	e0bffe17 	ldw	r2,-8(fp)
10002094:	10800103 	ldbu	r2,4(r2)
10002098:	e0ffed17 	ldw	r3,-76(fp)
1000209c:	10c5883a 	add	r2,r2,r3
100020a0:	1007883a 	mov	r3,r2
100020a4:	e0bffe17 	ldw	r2,-8(fp)
100020a8:	10c00105 	stb	r3,4(r2)
	            	//pal_Memcpy(ptr, "XAXI_", pal_Strlen("XAXI_"));
	            	//ptr += 5;
	            	//pResponse->ResponseData.token_value.len += 5;
	            }

	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_YAXIS_token,
100020ac:	e0bffd17 	ldw	r2,-12(fp)
100020b0:	14000217 	ldw	r16,8(r2)
100020b4:	010400b4 	movhi	r4,4098
100020b8:	2115df04 	addi	r4,r4,22396
100020bc:	000cc400 	call	1000cc40 <strlen>
100020c0:	8009883a 	mov	r4,r16
100020c4:	014400b4 	movhi	r5,4098
100020c8:	2955df04 	addi	r5,r5,22396
100020cc:	100d883a 	mov	r6,r2
100020d0:	000c7080 	call	1000c708 <memcmp>
100020d4:	10000f1e 	bne	r2,zero,10002114 <SimpleLinkHttpServerCallback+0x884>
	            	           pal_Strlen(GET_YAXIS_token)) == 0)
	            {
	            	//lis332arRead(&x_axis, &y_axis, &z_axis);

	        		replySz = sprintf(ptr, "YAXI_%d", y_axis);
100020d8:	d0a0030b 	ldhu	r2,-32756(gp)
100020dc:	10bfffcc 	andi	r2,r2,65535
100020e0:	e13fea17 	ldw	r4,-88(fp)
100020e4:	014400b4 	movhi	r5,4098
100020e8:	29539c04 	addi	r5,r5,20080
100020ec:	100d883a 	mov	r6,r2
100020f0:	000cbd40 	call	1000cbd4 <sprintf>
100020f4:	e0bfed15 	stw	r2,-76(fp)
	        		pResponse->ResponseData.token_value.len += replySz;
100020f8:	e0bffe17 	ldw	r2,-8(fp)
100020fc:	10800103 	ldbu	r2,4(r2)
10002100:	e0ffed17 	ldw	r3,-76(fp)
10002104:	10c5883a 	add	r2,r2,r3
10002108:	1007883a 	mov	r3,r2
1000210c:	e0bffe17 	ldw	r2,-8(fp)
10002110:	10c00105 	stb	r3,4(r2)
	            	//pal_Memcpy(ptr, "YAXI_", pal_Strlen("YAXI_"));
	            	//ptr += 5;
	            	//pResponse->ResponseData.token_value.len += 5;
	            }

	            if(pal_Memcmp(pEvent->EventData.httpTokenName.data, GET_ZAXIS_token,
10002114:	e0bffd17 	ldw	r2,-12(fp)
10002118:	14000217 	ldw	r16,8(r2)
1000211c:	010400b4 	movhi	r4,4098
10002120:	2115e204 	addi	r4,r4,22408
10002124:	000cc400 	call	1000cc40 <strlen>
10002128:	8009883a 	mov	r4,r16
1000212c:	014400b4 	movhi	r5,4098
10002130:	2955e204 	addi	r5,r5,22408
10002134:	100d883a 	mov	r6,r2
10002138:	000c7080 	call	1000c708 <memcmp>
1000213c:	1000101e 	bne	r2,zero,10002180 <SimpleLinkHttpServerCallback+0x8f0>
	            	           pal_Strlen(GET_ZAXIS_token)) == 0)
	            {
	            	//lis332arRead(&x_axis, &y_axis, &z_axis);

	        		replySz = sprintf(ptr, "ZAXI_%d", z_axis);
10002140:	d0a0038b 	ldhu	r2,-32754(gp)
10002144:	10bfffcc 	andi	r2,r2,65535
10002148:	e13fea17 	ldw	r4,-88(fp)
1000214c:	014400b4 	movhi	r5,4098
10002150:	29539e04 	addi	r5,r5,20088
10002154:	100d883a 	mov	r6,r2
10002158:	000cbd40 	call	1000cbd4 <sprintf>
1000215c:	e0bfed15 	stw	r2,-76(fp)
	        		pResponse->ResponseData.token_value.len += replySz;
10002160:	e0bffe17 	ldw	r2,-8(fp)
10002164:	10800103 	ldbu	r2,4(r2)
10002168:	e0ffed17 	ldw	r3,-76(fp)
1000216c:	10c5883a 	add	r2,r2,r3
10002170:	1007883a 	mov	r3,r2
10002174:	e0bffe17 	ldw	r2,-8(fp)
10002178:	10c00105 	stb	r3,4(r2)
	            	//ptr += 5;
	            	//pResponse->ResponseData.token_value.len += 5;
	            }

	        }
	        break;
1000217c:	0000d706 	br	100024dc <SimpleLinkHttpServerCallback+0xc4c>
10002180:	0000d606 	br	100024dc <SimpleLinkHttpServerCallback+0xc4c>

	        case SL_NETAPP_HTTPPOSTTOKENVALUE_EVENT:
	        {
	        	 _u8 led_state;
	            _u8 led = 0;
10002184:	e03fee05 	stb	zero,-72(fp)
	            _u8 *ptr = pEvent->EventData.httpPostData.token_name.data;
10002188:	e0bffd17 	ldw	r2,-12(fp)
1000218c:	10800417 	ldw	r2,16(r2)
10002190:	e0bfef15 	stw	r2,-68(fp)

	            if(pal_Memcmp(ptr, POST_token, pal_Strlen(POST_token)) == 0)
10002194:	010400b4 	movhi	r4,4098
10002198:	2115d004 	addi	r4,r4,22336
1000219c:	000cc400 	call	1000cc40 <strlen>
100021a0:	e13fef17 	ldw	r4,-68(fp)
100021a4:	014400b4 	movhi	r5,4098
100021a8:	2955d004 	addi	r5,r5,22336
100021ac:	100d883a 	mov	r6,r2
100021b0:	000c7080 	call	1000c708 <memcmp>
100021b4:	1000c81e 	bne	r2,zero,100024d8 <SimpleLinkHttpServerCallback+0xc48>
	            {
	                ptr = pEvent->EventData.httpPostData.token_value.data;
100021b8:	e0bffd17 	ldw	r2,-12(fp)
100021bc:	10800617 	ldw	r2,24(r2)
100021c0:	e0bfef15 	stw	r2,-68(fp)
	                if(pal_Memcmp(ptr, "LED", 3) != 0)
100021c4:	e13fef17 	ldw	r4,-68(fp)
100021c8:	014400b4 	movhi	r5,4098
100021cc:	2953a004 	addi	r5,r5,20096
100021d0:	018000c4 	movi	r6,3
100021d4:	000c7080 	call	1000c708 <memcmp>
100021d8:	10000126 	beq	r2,zero,100021e0 <SimpleLinkHttpServerCallback+0x950>
	                    break;
100021dc:	0000bf06 	br	100024dc <SimpleLinkHttpServerCallback+0xc4c>

	                ptr += 3;
100021e0:	e0bfef17 	ldw	r2,-68(fp)
100021e4:	108000c4 	addi	r2,r2,3
100021e8:	e0bfef15 	stw	r2,-68(fp)
	                led = *ptr;
100021ec:	e0bfef17 	ldw	r2,-68(fp)
100021f0:	10800003 	ldbu	r2,0(r2)
100021f4:	e0bfee05 	stb	r2,-72(fp)
	                ptr += 2;
100021f8:	e0bfef17 	ldw	r2,-68(fp)
100021fc:	10800084 	addi	r2,r2,2
10002200:	e0bfef15 	stw	r2,-68(fp)
	                led_state = IORD(BLUE_LEDS_BASE, 0);
10002204:	00880034 	movhi	r2,8192
10002208:	1084e804 	addi	r2,r2,5024
1000220c:	10800037 	ldwio	r2,0(r2)
10002210:	e0bff005 	stb	r2,-64(fp)
	                if(led == '0')
10002214:	e0bfee03 	ldbu	r2,-72(fp)
10002218:	10800c18 	cmpnei	r2,r2,48
1000221c:	1000131e 	bne	r2,zero,1000226c <SimpleLinkHttpServerCallback+0x9dc>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002220:	e13fef17 	ldw	r4,-68(fp)
10002224:	014400b4 	movhi	r5,4098
10002228:	29538704 	addi	r5,r5,19996
1000222c:	01800084 	movi	r6,2
10002230:	000c7080 	call	1000c708 <memcmp>
10002234:	1000061e 	bne	r2,zero,10002250 <SimpleLinkHttpServerCallback+0x9c0>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xfe);
10002238:	e0bff003 	ldbu	r2,-64(fp)
1000223c:	10c03f8c 	andi	r3,r2,254
10002240:	00880034 	movhi	r2,8192
10002244:	1084e804 	addi	r2,r2,5024
10002248:	10c00035 	stwio	r3,0(r2)
1000224c:	0000a206 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x1);
10002250:	e0bff003 	ldbu	r2,-64(fp)
10002254:	10800054 	ori	r2,r2,1
10002258:	10c03fcc 	andi	r3,r2,255
1000225c:	00880034 	movhi	r2,8192
10002260:	1084e804 	addi	r2,r2,5024
10002264:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
10002268:	00009b06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x1);
	                    }
	                }
	                else if(led == '1')
1000226c:	e0bfee03 	ldbu	r2,-72(fp)
10002270:	10800c58 	cmpnei	r2,r2,49
10002274:	1000131e 	bne	r2,zero,100022c4 <SimpleLinkHttpServerCallback+0xa34>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002278:	e13fef17 	ldw	r4,-68(fp)
1000227c:	014400b4 	movhi	r5,4098
10002280:	29538704 	addi	r5,r5,19996
10002284:	01800084 	movi	r6,2
10002288:	000c7080 	call	1000c708 <memcmp>
1000228c:	1000061e 	bne	r2,zero,100022a8 <SimpleLinkHttpServerCallback+0xa18>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xfd);
10002290:	e0bff003 	ldbu	r2,-64(fp)
10002294:	10c03f4c 	andi	r3,r2,253
10002298:	00880034 	movhi	r2,8192
1000229c:	1084e804 	addi	r2,r2,5024
100022a0:	10c00035 	stwio	r3,0(r2)
100022a4:	00008c06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x2);
100022a8:	e0bff003 	ldbu	r2,-64(fp)
100022ac:	10800094 	ori	r2,r2,2
100022b0:	10c03fcc 	andi	r3,r2,255
100022b4:	00880034 	movhi	r2,8192
100022b8:	1084e804 	addi	r2,r2,5024
100022bc:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
100022c0:	00008506 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x2);
	                    }
	                }
	                else if(led == '2')
100022c4:	e0bfee03 	ldbu	r2,-72(fp)
100022c8:	10800c98 	cmpnei	r2,r2,50
100022cc:	1000131e 	bne	r2,zero,1000231c <SimpleLinkHttpServerCallback+0xa8c>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
100022d0:	e13fef17 	ldw	r4,-68(fp)
100022d4:	014400b4 	movhi	r5,4098
100022d8:	29538704 	addi	r5,r5,19996
100022dc:	01800084 	movi	r6,2
100022e0:	000c7080 	call	1000c708 <memcmp>
100022e4:	1000061e 	bne	r2,zero,10002300 <SimpleLinkHttpServerCallback+0xa70>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xfb);
100022e8:	e0bff003 	ldbu	r2,-64(fp)
100022ec:	10c03ecc 	andi	r3,r2,251
100022f0:	00880034 	movhi	r2,8192
100022f4:	1084e804 	addi	r2,r2,5024
100022f8:	10c00035 	stwio	r3,0(r2)
100022fc:	00007606 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x4);
10002300:	e0bff003 	ldbu	r2,-64(fp)
10002304:	10800114 	ori	r2,r2,4
10002308:	10c03fcc 	andi	r3,r2,255
1000230c:	00880034 	movhi	r2,8192
10002310:	1084e804 	addi	r2,r2,5024
10002314:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
10002318:	00006f06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x4);
	                    }
	                }
	                else if(led == '3')
1000231c:	e0bfee03 	ldbu	r2,-72(fp)
10002320:	10800cd8 	cmpnei	r2,r2,51
10002324:	1000131e 	bne	r2,zero,10002374 <SimpleLinkHttpServerCallback+0xae4>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002328:	e13fef17 	ldw	r4,-68(fp)
1000232c:	014400b4 	movhi	r5,4098
10002330:	29538704 	addi	r5,r5,19996
10002334:	01800084 	movi	r6,2
10002338:	000c7080 	call	1000c708 <memcmp>
1000233c:	1000061e 	bne	r2,zero,10002358 <SimpleLinkHttpServerCallback+0xac8>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xf7);
10002340:	e0bff003 	ldbu	r2,-64(fp)
10002344:	10c03dcc 	andi	r3,r2,247
10002348:	00880034 	movhi	r2,8192
1000234c:	1084e804 	addi	r2,r2,5024
10002350:	10c00035 	stwio	r3,0(r2)
10002354:	00006006 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x8);
10002358:	e0bff003 	ldbu	r2,-64(fp)
1000235c:	10800214 	ori	r2,r2,8
10002360:	10c03fcc 	andi	r3,r2,255
10002364:	00880034 	movhi	r2,8192
10002368:	1084e804 	addi	r2,r2,5024
1000236c:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
10002370:	00005906 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x8);
	                    }
	                }
	                else if(led == '4')
10002374:	e0bfee03 	ldbu	r2,-72(fp)
10002378:	10800d18 	cmpnei	r2,r2,52
1000237c:	1000131e 	bne	r2,zero,100023cc <SimpleLinkHttpServerCallback+0xb3c>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002380:	e13fef17 	ldw	r4,-68(fp)
10002384:	014400b4 	movhi	r5,4098
10002388:	29538704 	addi	r5,r5,19996
1000238c:	01800084 	movi	r6,2
10002390:	000c7080 	call	1000c708 <memcmp>
10002394:	1000061e 	bne	r2,zero,100023b0 <SimpleLinkHttpServerCallback+0xb20>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xef);
10002398:	e0bff003 	ldbu	r2,-64(fp)
1000239c:	10c03bcc 	andi	r3,r2,239
100023a0:	00880034 	movhi	r2,8192
100023a4:	1084e804 	addi	r2,r2,5024
100023a8:	10c00035 	stwio	r3,0(r2)
100023ac:	00004a06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x10);
100023b0:	e0bff003 	ldbu	r2,-64(fp)
100023b4:	10800414 	ori	r2,r2,16
100023b8:	10c03fcc 	andi	r3,r2,255
100023bc:	00880034 	movhi	r2,8192
100023c0:	1084e804 	addi	r2,r2,5024
100023c4:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
100023c8:	00004306 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x10);
	                    }
	                }
	                else if(led == '5')
100023cc:	e0bfee03 	ldbu	r2,-72(fp)
100023d0:	10800d58 	cmpnei	r2,r2,53
100023d4:	1000131e 	bne	r2,zero,10002424 <SimpleLinkHttpServerCallback+0xb94>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
100023d8:	e13fef17 	ldw	r4,-68(fp)
100023dc:	014400b4 	movhi	r5,4098
100023e0:	29538704 	addi	r5,r5,19996
100023e4:	01800084 	movi	r6,2
100023e8:	000c7080 	call	1000c708 <memcmp>
100023ec:	1000061e 	bne	r2,zero,10002408 <SimpleLinkHttpServerCallback+0xb78>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xdf);
100023f0:	e0bff003 	ldbu	r2,-64(fp)
100023f4:	10c037cc 	andi	r3,r2,223
100023f8:	00880034 	movhi	r2,8192
100023fc:	1084e804 	addi	r2,r2,5024
10002400:	10c00035 	stwio	r3,0(r2)
10002404:	00003406 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x20);
10002408:	e0bff003 	ldbu	r2,-64(fp)
1000240c:	10800814 	ori	r2,r2,32
10002410:	10c03fcc 	andi	r3,r2,255
10002414:	00880034 	movhi	r2,8192
10002418:	1084e804 	addi	r2,r2,5024
1000241c:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
10002420:	00002d06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x20);
	                    }
	                }
	                else if(led == '6')
10002424:	e0bfee03 	ldbu	r2,-72(fp)
10002428:	10800d98 	cmpnei	r2,r2,54
1000242c:	1000131e 	bne	r2,zero,1000247c <SimpleLinkHttpServerCallback+0xbec>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002430:	e13fef17 	ldw	r4,-68(fp)
10002434:	014400b4 	movhi	r5,4098
10002438:	29538704 	addi	r5,r5,19996
1000243c:	01800084 	movi	r6,2
10002440:	000c7080 	call	1000c708 <memcmp>
10002444:	1000061e 	bne	r2,zero,10002460 <SimpleLinkHttpServerCallback+0xbd0>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0xbf);
10002448:	e0bff003 	ldbu	r2,-64(fp)
1000244c:	10c02fcc 	andi	r3,r2,191
10002450:	00880034 	movhi	r2,8192
10002454:	1084e804 	addi	r2,r2,5024
10002458:	10c00035 	stwio	r3,0(r2)
1000245c:	00001e06 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x40);
10002460:	e0bff003 	ldbu	r2,-64(fp)
10002464:	10801014 	ori	r2,r2,64
10002468:	10c03fcc 	andi	r3,r2,255
1000246c:	00880034 	movhi	r2,8192
10002470:	1084e804 	addi	r2,r2,5024
10002474:	10c00035 	stwio	r3,0(r2)
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
	                    }
	                }
	            }
	        }
	        break;
10002478:	00001706 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x40);
	                    }
	                }
	                else if(led == '7')
1000247c:	e0bfee03 	ldbu	r2,-72(fp)
10002480:	10800dd8 	cmpnei	r2,r2,55
10002484:	1000141e 	bne	r2,zero,100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                {
	                    if(pal_Memcmp(ptr, "ON", 2) == 0)
10002488:	e13fef17 	ldw	r4,-68(fp)
1000248c:	014400b4 	movhi	r5,4098
10002490:	29538704 	addi	r5,r5,19996
10002494:	01800084 	movi	r6,2
10002498:	000c7080 	call	1000c708 <memcmp>
1000249c:	1000061e 	bne	r2,zero,100024b8 <SimpleLinkHttpServerCallback+0xc28>
	                    {
	                        IOWR(BLUE_LEDS_BASE, 0, led_state & 0x7f);
100024a0:	e0bff003 	ldbu	r2,-64(fp)
100024a4:	10c01fcc 	andi	r3,r2,127
100024a8:	00880034 	movhi	r2,8192
100024ac:	1084e804 	addi	r2,r2,5024
100024b0:	10c00035 	stwio	r3,0(r2)
100024b4:	00000806 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
	                    }
	                    else
	                    {
	                    	IOWR(BLUE_LEDS_BASE, 0, led_state | 0x80);
100024b8:	e0fff003 	ldbu	r3,-64(fp)
100024bc:	00bfe004 	movi	r2,-128
100024c0:	1884b03a 	or	r2,r3,r2
100024c4:	10c03fcc 	andi	r3,r2,255
100024c8:	00880034 	movhi	r2,8192
100024cc:	1084e804 	addi	r2,r2,5024
100024d0:	10c00035 	stwio	r3,0(r2)
	                    }
	                }
	            }
	        }
	        break;
100024d4:	00000006 	br	100024d8 <SimpleLinkHttpServerCallback+0xc48>
100024d8:	0001883a 	nop

	        default:
	        break;
	    }
}
100024dc:	e6ffff04 	addi	sp,fp,-4
100024e0:	dfc00217 	ldw	ra,8(sp)
100024e4:	df000117 	ldw	fp,4(sp)
100024e8:	dc000017 	ldw	r16,0(sp)
100024ec:	dec00304 	addi	sp,sp,12
100024f0:	f800283a 	ret

100024f4 <SimpleLinkPingReport>:

void SimpleLinkPingReport(SlPingReport_t *pPingReport)
{
100024f4:	defffe04 	addi	sp,sp,-8
100024f8:	df000115 	stw	fp,4(sp)
100024fc:	df000104 	addi	fp,sp,4
10002500:	e13fff15 	stw	r4,-4(fp)

}
10002504:	e037883a 	mov	sp,fp
10002508:	df000017 	ldw	fp,0(sp)
1000250c:	dec00104 	addi	sp,sp,4
10002510:	f800283a 	ret

10002514 <SimpleLinkSockEventHandler>:


void SimpleLinkSockEventHandler(SlSockEvent_t *pSock)
{
10002514:	defffd04 	addi	sp,sp,-12
10002518:	dfc00215 	stw	ra,8(sp)
1000251c:	df000115 	stw	fp,4(sp)
10002520:	df000104 	addi	fp,sp,4
10002524:	e13fff15 	stw	r4,-4(fp)
	if(pSock == NULL)
10002528:	e0bfff17 	ldw	r2,-4(fp)
1000252c:	1000031e 	bne	r2,zero,1000253c <SimpleLinkSockEventHandler+0x28>
	        printf(" [SOCK EVENT] NULL Pointer Error \n\r");
10002530:	010400b4 	movhi	r4,4098
10002534:	2113a104 	addi	r4,r4,20100
10002538:	000ca0c0 	call	1000ca0c <printf>

	    switch( pSock->Event )
1000253c:	e0bfff17 	ldw	r2,-4(fp)
10002540:	10800017 	ldw	r2,0(r2)
10002544:	10800060 	cmpeqi	r2,r2,1
10002548:	10001026 	beq	r2,zero,1000258c <SimpleLinkSockEventHandler+0x78>
	            * required
	            *
	            * SlSockEventData_t *pEventData = NULL;
	            * pEventData = & pSock->EventData;
	            */
	            switch( pSock->EventData.status )
1000254c:	e0bfff17 	ldw	r2,-4(fp)
10002550:	1080010b 	ldhu	r2,4(r2)
10002554:	10bfffcc 	andi	r2,r2,65535
10002558:	10a0001c 	xori	r2,r2,32768
1000255c:	10a00004 	addi	r2,r2,-32768
10002560:	10bffc60 	cmpeqi	r2,r2,-15
10002564:	10000426 	beq	r2,zero,10002578 <SimpleLinkSockEventHandler+0x64>
	                case SL_ECLOSE:
	                  /*
	                   * Close Socket operation:- Failed to transmit all the
	                   * queued packets.
	                   */
	                    printf(" [SOCK EVENT] Failed to transmit packets \r\n");
10002568:	010400b4 	movhi	r4,4098
1000256c:	2113aa04 	addi	r4,r4,20136
10002570:	000cb000 	call	1000cb00 <puts>
	                break;
10002574:	00000406 	br	10002588 <SimpleLinkSockEventHandler+0x74>
	                default:
	                    printf(" [SOCK EVENT] Unexpected event \r\n");
10002578:	010400b4 	movhi	r4,4098
1000257c:	2113b504 	addi	r4,r4,20180
10002580:	000cb000 	call	1000cb00 <puts>
	                break;
10002584:	0001883a 	nop
	            }
	        }
	        break;
10002588:	00000406 	br	1000259c <SimpleLinkSockEventHandler+0x88>

	        default:
	            printf(" [SOCK EVENT] Unexpected event \r\n");
1000258c:	010400b4 	movhi	r4,4098
10002590:	2113b504 	addi	r4,r4,20180
10002594:	000cb000 	call	1000cb00 <puts>
	        break;
10002598:	0001883a 	nop
	    }
}
1000259c:	e037883a 	mov	sp,fp
100025a0:	dfc00117 	ldw	ra,4(sp)
100025a4:	df000017 	ldw	fp,0(sp)
100025a8:	dec00204 	addi	sp,sp,8
100025ac:	f800283a 	ret

100025b0 <main>:
 *
 * NOTES:
 *   None.
 ******************************************************************************/
int main (int argc, char* argv[], char* envp[])
{
100025b0:	deffb504 	addi	sp,sp,-300
100025b4:	dfc04a15 	stw	ra,296(sp)
100025b8:	df004915 	stw	fp,292(sp)
100025bc:	df004904 	addi	fp,sp,292
100025c0:	e13fec15 	stw	r4,-80(fp)
100025c4:	e17fed15 	stw	r5,-76(fp)
100025c8:	e1bfee15 	stw	r6,-72(fp)

	adc_stop(ADC_SEQUENCER_CSR_BASE);
100025cc:	01080034 	movhi	r4,8192
100025d0:	21051c04 	addi	r4,r4,5232
100025d4:	00237800 	call	10023780 <adc_stop>
	adc_interrupt_disable(ADC_SAMPLE_STORE_CSR_BASE);
100025d8:	01080034 	movhi	r4,8192
100025dc:	21040004 	addi	r4,r4,4096
100025e0:	002392c0 	call	1002392c <adc_interrupt_disable>

	_i32 retVal = -1;
100025e4:	00bfffc4 	movi	r2,-1
100025e8:	e0bfc415 	stw	r2,-240(fp)
	_i8  *pConfig = NULL;
100025ec:	e03fc515 	stw	zero,-236(fp)

	 SlPingStartCommand_t PingParams;
	    SlPingReport_t Report;
	    UserInfo User;

	    _u32 IpAddr = 0;
100025f0:	e03fc615 	stw	zero,-232(fp)
	    _u32 Mask = 0;
100025f4:	e03fc715 	stw	zero,-228(fp)
	    _u32 Gw = 0;
100025f8:	e03fc815 	stw	zero,-224(fp)
	    _u32 Dns = 0;
100025fc:	e03fc915 	stw	zero,-220(fp)
	    _u8  IsDhcp = 0;
10002600:	e03fca05 	stb	zero,-216(fp)

	    _i32 Status = -1;
10002604:	00bfffc4 	movi	r2,-1
10002608:	e0bfcb15 	stw	r2,-212(fp)
	    _i32 mode = ROLE_STA;
1000260c:	e03fcc15 	stw	zero,-208(fp)

	/********************************************
	 * Initialize device
	 ********************************************/
	IOWR (BLUE_LEDS_BASE, 0, 0xff);
10002610:	00c03fc4 	movi	r3,255
10002614:	00880034 	movhi	r2,8192
10002618:	1084e804 	addi	r2,r2,5024
1000261c:	10c00035 	stwio	r3,0(r2)
	lis332arInit();
10002620:	00005b40 	call	100005b4 <lis332arInit>
	hdc1000Init();
10002624:	00002c40 	call	100002c4 <hdc1000Init>
	IOWR(CC3100_CTRL_PIO_BASE, 0, 0);
10002628:	0007883a 	mov	r3,zero
1000262c:	00880034 	movhi	r2,8192
10002630:	1084d804 	addi	r2,r2,4960
10002634:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10002638:	01000044 	movi	r4,1
1000263c:	0021d3c0 	call	10021d3c <usleep>
	//IOWR(SYS_RST_OUT_BASE, 0, 0);
	usleep(1);
10002640:	01000044 	movi	r4,1
10002644:	0021d3c0 	call	10021d3c <usleep>
	//IOWR(SYS_RST_OUT_BASE, 0, 1);

	IOWR(SYS_RST_OUT_N_BASE, 0, 0);
10002648:	0007883a 	mov	r3,zero
1000264c:	00880034 	movhi	r2,8192
10002650:	1084a804 	addi	r2,r2,4768
10002654:	10c00035 	stwio	r3,0(r2)
	usleep(1);
10002658:	01000044 	movi	r4,1
1000265c:	0021d3c0 	call	10021d3c <usleep>

	/********************************************
	 * Setup Interrupt
	 ********************************************/
	IOWR(CC2650_IRQ_PIO_BASE, 0, 0x00);
10002660:	0007883a 	mov	r3,zero
10002664:	00880034 	movhi	r2,8192
10002668:	10850804 	addi	r2,r2,5152
1000266c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CC2650_IRQ_PIO_BASE, 0xFF);
10002670:	00c03fc4 	movi	r3,255
10002674:	00880034 	movhi	r2,8192
10002678:	10850b04 	addi	r2,r2,5164
1000267c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_IRQ_MASK(CC2650_IRQ_PIO_BASE,  0xFF);
10002680:	00c03fc4 	movi	r3,255
10002684:	00880034 	movhi	r2,8192
10002688:	10850a04 	addi	r2,r2,5160
1000268c:	10c00035 	stwio	r3,0(r2)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register (CC2650_IRQ_PIO_IRQ_INTERRUPT_CONTROLLER_ID,
10002690:	d8000015 	stw	zero,0(sp)
10002694:	0009883a 	mov	r4,zero
10002698:	014001c4 	movi	r5,7
1000269c:	01840034 	movhi	r6,4096
100026a0:	318b6604 	addi	r6,r6,11672
100026a4:	01c80034 	movhi	r7,8192
100026a8:	39c50804 	addi	r7,r7,5152
100026ac:	002145c0 	call	1002145c <alt_ic_isr_register>
	alt_irq_register (CC2650_CTRL_PIO_IRQ, CC2650_CTRL_PIO_BASE, slInterrupt);
#endif


	//IOWR(X_PIO_IRQ_BASE, 3, 0xff);
	alt_ic_irq_enable(CC2650_IRQ_PIO_IRQ_INTERRUPT_CONTROLLER_ID,
100026b0:	0009883a 	mov	r4,zero
100026b4:	014001c4 	movi	r5,7
100026b8:	00214ac0 	call	100214ac <alt_ic_irq_enable>
			CC2650_IRQ_PIO_IRQ);

	//IOWR(SYS_RST_OUT_N_BASE, 0, 0);
	//usleep(1);
	IOWR(SYS_RST_OUT_N_BASE, 0, 1);
100026bc:	00c00044 	movi	r3,1
100026c0:	00880034 	movhi	r2,8192
100026c4:	1084a804 	addi	r2,r2,4768
100026c8:	10c00035 	stwio	r3,0(r2)

#if 1
	retVal = configureSimpleLinkToDefaultState(pConfig);
100026cc:	e13fc517 	ldw	r4,-236(fp)
100026d0:	0000e540 	call	10000e54 <configureSimpleLinkToDefaultState>
100026d4:	e0bfc415 	stw	r2,-240(fp)

	if(retVal < 0)
100026d8:	e0bfc417 	ldw	r2,-240(fp)
100026dc:	1000050e 	bge	r2,zero,100026f4 <main+0x144>
	    {
	        printf(" Failed to configure the device in its default state, Error code: %ld\r\n",retVal);
100026e0:	010400b4 	movhi	r4,4098
100026e4:	2113be04 	addi	r4,r4,20216
100026e8:	e17fc417 	ldw	r5,-240(fp)
100026ec:	000ca0c0 	call	1000ca0c <printf>
	        LOOP_FOREVER();
100026f0:	003fff06 	br	100026f0 <__alt_data_end+0xf00026f0>
	    }

	    printf("Device is configured in default state \r\n");
100026f4:	010400b4 	movhi	r4,4098
100026f8:	2113d004 	addi	r4,r4,20288
100026fc:	000cb000 	call	1000cb00 <puts>
	     * Asumption is that the device is configured in station mode already
	     * and it is in its default state
	     */

	    /* Initializing the CC3100 device */
	    mode = sl_Start(0, pConfig, 0);
10002700:	0009883a 	mov	r4,zero
10002704:	e17fc517 	ldw	r5,-236(fp)
10002708:	000d883a 	mov	r6,zero
1000270c:	00032ec0 	call	100032ec <sl_Start>
10002710:	10bfffcc 	andi	r2,r2,65535
10002714:	10a0001c 	xori	r2,r2,32768
10002718:	10a00004 	addi	r2,r2,-32768
1000271c:	e0bfcc15 	stw	r2,-208(fp)
	    if (ROLE_AP == mode)
10002720:	e0bfcc17 	ldw	r2,-208(fp)
10002724:	10800098 	cmpnei	r2,r2,2
10002728:	1000061e 	bne	r2,zero,10002744 <main+0x194>
	    {
	        /* If some other application has configured the device in AP mode,
	           then we need to wait for this event */
	        while(!IS_IP_ACQUIRED(g_Status))
1000272c:	0001883a 	nop
10002730:	d0a79f03 	ldbu	r2,-24964(gp)
10002734:	10803fcc 	andi	r2,r2,255
10002738:	1080008c 	andi	r2,r2,2
1000273c:	103ffc26 	beq	r2,zero,10002730 <__alt_data_end+0xf0002730>
10002740:	00002706 	br	100027e0 <main+0x230>
	            ;
	    }
	    else
	    {
	        /* Configure CC3100 to start in AP mode */
	        retVal = sl_WlanSetMode(ROLE_AP);
10002744:	01000084 	movi	r4,2
10002748:	000c2780 	call	1000c278 <sl_WlanSetMode>
1000274c:	10bfffcc 	andi	r2,r2,65535
10002750:	10a0001c 	xori	r2,r2,32768
10002754:	10a00004 	addi	r2,r2,-32768
10002758:	e0bfc415 	stw	r2,-240(fp)
	        if(retVal < 0)
1000275c:	e0bfc417 	ldw	r2,-240(fp)
10002760:	1000010e 	bge	r2,zero,10002768 <main+0x1b8>
	            LOOP_FOREVER();
10002764:	003fff06 	br	10002764 <__alt_data_end+0xf0002764>

	        retVal = sl_Stop(SL_STOP_TIMEOUT);
10002768:	01003fc4 	movi	r4,255
1000276c:	000380c0 	call	1000380c <sl_Stop>
10002770:	10bfffcc 	andi	r2,r2,65535
10002774:	10a0001c 	xori	r2,r2,32768
10002778:	10a00004 	addi	r2,r2,-32768
1000277c:	e0bfc415 	stw	r2,-240(fp)
	        if(retVal < 0)
10002780:	e0bfc417 	ldw	r2,-240(fp)
10002784:	1000010e 	bge	r2,zero,1000278c <main+0x1dc>
	            LOOP_FOREVER();
10002788:	003fff06 	br	10002788 <__alt_data_end+0xf0002788>
	        mode = sl_Start(0, pConfig, 0);
1000278c:	0009883a 	mov	r4,zero
10002790:	e17fc517 	ldw	r5,-236(fp)
10002794:	000d883a 	mov	r6,zero
10002798:	00032ec0 	call	100032ec <sl_Start>
1000279c:	10bfffcc 	andi	r2,r2,65535
100027a0:	10a0001c 	xori	r2,r2,32768
100027a4:	10a00004 	addi	r2,r2,-32768
100027a8:	e0bfcc15 	stw	r2,-208(fp)
	        if (ROLE_AP == mode)
100027ac:	e0bfcc17 	ldw	r2,-208(fp)
100027b0:	10800098 	cmpnei	r2,r2,2
100027b4:	1000061e 	bne	r2,zero,100027d0 <main+0x220>
	        {
	            /* If the device is in AP mode, we need to wait for this event before doing anything */
	            while(!IS_IP_ACQUIRED(g_Status))
100027b8:	0001883a 	nop
100027bc:	d0a79f03 	ldbu	r2,-24964(gp)
100027c0:	10803fcc 	andi	r2,r2,255
100027c4:	1080008c 	andi	r2,r2,2
100027c8:	103ffc26 	beq	r2,zero,100027bc <__alt_data_end+0xf00027bc>
100027cc:	00000406 	br	100027e0 <main+0x230>
	                ;
	        }
	        else
	        {
	            printf(" Device couldn't be configured in AP mode \n\r");
100027d0:	010400b4 	movhi	r4,4098
100027d4:	2113da04 	addi	r4,r4,20328
100027d8:	000ca0c0 	call	1000ca0c <printf>
	            LOOP_FOREVER();
100027dc:	003fff06 	br	100027dc <__alt_data_end+0xf00027dc>
	        }
	    }

	    User = GetUserInput();
100027e0:	e0bfef04 	addi	r2,fp,-68
100027e4:	1009883a 	mov	r4,r2
100027e8:	00013640 	call	10001364 <GetUserInput>
100027ec:	e13fdb04 	addi	r4,fp,-148
100027f0:	e0ffef04 	addi	r3,fp,-68
100027f4:	00801104 	movi	r2,68
100027f8:	180b883a 	mov	r5,r3
100027fc:	100d883a 	mov	r6,r2
10002800:	000c7840 	call	1000c784 <memcpy>

	    retVal = ConfigureAPmode(User);
10002804:	e0bfdf17 	ldw	r2,-132(fp)
10002808:	d8800015 	stw	r2,0(sp)
1000280c:	e0bfe017 	ldw	r2,-128(fp)
10002810:	d8800115 	stw	r2,4(sp)
10002814:	e0bfe117 	ldw	r2,-124(fp)
10002818:	d8800215 	stw	r2,8(sp)
1000281c:	e0bfe217 	ldw	r2,-120(fp)
10002820:	d8800315 	stw	r2,12(sp)
10002824:	e0bfe317 	ldw	r2,-116(fp)
10002828:	d8800415 	stw	r2,16(sp)
1000282c:	e0bfe417 	ldw	r2,-112(fp)
10002830:	d8800515 	stw	r2,20(sp)
10002834:	e0bfe517 	ldw	r2,-108(fp)
10002838:	d8800615 	stw	r2,24(sp)
1000283c:	e0bfe617 	ldw	r2,-104(fp)
10002840:	d8800715 	stw	r2,28(sp)
10002844:	e0bfe717 	ldw	r2,-100(fp)
10002848:	d8800815 	stw	r2,32(sp)
1000284c:	e0bfe817 	ldw	r2,-96(fp)
10002850:	d8800915 	stw	r2,36(sp)
10002854:	e0bfe917 	ldw	r2,-92(fp)
10002858:	d8800a15 	stw	r2,40(sp)
1000285c:	e0bfea17 	ldw	r2,-88(fp)
10002860:	d8800b15 	stw	r2,44(sp)
10002864:	e0bfeb17 	ldw	r2,-84(fp)
10002868:	d8800c15 	stw	r2,48(sp)
1000286c:	e13fdb17 	ldw	r4,-148(fp)
10002870:	e17fdc17 	ldw	r5,-144(fp)
10002874:	e1bfdd17 	ldw	r6,-140(fp)
10002878:	e1ffde17 	ldw	r7,-136(fp)
1000287c:	000147c0 	call	1000147c <ConfigureAPmode>
10002880:	e0bfc415 	stw	r2,-240(fp)
	    if(retVal < 0)
10002884:	e0bfc417 	ldw	r2,-240(fp)
10002888:	1000050e 	bge	r2,zero,100028a0 <main+0x2f0>
	    {
	        printf(" Failed to set AP mode configuration, Error code: %ld\r\n",retVal);
1000288c:	010400b4 	movhi	r4,4098
10002890:	2113e604 	addi	r4,r4,20376
10002894:	e17fc417 	ldw	r5,-240(fp)
10002898:	000ca0c0 	call	1000ca0c <printf>
	        LOOP_FOREVER();
1000289c:	003fff06 	br	1000289c <__alt_data_end+0xf000289c>
	    }
	    printf("Configured CC3100 in AP mode, Restarting CC3100 in AP mode\n");
100028a0:	010400b4 	movhi	r4,4098
100028a4:	2113f404 	addi	r4,r4,20432
100028a8:	000cb000 	call	1000cb00 <puts>

	    /* Restart the CC3100 */
	    retVal = sl_Stop(SL_STOP_TIMEOUT);
100028ac:	01003fc4 	movi	r4,255
100028b0:	000380c0 	call	1000380c <sl_Stop>
100028b4:	10bfffcc 	andi	r2,r2,65535
100028b8:	10a0001c 	xori	r2,r2,32768
100028bc:	10a00004 	addi	r2,r2,-32768
100028c0:	e0bfc415 	stw	r2,-240(fp)
	    if(retVal < 0)
100028c4:	e0bfc417 	ldw	r2,-240(fp)
100028c8:	1000010e 	bge	r2,zero,100028d0 <main+0x320>
	        LOOP_FOREVER();
100028cc:	003fff06 	br	100028cc <__alt_data_end+0xf00028cc>

	    g_Status = 0;
100028d0:	d0279f05 	stb	zero,-24964(gp)

	    mode  = sl_Start(0, pConfig, 0);
100028d4:	0009883a 	mov	r4,zero
100028d8:	e17fc517 	ldw	r5,-236(fp)
100028dc:	000d883a 	mov	r6,zero
100028e0:	00032ec0 	call	100032ec <sl_Start>
100028e4:	10bfffcc 	andi	r2,r2,65535
100028e8:	10a0001c 	xori	r2,r2,32768
100028ec:	10a00004 	addi	r2,r2,-32768
100028f0:	e0bfcc15 	stw	r2,-208(fp)
	    if (ROLE_AP == mode)
100028f4:	e0bfcc17 	ldw	r2,-208(fp)
100028f8:	10800098 	cmpnei	r2,r2,2
100028fc:	1000061e 	bne	r2,zero,10002918 <main+0x368>
	    {
	        /* If the device is in AP mode, we need to wait for this event before doing anything */
	        while(!IS_IP_ACQUIRED(g_Status))
10002900:	0001883a 	nop
10002904:	d0a79f03 	ldbu	r2,-24964(gp)
10002908:	10803fcc 	andi	r2,r2,255
1000290c:	1080008c 	andi	r2,r2,2
10002910:	103ffc26 	beq	r2,zero,10002904 <__alt_data_end+0xf0002904>
10002914:	00000406 	br	10002928 <main+0x378>
	            ;
	    }
	    else
	    {
	        printf(" Device couldn't come-up in AP mode \r\n");
10002918:	010400b4 	movhi	r4,4098
1000291c:	21140304 	addi	r4,r4,20492
10002920:	000cb000 	call	1000cb00 <puts>
	        LOOP_FOREVER();
10002924:	003fff06 	br	10002924 <__alt_data_end+0xf0002924>
	    }

	    printf("Connect client to AP %s\n",User.SSID);
10002928:	e0bfdb04 	addi	r2,fp,-148
1000292c:	010400b4 	movhi	r4,4098
10002930:	21140d04 	addi	r4,r4,20532
10002934:	100b883a 	mov	r5,r2
10002938:	000ca0c0 	call	1000ca0c <printf>

	    while((!IS_IP_LEASED(g_Status)) || (!IS_STA_CONNECTED(g_Status))) { _SlNonOsMainLoopTask(); }
1000293c:	00000106 	br	10002944 <main+0x394>
10002940:	00094f00 	call	100094f0 <_SlNonOsMainLoopTask>
10002944:	d0a79f03 	ldbu	r2,-24964(gp)
10002948:	10803fcc 	andi	r2,r2,255
1000294c:	1080020c 	andi	r2,r2,8
10002950:	103ffb26 	beq	r2,zero,10002940 <__alt_data_end+0xf0002940>
10002954:	d0a79f03 	ldbu	r2,-24964(gp)
10002958:	10803fcc 	andi	r2,r2,255
1000295c:	1080040c 	andi	r2,r2,16
10002960:	103ff726 	beq	r2,zero,10002940 <__alt_data_end+0xf0002940>


	    printf("Client connected \n");
10002964:	010400b4 	movhi	r4,4098
10002968:	21141404 	addi	r4,r4,20560
1000296c:	000cb000 	call	1000cb00 <puts>

	    /* Enable the HTTP Authentication */
	    retVal = set_authentication_check(FALSE);
10002970:	0009883a 	mov	r4,zero
10002974:	0002ac00 	call	10002ac0 <set_authentication_check>
10002978:	e0bfc415 	stw	r2,-240(fp)
	    if(retVal < 0)
1000297c:	e0bfc417 	ldw	r2,-240(fp)
10002980:	1000010e 	bge	r2,zero,10002988 <main+0x3d8>
	        LOOP_FOREVER();
10002984:	003fff06 	br	10002984 <__alt_data_end+0xf0002984>
	    printf(g_auth_password);
	    printf((_u8 *)"\r\n Realm = ");
	    printf(g_auth_realm);
#endif
	    /* Get the domain name */
	     retVal = get_domain_name(g_domain_name);
10002988:	010400f4 	movhi	r4,4099
1000298c:	2124b584 	addi	r4,r4,-27946
10002990:	0002d1c0 	call	10002d1c <get_domain_name>
10002994:	e0bfc415 	stw	r2,-240(fp)
	     if(retVal < 0)
10002998:	e0bfc417 	ldw	r2,-240(fp)
1000299c:	1000010e 	bge	r2,zero,100029a4 <main+0x3f4>
	         LOOP_FOREVER();
100029a0:	003fff06 	br	100029a0 <__alt_data_end+0xf00029a0>

	     printf((_u8 *)"\r\n\r\n Domain name = ");
100029a4:	010400b4 	movhi	r4,4098
100029a8:	21141904 	addi	r4,r4,20580
100029ac:	000ca0c0 	call	1000ca0c <printf>
	     printf(g_domain_name);
100029b0:	010400f4 	movhi	r4,4099
100029b4:	2124b584 	addi	r4,r4,-27946
100029b8:	000ca0c0 	call	1000ca0c <printf>

	     /* Get URN */
	     retVal = get_device_urn(g_device_urn);
100029bc:	010400f4 	movhi	r4,4099
100029c0:	2124ac44 	addi	r4,r4,-27983
100029c4:	0002ca00 	call	10002ca0 <get_device_urn>
100029c8:	e0bfc415 	stw	r2,-240(fp)
	     if(retVal < 0)
100029cc:	e0bfc417 	ldw	r2,-240(fp)
100029d0:	1000010e 	bge	r2,zero,100029d8 <main+0x428>
	         LOOP_FOREVER();
100029d4:	003fff06 	br	100029d4 <__alt_data_end+0xf00029d4>

	     printf((_u8 *)"\r\n Device URN = ");
100029d8:	010400b4 	movhi	r4,4098
100029dc:	21141e04 	addi	r4,r4,20600
100029e0:	000ca0c0 	call	1000ca0c <printf>
	     printf(g_device_urn);
100029e4:	010400f4 	movhi	r4,4099
100029e8:	2124ac44 	addi	r4,r4,-27983
100029ec:	000ca0c0 	call	1000ca0c <printf>
	     printf((_u8 *)"\r\n");
100029f0:	010400b4 	movhi	r4,4098
100029f4:	21142304 	addi	r4,r4,20620
100029f8:	000cb000 	call	1000cb00 <puts>
	/********************************************
	 * Perform system processing.
	 ********************************************/
	while (1)
	{
		_SlNonOsMainLoopTask();
100029fc:	00094f00 	call	100094f0 <_SlNonOsMainLoopTask>

		data[0] = 0xAA;
		data[1] = 0x11;
		spiWrite(SPI_DEVICE_CC2650, data, 2);
#endif
	}
10002a00:	003ffe06 	br	100029fc <__alt_data_end+0xf00029fc>

10002a04 <set_port_number>:
    \note

    \warning
*/
_i32 set_port_number(_u16 num)
{
10002a04:	defffb04 	addi	sp,sp,-20
10002a08:	dfc00415 	stw	ra,16(sp)
10002a0c:	df000315 	stw	fp,12(sp)
10002a10:	df000304 	addi	fp,sp,12
10002a14:	2005883a 	mov	r2,r4
10002a18:	e0bfff0d 	sth	r2,-4(fp)
    _NetAppHttpServerGetSet_port_num_t port_num;
    _i32 status = -1;
10002a1c:	00bfffc4 	movi	r2,-1
10002a20:	e0bffd15 	stw	r2,-12(fp)

    port_num.port_number = num;
10002a24:	e0bfff0b 	ldhu	r2,-4(fp)
10002a28:	e0bffe0d 	sth	r2,-8(fp)

    /*Need to restart the server in order for the new port number configuration
     *to take place */
    status = sl_NetAppStop(SL_NET_APP_HTTP_SERVER_ID);
10002a2c:	01000044 	movi	r4,1
10002a30:	0007c540 	call	10007c54 <sl_NetAppStop>
10002a34:	10bfffcc 	andi	r2,r2,65535
10002a38:	10a0001c 	xori	r2,r2,32768
10002a3c:	10a00004 	addi	r2,r2,-32768
10002a40:	e0bffd15 	stw	r2,-12(fp)
    ASSERT_ON_ERROR(status);
10002a44:	e0bffd17 	ldw	r2,-12(fp)
10002a48:	1000020e 	bge	r2,zero,10002a54 <set_port_number+0x50>
10002a4c:	e0bffd17 	ldw	r2,-12(fp)
10002a50:	00001606 	br	10002aac <set_port_number+0xa8>

    status  = sl_NetAppSet (SL_NET_APP_HTTP_SERVER_ID, NETAPP_SET_GET_HTTP_OPT_PORT_NUMBER,
10002a54:	e0bffe04 	addi	r2,fp,-8
10002a58:	01000044 	movi	r4,1
10002a5c:	000b883a 	mov	r5,zero
10002a60:	01800084 	movi	r6,2
10002a64:	100f883a 	mov	r7,r2
10002a68:	0008d480 	call	10008d48 <sl_NetAppSet>
10002a6c:	e0bffd15 	stw	r2,-12(fp)
                  sizeof(_NetAppHttpServerGetSet_port_num_t), (_u8 *)&port_num);
    ASSERT_ON_ERROR(status);
10002a70:	e0bffd17 	ldw	r2,-12(fp)
10002a74:	1000020e 	bge	r2,zero,10002a80 <set_port_number+0x7c>
10002a78:	e0bffd17 	ldw	r2,-12(fp)
10002a7c:	00000b06 	br	10002aac <set_port_number+0xa8>

    status = sl_NetAppStart(SL_NET_APP_HTTP_SERVER_ID);
10002a80:	01000044 	movi	r4,1
10002a84:	0007bfc0 	call	10007bfc <sl_NetAppStart>
10002a88:	10bfffcc 	andi	r2,r2,65535
10002a8c:	10a0001c 	xori	r2,r2,32768
10002a90:	10a00004 	addi	r2,r2,-32768
10002a94:	e0bffd15 	stw	r2,-12(fp)
    ASSERT_ON_ERROR(status);
10002a98:	e0bffd17 	ldw	r2,-12(fp)
10002a9c:	1000020e 	bge	r2,zero,10002aa8 <set_port_number+0xa4>
10002aa0:	e0bffd17 	ldw	r2,-12(fp)
10002aa4:	00000106 	br	10002aac <set_port_number+0xa8>

    return SUCCESS;
10002aa8:	0005883a 	mov	r2,zero
}
10002aac:	e037883a 	mov	sp,fp
10002ab0:	dfc00117 	ldw	ra,4(sp)
10002ab4:	df000017 	ldw	fp,0(sp)
10002ab8:	dec00204 	addi	sp,sp,8
10002abc:	f800283a 	ret

10002ac0 <set_authentication_check>:
    \note

    \warning
*/
static _i32 set_authentication_check (_u8 enable)
{
10002ac0:	defffb04 	addi	sp,sp,-20
10002ac4:	dfc00415 	stw	ra,16(sp)
10002ac8:	df000315 	stw	fp,12(sp)
10002acc:	df000304 	addi	fp,sp,12
10002ad0:	2005883a 	mov	r2,r4
10002ad4:	e0bfff05 	stb	r2,-4(fp)
    _NetAppHttpServerGetSet_auth_enable_t auth_enable;
    _i32 status = -1;
10002ad8:	00bfffc4 	movi	r2,-1
10002adc:	e0bffd15 	stw	r2,-12(fp)

    auth_enable.auth_enable = enable;
10002ae0:	e0bfff03 	ldbu	r2,-4(fp)
10002ae4:	e0bffe05 	stb	r2,-8(fp)
    status = sl_NetAppSet(SL_NET_APP_HTTP_SERVER_ID, NETAPP_SET_GET_HTTP_OPT_AUTH_CHECK,
10002ae8:	e0bffe04 	addi	r2,fp,-8
10002aec:	01000044 	movi	r4,1
10002af0:	01400044 	movi	r5,1
10002af4:	01800044 	movi	r6,1
10002af8:	100f883a 	mov	r7,r2
10002afc:	0008d480 	call	10008d48 <sl_NetAppSet>
10002b00:	e0bffd15 	stw	r2,-12(fp)
                 sizeof(_NetAppHttpServerGetSet_auth_enable_t), (_u8 *)&auth_enable);
    ASSERT_ON_ERROR(status);
10002b04:	e0bffd17 	ldw	r2,-12(fp)
10002b08:	1000020e 	bge	r2,zero,10002b14 <set_authentication_check+0x54>
10002b0c:	e0bffd17 	ldw	r2,-12(fp)
10002b10:	00000106 	br	10002b18 <set_authentication_check+0x58>

    return SUCCESS;
10002b14:	0005883a 	mov	r2,zero
}
10002b18:	e037883a 	mov	sp,fp
10002b1c:	dfc00117 	ldw	ra,4(sp)
10002b20:	df000017 	ldw	fp,0(sp)
10002b24:	dec00204 	addi	sp,sp,8
10002b28:	f800283a 	ret

10002b2c <get_auth_name>:
    \note

    \warning
*/
static _i32 get_auth_name (_u8 *auth_name)
{
10002b2c:	defffb04 	addi	sp,sp,-20
10002b30:	dfc00415 	stw	ra,16(sp)
10002b34:	df000315 	stw	fp,12(sp)
10002b38:	df000304 	addi	fp,sp,12
10002b3c:	e13fff15 	stw	r4,-4(fp)
    _u8 len = MAX_AUTH_NAME_LEN;
10002b40:	00800504 	movi	r2,20
10002b44:	e0bffe05 	stb	r2,-8(fp)
    _i32 status = -1;
10002b48:	00bfffc4 	movi	r2,-1
10002b4c:	e0bffd15 	stw	r2,-12(fp)

    status = sl_NetAppGet(SL_NET_APP_HTTP_SERVER_ID, NETAPP_SET_GET_HTTP_OPT_AUTH_NAME,
10002b50:	e0bffe04 	addi	r2,fp,-8
10002b54:	01000044 	movi	r4,1
10002b58:	01400084 	movi	r5,2
10002b5c:	100d883a 	mov	r6,r2
10002b60:	e1ffff17 	ldw	r7,-4(fp)
10002b64:	0008ec40 	call	10008ec4 <sl_NetAppGet>
10002b68:	e0bffd15 	stw	r2,-12(fp)
                 &len, (_u8 *) auth_name);
    ASSERT_ON_ERROR(status);
10002b6c:	e0bffd17 	ldw	r2,-12(fp)
10002b70:	1000020e 	bge	r2,zero,10002b7c <get_auth_name+0x50>
10002b74:	e0bffd17 	ldw	r2,-12(fp)
10002b78:	00000606 	br	10002b94 <get_auth_name+0x68>

    auth_name[len] = '\0';
10002b7c:	e0bffe03 	ldbu	r2,-8(fp)
10002b80:	10803fcc 	andi	r2,r2,255
10002b84:	e0ffff17 	ldw	r3,-4(fp)
10002b88:	1885883a 	add	r2,r3,r2
10002b8c:	10000005 	stb	zero,0(r2)

    return SUCCESS;
10002b90:	0005883a 	mov	r2,zero
}
10002b94:	e037883a 	mov	sp,fp
10002b98:	dfc00117 	ldw	ra,4(sp)
10002b9c:	df000017 	ldw	fp,0(sp)
10002ba0:	dec00204 	addi	sp,sp,8
10002ba4:	f800283a 	ret

10002ba8 <get_auth_password>:
    \note

    \warning
*/
static _i32 get_auth_password (_u8 *auth_password)
{
10002ba8:	defffb04 	addi	sp,sp,-20
10002bac:	dfc00415 	stw	ra,16(sp)
10002bb0:	df000315 	stw	fp,12(sp)
10002bb4:	df000304 	addi	fp,sp,12
10002bb8:	e13fff15 	stw	r4,-4(fp)
    _u8 len = MAX_AUTH_PASSWORD_LEN;
10002bbc:	00800504 	movi	r2,20
10002bc0:	e0bffe05 	stb	r2,-8(fp)
    _i32 status = -1;
10002bc4:	00bfffc4 	movi	r2,-1
10002bc8:	e0bffd15 	stw	r2,-12(fp)

    status = sl_NetAppGet(SL_NET_APP_HTTP_SERVER_ID, NETAPP_SET_GET_HTTP_OPT_AUTH_PASSWORD,
10002bcc:	e0bffe04 	addi	r2,fp,-8
10002bd0:	01000044 	movi	r4,1
10002bd4:	014000c4 	movi	r5,3
10002bd8:	100d883a 	mov	r6,r2
10002bdc:	e1ffff17 	ldw	r7,-4(fp)
10002be0:	0008ec40 	call	10008ec4 <sl_NetAppGet>
10002be4:	e0bffd15 	stw	r2,-12(fp)
                                                &len, (_u8 *) auth_password);
    ASSERT_ON_ERROR(status);
10002be8:	e0bffd17 	ldw	r2,-12(fp)
10002bec:	1000020e 	bge	r2,zero,10002bf8 <get_auth_password+0x50>
10002bf0:	e0bffd17 	ldw	r2,-12(fp)
10002bf4:	00000606 	br	10002c10 <get_auth_password+0x68>

    auth_password[len] = '\0';
10002bf8:	e0bffe03 	ldbu	r2,-8(fp)
10002bfc:	10803fcc 	andi	r2,r2,255
10002c00:	e0ffff17 	ldw	r3,-4(fp)
10002c04:	1885883a 	add	r2,r3,r2
10002c08:	10000005 	stb	zero,0(r2)

    return SUCCESS;
10002c0c:	0005883a 	mov	r2,zero
}
10002c10:	e037883a 	mov	sp,fp
10002c14:	dfc00117 	ldw	ra,4(sp)
10002c18:	df000017 	ldw	fp,0(sp)
10002c1c:	dec00204 	addi	sp,sp,8
10002c20:	f800283a 	ret

10002c24 <get_auth_realm>:
    \note

    \warning
*/
static _i32 get_auth_realm (_u8 *auth_realm)
{
10002c24:	defffb04 	addi	sp,sp,-20
10002c28:	dfc00415 	stw	ra,16(sp)
10002c2c:	df000315 	stw	fp,12(sp)
10002c30:	df000304 	addi	fp,sp,12
10002c34:	e13fff15 	stw	r4,-4(fp)
    _u8 len = MAX_AUTH_REALM_LEN;
10002c38:	00800504 	movi	r2,20
10002c3c:	e0bffe05 	stb	r2,-8(fp)
    _i32 status = -1;
10002c40:	00bfffc4 	movi	r2,-1
10002c44:	e0bffd15 	stw	r2,-12(fp)

    status = sl_NetAppGet(SL_NET_APP_HTTP_SERVER_ID, NETAPP_SET_GET_HTTP_OPT_AUTH_REALM,
10002c48:	e0bffe04 	addi	r2,fp,-8
10002c4c:	01000044 	movi	r4,1
10002c50:	01400104 	movi	r5,4
10002c54:	100d883a 	mov	r6,r2
10002c58:	e1ffff17 	ldw	r7,-4(fp)
10002c5c:	0008ec40 	call	10008ec4 <sl_NetAppGet>
10002c60:	e0bffd15 	stw	r2,-12(fp)
                 &len, (_u8 *) auth_realm);
    ASSERT_ON_ERROR(status);
10002c64:	e0bffd17 	ldw	r2,-12(fp)
10002c68:	1000020e 	bge	r2,zero,10002c74 <get_auth_realm+0x50>
10002c6c:	e0bffd17 	ldw	r2,-12(fp)
10002c70:	00000606 	br	10002c8c <get_auth_realm+0x68>

    auth_realm[len] = '\0';
10002c74:	e0bffe03 	ldbu	r2,-8(fp)
10002c78:	10803fcc 	andi	r2,r2,255
10002c7c:	e0ffff17 	ldw	r3,-4(fp)
10002c80:	1885883a 	add	r2,r3,r2
10002c84:	10000005 	stb	zero,0(r2)

    return SUCCESS;
10002c88:	0005883a 	mov	r2,zero
}
10002c8c:	e037883a 	mov	sp,fp
10002c90:	dfc00117 	ldw	ra,4(sp)
10002c94:	df000017 	ldw	fp,0(sp)
10002c98:	dec00204 	addi	sp,sp,8
10002c9c:	f800283a 	ret

10002ca0 <get_device_urn>:
    \note

    \warning
*/
static _i32 get_device_urn (_u8 *device_urn)
{
10002ca0:	defffb04 	addi	sp,sp,-20
10002ca4:	dfc00415 	stw	ra,16(sp)
10002ca8:	df000315 	stw	fp,12(sp)
10002cac:	df000304 	addi	fp,sp,12
10002cb0:	e13fff15 	stw	r4,-4(fp)
    _u8 len = MAX_DEVICE_URN_LEN;
10002cb4:	00800404 	movi	r2,16
10002cb8:	e0bffe05 	stb	r2,-8(fp)
    _i32 status = -1;
10002cbc:	00bfffc4 	movi	r2,-1
10002cc0:	e0bffd15 	stw	r2,-12(fp)

    status = sl_NetAppGet(SL_NET_APP_DEVICE_CONFIG_ID, NETAPP_SET_GET_DEV_CONF_OPT_DEVICE_URN,
10002cc4:	e0bffe04 	addi	r2,fp,-8
10002cc8:	01000404 	movi	r4,16
10002ccc:	000b883a 	mov	r5,zero
10002cd0:	100d883a 	mov	r6,r2
10002cd4:	e1ffff17 	ldw	r7,-4(fp)
10002cd8:	0008ec40 	call	10008ec4 <sl_NetAppGet>
10002cdc:	e0bffd15 	stw	r2,-12(fp)
                 &len, (_u8 *) device_urn);
    ASSERT_ON_ERROR(status);
10002ce0:	e0bffd17 	ldw	r2,-12(fp)
10002ce4:	1000020e 	bge	r2,zero,10002cf0 <get_device_urn+0x50>
10002ce8:	e0bffd17 	ldw	r2,-12(fp)
10002cec:	00000606 	br	10002d08 <get_device_urn+0x68>

    device_urn[len] = '\0';
10002cf0:	e0bffe03 	ldbu	r2,-8(fp)
10002cf4:	10803fcc 	andi	r2,r2,255
10002cf8:	e0ffff17 	ldw	r3,-4(fp)
10002cfc:	1885883a 	add	r2,r3,r2
10002d00:	10000005 	stb	zero,0(r2)

    return SUCCESS;
10002d04:	0005883a 	mov	r2,zero
}
10002d08:	e037883a 	mov	sp,fp
10002d0c:	dfc00117 	ldw	ra,4(sp)
10002d10:	df000017 	ldw	fp,0(sp)
10002d14:	dec00204 	addi	sp,sp,8
10002d18:	f800283a 	ret

10002d1c <get_domain_name>:
    \note

    \warning        Domain name is used only in AP mode.
*/
static _i32 get_domain_name (_u8 *domain_name)
{
10002d1c:	defffb04 	addi	sp,sp,-20
10002d20:	dfc00415 	stw	ra,16(sp)
10002d24:	df000315 	stw	fp,12(sp)
10002d28:	df000304 	addi	fp,sp,12
10002d2c:	e13fff15 	stw	r4,-4(fp)
    _u8 len = MAX_DOMAIN_NAME_LEN;
10002d30:	00800644 	movi	r2,25
10002d34:	e0bffe05 	stb	r2,-8(fp)
    _i32 status = -1;
10002d38:	00bfffc4 	movi	r2,-1
10002d3c:	e0bffd15 	stw	r2,-12(fp)

    status = sl_NetAppGet(SL_NET_APP_DEVICE_CONFIG_ID, NETAPP_SET_GET_DEV_CONF_OPT_DOMAIN_NAME,
10002d40:	e0bffe04 	addi	r2,fp,-8
10002d44:	01000404 	movi	r4,16
10002d48:	01400044 	movi	r5,1
10002d4c:	100d883a 	mov	r6,r2
10002d50:	e1ffff17 	ldw	r7,-4(fp)
10002d54:	0008ec40 	call	10008ec4 <sl_NetAppGet>
10002d58:	e0bffd15 	stw	r2,-12(fp)
                 &len, (_u8 *)domain_name);
    ASSERT_ON_ERROR(status);
10002d5c:	e0bffd17 	ldw	r2,-12(fp)
10002d60:	1000020e 	bge	r2,zero,10002d6c <get_domain_name+0x50>
10002d64:	e0bffd17 	ldw	r2,-12(fp)
10002d68:	00000606 	br	10002d84 <get_domain_name+0x68>

    domain_name[len] = '\0';
10002d6c:	e0bffe03 	ldbu	r2,-8(fp)
10002d70:	10803fcc 	andi	r2,r2,255
10002d74:	e0ffff17 	ldw	r3,-4(fp)
10002d78:	1885883a 	add	r2,r3,r2
10002d7c:	10000005 	stb	zero,0(r2)

    return SUCCESS;
10002d80:	0005883a 	mov	r2,zero
}
10002d84:	e037883a 	mov	sp,fp
10002d88:	dfc00117 	ldw	ra,4(sp)
10002d8c:	df000017 	ldw	fp,0(sp)
10002d90:	dec00204 	addi	sp,sp,8
10002d94:	f800283a 	ret

10002d98 <slInterrupt>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void slInterrupt(void* context)
#else
static void slInterrupt(void* context, alt_u32 id)
#endif
{
10002d98:	defffb04 	addi	sp,sp,-20
10002d9c:	dfc00415 	stw	ra,16(sp)
10002da0:	df000315 	stw	fp,12(sp)
10002da4:	df000304 	addi	fp,sp,12
10002da8:	e13fff15 	stw	r4,-4(fp)
	//printf("Interrupt!\n");

	/********************************************
	 * Acknowledge the interrupt
	 ********************************************/
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CC2650_IRQ_PIO_BASE, 0xFF);
10002dac:	00c03fc4 	movi	r3,255
10002db0:	00880034 	movhi	r2,8192
10002db4:	10850b04 	addi	r2,r2,5164
10002db8:	10c00035 	stwio	r3,0(r2)
		humidity = 0x5577;

	}
#endif

	switch (count)
10002dbc:	d0a7a217 	ldw	r2,-24952(gp)
10002dc0:	10c002a8 	cmpgeui	r3,r2,10
10002dc4:	1800601e 	bne	r3,zero,10002f48 <slInterrupt+0x1b0>
10002dc8:	100690ba 	slli	r3,r2,2
10002dcc:	00840034 	movhi	r2,4096
10002dd0:	108b7804 	addi	r2,r2,11744
10002dd4:	1885883a 	add	r2,r3,r2
10002dd8:	10800017 	ldw	r2,0(r2)
10002ddc:	1000683a 	jmp	r2
10002de0:	10002e08 	cmpgei	zero,r2,184
10002de4:	10002e2c 	andhi	zero,r2,184
10002de8:	10002e48 	cmpgei	zero,r2,185
10002dec:	10002e6c 	andhi	zero,r2,185
10002df0:	10002e88 	cmpgei	zero,r2,186
10002df4:	10002eac 	andhi	zero,r2,186
10002df8:	10002ec8 	cmpgei	zero,r2,187
10002dfc:	10002eec 	andhi	zero,r2,187
10002e00:	10002f08 	cmpgei	zero,r2,188
10002e04:	10002f2c 	andhi	zero,r2,188
	{
		case 0:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, (temperature >> 8) & 0xff);
10002e08:	d0a7a30b 	ldhu	r2,-24948(gp)
10002e0c:	10bfffcc 	andi	r2,r2,65535
10002e10:	1004d23a 	srli	r2,r2,8
10002e14:	10bfffcc 	andi	r2,r2,65535
10002e18:	10c03fcc 	andi	r3,r2,255
10002e1c:	00880034 	movhi	r2,8192
10002e20:	10848904 	addi	r2,r2,4644
10002e24:	10c00035 	stwio	r3,0(r2)
			break;
10002e28:	00004806 	br	10002f4c <slInterrupt+0x1b4>
		case 1:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, temperature & 0xff);
10002e2c:	d0a7a30b 	ldhu	r2,-24948(gp)
10002e30:	10bfffcc 	andi	r2,r2,65535
10002e34:	10c03fcc 	andi	r3,r2,255
10002e38:	00880034 	movhi	r2,8192
10002e3c:	10848904 	addi	r2,r2,4644
10002e40:	10c00035 	stwio	r3,0(r2)
			break;
10002e44:	00004106 	br	10002f4c <slInterrupt+0x1b4>

		case 2:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, (humidity >> 8) & 0xff);
10002e48:	d0a7a38b 	ldhu	r2,-24946(gp)
10002e4c:	10bfffcc 	andi	r2,r2,65535
10002e50:	1004d23a 	srli	r2,r2,8
10002e54:	10bfffcc 	andi	r2,r2,65535
10002e58:	10c03fcc 	andi	r3,r2,255
10002e5c:	00880034 	movhi	r2,8192
10002e60:	10848904 	addi	r2,r2,4644
10002e64:	10c00035 	stwio	r3,0(r2)
			break;
10002e68:	00003806 	br	10002f4c <slInterrupt+0x1b4>
		case 3:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, humidity & 0xff);
10002e6c:	d0a7a38b 	ldhu	r2,-24946(gp)
10002e70:	10bfffcc 	andi	r2,r2,65535
10002e74:	10c03fcc 	andi	r3,r2,255
10002e78:	00880034 	movhi	r2,8192
10002e7c:	10848904 	addi	r2,r2,4644
10002e80:	10c00035 	stwio	r3,0(r2)
			break;
10002e84:	00003106 	br	10002f4c <slInterrupt+0x1b4>

		case 4:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, (x_axis >> 8) & 0xff);
10002e88:	d0a7a40b 	ldhu	r2,-24944(gp)
10002e8c:	10bfffcc 	andi	r2,r2,65535
10002e90:	1004d23a 	srli	r2,r2,8
10002e94:	10bfffcc 	andi	r2,r2,65535
10002e98:	10c03fcc 	andi	r3,r2,255
10002e9c:	00880034 	movhi	r2,8192
10002ea0:	10848904 	addi	r2,r2,4644
10002ea4:	10c00035 	stwio	r3,0(r2)
			break;
10002ea8:	00002806 	br	10002f4c <slInterrupt+0x1b4>
		case 5:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, x_axis & 0xff);
10002eac:	d0a7a40b 	ldhu	r2,-24944(gp)
10002eb0:	10bfffcc 	andi	r2,r2,65535
10002eb4:	10c03fcc 	andi	r3,r2,255
10002eb8:	00880034 	movhi	r2,8192
10002ebc:	10848904 	addi	r2,r2,4644
10002ec0:	10c00035 	stwio	r3,0(r2)
			break;
10002ec4:	00002106 	br	10002f4c <slInterrupt+0x1b4>

		case 6:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, (y_axis >> 8) & 0xff);
10002ec8:	d0a7a48b 	ldhu	r2,-24942(gp)
10002ecc:	10bfffcc 	andi	r2,r2,65535
10002ed0:	1004d23a 	srli	r2,r2,8
10002ed4:	10bfffcc 	andi	r2,r2,65535
10002ed8:	10c03fcc 	andi	r3,r2,255
10002edc:	00880034 	movhi	r2,8192
10002ee0:	10848904 	addi	r2,r2,4644
10002ee4:	10c00035 	stwio	r3,0(r2)
			break;
10002ee8:	00001806 	br	10002f4c <slInterrupt+0x1b4>
		case 7:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, y_axis & 0xff);
10002eec:	d0a7a48b 	ldhu	r2,-24942(gp)
10002ef0:	10bfffcc 	andi	r2,r2,65535
10002ef4:	10c03fcc 	andi	r3,r2,255
10002ef8:	00880034 	movhi	r2,8192
10002efc:	10848904 	addi	r2,r2,4644
10002f00:	10c00035 	stwio	r3,0(r2)
			break;
10002f04:	00001106 	br	10002f4c <slInterrupt+0x1b4>

		case 8:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, (z_axis >> 8) & 0xff);
10002f08:	d0a7a50b 	ldhu	r2,-24940(gp)
10002f0c:	10bfffcc 	andi	r2,r2,65535
10002f10:	1004d23a 	srli	r2,r2,8
10002f14:	10bfffcc 	andi	r2,r2,65535
10002f18:	10c03fcc 	andi	r3,r2,255
10002f1c:	00880034 	movhi	r2,8192
10002f20:	10848904 	addi	r2,r2,4644
10002f24:	10c00035 	stwio	r3,0(r2)
			break;
10002f28:	00000806 	br	10002f4c <slInterrupt+0x1b4>
		case 9:
			IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, z_axis & 0xff);
10002f2c:	d0a7a50b 	ldhu	r2,-24940(gp)
10002f30:	10bfffcc 	andi	r2,r2,65535
10002f34:	10c03fcc 	andi	r3,r2,255
10002f38:	00880034 	movhi	r2,8192
10002f3c:	10848904 	addi	r2,r2,4644
10002f40:	10c00035 	stwio	r3,0(r2)
			break;
10002f44:	00000106 	br	10002f4c <slInterrupt+0x1b4>

		default:
			//hdc1000Read(&temperature, &humidity);
			//IOWR_ALTERA_AVALON_SPI_TXDATA(CC2650_SPI_BASE, temperature);
			break;
10002f48:	0001883a 	nop
	}

	macData[count] = IORD_ALTERA_AVALON_SPI_RXDATA(CC2650_SPI_BASE);
10002f4c:	d0e7a217 	ldw	r3,-24952(gp)
10002f50:	00880034 	movhi	r2,8192
10002f54:	10848804 	addi	r2,r2,4640
10002f58:	11000037 	ldwio	r4,0(r2)
10002f5c:	008400f4 	movhi	r2,4099
10002f60:	10a49304 	addi	r2,r2,-28084
10002f64:	18c7883a 	add	r3,r3,r3
10002f68:	18c7883a 	add	r3,r3,r3
10002f6c:	10c5883a 	add	r2,r2,r3
10002f70:	11000015 	stw	r4,0(r2)
	//printf(" %x: %x\n", count, macData[count]);

	if (count < 9)
10002f74:	d0a7a217 	ldw	r2,-24952(gp)
10002f78:	10800248 	cmpgei	r2,r2,9
10002f7c:	1000041e 	bne	r2,zero,10002f90 <slInterrupt+0x1f8>
	{
		count++;
10002f80:	d0a7a217 	ldw	r2,-24952(gp)
10002f84:	10800044 	addi	r2,r2,1
10002f88:	d0a7a215 	stw	r2,-24952(gp)
10002f8c:	00004006 	br	10003090 <slInterrupt+0x2f8>
	else
	{
		// replaced the lis332arRead() to detect which DECA_REV is running
		// was:   lis332arRead(&x_axis, &y_axis, &z_axis);

		if(IORD_ALTERA_AVALON_PIO_DATA(DECA_REV_PIO_BASE) == DECA_REVB)
10002f90:	0005883a 	mov	r2,zero
10002f94:	10800037 	ldwio	r2,0(r2)
10002f98:	10800058 	cmpnei	r2,r2,1
10002f9c:	1000051e 	bne	r2,zero,10002fb4 <slInterrupt+0x21c>
			lis332arRead(&x_axis, &y_axis, &z_axis); // REV_B
10002fa0:	d127a404 	addi	r4,gp,-24944
10002fa4:	d167a484 	addi	r5,gp,-24942
10002fa8:	d1a7a504 	addi	r6,gp,-24940
10002fac:	00006100 	call	10000610 <lis332arRead>
10002fb0:	00000506 	br	10002fc8 <slInterrupt+0x230>
		else
		{
			initLIS2DH12();
10002fb4:	00003ec0 	call	100003ec <initLIS2DH12>
			lis2dh12Read(&x_axis, &y_axis, &z_axis); // REV_C
10002fb8:	d127a404 	addi	r4,gp,-24944
10002fbc:	d167a484 	addi	r5,gp,-24942
10002fc0:	d1a7a504 	addi	r6,gp,-24940
10002fc4:	000049c0 	call	1000049c <lis2dh12Read>
		}



		hdc1000Read(&temperature, &humidity);
10002fc8:	d127a304 	addi	r4,gp,-24948
10002fcc:	d167a384 	addi	r5,gp,-24946
10002fd0:	000031c0 	call	1000031c <hdc1000Read>
		y_axis = 0x3344;
		z_axis = 0x5566;
		temperature = 0x7788;
		humidity = 0x99aa;
#endif
		upperMac = (macData[7] << 24) | (macData[6] << 16) | (macData[5] << 8) | (macData[4]);
10002fd4:	008400f4 	movhi	r2,4099
10002fd8:	10a49304 	addi	r2,r2,-28084
10002fdc:	10800717 	ldw	r2,28(r2)
10002fe0:	1006963a 	slli	r3,r2,24
10002fe4:	008400f4 	movhi	r2,4099
10002fe8:	10a49304 	addi	r2,r2,-28084
10002fec:	10800617 	ldw	r2,24(r2)
10002ff0:	1004943a 	slli	r2,r2,16
10002ff4:	1886b03a 	or	r3,r3,r2
10002ff8:	008400f4 	movhi	r2,4099
10002ffc:	10a49304 	addi	r2,r2,-28084
10003000:	10800517 	ldw	r2,20(r2)
10003004:	1004923a 	slli	r2,r2,8
10003008:	1886b03a 	or	r3,r3,r2
1000300c:	008400f4 	movhi	r2,4099
10003010:	10a49304 	addi	r2,r2,-28084
10003014:	10800417 	ldw	r2,16(r2)
10003018:	1884b03a 	or	r2,r3,r2
1000301c:	e0bffd15 	stw	r2,-12(fp)
		lowerMac = (macData[3] << 24) | (macData[2] << 16) | (macData[1] << 8) | (macData[0]);
10003020:	008400f4 	movhi	r2,4099
10003024:	10a49304 	addi	r2,r2,-28084
10003028:	10800317 	ldw	r2,12(r2)
1000302c:	1006963a 	slli	r3,r2,24
10003030:	008400f4 	movhi	r2,4099
10003034:	10a49304 	addi	r2,r2,-28084
10003038:	10800217 	ldw	r2,8(r2)
1000303c:	1004943a 	slli	r2,r2,16
10003040:	1886b03a 	or	r3,r3,r2
10003044:	008400f4 	movhi	r2,4099
10003048:	10a49304 	addi	r2,r2,-28084
1000304c:	10800117 	ldw	r2,4(r2)
10003050:	1004923a 	slli	r2,r2,8
10003054:	1886b03a 	or	r3,r3,r2
10003058:	008400f4 	movhi	r2,4099
1000305c:	10a49304 	addi	r2,r2,-28084
10003060:	10800017 	ldw	r2,0(r2)
10003064:	1884b03a 	or	r2,r3,r2
10003068:	e0bffe15 	stw	r2,-8(fp)

	    //printf(" %x: %x\n", upperMac, lowerMac);
		IOWR(CC2650_SSID_HIGH_BASE, 0,upperMac);
1000306c:	e0fffd17 	ldw	r3,-12(fp)
10003070:	00880034 	movhi	r2,8192
10003074:	10849804 	addi	r2,r2,4704
10003078:	10c00035 	stwio	r3,0(r2)
		IOWR(CC2650_SSID_LOW_BASE, 0,lowerMac);
1000307c:	e0fffe17 	ldw	r3,-8(fp)
10003080:	00880034 	movhi	r2,8192
10003084:	1084a004 	addi	r2,r2,4736
10003088:	10c00035 	stwio	r3,0(r2)

		//printf(" %x: %x\n", temperature, humidity);
		//printf(" %x: %x: %x\n", x_axis, y_axis, z_axis);
		count = 0;
1000308c:	d027a215 	stw	zero,-24952(gp)
	//usleep(2);

	//IOWR(CC2650_CTRL_PIO_BASE, 0, pioData);
	//count++;
	//printf(" %x\n", count);
}
10003090:	e037883a 	mov	sp,fp
10003094:	dfc00117 	ldw	ra,4(sp)
10003098:	df000017 	ldw	fp,0(sp)
1000309c:	dec00204 	addi	sp,sp,8
100030a0:	f800283a 	ret

100030a4 <timerInterrupt>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void timerInterrupt (void *unusedArg)
#else
static void timerInterrupt(void* unusedArg, alt_u32 id)
#endif
{
100030a4:	defffe04 	addi	sp,sp,-8
100030a8:	df000115 	stw	fp,4(sp)
100030ac:	df000104 	addi	fp,sp,4
100030b0:	e13fff15 	stw	r4,-4(fp)
	/********************************************
	 * Acknowledge the interrupt
	 ********************************************/
	//IOWR_ALTERA_AVALON_TIMER_STATUS (TIMER_0_BASE, 0);

}
100030b4:	e037883a 	mov	sp,fp
100030b8:	df000017 	ldw	fp,0(sp)
100030bc:	dec00104 	addi	sp,sp,4
100030c0:	f800283a 	ret

100030c4 <slInterrupt>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void slInterrupt(void* context)
#else
static void slInterrupt(void* context, alt_u32 id)
#endif
{
100030c4:	defffd04 	addi	sp,sp,-12
100030c8:	dfc00215 	stw	ra,8(sp)
100030cc:	df000115 	stw	fp,4(sp)
100030d0:	df000104 	addi	fp,sp,4
100030d4:	e13fff15 	stw	r4,-4(fp)
	static int count = 0;

	if (pIrqEventHandler)
100030d8:	d0a7a617 	ldw	r2,-24936(gp)
100030dc:	10000326 	beq	r2,zero,100030ec <slInterrupt+0x28>
	{
		pIrqEventHandler(0);
100030e0:	d0a7a617 	ldw	r2,-24936(gp)
100030e4:	0009883a 	mov	r4,zero
100030e8:	103ee83a 	callr	r2
	}

	count++;
100030ec:	d0a7a717 	ldw	r2,-24932(gp)
100030f0:	10800044 	addi	r2,r2,1
100030f4:	d0a7a715 	stw	r2,-24932(gp)
	printf(" %x\n", count);
100030f8:	d0a7a717 	ldw	r2,-24932(gp)
100030fc:	010400b4 	movhi	r4,4098
10003100:	21142404 	addi	r4,r4,20624
10003104:	100b883a 	mov	r5,r2
10003108:	000ca0c0 	call	1000ca0c <printf>

	/********************************************
	 * Acknowledge the interrupt
	 ********************************************/
	//IOWR(CC3100_IRQ_PIO_BASE, 0, 0xFF);
	IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CC3100_IRQ_PIO_BASE, 0xFF);
1000310c:	00c03fc4 	movi	r3,255
10003110:	00880034 	movhi	r2,8192
10003114:	10851704 	addi	r2,r2,5212
10003118:	10c00035 	stwio	r3,0(r2)

	/********************************************
	 * Allow some time
	 ********************************************/
	//IORD_ALTERA_AVALON_PIO_EDGE_CAP(CC3100_IRQ_PIO_BASE);
}
1000311c:	e037883a 	mov	sp,fp
10003120:	dfc00117 	ldw	ra,4(sp)
10003124:	df000017 	ldw	fp,0(sp)
10003128:	dec00204 	addi	sp,sp,8
1000312c:	f800283a 	ret

10003130 <registerInterruptHandler>:

int registerInterruptHandler(SL_P_EVENT_HANDLER InterruptHdl , void* pValue)
{
10003130:	defffb04 	addi	sp,sp,-20
10003134:	dfc00415 	stw	ra,16(sp)
10003138:	df000315 	stw	fp,12(sp)
1000313c:	df000304 	addi	fp,sp,12
10003140:	e13ffe15 	stw	r4,-8(fp)
10003144:	e17fff15 	stw	r5,-4(fp)
    pIrqEventHandler = InterruptHdl;
10003148:	e0bffe17 	ldw	r2,-8(fp)
1000314c:	d0a7a615 	stw	r2,-24936(gp)

    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CC3100_IRQ_PIO_BASE, 0xff);
10003150:	00c03fc4 	movi	r3,255
10003154:	00880034 	movhi	r2,8192
10003158:	10851704 	addi	r2,r2,5212
1000315c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(CC3100_IRQ_PIO_BASE,  0xFF);
10003160:	00c03fc4 	movi	r3,255
10003164:	00880034 	movhi	r2,8192
10003168:	10851604 	addi	r2,r2,5208
1000316c:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(CC3100_IRQ_PIO_BASE, 0xff);
10003170:	00c03fc4 	movi	r3,255
10003174:	00880034 	movhi	r2,8192
10003178:	10851704 	addi	r2,r2,5212
1000317c:	10c00035 	stwio	r3,0(r2)

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register (CC3100_IRQ_PIO_IRQ_INTERRUPT_CONTROLLER_ID,
10003180:	d8000015 	stw	zero,0(sp)
10003184:	0009883a 	mov	r4,zero
10003188:	01400144 	movi	r5,5
1000318c:	01840034 	movhi	r6,4096
10003190:	318c3104 	addi	r6,r6,12484
10003194:	01c80034 	movhi	r7,8192
10003198:	39c51404 	addi	r7,r7,5200
1000319c:	002145c0 	call	1002145c <alt_ic_isr_register>
#else
	alt_irq_register (TIMER_0_IRQ, TIMER_0_BASE, timerInterrupt);
#endif
#endif

    return 0;
100031a0:	0005883a 	mov	r2,zero
}
100031a4:	e037883a 	mov	sp,fp
100031a8:	dfc00117 	ldw	ra,4(sp)
100031ac:	df000017 	ldw	fp,0(sp)
100031b0:	dec00204 	addi	sp,sp,8
100031b4:	f800283a 	ret

100031b8 <CC3100_disable>:

void CC3100_disable()
{
100031b8:	deffff04 	addi	sp,sp,-4
100031bc:	df000015 	stw	fp,0(sp)
100031c0:	d839883a 	mov	fp,sp

	IOWR(CC3100_CTRL_PIO_BASE, 0, 0);
100031c4:	0007883a 	mov	r3,zero
100031c8:	00880034 	movhi	r2,8192
100031cc:	1084d804 	addi	r2,r2,4960
100031d0:	10c00035 	stwio	r3,0(r2)
}
100031d4:	e037883a 	mov	sp,fp
100031d8:	df000017 	ldw	fp,0(sp)
100031dc:	dec00104 	addi	sp,sp,4
100031e0:	f800283a 	ret

100031e4 <CC3100_enable>:

void CC3100_enable()
{
100031e4:	deffff04 	addi	sp,sp,-4
100031e8:	df000015 	stw	fp,0(sp)
100031ec:	d839883a 	mov	fp,sp
	IOWR(CC3100_CTRL_PIO_BASE, 0, 1);
100031f0:	00c00044 	movi	r3,1
100031f4:	00880034 	movhi	r2,8192
100031f8:	1084d804 	addi	r2,r2,4960
100031fc:	10c00035 	stwio	r3,0(r2)
	//pioData = IORD(TEST_PIO_BASE, 0);

	//usleep(2);
	//usleep(2);
	//pioData = 0;
}
10003200:	e037883a 	mov	sp,fp
10003204:	df000017 	ldw	fp,0(sp)
10003208:	dec00104 	addi	sp,sp,4
1000320c:	f800283a 	ret

10003210 <_sl_GetStartResponseConvert>:
/*****************************************************************************/
/* Internal functions                                                        */
/*****************************************************************************/

_i16 _sl_GetStartResponseConvert(_u32 Status)
{
10003210:	defffe04 	addi	sp,sp,-8
10003214:	df000115 	stw	fp,4(sp)
10003218:	df000104 	addi	fp,sp,4
1000321c:	e13fff15 	stw	r4,-4(fp)
    switch(Status)
10003220:	e0bfff17 	ldw	r2,-4(fp)
10003224:	00ccccf4 	movhi	r3,13107
10003228:	18ccccc4 	addi	r3,r3,13107
1000322c:	10c01826 	beq	r2,r3,10003290 <_sl_GetStartResponseConvert+0x80>
10003230:	00ccccf4 	movhi	r3,13107
10003234:	18ccccc4 	addi	r3,r3,13107
10003238:	18800736 	bltu	r3,r2,10003258 <_sl_GetStartResponseConvert+0x48>
1000323c:	00c44474 	movhi	r3,4369
10003240:	18c44444 	addi	r3,r3,4369
10003244:	10c00e26 	beq	r2,r3,10003280 <_sl_GetStartResponseConvert+0x70>
10003248:	00c888b4 	movhi	r3,8738
1000324c:	18c88884 	addi	r3,r3,8738
10003250:	10c00d26 	beq	r2,r3,10003288 <_sl_GetStartResponseConvert+0x78>
10003254:	00001606 	br	100032b0 <_sl_GetStartResponseConvert+0xa0>
10003258:	00d55574 	movhi	r3,21845
1000325c:	18d55544 	addi	r3,r3,21845
10003260:	10c00f26 	beq	r2,r3,100032a0 <_sl_GetStartResponseConvert+0x90>
10003264:	00d999b4 	movhi	r3,26214
10003268:	18d99984 	addi	r3,r3,26214
1000326c:	10c00e26 	beq	r2,r3,100032a8 <_sl_GetStartResponseConvert+0x98>
10003270:	00d11134 	movhi	r3,17476
10003274:	18d11104 	addi	r3,r3,17476
10003278:	10c00726 	beq	r2,r3,10003298 <_sl_GetStartResponseConvert+0x88>
1000327c:	00000c06 	br	100032b0 <_sl_GetStartResponseConvert+0xa0>
    {
    case INIT_STA_OK:
        return ROLE_STA;
10003280:	0005883a 	mov	r2,zero
10003284:	00000b06 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    case INIT_STA_ERR:
        return ROLE_STA_ERR;
10003288:	00bfffc4 	movi	r2,-1
1000328c:	00000906 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    case INIT_AP_OK:
        return ROLE_AP;
10003290:	00800084 	movi	r2,2
10003294:	00000706 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    case INIT_AP_ERR:
        return ROLE_AP_ERR;
10003298:	00bfff84 	movi	r2,-2
1000329c:	00000506 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    case INIT_P2P_OK:
        return ROLE_P2P;
100032a0:	008000c4 	movi	r2,3
100032a4:	00000306 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    case INIT_P2P_ERR:
        return ROLE_P2P_ERR;
100032a8:	00bfff44 	movi	r2,-3
100032ac:	00000106 	br	100032b4 <_sl_GetStartResponseConvert+0xa4>
    default:
        return (_i16)Status;
100032b0:	e0bfff17 	ldw	r2,-4(fp)
    }
}
100032b4:	e037883a 	mov	sp,fp
100032b8:	df000017 	ldw	fp,0(sp)
100032bc:	dec00104 	addi	sp,sp,4
100032c0:	f800283a 	ret

100032c4 <sl_Task>:
/*****************************************************************************/
/* sl_Task                                                                   */
/*****************************************************************************/
#if _SL_INCLUDE_FUNC(sl_Task)
void sl_Task(void)
{
100032c4:	defffe04 	addi	sp,sp,-8
100032c8:	dfc00115 	stw	ra,4(sp)
100032cc:	df000015 	stw	fp,0(sp)
100032d0:	d839883a 	mov	fp,sp
#ifdef _SlTaskEntry
    _SlTaskEntry();
100032d4:	00094f00 	call	100094f0 <_SlNonOsMainLoopTask>
#endif
}
100032d8:	e037883a 	mov	sp,fp
100032dc:	dfc00117 	ldw	ra,4(sp)
100032e0:	df000017 	ldw	fp,0(sp)
100032e4:	dec00204 	addi	sp,sp,8
100032e8:	f800283a 	ret

100032ec <sl_Start>:
/*****************************************************************************/
/* sl_Start                                                                  */
/*****************************************************************************/
#if _SL_INCLUDE_FUNC(sl_Start)
_i16 sl_Start(const void* pIfHdl, _i8*  pDevName, const P_INIT_CALLBACK pInitCallBack)
{
100032ec:	defff704 	addi	sp,sp,-36
100032f0:	dfc00815 	stw	ra,32(sp)
100032f4:	df000715 	stw	fp,28(sp)
100032f8:	dc000615 	stw	r16,24(sp)
100032fc:	df000704 	addi	fp,sp,28
10003300:	e13ffc15 	stw	r4,-16(fp)
10003304:	e17ffd15 	stw	r5,-12(fp)
10003308:	e1bffe15 	stw	r6,-8(fp)
    _i16 ObjIdx = MAX_CONCURRENT_ACTIONS;
1000330c:	00800284 	movi	r2,10
10003310:	e0bff90d 	sth	r2,-28(fp)

    /* Perform any preprocessing before enable networking services */
    sl_DeviceEnablePreamble();

    /* ControlBlock init */
    _SlDrvDriverCBInit();
10003314:	0003d8c0 	call	10003d8c <_SlDrvDriverCBInit>

    /* open the interface: usually SPI or UART */
    if (NULL == pIfHdl)
10003318:	e0bffc17 	ldw	r2,-16(fp)
1000331c:	1000081e 	bne	r2,zero,10003340 <sl_Start+0x54>
    {
        g_pCB->FD = sl_IfOpen((void *)pDevName, 0);
10003320:	008400f4 	movhi	r2,4099
10003324:	10a48204 	addi	r2,r2,-28152
10003328:	14000017 	ldw	r16,0(r2)
1000332c:	e13ffd17 	ldw	r4,-12(fp)
10003330:	000b883a 	mov	r5,zero
10003334:	000c4880 	call	1000c488 <spiSL_Open>
10003338:	80800015 	stw	r2,0(r16)
1000333c:	00000506 	br	10003354 <sl_Start+0x68>
    }
    else
    {
        g_pCB->FD = (_SlFd_t)pIfHdl;
10003340:	008400f4 	movhi	r2,4099
10003344:	10a48204 	addi	r2,r2,-28152
10003348:	10800017 	ldw	r2,0(r2)
1000334c:	e0fffc17 	ldw	r3,-16(fp)
10003350:	10c00015 	stw	r3,0(r2)
    }
    /* Use Obj to issue the command, if not available try later */
    ObjIdx = _SlDrvWaitForPoolObj(START_STOP_ID,SL_MAX_SOCKETS);
10003354:	01000384 	movi	r4,14
10003358:	01400204 	movi	r5,8
1000335c:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
10003360:	e0bff90d 	sth	r2,-28(fp)
    if (MAX_CONCURRENT_ACTIONS == ObjIdx)
10003364:	e0bff90f 	ldh	r2,-28(fp)
10003368:	10800298 	cmpnei	r2,r2,10
1000336c:	1000021e 	bne	r2,zero,10003378 <sl_Start+0x8c>
    {
        return SL_POOL_IS_EMPTY;
10003370:	00be0c04 	movi	r2,-2000
10003374:	00005d06 	br	100034ec <sl_Start+0x200>
    }
    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10003378:	008400f4 	movhi	r2,4099
1000337c:	10a48204 	addi	r2,r2,-28152
10003380:	10800017 	ldw	r2,0(r2)
10003384:	10802404 	addi	r2,r2,144
10003388:	1009883a 	mov	r4,r2
1000338c:	01400cc4 	movi	r5,51
10003390:	01801104 	movi	r6,68
10003394:	01c03fc4 	movi	r7,255
10003398:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000339c:	10803fcc 	andi	r2,r2,255
100033a0:	1080201c 	xori	r2,r2,128
100033a4:	10bfe004 	addi	r2,r2,-128
100033a8:	e0bff98d 	sth	r2,-26(fp)
100033ac:	e0bff98f 	ldh	r2,-26(fp)
100033b0:	10000126 	beq	r2,zero,100033b8 <sl_Start+0xcc>
100033b4:	003fff06 	br	100033b4 <__alt_data_end+0xf00033b4>
    g_pCB->ObjPool[ObjIdx].pRespArgs = (_u8 *)&AsyncRsp;
100033b8:	008400f4 	movhi	r2,4099
100033bc:	10a48204 	addi	r2,r2,-28152
100033c0:	10c00017 	ldw	r3,0(r2)
100033c4:	e0bff90f 	ldh	r2,-28(fp)
100033c8:	10800324 	muli	r2,r2,12
100033cc:	1885883a 	add	r2,r3,r2
100033d0:	10800504 	addi	r2,r2,20
100033d4:	e0fffb04 	addi	r3,fp,-20
100033d8:	10c00015 	stw	r3,0(r2)
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100033dc:	008400f4 	movhi	r2,4099
100033e0:	10a48204 	addi	r2,r2,-28152
100033e4:	10800017 	ldw	r2,0(r2)
100033e8:	10802404 	addi	r2,r2,144
100033ec:	1009883a 	mov	r4,r2
100033f0:	01400cc4 	movi	r5,51
100033f4:	000938c0 	call	1000938c <_SlNonOsSemSet>
100033f8:	10803fcc 	andi	r2,r2,255
100033fc:	1080201c 	xori	r2,r2,128
10003400:	10bfe004 	addi	r2,r2,-128
10003404:	e0bffa0d 	sth	r2,-24(fp)
10003408:	e0bffa0f 	ldh	r2,-24(fp)
1000340c:	10000126 	beq	r2,zero,10003414 <sl_Start+0x128>
10003410:	003fff06 	br	10003410 <__alt_data_end+0xf0003410>

    if( g_pCB->FD >= 0)
10003414:	008400f4 	movhi	r2,4099
10003418:	10a48204 	addi	r2,r2,-28152
1000341c:	10800017 	ldw	r2,0(r2)
10003420:	10800017 	ldw	r2,0(r2)
10003424:	10002d16 	blt	r2,zero,100034dc <sl_Start+0x1f0>
    {
        sl_DeviceDisable();
10003428:	00031b80 	call	100031b8 <CC3100_disable>

        sl_IfRegIntHdlr((SL_P_EVENT_HANDLER)_SlDrvRxIrqHandler, NULL);
1000342c:	01040034 	movhi	r4,4096
10003430:	21100e04 	addi	r4,r4,16440
10003434:	000b883a 	mov	r5,zero
10003438:	00031300 	call	10003130 <registerInterruptHandler>

        if(NULL != pInitCallBack)
1000343c:	e0bffe17 	ldw	r2,-8(fp)
10003440:	10000526 	beq	r2,zero,10003458 <sl_Start+0x16c>
        {
            g_pCB->pInitCallback = pInitCallBack;
10003444:	008400f4 	movhi	r2,4099
10003448:	10a48204 	addi	r2,r2,-28152
1000344c:	10800017 	ldw	r2,0(r2)
10003450:	e0fffe17 	ldw	r3,-8(fp)
10003454:	10c00315 	stw	r3,12(r2)
        }
        sl_DeviceEnable();
10003458:	00031e40 	call	100031e4 <CC3100_enable>

        if (NULL == pInitCallBack)
1000345c:	e0bffe17 	ldw	r2,-8(fp)
10003460:	10001e1e 	bne	r2,zero,100034dc <sl_Start+0x1f0>
        {
            OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
10003464:	008400f4 	movhi	r2,4099
10003468:	10a48204 	addi	r2,r2,-28152
1000346c:	10c00017 	ldw	r3,0(r2)
10003470:	e0bff90f 	ldh	r2,-28(fp)
10003474:	10800324 	muli	r2,r2,12
10003478:	10800404 	addi	r2,r2,16
1000347c:	1885883a 	add	r2,r3,r2
10003480:	1009883a 	mov	r4,r2
10003484:	01400884 	movi	r5,34
10003488:	01800444 	movi	r6,17
1000348c:	01c03fc4 	movi	r7,255
10003490:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10003494:	10803fcc 	andi	r2,r2,255
10003498:	1080201c 	xori	r2,r2,128
1000349c:	10bfe004 	addi	r2,r2,-128
100034a0:	e0bffa8d 	sth	r2,-22(fp)
100034a4:	e0bffa8f 	ldh	r2,-22(fp)
100034a8:	10000126 	beq	r2,zero,100034b0 <sl_Start+0x1c4>
100034ac:	003fff06 	br	100034ac <__alt_data_end+0xf00034ac>
            /*release Pool Object*/
            _SlDrvReleasePoolObj(g_pCB->FunctionParams.AsyncExt.ActionIndex);
100034b0:	008400f4 	movhi	r2,4099
100034b4:	10a48204 	addi	r2,r2,-28152
100034b8:	10800017 	ldw	r2,0(r2)
100034bc:	10802b03 	ldbu	r2,172(r2)
100034c0:	10803fcc 	andi	r2,r2,255
100034c4:	1009883a 	mov	r4,r2
100034c8:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
            return _sl_GetStartResponseConvert(AsyncRsp.Status);
100034cc:	e0bffb17 	ldw	r2,-20(fp)
100034d0:	1009883a 	mov	r4,r2
100034d4:	00032100 	call	10003210 <_sl_GetStartResponseConvert>
100034d8:	00000406 	br	100034ec <sl_Start+0x200>
        }
    }

    return (_i16)g_pCB->FD;
100034dc:	008400f4 	movhi	r2,4099
100034e0:	10a48204 	addi	r2,r2,-28152
100034e4:	10800017 	ldw	r2,0(r2)
100034e8:	10800017 	ldw	r2,0(r2)

}
100034ec:	e6ffff04 	addi	sp,fp,-4
100034f0:	dfc00217 	ldw	ra,8(sp)
100034f4:	df000117 	ldw	fp,4(sp)
100034f8:	dc000017 	ldw	r16,0(sp)
100034fc:	dec00304 	addi	sp,sp,12
10003500:	f800283a 	ret

10003504 <_sl_HandleAsync_InitComplete>:
/***************************************************************************
_sl_HandleAsync_InitComplete - handles init complete signalling to 
a waiting object
****************************************************************************/
void _sl_HandleAsync_InitComplete(void *pVoidBuf)
{
10003504:	defff904 	addi	sp,sp,-28
10003508:	dfc00615 	stw	ra,24(sp)
1000350c:	df000515 	stw	fp,20(sp)
10003510:	dc000415 	stw	r16,16(sp)
10003514:	df000504 	addi	fp,sp,20
10003518:	e13ffe15 	stw	r4,-8(fp)
    InitComplete_t     *pMsgArgs   = (InitComplete_t *)_SL_RESP_ARGS_START(pVoidBuf);
1000351c:	e0bffe17 	ldw	r2,-8(fp)
10003520:	10800204 	addi	r2,r2,8
10003524:	e0bffb15 	stw	r2,-20(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10003528:	008400f4 	movhi	r2,4099
1000352c:	10a48204 	addi	r2,r2,-28152
10003530:	10800017 	ldw	r2,0(r2)
10003534:	10802404 	addi	r2,r2,144
10003538:	1009883a 	mov	r4,r2
1000353c:	01400cc4 	movi	r5,51
10003540:	01801104 	movi	r6,68
10003544:	01c03fc4 	movi	r7,255
10003548:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000354c:	10803fcc 	andi	r2,r2,255
10003550:	1080201c 	xori	r2,r2,128
10003554:	10bfe004 	addi	r2,r2,-128
10003558:	e0bffc0d 	sth	r2,-16(fp)
1000355c:	e0bffc0f 	ldh	r2,-16(fp)
10003560:	10000126 	beq	r2,zero,10003568 <_sl_HandleAsync_InitComplete+0x64>
10003564:	003fff06 	br	10003564 <__alt_data_end+0xf0003564>

    if(g_pCB->pInitCallback)
10003568:	008400f4 	movhi	r2,4099
1000356c:	10a48204 	addi	r2,r2,-28152
10003570:	10800017 	ldw	r2,0(r2)
10003574:	10800317 	ldw	r2,12(r2)
10003578:	10000e26 	beq	r2,zero,100035b4 <_sl_HandleAsync_InitComplete+0xb0>
    {
        g_pCB->pInitCallback(_sl_GetStartResponseConvert(pMsgArgs->Status));
1000357c:	008400f4 	movhi	r2,4099
10003580:	10a48204 	addi	r2,r2,-28152
10003584:	10800017 	ldw	r2,0(r2)
10003588:	14000317 	ldw	r16,12(r2)
1000358c:	e0bffb17 	ldw	r2,-20(fp)
10003590:	10800017 	ldw	r2,0(r2)
10003594:	1009883a 	mov	r4,r2
10003598:	00032100 	call	10003210 <_sl_GetStartResponseConvert>
1000359c:	10bfffcc 	andi	r2,r2,65535
100035a0:	10a0001c 	xori	r2,r2,32768
100035a4:	10a00004 	addi	r2,r2,-32768
100035a8:	1009883a 	mov	r4,r2
100035ac:	803ee83a 	callr	r16
100035b0:	00002506 	br	10003648 <_sl_HandleAsync_InitComplete+0x144>
    }
    else
    {
        sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(InitComplete_t));
100035b4:	008400f4 	movhi	r2,4099
100035b8:	10a48204 	addi	r2,r2,-28152
100035bc:	10c00017 	ldw	r3,0(r2)
100035c0:	008400f4 	movhi	r2,4099
100035c4:	10a48204 	addi	r2,r2,-28152
100035c8:	10800017 	ldw	r2,0(r2)
100035cc:	10802b03 	ldbu	r2,172(r2)
100035d0:	10803fcc 	andi	r2,r2,255
100035d4:	10800324 	muli	r2,r2,12
100035d8:	1885883a 	add	r2,r3,r2
100035dc:	10800504 	addi	r2,r2,20
100035e0:	10800017 	ldw	r2,0(r2)
100035e4:	1009883a 	mov	r4,r2
100035e8:	e17ffb17 	ldw	r5,-20(fp)
100035ec:	01800104 	movi	r6,4
100035f0:	000c7840 	call	1000c784 <memcpy>
        OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
100035f4:	008400f4 	movhi	r2,4099
100035f8:	10a48204 	addi	r2,r2,-28152
100035fc:	10c00017 	ldw	r3,0(r2)
10003600:	008400f4 	movhi	r2,4099
10003604:	10a48204 	addi	r2,r2,-28152
10003608:	10800017 	ldw	r2,0(r2)
1000360c:	10802b03 	ldbu	r2,172(r2)
10003610:	10803fcc 	andi	r2,r2,255
10003614:	10800324 	muli	r2,r2,12
10003618:	10800404 	addi	r2,r2,16
1000361c:	1885883a 	add	r2,r3,r2
10003620:	1009883a 	mov	r4,r2
10003624:	01400884 	movi	r5,34
10003628:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000362c:	10803fcc 	andi	r2,r2,255
10003630:	1080201c 	xori	r2,r2,128
10003634:	10bfe004 	addi	r2,r2,-128
10003638:	e0bffc8d 	sth	r2,-14(fp)
1000363c:	e0bffc8f 	ldh	r2,-14(fp)
10003640:	10000126 	beq	r2,zero,10003648 <_sl_HandleAsync_InitComplete+0x144>
10003644:	003fff06 	br	10003644 <__alt_data_end+0xf0003644>
    }
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10003648:	008400f4 	movhi	r2,4099
1000364c:	10a48204 	addi	r2,r2,-28152
10003650:	10800017 	ldw	r2,0(r2)
10003654:	10802404 	addi	r2,r2,144
10003658:	1009883a 	mov	r4,r2
1000365c:	01400cc4 	movi	r5,51
10003660:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003664:	10803fcc 	andi	r2,r2,255
10003668:	1080201c 	xori	r2,r2,128
1000366c:	10bfe004 	addi	r2,r2,-128
10003670:	e0bffd0d 	sth	r2,-12(fp)
10003674:	e0bffd0f 	ldh	r2,-12(fp)
10003678:	10000126 	beq	r2,zero,10003680 <_sl_HandleAsync_InitComplete+0x17c>
1000367c:	003fff06 	br	1000367c <__alt_data_end+0xf000367c>

    if(g_pCB->pInitCallback)
10003680:	008400f4 	movhi	r2,4099
10003684:	10a48204 	addi	r2,r2,-28152
10003688:	10800017 	ldw	r2,0(r2)
1000368c:	10800317 	ldw	r2,12(r2)
10003690:	10000726 	beq	r2,zero,100036b0 <_sl_HandleAsync_InitComplete+0x1ac>
    {
        _SlDrvReleasePoolObj(g_pCB->FunctionParams.AsyncExt.ActionIndex);
10003694:	008400f4 	movhi	r2,4099
10003698:	10a48204 	addi	r2,r2,-28152
1000369c:	10800017 	ldw	r2,0(r2)
100036a0:	10802b03 	ldbu	r2,172(r2)
100036a4:	10803fcc 	andi	r2,r2,255
100036a8:	1009883a 	mov	r4,r2
100036ac:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    }

}
100036b0:	e6ffff04 	addi	sp,fp,-4
100036b4:	dfc00217 	ldw	ra,8(sp)
100036b8:	df000117 	ldw	fp,4(sp)
100036bc:	dc000017 	ldw	r16,0(sp)
100036c0:	dec00304 	addi	sp,sp,12
100036c4:	f800283a 	ret

100036c8 <_sl_HandleAsync_Stop>:
/***************************************************************************
_sl_HandleAsync_Stop - handles stop signalling to 
a waiting object
****************************************************************************/
void _sl_HandleAsync_Stop(void *pVoidBuf)
{
100036c8:	defffa04 	addi	sp,sp,-24
100036cc:	dfc00515 	stw	ra,20(sp)
100036d0:	df000415 	stw	fp,16(sp)
100036d4:	df000404 	addi	fp,sp,16
100036d8:	e13fff15 	stw	r4,-4(fp)
    _BasicResponse_t     *pMsgArgs   = (_BasicResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
100036dc:	e0bfff17 	ldw	r2,-4(fp)
100036e0:	10800204 	addi	r2,r2,8
100036e4:	e0bffc15 	stw	r2,-16(fp)

    VERIFY_SOCKET_CB(NULL != g_pCB->StopCB.pAsyncRsp);

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
100036e8:	008400f4 	movhi	r2,4099
100036ec:	10a48204 	addi	r2,r2,-28152
100036f0:	10800017 	ldw	r2,0(r2)
100036f4:	10802404 	addi	r2,r2,144
100036f8:	1009883a 	mov	r4,r2
100036fc:	01400cc4 	movi	r5,51
10003700:	01801104 	movi	r6,68
10003704:	01c03fc4 	movi	r7,255
10003708:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000370c:	10803fcc 	andi	r2,r2,255
10003710:	1080201c 	xori	r2,r2,128
10003714:	10bfe004 	addi	r2,r2,-128
10003718:	e0bffd0d 	sth	r2,-12(fp)
1000371c:	e0bffd0f 	ldh	r2,-12(fp)
10003720:	10000126 	beq	r2,zero,10003728 <_sl_HandleAsync_Stop+0x60>
10003724:	003fff06 	br	10003724 <__alt_data_end+0xf0003724>

    sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(_BasicResponse_t));
10003728:	008400f4 	movhi	r2,4099
1000372c:	10a48204 	addi	r2,r2,-28152
10003730:	10c00017 	ldw	r3,0(r2)
10003734:	008400f4 	movhi	r2,4099
10003738:	10a48204 	addi	r2,r2,-28152
1000373c:	10800017 	ldw	r2,0(r2)
10003740:	10802b03 	ldbu	r2,172(r2)
10003744:	10803fcc 	andi	r2,r2,255
10003748:	10800324 	muli	r2,r2,12
1000374c:	1885883a 	add	r2,r3,r2
10003750:	10800504 	addi	r2,r2,20
10003754:	10800017 	ldw	r2,0(r2)
10003758:	1009883a 	mov	r4,r2
1000375c:	e17ffc17 	ldw	r5,-16(fp)
10003760:	01800104 	movi	r6,4
10003764:	000c7840 	call	1000c784 <memcpy>
    OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
10003768:	008400f4 	movhi	r2,4099
1000376c:	10a48204 	addi	r2,r2,-28152
10003770:	10c00017 	ldw	r3,0(r2)
10003774:	008400f4 	movhi	r2,4099
10003778:	10a48204 	addi	r2,r2,-28152
1000377c:	10800017 	ldw	r2,0(r2)
10003780:	10802b03 	ldbu	r2,172(r2)
10003784:	10803fcc 	andi	r2,r2,255
10003788:	10800324 	muli	r2,r2,12
1000378c:	10800404 	addi	r2,r2,16
10003790:	1885883a 	add	r2,r3,r2
10003794:	1009883a 	mov	r4,r2
10003798:	01400884 	movi	r5,34
1000379c:	000938c0 	call	1000938c <_SlNonOsSemSet>
100037a0:	10803fcc 	andi	r2,r2,255
100037a4:	1080201c 	xori	r2,r2,128
100037a8:	10bfe004 	addi	r2,r2,-128
100037ac:	e0bffd8d 	sth	r2,-10(fp)
100037b0:	e0bffd8f 	ldh	r2,-10(fp)
100037b4:	10000126 	beq	r2,zero,100037bc <_sl_HandleAsync_Stop+0xf4>
100037b8:	003fff06 	br	100037b8 <__alt_data_end+0xf00037b8>
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100037bc:	008400f4 	movhi	r2,4099
100037c0:	10a48204 	addi	r2,r2,-28152
100037c4:	10800017 	ldw	r2,0(r2)
100037c8:	10802404 	addi	r2,r2,144
100037cc:	1009883a 	mov	r4,r2
100037d0:	01400cc4 	movi	r5,51
100037d4:	000938c0 	call	1000938c <_SlNonOsSemSet>
100037d8:	10803fcc 	andi	r2,r2,255
100037dc:	1080201c 	xori	r2,r2,128
100037e0:	10bfe004 	addi	r2,r2,-128
100037e4:	e0bffe0d 	sth	r2,-8(fp)
100037e8:	e0bffe0f 	ldh	r2,-8(fp)
100037ec:	10000126 	beq	r2,zero,100037f4 <_sl_HandleAsync_Stop+0x12c>
100037f0:	003fff06 	br	100037f0 <__alt_data_end+0xf00037f0>
    return;
100037f4:	0001883a 	nop
}
100037f8:	e037883a 	mov	sp,fp
100037fc:	dfc00117 	ldw	ra,4(sp)
10003800:	df000017 	ldw	fp,0(sp)
10003804:	dec00204 	addi	sp,sp,8
10003808:	f800283a 	ret

1000380c <sl_Stop>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_Stop)
_i16 sl_Stop(_u16 timeout)
{
1000380c:	defff804 	addi	sp,sp,-32
10003810:	dfc00715 	stw	ra,28(sp)
10003814:	df000615 	stw	fp,24(sp)
10003818:	df000604 	addi	fp,sp,24
1000381c:	2005883a 	mov	r2,r4
10003820:	e0bfff0d 	sth	r2,-4(fp)
    _i16 RetVal=0;
10003824:	e03ffa0d 	sth	zero,-24(fp)
    _SlStopMsg_u      Msg;
    _BasicResponse_t  AsyncRsp;
    _i16 ObjIdx = MAX_CONCURRENT_ACTIONS;
10003828:	00800284 	movi	r2,10
1000382c:	e0bffa8d 	sth	r2,-22(fp)
    /* if timeout is 0 the shutdown is forced immediately */
    if( 0 == timeout ) 
10003830:	e0bfff0b 	ldhu	r2,-4(fp)
10003834:	10000c1e 	bne	r2,zero,10003868 <sl_Stop+0x5c>
    {
        sl_IfRegIntHdlr(NULL, NULL);
10003838:	0009883a 	mov	r4,zero
1000383c:	000b883a 	mov	r5,zero
10003840:	00031300 	call	10003130 <registerInterruptHandler>
        sl_DeviceDisable();
10003844:	00031b80 	call	100031b8 <CC3100_disable>
        RetVal = sl_IfClose(g_pCB->FD);
10003848:	008400f4 	movhi	r2,4099
1000384c:	10a48204 	addi	r2,r2,-28152
10003850:	10800017 	ldw	r2,0(r2)
10003854:	10800017 	ldw	r2,0(r2)
10003858:	1009883a 	mov	r4,r2
1000385c:	000c4b00 	call	1000c4b0 <spiSL_Close>
10003860:	e0bffa0d 	sth	r2,-24(fp)
10003864:	00006506 	br	100039fc <sl_Stop+0x1f0>

    }
    else
    {
        /* let the device make the shutdown using the defined timeout */
        Msg.Cmd.Timeout = timeout;
10003868:	e0bfff0b 	ldhu	r2,-4(fp)
1000386c:	e0bffd0d 	sth	r2,-12(fp)
        /* Use Obj to issue the command, if not available try later */
        ObjIdx = _SlDrvWaitForPoolObj(START_STOP_ID,SL_MAX_SOCKETS);
10003870:	01000384 	movi	r4,14
10003874:	01400204 	movi	r5,8
10003878:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
1000387c:	e0bffa8d 	sth	r2,-22(fp)
        if (MAX_CONCURRENT_ACTIONS == ObjIdx)
10003880:	e0bffa8f 	ldh	r2,-22(fp)
10003884:	10800298 	cmpnei	r2,r2,10
10003888:	1000021e 	bne	r2,zero,10003894 <sl_Stop+0x88>
        {
            return SL_POOL_IS_EMPTY;
1000388c:	00be0c04 	movi	r2,-2000
10003890:	00005c06 	br	10003a04 <sl_Stop+0x1f8>
        }
        OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10003894:	008400f4 	movhi	r2,4099
10003898:	10a48204 	addi	r2,r2,-28152
1000389c:	10800017 	ldw	r2,0(r2)
100038a0:	10802404 	addi	r2,r2,144
100038a4:	1009883a 	mov	r4,r2
100038a8:	01400cc4 	movi	r5,51
100038ac:	01801104 	movi	r6,68
100038b0:	01c03fc4 	movi	r7,255
100038b4:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100038b8:	10803fcc 	andi	r2,r2,255
100038bc:	1080201c 	xori	r2,r2,128
100038c0:	10bfe004 	addi	r2,r2,-128
100038c4:	e0bffb0d 	sth	r2,-20(fp)
100038c8:	e0bffb0f 	ldh	r2,-20(fp)
100038cc:	10000126 	beq	r2,zero,100038d4 <sl_Stop+0xc8>
100038d0:	003fff06 	br	100038d0 <__alt_data_end+0xf00038d0>

        g_pCB->ObjPool[ObjIdx].pRespArgs = (_u8 *)&AsyncRsp;
100038d4:	008400f4 	movhi	r2,4099
100038d8:	10a48204 	addi	r2,r2,-28152
100038dc:	10c00017 	ldw	r3,0(r2)
100038e0:	e0bffa8f 	ldh	r2,-22(fp)
100038e4:	10800324 	muli	r2,r2,12
100038e8:	1885883a 	add	r2,r3,r2
100038ec:	10800504 	addi	r2,r2,20
100038f0:	e0fffe04 	addi	r3,fp,-8
100038f4:	10c00015 	stw	r3,0(r2)

        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100038f8:	008400f4 	movhi	r2,4099
100038fc:	10a48204 	addi	r2,r2,-28152
10003900:	10800017 	ldw	r2,0(r2)
10003904:	10802404 	addi	r2,r2,144
10003908:	1009883a 	mov	r4,r2
1000390c:	01400cc4 	movi	r5,51
10003910:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003914:	10803fcc 	andi	r2,r2,255
10003918:	1080201c 	xori	r2,r2,128
1000391c:	10bfe004 	addi	r2,r2,-128
10003920:	e0bffb8d 	sth	r2,-18(fp)
10003924:	e0bffb8f 	ldh	r2,-18(fp)
10003928:	10000126 	beq	r2,zero,10003930 <sl_Stop+0x124>
1000392c:	003fff06 	br	1000392c <__alt_data_end+0xf000392c>

        VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlStopCmdCtrl, &Msg, NULL));
10003930:	e0bffd04 	addi	r2,fp,-12
10003934:	d1200404 	addi	r4,gp,-32752
10003938:	100b883a 	mov	r5,r2
1000393c:	000d883a 	mov	r6,zero
10003940:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10003944:	e0bffc0d 	sth	r2,-16(fp)
10003948:	e0bffc0f 	ldh	r2,-16(fp)
1000394c:	10000126 	beq	r2,zero,10003954 <sl_Stop+0x148>
10003950:	003fff06 	br	10003950 <__alt_data_end+0xf0003950>

        if(SL_OS_RET_CODE_OK == (_i16)Msg.Rsp.status)
10003954:	e0bffd0b 	ldhu	r2,-12(fp)
10003958:	10bfffcc 	andi	r2,r2,65535
1000395c:	10a0001c 	xori	r2,r2,32768
10003960:	10a00004 	addi	r2,r2,-32768
10003964:	1000171e 	bne	r2,zero,100039c4 <sl_Stop+0x1b8>
        {
            OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
10003968:	008400f4 	movhi	r2,4099
1000396c:	10a48204 	addi	r2,r2,-28152
10003970:	10c00017 	ldw	r3,0(r2)
10003974:	e0bffa8f 	ldh	r2,-22(fp)
10003978:	10800324 	muli	r2,r2,12
1000397c:	10800404 	addi	r2,r2,16
10003980:	1885883a 	add	r2,r3,r2
10003984:	1009883a 	mov	r4,r2
10003988:	01400884 	movi	r5,34
1000398c:	01800444 	movi	r6,17
10003990:	01c03fc4 	movi	r7,255
10003994:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10003998:	10803fcc 	andi	r2,r2,255
1000399c:	1080201c 	xori	r2,r2,128
100039a0:	10bfe004 	addi	r2,r2,-128
100039a4:	e0bffc8d 	sth	r2,-14(fp)
100039a8:	e0bffc8f 	ldh	r2,-14(fp)
100039ac:	10000126 	beq	r2,zero,100039b4 <sl_Stop+0x1a8>
100039b0:	003fff06 	br	100039b0 <__alt_data_end+0xf00039b0>
            Msg.Rsp.status = AsyncRsp.status;
100039b4:	e0bffe0b 	ldhu	r2,-8(fp)
100039b8:	e0bffd0d 	sth	r2,-12(fp)
            RetVal = Msg.Rsp.status;
100039bc:	e0bffd0b 	ldhu	r2,-12(fp)
100039c0:	e0bffa0d 	sth	r2,-24(fp)
        }

        _SlDrvReleasePoolObj((_u8)ObjIdx);
100039c4:	e0bffa8b 	ldhu	r2,-22(fp)
100039c8:	10803fcc 	andi	r2,r2,255
100039cc:	1009883a 	mov	r4,r2
100039d0:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>

        sl_IfRegIntHdlr(NULL, NULL);
100039d4:	0009883a 	mov	r4,zero
100039d8:	000b883a 	mov	r5,zero
100039dc:	00031300 	call	10003130 <registerInterruptHandler>
        sl_DeviceDisable();
100039e0:	00031b80 	call	100031b8 <CC3100_disable>
        sl_IfClose(g_pCB->FD);
100039e4:	008400f4 	movhi	r2,4099
100039e8:	10a48204 	addi	r2,r2,-28152
100039ec:	10800017 	ldw	r2,0(r2)
100039f0:	10800017 	ldw	r2,0(r2)
100039f4:	1009883a 	mov	r4,r2
100039f8:	000c4b00 	call	1000c4b0 <spiSL_Close>
    }
    _SlDrvDriverCBDeinit();
100039fc:	0003f180 	call	10003f18 <_SlDrvDriverCBDeinit>

    return RetVal;
10003a00:	e0bffa0b 	ldhu	r2,-24(fp)
}
10003a04:	e037883a 	mov	sp,fp
10003a08:	dfc00117 	ldw	ra,4(sp)
10003a0c:	df000017 	ldw	fp,0(sp)
10003a10:	dec00204 	addi	sp,sp,8
10003a14:	f800283a 	ret

10003a18 <sl_EventMaskSet>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_EventMaskSet)
_i16 sl_EventMaskSet(_u8 EventClass , _u32 Mask)
{
10003a18:	defff904 	addi	sp,sp,-28
10003a1c:	dfc00615 	stw	ra,24(sp)
10003a20:	df000515 	stw	fp,20(sp)
10003a24:	df000504 	addi	fp,sp,20
10003a28:	2005883a 	mov	r2,r4
10003a2c:	e17fff15 	stw	r5,-4(fp)
10003a30:	e0bffe05 	stb	r2,-8(fp)
    _SlEventMaskSetMsg_u Msg;

    Msg.Cmd.group = EventClass;
10003a34:	e0bffe03 	ldbu	r2,-8(fp)
10003a38:	e0bffc15 	stw	r2,-16(fp)
    Msg.Cmd.mask = Mask;
10003a3c:	e0bfff17 	ldw	r2,-4(fp)
10003a40:	e0bffd15 	stw	r2,-12(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlEventMaskSetCmdCtrl, &Msg, NULL));
10003a44:	e0bffc04 	addi	r2,fp,-16
10003a48:	d1200504 	addi	r4,gp,-32748
10003a4c:	100b883a 	mov	r5,r2
10003a50:	000d883a 	mov	r6,zero
10003a54:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10003a58:	e0bffb0d 	sth	r2,-20(fp)
10003a5c:	e0bffb0f 	ldh	r2,-20(fp)
10003a60:	10000126 	beq	r2,zero,10003a68 <sl_EventMaskSet+0x50>
10003a64:	003fff06 	br	10003a64 <__alt_data_end+0xf0003a64>

    return (_i16)Msg.Rsp.status;
10003a68:	e0bffc0b 	ldhu	r2,-16(fp)
}
10003a6c:	e037883a 	mov	sp,fp
10003a70:	dfc00117 	ldw	ra,4(sp)
10003a74:	df000017 	ldw	fp,0(sp)
10003a78:	dec00204 	addi	sp,sp,8
10003a7c:	f800283a 	ret

10003a80 <sl_EventMaskGet>:
    sizeof(_DevMaskEventGetResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_EventMaskGet)
_i16 sl_EventMaskGet(_u8 EventClass, _u32 *pMask)
{
10003a80:	defff904 	addi	sp,sp,-28
10003a84:	dfc00615 	stw	ra,24(sp)
10003a88:	df000515 	stw	fp,20(sp)
10003a8c:	df000504 	addi	fp,sp,20
10003a90:	2005883a 	mov	r2,r4
10003a94:	e17fff15 	stw	r5,-4(fp)
10003a98:	e0bffe05 	stb	r2,-8(fp)
    _SlEventMaskGetMsg_u Msg;

    Msg.Cmd.group = EventClass;
10003a9c:	e0bffe03 	ldbu	r2,-8(fp)
10003aa0:	e0bffc15 	stw	r2,-16(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlEventMaskGetCmdCtrl, &Msg, NULL));
10003aa4:	e0bffc04 	addi	r2,fp,-16
10003aa8:	d1200604 	addi	r4,gp,-32744
10003aac:	100b883a 	mov	r5,r2
10003ab0:	000d883a 	mov	r6,zero
10003ab4:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10003ab8:	e0bffb0d 	sth	r2,-20(fp)
10003abc:	e0bffb0f 	ldh	r2,-20(fp)
10003ac0:	10000126 	beq	r2,zero,10003ac8 <sl_EventMaskGet+0x48>
10003ac4:	003fff06 	br	10003ac4 <__alt_data_end+0xf0003ac4>

    *pMask = Msg.Rsp.mask;
10003ac8:	e0fffd17 	ldw	r3,-12(fp)
10003acc:	e0bfff17 	ldw	r2,-4(fp)
10003ad0:	10c00015 	stw	r3,0(r2)
    return SL_RET_CODE_OK;
10003ad4:	0005883a 	mov	r2,zero
}
10003ad8:	e037883a 	mov	sp,fp
10003adc:	dfc00117 	ldw	ra,4(sp)
10003ae0:	df000017 	ldw	fp,0(sp)
10003ae4:	dec00204 	addi	sp,sp,8
10003ae8:	f800283a 	ret

10003aec <sl_DevGet>:
    sizeof(_DeviceSetGet_t)
};

#if _SL_INCLUDE_FUNC(sl_DevGet)
_i32 sl_DevGet(_u8 DeviceGetId, _u8 *pOption,_u8 *pConfigLen, _u8 *pValues)
{
10003aec:	defff304 	addi	sp,sp,-52
10003af0:	dfc00c15 	stw	ra,48(sp)
10003af4:	df000b15 	stw	fp,44(sp)
10003af8:	df000b04 	addi	fp,sp,44
10003afc:	2005883a 	mov	r2,r4
10003b00:	e17ffd15 	stw	r5,-12(fp)
10003b04:	e1bffe15 	stw	r6,-8(fp)
10003b08:	e1ffff15 	stw	r7,-4(fp)
10003b0c:	e0bffc05 	stb	r2,-16(fp)
    _SlDeviceMsgGet_u         Msg;
    _SlCmdExt_t               CmdExt;

    if (*pConfigLen == 0)
10003b10:	e0bffe17 	ldw	r2,-8(fp)
10003b14:	10800003 	ldbu	r2,0(r2)
10003b18:	10803fcc 	andi	r2,r2,255
10003b1c:	1000021e 	bne	r2,zero,10003b28 <sl_DevGet+0x3c>
    {
        return SL_EZEROLEN;
10003b20:	00be0b84 	movi	r2,-2002
10003b24:	00003606 	br	10003c00 <sl_DevGet+0x114>
    }

    if( pOption )
10003b28:	e0bffd17 	ldw	r2,-12(fp)
10003b2c:	10003326 	beq	r2,zero,10003bfc <sl_DevGet+0x110>
    {
        CmdExt.TxPayloadLen = 0;
10003b30:	e03ff80d 	sth	zero,-32(fp)
        CmdExt.RxPayloadLen = *pConfigLen;
10003b34:	e0bffe17 	ldw	r2,-8(fp)
10003b38:	10800003 	ldbu	r2,0(r2)
10003b3c:	10803fcc 	andi	r2,r2,255
10003b40:	e0bff88d 	sth	r2,-30(fp)
        CmdExt.pTxPayload = NULL;
10003b44:	e03ffa15 	stw	zero,-24(fp)
        CmdExt.pRxPayload = (_u8 *)pValues;
10003b48:	e0bfff17 	ldw	r2,-4(fp)
10003b4c:	e0bffb15 	stw	r2,-20(fp)
        CmdExt.ActualRxPayloadLen = 0;
10003b50:	e03ff90d 	sth	zero,-28(fp)

        Msg.Cmd.DeviceSetId = DeviceGetId;
10003b54:	e0bffc03 	ldbu	r2,-16(fp)
10003b58:	e0bff60d 	sth	r2,-40(fp)

        Msg.Cmd.Option   = (_u16)*pOption;
10003b5c:	e0bffd17 	ldw	r2,-12(fp)
10003b60:	10800003 	ldbu	r2,0(r2)
10003b64:	10803fcc 	andi	r2,r2,255
10003b68:	e0bff68d 	sth	r2,-38(fp)

        VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlDeviceGetCmdCtrl, &Msg, &CmdExt));
10003b6c:	e0fff584 	addi	r3,fp,-42
10003b70:	e0bff804 	addi	r2,fp,-32
10003b74:	d1200704 	addi	r4,gp,-32740
10003b78:	180b883a 	mov	r5,r3
10003b7c:	100d883a 	mov	r6,r2
10003b80:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10003b84:	e0bff50d 	sth	r2,-44(fp)
10003b88:	e0bff50f 	ldh	r2,-44(fp)
10003b8c:	10000126 	beq	r2,zero,10003b94 <sl_DevGet+0xa8>
10003b90:	003fff06 	br	10003b90 <__alt_data_end+0xf0003b90>

        if( pOption )
10003b94:	e0bffd17 	ldw	r2,-12(fp)
10003b98:	10000426 	beq	r2,zero,10003bac <sl_DevGet+0xc0>
        {
            *pOption = (_u8)Msg.Rsp.Option;
10003b9c:	e0bff68b 	ldhu	r2,-38(fp)
10003ba0:	1007883a 	mov	r3,r2
10003ba4:	e0bffd17 	ldw	r2,-12(fp)
10003ba8:	10c00005 	stb	r3,0(r2)
        }

        if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
10003bac:	e0fff88b 	ldhu	r3,-30(fp)
10003bb0:	e0bff90b 	ldhu	r2,-28(fp)
10003bb4:	18ffffcc 	andi	r3,r3,65535
10003bb8:	10bfffcc 	andi	r2,r2,65535
10003bbc:	1880062e 	bgeu	r3,r2,10003bd8 <sl_DevGet+0xec>
        {
            *pConfigLen = (_u8)CmdExt.RxPayloadLen;
10003bc0:	e0bff88b 	ldhu	r2,-30(fp)
10003bc4:	1007883a 	mov	r3,r2
10003bc8:	e0bffe17 	ldw	r2,-8(fp)
10003bcc:	10c00005 	stb	r3,0(r2)
            return SL_ESMALLBUF;
10003bd0:	00be0bc4 	movi	r2,-2001
10003bd4:	00000a06 	br	10003c00 <sl_DevGet+0x114>
        }
        else
        {
            *pConfigLen = (_u8)CmdExt.ActualRxPayloadLen;
10003bd8:	e0bff90b 	ldhu	r2,-28(fp)
10003bdc:	1007883a 	mov	r3,r2
10003be0:	e0bffe17 	ldw	r2,-8(fp)
10003be4:	10c00005 	stb	r3,0(r2)
        }

        return (_i16)Msg.Rsp.Status;
10003be8:	e0bff58b 	ldhu	r2,-42(fp)
10003bec:	10bfffcc 	andi	r2,r2,65535
10003bf0:	10a0001c 	xori	r2,r2,32768
10003bf4:	10a00004 	addi	r2,r2,-32768
10003bf8:	00000106 	br	10003c00 <sl_DevGet+0x114>
    }
    else
    {
        return -1;
10003bfc:	00bfffc4 	movi	r2,-1
    }
}
10003c00:	e037883a 	mov	sp,fp
10003c04:	dfc00117 	ldw	ra,4(sp)
10003c08:	df000017 	ldw	fp,0(sp)
10003c0c:	dec00204 	addi	sp,sp,8
10003c10:	f800283a 	ret

10003c14 <sl_DevSet>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_DevSet)
_i32 sl_DevSet(_u8 DeviceSetId ,_u8 Option,_u8 ConfigLen, _u8 *pValues)
{
10003c14:	defff304 	addi	sp,sp,-52
10003c18:	dfc00c15 	stw	ra,48(sp)
10003c1c:	df000b15 	stw	fp,44(sp)
10003c20:	df000b04 	addi	fp,sp,44
10003c24:	2807883a 	mov	r3,r5
10003c28:	3005883a 	mov	r2,r6
10003c2c:	e1ffff15 	stw	r7,-4(fp)
10003c30:	e13ffc05 	stb	r4,-16(fp)
10003c34:	e0fffd05 	stb	r3,-12(fp)
10003c38:	e0bffe05 	stb	r2,-8(fp)
    _SlDeviceMsgSet_u         Msg;
    _SlCmdExt_t               CmdExt;

    CmdExt.TxPayloadLen = (ConfigLen+3) & (~3);
10003c3c:	e0bffe03 	ldbu	r2,-8(fp)
10003c40:	108000c4 	addi	r2,r2,3
10003c44:	1007883a 	mov	r3,r2
10003c48:	00bfff04 	movi	r2,-4
10003c4c:	1884703a 	and	r2,r3,r2
10003c50:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
10003c54:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = (_u8 *)pValues;
10003c58:	e0bfff17 	ldw	r2,-4(fp)
10003c5c:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
10003c60:	e03ffb15 	stw	zero,-20(fp)


    Msg.Cmd.DeviceSetId    = DeviceSetId;
10003c64:	e0bffc03 	ldbu	r2,-16(fp)
10003c68:	e0bff60d 	sth	r2,-40(fp)
    Msg.Cmd.ConfigLen   = ConfigLen;
10003c6c:	e0bffe03 	ldbu	r2,-8(fp)
10003c70:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.Option   = Option;
10003c74:	e0bffd03 	ldbu	r2,-12(fp)
10003c78:	e0bff68d 	sth	r2,-38(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlDeviceSetCmdCtrl, &Msg, &CmdExt));
10003c7c:	e0fff584 	addi	r3,fp,-42
10003c80:	e0bff804 	addi	r2,fp,-32
10003c84:	d1200804 	addi	r4,gp,-32736
10003c88:	180b883a 	mov	r5,r3
10003c8c:	100d883a 	mov	r6,r2
10003c90:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10003c94:	e0bff50d 	sth	r2,-44(fp)
10003c98:	e0bff50f 	ldh	r2,-44(fp)
10003c9c:	10000126 	beq	r2,zero,10003ca4 <sl_DevSet+0x90>
10003ca0:	003fff06 	br	10003ca0 <__alt_data_end+0xf0003ca0>

    return (_i16)Msg.Rsp.status;
10003ca4:	e0bff58b 	ldhu	r2,-42(fp)
10003ca8:	10bfffcc 	andi	r2,r2,65535
10003cac:	10a0001c 	xori	r2,r2,32768
10003cb0:	10a00004 	addi	r2,r2,-32768
}
10003cb4:	e037883a 	mov	sp,fp
10003cb8:	dfc00117 	ldw	ra,4(sp)
10003cbc:	df000017 	ldw	fp,0(sp)
10003cc0:	dec00204 	addi	sp,sp,8
10003cc4:	f800283a 	ret

10003cc8 <_SlDrvDeviceEventHandler>:

/******************************************************************************
_SlDrvDeviceEventHandler - handles internally device async events
******************************************************************************/
void _SlDrvDeviceEventHandler(void *pArgs)
{
10003cc8:	defff804 	addi	sp,sp,-32
10003ccc:	dfc00715 	stw	ra,28(sp)
10003cd0:	df000615 	stw	fp,24(sp)
10003cd4:	df000604 	addi	fp,sp,24
10003cd8:	e13fff15 	stw	r4,-4(fp)
    _SlResponseHeader_t      *pHdr       = (_SlResponseHeader_t *)pArgs;
10003cdc:	e0bfff17 	ldw	r2,-4(fp)
10003ce0:	e0bffa15 	stw	r2,-24(fp)

    switch(pHdr->GenHeader.Opcode)
10003ce4:	e0bffa17 	ldw	r2,-24(fp)
10003ce8:	1080000b 	ldhu	r2,0(r2)
10003cec:	10bfffcc 	andi	r2,r2,65535
10003cf0:	10c01ce0 	cmpeqi	r3,r2,115
10003cf4:	1800071e 	bne	r3,zero,10003d14 <_SlDrvDeviceEventHandler+0x4c>
10003cf8:	10c01e20 	cmpeqi	r3,r2,120
10003cfc:	1800081e 	bne	r3,zero,10003d20 <_SlDrvDeviceEventHandler+0x58>
10003d00:	10800220 	cmpeqi	r2,r2,8
10003d04:	10001b26 	beq	r2,zero,10003d74 <_SlDrvDeviceEventHandler+0xac>
    {
    case SL_OPCODE_DEVICE_INITCOMPLETE:
        _sl_HandleAsync_InitComplete(pHdr);
10003d08:	e13ffa17 	ldw	r4,-24(fp)
10003d0c:	00035040 	call	10003504 <_sl_HandleAsync_InitComplete>
        break;
10003d10:	00001906 	br	10003d78 <_SlDrvDeviceEventHandler+0xb0>
    case SL_OPCODE_DEVICE_STOP_ASYNC_RESPONSE:
        _sl_HandleAsync_Stop(pHdr);
10003d14:	e13ffa17 	ldw	r4,-24(fp)
10003d18:	00036c80 	call	100036c8 <_sl_HandleAsync_Stop>
        break;
10003d1c:	00001606 	br	10003d78 <_SlDrvDeviceEventHandler+0xb0>
    case  SL_OPCODE_DEVICE_DEVICEASYNCFATALERROR:
#ifdef sl_GeneralEvtHdlr
        {
            _BasicResponse_t     *pMsgArgs   = (_BasicResponse_t *)_SL_RESP_ARGS_START(pHdr);
10003d20:	e0bffa17 	ldw	r2,-24(fp)
10003d24:	10800204 	addi	r2,r2,8
10003d28:	e0bffb15 	stw	r2,-20(fp)
            SlDeviceEvent_t      devHandler;
            devHandler.Event = SL_DEVICE_FATAL_ERROR_EVENT;
10003d2c:	00800044 	movi	r2,1
10003d30:	e0bffc15 	stw	r2,-16(fp)
            devHandler.EventData.deviceEvent.status = pMsgArgs->status & 0xFF;
10003d34:	e0bffb17 	ldw	r2,-20(fp)
10003d38:	1080000b 	ldhu	r2,0(r2)
10003d3c:	e0bffd05 	stb	r2,-12(fp)
            devHandler.EventData.deviceEvent.sender = (SlErrorSender_e)((pMsgArgs->status >> 8) & 0xFF);
10003d40:	e0bffb17 	ldw	r2,-20(fp)
10003d44:	1080000b 	ldhu	r2,0(r2)
10003d48:	10bfffcc 	andi	r2,r2,65535
10003d4c:	10a0001c 	xori	r2,r2,32768
10003d50:	10a00004 	addi	r2,r2,-32768
10003d54:	1005d23a 	srai	r2,r2,8
10003d58:	10bfffcc 	andi	r2,r2,65535
10003d5c:	10803fcc 	andi	r2,r2,255
10003d60:	e0bffe15 	stw	r2,-8(fp)
            sl_GeneralEvtHdlr(&devHandler);
10003d64:	e0bffc04 	addi	r2,fp,-16
10003d68:	1009883a 	mov	r4,r2
10003d6c:	00016740 	call	10001674 <SimpleLinkGeneralEventHandler>
        }
#endif
        break;
10003d70:	00000106 	br	10003d78 <_SlDrvDeviceEventHandler+0xb0>
    default:
        SL_ERROR_TRACE2(MSG_306, "ASSERT: _SlDrvDeviceEventHandler : invalid opcode = 0x%x = %1", pHdr->GenHeader.Opcode, pHdr->GenHeader.Opcode);
        VERIFY_PROTOCOL(0);
10003d74:	003fff06 	br	10003d74 <__alt_data_end+0xf0003d74>
    }
}
10003d78:	e037883a 	mov	sp,fp
10003d7c:	dfc00117 	ldw	ra,4(sp)
10003d80:	df000017 	ldw	fp,0(sp)
10003d84:	dec00204 	addi	sp,sp,8
10003d88:	f800283a 	ret

10003d8c <_SlDrvDriverCBInit>:

/*****************************************************************************
_SlDrvDriverCBInit - init Driver Control Block
*****************************************************************************/
void _SlDrvDriverCBInit(void)
{
10003d8c:	defffb04 	addi	sp,sp,-20
10003d90:	dfc00415 	stw	ra,16(sp)
10003d94:	df000315 	stw	fp,12(sp)
10003d98:	df000304 	addi	fp,sp,12
    _u8          Idx;

#if (SL_MEMORY_MGMT == SL_MEMORY_MGMT_STATIC)
    g_pCB = &(g_StatMem.DriverCB);
10003d9c:	008400f4 	movhi	r2,4099
10003da0:	10a4c204 	addi	r2,r2,-27896
10003da4:	d0a7a815 	stw	r2,-24928(gp)
#else
    g_pCB = sl_Malloc(sizeof(_SlDriverCb_t));
#endif
    MALLOC_OK_CHECK(g_pCB);
10003da8:	d0a7a817 	ldw	r2,-24928(gp)
10003dac:	1000011e 	bne	r2,zero,10003db4 <_SlDrvDriverCBInit+0x28>
10003db0:	003fff06 	br	10003db0 <__alt_data_end+0xf0003db0>

    sl_Memset((g_pCB), 0, sizeof(_SlDriverCb_t));
10003db4:	d0a7a817 	ldw	r2,-24928(gp)
10003db8:	1009883a 	mov	r4,r2
10003dbc:	000b883a 	mov	r5,zero
10003dc0:	01802e04 	movi	r6,184
10003dc4:	000c8bc0 	call	1000c8bc <memset>

    OSI_RET_OK_CHECK( sl_SyncObjCreate(&g_pCB->CmdSyncObj, "CmdSyncObj") );
10003dc8:	d0a7a817 	ldw	r2,-24928(gp)
10003dcc:	10802444 	addi	r2,r2,145
10003dd0:	1009883a 	mov	r4,r2
10003dd4:	01400444 	movi	r5,17
10003dd8:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003ddc:	10803fcc 	andi	r2,r2,255
10003de0:	1080201c 	xori	r2,r2,128
10003de4:	10bfe004 	addi	r2,r2,-128
10003de8:	e0bffd8d 	sth	r2,-10(fp)
10003dec:	e0bffd8f 	ldh	r2,-10(fp)
10003df0:	10000126 	beq	r2,zero,10003df8 <_SlDrvDriverCBInit+0x6c>
10003df4:	003fff06 	br	10003df4 <__alt_data_end+0xf0003df4>
    sl_SyncObjClear(&g_pCB->CmdSyncObj);
10003df8:	d0a7a817 	ldw	r2,-24928(gp)
10003dfc:	10802444 	addi	r2,r2,145
10003e00:	1009883a 	mov	r4,r2
10003e04:	01400884 	movi	r5,34
10003e08:	01800444 	movi	r6,17
10003e0c:	01c00044 	movi	r7,1
10003e10:	00093c40 	call	100093c4 <_SlNonOsSemGet>

    OSI_RET_OK_CHECK( sl_LockObjCreate(&g_pCB->GlobalLockObj, "GlobalLockObj") );
10003e14:	d0a7a817 	ldw	r2,-24928(gp)
10003e18:	10800104 	addi	r2,r2,4
10003e1c:	1009883a 	mov	r4,r2
10003e20:	01400cc4 	movi	r5,51
10003e24:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003e28:	10803fcc 	andi	r2,r2,255
10003e2c:	1080201c 	xori	r2,r2,128
10003e30:	10bfe004 	addi	r2,r2,-128
10003e34:	e0bffe0d 	sth	r2,-8(fp)
10003e38:	e0bffe0f 	ldh	r2,-8(fp)
10003e3c:	10000126 	beq	r2,zero,10003e44 <_SlDrvDriverCBInit+0xb8>
10003e40:	003fff06 	br	10003e40 <__alt_data_end+0xf0003e40>

    OSI_RET_OK_CHECK( sl_LockObjCreate(&g_pCB->ProtectionLockObj, "ProtectionLockObj") );
10003e44:	d0a7a817 	ldw	r2,-24928(gp)
10003e48:	10802404 	addi	r2,r2,144
10003e4c:	1009883a 	mov	r4,r2
10003e50:	01400cc4 	movi	r5,51
10003e54:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003e58:	10803fcc 	andi	r2,r2,255
10003e5c:	1080201c 	xori	r2,r2,128
10003e60:	10bfe004 	addi	r2,r2,-128
10003e64:	e0bffe8d 	sth	r2,-6(fp)
10003e68:	e0bffe8f 	ldh	r2,-6(fp)
10003e6c:	10000126 	beq	r2,zero,10003e74 <_SlDrvDriverCBInit+0xe8>
10003e70:	003fff06 	br	10003e70 <__alt_data_end+0xf0003e70>

    _SlDrvObjInit();
10003e74:	0006e9c0 	call	10006e9c <_SlDrvObjInit>

    for (Idx = 0; Idx < MAX_CONCURRENT_ACTIONS; Idx++)
10003e78:	e03ffd05 	stb	zero,-12(fp)
10003e7c:	00001c06 	br	10003ef0 <_SlDrvDriverCBInit+0x164>
    {
        OSI_RET_OK_CHECK( sl_SyncObjCreate(&g_pCB->ObjPool[Idx].SyncObj, "SyncObj") );  
10003e80:	d0e7a817 	ldw	r3,-24928(gp)
10003e84:	e0bffd03 	ldbu	r2,-12(fp)
10003e88:	10800324 	muli	r2,r2,12
10003e8c:	10800404 	addi	r2,r2,16
10003e90:	1885883a 	add	r2,r3,r2
10003e94:	1009883a 	mov	r4,r2
10003e98:	01400444 	movi	r5,17
10003e9c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003ea0:	10803fcc 	andi	r2,r2,255
10003ea4:	1080201c 	xori	r2,r2,128
10003ea8:	10bfe004 	addi	r2,r2,-128
10003eac:	e0bfff0d 	sth	r2,-4(fp)
10003eb0:	e0bfff0f 	ldh	r2,-4(fp)
10003eb4:	10000126 	beq	r2,zero,10003ebc <_SlDrvDriverCBInit+0x130>
10003eb8:	003fff06 	br	10003eb8 <__alt_data_end+0xf0003eb8>
        sl_SyncObjClear(&g_pCB->ObjPool[Idx].SyncObj);     
10003ebc:	d0e7a817 	ldw	r3,-24928(gp)
10003ec0:	e0bffd03 	ldbu	r2,-12(fp)
10003ec4:	10800324 	muli	r2,r2,12
10003ec8:	10800404 	addi	r2,r2,16
10003ecc:	1885883a 	add	r2,r3,r2
10003ed0:	1009883a 	mov	r4,r2
10003ed4:	01400884 	movi	r5,34
10003ed8:	01800444 	movi	r6,17
10003edc:	01c00044 	movi	r7,1
10003ee0:	00093c40 	call	100093c4 <_SlNonOsSemGet>

    OSI_RET_OK_CHECK( sl_LockObjCreate(&g_pCB->ProtectionLockObj, "ProtectionLockObj") );

    _SlDrvObjInit();

    for (Idx = 0; Idx < MAX_CONCURRENT_ACTIONS; Idx++)
10003ee4:	e0bffd03 	ldbu	r2,-12(fp)
10003ee8:	10800044 	addi	r2,r2,1
10003eec:	e0bffd05 	stb	r2,-12(fp)
10003ef0:	e0bffd03 	ldbu	r2,-12(fp)
10003ef4:	108002b0 	cmpltui	r2,r2,10
10003ef8:	103fe11e 	bne	r2,zero,10003e80 <__alt_data_end+0xf0003e80>
    {
        OSI_RET_OK_CHECK( sl_SyncObjCreate(&g_pCB->ObjPool[Idx].SyncObj, "SyncObj") );  
        sl_SyncObjClear(&g_pCB->ObjPool[Idx].SyncObj);     
    }
    _SlDrvFlowContInit();
10003efc:	00072cc0 	call	100072cc <_SlDrvFlowContInit>
    gFirstCmdMode = 0;
10003f00:	d027aa05 	stb	zero,-24920(gp)
}
10003f04:	e037883a 	mov	sp,fp
10003f08:	dfc00117 	ldw	ra,4(sp)
10003f0c:	df000017 	ldw	fp,0(sp)
10003f10:	dec00204 	addi	sp,sp,8
10003f14:	f800283a 	ret

10003f18 <_SlDrvDriverCBDeinit>:

/*****************************************************************************
_SlDrvDriverCBDeinit - De init Driver Control Block
*****************************************************************************/
void _SlDrvDriverCBDeinit()
{
10003f18:	defffb04 	addi	sp,sp,-20
10003f1c:	dfc00415 	stw	ra,16(sp)
10003f20:	df000315 	stw	fp,12(sp)
10003f24:	df000304 	addi	fp,sp,12
    _u8        Idx;

    _SlDrvFlowContDeinit();
10003f28:	00073740 	call	10007374 <_SlDrvFlowContDeinit>

    OSI_RET_OK_CHECK( sl_SyncObjDelete(&g_pCB->CmdSyncObj) );
10003f2c:	d0a7a817 	ldw	r2,-24928(gp)
10003f30:	10802444 	addi	r2,r2,145
10003f34:	1009883a 	mov	r4,r2
10003f38:	000b883a 	mov	r5,zero
10003f3c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003f40:	10803fcc 	andi	r2,r2,255
10003f44:	1080201c 	xori	r2,r2,128
10003f48:	10bfe004 	addi	r2,r2,-128
10003f4c:	e0bffd8d 	sth	r2,-10(fp)
10003f50:	e0bffd8f 	ldh	r2,-10(fp)
10003f54:	10000126 	beq	r2,zero,10003f5c <_SlDrvDriverCBDeinit+0x44>
10003f58:	003fff06 	br	10003f58 <__alt_data_end+0xf0003f58>

    OSI_RET_OK_CHECK( sl_LockObjDelete(&g_pCB->GlobalLockObj) );
10003f5c:	d0a7a817 	ldw	r2,-24928(gp)
10003f60:	10800104 	addi	r2,r2,4
10003f64:	1009883a 	mov	r4,r2
10003f68:	000b883a 	mov	r5,zero
10003f6c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003f70:	10803fcc 	andi	r2,r2,255
10003f74:	1080201c 	xori	r2,r2,128
10003f78:	10bfe004 	addi	r2,r2,-128
10003f7c:	e0bffe0d 	sth	r2,-8(fp)
10003f80:	e0bffe0f 	ldh	r2,-8(fp)
10003f84:	10000126 	beq	r2,zero,10003f8c <_SlDrvDriverCBDeinit+0x74>
10003f88:	003fff06 	br	10003f88 <__alt_data_end+0xf0003f88>

    OSI_RET_OK_CHECK( sl_LockObjDelete(&g_pCB->ProtectionLockObj) );
10003f8c:	d0a7a817 	ldw	r2,-24928(gp)
10003f90:	10802404 	addi	r2,r2,144
10003f94:	1009883a 	mov	r4,r2
10003f98:	000b883a 	mov	r5,zero
10003f9c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003fa0:	10803fcc 	andi	r2,r2,255
10003fa4:	1080201c 	xori	r2,r2,128
10003fa8:	10bfe004 	addi	r2,r2,-128
10003fac:	e0bffe8d 	sth	r2,-6(fp)
10003fb0:	e0bffe8f 	ldh	r2,-6(fp)
10003fb4:	10000126 	beq	r2,zero,10003fbc <_SlDrvDriverCBDeinit+0xa4>
10003fb8:	003fff06 	br	10003fb8 <__alt_data_end+0xf0003fb8>
    for (Idx = 0; Idx < MAX_CONCURRENT_ACTIONS; Idx++)
10003fbc:	e03ffd05 	stb	zero,-12(fp)
10003fc0:	00001206 	br	1000400c <_SlDrvDriverCBDeinit+0xf4>
    {
        OSI_RET_OK_CHECK( sl_SyncObjDelete(&g_pCB->ObjPool[Idx].SyncObj) );   
10003fc4:	d0e7a817 	ldw	r3,-24928(gp)
10003fc8:	e0bffd03 	ldbu	r2,-12(fp)
10003fcc:	10800324 	muli	r2,r2,12
10003fd0:	10800404 	addi	r2,r2,16
10003fd4:	1885883a 	add	r2,r3,r2
10003fd8:	1009883a 	mov	r4,r2
10003fdc:	000b883a 	mov	r5,zero
10003fe0:	000938c0 	call	1000938c <_SlNonOsSemSet>
10003fe4:	10803fcc 	andi	r2,r2,255
10003fe8:	1080201c 	xori	r2,r2,128
10003fec:	10bfe004 	addi	r2,r2,-128
10003ff0:	e0bfff0d 	sth	r2,-4(fp)
10003ff4:	e0bfff0f 	ldh	r2,-4(fp)
10003ff8:	10000126 	beq	r2,zero,10004000 <_SlDrvDriverCBDeinit+0xe8>
10003ffc:	003fff06 	br	10003ffc <__alt_data_end+0xf0003ffc>
    OSI_RET_OK_CHECK( sl_SyncObjDelete(&g_pCB->CmdSyncObj) );

    OSI_RET_OK_CHECK( sl_LockObjDelete(&g_pCB->GlobalLockObj) );

    OSI_RET_OK_CHECK( sl_LockObjDelete(&g_pCB->ProtectionLockObj) );
    for (Idx = 0; Idx < MAX_CONCURRENT_ACTIONS; Idx++)
10004000:	e0bffd03 	ldbu	r2,-12(fp)
10004004:	10800044 	addi	r2,r2,1
10004008:	e0bffd05 	stb	r2,-12(fp)
1000400c:	e0bffd03 	ldbu	r2,-12(fp)
10004010:	108002b0 	cmpltui	r2,r2,10
10004014:	103feb1e 	bne	r2,zero,10003fc4 <__alt_data_end+0xf0003fc4>
    {
        OSI_RET_OK_CHECK( sl_SyncObjDelete(&g_pCB->ObjPool[Idx].SyncObj) );   
    }

    _SlDrvObjDeInit();
10004018:	0006f540 	call	10006f54 <_SlDrvObjDeInit>

#if (SL_MEMORY_MGMT == SL_MEMORY_MGMT_STATIC)
    g_pCB = NULL;
1000401c:	d027a815 	stw	zero,-24928(gp)
#else
    sl_Free(g_pCB);
#endif

    g_pCB = NULL;
10004020:	d027a815 	stw	zero,-24928(gp)
}
10004024:	e037883a 	mov	sp,fp
10004028:	dfc00117 	ldw	ra,4(sp)
1000402c:	df000017 	ldw	fp,0(sp)
10004030:	dec00204 	addi	sp,sp,8
10004034:	f800283a 	ret

10004038 <_SlDrvRxIrqHandler>:

/*****************************************************************************
_SlDrvRxIrqHandler - Interrupt handler 
*****************************************************************************/
void _SlDrvRxIrqHandler(void *pValue)
{
10004038:	defffc04 	addi	sp,sp,-16
1000403c:	dfc00315 	stw	ra,12(sp)
10004040:	df000215 	stw	fp,8(sp)
10004044:	df000204 	addi	fp,sp,8
10004048:	e13fff15 	stw	r4,-4(fp)
    sl_IfMaskIntHdlr();

    g_pCB->RxIrqCnt++;
1000404c:	d0a7a817 	ldw	r2,-24928(gp)
10004050:	10c025c3 	ldbu	r3,151(r2)
10004054:	18c00044 	addi	r3,r3,1
10004058:	10c025c5 	stb	r3,151(r2)

    if (TRUE == g_pCB->IsCmdRespWaited)
1000405c:	d0a7a817 	ldw	r2,-24928(gp)
10004060:	10802483 	ldbu	r2,146(r2)
10004064:	10803fcc 	andi	r2,r2,255
10004068:	10800058 	cmpnei	r2,r2,1
1000406c:	10000d1e 	bne	r2,zero,100040a4 <_SlDrvRxIrqHandler+0x6c>
    {
        OSI_RET_OK_CHECK( sl_SyncObjSignalFromIRQ(&g_pCB->CmdSyncObj) );
10004070:	d0a7a817 	ldw	r2,-24928(gp)
10004074:	10802444 	addi	r2,r2,145
10004078:	1009883a 	mov	r4,r2
1000407c:	01400884 	movi	r5,34
10004080:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004084:	10803fcc 	andi	r2,r2,255
10004088:	1080201c 	xori	r2,r2,128
1000408c:	10bfe004 	addi	r2,r2,-128
10004090:	e0bffe0d 	sth	r2,-8(fp)
10004094:	e0bffe0f 	ldh	r2,-8(fp)
10004098:	10000126 	beq	r2,zero,100040a0 <_SlDrvRxIrqHandler+0x68>
1000409c:	003fff06 	br	1000409c <__alt_data_end+0xf000409c>
100040a0:	00000506 	br	100040b8 <_SlDrvRxIrqHandler+0x80>
    }
    else
    {
        sl_Spawn((_SlSpawnEntryFunc_t)_SlDrvMsgReadSpawnCtx, NULL, 0);
100040a4:	01040034 	movhi	r4,4096
100040a8:	21184504 	addi	r4,r4,24852
100040ac:	000b883a 	mov	r5,zero
100040b0:	000d883a 	mov	r6,zero
100040b4:	00094640 	call	10009464 <_SlNonOsSpawn>
    }
}
100040b8:	e037883a 	mov	sp,fp
100040bc:	dfc00117 	ldw	ra,4(sp)
100040c0:	df000017 	ldw	fp,0(sp)
100040c4:	dec00204 	addi	sp,sp,8
100040c8:	f800283a 	ret

100040cc <_SlDrvCmdOp>:
*****************************************************************************/
_SlReturnVal_t _SlDrvCmdOp(
    _SlCmdCtrl_t  *pCmdCtrl ,
    void          *pTxRxDescBuff ,
    _SlCmdExt_t   *pCmdExt)
{
100040cc:	defff804 	addi	sp,sp,-32
100040d0:	dfc00715 	stw	ra,28(sp)
100040d4:	df000615 	stw	fp,24(sp)
100040d8:	df000604 	addi	fp,sp,24
100040dc:	e13ffd15 	stw	r4,-12(fp)
100040e0:	e17ffe15 	stw	r5,-8(fp)
100040e4:	e1bfff15 	stw	r6,-4(fp)
    _SlReturnVal_t RetVal;

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->GlobalLockObj, SL_OS_WAIT_FOREVER));
100040e8:	d0a7a817 	ldw	r2,-24928(gp)
100040ec:	10800104 	addi	r2,r2,4
100040f0:	1009883a 	mov	r4,r2
100040f4:	01400cc4 	movi	r5,51
100040f8:	01801104 	movi	r6,68
100040fc:	01c03fc4 	movi	r7,255
10004100:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004104:	10803fcc 	andi	r2,r2,255
10004108:	1080201c 	xori	r2,r2,128
1000410c:	10bfe004 	addi	r2,r2,-128
10004110:	e0bffa8d 	sth	r2,-22(fp)
10004114:	e0bffa8f 	ldh	r2,-22(fp)
10004118:	10000126 	beq	r2,zero,10004120 <_SlDrvCmdOp+0x54>
1000411c:	003fff06 	br	1000411c <__alt_data_end+0xf000411c>
    g_pCB->IsCmdRespWaited = TRUE;
10004120:	d0a7a817 	ldw	r2,-24928(gp)
10004124:	00c00044 	movi	r3,1
10004128:	10c02485 	stb	r3,146(r2)

    SL_TRACE0(DBG_MSG, MSG_312, "_SlDrvCmdOp: call _SlDrvMsgWrite");
    /* send the message */
    g_pCB->FunctionParams.pCmdCtrl = pCmdCtrl;
1000412c:	d0a7a817 	ldw	r2,-24928(gp)
10004130:	e0fffd17 	ldw	r3,-12(fp)
10004134:	10c02715 	stw	r3,156(r2)
    g_pCB->FunctionParams.pTxRxDescBuff = pTxRxDescBuff;
10004138:	d0a7a817 	ldw	r2,-24928(gp)
1000413c:	e0fffe17 	ldw	r3,-8(fp)
10004140:	10c02815 	stw	r3,160(r2)
    g_pCB->FunctionParams.pCmdExt = pCmdExt;
10004144:	d0a7a817 	ldw	r2,-24928(gp)
10004148:	e0ffff17 	ldw	r3,-4(fp)
1000414c:	10c02915 	stw	r3,164(r2)

    RetVal = _SlDrvMsgWrite();
10004150:	000493c0 	call	1000493c <_SlDrvMsgWrite>
10004154:	e0bffa0d 	sth	r2,-24(fp)

    if(SL_OS_RET_CODE_OK == RetVal)
10004158:	e0bffa0f 	ldh	r2,-24(fp)
1000415c:	1000101e 	bne	r2,zero,100041a0 <_SlDrvCmdOp+0xd4>
    {

#ifndef SL_IF_TYPE_UART    
        /* Waiting for SPI to stabilize after first command */
        if( 0 == gFirstCmdMode )
10004160:	d0a7aa03 	ldbu	r2,-24920(gp)
10004164:	10803fcc 	andi	r2,r2,255
10004168:	10000a1e 	bne	r2,zero,10004194 <_SlDrvCmdOp+0xc8>
        {
            volatile _u32 CountVal = 0;
1000416c:	e03ffc15 	stw	zero,-16(fp)
            gFirstCmdMode = 1;
10004170:	00800044 	movi	r2,1
10004174:	d0a7aa05 	stb	r2,-24920(gp)
            CountVal = CPU_FREQ_IN_MHZ*USEC_DELAY;
10004178:	0089c404 	movi	r2,10000
1000417c:	e0bffc15 	stw	r2,-16(fp)
            while( CountVal-- );
10004180:	0001883a 	nop
10004184:	e0bffc17 	ldw	r2,-16(fp)
10004188:	10ffffc4 	addi	r3,r2,-1
1000418c:	e0fffc15 	stw	r3,-16(fp)
10004190:	103ffc1e 	bne	r2,zero,10004184 <__alt_data_end+0xf0004184>
        }   
#endif 
        /* wait for respond */
        RetVal = _SlDrvMsgReadCmdCtx(); /* will free global lock */
10004194:	0005f880 	call	10005f88 <_SlDrvMsgReadCmdCtx>
10004198:	e0bffa0d 	sth	r2,-24(fp)
1000419c:	00000c06 	br	100041d0 <_SlDrvCmdOp+0x104>
        SL_TRACE0(DBG_MSG, MSG_314, "_SlDrvCmdOp: exited _SlDrvMsgReadCmdCtx");

    }
    else
    {
        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->GlobalLockObj));
100041a0:	d0a7a817 	ldw	r2,-24928(gp)
100041a4:	10800104 	addi	r2,r2,4
100041a8:	1009883a 	mov	r4,r2
100041ac:	01400cc4 	movi	r5,51
100041b0:	000938c0 	call	1000938c <_SlNonOsSemSet>
100041b4:	10803fcc 	andi	r2,r2,255
100041b8:	1080201c 	xori	r2,r2,128
100041bc:	10bfe004 	addi	r2,r2,-128
100041c0:	e0bffb0d 	sth	r2,-20(fp)
100041c4:	e0bffb0f 	ldh	r2,-20(fp)
100041c8:	10000126 	beq	r2,zero,100041d0 <_SlDrvCmdOp+0x104>
100041cc:	003fff06 	br	100041cc <__alt_data_end+0xf00041cc>
    }

    return RetVal;
100041d0:	e0bffa0b 	ldhu	r2,-24(fp)
}
100041d4:	e037883a 	mov	sp,fp
100041d8:	dfc00117 	ldw	ra,4(sp)
100041dc:	df000017 	ldw	fp,0(sp)
100041e0:	dec00204 	addi	sp,sp,8
100041e4:	f800283a 	ret

100041e8 <_SlDrvCmdSend>:
*****************************************************************************/
_SlReturnVal_t _SlDrvCmdSend(
    _SlCmdCtrl_t  *pCmdCtrl ,
    void          *pTxRxDescBuff ,
    _SlCmdExt_t   *pCmdExt)
{
100041e8:	defffa04 	addi	sp,sp,-24
100041ec:	dfc00515 	stw	ra,20(sp)
100041f0:	df000415 	stw	fp,16(sp)
100041f4:	df000404 	addi	fp,sp,16
100041f8:	e13ffd15 	stw	r4,-12(fp)
100041fc:	e17ffe15 	stw	r5,-8(fp)
10004200:	e1bfff15 	stw	r6,-4(fp)
    _SlReturnVal_t RetVal;

    g_pCB->IsCmdRespWaited = FALSE;
10004204:	d0a7a817 	ldw	r2,-24928(gp)
10004208:	10002485 	stb	zero,146(r2)

    SL_TRACE0(DBG_MSG, MSG_312, "_SlDrvCmdSend: call _SlDrvMsgWrite");
    /*  send the message */
    g_pCB->FunctionParams.pCmdCtrl = pCmdCtrl;
1000420c:	d0a7a817 	ldw	r2,-24928(gp)
10004210:	e0fffd17 	ldw	r3,-12(fp)
10004214:	10c02715 	stw	r3,156(r2)
    g_pCB->FunctionParams.pTxRxDescBuff = pTxRxDescBuff;
10004218:	d0a7a817 	ldw	r2,-24928(gp)
1000421c:	e0fffe17 	ldw	r3,-8(fp)
10004220:	10c02815 	stw	r3,160(r2)
    g_pCB->FunctionParams.pCmdExt = pCmdExt;
10004224:	d0a7a817 	ldw	r2,-24928(gp)
10004228:	e0ffff17 	ldw	r3,-4(fp)
1000422c:	10c02915 	stw	r3,164(r2)

    RetVal = _SlDrvMsgWrite();
10004230:	000493c0 	call	1000493c <_SlDrvMsgWrite>
10004234:	e0bffc0d 	sth	r2,-16(fp)

    return RetVal;
10004238:	e0bffc0b 	ldhu	r2,-16(fp)
}
1000423c:	e037883a 	mov	sp,fp
10004240:	dfc00117 	ldw	ra,4(sp)
10004244:	df000017 	ldw	fp,0(sp)
10004248:	dec00204 	addi	sp,sp,8
1000424c:	f800283a 	ret

10004250 <_SlDrvDataReadOp>:
_SlReturnVal_t _SlDrvDataReadOp(
    _SlSd_t             Sd,
    _SlCmdCtrl_t        *pCmdCtrl ,
    void                *pTxRxDescBuff ,
    _SlCmdExt_t         *pCmdExt)
{
10004250:	defff304 	addi	sp,sp,-52
10004254:	dfc00c15 	stw	ra,48(sp)
10004258:	df000b15 	stw	fp,44(sp)
1000425c:	df000b04 	addi	fp,sp,44
10004260:	2005883a 	mov	r2,r4
10004264:	e17ffd15 	stw	r5,-12(fp)
10004268:	e1bffe15 	stw	r6,-8(fp)
1000426c:	e1ffff15 	stw	r7,-4(fp)
10004270:	e0bffc05 	stb	r2,-16(fp)
    _SlReturnVal_t RetVal;
    _u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
10004274:	00800284 	movi	r2,10
10004278:	e0bff505 	stb	r2,-44(fp)
    _SlArgsData_t pArgsData;

    /* Validate input arguments */
    VERIFY_PROTOCOL(NULL != pCmdExt->pRxPayload);
1000427c:	e0bfff17 	ldw	r2,-4(fp)
10004280:	10800317 	ldw	r2,12(r2)
10004284:	1000011e 	bne	r2,zero,1000428c <_SlDrvDataReadOp+0x3c>
10004288:	003fff06 	br	10004288 <__alt_data_end+0xf0004288>

    /* If zero bytes is requested, return error. */
    /*  This allows us not to fill remote socket's IP address in return arguments */
    VERIFY_PROTOCOL(0 != pCmdExt->RxPayloadLen);
1000428c:	e0bfff17 	ldw	r2,-4(fp)
10004290:	1080008b 	ldhu	r2,2(r2)
10004294:	10bfffcc 	andi	r2,r2,65535
10004298:	1000011e 	bne	r2,zero,100042a0 <_SlDrvDataReadOp+0x50>
1000429c:	003fff06 	br	1000429c <__alt_data_end+0xf000429c>

    /* Validate socket */
    if((Sd & BSD_SOCKET_ID_MASK) >= SL_MAX_SOCKETS)
100042a0:	e0bffc03 	ldbu	r2,-16(fp)
100042a4:	108003cc 	andi	r2,r2,15
100042a8:	10800210 	cmplti	r2,r2,8
100042ac:	1000021e 	bne	r2,zero,100042b8 <_SlDrvDataReadOp+0x68>
    {
        return SL_EBADF;
100042b0:	00bffdc4 	movi	r2,-9
100042b4:	0000ca06 	br	100045e0 <_SlDrvDataReadOp+0x390>
    }

    /*Use Obj to issue the command, if not available try later*/
    ObjIdx = (_u8)_SlDrvWaitForPoolObj(RECV_ID, Sd & BSD_SOCKET_ID_MASK);
100042b8:	e0bffc03 	ldbu	r2,-16(fp)
100042bc:	108003cc 	andi	r2,r2,15
100042c0:	010003c4 	movi	r4,15
100042c4:	100b883a 	mov	r5,r2
100042c8:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
100042cc:	e0bff505 	stb	r2,-44(fp)

    if (MAX_CONCURRENT_ACTIONS == ObjIdx)
100042d0:	e0bff503 	ldbu	r2,-44(fp)
100042d4:	10800298 	cmpnei	r2,r2,10
100042d8:	1000021e 	bne	r2,zero,100042e4 <_SlDrvDataReadOp+0x94>
    {
        return SL_POOL_IS_EMPTY;
100042dc:	00be0c04 	movi	r2,-2000
100042e0:	0000bf06 	br	100045e0 <_SlDrvDataReadOp+0x390>
    }

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
100042e4:	d0a7a817 	ldw	r2,-24928(gp)
100042e8:	10802404 	addi	r2,r2,144
100042ec:	1009883a 	mov	r4,r2
100042f0:	01400cc4 	movi	r5,51
100042f4:	01801104 	movi	r6,68
100042f8:	01c03fc4 	movi	r7,255
100042fc:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004300:	10803fcc 	andi	r2,r2,255
10004304:	1080201c 	xori	r2,r2,128
10004308:	10bfe004 	addi	r2,r2,-128
1000430c:	e0bff58d 	sth	r2,-42(fp)
10004310:	e0bff58f 	ldh	r2,-42(fp)
10004314:	10000126 	beq	r2,zero,1000431c <_SlDrvDataReadOp+0xcc>
10004318:	003fff06 	br	10004318 <__alt_data_end+0xf0004318>

    pArgsData.pData = pCmdExt->pRxPayload;
1000431c:	e0bfff17 	ldw	r2,-4(fp)
10004320:	10800317 	ldw	r2,12(r2)
10004324:	e0bffb15 	stw	r2,-20(fp)
    pArgsData.pArgs =  (_u8 *)pTxRxDescBuff;
10004328:	e0bffe17 	ldw	r2,-8(fp)
1000432c:	e0bffa15 	stw	r2,-24(fp)
    g_pCB->ObjPool[ObjIdx].pRespArgs =  (_u8 *)&pArgsData;
10004330:	d0e7a817 	ldw	r3,-24928(gp)
10004334:	e0bff503 	ldbu	r2,-44(fp)
10004338:	10800324 	muli	r2,r2,12
1000433c:	1885883a 	add	r2,r3,r2
10004340:	10800504 	addi	r2,r2,20
10004344:	e0fffa04 	addi	r3,fp,-24
10004348:	10c00015 	stw	r3,0(r2)
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000434c:	d0a7a817 	ldw	r2,-24928(gp)
10004350:	10802404 	addi	r2,r2,144
10004354:	1009883a 	mov	r4,r2
10004358:	01400cc4 	movi	r5,51
1000435c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004360:	10803fcc 	andi	r2,r2,255
10004364:	1080201c 	xori	r2,r2,128
10004368:	10bfe004 	addi	r2,r2,-128
1000436c:	e0bff60d 	sth	r2,-40(fp)
10004370:	e0bff60f 	ldh	r2,-40(fp)
10004374:	10000126 	beq	r2,zero,1000437c <_SlDrvDataReadOp+0x12c>
10004378:	003fff06 	br	10004378 <__alt_data_end+0xf0004378>


    /* Do Flow Control check/update for DataWrite operation */
    OSI_RET_OK_CHECK( sl_LockObjLock(&g_pCB->FlowContCB.TxLockObj, SL_OS_WAIT_FOREVER) );
1000437c:	d0a7a817 	ldw	r2,-24928(gp)
10004380:	10802504 	addi	r2,r2,148
10004384:	1009883a 	mov	r4,r2
10004388:	01400cc4 	movi	r5,51
1000438c:	01801104 	movi	r6,68
10004390:	01c03fc4 	movi	r7,255
10004394:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004398:	10803fcc 	andi	r2,r2,255
1000439c:	1080201c 	xori	r2,r2,128
100043a0:	10bfe004 	addi	r2,r2,-128
100043a4:	e0bff68d 	sth	r2,-38(fp)
100043a8:	e0bff68f 	ldh	r2,-38(fp)
100043ac:	10000126 	beq	r2,zero,100043b4 <_SlDrvDataReadOp+0x164>
100043b0:	003fff06 	br	100043b0 <__alt_data_end+0xf00043b0>

    /* Clear SyncObj for the case it was signalled before TxPoolCnt */
    /* dropped below '1' (last Data buffer was taken)  */
    /* OSI_RET_OK_CHECK( sl_SyncObjClear(&g_pCB->FlowContCB.TxSyncObj) ); */
    sl_SyncObjClear(&g_pCB->FlowContCB.TxSyncObj);
100043b4:	d0a7a817 	ldw	r2,-24928(gp)
100043b8:	10802544 	addi	r2,r2,149
100043bc:	1009883a 	mov	r4,r2
100043c0:	01400884 	movi	r5,34
100043c4:	01800444 	movi	r6,17
100043c8:	01c00044 	movi	r7,1
100043cc:	00093c40 	call	100093c4 <_SlNonOsSemGet>

    if(g_pCB->FlowContCB.TxPoolCnt <= FLOW_CONT_MIN)
100043d0:	d0a7a817 	ldw	r2,-24928(gp)
100043d4:	108024c3 	ldbu	r2,147(r2)
100043d8:	10803fcc 	andi	r2,r2,255
100043dc:	108000a8 	cmpgeui	r2,r2,2
100043e0:	10000e1e 	bne	r2,zero,1000441c <_SlDrvDataReadOp+0x1cc>
    {

        /* If TxPoolCnt was increased by other thread at this moment,
        TxSyncObj won't wait here */
        OSI_RET_OK_CHECK( sl_SyncObjWait(&g_pCB->FlowContCB.TxSyncObj, SL_OS_WAIT_FOREVER) );
100043e4:	d0a7a817 	ldw	r2,-24928(gp)
100043e8:	10802544 	addi	r2,r2,149
100043ec:	1009883a 	mov	r4,r2
100043f0:	01400884 	movi	r5,34
100043f4:	01800444 	movi	r6,17
100043f8:	01c03fc4 	movi	r7,255
100043fc:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004400:	10803fcc 	andi	r2,r2,255
10004404:	1080201c 	xori	r2,r2,128
10004408:	10bfe004 	addi	r2,r2,-128
1000440c:	e0bff70d 	sth	r2,-36(fp)
10004410:	e0bff70f 	ldh	r2,-36(fp)
10004414:	10000126 	beq	r2,zero,1000441c <_SlDrvDataReadOp+0x1cc>
10004418:	003fff06 	br	10004418 <__alt_data_end+0xf0004418>
    }

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->GlobalLockObj, SL_OS_WAIT_FOREVER));
1000441c:	d0a7a817 	ldw	r2,-24928(gp)
10004420:	10800104 	addi	r2,r2,4
10004424:	1009883a 	mov	r4,r2
10004428:	01400cc4 	movi	r5,51
1000442c:	01801104 	movi	r6,68
10004430:	01c03fc4 	movi	r7,255
10004434:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004438:	10803fcc 	andi	r2,r2,255
1000443c:	1080201c 	xori	r2,r2,128
10004440:	10bfe004 	addi	r2,r2,-128
10004444:	e0bff78d 	sth	r2,-34(fp)
10004448:	e0bff78f 	ldh	r2,-34(fp)
1000444c:	10000126 	beq	r2,zero,10004454 <_SlDrvDataReadOp+0x204>
10004450:	003fff06 	br	10004450 <__alt_data_end+0xf0004450>

    VERIFY_PROTOCOL(g_pCB->FlowContCB.TxPoolCnt > FLOW_CONT_MIN);
10004454:	d0a7a817 	ldw	r2,-24928(gp)
10004458:	108024c3 	ldbu	r2,147(r2)
1000445c:	10803fcc 	andi	r2,r2,255
10004460:	108000a8 	cmpgeui	r2,r2,2
10004464:	1000011e 	bne	r2,zero,1000446c <_SlDrvDataReadOp+0x21c>
10004468:	003fff06 	br	10004468 <__alt_data_end+0xf0004468>
    g_pCB->FlowContCB.TxPoolCnt--;
1000446c:	d0a7a817 	ldw	r2,-24928(gp)
10004470:	10c024c3 	ldbu	r3,147(r2)
10004474:	18ffffc4 	addi	r3,r3,-1
10004478:	10c024c5 	stb	r3,147(r2)

    OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
1000447c:	d0a7a817 	ldw	r2,-24928(gp)
10004480:	10802504 	addi	r2,r2,148
10004484:	1009883a 	mov	r4,r2
10004488:	01400cc4 	movi	r5,51
1000448c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004490:	10803fcc 	andi	r2,r2,255
10004494:	1080201c 	xori	r2,r2,128
10004498:	10bfe004 	addi	r2,r2,-128
1000449c:	e0bff80d 	sth	r2,-32(fp)
100044a0:	e0bff80f 	ldh	r2,-32(fp)
100044a4:	10000126 	beq	r2,zero,100044ac <_SlDrvDataReadOp+0x25c>
100044a8:	003fff06 	br	100044a8 <__alt_data_end+0xf00044a8>

    /* send the message */
    g_pCB->TempProtocolHeader.Opcode 	= pCmdCtrl->Opcode;
100044ac:	d0a7a817 	ldw	r2,-24928(gp)
100044b0:	e0fffd17 	ldw	r3,-12(fp)
100044b4:	18c0000b 	ldhu	r3,0(r3)
100044b8:	10c0018d 	sth	r3,6(r2)
    g_pCB->TempProtocolHeader.Len	= _SL_PROTOCOL_CALC_LEN(pCmdCtrl,pCmdExt);
100044bc:	d0a7a817 	ldw	r2,-24928(gp)
100044c0:	e0ffff17 	ldw	r3,-4(fp)
100044c4:	18001026 	beq	r3,zero,10004508 <_SlDrvDataReadOp+0x2b8>
100044c8:	e0fffd17 	ldw	r3,-12(fp)
100044cc:	18c00083 	ldbu	r3,2(r3)
100044d0:	18c03fcc 	andi	r3,r3,255
100044d4:	18c000c4 	addi	r3,r3,3
100044d8:	1809883a 	mov	r4,r3
100044dc:	00ffff04 	movi	r3,-4
100044e0:	20c6703a 	and	r3,r4,r3
100044e4:	1809883a 	mov	r4,r3
100044e8:	e0ffff17 	ldw	r3,-4(fp)
100044ec:	18c0000b 	ldhu	r3,0(r3)
100044f0:	18c000c4 	addi	r3,r3,3
100044f4:	180b883a 	mov	r5,r3
100044f8:	00ffff04 	movi	r3,-4
100044fc:	28c6703a 	and	r3,r5,r3
10004500:	20c7883a 	add	r3,r4,r3
10004504:	00000706 	br	10004524 <_SlDrvDataReadOp+0x2d4>
10004508:	e0fffd17 	ldw	r3,-12(fp)
1000450c:	18c00083 	ldbu	r3,2(r3)
10004510:	18c03fcc 	andi	r3,r3,255
10004514:	18c000c4 	addi	r3,r3,3
10004518:	1809883a 	mov	r4,r3
1000451c:	00ffff04 	movi	r3,-4
10004520:	20c6703a 	and	r3,r4,r3
10004524:	10c0020d 	sth	r3,8(r2)
    g_pCB->FunctionParams.pCmdCtrl      = pCmdCtrl;
10004528:	d0a7a817 	ldw	r2,-24928(gp)
1000452c:	e0fffd17 	ldw	r3,-12(fp)
10004530:	10c02715 	stw	r3,156(r2)
    g_pCB->FunctionParams.pTxRxDescBuff = (_u8 *)pTxRxDescBuff;
10004534:	d0a7a817 	ldw	r2,-24928(gp)
10004538:	e0fffe17 	ldw	r3,-8(fp)
1000453c:	10c02815 	stw	r3,160(r2)
    g_pCB->FunctionParams.pCmdExt       = pCmdExt;
10004540:	d0a7a817 	ldw	r2,-24928(gp)
10004544:	e0ffff17 	ldw	r3,-4(fp)
10004548:	10c02915 	stw	r3,164(r2)
    RetVal =  _SlDrvMsgWrite();
1000454c:	000493c0 	call	1000493c <_SlDrvMsgWrite>
10004550:	e0bff88d 	sth	r2,-30(fp)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->GlobalLockObj));
10004554:	d0a7a817 	ldw	r2,-24928(gp)
10004558:	10800104 	addi	r2,r2,4
1000455c:	1009883a 	mov	r4,r2
10004560:	01400cc4 	movi	r5,51
10004564:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004568:	10803fcc 	andi	r2,r2,255
1000456c:	1080201c 	xori	r2,r2,128
10004570:	10bfe004 	addi	r2,r2,-128
10004574:	e0bff90d 	sth	r2,-28(fp)
10004578:	e0bff90f 	ldh	r2,-28(fp)
1000457c:	10000126 	beq	r2,zero,10004584 <_SlDrvDataReadOp+0x334>
10004580:	003fff06 	br	10004580 <__alt_data_end+0xf0004580>

    if(SL_OS_RET_CODE_OK == RetVal)
10004584:	e0bff88f 	ldh	r2,-30(fp)
10004588:	1000111e 	bne	r2,zero,100045d0 <_SlDrvDataReadOp+0x380>
    {
        /* Wait for response message. Will be signalled by _SlDrvMsgRead. */
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
1000458c:	d0e7a817 	ldw	r3,-24928(gp)
10004590:	e0bff503 	ldbu	r2,-44(fp)
10004594:	10800324 	muli	r2,r2,12
10004598:	10800404 	addi	r2,r2,16
1000459c:	1885883a 	add	r2,r3,r2
100045a0:	1009883a 	mov	r4,r2
100045a4:	01400884 	movi	r5,34
100045a8:	01800444 	movi	r6,17
100045ac:	01c03fc4 	movi	r7,255
100045b0:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100045b4:	10803fcc 	andi	r2,r2,255
100045b8:	1080201c 	xori	r2,r2,128
100045bc:	10bfe004 	addi	r2,r2,-128
100045c0:	e0bff98d 	sth	r2,-26(fp)
100045c4:	e0bff98f 	ldh	r2,-26(fp)
100045c8:	10000126 	beq	r2,zero,100045d0 <_SlDrvDataReadOp+0x380>
100045cc:	003fff06 	br	100045cc <__alt_data_end+0xf00045cc>
    }

    _SlDrvReleasePoolObj(ObjIdx);
100045d0:	e0bff503 	ldbu	r2,-44(fp)
100045d4:	1009883a 	mov	r4,r2
100045d8:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return RetVal;
100045dc:	e0bff88b 	ldhu	r2,-30(fp)
}
100045e0:	e037883a 	mov	sp,fp
100045e4:	dfc00117 	ldw	ra,4(sp)
100045e8:	df000017 	ldw	fp,0(sp)
100045ec:	dec00204 	addi	sp,sp,8
100045f0:	f800283a 	ret

100045f4 <_SlDrvDataWriteOp>:
_SlReturnVal_t _SlDrvDataWriteOp(
    _SlSd_t             Sd,
    _SlCmdCtrl_t  *pCmdCtrl ,
    void                *pTxRxDescBuff ,
    _SlCmdExt_t         *pCmdExt)
{
100045f4:	defff504 	addi	sp,sp,-44
100045f8:	dfc00a15 	stw	ra,40(sp)
100045fc:	df000915 	stw	fp,36(sp)
10004600:	df000904 	addi	fp,sp,36
10004604:	2005883a 	mov	r2,r4
10004608:	e17ffd15 	stw	r5,-12(fp)
1000460c:	e1bffe15 	stw	r6,-8(fp)
10004610:	e1ffff15 	stw	r7,-4(fp)
10004614:	e0bffc05 	stb	r2,-16(fp)
    _SlReturnVal_t  RetVal = SL_EAGAIN; /*  initiated as SL_EAGAIN for the non blocking mode */
10004618:	00bffd44 	movi	r2,-11
1000461c:	e0bff70d 	sth	r2,-36(fp)
    while( 1 )
    {
        /*  Do Flow Control check/update for DataWrite operation */
        OSI_RET_OK_CHECK( sl_LockObjLock(&g_pCB->FlowContCB.TxLockObj, SL_OS_WAIT_FOREVER) );
10004620:	d0a7a817 	ldw	r2,-24928(gp)
10004624:	10802504 	addi	r2,r2,148
10004628:	1009883a 	mov	r4,r2
1000462c:	01400cc4 	movi	r5,51
10004630:	01801104 	movi	r6,68
10004634:	01c03fc4 	movi	r7,255
10004638:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000463c:	10803fcc 	andi	r2,r2,255
10004640:	1080201c 	xori	r2,r2,128
10004644:	10bfe004 	addi	r2,r2,-128
10004648:	e0bff78d 	sth	r2,-34(fp)
1000464c:	e0bff78f 	ldh	r2,-34(fp)
10004650:	10000126 	beq	r2,zero,10004658 <_SlDrvDataWriteOp+0x64>
10004654:	003fff06 	br	10004654 <__alt_data_end+0xf0004654>

        /*  Clear SyncObj for the case it was signalled before TxPoolCnt */
        /*  dropped below '1' (last Data buffer was taken) */
        /* OSI_RET_OK_CHECK( sl_SyncObjClear(&g_pCB->FlowContCB.TxSyncObj) ); */
        sl_SyncObjClear(&g_pCB->FlowContCB.TxSyncObj);
10004658:	d0a7a817 	ldw	r2,-24928(gp)
1000465c:	10802544 	addi	r2,r2,149
10004660:	1009883a 	mov	r4,r2
10004664:	01400884 	movi	r5,34
10004668:	01800444 	movi	r6,17
1000466c:	01c00044 	movi	r7,1
10004670:	00093c40 	call	100093c4 <_SlNonOsSemGet>

        /*  we have indication that the last send has failed - socket is no longer valid for operations  */
        if(g_pCB->SocketTXFailure & (1<<(Sd & BSD_SOCKET_ID_MASK)))
10004674:	d0a7a817 	ldw	r2,-24928(gp)
10004678:	10802683 	ldbu	r2,154(r2)
1000467c:	10c03fcc 	andi	r3,r2,255
10004680:	e0bffc03 	ldbu	r2,-16(fp)
10004684:	108003cc 	andi	r2,r2,15
10004688:	1885d83a 	sra	r2,r3,r2
1000468c:	1080004c 	andi	r2,r2,1
10004690:	10000e26 	beq	r2,zero,100046cc <_SlDrvDataWriteOp+0xd8>
        {
            OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
10004694:	d0a7a817 	ldw	r2,-24928(gp)
10004698:	10802504 	addi	r2,r2,148
1000469c:	1009883a 	mov	r4,r2
100046a0:	01400cc4 	movi	r5,51
100046a4:	000938c0 	call	1000938c <_SlNonOsSemSet>
100046a8:	10803fcc 	andi	r2,r2,255
100046ac:	1080201c 	xori	r2,r2,128
100046b0:	10bfe004 	addi	r2,r2,-128
100046b4:	e0bffb0d 	sth	r2,-20(fp)
100046b8:	e0bffb0f 	ldh	r2,-20(fp)
100046bc:	10000126 	beq	r2,zero,100046c4 <_SlDrvDataWriteOp+0xd0>
100046c0:	003fff06 	br	100046c0 <__alt_data_end+0xf00046c0>
            return SL_SOC_ERROR;
100046c4:	00bfffc4 	movi	r2,-1
100046c8:	00009706 	br	10004928 <_SlDrvDataWriteOp+0x334>
        }
        if(g_pCB->FlowContCB.TxPoolCnt <= FLOW_CONT_MIN + 1)
100046cc:	d0a7a817 	ldw	r2,-24928(gp)
100046d0:	108024c3 	ldbu	r2,147(r2)
100046d4:	10803fcc 	andi	r2,r2,255
100046d8:	108000e8 	cmpgeui	r2,r2,3
100046dc:	1000231e 	bne	r2,zero,1000476c <_SlDrvDataWriteOp+0x178>
        {
            /*  we have indication that this socket is set as blocking and we try to  */
            /*  unblock it - return an error */
            if( g_pCB->SocketNonBlocking >> (Sd & BSD_SOCKET_ID_MASK) )
100046e0:	d0a7a817 	ldw	r2,-24928(gp)
100046e4:	10802643 	ldbu	r2,153(r2)
100046e8:	10c03fcc 	andi	r3,r2,255
100046ec:	e0bffc03 	ldbu	r2,-16(fp)
100046f0:	108003cc 	andi	r2,r2,15
100046f4:	1885d83a 	sra	r2,r3,r2
100046f8:	10000e26 	beq	r2,zero,10004734 <_SlDrvDataWriteOp+0x140>
            {
                OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
100046fc:	d0a7a817 	ldw	r2,-24928(gp)
10004700:	10802504 	addi	r2,r2,148
10004704:	1009883a 	mov	r4,r2
10004708:	01400cc4 	movi	r5,51
1000470c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004710:	10803fcc 	andi	r2,r2,255
10004714:	1080201c 	xori	r2,r2,128
10004718:	10bfe004 	addi	r2,r2,-128
1000471c:	e0bff88d 	sth	r2,-30(fp)
10004720:	e0bff88f 	ldh	r2,-30(fp)
10004724:	10000126 	beq	r2,zero,1000472c <_SlDrvDataWriteOp+0x138>
10004728:	003fff06 	br	10004728 <__alt_data_end+0xf0004728>
                return RetVal;
1000472c:	e0bff70b 	ldhu	r2,-36(fp)
10004730:	00007d06 	br	10004928 <_SlDrvDataWriteOp+0x334>
            }
            /*  If TxPoolCnt was increased by other thread at this moment, */
            /*  TxSyncObj won't wait here */
            OSI_RET_OK_CHECK( sl_SyncObjWait(&g_pCB->FlowContCB.TxSyncObj, SL_OS_WAIT_FOREVER) );
10004734:	d0a7a817 	ldw	r2,-24928(gp)
10004738:	10802544 	addi	r2,r2,149
1000473c:	1009883a 	mov	r4,r2
10004740:	01400884 	movi	r5,34
10004744:	01800444 	movi	r6,17
10004748:	01c03fc4 	movi	r7,255
1000474c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004750:	10803fcc 	andi	r2,r2,255
10004754:	1080201c 	xori	r2,r2,128
10004758:	10bfe004 	addi	r2,r2,-128
1000475c:	e0bff80d 	sth	r2,-32(fp)
10004760:	e0bff80f 	ldh	r2,-32(fp)
10004764:	10000126 	beq	r2,zero,1000476c <_SlDrvDataWriteOp+0x178>
10004768:	003fff06 	br	10004768 <__alt_data_end+0xf0004768>
        }
        if(g_pCB->FlowContCB.TxPoolCnt > FLOW_CONT_MIN + 1 )
1000476c:	d0a7a817 	ldw	r2,-24928(gp)
10004770:	108024c3 	ldbu	r2,147(r2)
10004774:	10803fcc 	andi	r2,r2,255
10004778:	108000f0 	cmpltui	r2,r2,3
1000477c:	10000f1e 	bne	r2,zero,100047bc <_SlDrvDataWriteOp+0x1c8>
        {
            break;
10004780:	0001883a 	nop
        else
        {
            OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
        }
    }
    OSI_RET_OK_CHECK( sl_LockObjLock(&g_pCB->GlobalLockObj, SL_OS_WAIT_FOREVER) );
10004784:	d0a7a817 	ldw	r2,-24928(gp)
10004788:	10800104 	addi	r2,r2,4
1000478c:	1009883a 	mov	r4,r2
10004790:	01400cc4 	movi	r5,51
10004794:	01801104 	movi	r6,68
10004798:	01c03fc4 	movi	r7,255
1000479c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100047a0:	10803fcc 	andi	r2,r2,255
100047a4:	1080201c 	xori	r2,r2,128
100047a8:	10bfe004 	addi	r2,r2,-128
100047ac:	e0bff98d 	sth	r2,-26(fp)
100047b0:	e0bff98f 	ldh	r2,-26(fp)
100047b4:	10000f26 	beq	r2,zero,100047f4 <_SlDrvDataWriteOp+0x200>
100047b8:	00000d06 	br	100047f0 <_SlDrvDataWriteOp+0x1fc>
        {
            break;
        }
        else
        {
            OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
100047bc:	d0a7a817 	ldw	r2,-24928(gp)
100047c0:	10802504 	addi	r2,r2,148
100047c4:	1009883a 	mov	r4,r2
100047c8:	01400cc4 	movi	r5,51
100047cc:	000938c0 	call	1000938c <_SlNonOsSemSet>
100047d0:	10803fcc 	andi	r2,r2,255
100047d4:	1080201c 	xori	r2,r2,128
100047d8:	10bfe004 	addi	r2,r2,-128
100047dc:	e0bff90d 	sth	r2,-28(fp)
100047e0:	e0bff90f 	ldh	r2,-28(fp)
100047e4:	10000126 	beq	r2,zero,100047ec <_SlDrvDataWriteOp+0x1f8>
100047e8:	003fff06 	br	100047e8 <__alt_data_end+0xf00047e8>
        }
    }
100047ec:	003f8c06 	br	10004620 <__alt_data_end+0xf0004620>
    OSI_RET_OK_CHECK( sl_LockObjLock(&g_pCB->GlobalLockObj, SL_OS_WAIT_FOREVER) );
100047f0:	003fff06 	br	100047f0 <__alt_data_end+0xf00047f0>

    VERIFY_PROTOCOL(g_pCB->FlowContCB.TxPoolCnt > FLOW_CONT_MIN + 1 );
100047f4:	d0a7a817 	ldw	r2,-24928(gp)
100047f8:	108024c3 	ldbu	r2,147(r2)
100047fc:	10803fcc 	andi	r2,r2,255
10004800:	108000e8 	cmpgeui	r2,r2,3
10004804:	1000011e 	bne	r2,zero,1000480c <_SlDrvDataWriteOp+0x218>
10004808:	003fff06 	br	10004808 <__alt_data_end+0xf0004808>
    g_pCB->FlowContCB.TxPoolCnt--;
1000480c:	d0a7a817 	ldw	r2,-24928(gp)
10004810:	10c024c3 	ldbu	r3,147(r2)
10004814:	18ffffc4 	addi	r3,r3,-1
10004818:	10c024c5 	stb	r3,147(r2)

    OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->FlowContCB.TxLockObj) );
1000481c:	d0a7a817 	ldw	r2,-24928(gp)
10004820:	10802504 	addi	r2,r2,148
10004824:	1009883a 	mov	r4,r2
10004828:	01400cc4 	movi	r5,51
1000482c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004830:	10803fcc 	andi	r2,r2,255
10004834:	1080201c 	xori	r2,r2,128
10004838:	10bfe004 	addi	r2,r2,-128
1000483c:	e0bffa0d 	sth	r2,-24(fp)
10004840:	e0bffa0f 	ldh	r2,-24(fp)
10004844:	10000126 	beq	r2,zero,1000484c <_SlDrvDataWriteOp+0x258>
10004848:	003fff06 	br	10004848 <__alt_data_end+0xf0004848>

    /*  send the message */
    g_pCB->TempProtocolHeader.Opcode 	= pCmdCtrl->Opcode;
1000484c:	d0a7a817 	ldw	r2,-24928(gp)
10004850:	e0fffd17 	ldw	r3,-12(fp)
10004854:	18c0000b 	ldhu	r3,0(r3)
10004858:	10c0018d 	sth	r3,6(r2)
    g_pCB->TempProtocolHeader.Len	= _SL_PROTOCOL_CALC_LEN(pCmdCtrl,pCmdExt);
1000485c:	d0a7a817 	ldw	r2,-24928(gp)
10004860:	e0ffff17 	ldw	r3,-4(fp)
10004864:	18001026 	beq	r3,zero,100048a8 <_SlDrvDataWriteOp+0x2b4>
10004868:	e0fffd17 	ldw	r3,-12(fp)
1000486c:	18c00083 	ldbu	r3,2(r3)
10004870:	18c03fcc 	andi	r3,r3,255
10004874:	18c000c4 	addi	r3,r3,3
10004878:	1809883a 	mov	r4,r3
1000487c:	00ffff04 	movi	r3,-4
10004880:	20c6703a 	and	r3,r4,r3
10004884:	1809883a 	mov	r4,r3
10004888:	e0ffff17 	ldw	r3,-4(fp)
1000488c:	18c0000b 	ldhu	r3,0(r3)
10004890:	18c000c4 	addi	r3,r3,3
10004894:	180b883a 	mov	r5,r3
10004898:	00ffff04 	movi	r3,-4
1000489c:	28c6703a 	and	r3,r5,r3
100048a0:	20c7883a 	add	r3,r4,r3
100048a4:	00000706 	br	100048c4 <_SlDrvDataWriteOp+0x2d0>
100048a8:	e0fffd17 	ldw	r3,-12(fp)
100048ac:	18c00083 	ldbu	r3,2(r3)
100048b0:	18c03fcc 	andi	r3,r3,255
100048b4:	18c000c4 	addi	r3,r3,3
100048b8:	1809883a 	mov	r4,r3
100048bc:	00ffff04 	movi	r3,-4
100048c0:	20c6703a 	and	r3,r4,r3
100048c4:	10c0020d 	sth	r3,8(r2)

    g_pCB->FunctionParams.pCmdCtrl = pCmdCtrl;
100048c8:	d0a7a817 	ldw	r2,-24928(gp)
100048cc:	e0fffd17 	ldw	r3,-12(fp)
100048d0:	10c02715 	stw	r3,156(r2)
    g_pCB->FunctionParams.pTxRxDescBuff = pTxRxDescBuff;
100048d4:	d0a7a817 	ldw	r2,-24928(gp)
100048d8:	e0fffe17 	ldw	r3,-8(fp)
100048dc:	10c02815 	stw	r3,160(r2)
    g_pCB->FunctionParams.pCmdExt = pCmdExt;
100048e0:	d0a7a817 	ldw	r2,-24928(gp)
100048e4:	e0ffff17 	ldw	r3,-4(fp)
100048e8:	10c02915 	stw	r3,164(r2)
    RetVal =  _SlDrvMsgWrite();
100048ec:	000493c0 	call	1000493c <_SlDrvMsgWrite>
100048f0:	e0bff70d 	sth	r2,-36(fp)

    OSI_RET_OK_CHECK( sl_LockObjUnlock(&g_pCB->GlobalLockObj) );
100048f4:	d0a7a817 	ldw	r2,-24928(gp)
100048f8:	10800104 	addi	r2,r2,4
100048fc:	1009883a 	mov	r4,r2
10004900:	01400cc4 	movi	r5,51
10004904:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004908:	10803fcc 	andi	r2,r2,255
1000490c:	1080201c 	xori	r2,r2,128
10004910:	10bfe004 	addi	r2,r2,-128
10004914:	e0bffa8d 	sth	r2,-22(fp)
10004918:	e0bffa8f 	ldh	r2,-22(fp)
1000491c:	10000126 	beq	r2,zero,10004924 <_SlDrvDataWriteOp+0x330>
10004920:	003fff06 	br	10004920 <__alt_data_end+0xf0004920>

    return RetVal;
10004924:	e0bff70b 	ldhu	r2,-36(fp)
}
10004928:	e037883a 	mov	sp,fp
1000492c:	dfc00117 	ldw	ra,4(sp)
10004930:	df000017 	ldw	fp,0(sp)
10004934:	dec00204 	addi	sp,sp,8
10004938:	f800283a 	ret

1000493c <_SlDrvMsgWrite>:

/* ******************************************************************************/
/*  _SlDrvMsgWrite */
/* ******************************************************************************/
_SlReturnVal_t _SlDrvMsgWrite(void)
{
1000493c:	defff904 	addi	sp,sp,-28
10004940:	dfc00615 	stw	ra,24(sp)
10004944:	df000515 	stw	fp,20(sp)
10004948:	df000504 	addi	fp,sp,20
    VERIFY_PROTOCOL(NULL != g_pCB->FunctionParams.pCmdCtrl);
1000494c:	d0a7a817 	ldw	r2,-24928(gp)
10004950:	10802717 	ldw	r2,156(r2)
10004954:	1000011e 	bne	r2,zero,1000495c <_SlDrvMsgWrite+0x20>
10004958:	003fff06 	br	10004958 <__alt_data_end+0xf0004958>

    g_pCB->TempProtocolHeader.Opcode 	= g_pCB->FunctionParams.pCmdCtrl->Opcode;
1000495c:	d0a7a817 	ldw	r2,-24928(gp)
10004960:	d0e7a817 	ldw	r3,-24928(gp)
10004964:	18c02717 	ldw	r3,156(r3)
10004968:	18c0000b 	ldhu	r3,0(r3)
1000496c:	10c0018d 	sth	r3,6(r2)
    g_pCB->TempProtocolHeader.Len	= _SL_PROTOCOL_CALC_LEN(g_pCB->FunctionParams.pCmdCtrl,
10004970:	d0a7a817 	ldw	r2,-24928(gp)
10004974:	d0e7a817 	ldw	r3,-24928(gp)
10004978:	18c02917 	ldw	r3,164(r3)
1000497c:	18001226 	beq	r3,zero,100049c8 <_SlDrvMsgWrite+0x8c>
10004980:	d0e7a817 	ldw	r3,-24928(gp)
10004984:	18c02717 	ldw	r3,156(r3)
10004988:	18c00083 	ldbu	r3,2(r3)
1000498c:	18c03fcc 	andi	r3,r3,255
10004990:	18c000c4 	addi	r3,r3,3
10004994:	1809883a 	mov	r4,r3
10004998:	00ffff04 	movi	r3,-4
1000499c:	20c6703a 	and	r3,r4,r3
100049a0:	1809883a 	mov	r4,r3
100049a4:	d0e7a817 	ldw	r3,-24928(gp)
100049a8:	18c02917 	ldw	r3,164(r3)
100049ac:	18c0000b 	ldhu	r3,0(r3)
100049b0:	18c000c4 	addi	r3,r3,3
100049b4:	180b883a 	mov	r5,r3
100049b8:	00ffff04 	movi	r3,-4
100049bc:	28c6703a 	and	r3,r5,r3
100049c0:	20c7883a 	add	r3,r4,r3
100049c4:	00000806 	br	100049e8 <_SlDrvMsgWrite+0xac>
100049c8:	d0e7a817 	ldw	r3,-24928(gp)
100049cc:	18c02717 	ldw	r3,156(r3)
100049d0:	18c00083 	ldbu	r3,2(r3)
100049d4:	18c03fcc 	andi	r3,r3,255
100049d8:	18c000c4 	addi	r3,r3,3
100049dc:	1809883a 	mov	r4,r3
100049e0:	00ffff04 	movi	r3,-4
100049e4:	20c6703a 	and	r3,r4,r3
100049e8:	10c0020d 	sth	r3,8(r2)
        g_pCB->FunctionParams.pCmdExt);
    /*  */
    if (g_pCB->RelayFlagsViaRxPayload == TRUE)
100049ec:	d0a7a817 	ldw	r2,-24928(gp)
100049f0:	108026c3 	ldbu	r2,155(r2)
100049f4:	10803fcc 	andi	r2,r2,255
100049f8:	10800058 	cmpnei	r2,r2,1
100049fc:	1000081e 	bne	r2,zero,10004a20 <_SlDrvMsgWrite+0xe4>
    {
        g_pCB->TempProtocolHeader.Len = g_pCB->TempProtocolHeader.Len + g_pCB->FunctionParams.pCmdExt->RxPayloadLen;
10004a00:	d0a7a817 	ldw	r2,-24928(gp)
10004a04:	d0e7a817 	ldw	r3,-24928(gp)
10004a08:	1900020b 	ldhu	r4,8(r3)
10004a0c:	d0e7a817 	ldw	r3,-24928(gp)
10004a10:	18c02917 	ldw	r3,164(r3)
10004a14:	18c0008b 	ldhu	r3,2(r3)
10004a18:	20c7883a 	add	r3,r4,r3
10004a1c:	10c0020d 	sth	r3,8(r2)
#ifdef SL_IF_TYPE_UART
    /*  Write long sync pattern */
    NWP_IF_WRITE_CHECK(g_pCB->FD, (_u8 *)&g_H2NSyncPattern.Long, 2*SYNC_PATTERN_LEN);
#else
    /*  Write short sync pattern */
    NWP_IF_WRITE_CHECK(g_pCB->FD, (_u8 *)&g_H2NSyncPattern.Short, SYNC_PATTERN_LEN);
10004a20:	00800104 	movi	r2,4
10004a24:	e0bffb0d 	sth	r2,-20(fp)
10004a28:	d0a7a817 	ldw	r2,-24928(gp)
10004a2c:	10800017 	ldw	r2,0(r2)
10004a30:	1007883a 	mov	r3,r2
10004a34:	e0bffb0f 	ldh	r2,-20(fp)
10004a38:	1809883a 	mov	r4,r3
10004a3c:	d1600a04 	addi	r5,gp,-32728
10004a40:	100d883a 	mov	r6,r2
10004a44:	000c5240 	call	1000c524 <spiSL_Write>
10004a48:	e0bffb8d 	sth	r2,-18(fp)
10004a4c:	e0fffb0f 	ldh	r3,-20(fp)
10004a50:	e0bffb8f 	ldh	r2,-18(fp)
10004a54:	18800126 	beq	r3,r2,10004a5c <_SlDrvMsgWrite+0x120>
10004a58:	003fff06 	br	10004a58 <__alt_data_end+0xf0004a58>
#endif

    /*  Header */
    NWP_IF_WRITE_CHECK(g_pCB->FD, (_u8 *)&g_pCB->TempProtocolHeader, _SL_CMD_HDR_SIZE);
10004a5c:	00800104 	movi	r2,4
10004a60:	e0bffc0d 	sth	r2,-16(fp)
10004a64:	d0a7a817 	ldw	r2,-24928(gp)
10004a68:	10800017 	ldw	r2,0(r2)
10004a6c:	1009883a 	mov	r4,r2
10004a70:	d0a7a817 	ldw	r2,-24928(gp)
10004a74:	10c00184 	addi	r3,r2,6
10004a78:	e0bffc0f 	ldh	r2,-16(fp)
10004a7c:	180b883a 	mov	r5,r3
10004a80:	100d883a 	mov	r6,r2
10004a84:	000c5240 	call	1000c524 <spiSL_Write>
10004a88:	e0bffc8d 	sth	r2,-14(fp)
10004a8c:	e0fffc0f 	ldh	r3,-16(fp)
10004a90:	e0bffc8f 	ldh	r2,-14(fp)
10004a94:	18800126 	beq	r3,r2,10004a9c <_SlDrvMsgWrite+0x160>
10004a98:	003fff06 	br	10004a98 <__alt_data_end+0xf0004a98>

    /*  Descriptors */
    if (g_pCB->FunctionParams.pTxRxDescBuff && g_pCB->FunctionParams.pCmdCtrl->TxDescLen > 0)
10004a9c:	d0a7a817 	ldw	r2,-24928(gp)
10004aa0:	10802817 	ldw	r2,160(r2)
10004aa4:	10001c26 	beq	r2,zero,10004b18 <_SlDrvMsgWrite+0x1dc>
10004aa8:	d0a7a817 	ldw	r2,-24928(gp)
10004aac:	10802717 	ldw	r2,156(r2)
10004ab0:	10800083 	ldbu	r2,2(r2)
10004ab4:	10803fcc 	andi	r2,r2,255
10004ab8:	10001726 	beq	r2,zero,10004b18 <_SlDrvMsgWrite+0x1dc>
    {
        NWP_IF_WRITE_CHECK(g_pCB->FD, g_pCB->FunctionParams.pTxRxDescBuff, 
10004abc:	d0a7a817 	ldw	r2,-24928(gp)
10004ac0:	10802717 	ldw	r2,156(r2)
10004ac4:	10800083 	ldbu	r2,2(r2)
10004ac8:	10803fcc 	andi	r2,r2,255
10004acc:	108000c4 	addi	r2,r2,3
10004ad0:	1007883a 	mov	r3,r2
10004ad4:	00bfff04 	movi	r2,-4
10004ad8:	1884703a 	and	r2,r3,r2
10004adc:	e0bffd0d 	sth	r2,-12(fp)
10004ae0:	d0a7a817 	ldw	r2,-24928(gp)
10004ae4:	10800017 	ldw	r2,0(r2)
10004ae8:	1009883a 	mov	r4,r2
10004aec:	d0a7a817 	ldw	r2,-24928(gp)
10004af0:	10c02817 	ldw	r3,160(r2)
10004af4:	e0bffd0f 	ldh	r2,-12(fp)
10004af8:	180b883a 	mov	r5,r3
10004afc:	100d883a 	mov	r6,r2
10004b00:	000c5240 	call	1000c524 <spiSL_Write>
10004b04:	e0bffd8d 	sth	r2,-10(fp)
10004b08:	e0fffd0f 	ldh	r3,-12(fp)
10004b0c:	e0bffd8f 	ldh	r2,-10(fp)
10004b10:	18800126 	beq	r3,r2,10004b18 <_SlDrvMsgWrite+0x1dc>
10004b14:	003fff06 	br	10004b14 <__alt_data_end+0xf0004b14>
    }

    /*  A special mode where Rx payload and Rx length are used as Tx as well */
    /*  This mode requires no Rx payload on the response and currently used by fs_Close and sl_Send on */
    /*  transceiver mode */
    if (g_pCB->RelayFlagsViaRxPayload == TRUE )
10004b18:	d0a7a817 	ldw	r2,-24928(gp)
10004b1c:	108026c3 	ldbu	r2,155(r2)
10004b20:	10803fcc 	andi	r2,r2,255
10004b24:	10800058 	cmpnei	r2,r2,1
10004b28:	1000191e 	bne	r2,zero,10004b90 <_SlDrvMsgWrite+0x254>
    {
        g_pCB->RelayFlagsViaRxPayload = FALSE;
10004b2c:	d0a7a817 	ldw	r2,-24928(gp)
10004b30:	100026c5 	stb	zero,155(r2)
        NWP_IF_WRITE_CHECK(g_pCB->FD, g_pCB->FunctionParams.pCmdExt->pRxPayload, 
10004b34:	d0a7a817 	ldw	r2,-24928(gp)
10004b38:	10802917 	ldw	r2,164(r2)
10004b3c:	1080008b 	ldhu	r2,2(r2)
10004b40:	108000c4 	addi	r2,r2,3
10004b44:	1007883a 	mov	r3,r2
10004b48:	00bfff04 	movi	r2,-4
10004b4c:	1884703a 	and	r2,r3,r2
10004b50:	e0bffe0d 	sth	r2,-8(fp)
10004b54:	d0a7a817 	ldw	r2,-24928(gp)
10004b58:	10800017 	ldw	r2,0(r2)
10004b5c:	1009883a 	mov	r4,r2
10004b60:	d0a7a817 	ldw	r2,-24928(gp)
10004b64:	10802917 	ldw	r2,164(r2)
10004b68:	10c00317 	ldw	r3,12(r2)
10004b6c:	e0bffe0f 	ldh	r2,-8(fp)
10004b70:	180b883a 	mov	r5,r3
10004b74:	100d883a 	mov	r6,r2
10004b78:	000c5240 	call	1000c524 <spiSL_Write>
10004b7c:	e0bffe8d 	sth	r2,-6(fp)
10004b80:	e0fffe0f 	ldh	r3,-8(fp)
10004b84:	e0bffe8f 	ldh	r2,-6(fp)
10004b88:	18800126 	beq	r3,r2,10004b90 <_SlDrvMsgWrite+0x254>
10004b8c:	003fff06 	br	10004b8c <__alt_data_end+0xf0004b8c>
            _SL_PROTOCOL_ALIGN_SIZE(g_pCB->FunctionParams.pCmdExt->RxPayloadLen));
    }

    /*  Payload */
    if (g_pCB->FunctionParams.pCmdExt && g_pCB->FunctionParams.pCmdExt->TxPayloadLen > 0)
10004b90:	d0a7a817 	ldw	r2,-24928(gp)
10004b94:	10802917 	ldw	r2,164(r2)
10004b98:	10002326 	beq	r2,zero,10004c28 <_SlDrvMsgWrite+0x2ec>
10004b9c:	d0a7a817 	ldw	r2,-24928(gp)
10004ba0:	10802917 	ldw	r2,164(r2)
10004ba4:	1080000b 	ldhu	r2,0(r2)
10004ba8:	10bfffcc 	andi	r2,r2,65535
10004bac:	10001e26 	beq	r2,zero,10004c28 <_SlDrvMsgWrite+0x2ec>
    {
        /*  If the message has payload, it is mandatory that the message's arguments are protocol aligned. */
        /*  Otherwise the aligning of arguments will create a gap between arguments and payload. */
        VERIFY_PROTOCOL(_SL_IS_PROTOCOL_ALIGNED_SIZE(g_pCB->FunctionParams.pCmdCtrl->TxDescLen));
10004bb0:	d0a7a817 	ldw	r2,-24928(gp)
10004bb4:	10802717 	ldw	r2,156(r2)
10004bb8:	10800083 	ldbu	r2,2(r2)
10004bbc:	10803fcc 	andi	r2,r2,255
10004bc0:	108000cc 	andi	r2,r2,3
10004bc4:	10000126 	beq	r2,zero,10004bcc <_SlDrvMsgWrite+0x290>
10004bc8:	003fff06 	br	10004bc8 <__alt_data_end+0xf0004bc8>

        NWP_IF_WRITE_CHECK(g_pCB->FD, g_pCB->FunctionParams.pCmdExt->pTxPayload, 
10004bcc:	d0a7a817 	ldw	r2,-24928(gp)
10004bd0:	10802917 	ldw	r2,164(r2)
10004bd4:	1080000b 	ldhu	r2,0(r2)
10004bd8:	108000c4 	addi	r2,r2,3
10004bdc:	1007883a 	mov	r3,r2
10004be0:	00bfff04 	movi	r2,-4
10004be4:	1884703a 	and	r2,r3,r2
10004be8:	e0bfff0d 	sth	r2,-4(fp)
10004bec:	d0a7a817 	ldw	r2,-24928(gp)
10004bf0:	10800017 	ldw	r2,0(r2)
10004bf4:	1009883a 	mov	r4,r2
10004bf8:	d0a7a817 	ldw	r2,-24928(gp)
10004bfc:	10802917 	ldw	r2,164(r2)
10004c00:	10c00217 	ldw	r3,8(r2)
10004c04:	e0bfff0f 	ldh	r2,-4(fp)
10004c08:	180b883a 	mov	r5,r3
10004c0c:	100d883a 	mov	r6,r2
10004c10:	000c5240 	call	1000c524 <spiSL_Write>
10004c14:	e0bfff8d 	sth	r2,-2(fp)
10004c18:	e0ffff0f 	ldh	r3,-4(fp)
10004c1c:	e0bfff8f 	ldh	r2,-2(fp)
10004c20:	18800126 	beq	r3,r2,10004c28 <_SlDrvMsgWrite+0x2ec>
10004c24:	003fff06 	br	10004c24 <__alt_data_end+0xf0004c24>

#ifdef SL_START_WRITE_STAT
    sl_IfEndWriteSequence(g_pCB->FD);
#endif

    return SL_OS_RET_CODE_OK;
10004c28:	0005883a 	mov	r2,zero
}
10004c2c:	e037883a 	mov	sp,fp
10004c30:	dfc00117 	ldw	ra,4(sp)
10004c34:	df000017 	ldw	fp,0(sp)
10004c38:	dec00204 	addi	sp,sp,8
10004c3c:	f800283a 	ret

10004c40 <_SlDrvMsgRead>:

/* ******************************************************************************/
/*  _SlDrvMsgRead  */
/* ******************************************************************************/
_SlReturnVal_t _SlDrvMsgRead(void)
{
10004c40:	deffe904 	addi	sp,sp,-92
10004c44:	dfc01615 	stw	ra,88(sp)
10004c48:	df001515 	stw	fp,84(sp)
10004c4c:	df001504 	addi	fp,sp,84
    _u8                TailBuffer[4];
    _u16               LengthToCopy;
    _u16               AlignedLengthRecv;
    _u8                AlignSize;

    VERIFY_RET_OK(_SlDrvRxHdrRead((_u8*)(uBuf.TempBuf), &AlignSize));
10004c50:	e0fffc04 	addi	r3,fp,-16
10004c54:	e0bfff04 	addi	r2,fp,-4
10004c58:	1809883a 	mov	r4,r3
10004c5c:	100b883a 	mov	r5,r2
10004c60:	000644c0 	call	1000644c <_SlDrvRxHdrRead>
10004c64:	e0bfed0d 	sth	r2,-76(fp)
10004c68:	e0bfed0f 	ldh	r2,-76(fp)
10004c6c:	10000126 	beq	r2,zero,10004c74 <_SlDrvMsgRead+0x34>
10004c70:	003fff06 	br	10004c70 <__alt_data_end+0xf0004c70>

    /* 'Init Compelete' message bears no valid FlowControl info */
    if(SL_OPCODE_DEVICE_INITCOMPLETE != OPCODE(uBuf.TempBuf))
10004c74:	e0bffc04 	addi	r2,fp,-16
10004c78:	1080000b 	ldhu	r2,0(r2)
10004c7c:	10bfffcc 	andi	r2,r2,65535
10004c80:	10800220 	cmpeqi	r2,r2,8
10004c84:	10001d1e 	bne	r2,zero,10004cfc <_SlDrvMsgRead+0xbc>
    {
        g_pCB->FlowContCB.TxPoolCnt = ((_SlResponseHeader_t *)uBuf.TempBuf)->TxPoolCnt;
10004c88:	d0a7a817 	ldw	r2,-24928(gp)
10004c8c:	e0fffc04 	addi	r3,fp,-16
10004c90:	18c00103 	ldbu	r3,4(r3)
10004c94:	10c024c5 	stb	r3,147(r2)
        g_pCB->SocketNonBlocking = ((_SlResponseHeader_t *)uBuf.TempBuf)->SocketNonBlocking;
10004c98:	d0a7a817 	ldw	r2,-24928(gp)
10004c9c:	e0fffc04 	addi	r3,fp,-16
10004ca0:	18c001c3 	ldbu	r3,7(r3)
10004ca4:	10c02645 	stb	r3,153(r2)
        g_pCB->SocketTXFailure = ((_SlResponseHeader_t *)uBuf.TempBuf)->SocketTXFailure;
10004ca8:	d0a7a817 	ldw	r2,-24928(gp)
10004cac:	e0fffc04 	addi	r3,fp,-16
10004cb0:	18c00183 	ldbu	r3,6(r3)
10004cb4:	10c02685 	stb	r3,154(r2)

        if(g_pCB->FlowContCB.TxPoolCnt > FLOW_CONT_MIN)
10004cb8:	d0a7a817 	ldw	r2,-24928(gp)
10004cbc:	108024c3 	ldbu	r2,147(r2)
10004cc0:	10803fcc 	andi	r2,r2,255
10004cc4:	108000b0 	cmpltui	r2,r2,2
10004cc8:	10000c1e 	bne	r2,zero,10004cfc <_SlDrvMsgRead+0xbc>
        {
            OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->FlowContCB.TxSyncObj));
10004ccc:	d0a7a817 	ldw	r2,-24928(gp)
10004cd0:	10802544 	addi	r2,r2,149
10004cd4:	1009883a 	mov	r4,r2
10004cd8:	01400884 	movi	r5,34
10004cdc:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004ce0:	10803fcc 	andi	r2,r2,255
10004ce4:	1080201c 	xori	r2,r2,128
10004ce8:	10bfe004 	addi	r2,r2,-128
10004cec:	e0bfed8d 	sth	r2,-74(fp)
10004cf0:	e0bfed8f 	ldh	r2,-74(fp)
10004cf4:	10000126 	beq	r2,zero,10004cfc <_SlDrvMsgRead+0xbc>
10004cf8:	003fff06 	br	10004cf8 <__alt_data_end+0xf0004cf8>
        }
    }

    _SlDrvClassifyRxMsg(OPCODE(uBuf.TempBuf));
10004cfc:	e0bffc04 	addi	r2,fp,-16
10004d00:	1080000b 	ldhu	r2,0(r2)
10004d04:	10bfffcc 	andi	r2,r2,65535
10004d08:	1009883a 	mov	r4,r2
10004d0c:	00062840 	call	10006284 <_SlDrvClassifyRxMsg>

    switch(g_pCB->FunctionParams.AsyncExt.RxMsgClass)
10004d10:	d0a7a817 	ldw	r2,-24928(gp)
10004d14:	10802d17 	ldw	r2,180(r2)
10004d18:	10c00060 	cmpeqi	r3,r2,1
10004d1c:	1801881e 	bne	r3,zero,10005340 <_SlDrvMsgRead+0x700>
10004d20:	0080ab2e 	bgeu	zero,r2,10004fd0 <_SlDrvMsgRead+0x390>
10004d24:	108000a0 	cmpeqi	r2,r2,2
10004d28:	1000011e 	bne	r2,zero,10004d30 <_SlDrvMsgRead+0xf0>
        }
        break;

    default:
        /*  DUMMY_MSG_CLASS: Flow control message has no payload. */
        break;
10004d2c:	00022506 	br	100055c4 <_SlDrvMsgRead+0x984>

    switch(g_pCB->FunctionParams.AsyncExt.RxMsgClass)
    {
    case ASYNC_EVT_CLASS:

        VERIFY_PROTOCOL(NULL == g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10004d30:	d0a7a817 	ldw	r2,-24928(gp)
10004d34:	10802a17 	ldw	r2,168(r2)
10004d38:	10000126 	beq	r2,zero,10004d40 <_SlDrvMsgRead+0x100>
10004d3c:	003fff06 	br	10004d3c <__alt_data_end+0xf0004d3c>

#if (SL_MEMORY_MGMT == SL_MEMORY_MGMT_STATIC)
        g_pCB->FunctionParams.AsyncExt.pAsyncBuf = g_StatMem.AsyncRespBuf;
10004d40:	d0e7a817 	ldw	r3,-24928(gp)
10004d44:	008400f4 	movhi	r2,4099
10004d48:	10a4f004 	addi	r2,r2,-27712
10004d4c:	18802a15 	stw	r2,168(r3)
#else
        g_pCB->FunctionParams.AsyncExt.pAsyncBuf = sl_Malloc(SL_ASYNC_MAX_MSG_LEN);
#endif
        MALLOC_OK_CHECK(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10004d50:	d0a7a817 	ldw	r2,-24928(gp)
10004d54:	10802a17 	ldw	r2,168(r2)
10004d58:	1000011e 	bne	r2,zero,10004d60 <_SlDrvMsgRead+0x120>
10004d5c:	003fff06 	br	10004d5c <__alt_data_end+0xf0004d5c>

        sl_Memcpy(g_pCB->FunctionParams.AsyncExt.pAsyncBuf, uBuf.TempBuf, _SL_RESP_HDR_SIZE);
10004d60:	d0a7a817 	ldw	r2,-24928(gp)
10004d64:	10802a17 	ldw	r2,168(r2)
10004d68:	e0fffc03 	ldbu	r3,-16(fp)
10004d6c:	10c00005 	stb	r3,0(r2)
10004d70:	e0fffc43 	ldbu	r3,-15(fp)
10004d74:	10c00045 	stb	r3,1(r2)
10004d78:	e0fffc83 	ldbu	r3,-14(fp)
10004d7c:	10c00085 	stb	r3,2(r2)
10004d80:	e0fffcc3 	ldbu	r3,-13(fp)
10004d84:	10c000c5 	stb	r3,3(r2)
10004d88:	e0fffd03 	ldbu	r3,-12(fp)
10004d8c:	10c00105 	stb	r3,4(r2)
10004d90:	e0fffd43 	ldbu	r3,-11(fp)
10004d94:	10c00145 	stb	r3,5(r2)
10004d98:	e0fffd83 	ldbu	r3,-10(fp)
10004d9c:	10c00185 	stb	r3,6(r2)
10004da0:	e0fffdc3 	ldbu	r3,-9(fp)
10004da4:	10c001c5 	stb	r3,7(r2)

        /*  This is an Async message. Read the rest of it. */
        if (_SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf)) <= SL_ASYNC_MAX_PAYLOAD_LEN)
10004da8:	e0bffc04 	addi	r2,fp,-16
10004dac:	1080008b 	ldhu	r2,2(r2)
10004db0:	10bfffcc 	andi	r2,r2,65535
10004db4:	10ffffc4 	addi	r3,r2,-1
10004db8:	00bfff04 	movi	r2,-4
10004dbc:	1884703a 	and	r2,r3,r2
10004dc0:	10802868 	cmpgeui	r2,r2,161
10004dc4:	1000081e 	bne	r2,zero,10004de8 <_SlDrvMsgRead+0x1a8>
        {
            AlignedLengthRecv = _SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf));
10004dc8:	e0bffc04 	addi	r2,fp,-16
10004dcc:	1080008b 	ldhu	r2,2(r2)
10004dd0:	10bfffc4 	addi	r2,r2,-1
10004dd4:	1007883a 	mov	r3,r2
10004dd8:	00bfff04 	movi	r2,-4
10004ddc:	1884703a 	and	r2,r3,r2
10004de0:	e0bfeb8d 	sth	r2,-82(fp)
10004de4:	00000206 	br	10004df0 <_SlDrvMsgRead+0x1b0>
        }
        else
        {
            AlignedLengthRecv = _SL_PROTOCOL_ALIGN_SIZE(SL_ASYNC_MAX_PAYLOAD_LEN);
10004de8:	00802804 	movi	r2,160
10004dec:	e0bfeb8d 	sth	r2,-82(fp)
        }

        if (RSP_PAYLOAD_LEN(uBuf.TempBuf) > 0)
10004df0:	e0bffc04 	addi	r2,fp,-16
10004df4:	1080008b 	ldhu	r2,2(r2)
10004df8:	10bfffcc 	andi	r2,r2,65535
10004dfc:	10800120 	cmpeqi	r2,r2,4
10004e00:	1000111e 	bne	r2,zero,10004e48 <_SlDrvMsgRead+0x208>
        {
            NWP_IF_READ_CHECK(g_pCB->FD,
10004e04:	e0bfeb8b 	ldhu	r2,-82(fp)
10004e08:	e0bfee0d 	sth	r2,-72(fp)
10004e0c:	d0a7a817 	ldw	r2,-24928(gp)
10004e10:	10800017 	ldw	r2,0(r2)
10004e14:	1009883a 	mov	r4,r2
10004e18:	d0a7a817 	ldw	r2,-24928(gp)
10004e1c:	10802a17 	ldw	r2,168(r2)
10004e20:	10c00204 	addi	r3,r2,8
10004e24:	e0bfee0f 	ldh	r2,-72(fp)
10004e28:	180b883a 	mov	r5,r3
10004e2c:	100d883a 	mov	r6,r2
10004e30:	000c4d40 	call	1000c4d4 <spiSL_Read>
10004e34:	e0bfee8d 	sth	r2,-70(fp)
10004e38:	e0ffee0f 	ldh	r3,-72(fp)
10004e3c:	e0bfee8f 	ldh	r2,-70(fp)
10004e40:	18800126 	beq	r3,r2,10004e48 <_SlDrvMsgRead+0x208>
10004e44:	003fff06 	br	10004e44 <__alt_data_end+0xf0004e44>
                g_pCB->FunctionParams.AsyncExt.pAsyncBuf + _SL_RESP_HDR_SIZE,
                AlignedLengthRecv);
        }
        /* In case ASYNC RX buffer length is smaller then the received data length, dump the rest */
        if ((_SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf)) > SL_ASYNC_MAX_PAYLOAD_LEN))
10004e48:	e0bffc04 	addi	r2,fp,-16
10004e4c:	1080008b 	ldhu	r2,2(r2)
10004e50:	10bfffcc 	andi	r2,r2,65535
10004e54:	10ffffc4 	addi	r3,r2,-1
10004e58:	00bfff04 	movi	r2,-4
10004e5c:	1884703a 	and	r2,r3,r2
10004e60:	10802870 	cmpltui	r2,r2,161
10004e64:	10001d1e 	bne	r2,zero,10004edc <_SlDrvMsgRead+0x29c>
        {
            AlignedLengthRecv = _SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf)) - SL_ASYNC_MAX_PAYLOAD_LEN;
10004e68:	e0bffc04 	addi	r2,fp,-16
10004e6c:	1080008b 	ldhu	r2,2(r2)
10004e70:	10bfffc4 	addi	r2,r2,-1
10004e74:	1007883a 	mov	r3,r2
10004e78:	00bfff04 	movi	r2,-4
10004e7c:	1884703a 	and	r2,r3,r2
10004e80:	10bfd804 	addi	r2,r2,-160
10004e84:	e0bfeb8d 	sth	r2,-82(fp)
            while (AlignedLengthRecv > 0)
10004e88:	00001206 	br	10004ed4 <_SlDrvMsgRead+0x294>
            {
                NWP_IF_READ_CHECK(g_pCB->FD,TailBuffer,4);
10004e8c:	00800104 	movi	r2,4
10004e90:	e0bfef0d 	sth	r2,-68(fp)
10004e94:	d0a7a817 	ldw	r2,-24928(gp)
10004e98:	10800017 	ldw	r2,0(r2)
10004e9c:	1009883a 	mov	r4,r2
10004ea0:	e0bfef0f 	ldh	r2,-68(fp)
10004ea4:	e0fffe04 	addi	r3,fp,-8
10004ea8:	180b883a 	mov	r5,r3
10004eac:	100d883a 	mov	r6,r2
10004eb0:	000c4d40 	call	1000c4d4 <spiSL_Read>
10004eb4:	e0bfef8d 	sth	r2,-66(fp)
10004eb8:	e0ffef0f 	ldh	r3,-68(fp)
10004ebc:	e0bfef8f 	ldh	r2,-66(fp)
10004ec0:	18800126 	beq	r3,r2,10004ec8 <_SlDrvMsgRead+0x288>
10004ec4:	003fff06 	br	10004ec4 <__alt_data_end+0xf0004ec4>
                AlignedLengthRecv = AlignedLengthRecv - 4;
10004ec8:	e0bfeb8b 	ldhu	r2,-82(fp)
10004ecc:	10bfff04 	addi	r2,r2,-4
10004ed0:	e0bfeb8d 	sth	r2,-82(fp)
        }
        /* In case ASYNC RX buffer length is smaller then the received data length, dump the rest */
        if ((_SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf)) > SL_ASYNC_MAX_PAYLOAD_LEN))
        {
            AlignedLengthRecv = _SL_PROTOCOL_ALIGN_SIZE(RSP_PAYLOAD_LEN(uBuf.TempBuf)) - SL_ASYNC_MAX_PAYLOAD_LEN;
            while (AlignedLengthRecv > 0)
10004ed4:	e0bfeb8b 	ldhu	r2,-82(fp)
10004ed8:	103fec1e 	bne	r2,zero,10004e8c <__alt_data_end+0xf0004e8c>
            {
                NWP_IF_READ_CHECK(g_pCB->FD,TailBuffer,4);
                AlignedLengthRecv = AlignedLengthRecv - 4;
            }
        }
        OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER)); 
10004edc:	d0a7a817 	ldw	r2,-24928(gp)
10004ee0:	10802404 	addi	r2,r2,144
10004ee4:	1009883a 	mov	r4,r2
10004ee8:	01400cc4 	movi	r5,51
10004eec:	01801104 	movi	r6,68
10004ef0:	01c03fc4 	movi	r7,255
10004ef4:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10004ef8:	10803fcc 	andi	r2,r2,255
10004efc:	1080201c 	xori	r2,r2,128
10004f00:	10bfe004 	addi	r2,r2,-128
10004f04:	e0bff00d 	sth	r2,-64(fp)
10004f08:	e0bff00f 	ldh	r2,-64(fp)
10004f0c:	10000126 	beq	r2,zero,10004f14 <_SlDrvMsgRead+0x2d4>
10004f10:	003fff06 	br	10004f10 <__alt_data_end+0xf0004f10>

        if ((SL_OPCODE_SOCKET_ACCEPTASYNCRESPONSE == OPCODE(uBuf.TempBuf)) || (SL_OPCODE_SOCKET_ACCEPTASYNCRESPONSE_V6 == OPCODE(uBuf.TempBuf)) || (SL_OPCODE_SOCKET_CONNECTASYNCRESPONSE == OPCODE(uBuf.TempBuf)))
10004f14:	e0bffc04 	addi	r2,fp,-16
10004f18:	1080000b 	ldhu	r2,0(r2)
10004f1c:	10bfffcc 	andi	r2,r2,65535
10004f20:	108400e0 	cmpeqi	r2,r2,4099
10004f24:	10000a1e 	bne	r2,zero,10004f50 <_SlDrvMsgRead+0x310>
10004f28:	e0bffc04 	addi	r2,fp,-16
10004f2c:	1080000b 	ldhu	r2,0(r2)
10004f30:	10bfffcc 	andi	r2,r2,65535
10004f34:	108480e0 	cmpeqi	r2,r2,4611
10004f38:	1000051e 	bne	r2,zero,10004f50 <_SlDrvMsgRead+0x310>
10004f3c:	e0bffc04 	addi	r2,fp,-16
10004f40:	1080000b 	ldhu	r2,0(r2)
10004f44:	10bfffcc 	andi	r2,r2,65535
10004f48:	10840198 	cmpnei	r2,r2,4102
10004f4c:	10000d1e 	bne	r2,zero,10004f84 <_SlDrvMsgRead+0x344>
        {
            /* go over the active list if exist to find obj waiting for this Async event */
            _SlFindAndSetActiveObj(OPCODE(uBuf.TempBuf),(((_SocketResponse_t *)(g_pCB->FunctionParams.AsyncExt.pAsyncBuf + _SL_RESP_HDR_SIZE))->sd) & BSD_SOCKET_ID_MASK);
10004f50:	e0bffc04 	addi	r2,fp,-16
10004f54:	1080000b 	ldhu	r2,0(r2)
10004f58:	10ffffcc 	andi	r3,r2,65535
10004f5c:	d0a7a817 	ldw	r2,-24928(gp)
10004f60:	10802a17 	ldw	r2,168(r2)
10004f64:	10800204 	addi	r2,r2,8
10004f68:	10800083 	ldbu	r2,2(r2)
10004f6c:	10803fcc 	andi	r2,r2,255
10004f70:	108003cc 	andi	r2,r2,15
10004f74:	1809883a 	mov	r4,r3
10004f78:	100b883a 	mov	r5,r2
10004f7c:	00070bc0 	call	100070bc <_SlFindAndSetActiveObj>
10004f80:	00000606 	br	10004f9c <_SlDrvMsgRead+0x35c>
        }
        else
        {
            _SlFindAndSetActiveObj(OPCODE(uBuf.TempBuf),SL_MAX_SOCKETS);
10004f84:	e0bffc04 	addi	r2,fp,-16
10004f88:	1080000b 	ldhu	r2,0(r2)
10004f8c:	10bfffcc 	andi	r2,r2,65535
10004f90:	1009883a 	mov	r4,r2
10004f94:	01400204 	movi	r5,8
10004f98:	00070bc0 	call	100070bc <_SlFindAndSetActiveObj>
        }
        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10004f9c:	d0a7a817 	ldw	r2,-24928(gp)
10004fa0:	10802404 	addi	r2,r2,144
10004fa4:	1009883a 	mov	r4,r2
10004fa8:	01400cc4 	movi	r5,51
10004fac:	000938c0 	call	1000938c <_SlNonOsSemSet>
10004fb0:	10803fcc 	andi	r2,r2,255
10004fb4:	1080201c 	xori	r2,r2,128
10004fb8:	10bfe004 	addi	r2,r2,-128
10004fbc:	e0bff08d 	sth	r2,-62(fp)
10004fc0:	e0bff08f 	ldh	r2,-62(fp)
10004fc4:	10000126 	beq	r2,zero,10004fcc <_SlDrvMsgRead+0x38c>
10004fc8:	003fff06 	br	10004fc8 <__alt_data_end+0xf0004fc8>

        break;
10004fcc:	00017d06 	br	100055c4 <_SlDrvMsgRead+0x984>

    case RECV_RESP_CLASS:
        {
            _u8   ExpArgSize; /*  Expected size of Recv/Recvfrom arguments */

            switch(OPCODE(uBuf.TempBuf))
10004fd0:	e0bffc04 	addi	r2,fp,-16
10004fd4:	1080000b 	ldhu	r2,0(r2)
10004fd8:	10bfffcc 	andi	r2,r2,65535
10004fdc:	10c402e0 	cmpeqi	r3,r2,4107
10004fe0:	1800031e 	bne	r3,zero,10004ff0 <_SlDrvMsgRead+0x3b0>
10004fe4:	108482e0 	cmpeqi	r2,r2,4619
10004fe8:	1000041e 	bne	r2,zero,10004ffc <_SlDrvMsgRead+0x3bc>
10004fec:	00000606 	br	10005008 <_SlDrvMsgRead+0x3c8>
            {
            case SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE:
                ExpArgSize = RECVFROM_IPV4_ARGS_SIZE;
10004ff0:	00800304 	movi	r2,12
10004ff4:	e0bfec05 	stb	r2,-80(fp)
                break;
10004ff8:	00000506 	br	10005010 <_SlDrvMsgRead+0x3d0>
            case SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE_V6:
                ExpArgSize = RECVFROM_IPV6_ARGS_SIZE;
10004ffc:	00800604 	movi	r2,24
10005000:	e0bfec05 	stb	r2,-80(fp)
                break;
10005004:	00000206 	br	10005010 <_SlDrvMsgRead+0x3d0>
            default:
                /* SL_OPCODE_SOCKET_RECVASYNCRESPONSE: */
                ExpArgSize = RECV_ARGS_SIZE;
10005008:	00800104 	movi	r2,4
1000500c:	e0bfec05 	stb	r2,-80(fp)
            }              

            /*  Read first 4 bytes of Recv/Recvfrom response to get SocketId and actual  */
            /*  response data length */
            NWP_IF_READ_CHECK(g_pCB->FD, &uBuf.TempBuf[4], RECV_ARGS_SIZE);
10005010:	00800104 	movi	r2,4
10005014:	e0bff10d 	sth	r2,-60(fp)
10005018:	d0a7a817 	ldw	r2,-24928(gp)
1000501c:	10800017 	ldw	r2,0(r2)
10005020:	1009883a 	mov	r4,r2
10005024:	e0fff10f 	ldh	r3,-60(fp)
10005028:	e0bffc04 	addi	r2,fp,-16
1000502c:	10800104 	addi	r2,r2,4
10005030:	100b883a 	mov	r5,r2
10005034:	180d883a 	mov	r6,r3
10005038:	000c4d40 	call	1000c4d4 <spiSL_Read>
1000503c:	e0bff18d 	sth	r2,-58(fp)
10005040:	e0fff10f 	ldh	r3,-60(fp)
10005044:	e0bff18f 	ldh	r2,-58(fp)
10005048:	18800126 	beq	r3,r2,10005050 <_SlDrvMsgRead+0x410>
1000504c:	003fff06 	br	1000504c <__alt_data_end+0xf000504c>

            /*  Validate Socket ID and Received Length value.  */
            VERIFY_PROTOCOL((SD(&uBuf.TempBuf[4])& BSD_SOCKET_ID_MASK) < SL_MAX_SOCKETS);
10005050:	e0bffc04 	addi	r2,fp,-16
10005054:	10800104 	addi	r2,r2,4
10005058:	10800083 	ldbu	r2,2(r2)
1000505c:	10803fcc 	andi	r2,r2,255
10005060:	108003cc 	andi	r2,r2,15
10005064:	10800210 	cmplti	r2,r2,8
10005068:	1000011e 	bne	r2,zero,10005070 <_SlDrvMsgRead+0x430>
1000506c:	003fff06 	br	1000506c <__alt_data_end+0xf000506c>

            OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER)); 
10005070:	d0a7a817 	ldw	r2,-24928(gp)
10005074:	10802404 	addi	r2,r2,144
10005078:	1009883a 	mov	r4,r2
1000507c:	01400cc4 	movi	r5,51
10005080:	01801104 	movi	r6,68
10005084:	01c03fc4 	movi	r7,255
10005088:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000508c:	10803fcc 	andi	r2,r2,255
10005090:	1080201c 	xori	r2,r2,128
10005094:	10bfe004 	addi	r2,r2,-128
10005098:	e0bff20d 	sth	r2,-56(fp)
1000509c:	e0bff20f 	ldh	r2,-56(fp)
100050a0:	10000126 	beq	r2,zero,100050a8 <_SlDrvMsgRead+0x468>
100050a4:	003fff06 	br	100050a4 <__alt_data_end+0xf00050a4>

            /* go over the active list if exist to find obj waiting for this Async event */
            VERIFY_RET_OK(_SlFindAndSetActiveObj(OPCODE(uBuf.TempBuf),SD(&uBuf.TempBuf[4]) & BSD_SOCKET_ID_MASK));
100050a8:	e0bffc04 	addi	r2,fp,-16
100050ac:	1080000b 	ldhu	r2,0(r2)
100050b0:	10ffffcc 	andi	r3,r2,65535
100050b4:	e0bffc04 	addi	r2,fp,-16
100050b8:	10800104 	addi	r2,r2,4
100050bc:	10800083 	ldbu	r2,2(r2)
100050c0:	10803fcc 	andi	r2,r2,255
100050c4:	108003cc 	andi	r2,r2,15
100050c8:	1809883a 	mov	r4,r3
100050cc:	100b883a 	mov	r5,r2
100050d0:	00070bc0 	call	100070bc <_SlFindAndSetActiveObj>
100050d4:	e0bff28d 	sth	r2,-54(fp)
100050d8:	e0bff28f 	ldh	r2,-54(fp)
100050dc:	10000126 	beq	r2,zero,100050e4 <_SlDrvMsgRead+0x4a4>
100050e0:	003fff06 	br	100050e0 <__alt_data_end+0xf00050e0>

            /*  Verify data is waited on this socket. The pArgs should have been set by _SlDrvDataReadOp(). */
            VERIFY_SOCKET_CB(NULL !=  ((_SlArgsData_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pData))->pArgs);	

            sl_Memcpy( ((_SlArgsData_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs))->pArgs, &uBuf.TempBuf[4], RECV_ARGS_SIZE);
100050e4:	d0e7a817 	ldw	r3,-24928(gp)
100050e8:	d0a7a817 	ldw	r2,-24928(gp)
100050ec:	10802b03 	ldbu	r2,172(r2)
100050f0:	10803fcc 	andi	r2,r2,255
100050f4:	10800324 	muli	r2,r2,12
100050f8:	1885883a 	add	r2,r3,r2
100050fc:	10800504 	addi	r2,r2,20
10005100:	10800017 	ldw	r2,0(r2)
10005104:	10c00017 	ldw	r3,0(r2)
10005108:	e0bffc04 	addi	r2,fp,-16
1000510c:	10800104 	addi	r2,r2,4
10005110:	1809883a 	mov	r4,r3
10005114:	100b883a 	mov	r5,r2
10005118:	01800104 	movi	r6,4
1000511c:	000c7840 	call	1000c784 <memcpy>

            if(ExpArgSize > RECV_ARGS_SIZE)
10005120:	e0bfec03 	ldbu	r2,-80(fp)
10005124:	10800170 	cmpltui	r2,r2,5
10005128:	1000191e 	bne	r2,zero,10005190 <_SlDrvMsgRead+0x550>
            {
                NWP_IF_READ_CHECK(g_pCB->FD,
1000512c:	e0bfec03 	ldbu	r2,-80(fp)
10005130:	10bfff04 	addi	r2,r2,-4
10005134:	e0bff30d 	sth	r2,-52(fp)
10005138:	d0a7a817 	ldw	r2,-24928(gp)
1000513c:	10800017 	ldw	r2,0(r2)
10005140:	1009883a 	mov	r4,r2
10005144:	d0e7a817 	ldw	r3,-24928(gp)
10005148:	d0a7a817 	ldw	r2,-24928(gp)
1000514c:	10802b03 	ldbu	r2,172(r2)
10005150:	10803fcc 	andi	r2,r2,255
10005154:	10800324 	muli	r2,r2,12
10005158:	1885883a 	add	r2,r3,r2
1000515c:	10800504 	addi	r2,r2,20
10005160:	10800017 	ldw	r2,0(r2)
10005164:	10800017 	ldw	r2,0(r2)
10005168:	10c00104 	addi	r3,r2,4
1000516c:	e0bff30f 	ldh	r2,-52(fp)
10005170:	180b883a 	mov	r5,r3
10005174:	100d883a 	mov	r6,r2
10005178:	000c4d40 	call	1000c4d4 <spiSL_Read>
1000517c:	e0bff38d 	sth	r2,-50(fp)
10005180:	e0fff30f 	ldh	r3,-52(fp)
10005184:	e0bff38f 	ldh	r2,-50(fp)
10005188:	18800126 	beq	r3,r2,10005190 <_SlDrvMsgRead+0x550>
1000518c:	003fff06 	br	1000518c <__alt_data_end+0xf000518c>
            }

            /*  Here g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pData contains requested(expected) Recv/Recvfrom DataSize. */
            /*  Overwrite requested DataSize with actual one. */
            /*  If error is received, this information will be read from arguments. */
            if(ACT_DATA_SIZE(&uBuf.TempBuf[4]) > 0)
10005190:	e0bffc04 	addi	r2,fp,-16
10005194:	10800104 	addi	r2,r2,4
10005198:	1080000b 	ldhu	r2,0(r2)
1000519c:	10bfffcc 	andi	r2,r2,65535
100051a0:	10a0001c 	xori	r2,r2,32768
100051a4:	10a00004 	addi	r2,r2,-32768
100051a8:	0080470e 	bge	zero,r2,100052c8 <_SlDrvMsgRead+0x688>

                /*  Read 4 bytes aligned from interface */
                /*  therefore check the requested length and read only  */
                /*  4 bytes aligned data. The rest unaligned (if any) will be read */
                /*  and copied to a TailBuffer  */
                LengthToCopy = ACT_DATA_SIZE(&uBuf.TempBuf[4]) & (3);
100051ac:	e0bffc04 	addi	r2,fp,-16
100051b0:	10800104 	addi	r2,r2,4
100051b4:	1080000b 	ldhu	r2,0(r2)
100051b8:	108000cc 	andi	r2,r2,3
100051bc:	e0bfeb0d 	sth	r2,-84(fp)
                AlignedLengthRecv = ACT_DATA_SIZE(&uBuf.TempBuf[4]) & (~3);
100051c0:	e0bffc04 	addi	r2,fp,-16
100051c4:	10800104 	addi	r2,r2,4
100051c8:	1080000b 	ldhu	r2,0(r2)
100051cc:	1007883a 	mov	r3,r2
100051d0:	00bfff04 	movi	r2,-4
100051d4:	1884703a 	and	r2,r3,r2
100051d8:	e0bfeb8d 	sth	r2,-82(fp)
                if( AlignedLengthRecv >= 4)
100051dc:	e0bfeb8b 	ldhu	r2,-82(fp)
100051e0:	10800130 	cmpltui	r2,r2,4
100051e4:	1000171e 	bne	r2,zero,10005244 <_SlDrvMsgRead+0x604>
                {
                    NWP_IF_READ_CHECK(g_pCB->FD,((_SlArgsData_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs))->pData,AlignedLengthRecv );                      
100051e8:	e0bfeb8b 	ldhu	r2,-82(fp)
100051ec:	e0bff40d 	sth	r2,-48(fp)
100051f0:	d0a7a817 	ldw	r2,-24928(gp)
100051f4:	10800017 	ldw	r2,0(r2)
100051f8:	1009883a 	mov	r4,r2
100051fc:	d0e7a817 	ldw	r3,-24928(gp)
10005200:	d0a7a817 	ldw	r2,-24928(gp)
10005204:	10802b03 	ldbu	r2,172(r2)
10005208:	10803fcc 	andi	r2,r2,255
1000520c:	10800324 	muli	r2,r2,12
10005210:	1885883a 	add	r2,r3,r2
10005214:	10800504 	addi	r2,r2,20
10005218:	10800017 	ldw	r2,0(r2)
1000521c:	10c00117 	ldw	r3,4(r2)
10005220:	e0bff40f 	ldh	r2,-48(fp)
10005224:	180b883a 	mov	r5,r3
10005228:	100d883a 	mov	r6,r2
1000522c:	000c4d40 	call	1000c4d4 <spiSL_Read>
10005230:	e0bff48d 	sth	r2,-46(fp)
10005234:	e0fff40f 	ldh	r3,-48(fp)
10005238:	e0bff48f 	ldh	r2,-46(fp)
1000523c:	18800126 	beq	r3,r2,10005244 <_SlDrvMsgRead+0x604>
10005240:	003fff06 	br	10005240 <__alt_data_end+0xf0005240>
                }
                /*  copy the unaligned part, if any */
                if( LengthToCopy > 0) 
10005244:	e0bfeb0b 	ldhu	r2,-84(fp)
10005248:	10001f26 	beq	r2,zero,100052c8 <_SlDrvMsgRead+0x688>
                {
                    NWP_IF_READ_CHECK(g_pCB->FD,TailBuffer,4);
1000524c:	00800104 	movi	r2,4
10005250:	e0bff50d 	sth	r2,-44(fp)
10005254:	d0a7a817 	ldw	r2,-24928(gp)
10005258:	10800017 	ldw	r2,0(r2)
1000525c:	1009883a 	mov	r4,r2
10005260:	e0bff50f 	ldh	r2,-44(fp)
10005264:	e0fffe04 	addi	r3,fp,-8
10005268:	180b883a 	mov	r5,r3
1000526c:	100d883a 	mov	r6,r2
10005270:	000c4d40 	call	1000c4d4 <spiSL_Read>
10005274:	e0bff58d 	sth	r2,-42(fp)
10005278:	e0fff50f 	ldh	r3,-44(fp)
1000527c:	e0bff58f 	ldh	r2,-42(fp)
10005280:	18800126 	beq	r3,r2,10005288 <_SlDrvMsgRead+0x648>
10005284:	003fff06 	br	10005284 <__alt_data_end+0xf0005284>
                    /*  copy TailBuffer unaligned part (1/2/3 bytes) */
                    sl_Memcpy(((_SlArgsData_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs))->pData + AlignedLengthRecv,TailBuffer,LengthToCopy);                    
10005288:	d0e7a817 	ldw	r3,-24928(gp)
1000528c:	d0a7a817 	ldw	r2,-24928(gp)
10005290:	10802b03 	ldbu	r2,172(r2)
10005294:	10803fcc 	andi	r2,r2,255
10005298:	10800324 	muli	r2,r2,12
1000529c:	1885883a 	add	r2,r3,r2
100052a0:	10800504 	addi	r2,r2,20
100052a4:	10800017 	ldw	r2,0(r2)
100052a8:	10c00117 	ldw	r3,4(r2)
100052ac:	e0bfeb8b 	ldhu	r2,-82(fp)
100052b0:	1889883a 	add	r4,r3,r2
100052b4:	e0bfeb0b 	ldhu	r2,-84(fp)
100052b8:	e0fffe04 	addi	r3,fp,-8
100052bc:	180b883a 	mov	r5,r3
100052c0:	100d883a 	mov	r6,r2
100052c4:	000c7840 	call	1000c784 <memcpy>
                }                  
            }
            OSI_RET_OK_CHECK(sl_SyncObjSignal(&(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj)));
100052c8:	d0e7a817 	ldw	r3,-24928(gp)
100052cc:	d0a7a817 	ldw	r2,-24928(gp)
100052d0:	10802b03 	ldbu	r2,172(r2)
100052d4:	10803fcc 	andi	r2,r2,255
100052d8:	10800324 	muli	r2,r2,12
100052dc:	10800404 	addi	r2,r2,16
100052e0:	1885883a 	add	r2,r3,r2
100052e4:	1009883a 	mov	r4,r2
100052e8:	01400884 	movi	r5,34
100052ec:	000938c0 	call	1000938c <_SlNonOsSemSet>
100052f0:	10803fcc 	andi	r2,r2,255
100052f4:	1080201c 	xori	r2,r2,128
100052f8:	10bfe004 	addi	r2,r2,-128
100052fc:	e0bff60d 	sth	r2,-40(fp)
10005300:	e0bff60f 	ldh	r2,-40(fp)
10005304:	10000126 	beq	r2,zero,1000530c <_SlDrvMsgRead+0x6cc>
10005308:	003fff06 	br	10005308 <__alt_data_end+0xf0005308>
            OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj)); 
1000530c:	d0a7a817 	ldw	r2,-24928(gp)
10005310:	10802404 	addi	r2,r2,144
10005314:	1009883a 	mov	r4,r2
10005318:	01400cc4 	movi	r5,51
1000531c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10005320:	10803fcc 	andi	r2,r2,255
10005324:	1080201c 	xori	r2,r2,128
10005328:	10bfe004 	addi	r2,r2,-128
1000532c:	e0bff68d 	sth	r2,-38(fp)
10005330:	e0bff68f 	ldh	r2,-38(fp)
10005334:	10000126 	beq	r2,zero,1000533c <_SlDrvMsgRead+0x6fc>
10005338:	003fff06 	br	10005338 <__alt_data_end+0xf0005338>
        }
        break;
1000533c:	0000a106 	br	100055c4 <_SlDrvMsgRead+0x984>
        /*  In this case Driver will send extra dummy patterns to NWP if */
        /*  the response message is smaller than maximum. */
        /*  When RxDescLen is not exact, using RxPayloadLen is forbidden! */
        /*  If such case cannot be avoided - parse message here to detect */
        /*  arguments/payload border. */
        NWP_IF_READ_CHECK(g_pCB->FD,
10005340:	d0a7a817 	ldw	r2,-24928(gp)
10005344:	10802717 	ldw	r2,156(r2)
10005348:	108000c3 	ldbu	r2,3(r2)
1000534c:	10803fcc 	andi	r2,r2,255
10005350:	108000c4 	addi	r2,r2,3
10005354:	1007883a 	mov	r3,r2
10005358:	00bfff04 	movi	r2,-4
1000535c:	1884703a 	and	r2,r3,r2
10005360:	e0bff70d 	sth	r2,-36(fp)
10005364:	d0a7a817 	ldw	r2,-24928(gp)
10005368:	10800017 	ldw	r2,0(r2)
1000536c:	1009883a 	mov	r4,r2
10005370:	d0a7a817 	ldw	r2,-24928(gp)
10005374:	10c02817 	ldw	r3,160(r2)
10005378:	e0bff70f 	ldh	r2,-36(fp)
1000537c:	180b883a 	mov	r5,r3
10005380:	100d883a 	mov	r6,r2
10005384:	000c4d40 	call	1000c4d4 <spiSL_Read>
10005388:	e0bff78d 	sth	r2,-34(fp)
1000538c:	e0fff70f 	ldh	r3,-36(fp)
10005390:	e0bff78f 	ldh	r2,-34(fp)
10005394:	18800126 	beq	r3,r2,1000539c <_SlDrvMsgRead+0x75c>
10005398:	003fff06 	br	10005398 <__alt_data_end+0xf0005398>
            g_pCB->FunctionParams.pTxRxDescBuff,
            _SL_PROTOCOL_ALIGN_SIZE(g_pCB->FunctionParams.pCmdCtrl->RxDescLen));

        if((NULL != g_pCB->FunctionParams.pCmdExt) && (0 != g_pCB->FunctionParams.pCmdExt->RxPayloadLen))
1000539c:	d0a7a817 	ldw	r2,-24928(gp)
100053a0:	10802917 	ldw	r2,164(r2)
100053a4:	10008626 	beq	r2,zero,100055c0 <_SlDrvMsgRead+0x980>
100053a8:	d0a7a817 	ldw	r2,-24928(gp)
100053ac:	10802917 	ldw	r2,164(r2)
100053b0:	1080008b 	ldhu	r2,2(r2)
100053b4:	10bfffcc 	andi	r2,r2,65535
100053b8:	10008126 	beq	r2,zero,100055c0 <_SlDrvMsgRead+0x980>
        {
            /*  Actual size of command's response payload: <msg_payload_len> - <rsp_args_len> */
            _i16    ActDataSize = RSP_PAYLOAD_LEN(uBuf.TempBuf) - g_pCB->FunctionParams.pCmdCtrl->RxDescLen;
100053bc:	e0bffc04 	addi	r2,fp,-16
100053c0:	10c0008b 	ldhu	r3,2(r2)
100053c4:	d0a7a817 	ldw	r2,-24928(gp)
100053c8:	10802717 	ldw	r2,156(r2)
100053cc:	108000c3 	ldbu	r2,3(r2)
100053d0:	10803fcc 	andi	r2,r2,255
100053d4:	1885c83a 	sub	r2,r3,r2
100053d8:	10bfff04 	addi	r2,r2,-4
100053dc:	e0bfec8d 	sth	r2,-78(fp)

            g_pCB->FunctionParams.pCmdExt->ActualRxPayloadLen = ActDataSize;
100053e0:	d0a7a817 	ldw	r2,-24928(gp)
100053e4:	10802917 	ldw	r2,164(r2)
100053e8:	e0ffec8b 	ldhu	r3,-78(fp)
100053ec:	10c0010d 	sth	r3,4(r2)

            /* Check that the space prepared by user for the response data is sufficient. */
            if(ActDataSize <= 0)
100053f0:	e0bfec8f 	ldh	r2,-78(fp)
100053f4:	00800416 	blt	zero,r2,10005408 <_SlDrvMsgRead+0x7c8>
            {
                g_pCB->FunctionParams.pCmdExt->RxPayloadLen = 0;
100053f8:	d0a7a817 	ldw	r2,-24928(gp)
100053fc:	10802917 	ldw	r2,164(r2)
10005400:	1000008d 	sth	zero,2(r2)
10005404:	00006e06 	br	100055c0 <_SlDrvMsgRead+0x980>
            }
            else
            {
                /* In case the user supplied Rx buffer length which is smaller then the received data length, copy according to user length */
                if (ActDataSize > g_pCB->FunctionParams.pCmdExt->RxPayloadLen)
10005408:	e0bfec8f 	ldh	r2,-78(fp)
1000540c:	d0e7a817 	ldw	r3,-24928(gp)
10005410:	18c02917 	ldw	r3,164(r3)
10005414:	18c0008b 	ldhu	r3,2(r3)
10005418:	18ffffcc 	andi	r3,r3,65535
1000541c:	18800c0e 	bge	r3,r2,10005450 <_SlDrvMsgRead+0x810>
                {
                    LengthToCopy = g_pCB->FunctionParams.pCmdExt->RxPayloadLen & (3);
10005420:	d0a7a817 	ldw	r2,-24928(gp)
10005424:	10802917 	ldw	r2,164(r2)
10005428:	1080008b 	ldhu	r2,2(r2)
1000542c:	108000cc 	andi	r2,r2,3
10005430:	e0bfeb0d 	sth	r2,-84(fp)
                    AlignedLengthRecv = g_pCB->FunctionParams.pCmdExt->RxPayloadLen & (~3);
10005434:	d0a7a817 	ldw	r2,-24928(gp)
10005438:	10802917 	ldw	r2,164(r2)
1000543c:	10c0008b 	ldhu	r3,2(r2)
10005440:	00bfff04 	movi	r2,-4
10005444:	1884703a 	and	r2,r3,r2
10005448:	e0bfeb8d 	sth	r2,-82(fp)
1000544c:	00000706 	br	1000546c <_SlDrvMsgRead+0x82c>
                }
                else
                {
                    LengthToCopy = ActDataSize & (3);
10005450:	e0bfec8b 	ldhu	r2,-78(fp)
10005454:	108000cc 	andi	r2,r2,3
10005458:	e0bfeb0d 	sth	r2,-84(fp)
                    AlignedLengthRecv = ActDataSize & (~3);
1000545c:	e0ffec8b 	ldhu	r3,-78(fp)
10005460:	00bfff04 	movi	r2,-4
10005464:	1884703a 	and	r2,r3,r2
10005468:	e0bfeb8d 	sth	r2,-82(fp)
                /*  Read 4 bytes aligned from interface */
                /*  therefore check the requested length and read only  */
                /*  4 bytes aligned data. The rest unaligned (if any) will be read */
                /*  and copied to a TailBuffer  */

                if( AlignedLengthRecv >= 4)
1000546c:	e0bfeb8b 	ldhu	r2,-82(fp)
10005470:	10800130 	cmpltui	r2,r2,4
10005474:	1000111e 	bne	r2,zero,100054bc <_SlDrvMsgRead+0x87c>
                {
                    NWP_IF_READ_CHECK(g_pCB->FD,
10005478:	e0bfeb8b 	ldhu	r2,-82(fp)
1000547c:	e0bff80d 	sth	r2,-32(fp)
10005480:	d0a7a817 	ldw	r2,-24928(gp)
10005484:	10800017 	ldw	r2,0(r2)
10005488:	1009883a 	mov	r4,r2
1000548c:	d0a7a817 	ldw	r2,-24928(gp)
10005490:	10802917 	ldw	r2,164(r2)
10005494:	10c00317 	ldw	r3,12(r2)
10005498:	e0bff80f 	ldh	r2,-32(fp)
1000549c:	180b883a 	mov	r5,r3
100054a0:	100d883a 	mov	r6,r2
100054a4:	000c4d40 	call	1000c4d4 <spiSL_Read>
100054a8:	e0bff88d 	sth	r2,-30(fp)
100054ac:	e0fff80f 	ldh	r3,-32(fp)
100054b0:	e0bff88f 	ldh	r2,-30(fp)
100054b4:	18800126 	beq	r3,r2,100054bc <_SlDrvMsgRead+0x87c>
100054b8:	003fff06 	br	100054b8 <__alt_data_end+0xf00054b8>
                        g_pCB->FunctionParams.pCmdExt->pRxPayload,
                        AlignedLengthRecv );

                }
                /*  copy the unaligned part, if any */
                if( LengthToCopy > 0) 
100054bc:	e0bfeb0b 	ldhu	r2,-84(fp)
100054c0:	10001c26 	beq	r2,zero,10005534 <_SlDrvMsgRead+0x8f4>
                {
                    NWP_IF_READ_CHECK(g_pCB->FD,TailBuffer,4);
100054c4:	00800104 	movi	r2,4
100054c8:	e0bff90d 	sth	r2,-28(fp)
100054cc:	d0a7a817 	ldw	r2,-24928(gp)
100054d0:	10800017 	ldw	r2,0(r2)
100054d4:	1009883a 	mov	r4,r2
100054d8:	e0bff90f 	ldh	r2,-28(fp)
100054dc:	e0fffe04 	addi	r3,fp,-8
100054e0:	180b883a 	mov	r5,r3
100054e4:	100d883a 	mov	r6,r2
100054e8:	000c4d40 	call	1000c4d4 <spiSL_Read>
100054ec:	e0bff98d 	sth	r2,-26(fp)
100054f0:	e0fff90f 	ldh	r3,-28(fp)
100054f4:	e0bff98f 	ldh	r2,-26(fp)
100054f8:	18800126 	beq	r3,r2,10005500 <_SlDrvMsgRead+0x8c0>
100054fc:	003fff06 	br	100054fc <__alt_data_end+0xf00054fc>
                    /*  copy TailBuffer unaligned part (1/2/3 bytes) */
                    sl_Memcpy(g_pCB->FunctionParams.pCmdExt->pRxPayload + AlignedLengthRecv,
10005500:	d0a7a817 	ldw	r2,-24928(gp)
10005504:	10802917 	ldw	r2,164(r2)
10005508:	10c00317 	ldw	r3,12(r2)
1000550c:	e0bfeb8b 	ldhu	r2,-82(fp)
10005510:	1889883a 	add	r4,r3,r2
10005514:	e0bfeb0b 	ldhu	r2,-84(fp)
10005518:	e0fffe04 	addi	r3,fp,-8
1000551c:	180b883a 	mov	r5,r3
10005520:	100d883a 	mov	r6,r2
10005524:	000c7840 	call	1000c784 <memcpy>
                        TailBuffer,
                        LengthToCopy);
                    ActDataSize = ActDataSize-4;
10005528:	e0bfec8b 	ldhu	r2,-78(fp)
1000552c:	10bfff04 	addi	r2,r2,-4
10005530:	e0bfec8d 	sth	r2,-78(fp)
                }
                /* In case the user supplied Rx buffer length which is smaller then the received data length, dump the rest */
                if (ActDataSize > g_pCB->FunctionParams.pCmdExt->RxPayloadLen)
10005534:	e0bfec8f 	ldh	r2,-78(fp)
10005538:	d0e7a817 	ldw	r3,-24928(gp)
1000553c:	18c02917 	ldw	r3,164(r3)
10005540:	18c0008b 	ldhu	r3,2(r3)
10005544:	18ffffcc 	andi	r3,r3,65535
10005548:	18801d0e 	bge	r3,r2,100055c0 <_SlDrvMsgRead+0x980>
                {
                    /* calculate the rest of the data size to dump */
                    AlignedLengthRecv = ActDataSize - (g_pCB->FunctionParams.pCmdExt->RxPayloadLen & (~3));
1000554c:	e0bfec8b 	ldhu	r2,-78(fp)
10005550:	d0e7a817 	ldw	r3,-24928(gp)
10005554:	18c02917 	ldw	r3,164(r3)
10005558:	1900008b 	ldhu	r4,2(r3)
1000555c:	00ffff04 	movi	r3,-4
10005560:	20c6703a 	and	r3,r4,r3
10005564:	10c5c83a 	sub	r2,r2,r3
10005568:	e0bfeb8d 	sth	r2,-82(fp)
                    while( AlignedLengthRecv > 0)
1000556c:	00001206 	br	100055b8 <_SlDrvMsgRead+0x978>
                    {
                        NWP_IF_READ_CHECK(g_pCB->FD,TailBuffer, 4 );
10005570:	00800104 	movi	r2,4
10005574:	e0bffa0d 	sth	r2,-24(fp)
10005578:	d0a7a817 	ldw	r2,-24928(gp)
1000557c:	10800017 	ldw	r2,0(r2)
10005580:	1009883a 	mov	r4,r2
10005584:	e0bffa0f 	ldh	r2,-24(fp)
10005588:	e0fffe04 	addi	r3,fp,-8
1000558c:	180b883a 	mov	r5,r3
10005590:	100d883a 	mov	r6,r2
10005594:	000c4d40 	call	1000c4d4 <spiSL_Read>
10005598:	e0bffa8d 	sth	r2,-22(fp)
1000559c:	e0fffa0f 	ldh	r3,-24(fp)
100055a0:	e0bffa8f 	ldh	r2,-22(fp)
100055a4:	18800126 	beq	r3,r2,100055ac <_SlDrvMsgRead+0x96c>
100055a8:	003fff06 	br	100055a8 <__alt_data_end+0xf00055a8>
                        AlignedLengthRecv = AlignedLengthRecv - 4;
100055ac:	e0bfeb8b 	ldhu	r2,-82(fp)
100055b0:	10bfff04 	addi	r2,r2,-4
100055b4:	e0bfeb8d 	sth	r2,-82(fp)
                /* In case the user supplied Rx buffer length which is smaller then the received data length, dump the rest */
                if (ActDataSize > g_pCB->FunctionParams.pCmdExt->RxPayloadLen)
                {
                    /* calculate the rest of the data size to dump */
                    AlignedLengthRecv = ActDataSize - (g_pCB->FunctionParams.pCmdExt->RxPayloadLen & (~3));
                    while( AlignedLengthRecv > 0)
100055b8:	e0bfeb8b 	ldhu	r2,-82(fp)
100055bc:	103fec1e 	bne	r2,zero,10005570 <__alt_data_end+0xf0005570>
                        AlignedLengthRecv = AlignedLengthRecv - 4;
                    }
                }
            }
        }
        break;
100055c0:	0001883a 	nop
    default:
        /*  DUMMY_MSG_CLASS: Flow control message has no payload. */
        break;
    }

    if(AlignSize > 0)
100055c4:	e0bfff03 	ldbu	r2,-4(fp)
100055c8:	10803fcc 	andi	r2,r2,255
100055cc:	10001026 	beq	r2,zero,10005610 <_SlDrvMsgRead+0x9d0>
    {
        NWP_IF_READ_CHECK(g_pCB->FD, uBuf.TempBuf, AlignSize);
100055d0:	e0bfff03 	ldbu	r2,-4(fp)
100055d4:	10803fcc 	andi	r2,r2,255
100055d8:	e0bffb0d 	sth	r2,-20(fp)
100055dc:	d0a7a817 	ldw	r2,-24928(gp)
100055e0:	10800017 	ldw	r2,0(r2)
100055e4:	1009883a 	mov	r4,r2
100055e8:	e0bffb0f 	ldh	r2,-20(fp)
100055ec:	e0fffc04 	addi	r3,fp,-16
100055f0:	180b883a 	mov	r5,r3
100055f4:	100d883a 	mov	r6,r2
100055f8:	000c4d40 	call	1000c4d4 <spiSL_Read>
100055fc:	e0bffb8d 	sth	r2,-18(fp)
10005600:	e0fffb0f 	ldh	r3,-20(fp)
10005604:	e0bffb8f 	ldh	r2,-18(fp)
10005608:	18800126 	beq	r3,r2,10005610 <_SlDrvMsgRead+0x9d0>
1000560c:	003fff06 	br	1000560c <__alt_data_end+0xf000560c>
    _SL_DBG_CNT_INC(MsgCnt.Read);

    /*  Unmask Interrupt call */
    sl_IfUnMaskIntHdlr();

    return SL_OS_RET_CODE_OK;
10005610:	0005883a 	mov	r2,zero
}
10005614:	e037883a 	mov	sp,fp
10005618:	dfc00117 	ldw	ra,4(sp)
1000561c:	df000017 	ldw	fp,0(sp)
10005620:	dec00204 	addi	sp,sp,8
10005624:	f800283a 	ret

10005628 <_SlAsyncEventGenericHandler>:

/* ******************************************************************************/
/*  _SlAsyncEventGenericHandler */
/* ******************************************************************************/
void _SlAsyncEventGenericHandler(void)
{
10005628:	deffc904 	addi	sp,sp,-220
1000562c:	dfc03615 	stw	ra,216(sp)
10005630:	df003515 	stw	fp,212(sp)
10005634:	df003504 	addi	fp,sp,212
    _SlResponseHeader_t      *pHdr       = (_SlResponseHeader_t *)g_pCB->FunctionParams.AsyncExt.pAsyncBuf;
10005638:	d0a7a817 	ldw	r2,-24928(gp)
1000563c:	10802a17 	ldw	r2,168(r2)
10005640:	e0bfcb15 	stw	r2,-212(fp)
    SlWlanEvent_t            wlanEvent;
    SlNetAppEvent_t          netAppEvent;
    SlSockEvent_t            sockAppEvent;

    if (NULL != g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler)
10005644:	d0a7a817 	ldw	r2,-24928(gp)
10005648:	10802c17 	ldw	r2,176(r2)
1000564c:	10024926 	beq	r2,zero,10005f74 <_SlAsyncEventGenericHandler+0x94c>
    {
        switch(pHdr->GenHeader.Opcode)
10005650:	e0bfcb17 	ldw	r2,-212(fp)
10005654:	1080000b 	ldhu	r2,0(r2)
10005658:	10bfffcc 	andi	r2,r2,65535
1000565c:	10c22ca0 	cmpeqi	r3,r2,2226
10005660:	1801901e 	bne	r3,zero,10005ca4 <_SlAsyncEventGenericHandler+0x67c>
10005664:	10c22cc8 	cmpgei	r3,r2,2227
10005668:	1800121e 	bne	r3,zero,100056b4 <_SlAsyncEventGenericHandler+0x8c>
1000566c:	10c20c60 	cmpeqi	r3,r2,2097
10005670:	1800741e 	bne	r3,zero,10005844 <_SlAsyncEventGenericHandler+0x21c>
10005674:	10c20c88 	cmpgei	r3,r2,2098
10005678:	1800071e 	bne	r3,zero,10005698 <_SlAsyncEventGenericHandler+0x70>
1000567c:	10c20be0 	cmpeqi	r3,r2,2095
10005680:	1802051e 	bne	r3,zero,10005e98 <_SlAsyncEventGenericHandler+0x870>
10005684:	10c20c08 	cmpgei	r3,r2,2096
10005688:	1800211e 	bne	r3,zero,10005710 <_SlAsyncEventGenericHandler+0xe8>
1000568c:	10820ba0 	cmpeqi	r2,r2,2094
10005690:	1001c91e 	bne	r2,zero,10005db8 <_SlAsyncEventGenericHandler+0x790>
10005694:	00023006 	br	10005f58 <_SlAsyncEventGenericHandler+0x930>
10005698:	10c22020 	cmpeqi	r3,r2,2176
1000569c:	1800781e 	bne	r3,zero,10005880 <_SlAsyncEventGenericHandler+0x258>
100056a0:	10c22060 	cmpeqi	r3,r2,2177
100056a4:	1800b21e 	bne	r3,zero,10005970 <_SlAsyncEventGenericHandler+0x348>
100056a8:	10820ca0 	cmpeqi	r2,r2,2098
100056ac:	10003d1e 	bne	r2,zero,100057a4 <_SlAsyncEventGenericHandler+0x17c>
100056b0:	00022906 	br	10005f58 <_SlAsyncEventGenericHandler+0x930>
100056b4:	10c608a0 	cmpeqi	r3,r2,6178
100056b8:	1802221e 	bne	r3,zero,10005f44 <_SlAsyncEventGenericHandler+0x91c>
100056bc:	10c608c8 	cmpgei	r3,r2,6179
100056c0:	1800071e 	bne	r3,zero,100056e0 <_SlAsyncEventGenericHandler+0xb8>
100056c4:	10c403a0 	cmpeqi	r3,r2,4110
100056c8:	18014f1e 	bne	r3,zero,10005c08 <_SlAsyncEventGenericHandler+0x5e0>
100056cc:	10c403e0 	cmpeqi	r3,r2,4111
100056d0:	18015f1e 	bne	r3,zero,10005c50 <_SlAsyncEventGenericHandler+0x628>
100056d4:	10822ce0 	cmpeqi	r2,r2,2227
100056d8:	1001a81e 	bne	r2,zero,10005d7c <_SlAsyncEventGenericHandler+0x754>
100056dc:	00021e06 	br	10005f58 <_SlAsyncEventGenericHandler+0x930>
100056e0:	10c60b20 	cmpeqi	r3,r2,6188
100056e4:	18010a1e 	bne	r3,zero,10005b10 <_SlAsyncEventGenericHandler+0x4e8>
100056e8:	10c60b48 	cmpgei	r3,r2,6189
100056ec:	1800031e 	bne	r3,zero,100056fc <_SlAsyncEventGenericHandler+0xd4>
100056f0:	10860960 	cmpeqi	r2,r2,6181
100056f4:	1000dd1e 	bne	r2,zero,10005a6c <_SlAsyncEventGenericHandler+0x444>
100056f8:	00021706 	br	10005f58 <_SlAsyncEventGenericHandler+0x930>
100056fc:	10c60b60 	cmpeqi	r3,r2,6189
10005700:	1801221e 	bne	r3,zero,10005b8c <_SlAsyncEventGenericHandler+0x564>
10005704:	10868960 	cmpeqi	r2,r2,6693
10005708:	1000ed1e 	bne	r2,zero,10005ac0 <_SlAsyncEventGenericHandler+0x498>
1000570c:	00021206 	br	10005f58 <_SlAsyncEventGenericHandler+0x930>
        {
        case  SL_OPCODE_WLAN_P2P_DEV_FOUND:
            {
                slPeerInfoAsyncResponse_t* pResp = (slPeerInfoAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005710:	d0a7a817 	ldw	r2,-24928(gp)
10005714:	10802a17 	ldw	r2,168(r2)
10005718:	10800204 	addi	r2,r2,8
1000571c:	e0bfcc15 	stw	r2,-208(fp)
                wlanEvent.Event = SL_WLAN_P2P_DEV_FOUND_EVENT;
10005720:	008001c4 	movi	r2,7
10005724:	e0bfdb15 	stw	r2,-148(fp)
                sl_Memcpy(wlanEvent.EventData.P2PModeDevFound.mac,pResp->mac, 6);
10005728:	e0bfcc17 	ldw	r2,-208(fp)
1000572c:	10c00803 	ldbu	r3,32(r2)
10005730:	e0ffe405 	stb	r3,-112(fp)
10005734:	10c00843 	ldbu	r3,33(r2)
10005738:	e0ffe445 	stb	r3,-111(fp)
1000573c:	10c00883 	ldbu	r3,34(r2)
10005740:	e0ffe485 	stb	r3,-110(fp)
10005744:	10c008c3 	ldbu	r3,35(r2)
10005748:	e0ffe4c5 	stb	r3,-109(fp)
1000574c:	10c00903 	ldbu	r3,36(r2)
10005750:	e0ffe505 	stb	r3,-108(fp)
10005754:	10800943 	ldbu	r2,37(r2)
10005758:	e0bfe545 	stb	r2,-107(fp)
                sl_Memcpy(wlanEvent.EventData.P2PModeDevFound.go_peer_device_name,pResp->go_peer_device_name,pResp->go_peer_device_name_len);
1000575c:	e17fcc17 	ldw	r5,-208(fp)
10005760:	e0bfcc17 	ldw	r2,-208(fp)
10005764:	10800983 	ldbu	r2,38(r2)
10005768:	10c03fcc 	andi	r3,r2,255
1000576c:	e0bfdb04 	addi	r2,fp,-148
10005770:	10800104 	addi	r2,r2,4
10005774:	1009883a 	mov	r4,r2
10005778:	180d883a 	mov	r6,r3
1000577c:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.P2PModeDevFound.go_peer_device_name_len = pResp->go_peer_device_name_len;
10005780:	e0bfcc17 	ldw	r2,-208(fp)
10005784:	10800983 	ldbu	r2,38(r2)
10005788:	e0bfe585 	stb	r2,-106(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
1000578c:	d0a7a817 	ldw	r2,-24928(gp)
10005790:	10802c17 	ldw	r2,176(r2)
10005794:	e0ffdb04 	addi	r3,fp,-148
10005798:	1809883a 	mov	r4,r3
1000579c:	103ee83a 	callr	r2
                break;
100057a0:	0001f406 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
            }

        case SL_OPCODE_WLAN_P2P_NEG_REQ_RECEIVED:
            {
                slPeerInfoAsyncResponse_t* pResp = (slPeerInfoAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
100057a4:	d0a7a817 	ldw	r2,-24928(gp)
100057a8:	10802a17 	ldw	r2,168(r2)
100057ac:	10800204 	addi	r2,r2,8
100057b0:	e0bfcd15 	stw	r2,-204(fp)

                wlanEvent.Event = SL_WLAN_P2P_NEG_REQ_RECEIVED_EVENT;
100057b4:	00800204 	movi	r2,8
100057b8:	e0bfdb15 	stw	r2,-148(fp)
                sl_Memcpy(wlanEvent.EventData.P2PModeNegReqReceived.mac,pResp->mac, 6);
100057bc:	e0bfcd17 	ldw	r2,-204(fp)
100057c0:	10c00803 	ldbu	r3,32(r2)
100057c4:	e0ffe405 	stb	r3,-112(fp)
100057c8:	10c00843 	ldbu	r3,33(r2)
100057cc:	e0ffe445 	stb	r3,-111(fp)
100057d0:	10c00883 	ldbu	r3,34(r2)
100057d4:	e0ffe485 	stb	r3,-110(fp)
100057d8:	10c008c3 	ldbu	r3,35(r2)
100057dc:	e0ffe4c5 	stb	r3,-109(fp)
100057e0:	10c00903 	ldbu	r3,36(r2)
100057e4:	e0ffe505 	stb	r3,-108(fp)
100057e8:	10800943 	ldbu	r2,37(r2)
100057ec:	e0bfe545 	stb	r2,-107(fp)
                sl_Memcpy(wlanEvent.EventData.P2PModeNegReqReceived.go_peer_device_name,pResp->go_peer_device_name,pResp->go_peer_device_name_len);
100057f0:	e17fcd17 	ldw	r5,-204(fp)
100057f4:	e0bfcd17 	ldw	r2,-204(fp)
100057f8:	10800983 	ldbu	r2,38(r2)
100057fc:	10c03fcc 	andi	r3,r2,255
10005800:	e0bfdb04 	addi	r2,fp,-148
10005804:	10800104 	addi	r2,r2,4
10005808:	1009883a 	mov	r4,r2
1000580c:	180d883a 	mov	r6,r3
10005810:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.P2PModeNegReqReceived.go_peer_device_name_len = pResp->go_peer_device_name_len;
10005814:	e0bfcd17 	ldw	r2,-204(fp)
10005818:	10800983 	ldbu	r2,38(r2)
1000581c:	e0bfe585 	stb	r2,-106(fp)
                wlanEvent.EventData.P2PModeNegReqReceived.wps_dev_password_id = pResp->wps_dev_password_id;
10005820:	e0bfcd17 	ldw	r2,-204(fp)
10005824:	108009c3 	ldbu	r2,39(r2)
10005828:	e0bfe5c5 	stb	r2,-105(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
1000582c:	d0a7a817 	ldw	r2,-24928(gp)
10005830:	10802c17 	ldw	r2,176(r2)
10005834:	e0ffdb04 	addi	r3,fp,-148
10005838:	1809883a 	mov	r4,r3
1000583c:	103ee83a 	callr	r2
                break;
10005840:	0001cc06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
            }
        case SL_OPCODE_WLAN_CONNECTION_FAILED:
            {
                slWlanConnFailureAsyncResponse_t	* pResp = (slWlanConnFailureAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005844:	d0a7a817 	ldw	r2,-24928(gp)
10005848:	10802a17 	ldw	r2,168(r2)
1000584c:	10800204 	addi	r2,r2,8
10005850:	e0bfce15 	stw	r2,-200(fp)

                wlanEvent.Event = SL_WLAN_CONNECTION_FAILED_EVENT;
10005854:	00800244 	movi	r2,9
10005858:	e0bfdb15 	stw	r2,-148(fp)
                wlanEvent.EventData.P2PModewlanConnectionFailure.status = pResp->status;
1000585c:	e0bfce17 	ldw	r2,-200(fp)
10005860:	1080000b 	ldhu	r2,0(r2)
10005864:	e0bfdc0d 	sth	r2,-144(fp)

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005868:	d0a7a817 	ldw	r2,-24928(gp)
1000586c:	10802c17 	ldw	r2,176(r2)
10005870:	e0ffdb04 	addi	r3,fp,-148
10005874:	1809883a 	mov	r4,r3
10005878:	103ee83a 	callr	r2
                break;
1000587c:	0001bd06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
            }

        case SL_OPCODE_WLAN_WLANASYNCCONNECTEDRESPONSE:
            {
                slWlanConnectAsyncResponse_t *pWlanResp = (slWlanConnectAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005880:	d0a7a817 	ldw	r2,-24928(gp)
10005884:	10802a17 	ldw	r2,168(r2)
10005888:	10800204 	addi	r2,r2,8
1000588c:	e0bfcf15 	stw	r2,-196(fp)
                sl_Memset(&wlanEvent.EventData.STAandP2PModeWlanConnected,0,sizeof(slWlanConnectAsyncResponse_t));
10005890:	e0bfdb04 	addi	r2,fp,-148
10005894:	10800104 	addi	r2,r2,4
10005898:	1009883a 	mov	r4,r2
1000589c:	000b883a 	mov	r5,zero
100058a0:	01801304 	movi	r6,76
100058a4:	000c8bc0 	call	1000c8bc <memset>
                wlanEvent.Event = SL_WLAN_CONNECT_EVENT;
100058a8:	00800044 	movi	r2,1
100058ac:	e0bfdb15 	stw	r2,-148(fp)
                wlanEvent.EventData.STAandP2PModeWlanConnected.connection_type = pWlanResp->connection_type;
100058b0:	e0bfcf17 	ldw	r2,-196(fp)
100058b4:	10800003 	ldbu	r2,0(r2)
100058b8:	e0bfdc05 	stb	r2,-144(fp)
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeWlanConnected.bssid, pWlanResp->bssid, 6);
100058bc:	e0bfcf17 	ldw	r2,-196(fp)
100058c0:	10c010c3 	ldbu	r3,67(r2)
100058c4:	e0ffecc5 	stb	r3,-77(fp)
100058c8:	10c01103 	ldbu	r3,68(r2)
100058cc:	e0ffed05 	stb	r3,-76(fp)
100058d0:	10c01143 	ldbu	r3,69(r2)
100058d4:	e0ffed45 	stb	r3,-75(fp)
100058d8:	10c01183 	ldbu	r3,70(r2)
100058dc:	e0ffed85 	stb	r3,-74(fp)
100058e0:	10c011c3 	ldbu	r3,71(r2)
100058e4:	e0ffedc5 	stb	r3,-73(fp)
100058e8:	10801203 	ldbu	r2,72(r2)
100058ec:	e0bfee05 	stb	r2,-72(fp)
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeWlanConnected.go_peer_device_name,pWlanResp->go_peer_device_name,pWlanResp->go_peer_device_name_len);
100058f0:	e0bfcf17 	ldw	r2,-196(fp)
100058f4:	114008c4 	addi	r5,r2,35
100058f8:	e0bfcf17 	ldw	r2,-196(fp)
100058fc:	10800883 	ldbu	r2,34(r2)
10005900:	10c03fcc 	andi	r3,r2,255
10005904:	e0bfdb04 	addi	r2,fp,-148
10005908:	108009c4 	addi	r2,r2,39
1000590c:	1009883a 	mov	r4,r2
10005910:	180d883a 	mov	r6,r3
10005914:	000c7840 	call	1000c784 <memcpy>
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeWlanConnected.ssid_name,		  pWlanResp->ssid_name,			 pWlanResp->ssid_len);
10005918:	e0bfcf17 	ldw	r2,-196(fp)
1000591c:	11400084 	addi	r5,r2,2
10005920:	e0bfcf17 	ldw	r2,-196(fp)
10005924:	10800043 	ldbu	r2,1(r2)
10005928:	10c03fcc 	andi	r3,r2,255
1000592c:	e0bfdb04 	addi	r2,fp,-148
10005930:	10800184 	addi	r2,r2,6
10005934:	1009883a 	mov	r4,r2
10005938:	180d883a 	mov	r6,r3
1000593c:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.STAandP2PModeWlanConnected.ssid_len = pWlanResp->ssid_len;
10005940:	e0bfcf17 	ldw	r2,-196(fp)
10005944:	10800043 	ldbu	r2,1(r2)
10005948:	e0bfdc45 	stb	r2,-143(fp)
                wlanEvent.EventData.STAandP2PModeWlanConnected.go_peer_device_name_len = pWlanResp->go_peer_device_name_len;
1000594c:	e0bfcf17 	ldw	r2,-196(fp)
10005950:	10800883 	ldbu	r2,34(r2)
10005954:	e0bfe485 	stb	r2,-110(fp)

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005958:	d0a7a817 	ldw	r2,-24928(gp)
1000595c:	10802c17 	ldw	r2,176(r2)
10005960:	e0ffdb04 	addi	r3,fp,-148
10005964:	1809883a 	mov	r4,r3
10005968:	103ee83a 	callr	r2
                break;
1000596c:	00018106 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
            }
        case SL_OPCODE_WLAN_WLANASYNCDISCONNECTEDRESPONSE:
            {
                slWlanConnectAsyncResponse_t *pWlanResp = (slWlanConnectAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005970:	d0a7a817 	ldw	r2,-24928(gp)
10005974:	10802a17 	ldw	r2,168(r2)
10005978:	10800204 	addi	r2,r2,8
1000597c:	e0bfd015 	stw	r2,-192(fp)
                sl_Memset(&wlanEvent.EventData.STAandP2PModeDisconnected,0,sizeof(slWlanConnectAsyncResponse_t));
10005980:	e0bfdb04 	addi	r2,fp,-148
10005984:	10800104 	addi	r2,r2,4
10005988:	1009883a 	mov	r4,r2
1000598c:	000b883a 	mov	r5,zero
10005990:	01801304 	movi	r6,76
10005994:	000c8bc0 	call	1000c8bc <memset>
                wlanEvent.Event = SL_WLAN_DISCONNECT_EVENT;
10005998:	00800084 	movi	r2,2
1000599c:	e0bfdb15 	stw	r2,-148(fp)
                wlanEvent.EventData.STAandP2PModeDisconnected.connection_type = pWlanResp->connection_type;
100059a0:	e0bfd017 	ldw	r2,-192(fp)
100059a4:	10800003 	ldbu	r2,0(r2)
100059a8:	e0bfdc05 	stb	r2,-144(fp)
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeDisconnected.bssid, pWlanResp->bssid, 6);
100059ac:	e0bfd017 	ldw	r2,-192(fp)
100059b0:	10c010c3 	ldbu	r3,67(r2)
100059b4:	e0ffecc5 	stb	r3,-77(fp)
100059b8:	10c01103 	ldbu	r3,68(r2)
100059bc:	e0ffed05 	stb	r3,-76(fp)
100059c0:	10c01143 	ldbu	r3,69(r2)
100059c4:	e0ffed45 	stb	r3,-75(fp)
100059c8:	10c01183 	ldbu	r3,70(r2)
100059cc:	e0ffed85 	stb	r3,-74(fp)
100059d0:	10c011c3 	ldbu	r3,71(r2)
100059d4:	e0ffedc5 	stb	r3,-73(fp)
100059d8:	10801203 	ldbu	r2,72(r2)
100059dc:	e0bfee05 	stb	r2,-72(fp)
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeDisconnected.go_peer_device_name,pWlanResp->go_peer_device_name,pWlanResp->go_peer_device_name_len);
100059e0:	e0bfd017 	ldw	r2,-192(fp)
100059e4:	114008c4 	addi	r5,r2,35
100059e8:	e0bfd017 	ldw	r2,-192(fp)
100059ec:	10800883 	ldbu	r2,34(r2)
100059f0:	10c03fcc 	andi	r3,r2,255
100059f4:	e0bfdb04 	addi	r2,fp,-148
100059f8:	108009c4 	addi	r2,r2,39
100059fc:	1009883a 	mov	r4,r2
10005a00:	180d883a 	mov	r6,r3
10005a04:	000c7840 	call	1000c784 <memcpy>
                sl_Memcpy(wlanEvent.EventData.STAandP2PModeDisconnected.ssid_name,		  pWlanResp->ssid_name,			 pWlanResp->ssid_len);
10005a08:	e0bfd017 	ldw	r2,-192(fp)
10005a0c:	11400084 	addi	r5,r2,2
10005a10:	e0bfd017 	ldw	r2,-192(fp)
10005a14:	10800043 	ldbu	r2,1(r2)
10005a18:	10c03fcc 	andi	r3,r2,255
10005a1c:	e0bfdb04 	addi	r2,fp,-148
10005a20:	10800184 	addi	r2,r2,6
10005a24:	1009883a 	mov	r4,r2
10005a28:	180d883a 	mov	r6,r3
10005a2c:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.STAandP2PModeDisconnected.ssid_len = pWlanResp->ssid_len;
10005a30:	e0bfd017 	ldw	r2,-192(fp)
10005a34:	10800043 	ldbu	r2,1(r2)
10005a38:	e0bfdc45 	stb	r2,-143(fp)
                wlanEvent.EventData.STAandP2PModeDisconnected.reason_code = pWlanResp->reason_code;
10005a3c:	e0bfd017 	ldw	r2,-192(fp)
10005a40:	10801243 	ldbu	r2,73(r2)
10005a44:	e0bfee45 	stb	r2,-71(fp)
                wlanEvent.EventData.STAandP2PModeDisconnected.go_peer_device_name_len = pWlanResp->go_peer_device_name_len;
10005a48:	e0bfd017 	ldw	r2,-192(fp)
10005a4c:	10800883 	ldbu	r2,34(r2)
10005a50:	e0bfe485 	stb	r2,-110(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005a54:	d0a7a817 	ldw	r2,-24928(gp)
10005a58:	10802c17 	ldw	r2,176(r2)
10005a5c:	e0ffdb04 	addi	r3,fp,-148
10005a60:	1809883a 	mov	r4,r3
10005a64:	103ee83a 	callr	r2
                break;             
10005a68:	00014206 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
            }
        case SL_OPCODE_NETAPP_IPACQUIRED:
            {
                SlIpV4AcquiredAsync_t *pIpV4 = (SlIpV4AcquiredAsync_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005a6c:	d0a7a817 	ldw	r2,-24928(gp)
10005a70:	10802a17 	ldw	r2,168(r2)
10005a74:	10800204 	addi	r2,r2,8
10005a78:	e0bfd115 	stw	r2,-188(fp)
                netAppEvent.Event = SL_NETAPP_IPV4_IPACQUIRED_EVENT;
10005a7c:	00800044 	movi	r2,1
10005a80:	e0bfef15 	stw	r2,-68(fp)
                netAppEvent.EventData.ipAcquiredV4.ip = pIpV4->ip;
10005a84:	e0bfd117 	ldw	r2,-188(fp)
10005a88:	10800017 	ldw	r2,0(r2)
10005a8c:	e0bff015 	stw	r2,-64(fp)
                netAppEvent.EventData.ipAcquiredV4.gateway = pIpV4->gateway;
10005a90:	e0bfd117 	ldw	r2,-188(fp)
10005a94:	10800117 	ldw	r2,4(r2)
10005a98:	e0bff115 	stw	r2,-60(fp)
                netAppEvent.EventData.ipAcquiredV4.dns = pIpV4->dns;
10005a9c:	e0bfd117 	ldw	r2,-188(fp)
10005aa0:	10800217 	ldw	r2,8(r2)
10005aa4:	e0bff215 	stw	r2,-56(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&netAppEvent);
10005aa8:	d0a7a817 	ldw	r2,-24928(gp)
10005aac:	10802c17 	ldw	r2,176(r2)
10005ab0:	e0ffef04 	addi	r3,fp,-68
10005ab4:	1809883a 	mov	r4,r3
10005ab8:	103ee83a 	callr	r2
            }
            break;
10005abc:	00012d06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>
        case SL_OPCODE_NETAPP_IPACQUIRED_V6:
            {
                SlIpV6AcquiredAsync_t *pIpV6 = (SlIpV6AcquiredAsync_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005ac0:	d0a7a817 	ldw	r2,-24928(gp)
10005ac4:	10802a17 	ldw	r2,168(r2)
10005ac8:	10800204 	addi	r2,r2,8
10005acc:	e0bfd215 	stw	r2,-184(fp)
                netAppEvent.Event =  SL_NETAPP_IPV6_IPACQUIRED_EVENT;
10005ad0:	00800084 	movi	r2,2
10005ad4:	e0bfef15 	stw	r2,-68(fp)
                sl_Memcpy((void *)&netAppEvent.EventData.ipAcquiredV6.ip[0],(void *)&pIpV6->ip[0],sizeof(pIpV6->ip[0])*4);
10005ad8:	e0bfd217 	ldw	r2,-184(fp)
10005adc:	10c00104 	addi	r3,r2,4
10005ae0:	e0bfef04 	addi	r2,fp,-68
10005ae4:	10800204 	addi	r2,r2,8
10005ae8:	1009883a 	mov	r4,r2
10005aec:	180b883a 	mov	r5,r3
10005af0:	01800404 	movi	r6,16
10005af4:	000c7840 	call	1000c784 <memcpy>
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&netAppEvent);
10005af8:	d0a7a817 	ldw	r2,-24928(gp)
10005afc:	10802c17 	ldw	r2,176(r2)
10005b00:	e0ffef04 	addi	r3,fp,-68
10005b04:	1809883a 	mov	r4,r3
10005b08:	103ee83a 	callr	r2
            }
            break;
10005b0c:	00011906 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_NETAPP_IP_LEASED:
            {
                SlIpLeasedAsync_t *pIpV4 = (SlIpLeasedAsync_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005b10:	d0a7a817 	ldw	r2,-24928(gp)
10005b14:	10802a17 	ldw	r2,168(r2)
10005b18:	10800204 	addi	r2,r2,8
10005b1c:	e0bfd315 	stw	r2,-180(fp)
                netAppEvent.Event = SL_NETAPP_IP_LEASED_EVENT;
10005b20:	008000c4 	movi	r2,3
10005b24:	e0bfef15 	stw	r2,-68(fp)
                netAppEvent.EventData.ipLeased.ip_address = pIpV4->ip_address;
10005b28:	e0bfd317 	ldw	r2,-180(fp)
10005b2c:	10800017 	ldw	r2,0(r2)
10005b30:	e0bff015 	stw	r2,-64(fp)
                netAppEvent.EventData.ipLeased.lease_time = pIpV4->lease_time;
10005b34:	e0bfd317 	ldw	r2,-180(fp)
10005b38:	10800117 	ldw	r2,4(r2)
10005b3c:	e0bff115 	stw	r2,-60(fp)
                sl_Memcpy(netAppEvent.EventData.ipLeased.mac, pIpV4->mac, 6);
10005b40:	e0bfd317 	ldw	r2,-180(fp)
10005b44:	10c00203 	ldbu	r3,8(r2)
10005b48:	e0fff205 	stb	r3,-56(fp)
10005b4c:	10c00243 	ldbu	r3,9(r2)
10005b50:	e0fff245 	stb	r3,-55(fp)
10005b54:	10c00283 	ldbu	r3,10(r2)
10005b58:	e0fff285 	stb	r3,-54(fp)
10005b5c:	10c002c3 	ldbu	r3,11(r2)
10005b60:	e0fff2c5 	stb	r3,-53(fp)
10005b64:	10c00303 	ldbu	r3,12(r2)
10005b68:	e0fff305 	stb	r3,-52(fp)
10005b6c:	10800343 	ldbu	r2,13(r2)
10005b70:	e0bff345 	stb	r2,-51(fp)

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&netAppEvent);
10005b74:	d0a7a817 	ldw	r2,-24928(gp)
10005b78:	10802c17 	ldw	r2,176(r2)
10005b7c:	e0ffef04 	addi	r3,fp,-68
10005b80:	1809883a 	mov	r4,r3
10005b84:	103ee83a 	callr	r2
            }
            break;
10005b88:	0000fa06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_NETAPP_IP_RELEASED:
            {
                SlIpReleasedAsync_t *pIpV4 = (SlIpReleasedAsync_t *)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005b8c:	d0a7a817 	ldw	r2,-24928(gp)
10005b90:	10802a17 	ldw	r2,168(r2)
10005b94:	10800204 	addi	r2,r2,8
10005b98:	e0bfd415 	stw	r2,-176(fp)
                netAppEvent.Event = SL_NETAPP_IP_RELEASED_EVENT;
10005b9c:	00800104 	movi	r2,4
10005ba0:	e0bfef15 	stw	r2,-68(fp)
                netAppEvent.EventData.ipReleased.ip_address = pIpV4->ip_address;
10005ba4:	e0bfd417 	ldw	r2,-176(fp)
10005ba8:	10800017 	ldw	r2,0(r2)
10005bac:	e0bff015 	stw	r2,-64(fp)
                netAppEvent.EventData.ipReleased.reason = pIpV4->reason;
10005bb0:	e0bfd417 	ldw	r2,-176(fp)
10005bb4:	1080028b 	ldhu	r2,10(r2)
10005bb8:	e0bff28d 	sth	r2,-54(fp)
                sl_Memcpy(netAppEvent.EventData.ipReleased.mac, pIpV4->mac, 6);
10005bbc:	e0bfd417 	ldw	r2,-176(fp)
10005bc0:	10c00103 	ldbu	r3,4(r2)
10005bc4:	e0fff105 	stb	r3,-60(fp)
10005bc8:	10c00143 	ldbu	r3,5(r2)
10005bcc:	e0fff145 	stb	r3,-59(fp)
10005bd0:	10c00183 	ldbu	r3,6(r2)
10005bd4:	e0fff185 	stb	r3,-58(fp)
10005bd8:	10c001c3 	ldbu	r3,7(r2)
10005bdc:	e0fff1c5 	stb	r3,-57(fp)
10005be0:	10c00203 	ldbu	r3,8(r2)
10005be4:	e0fff205 	stb	r3,-56(fp)
10005be8:	10800243 	ldbu	r2,9(r2)
10005bec:	e0bff245 	stb	r2,-55(fp)

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&netAppEvent);
10005bf0:	d0a7a817 	ldw	r2,-24928(gp)
10005bf4:	10802c17 	ldw	r2,176(r2)
10005bf8:	e0ffef04 	addi	r3,fp,-68
10005bfc:	1809883a 	mov	r4,r3
10005c00:	103ee83a 	callr	r2
            }
            break;
10005c04:	0000db06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_SOCKET_TXFAILEDASYNCRESPONSE:
            {
                SlSockEventData_t *txfailparams = (SlSockEventData_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);			
10005c08:	d0a7a817 	ldw	r2,-24928(gp)
10005c0c:	10802a17 	ldw	r2,168(r2)
10005c10:	10800204 	addi	r2,r2,8
10005c14:	e0bfd515 	stw	r2,-172(fp)
                sockAppEvent.Event =  SL_SOCKET_TX_FAILED_EVENT;
10005c18:	00800044 	movi	r2,1
10005c1c:	e0bffd15 	stw	r2,-12(fp)
                sl_Memcpy((void *)&sockAppEvent.EventData,(void *)txfailparams,sizeof(SlSockEventData_t)); 
10005c20:	e0bffd04 	addi	r2,fp,-12
10005c24:	10800104 	addi	r2,r2,4
10005c28:	1009883a 	mov	r4,r2
10005c2c:	e17fd517 	ldw	r5,-172(fp)
10005c30:	01800204 	movi	r6,8
10005c34:	000c7840 	call	1000c784 <memcpy>
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&sockAppEvent);
10005c38:	d0a7a817 	ldw	r2,-24928(gp)
10005c3c:	10802c17 	ldw	r2,176(r2)
10005c40:	e0fffd04 	addi	r3,fp,-12
10005c44:	1809883a 	mov	r4,r3
10005c48:	103ee83a 	callr	r2
            }
            break; 
10005c4c:	0000c906 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_SOCKET_SOCKETASYNCEVENT:
            {
                SlSockEventData_t *socketAsyncEvent = (SlSockEventData_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);			
10005c50:	d0a7a817 	ldw	r2,-24928(gp)
10005c54:	10802a17 	ldw	r2,168(r2)
10005c58:	10800204 	addi	r2,r2,8
10005c5c:	e0bfd615 	stw	r2,-168(fp)
                sockAppEvent.Event =  SL_SOCKET_ASYNC_EVENT;
10005c60:	00800084 	movi	r2,2
10005c64:	e0bffd15 	stw	r2,-12(fp)
                sockAppEvent.EventData.socketAsyncEvent.sd = socketAsyncEvent->socketAsyncEvent.sd;
10005c68:	e0bfd617 	ldw	r2,-168(fp)
10005c6c:	10800103 	ldbu	r2,4(r2)
10005c70:	e0bfff05 	stb	r2,-4(fp)
                sockAppEvent.EventData.socketAsyncEvent.type = socketAsyncEvent->socketAsyncEvent.type; /* one of the possible types of socket */
10005c74:	e0bfd617 	ldw	r2,-168(fp)
10005c78:	10800143 	ldbu	r2,5(r2)
10005c7c:	e0bfff45 	stb	r2,-3(fp)
                sockAppEvent.EventData.socketAsyncEvent.val = socketAsyncEvent->socketAsyncEvent.val;
10005c80:	e0bfd617 	ldw	r2,-168(fp)
10005c84:	1080018b 	ldhu	r2,6(r2)
10005c88:	e0bfff8d 	sth	r2,-2(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&sockAppEvent);
10005c8c:	d0a7a817 	ldw	r2,-24928(gp)
10005c90:	10802c17 	ldw	r2,176(r2)
10005c94:	e0fffd04 	addi	r3,fp,-12
10005c98:	1809883a 	mov	r4,r3
10005c9c:	103ee83a 	callr	r2
            }
            break; 
10005ca0:	0000b406 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_WLAN_SMART_CONFIG_START_ASYNC_RESPONSE:
            {
                slSmartConfigStartAsyncResponse_t *pResp = (slSmartConfigStartAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005ca4:	d0a7a817 	ldw	r2,-24928(gp)
10005ca8:	10802a17 	ldw	r2,168(r2)
10005cac:	10800204 	addi	r2,r2,8
10005cb0:	e0bfd715 	stw	r2,-164(fp)

                wlanEvent.Event = SL_WLAN_SMART_CONFIG_COMPLETE_EVENT;
10005cb4:	008000c4 	movi	r2,3
10005cb8:	e0bfdb15 	stw	r2,-148(fp)
                wlanEvent.EventData.smartConfigStartResponse.status = pResp->status;
10005cbc:	e0bfd717 	ldw	r2,-164(fp)
10005cc0:	10800017 	ldw	r2,0(r2)
10005cc4:	e0bfdc15 	stw	r2,-144(fp)
                wlanEvent.EventData.smartConfigStartResponse.ssid_len = pResp->ssid_len;
10005cc8:	e0bfd717 	ldw	r2,-164(fp)
10005ccc:	10800117 	ldw	r2,4(r2)
10005cd0:	e0bfdd15 	stw	r2,-140(fp)
                wlanEvent.EventData.smartConfigStartResponse.private_token_len = pResp->private_token_len;
10005cd4:	e0bfd717 	ldw	r2,-164(fp)
10005cd8:	10800a17 	ldw	r2,40(r2)
10005cdc:	e0bfe615 	stw	r2,-104(fp)

                sl_Memset(wlanEvent.EventData.smartConfigStartResponse.ssid, 0x00, sizeof(wlanEvent.EventData.smartConfigStartResponse.ssid));
10005ce0:	e0bfdb04 	addi	r2,fp,-148
10005ce4:	10800304 	addi	r2,r2,12
10005ce8:	1009883a 	mov	r4,r2
10005cec:	000b883a 	mov	r5,zero
10005cf0:	01800804 	movi	r6,32
10005cf4:	000c8bc0 	call	1000c8bc <memset>
                sl_Memcpy(wlanEvent.EventData.smartConfigStartResponse.ssid, pResp->ssid, pResp->ssid_len);
10005cf8:	e0bfd717 	ldw	r2,-164(fp)
10005cfc:	11400204 	addi	r5,r2,8
10005d00:	e0bfd717 	ldw	r2,-164(fp)
10005d04:	10c00117 	ldw	r3,4(r2)
10005d08:	e0bfdb04 	addi	r2,fp,-148
10005d0c:	10800304 	addi	r2,r2,12
10005d10:	1009883a 	mov	r4,r2
10005d14:	180d883a 	mov	r6,r3
10005d18:	000c7840 	call	1000c784 <memcpy>
                /* if private data exist */
                if (pResp->private_token_len)
10005d1c:	e0bfd717 	ldw	r2,-164(fp)
10005d20:	10800a17 	ldw	r2,40(r2)
10005d24:	10000f26 	beq	r2,zero,10005d64 <_SlAsyncEventGenericHandler+0x73c>
                {
                    sl_Memset(wlanEvent.EventData.smartConfigStartResponse.private_token, 0x00, sizeof(wlanEvent.EventData.smartConfigStartResponse.private_token));
10005d28:	e0bfdb04 	addi	r2,fp,-148
10005d2c:	10800c04 	addi	r2,r2,48
10005d30:	1009883a 	mov	r4,r2
10005d34:	000b883a 	mov	r5,zero
10005d38:	01800804 	movi	r6,32
10005d3c:	000c8bc0 	call	1000c8bc <memset>
                    sl_Memcpy(wlanEvent.EventData.smartConfigStartResponse.private_token, pResp->private_token, pResp->private_token_len);
10005d40:	e0bfd717 	ldw	r2,-164(fp)
10005d44:	11400b04 	addi	r5,r2,44
10005d48:	e0bfd717 	ldw	r2,-164(fp)
10005d4c:	10c00a17 	ldw	r3,40(r2)
10005d50:	e0bfdb04 	addi	r2,fp,-148
10005d54:	10800c04 	addi	r2,r2,48
10005d58:	1009883a 	mov	r4,r2
10005d5c:	180d883a 	mov	r6,r3
10005d60:	000c7840 	call	1000c784 <memcpy>
                }

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005d64:	d0a7a817 	ldw	r2,-24928(gp)
10005d68:	10802c17 	ldw	r2,176(r2)
10005d6c:	e0ffdb04 	addi	r3,fp,-148
10005d70:	1809883a 	mov	r4,r3
10005d74:	103ee83a 	callr	r2
            }
            break;
10005d78:	00007e06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_WLAN_SMART_CONFIG_STOP_ASYNC_RESPONSE:
            {
                slSmartConfigStopAsyncResponse_t *pResp = (slSmartConfigStopAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005d7c:	d0a7a817 	ldw	r2,-24928(gp)
10005d80:	10802a17 	ldw	r2,168(r2)
10005d84:	10800204 	addi	r2,r2,8
10005d88:	e0bfd815 	stw	r2,-160(fp)

                wlanEvent.Event = SL_WLAN_SMART_CONFIG_STOP_EVENT;
10005d8c:	00800104 	movi	r2,4
10005d90:	e0bfdb15 	stw	r2,-148(fp)
                wlanEvent.EventData.smartConfigStopResponse.status = pResp->status;
10005d94:	e0bfd817 	ldw	r2,-160(fp)
10005d98:	1080000b 	ldhu	r2,0(r2)
10005d9c:	e0bfdc0d 	sth	r2,-144(fp)

                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005da0:	d0a7a817 	ldw	r2,-24928(gp)
10005da4:	10802c17 	ldw	r2,176(r2)
10005da8:	e0ffdb04 	addi	r3,fp,-148
10005dac:	1809883a 	mov	r4,r3
10005db0:	103ee83a 	callr	r2
            }
            break;
10005db4:	00006f06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_WLAN_STA_CONNECTED:
            {
                slPeerInfoAsyncResponse_t* pResp = (slPeerInfoAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005db8:	d0a7a817 	ldw	r2,-24928(gp)
10005dbc:	10802a17 	ldw	r2,168(r2)
10005dc0:	10800204 	addi	r2,r2,8
10005dc4:	e0bfd915 	stw	r2,-156(fp)
                sl_Memset(&wlanEvent.EventData.APModeStaConnected,0,sizeof(slPeerInfoAsyncResponse_t));
10005dc8:	e0bfdb04 	addi	r2,fp,-148
10005dcc:	10800104 	addi	r2,r2,4
10005dd0:	1009883a 	mov	r4,r2
10005dd4:	000b883a 	mov	r5,zero
10005dd8:	01801304 	movi	r6,76
10005ddc:	000c8bc0 	call	1000c8bc <memset>
                wlanEvent.Event = SL_WLAN_STA_CONNECTED_EVENT;
10005de0:	00800144 	movi	r2,5
10005de4:	e0bfdb15 	stw	r2,-148(fp)
                sl_Memcpy(wlanEvent.EventData.APModeStaConnected.mac,pResp->mac, 6);
10005de8:	e0bfd917 	ldw	r2,-156(fp)
10005dec:	10c00803 	ldbu	r3,32(r2)
10005df0:	e0ffe405 	stb	r3,-112(fp)
10005df4:	10c00843 	ldbu	r3,33(r2)
10005df8:	e0ffe445 	stb	r3,-111(fp)
10005dfc:	10c00883 	ldbu	r3,34(r2)
10005e00:	e0ffe485 	stb	r3,-110(fp)
10005e04:	10c008c3 	ldbu	r3,35(r2)
10005e08:	e0ffe4c5 	stb	r3,-109(fp)
10005e0c:	10c00903 	ldbu	r3,36(r2)
10005e10:	e0ffe505 	stb	r3,-108(fp)
10005e14:	10800943 	ldbu	r2,37(r2)
10005e18:	e0bfe545 	stb	r2,-107(fp)
                sl_Memcpy(wlanEvent.EventData.APModeStaConnected.go_peer_device_name,pResp->go_peer_device_name,pResp->go_peer_device_name_len);
10005e1c:	e17fd917 	ldw	r5,-156(fp)
10005e20:	e0bfd917 	ldw	r2,-156(fp)
10005e24:	10800983 	ldbu	r2,38(r2)
10005e28:	10c03fcc 	andi	r3,r2,255
10005e2c:	e0bfdb04 	addi	r2,fp,-148
10005e30:	10800104 	addi	r2,r2,4
10005e34:	1009883a 	mov	r4,r2
10005e38:	180d883a 	mov	r6,r3
10005e3c:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.APModeStaConnected.go_peer_device_name_len = pResp->go_peer_device_name_len;
10005e40:	e0bfd917 	ldw	r2,-156(fp)
10005e44:	10800983 	ldbu	r2,38(r2)
10005e48:	e0bfe585 	stb	r2,-106(fp)

                sl_Memcpy(wlanEvent.EventData.APModeStaConnected.own_ssid,pResp->own_ssid,pResp->own_ssid_len);
10005e4c:	e0bfd917 	ldw	r2,-156(fp)
10005e50:	11400a04 	addi	r5,r2,40
10005e54:	e0bfd917 	ldw	r2,-156(fp)
10005e58:	10801203 	ldbu	r2,72(r2)
10005e5c:	10c03fcc 	andi	r3,r2,255
10005e60:	e0bfdb04 	addi	r2,fp,-148
10005e64:	10800b04 	addi	r2,r2,44
10005e68:	1009883a 	mov	r4,r2
10005e6c:	180d883a 	mov	r6,r3
10005e70:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.APModeStaConnected.own_ssid_len = pResp->own_ssid_len;
10005e74:	e0bfd917 	ldw	r2,-156(fp)
10005e78:	10801203 	ldbu	r2,72(r2)
10005e7c:	e0bfee05 	stb	r2,-72(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005e80:	d0a7a817 	ldw	r2,-24928(gp)
10005e84:	10802c17 	ldw	r2,176(r2)
10005e88:	e0ffdb04 	addi	r3,fp,-148
10005e8c:	1809883a 	mov	r4,r3
10005e90:	103ee83a 	callr	r2
            }
            break;
10005e94:	00003706 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_WLAN_STA_DISCONNECTED:
            {
                slPeerInfoAsyncResponse_t* pResp = (slPeerInfoAsyncResponse_t*)_SL_RESP_ARGS_START(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005e98:	d0a7a817 	ldw	r2,-24928(gp)
10005e9c:	10802a17 	ldw	r2,168(r2)
10005ea0:	10800204 	addi	r2,r2,8
10005ea4:	e0bfda15 	stw	r2,-152(fp)
                sl_Memset(&wlanEvent.EventData.APModestaDisconnected,0,sizeof(slPeerInfoAsyncResponse_t));
10005ea8:	e0bfdb04 	addi	r2,fp,-148
10005eac:	10800104 	addi	r2,r2,4
10005eb0:	1009883a 	mov	r4,r2
10005eb4:	000b883a 	mov	r5,zero
10005eb8:	01801304 	movi	r6,76
10005ebc:	000c8bc0 	call	1000c8bc <memset>
                wlanEvent.Event = SL_WLAN_STA_DISCONNECTED_EVENT;
10005ec0:	00800184 	movi	r2,6
10005ec4:	e0bfdb15 	stw	r2,-148(fp)
                sl_Memcpy(wlanEvent.EventData.APModestaDisconnected.mac,pResp->mac, 6);
10005ec8:	e0bfda17 	ldw	r2,-152(fp)
10005ecc:	10c00803 	ldbu	r3,32(r2)
10005ed0:	e0ffe405 	stb	r3,-112(fp)
10005ed4:	10c00843 	ldbu	r3,33(r2)
10005ed8:	e0ffe445 	stb	r3,-111(fp)
10005edc:	10c00883 	ldbu	r3,34(r2)
10005ee0:	e0ffe485 	stb	r3,-110(fp)
10005ee4:	10c008c3 	ldbu	r3,35(r2)
10005ee8:	e0ffe4c5 	stb	r3,-109(fp)
10005eec:	10c00903 	ldbu	r3,36(r2)
10005ef0:	e0ffe505 	stb	r3,-108(fp)
10005ef4:	10800943 	ldbu	r2,37(r2)
10005ef8:	e0bfe545 	stb	r2,-107(fp)
                sl_Memcpy(wlanEvent.EventData.APModestaDisconnected.go_peer_device_name,pResp->go_peer_device_name,pResp->go_peer_device_name_len);
10005efc:	e17fda17 	ldw	r5,-152(fp)
10005f00:	e0bfda17 	ldw	r2,-152(fp)
10005f04:	10800983 	ldbu	r2,38(r2)
10005f08:	10c03fcc 	andi	r3,r2,255
10005f0c:	e0bfdb04 	addi	r2,fp,-148
10005f10:	10800104 	addi	r2,r2,4
10005f14:	1009883a 	mov	r4,r2
10005f18:	180d883a 	mov	r6,r3
10005f1c:	000c7840 	call	1000c784 <memcpy>
                wlanEvent.EventData.APModestaDisconnected.go_peer_device_name_len = pResp->go_peer_device_name_len;
10005f20:	e0bfda17 	ldw	r2,-152(fp)
10005f24:	10800983 	ldbu	r2,38(r2)
10005f28:	e0bfe585 	stb	r2,-106(fp)
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(&wlanEvent);
10005f2c:	d0a7a817 	ldw	r2,-24928(gp)
10005f30:	10802c17 	ldw	r2,176(r2)
10005f34:	e0ffdb04 	addi	r3,fp,-148
10005f38:	1809883a 	mov	r4,r3
10005f3c:	103ee83a 	callr	r2
            }
            break;
10005f40:	00000c06 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>

        case SL_OPCODE_NETAPP_PINGREPORTREQUESTRESPONSE:
            {
                _sl_HandleAsync_PingResponse((void *)g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10005f44:	d0a7a817 	ldw	r2,-24928(gp)
10005f48:	10802a17 	ldw	r2,168(r2)
10005f4c:	1009883a 	mov	r4,r2
10005f50:	00088c40 	call	100088c4 <_sl_HandleAsync_PingResponse>
            }
            break;     
10005f54:	00000706 	br	10005f74 <_SlAsyncEventGenericHandler+0x94c>


        default:
            g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler(g_pCB->FunctionParams.AsyncExt.pAsyncBuf); 
10005f58:	d0a7a817 	ldw	r2,-24928(gp)
10005f5c:	10802c17 	ldw	r2,176(r2)
10005f60:	d0e7a817 	ldw	r3,-24928(gp)
10005f64:	18c02a17 	ldw	r3,168(r3)
10005f68:	1809883a 	mov	r4,r3
10005f6c:	103ee83a 	callr	r2
            break;
10005f70:	0001883a 	nop
        } 
    } 
}
10005f74:	e037883a 	mov	sp,fp
10005f78:	dfc00117 	ldw	ra,4(sp)
10005f7c:	df000017 	ldw	fp,0(sp)
10005f80:	dec00204 	addi	sp,sp,8
10005f84:	f800283a 	ret

10005f88 <_SlDrvMsgReadCmdCtx>:

/* ******************************************************************************/
/*  _SlDrvMsgReadCmdCtx  */
/* ******************************************************************************/
_SlReturnVal_t _SlDrvMsgReadCmdCtx(void)
{
10005f88:	defffc04 	addi	sp,sp,-16
10005f8c:	dfc00315 	stw	ra,12(sp)
10005f90:	df000215 	stw	fp,8(sp)
10005f94:	df000204 	addi	fp,sp,8
    /*  flag is set FALSE, it is necessary to read out all */
    /*  Async messages in Commands context, because ssiDma_IsrHandleSignalFromSlave */
    /*  could have dispatched some Async messages to g_NwpIf.CmdSyncObj */
    /*  after command response but before this response has been processed */
    /*  by spi_singleRead and isCmdRespWaited was set FALSE. */
    while (TRUE == g_pCB->IsCmdRespWaited)
10005f98:	00003b06 	br	10006088 <_SlDrvMsgReadCmdCtx+0x100>
    {
        if(_SL_PENDING_RX_MSG(g_pCB))
10005f9c:	d0a7a817 	ldw	r2,-24928(gp)
10005fa0:	10c025c3 	ldbu	r3,151(r2)
10005fa4:	d0a7a817 	ldw	r2,-24928(gp)
10005fa8:	10802603 	ldbu	r2,152(r2)
10005fac:	18c03fcc 	andi	r3,r3,255
10005fb0:	10803fcc 	andi	r2,r2,255
10005fb4:	18802626 	beq	r3,r2,10006050 <_SlDrvMsgReadCmdCtx+0xc8>
        {
            g_pCB->FunctionParams.AsyncExt.pAsyncBuf      = NULL;/*  buffer must be allocated by _SlDrvMsgRead */
10005fb8:	d0a7a817 	ldw	r2,-24928(gp)
10005fbc:	10002a15 	stw	zero,168(r2)
            g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler= NULL;
10005fc0:	d0a7a817 	ldw	r2,-24928(gp)
10005fc4:	10002c15 	stw	zero,176(r2)
            g_pCB->FunctionParams.AsyncExt.RxMsgClass     = (_SlRxMsgClass_e)(-1);/* init to illegal value and verify it's overwritten with the valid one */
10005fc8:	d0a7a817 	ldw	r2,-24928(gp)
10005fcc:	00ffffc4 	movi	r3,-1
10005fd0:	10c02d15 	stw	r3,180(r2)

            VERIFY_RET_OK(_SlDrvMsgRead());
10005fd4:	0004c400 	call	10004c40 <_SlDrvMsgRead>
10005fd8:	e0bffe0d 	sth	r2,-8(fp)
10005fdc:	e0bffe0f 	ldh	r2,-8(fp)
10005fe0:	10000126 	beq	r2,zero,10005fe8 <_SlDrvMsgReadCmdCtx+0x60>
10005fe4:	003fff06 	br	10005fe4 <__alt_data_end+0xf0005fe4>
            g_pCB->RxDoneCnt++;
10005fe8:	d0a7a817 	ldw	r2,-24928(gp)
10005fec:	10c02603 	ldbu	r3,152(r2)
10005ff0:	18c00044 	addi	r3,r3,1
10005ff4:	10c02605 	stb	r3,152(r2)

            if (CMD_RESP_CLASS == g_pCB->FunctionParams.AsyncExt.RxMsgClass)
10005ff8:	d0a7a817 	ldw	r2,-24928(gp)
10005ffc:	10802d17 	ldw	r2,180(r2)
10006000:	10800058 	cmpnei	r2,r2,1
10006004:	10000a1e 	bne	r2,zero,10006030 <_SlDrvMsgReadCmdCtx+0xa8>
            {
                g_pCB->IsCmdRespWaited = FALSE;
10006008:	d0a7a817 	ldw	r2,-24928(gp)
1000600c:	10002485 	stb	zero,146(r2)

                /*  In case CmdResp has been read without  waiting on CmdSyncObj -  that */
                /*  Sync object. That to prevent old signal to be processed. */
                sl_SyncObjClear(&g_pCB->CmdSyncObj);
10006010:	d0a7a817 	ldw	r2,-24928(gp)
10006014:	10802444 	addi	r2,r2,145
10006018:	1009883a 	mov	r4,r2
1000601c:	01400884 	movi	r5,34
10006020:	01800444 	movi	r6,17
10006024:	01c00044 	movi	r7,1
10006028:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000602c:	00001606 	br	10006088 <_SlDrvMsgReadCmdCtx+0x100>
            }
            else if (ASYNC_EVT_CLASS == g_pCB->FunctionParams.AsyncExt.RxMsgClass)
10006030:	d0a7a817 	ldw	r2,-24928(gp)
10006034:	10802d17 	ldw	r2,180(r2)
10006038:	10800098 	cmpnei	r2,r2,2
1000603c:	1000121e 	bne	r2,zero,10006088 <_SlDrvMsgReadCmdCtx+0x100>
                /*  there is a handler for this event. If there is, spawn specific */
                /*  handler. Otherwise free the event's buffer. */
                /*  This way there will be no "dry shots" from CmdResp context to */
                /*  temporary context, i.e less waste of CPU and faster buffer */
                /*  release. */
                _SlAsyncEventGenericHandler();
10006040:	00056280 	call	10005628 <_SlAsyncEventGenericHandler>

#if (SL_MEMORY_MGMT == SL_MEMORY_MGMT_STATIC)
                g_pCB->FunctionParams.AsyncExt.pAsyncBuf = NULL;
10006044:	d0a7a817 	ldw	r2,-24928(gp)
10006048:	10002a15 	stw	zero,168(r2)
1000604c:	00000e06 	br	10006088 <_SlDrvMsgReadCmdCtx+0x100>
            }
        }
        else
        {
            /* CmdSyncObj will be signaled by IRQ */
            OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->CmdSyncObj, SL_OS_WAIT_FOREVER));
10006050:	d0a7a817 	ldw	r2,-24928(gp)
10006054:	10802444 	addi	r2,r2,145
10006058:	1009883a 	mov	r4,r2
1000605c:	01400884 	movi	r5,34
10006060:	01800444 	movi	r6,17
10006064:	01c03fc4 	movi	r7,255
10006068:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000606c:	10803fcc 	andi	r2,r2,255
10006070:	1080201c 	xori	r2,r2,128
10006074:	10bfe004 	addi	r2,r2,-128
10006078:	e0bffe8d 	sth	r2,-6(fp)
1000607c:	e0bffe8f 	ldh	r2,-6(fp)
10006080:	10000126 	beq	r2,zero,10006088 <_SlDrvMsgReadCmdCtx+0x100>
10006084:	003fff06 	br	10006084 <__alt_data_end+0xf0006084>
    /*  flag is set FALSE, it is necessary to read out all */
    /*  Async messages in Commands context, because ssiDma_IsrHandleSignalFromSlave */
    /*  could have dispatched some Async messages to g_NwpIf.CmdSyncObj */
    /*  after command response but before this response has been processed */
    /*  by spi_singleRead and isCmdRespWaited was set FALSE. */
    while (TRUE == g_pCB->IsCmdRespWaited)
10006088:	d0a7a817 	ldw	r2,-24928(gp)
1000608c:	10802483 	ldbu	r2,146(r2)
10006090:	10803fcc 	andi	r2,r2,255
10006094:	10800060 	cmpeqi	r2,r2,1
10006098:	103fc01e 	bne	r2,zero,10005f9c <__alt_data_end+0xf0005f9c>
    /*  If there are more pending Rx Msgs after CmdResp is received, */
    /*  that means that these are Async, Dummy or Read Data Msgs. */
    /*  Spawn _SlDrvMsgReadSpawnCtx to trigger reading these messages from */
    /*  Temporary context. */
    /* sl_Spawn is activated, using a different context */
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->GlobalLockObj));
1000609c:	d0a7a817 	ldw	r2,-24928(gp)
100060a0:	10800104 	addi	r2,r2,4
100060a4:	1009883a 	mov	r4,r2
100060a8:	01400cc4 	movi	r5,51
100060ac:	000938c0 	call	1000938c <_SlNonOsSemSet>
100060b0:	10803fcc 	andi	r2,r2,255
100060b4:	1080201c 	xori	r2,r2,128
100060b8:	10bfe004 	addi	r2,r2,-128
100060bc:	e0bfff0d 	sth	r2,-4(fp)
100060c0:	e0bfff0f 	ldh	r2,-4(fp)
100060c4:	10000126 	beq	r2,zero,100060cc <_SlDrvMsgReadCmdCtx+0x144>
100060c8:	003fff06 	br	100060c8 <__alt_data_end+0xf00060c8>
    if(_SL_PENDING_RX_MSG(g_pCB))
100060cc:	d0a7a817 	ldw	r2,-24928(gp)
100060d0:	10c025c3 	ldbu	r3,151(r2)
100060d4:	d0a7a817 	ldw	r2,-24928(gp)
100060d8:	10802603 	ldbu	r2,152(r2)
100060dc:	18c03fcc 	andi	r3,r3,255
100060e0:	10803fcc 	andi	r2,r2,255
100060e4:	18800526 	beq	r3,r2,100060fc <_SlDrvMsgReadCmdCtx+0x174>
    {
        sl_Spawn((_SlSpawnEntryFunc_t)_SlDrvMsgReadSpawnCtx, NULL, 0);
100060e8:	01040034 	movhi	r4,4096
100060ec:	21184504 	addi	r4,r4,24852
100060f0:	000b883a 	mov	r5,zero
100060f4:	000d883a 	mov	r6,zero
100060f8:	00094640 	call	10009464 <_SlNonOsSpawn>
    }

    return SL_OS_RET_CODE_OK;
100060fc:	0005883a 	mov	r2,zero
}
10006100:	e037883a 	mov	sp,fp
10006104:	dfc00117 	ldw	ra,4(sp)
10006108:	df000017 	ldw	fp,0(sp)
1000610c:	dec00204 	addi	sp,sp,8
10006110:	f800283a 	ret

10006114 <_SlDrvMsgReadSpawnCtx>:

/* ******************************************************************************/
/*  _SlDrvMsgReadSpawnCtx                                                       */
/* ******************************************************************************/
_SlReturnVal_t _SlDrvMsgReadSpawnCtx(void *pValue)
{
10006114:	defffb04 	addi	sp,sp,-20
10006118:	dfc00415 	stw	ra,16(sp)
1000611c:	df000315 	stw	fp,12(sp)
10006120:	df000304 	addi	fp,sp,12
10006124:	e13fff15 	stw	r4,-4(fp)

    }
    while (OSI_OK != retCode);

#else
    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->GlobalLockObj, SL_OS_WAIT_FOREVER) );
10006128:	d0a7a817 	ldw	r2,-24928(gp)
1000612c:	10800104 	addi	r2,r2,4
10006130:	1009883a 	mov	r4,r2
10006134:	01400cc4 	movi	r5,51
10006138:	01801104 	movi	r6,68
1000613c:	01c03fc4 	movi	r7,255
10006140:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10006144:	10803fcc 	andi	r2,r2,255
10006148:	1080201c 	xori	r2,r2,128
1000614c:	10bfe004 	addi	r2,r2,-128
10006150:	e0bffd0d 	sth	r2,-12(fp)
10006154:	e0bffd0f 	ldh	r2,-12(fp)
10006158:	10000126 	beq	r2,zero,10006160 <_SlDrvMsgReadSpawnCtx+0x4c>
1000615c:	003fff06 	br	1000615c <__alt_data_end+0xf000615c>
#endif

    g_pCB->FunctionParams.AsyncExt.pAsyncBuf      = NULL;/*  buffer must be allocated by _SlDrvMsgRead */
10006160:	d0a7a817 	ldw	r2,-24928(gp)
10006164:	10002a15 	stw	zero,168(r2)
    g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler= NULL;
10006168:	d0a7a817 	ldw	r2,-24928(gp)
1000616c:	10002c15 	stw	zero,176(r2)
    g_pCB->FunctionParams.AsyncExt.RxMsgClass     = CMD_RESP_CLASS;/* init to illegal value and verify it's overwritten with the valid one */
10006170:	d0a7a817 	ldw	r2,-24928(gp)
10006174:	00c00044 	movi	r3,1
10006178:	10c02d15 	stw	r3,180(r2)

    /*  Messages might have been read by CmdResp context. Therefore after */
    /*  getting LockObj, check again where the Pending Rx Msg is still present. */
    if(FALSE == (_SL_PENDING_RX_MSG(g_pCB)))
1000617c:	d0a7a817 	ldw	r2,-24928(gp)
10006180:	10c025c3 	ldbu	r3,151(r2)
10006184:	d0a7a817 	ldw	r2,-24928(gp)
10006188:	10802603 	ldbu	r2,152(r2)
1000618c:	18c03fcc 	andi	r3,r3,255
10006190:	10803fcc 	andi	r2,r2,255
10006194:	18800e1e 	bne	r3,r2,100061d0 <_SlDrvMsgReadSpawnCtx+0xbc>
    {
        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->GlobalLockObj));
10006198:	d0a7a817 	ldw	r2,-24928(gp)
1000619c:	10800104 	addi	r2,r2,4
100061a0:	1009883a 	mov	r4,r2
100061a4:	01400cc4 	movi	r5,51
100061a8:	000938c0 	call	1000938c <_SlNonOsSemSet>
100061ac:	10803fcc 	andi	r2,r2,255
100061b0:	1080201c 	xori	r2,r2,128
100061b4:	10bfe004 	addi	r2,r2,-128
100061b8:	e0bffd8d 	sth	r2,-10(fp)
100061bc:	e0bffd8f 	ldh	r2,-10(fp)
100061c0:	10000126 	beq	r2,zero,100061c8 <_SlDrvMsgReadSpawnCtx+0xb4>
100061c4:	003fff06 	br	100061c4 <__alt_data_end+0xf00061c4>
        return SL_RET_CODE_OK;
100061c8:	0005883a 	mov	r2,zero
100061cc:	00002806 	br	10006270 <_SlDrvMsgReadSpawnCtx+0x15c>
    }

    VERIFY_RET_OK(_SlDrvMsgRead());
100061d0:	0004c400 	call	10004c40 <_SlDrvMsgRead>
100061d4:	e0bffe0d 	sth	r2,-8(fp)
100061d8:	e0bffe0f 	ldh	r2,-8(fp)
100061dc:	10000126 	beq	r2,zero,100061e4 <_SlDrvMsgReadSpawnCtx+0xd0>
100061e0:	003fff06 	br	100061e0 <__alt_data_end+0xf00061e0>

    g_pCB->RxDoneCnt++;
100061e4:	d0a7a817 	ldw	r2,-24928(gp)
100061e8:	10c02603 	ldbu	r3,152(r2)
100061ec:	18c00044 	addi	r3,r3,1
100061f0:	10c02605 	stb	r3,152(r2)

    switch(g_pCB->FunctionParams.AsyncExt.RxMsgClass)
100061f4:	d0a7a817 	ldw	r2,-24928(gp)
100061f8:	10802d17 	ldw	r2,180(r2)
100061fc:	10c000a0 	cmpeqi	r3,r2,2
10006200:	1800041e 	bne	r3,zero,10006214 <_SlDrvMsgReadSpawnCtx+0x100>
10006204:	10c000e0 	cmpeqi	r3,r2,3
10006208:	18000b1e 	bne	r3,zero,10006238 <_SlDrvMsgReadSpawnCtx+0x124>
1000620c:	10000a26 	beq	r2,zero,10006238 <_SlDrvMsgReadSpawnCtx+0x124>
10006210:	00000806 	br	10006234 <_SlDrvMsgReadSpawnCtx+0x120>
    {
    case ASYNC_EVT_CLASS:
        /*  If got here and protected by LockObj a message is waiting  */
        /*  to be read */
        VERIFY_PROTOCOL(NULL != g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
10006214:	d0a7a817 	ldw	r2,-24928(gp)
10006218:	10802a17 	ldw	r2,168(r2)
1000621c:	1000011e 	bne	r2,zero,10006224 <_SlDrvMsgReadSpawnCtx+0x110>
10006220:	003fff06 	br	10006220 <__alt_data_end+0xf0006220>

        _SlAsyncEventGenericHandler();
10006224:	00056280 	call	10005628 <_SlAsyncEventGenericHandler>

#if (SL_MEMORY_MGMT == SL_MEMORY_MGMT_STATIC)
        g_pCB->FunctionParams.AsyncExt.pAsyncBuf = NULL;
10006228:	d0a7a817 	ldw	r2,-24928(gp)
1000622c:	10002a15 	stw	zero,168(r2)
#else
        sl_Free(g_pCB->FunctionParams.AsyncExt.pAsyncBuf);
#endif
        break;
10006230:	00000206 	br	1000623c <_SlDrvMsgReadSpawnCtx+0x128>
        break;
    case CMD_RESP_CLASS:
        /* Command response is illegal in this context. */
        /* No 'break' here: Assert! */
    default:
        VERIFY_PROTOCOL(0);
10006234:	003fff06 	br	10006234 <__alt_data_end+0xf0006234>
#endif
        break;
    case DUMMY_MSG_CLASS:
    case RECV_RESP_CLASS:
        /* These types are legal in this context. Do nothing */
        break;
10006238:	0001883a 	nop
        /* No 'break' here: Assert! */
    default:
        VERIFY_PROTOCOL(0);
    }

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->GlobalLockObj));
1000623c:	d0a7a817 	ldw	r2,-24928(gp)
10006240:	10800104 	addi	r2,r2,4
10006244:	1009883a 	mov	r4,r2
10006248:	01400cc4 	movi	r5,51
1000624c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10006250:	10803fcc 	andi	r2,r2,255
10006254:	1080201c 	xori	r2,r2,128
10006258:	10bfe004 	addi	r2,r2,-128
1000625c:	e0bffe8d 	sth	r2,-6(fp)
10006260:	e0bffe8f 	ldh	r2,-6(fp)
10006264:	10000126 	beq	r2,zero,1000626c <_SlDrvMsgReadSpawnCtx+0x158>
10006268:	003fff06 	br	10006268 <__alt_data_end+0xf0006268>

    return(SL_RET_CODE_OK);
1000626c:	0005883a 	mov	r2,zero
}
10006270:	e037883a 	mov	sp,fp
10006274:	dfc00117 	ldw	ra,4(sp)
10006278:	df000017 	ldw	fp,0(sp)
1000627c:	dec00204 	addi	sp,sp,8
10006280:	f800283a 	ret

10006284 <_SlDrvClassifyRxMsg>:
/* ******************************************************************************/
/*  _SlDrvClassifyRxMsg */
/* ******************************************************************************/
void _SlDrvClassifyRxMsg(
    _SlOpcode_t         Opcode)
{
10006284:	defffe04 	addi	sp,sp,-8
10006288:	df000115 	stw	fp,4(sp)
1000628c:	df000104 	addi	fp,sp,4
10006290:	2005883a 	mov	r2,r4
10006294:	e0bfff0d 	sth	r2,-4(fp)

    g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = NULL;
10006298:	d0a7a817 	ldw	r2,-24928(gp)
1000629c:	10002c15 	stw	zero,176(r2)

    /* Async event has received */
    if (0 == (SL_OPCODE_SYNC & Opcode))
100062a0:	e0bfff0b 	ldhu	r2,-4(fp)
100062a4:	1081000c 	andi	r2,r2,1024
100062a8:	10bfffcc 	andi	r2,r2,65535
100062ac:	1000441e 	bne	r2,zero,100063c0 <_SlDrvClassifyRxMsg+0x13c>
    {
        if (SL_OPCODE_DEVICE_DEVICEASYNCDUMMY == Opcode)
100062b0:	e0bfff0b 	ldhu	r2,-4(fp)
100062b4:	108018d8 	cmpnei	r2,r2,99
100062b8:	1000041e 	bne	r2,zero,100062cc <_SlDrvClassifyRxMsg+0x48>
        { 
            g_pCB->FunctionParams.AsyncExt.RxMsgClass = DUMMY_MSG_CLASS;
100062bc:	d0a7a817 	ldw	r2,-24928(gp)
100062c0:	00c000c4 	movi	r3,3
100062c4:	10c02d15 	stw	r3,180(r2)
100062c8:	00004006 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
        }
        else if ( (SL_OPCODE_SOCKET_RECVASYNCRESPONSE == Opcode) || (SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE == Opcode) || (SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE_V6 == Opcode) ) 
100062cc:	e0bfff0b 	ldhu	r2,-4(fp)
100062d0:	108402a0 	cmpeqi	r2,r2,4106
100062d4:	1000061e 	bne	r2,zero,100062f0 <_SlDrvClassifyRxMsg+0x6c>
100062d8:	e0bfff0b 	ldhu	r2,-4(fp)
100062dc:	108402e0 	cmpeqi	r2,r2,4107
100062e0:	1000031e 	bne	r2,zero,100062f0 <_SlDrvClassifyRxMsg+0x6c>
100062e4:	e0bfff0b 	ldhu	r2,-4(fp)
100062e8:	108482d8 	cmpnei	r2,r2,4619
100062ec:	1000031e 	bne	r2,zero,100062fc <_SlDrvClassifyRxMsg+0x78>
        {
            g_pCB->FunctionParams.AsyncExt.RxMsgClass = RECV_RESP_CLASS;
100062f0:	d0a7a817 	ldw	r2,-24928(gp)
100062f4:	10002d15 	stw	zero,180(r2)
100062f8:	00003406 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
        }
        else
        {
            g_pCB->FunctionParams.AsyncExt.RxMsgClass = ASYNC_EVT_CLASS;
100062fc:	d0a7a817 	ldw	r2,-24928(gp)
10006300:	00c00084 	movi	r3,2
10006304:	10c02d15 	stw	r3,180(r2)

            /* set silo handler */
            if (SL_OPCODE_SILO_DEVICE == (Opcode & SL_OPCODE_SILO_MASK))
10006308:	e0bfff0b 	ldhu	r2,-4(fp)
1000630c:	109e000c 	andi	r2,r2,30720
10006310:	1000051e 	bne	r2,zero,10006328 <_SlDrvClassifyRxMsg+0xa4>
            {
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = _SlDrvDeviceEventHandler;
10006314:	d0e7a817 	ldw	r3,-24928(gp)
10006318:	00840034 	movhi	r2,4096
1000631c:	108f3204 	addi	r2,r2,15560
10006320:	18802c15 	stw	r2,176(r3)
10006324:	00002906 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
            }
            else if (SL_OPCODE_SILO_WLAN == (Opcode & SL_OPCODE_SILO_MASK))
10006328:	e0bfff0b 	ldhu	r2,-4(fp)
1000632c:	109e000c 	andi	r2,r2,30720
10006330:	10820018 	cmpnei	r2,r2,2048
10006334:	1000051e 	bne	r2,zero,1000634c <_SlDrvClassifyRxMsg+0xc8>
            {
#ifdef sl_WlanEvtHdlr
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = (_SlSpawnEntryFunc_t)sl_WlanEvtHdlr;
10006338:	d0e7a817 	ldw	r3,-24928(gp)
1000633c:	00840034 	movhi	r2,4096
10006340:	1085aa04 	addi	r2,r2,5800
10006344:	18802c15 	stw	r2,176(r3)
10006348:	00002006 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
#endif
            }
            else if (SL_OPCODE_SILO_SOCKET == (Opcode & SL_OPCODE_SILO_MASK))
1000634c:	e0bfff0b 	ldhu	r2,-4(fp)
10006350:	109e000c 	andi	r2,r2,30720
10006354:	10840018 	cmpnei	r2,r2,4096
10006358:	1000051e 	bne	r2,zero,10006370 <_SlDrvClassifyRxMsg+0xec>
            {

#ifdef sl_SockEvtHdlr
                g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = (_SlSpawnEntryFunc_t)sl_SockEvtHdlr;
1000635c:	d0e7a817 	ldw	r3,-24928(gp)
10006360:	00840034 	movhi	r2,4096
10006364:	10894504 	addi	r2,r2,9492
10006368:	18802c15 	stw	r2,176(r3)
1000636c:	00001706 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
#endif
            }
            else if (SL_OPCODE_SILO_NETAPP == (Opcode & SL_OPCODE_SILO_MASK))
10006370:	e0bfff0b 	ldhu	r2,-4(fp)
10006374:	109e000c 	andi	r2,r2,30720
10006378:	10860018 	cmpnei	r2,r2,6144
1000637c:	1000131e 	bne	r2,zero,100063cc <_SlDrvClassifyRxMsg+0x148>
            {

                if ((SL_OPCODE_NETAPP_HTTPGETTOKENVALUE == Opcode) || (SL_OPCODE_NETAPP_HTTPPOSTTOKENVALUE == Opcode))
10006380:	e0bfff0b 	ldhu	r2,-4(fp)
10006384:	10860ba0 	cmpeqi	r2,r2,6190
10006388:	1000031e 	bne	r2,zero,10006398 <_SlDrvClassifyRxMsg+0x114>
1000638c:	e0bfff0b 	ldhu	r2,-4(fp)
10006390:	10860c18 	cmpnei	r2,r2,6192
10006394:	1000051e 	bne	r2,zero,100063ac <_SlDrvClassifyRxMsg+0x128>
                {
                    g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = _SlDrvNetAppEventHandler;
10006398:	d0e7a817 	ldw	r3,-24928(gp)
1000639c:	00840074 	movhi	r2,4097
100063a0:	10a3f004 	addi	r2,r2,-28736
100063a4:	18802c15 	stw	r2,176(r3)
100063a8:	00000806 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
                }
#ifdef sl_NetAppEvtHdlr
                else
                {
                    g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = (_SlSpawnEntryFunc_t)sl_NetAppEvtHdlr;
100063ac:	d0e7a817 	ldw	r3,-24928(gp)
100063b0:	00840034 	movhi	r2,4096
100063b4:	1085f504 	addi	r2,r2,6100
100063b8:	18802c15 	stw	r2,176(r3)
100063bc:	00000306 	br	100063cc <_SlDrvClassifyRxMsg+0x148>
        }
    }
    else
    {
        /* These may be Command responses only */
        g_pCB->FunctionParams.AsyncExt.RxMsgClass = CMD_RESP_CLASS;	
100063c0:	d0a7a817 	ldw	r2,-24928(gp)
100063c4:	00c00044 	movi	r3,1
100063c8:	10c02d15 	stw	r3,180(r2)
    }	 

}
100063cc:	e037883a 	mov	sp,fp
100063d0:	df000017 	ldw	fp,0(sp)
100063d4:	dec00104 	addi	sp,sp,4
100063d8:	f800283a 	ret

100063dc <_SlDrvShiftDWord>:

/* ******************************************************************************/
/*  _SlDrvShiftDWord */
/* ******************************************************************************/
void _SlDrvShiftDWord(_u8 *pBuf)
{
100063dc:	defffd04 	addi	sp,sp,-12
100063e0:	df000215 	stw	fp,8(sp)
100063e4:	df000204 	addi	fp,sp,8
100063e8:	e13fff15 	stw	r4,-4(fp)
    _u8       ShiftIdx;
    for(ShiftIdx = 0; ShiftIdx< 7; ShiftIdx++)
100063ec:	e03ffe05 	stb	zero,-8(fp)
100063f0:	00000c06 	br	10006424 <_SlDrvShiftDWord+0x48>
    {
        pBuf[ShiftIdx] = pBuf[ShiftIdx+1];
100063f4:	e0bffe03 	ldbu	r2,-8(fp)
100063f8:	e0ffff17 	ldw	r3,-4(fp)
100063fc:	1885883a 	add	r2,r3,r2
10006400:	e0fffe03 	ldbu	r3,-8(fp)
10006404:	18c00044 	addi	r3,r3,1
10006408:	e13fff17 	ldw	r4,-4(fp)
1000640c:	20c7883a 	add	r3,r4,r3
10006410:	18c00003 	ldbu	r3,0(r3)
10006414:	10c00005 	stb	r3,0(r2)
/*  _SlDrvShiftDWord */
/* ******************************************************************************/
void _SlDrvShiftDWord(_u8 *pBuf)
{
    _u8       ShiftIdx;
    for(ShiftIdx = 0; ShiftIdx< 7; ShiftIdx++)
10006418:	e0bffe03 	ldbu	r2,-8(fp)
1000641c:	10800044 	addi	r2,r2,1
10006420:	e0bffe05 	stb	r2,-8(fp)
10006424:	e0bffe03 	ldbu	r2,-8(fp)
10006428:	108001f0 	cmpltui	r2,r2,7
1000642c:	103ff11e 	bne	r2,zero,100063f4 <__alt_data_end+0xf00063f4>
    {
        pBuf[ShiftIdx] = pBuf[ShiftIdx+1];
    }
    pBuf[7] = 0;
10006430:	e0bfff17 	ldw	r2,-4(fp)
10006434:	108001c4 	addi	r2,r2,7
10006438:	10000005 	stb	zero,0(r2)
}
1000643c:	e037883a 	mov	sp,fp
10006440:	df000017 	ldw	fp,0(sp)
10006444:	dec00104 	addi	sp,sp,4
10006448:	f800283a 	ret

1000644c <_SlDrvRxHdrRead>:

/* ******************************************************************************/
/*  _SlDrvRxHdrRead  */
/* ******************************************************************************/
_SlReturnVal_t   _SlDrvRxHdrRead(_u8 *pBuf, _u8 *pAlignSize)
{
1000644c:	defff404 	addi	sp,sp,-48
10006450:	dfc00b15 	stw	ra,44(sp)
10006454:	df000a15 	stw	fp,40(sp)
10006458:	df000a04 	addi	fp,sp,40
1000645c:	e13ffe15 	stw	r4,-8(fp)
10006460:	e17fff15 	stw	r5,-4(fp)
     _u32       SyncCnt  = 0;
10006464:	e03ff615 	stw	zero,-40(fp)

#ifndef SL_IF_TYPE_UART
    /*  1. Write CNYS pattern to NWP when working in SPI mode only  */
    NWP_IF_WRITE_CHECK(g_pCB->FD, (_u8 *)&g_H2NCnysPattern.Short, SYNC_PATTERN_LEN);
10006468:	00800104 	movi	r2,4
1000646c:	e0bff70d 	sth	r2,-36(fp)
10006470:	d0a7a817 	ldw	r2,-24928(gp)
10006474:	10800017 	ldw	r2,0(r2)
10006478:	1007883a 	mov	r3,r2
1000647c:	e0bff70f 	ldh	r2,-36(fp)
10006480:	1809883a 	mov	r4,r3
10006484:	d1600c04 	addi	r5,gp,-32720
10006488:	100d883a 	mov	r6,r2
1000648c:	000c5240 	call	1000c524 <spiSL_Write>
10006490:	e0bff78d 	sth	r2,-34(fp)
10006494:	e0fff70f 	ldh	r3,-36(fp)
10006498:	e0bff78f 	ldh	r2,-34(fp)
1000649c:	18800126 	beq	r3,r2,100064a4 <_SlDrvRxHdrRead+0x58>
100064a0:	003fff06 	br	100064a0 <__alt_data_end+0xf00064a0>
#endif

    /*  2. Read 4 bytes (protocol aligned) */
    NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], 4);
100064a4:	00800104 	movi	r2,4
100064a8:	e0bff80d 	sth	r2,-32(fp)
100064ac:	d0a7a817 	ldw	r2,-24928(gp)
100064b0:	10800017 	ldw	r2,0(r2)
100064b4:	1007883a 	mov	r3,r2
100064b8:	e0bff80f 	ldh	r2,-32(fp)
100064bc:	1809883a 	mov	r4,r3
100064c0:	e17ffe17 	ldw	r5,-8(fp)
100064c4:	100d883a 	mov	r6,r2
100064c8:	000c4d40 	call	1000c4d4 <spiSL_Read>
100064cc:	e0bff88d 	sth	r2,-30(fp)
100064d0:	e0fff80f 	ldh	r3,-32(fp)
100064d4:	e0bff88f 	ldh	r2,-30(fp)
100064d8:	18800126 	beq	r3,r2,100064e0 <_SlDrvRxHdrRead+0x94>
100064dc:	003fff06 	br	100064dc <__alt_data_end+0xf00064dc>
    _SL_DBG_SYNC_LOG(SyncCnt,pBuf);

    /* Wait for SYNC_PATTERN_LEN from the device */
    while ( ! N2H_SYNC_PATTERN_MATCH(pBuf, g_pCB->TxSeqNum) )
100064e0:	00001c06 	br	10006554 <_SlDrvRxHdrRead+0x108>
    {
        /*  3. Debug limit of scan */
        VERIFY_PROTOCOL(SyncCnt < SL_SYNC_SCAN_THRESHOLD);
100064e4:	e0bff617 	ldw	r2,-40(fp)
100064e8:	1081f430 	cmpltui	r2,r2,2000
100064ec:	1000011e 	bne	r2,zero,100064f4 <_SlDrvRxHdrRead+0xa8>
100064f0:	003fff06 	br	100064f0 <__alt_data_end+0xf00064f0>

        /*  4. Read next 4 bytes to Low 4 bytes of buffer */
        if(0 == (SyncCnt % (_u32)SYNC_PATTERN_LEN))
100064f4:	e0bff617 	ldw	r2,-40(fp)
100064f8:	108000cc 	andi	r2,r2,3
100064fc:	1000101e 	bne	r2,zero,10006540 <_SlDrvRxHdrRead+0xf4>
        {
            NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[4], 4);
10006500:	00800104 	movi	r2,4
10006504:	e0bff90d 	sth	r2,-28(fp)
10006508:	d0a7a817 	ldw	r2,-24928(gp)
1000650c:	10800017 	ldw	r2,0(r2)
10006510:	1009883a 	mov	r4,r2
10006514:	e0bffe17 	ldw	r2,-8(fp)
10006518:	10c00104 	addi	r3,r2,4
1000651c:	e0bff90f 	ldh	r2,-28(fp)
10006520:	180b883a 	mov	r5,r3
10006524:	100d883a 	mov	r6,r2
10006528:	000c4d40 	call	1000c4d4 <spiSL_Read>
1000652c:	e0bff98d 	sth	r2,-26(fp)
10006530:	e0fff90f 	ldh	r3,-28(fp)
10006534:	e0bff98f 	ldh	r2,-26(fp)
10006538:	18800126 	beq	r3,r2,10006540 <_SlDrvRxHdrRead+0xf4>
1000653c:	003fff06 	br	1000653c <__alt_data_end+0xf000653c>
            _SL_DBG_SYNC_LOG(SyncCnt,pBuf);
        }

        /*  5. Shift Buffer Up for checking if the sync is shifted */
        _SlDrvShiftDWord(pBuf);
10006540:	e13ffe17 	ldw	r4,-8(fp)
10006544:	00063dc0 	call	100063dc <_SlDrvShiftDWord>

        SyncCnt++;
10006548:	e0bff617 	ldw	r2,-40(fp)
1000654c:	10800044 	addi	r2,r2,1
10006550:	e0bff615 	stw	r2,-40(fp)
    /*  2. Read 4 bytes (protocol aligned) */
    NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], 4);
    _SL_DBG_SYNC_LOG(SyncCnt,pBuf);

    /* Wait for SYNC_PATTERN_LEN from the device */
    while ( ! N2H_SYNC_PATTERN_MATCH(pBuf, g_pCB->TxSeqNum) )
10006554:	e0bffe17 	ldw	r2,-8(fp)
10006558:	10800017 	ldw	r2,0(r2)
1000655c:	1080010c 	andi	r2,r2,4
10006560:	10000d26 	beq	r2,zero,10006598 <_SlDrvRxHdrRead+0x14c>
10006564:	e0bffe17 	ldw	r2,-8(fp)
10006568:	10c00017 	ldw	r3,0(r2)
1000656c:	009ffff4 	movhi	r2,32767
10006570:	109fdfc4 	addi	r2,r2,32639
10006574:	1886703a 	and	r3,r3,r2
10006578:	d0a7a817 	ldw	r2,-24928(gp)
1000657c:	10802583 	ldbu	r2,150(r2)
10006580:	10803fcc 	andi	r2,r2,255
10006584:	110000cc 	andi	r4,r2,3
10006588:	008af374 	movhi	r2,11213
1000658c:	10970f04 	addi	r2,r2,23612
10006590:	2084b03a 	or	r2,r4,r2
10006594:	18800c26 	beq	r3,r2,100065c8 <_SlDrvRxHdrRead+0x17c>
10006598:	e0bffe17 	ldw	r2,-8(fp)
1000659c:	10800017 	ldw	r2,0(r2)
100065a0:	1080010c 	andi	r2,r2,4
100065a4:	103fcf1e 	bne	r2,zero,100064e4 <__alt_data_end+0xf00064e4>
100065a8:	e0bffe17 	ldw	r2,-8(fp)
100065ac:	10c00017 	ldw	r3,0(r2)
100065b0:	009ffff4 	movhi	r2,32767
100065b4:	109fdfc4 	addi	r2,r2,32639
100065b8:	1886703a 	and	r3,r3,r2
100065bc:	008af374 	movhi	r2,11213
100065c0:	10970e84 	addi	r2,r2,23610
100065c4:	18bfc71e 	bne	r3,r2,100064e4 <__alt_data_end+0xf00064e4>

        SyncCnt++;
    }

    /*  5. Sync pattern found. If needed, complete number of read bytes to multiple of 4 (protocol align) */
    SyncCnt %= SYNC_PATTERN_LEN;
100065c8:	e0bff617 	ldw	r2,-40(fp)
100065cc:	108000cc 	andi	r2,r2,3
100065d0:	e0bff615 	stw	r2,-40(fp)

    if(SyncCnt > 0)
100065d4:	e0bff617 	ldw	r2,-40(fp)
100065d8:	10001826 	beq	r2,zero,1000663c <_SlDrvRxHdrRead+0x1f0>
    {
        *(_u32 *)&pBuf[0] = *(_u32 *)&pBuf[4];
100065dc:	e0bffe17 	ldw	r2,-8(fp)
100065e0:	10c00117 	ldw	r3,4(r2)
100065e4:	e0bffe17 	ldw	r2,-8(fp)
100065e8:	10c00015 	stw	r3,0(r2)
        NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[SYNC_PATTERN_LEN - SyncCnt], (_u16)SyncCnt);
100065ec:	e0bff617 	ldw	r2,-40(fp)
100065f0:	e0bffa0d 	sth	r2,-24(fp)
100065f4:	d0a7a817 	ldw	r2,-24928(gp)
100065f8:	10800017 	ldw	r2,0(r2)
100065fc:	1009883a 	mov	r4,r2
10006600:	00c00104 	movi	r3,4
10006604:	e0bff617 	ldw	r2,-40(fp)
10006608:	1885c83a 	sub	r2,r3,r2
1000660c:	e0fffe17 	ldw	r3,-8(fp)
10006610:	1887883a 	add	r3,r3,r2
10006614:	e0bffa0f 	ldh	r2,-24(fp)
10006618:	180b883a 	mov	r5,r3
1000661c:	100d883a 	mov	r6,r2
10006620:	000c4d40 	call	1000c4d4 <spiSL_Read>
10006624:	e0bffa8d 	sth	r2,-22(fp)
10006628:	e0fffa0f 	ldh	r3,-24(fp)
1000662c:	e0bffa8f 	ldh	r2,-22(fp)
10006630:	18800126 	beq	r3,r2,10006638 <_SlDrvRxHdrRead+0x1ec>
10006634:	003fff06 	br	10006634 <__alt_data_end+0xf0006634>
10006638:	00000f06 	br	10006678 <_SlDrvRxHdrRead+0x22c>
    }
    else
    {
        NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], 4);
1000663c:	00800104 	movi	r2,4
10006640:	e0bffb0d 	sth	r2,-20(fp)
10006644:	d0a7a817 	ldw	r2,-24928(gp)
10006648:	10800017 	ldw	r2,0(r2)
1000664c:	1007883a 	mov	r3,r2
10006650:	e0bffb0f 	ldh	r2,-20(fp)
10006654:	1809883a 	mov	r4,r3
10006658:	e17ffe17 	ldw	r5,-8(fp)
1000665c:	100d883a 	mov	r6,r2
10006660:	000c4d40 	call	1000c4d4 <spiSL_Read>
10006664:	e0bffb8d 	sth	r2,-18(fp)
10006668:	e0fffb0f 	ldh	r3,-20(fp)
1000666c:	e0bffb8f 	ldh	r2,-18(fp)
10006670:	18800126 	beq	r3,r2,10006678 <_SlDrvRxHdrRead+0x22c>
10006674:	003fff06 	br	10006674 <__alt_data_end+0xf0006674>
    }

    /*  6. Scan for Double pattern. */
    while ( N2H_SYNC_PATTERN_MATCH(pBuf, g_pCB->TxSeqNum) )
10006678:	00000f06 	br	100066b8 <_SlDrvRxHdrRead+0x26c>
    {
        _SL_DBG_CNT_INC(Work.DoubleSyncPattern);
        NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], SYNC_PATTERN_LEN);
1000667c:	00800104 	movi	r2,4
10006680:	e0bffc0d 	sth	r2,-16(fp)
10006684:	d0a7a817 	ldw	r2,-24928(gp)
10006688:	10800017 	ldw	r2,0(r2)
1000668c:	1007883a 	mov	r3,r2
10006690:	e0bffc0f 	ldh	r2,-16(fp)
10006694:	1809883a 	mov	r4,r3
10006698:	e17ffe17 	ldw	r5,-8(fp)
1000669c:	100d883a 	mov	r6,r2
100066a0:	000c4d40 	call	1000c4d4 <spiSL_Read>
100066a4:	e0bffc8d 	sth	r2,-14(fp)
100066a8:	e0fffc0f 	ldh	r3,-16(fp)
100066ac:	e0bffc8f 	ldh	r2,-14(fp)
100066b0:	18800126 	beq	r3,r2,100066b8 <_SlDrvRxHdrRead+0x26c>
100066b4:	003fff06 	br	100066b4 <__alt_data_end+0xf00066b4>
    {
        NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], 4);
    }

    /*  6. Scan for Double pattern. */
    while ( N2H_SYNC_PATTERN_MATCH(pBuf, g_pCB->TxSeqNum) )
100066b8:	e0bffe17 	ldw	r2,-8(fp)
100066bc:	10800017 	ldw	r2,0(r2)
100066c0:	1080010c 	andi	r2,r2,4
100066c4:	10000d26 	beq	r2,zero,100066fc <_SlDrvRxHdrRead+0x2b0>
100066c8:	e0bffe17 	ldw	r2,-8(fp)
100066cc:	10c00017 	ldw	r3,0(r2)
100066d0:	009ffff4 	movhi	r2,32767
100066d4:	109fdfc4 	addi	r2,r2,32639
100066d8:	1886703a 	and	r3,r3,r2
100066dc:	d0a7a817 	ldw	r2,-24928(gp)
100066e0:	10802583 	ldbu	r2,150(r2)
100066e4:	10803fcc 	andi	r2,r2,255
100066e8:	110000cc 	andi	r4,r2,3
100066ec:	008af374 	movhi	r2,11213
100066f0:	10970f04 	addi	r2,r2,23612
100066f4:	2084b03a 	or	r2,r4,r2
100066f8:	18bfe026 	beq	r3,r2,1000667c <__alt_data_end+0xf000667c>
100066fc:	e0bffe17 	ldw	r2,-8(fp)
10006700:	10800017 	ldw	r2,0(r2)
10006704:	1080010c 	andi	r2,r2,4
10006708:	1000081e 	bne	r2,zero,1000672c <_SlDrvRxHdrRead+0x2e0>
1000670c:	e0bffe17 	ldw	r2,-8(fp)
10006710:	10c00017 	ldw	r3,0(r2)
10006714:	009ffff4 	movhi	r2,32767
10006718:	109fdfc4 	addi	r2,r2,32639
1000671c:	1886703a 	and	r3,r3,r2
10006720:	008af374 	movhi	r2,11213
10006724:	10970e84 	addi	r2,r2,23610
10006728:	18bfd426 	beq	r3,r2,1000667c <__alt_data_end+0xf000667c>
    {
        _SL_DBG_CNT_INC(Work.DoubleSyncPattern);
        NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[0], SYNC_PATTERN_LEN);
    }
    g_pCB->TxSeqNum++;
1000672c:	d0a7a817 	ldw	r2,-24928(gp)
10006730:	10c02583 	ldbu	r3,150(r2)
10006734:	18c00044 	addi	r3,r3,1
10006738:	10c02585 	stb	r3,150(r2)

    /*  7. Here we've read Generic Header (4 bytes). Read the Resp Specific header (4 more bytes). */
    NWP_IF_READ_CHECK(g_pCB->FD, &pBuf[SYNC_PATTERN_LEN], _SL_RESP_SPEC_HDR_SIZE);
1000673c:	00800104 	movi	r2,4
10006740:	e0bffd0d 	sth	r2,-12(fp)
10006744:	d0a7a817 	ldw	r2,-24928(gp)
10006748:	10800017 	ldw	r2,0(r2)
1000674c:	1009883a 	mov	r4,r2
10006750:	e0bffe17 	ldw	r2,-8(fp)
10006754:	10c00104 	addi	r3,r2,4
10006758:	e0bffd0f 	ldh	r2,-12(fp)
1000675c:	180b883a 	mov	r5,r3
10006760:	100d883a 	mov	r6,r2
10006764:	000c4d40 	call	1000c4d4 <spiSL_Read>
10006768:	e0bffd8d 	sth	r2,-10(fp)
1000676c:	e0fffd0f 	ldh	r3,-12(fp)
10006770:	e0bffd8f 	ldh	r2,-10(fp)
10006774:	18800126 	beq	r3,r2,1000677c <_SlDrvRxHdrRead+0x330>
10006778:	003fff06 	br	10006778 <__alt_data_end+0xf0006778>

    /*  8. Here we've read the entire Resp Header. */
    /*     Return number bytes needed to be sent after read for NWP Rx 4-byte alignment (protocol alignment) */
    *pAlignSize = (_u8)((SyncCnt > 0) ? (SYNC_PATTERN_LEN - SyncCnt) : 0);
1000677c:	e0bff617 	ldw	r2,-40(fp)
10006780:	10000526 	beq	r2,zero,10006798 <_SlDrvRxHdrRead+0x34c>
10006784:	00c00104 	movi	r3,4
10006788:	e0bff617 	ldw	r2,-40(fp)
1000678c:	1885c83a 	sub	r2,r3,r2
10006790:	1007883a 	mov	r3,r2
10006794:	00000106 	br	1000679c <_SlDrvRxHdrRead+0x350>
10006798:	0007883a 	mov	r3,zero
1000679c:	e0bfff17 	ldw	r2,-4(fp)
100067a0:	10c00005 	stb	r3,0(r2)

    return SL_RET_CODE_OK;
100067a4:	0005883a 	mov	r2,zero
}
100067a8:	e037883a 	mov	sp,fp
100067ac:	dfc00117 	ldw	ra,4(sp)
100067b0:	df000017 	ldw	fp,0(sp)
100067b4:	dec00204 	addi	sp,sp,8
100067b8:	f800283a 	ret

100067bc <_SlDrvBasicCmd>:
{
    _BasicResponse_t	Rsp;
}_SlBasicCmdMsg_u;

_i16 _SlDrvBasicCmd(_SlOpcode_t Opcode)
{
100067bc:	defffa04 	addi	sp,sp,-24
100067c0:	dfc00515 	stw	ra,20(sp)
100067c4:	df000415 	stw	fp,16(sp)
100067c8:	df000404 	addi	fp,sp,16
100067cc:	2005883a 	mov	r2,r4
100067d0:	e0bfff0d 	sth	r2,-4(fp)
    _SlBasicCmdMsg_u       Msg = {0};
100067d4:	e03ffc8d 	sth	zero,-14(fp)
100067d8:	e03ffd0d 	sth	zero,-12(fp)
    _SlCmdCtrl_t           CmdCtrl;

    CmdCtrl.Opcode = Opcode;
100067dc:	e0bfff0b 	ldhu	r2,-4(fp)
100067e0:	e0bffd8d 	sth	r2,-10(fp)
    CmdCtrl.TxDescLen = 0;
100067e4:	e03ffe05 	stb	zero,-8(fp)
    CmdCtrl.RxDescLen = sizeof(_BasicResponse_t);
100067e8:	00800104 	movi	r2,4
100067ec:	e0bffe45 	stb	r2,-7(fp)


    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&CmdCtrl, &Msg, NULL));
100067f0:	e0fffd84 	addi	r3,fp,-10
100067f4:	e0bffc84 	addi	r2,fp,-14
100067f8:	1809883a 	mov	r4,r3
100067fc:	100b883a 	mov	r5,r2
10006800:	000d883a 	mov	r6,zero
10006804:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10006808:	e0bffc0d 	sth	r2,-16(fp)
1000680c:	e0bffc0f 	ldh	r2,-16(fp)
10006810:	10000126 	beq	r2,zero,10006818 <_SlDrvBasicCmd+0x5c>
10006814:	003fff06 	br	10006814 <__alt_data_end+0xf0006814>

    return (_i16)Msg.Rsp.status;
10006818:	e0bffc8b 	ldhu	r2,-14(fp)
}
1000681c:	e037883a 	mov	sp,fp
10006820:	dfc00117 	ldw	ra,4(sp)
10006824:	df000017 	ldw	fp,0(sp)
10006828:	dec00204 	addi	sp,sp,8
1000682c:	f800283a 	ret

10006830 <_SlDrvWaitForPoolObj>:

/* ***************************************************************************** */
/*  _SlDrvWaitForPoolObj */
/* ***************************************************************************** */
_i16 _SlDrvWaitForPoolObj(_u32 ActionID, _u8 SocketID)
{
10006830:	defff804 	addi	sp,sp,-32
10006834:	dfc00715 	stw	ra,28(sp)
10006838:	df000615 	stw	fp,24(sp)
1000683c:	df000604 	addi	fp,sp,24
10006840:	e13ffe15 	stw	r4,-8(fp)
10006844:	2805883a 	mov	r2,r5
10006848:	e0bfff05 	stb	r2,-4(fp)
    _u8 CurrObjIndex = MAX_CONCURRENT_ACTIONS;
1000684c:	00800284 	movi	r2,10
10006850:	e0bffa05 	stb	r2,-24(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10006854:	d0a7a817 	ldw	r2,-24928(gp)
10006858:	10802404 	addi	r2,r2,144
1000685c:	1009883a 	mov	r4,r2
10006860:	01400cc4 	movi	r5,51
10006864:	01801104 	movi	r6,68
10006868:	01c03fc4 	movi	r7,255
1000686c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10006870:	10803fcc 	andi	r2,r2,255
10006874:	1080201c 	xori	r2,r2,128
10006878:	10bfe004 	addi	r2,r2,-128
1000687c:	e0bffa8d 	sth	r2,-22(fp)
10006880:	e0bffa8f 	ldh	r2,-22(fp)
10006884:	10000126 	beq	r2,zero,1000688c <_SlDrvWaitForPoolObj+0x5c>
10006888:	003fff06 	br	10006888 <__alt_data_end+0xf0006888>

    /* Get free object  */
    if (MAX_CONCURRENT_ACTIONS > g_pCB->FreePoolIdx)
1000688c:	d0a7a817 	ldw	r2,-24928(gp)
10006890:	10802203 	ldbu	r2,136(r2)
10006894:	10803fcc 	andi	r2,r2,255
10006898:	108002a8 	cmpgeui	r2,r2,10
1000689c:	1000191e 	bne	r2,zero,10006904 <_SlDrvWaitForPoolObj+0xd4>
    {
        /* save the current obj index */
        CurrObjIndex = g_pCB->FreePoolIdx;
100068a0:	d0a7a817 	ldw	r2,-24928(gp)
100068a4:	10802203 	ldbu	r2,136(r2)
100068a8:	e0bffa05 	stb	r2,-24(fp)
        /* set the new free index */
        if (MAX_CONCURRENT_ACTIONS > g_pCB->ObjPool[CurrObjIndex].NextIndex)
100068ac:	d0e7a817 	ldw	r3,-24928(gp)
100068b0:	e0bffa03 	ldbu	r2,-24(fp)
100068b4:	10800324 	muli	r2,r2,12
100068b8:	1885883a 	add	r2,r3,r2
100068bc:	10800604 	addi	r2,r2,24
100068c0:	10800083 	ldbu	r2,2(r2)
100068c4:	10803fcc 	andi	r2,r2,255
100068c8:	108002a8 	cmpgeui	r2,r2,10
100068cc:	1000091e 	bne	r2,zero,100068f4 <_SlDrvWaitForPoolObj+0xc4>
        {
            g_pCB->FreePoolIdx = g_pCB->ObjPool[CurrObjIndex].NextIndex;
100068d0:	d0a7a817 	ldw	r2,-24928(gp)
100068d4:	d127a817 	ldw	r4,-24928(gp)
100068d8:	e0fffa03 	ldbu	r3,-24(fp)
100068dc:	18c00324 	muli	r3,r3,12
100068e0:	20c7883a 	add	r3,r4,r3
100068e4:	18c00604 	addi	r3,r3,24
100068e8:	18c00083 	ldbu	r3,2(r3)
100068ec:	10c02205 	stb	r3,136(r2)
100068f0:	00001206 	br	1000693c <_SlDrvWaitForPoolObj+0x10c>
        }
        else
        {
            /* No further free actions available */
            g_pCB->FreePoolIdx = MAX_CONCURRENT_ACTIONS;
100068f4:	d0a7a817 	ldw	r2,-24928(gp)
100068f8:	00c00284 	movi	r3,10
100068fc:	10c02205 	stb	r3,136(r2)
10006900:	00000e06 	br	1000693c <_SlDrvWaitForPoolObj+0x10c>
        }
    }
    else
    {
        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10006904:	d0a7a817 	ldw	r2,-24928(gp)
10006908:	10802404 	addi	r2,r2,144
1000690c:	1009883a 	mov	r4,r2
10006910:	01400cc4 	movi	r5,51
10006914:	000938c0 	call	1000938c <_SlNonOsSemSet>
10006918:	10803fcc 	andi	r2,r2,255
1000691c:	1080201c 	xori	r2,r2,128
10006920:	10bfe004 	addi	r2,r2,-128
10006924:	e0bffb0d 	sth	r2,-20(fp)
10006928:	e0bffb0f 	ldh	r2,-20(fp)
1000692c:	10000126 	beq	r2,zero,10006934 <_SlDrvWaitForPoolObj+0x104>
10006930:	003fff06 	br	10006930 <__alt_data_end+0xf0006930>
        return CurrObjIndex;
10006934:	e0bffa03 	ldbu	r2,-24(fp)
10006938:	00008806 	br	10006b5c <_SlDrvWaitForPoolObj+0x32c>
    }
    g_pCB->ObjPool[CurrObjIndex].ActionID = (_u8)ActionID;
1000693c:	d0e7a817 	ldw	r3,-24928(gp)
10006940:	e0bffa03 	ldbu	r2,-24(fp)
10006944:	e13ffe17 	ldw	r4,-8(fp)
10006948:	10800324 	muli	r2,r2,12
1000694c:	1885883a 	add	r2,r3,r2
10006950:	10800604 	addi	r2,r2,24
10006954:	11000005 	stb	r4,0(r2)
    if (SL_MAX_SOCKETS > SocketID)
10006958:	e0bfff03 	ldbu	r2,-4(fp)
1000695c:	10800228 	cmpgeui	r2,r2,8
10006960:	1000071e 	bne	r2,zero,10006980 <_SlDrvWaitForPoolObj+0x150>
    {
        g_pCB->ObjPool[CurrObjIndex].AdditionalData = SocketID;
10006964:	d0e7a817 	ldw	r3,-24928(gp)
10006968:	e0bffa03 	ldbu	r2,-24(fp)
1000696c:	10800324 	muli	r2,r2,12
10006970:	1885883a 	add	r2,r3,r2
10006974:	10800604 	addi	r2,r2,24
10006978:	e0ffff03 	ldbu	r3,-4(fp)
1000697c:	10c00045 	stb	r3,1(r2)
    }
    /*In case this action is socket related, SocketID bit will be on
    In case SocketID is set to SL_MAX_SOCKETS, the socket is not relevant to the action. In that case ActionID bit will be on */
    while ( ( (SL_MAX_SOCKETS > SocketID) && (g_pCB->ActiveActionsBitmap & (1<<SocketID)) ) || ( (g_pCB->ActiveActionsBitmap & (1<<ActionID)) && (SL_MAX_SOCKETS == SocketID) ) )
10006980:	00003606 	br	10006a5c <_SlDrvWaitForPoolObj+0x22c>
    {
        //action in progress - move to pending list 
        g_pCB->ObjPool[CurrObjIndex].NextIndex = g_pCB->PendingPoolIdx;
10006984:	d127a817 	ldw	r4,-24928(gp)
10006988:	e0bffa03 	ldbu	r2,-24(fp)
1000698c:	d0e7a817 	ldw	r3,-24928(gp)
10006990:	18c02243 	ldbu	r3,137(r3)
10006994:	10800324 	muli	r2,r2,12
10006998:	2085883a 	add	r2,r4,r2
1000699c:	10800604 	addi	r2,r2,24
100069a0:	10c00085 	stb	r3,2(r2)
        g_pCB->PendingPoolIdx = CurrObjIndex;
100069a4:	d0a7a817 	ldw	r2,-24928(gp)
100069a8:	e0fffa03 	ldbu	r3,-24(fp)
100069ac:	10c02245 	stb	r3,137(r2)
        OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100069b0:	d0a7a817 	ldw	r2,-24928(gp)
100069b4:	10802404 	addi	r2,r2,144
100069b8:	1009883a 	mov	r4,r2
100069bc:	01400cc4 	movi	r5,51
100069c0:	000938c0 	call	1000938c <_SlNonOsSemSet>
100069c4:	10803fcc 	andi	r2,r2,255
100069c8:	1080201c 	xori	r2,r2,128
100069cc:	10bfe004 	addi	r2,r2,-128
100069d0:	e0bffb8d 	sth	r2,-18(fp)
100069d4:	e0bffb8f 	ldh	r2,-18(fp)
100069d8:	10000126 	beq	r2,zero,100069e0 <_SlDrvWaitForPoolObj+0x1b0>
100069dc:	003fff06 	br	100069dc <__alt_data_end+0xf00069dc>
        //wait for action to be free
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[CurrObjIndex].SyncObj, SL_OS_WAIT_FOREVER));
100069e0:	d0e7a817 	ldw	r3,-24928(gp)
100069e4:	e0bffa03 	ldbu	r2,-24(fp)
100069e8:	10800324 	muli	r2,r2,12
100069ec:	10800404 	addi	r2,r2,16
100069f0:	1885883a 	add	r2,r3,r2
100069f4:	1009883a 	mov	r4,r2
100069f8:	01400884 	movi	r5,34
100069fc:	01800444 	movi	r6,17
10006a00:	01c03fc4 	movi	r7,255
10006a04:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10006a08:	10803fcc 	andi	r2,r2,255
10006a0c:	1080201c 	xori	r2,r2,128
10006a10:	10bfe004 	addi	r2,r2,-128
10006a14:	e0bffc0d 	sth	r2,-16(fp)
10006a18:	e0bffc0f 	ldh	r2,-16(fp)
10006a1c:	10000126 	beq	r2,zero,10006a24 <_SlDrvWaitForPoolObj+0x1f4>
10006a20:	003fff06 	br	10006a20 <__alt_data_end+0xf0006a20>
        //set params and move to active (remove from pending list at _SlDrvReleasePoolObj)
        OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10006a24:	d0a7a817 	ldw	r2,-24928(gp)
10006a28:	10802404 	addi	r2,r2,144
10006a2c:	1009883a 	mov	r4,r2
10006a30:	01400cc4 	movi	r5,51
10006a34:	01801104 	movi	r6,68
10006a38:	01c03fc4 	movi	r7,255
10006a3c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10006a40:	10803fcc 	andi	r2,r2,255
10006a44:	1080201c 	xori	r2,r2,128
10006a48:	10bfe004 	addi	r2,r2,-128
10006a4c:	e0bffc8d 	sth	r2,-14(fp)
10006a50:	e0bffc8f 	ldh	r2,-14(fp)
10006a54:	10000126 	beq	r2,zero,10006a5c <_SlDrvWaitForPoolObj+0x22c>
10006a58:	003fff06 	br	10006a58 <__alt_data_end+0xf0006a58>
    {
        g_pCB->ObjPool[CurrObjIndex].AdditionalData = SocketID;
    }
    /*In case this action is socket related, SocketID bit will be on
    In case SocketID is set to SL_MAX_SOCKETS, the socket is not relevant to the action. In that case ActionID bit will be on */
    while ( ( (SL_MAX_SOCKETS > SocketID) && (g_pCB->ActiveActionsBitmap & (1<<SocketID)) ) || ( (g_pCB->ActiveActionsBitmap & (1<<ActionID)) && (SL_MAX_SOCKETS == SocketID) ) )
10006a5c:	e0bfff03 	ldbu	r2,-4(fp)
10006a60:	10800228 	cmpgeui	r2,r2,8
10006a64:	1000071e 	bne	r2,zero,10006a84 <_SlDrvWaitForPoolObj+0x254>
10006a68:	d0a7a817 	ldw	r2,-24928(gp)
10006a6c:	10802317 	ldw	r2,140(r2)
10006a70:	e0ffff03 	ldbu	r3,-4(fp)
10006a74:	01000044 	movi	r4,1
10006a78:	20c6983a 	sll	r3,r4,r3
10006a7c:	10c4703a 	and	r2,r2,r3
10006a80:	103fc01e 	bne	r2,zero,10006984 <__alt_data_end+0xf0006984>
10006a84:	d0a7a817 	ldw	r2,-24928(gp)
10006a88:	10802317 	ldw	r2,140(r2)
10006a8c:	e0fffe17 	ldw	r3,-8(fp)
10006a90:	01000044 	movi	r4,1
10006a94:	20c6983a 	sll	r3,r4,r3
10006a98:	10c4703a 	and	r2,r2,r3
10006a9c:	10000326 	beq	r2,zero,10006aac <_SlDrvWaitForPoolObj+0x27c>
10006aa0:	e0bfff03 	ldbu	r2,-4(fp)
10006aa4:	10800220 	cmpeqi	r2,r2,8
10006aa8:	103fb61e 	bne	r2,zero,10006984 <__alt_data_end+0xf0006984>
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[CurrObjIndex].SyncObj, SL_OS_WAIT_FOREVER));
        //set params and move to active (remove from pending list at _SlDrvReleasePoolObj)
        OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
    }
    /*mark as active. Set socket as active if action is on socket, otherwise mark action as active*/
    if (SL_MAX_SOCKETS > SocketID)
10006aac:	e0bfff03 	ldbu	r2,-4(fp)
10006ab0:	10800228 	cmpgeui	r2,r2,8
10006ab4:	1000091e 	bne	r2,zero,10006adc <_SlDrvWaitForPoolObj+0x2ac>
    {
        g_pCB->ActiveActionsBitmap |= (1<<SocketID);
10006ab8:	d0a7a817 	ldw	r2,-24928(gp)
10006abc:	d0e7a817 	ldw	r3,-24928(gp)
10006ac0:	18c02317 	ldw	r3,140(r3)
10006ac4:	e13fff03 	ldbu	r4,-4(fp)
10006ac8:	01400044 	movi	r5,1
10006acc:	2908983a 	sll	r4,r5,r4
10006ad0:	1906b03a 	or	r3,r3,r4
10006ad4:	10c02315 	stw	r3,140(r2)
10006ad8:	00000806 	br	10006afc <_SlDrvWaitForPoolObj+0x2cc>
    }
    else
    {
        g_pCB->ActiveActionsBitmap |= (1<<ActionID);
10006adc:	d0a7a817 	ldw	r2,-24928(gp)
10006ae0:	d0e7a817 	ldw	r3,-24928(gp)
10006ae4:	18c02317 	ldw	r3,140(r3)
10006ae8:	e13ffe17 	ldw	r4,-8(fp)
10006aec:	01400044 	movi	r5,1
10006af0:	2908983a 	sll	r4,r5,r4
10006af4:	1906b03a 	or	r3,r3,r4
10006af8:	10c02315 	stw	r3,140(r2)
    }
    /* move to active list  */
    g_pCB->ObjPool[CurrObjIndex].NextIndex = g_pCB->ActivePoolIdx;
10006afc:	d127a817 	ldw	r4,-24928(gp)
10006b00:	e0bffa03 	ldbu	r2,-24(fp)
10006b04:	d0e7a817 	ldw	r3,-24928(gp)
10006b08:	18c02283 	ldbu	r3,138(r3)
10006b0c:	10800324 	muli	r2,r2,12
10006b10:	2085883a 	add	r2,r4,r2
10006b14:	10800604 	addi	r2,r2,24
10006b18:	10c00085 	stb	r3,2(r2)
    g_pCB->ActivePoolIdx = CurrObjIndex;	
10006b1c:	d0a7a817 	ldw	r2,-24928(gp)
10006b20:	e0fffa03 	ldbu	r3,-24(fp)
10006b24:	10c02285 	stb	r3,138(r2)
    /* unlock */
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10006b28:	d0a7a817 	ldw	r2,-24928(gp)
10006b2c:	10802404 	addi	r2,r2,144
10006b30:	1009883a 	mov	r4,r2
10006b34:	01400cc4 	movi	r5,51
10006b38:	000938c0 	call	1000938c <_SlNonOsSemSet>
10006b3c:	10803fcc 	andi	r2,r2,255
10006b40:	1080201c 	xori	r2,r2,128
10006b44:	10bfe004 	addi	r2,r2,-128
10006b48:	e0bffd0d 	sth	r2,-12(fp)
10006b4c:	e0bffd0f 	ldh	r2,-12(fp)
10006b50:	10000126 	beq	r2,zero,10006b58 <_SlDrvWaitForPoolObj+0x328>
10006b54:	003fff06 	br	10006b54 <__alt_data_end+0xf0006b54>
    return CurrObjIndex;
10006b58:	e0bffa03 	ldbu	r2,-24(fp)
}
10006b5c:	e037883a 	mov	sp,fp
10006b60:	dfc00117 	ldw	ra,4(sp)
10006b64:	df000017 	ldw	fp,0(sp)
10006b68:	dec00204 	addi	sp,sp,8
10006b6c:	f800283a 	ret

10006b70 <_SlDrvReleasePoolObj>:

/* ******************************************************************************/
/*  _SlDrvReleasePoolObj */
/* ******************************************************************************/
void _SlDrvReleasePoolObj(_u8 ObjIdx)
{
10006b70:	defffb04 	addi	sp,sp,-20
10006b74:	dfc00415 	stw	ra,16(sp)
10006b78:	df000315 	stw	fp,12(sp)
10006b7c:	df000304 	addi	fp,sp,12
10006b80:	2005883a 	mov	r2,r4
10006b84:	e0bfff05 	stb	r2,-4(fp)
    _u8 PendingIndex;

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10006b88:	d0a7a817 	ldw	r2,-24928(gp)
10006b8c:	10802404 	addi	r2,r2,144
10006b90:	1009883a 	mov	r4,r2
10006b94:	01400cc4 	movi	r5,51
10006b98:	01801104 	movi	r6,68
10006b9c:	01c03fc4 	movi	r7,255
10006ba0:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10006ba4:	10803fcc 	andi	r2,r2,255
10006ba8:	1080201c 	xori	r2,r2,128
10006bac:	10bfe004 	addi	r2,r2,-128
10006bb0:	e0bffd8d 	sth	r2,-10(fp)
10006bb4:	e0bffd8f 	ldh	r2,-10(fp)
10006bb8:	10000126 	beq	r2,zero,10006bc0 <_SlDrvReleasePoolObj+0x50>
10006bbc:	003fff06 	br	10006bbc <__alt_data_end+0xf0006bbc>

    /* go over the pending list and release other pending action if needed */
    PendingIndex = g_pCB->PendingPoolIdx;
10006bc0:	d0a7a817 	ldw	r2,-24928(gp)
10006bc4:	10802243 	ldbu	r2,137(r2)
10006bc8:	e0bffd05 	stb	r2,-12(fp)
    while(MAX_CONCURRENT_ACTIONS > PendingIndex)
10006bcc:	00005106 	br	10006d14 <_SlDrvReleasePoolObj+0x1a4>
    {
        /* In case this action is socket related, SocketID is in use, otherwise will be set to SL_MAX_SOCKETS */
        if ( (g_pCB->ObjPool[PendingIndex].ActionID == g_pCB->ObjPool[ObjIdx].ActionID) && 
10006bd0:	d0e7a817 	ldw	r3,-24928(gp)
10006bd4:	e0bffd03 	ldbu	r2,-12(fp)
10006bd8:	10800324 	muli	r2,r2,12
10006bdc:	1885883a 	add	r2,r3,r2
10006be0:	10800604 	addi	r2,r2,24
10006be4:	11000003 	ldbu	r4,0(r2)
10006be8:	d0e7a817 	ldw	r3,-24928(gp)
10006bec:	e0bfff03 	ldbu	r2,-4(fp)
10006bf0:	10800324 	muli	r2,r2,12
10006bf4:	1885883a 	add	r2,r3,r2
10006bf8:	10800604 	addi	r2,r2,24
10006bfc:	10800003 	ldbu	r2,0(r2)
10006c00:	20c03fcc 	andi	r3,r4,255
10006c04:	10803fcc 	andi	r2,r2,255
10006c08:	18803b1e 	bne	r3,r2,10006cf8 <_SlDrvReleasePoolObj+0x188>
            ( (SL_MAX_SOCKETS == (g_pCB->ObjPool[PendingIndex].AdditionalData & BSD_SOCKET_ID_MASK)) || 
10006c0c:	d0e7a817 	ldw	r3,-24928(gp)
10006c10:	e0bffd03 	ldbu	r2,-12(fp)
10006c14:	10800324 	muli	r2,r2,12
10006c18:	1885883a 	add	r2,r3,r2
10006c1c:	10800604 	addi	r2,r2,24
10006c20:	10800043 	ldbu	r2,1(r2)
10006c24:	10803fcc 	andi	r2,r2,255
10006c28:	108003cc 	andi	r2,r2,15
    /* go over the pending list and release other pending action if needed */
    PendingIndex = g_pCB->PendingPoolIdx;
    while(MAX_CONCURRENT_ACTIONS > PendingIndex)
    {
        /* In case this action is socket related, SocketID is in use, otherwise will be set to SL_MAX_SOCKETS */
        if ( (g_pCB->ObjPool[PendingIndex].ActionID == g_pCB->ObjPool[ObjIdx].ActionID) && 
10006c2c:	10800220 	cmpeqi	r2,r2,8
10006c30:	10001b1e 	bne	r2,zero,10006ca0 <_SlDrvReleasePoolObj+0x130>
            ( (SL_MAX_SOCKETS == (g_pCB->ObjPool[PendingIndex].AdditionalData & BSD_SOCKET_ID_MASK)) || 
            ((SL_MAX_SOCKETS > (g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK)) && ( (g_pCB->ObjPool[PendingIndex].AdditionalData & BSD_SOCKET_ID_MASK) == (g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK) ))) )
10006c34:	d0e7a817 	ldw	r3,-24928(gp)
10006c38:	e0bfff03 	ldbu	r2,-4(fp)
10006c3c:	10800324 	muli	r2,r2,12
10006c40:	1885883a 	add	r2,r3,r2
10006c44:	10800604 	addi	r2,r2,24
10006c48:	10800043 	ldbu	r2,1(r2)
10006c4c:	10803fcc 	andi	r2,r2,255
10006c50:	108003cc 	andi	r2,r2,15
    PendingIndex = g_pCB->PendingPoolIdx;
    while(MAX_CONCURRENT_ACTIONS > PendingIndex)
    {
        /* In case this action is socket related, SocketID is in use, otherwise will be set to SL_MAX_SOCKETS */
        if ( (g_pCB->ObjPool[PendingIndex].ActionID == g_pCB->ObjPool[ObjIdx].ActionID) && 
            ( (SL_MAX_SOCKETS == (g_pCB->ObjPool[PendingIndex].AdditionalData & BSD_SOCKET_ID_MASK)) || 
10006c54:	10800208 	cmpgei	r2,r2,8
10006c58:	1000271e 	bne	r2,zero,10006cf8 <_SlDrvReleasePoolObj+0x188>
            ((SL_MAX_SOCKETS > (g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK)) && ( (g_pCB->ObjPool[PendingIndex].AdditionalData & BSD_SOCKET_ID_MASK) == (g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK) ))) )
10006c5c:	d0e7a817 	ldw	r3,-24928(gp)
10006c60:	e0bffd03 	ldbu	r2,-12(fp)
10006c64:	10800324 	muli	r2,r2,12
10006c68:	1885883a 	add	r2,r3,r2
10006c6c:	10800604 	addi	r2,r2,24
10006c70:	10800043 	ldbu	r2,1(r2)
10006c74:	10c03fcc 	andi	r3,r2,255
10006c78:	d127a817 	ldw	r4,-24928(gp)
10006c7c:	e0bfff03 	ldbu	r2,-4(fp)
10006c80:	10800324 	muli	r2,r2,12
10006c84:	2085883a 	add	r2,r4,r2
10006c88:	10800604 	addi	r2,r2,24
10006c8c:	10800043 	ldbu	r2,1(r2)
10006c90:	10803fcc 	andi	r2,r2,255
10006c94:	1884f03a 	xor	r2,r3,r2
10006c98:	108003cc 	andi	r2,r2,15
10006c9c:	1000161e 	bne	r2,zero,10006cf8 <_SlDrvReleasePoolObj+0x188>
        {
            /* remove from pending list */
            _SlRemoveFromList(&g_pCB->PendingPoolIdx, PendingIndex);
10006ca0:	d0a7a817 	ldw	r2,-24928(gp)
10006ca4:	10c02244 	addi	r3,r2,137
10006ca8:	e0bffd03 	ldbu	r2,-12(fp)
10006cac:	1809883a 	mov	r4,r3
10006cb0:	100b883a 	mov	r5,r2
10006cb4:	0006f900 	call	10006f90 <_SlRemoveFromList>
            OSI_RET_OK_CHECK(sl_SyncObjSignal(&(g_pCB->ObjPool[PendingIndex].SyncObj)));
10006cb8:	d0e7a817 	ldw	r3,-24928(gp)
10006cbc:	e0bffd03 	ldbu	r2,-12(fp)
10006cc0:	10800324 	muli	r2,r2,12
10006cc4:	10800404 	addi	r2,r2,16
10006cc8:	1885883a 	add	r2,r3,r2
10006ccc:	1009883a 	mov	r4,r2
10006cd0:	01400884 	movi	r5,34
10006cd4:	000938c0 	call	1000938c <_SlNonOsSemSet>
10006cd8:	10803fcc 	andi	r2,r2,255
10006cdc:	1080201c 	xori	r2,r2,128
10006ce0:	10bfe004 	addi	r2,r2,-128
10006ce4:	e0bffe0d 	sth	r2,-8(fp)
10006ce8:	e0bffe0f 	ldh	r2,-8(fp)
10006cec:	10000126 	beq	r2,zero,10006cf4 <_SlDrvReleasePoolObj+0x184>
10006cf0:	003fff06 	br	10006cf0 <__alt_data_end+0xf0006cf0>
            break;
10006cf4:	00000a06 	br	10006d20 <_SlDrvReleasePoolObj+0x1b0>
        }
        PendingIndex = g_pCB->ObjPool[PendingIndex].NextIndex;
10006cf8:	d0e7a817 	ldw	r3,-24928(gp)
10006cfc:	e0bffd03 	ldbu	r2,-12(fp)
10006d00:	10800324 	muli	r2,r2,12
10006d04:	1885883a 	add	r2,r3,r2
10006d08:	10800604 	addi	r2,r2,24
10006d0c:	10800083 	ldbu	r2,2(r2)
10006d10:	e0bffd05 	stb	r2,-12(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));

    /* go over the pending list and release other pending action if needed */
    PendingIndex = g_pCB->PendingPoolIdx;
    while(MAX_CONCURRENT_ACTIONS > PendingIndex)
10006d14:	e0bffd03 	ldbu	r2,-12(fp)
10006d18:	108002b0 	cmpltui	r2,r2,10
10006d1c:	103fac1e 	bne	r2,zero,10006bd0 <__alt_data_end+0xf0006bd0>
            break;
        }
        PendingIndex = g_pCB->ObjPool[PendingIndex].NextIndex;
    }

    if (SL_MAX_SOCKETS > (g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK))
10006d20:	d0e7a817 	ldw	r3,-24928(gp)
10006d24:	e0bfff03 	ldbu	r2,-4(fp)
10006d28:	10800324 	muli	r2,r2,12
10006d2c:	1885883a 	add	r2,r3,r2
10006d30:	10800604 	addi	r2,r2,24
10006d34:	10800043 	ldbu	r2,1(r2)
10006d38:	10803fcc 	andi	r2,r2,255
10006d3c:	108003cc 	andi	r2,r2,15
10006d40:	10800208 	cmpgei	r2,r2,8
10006d44:	1000111e 	bne	r2,zero,10006d8c <_SlDrvReleasePoolObj+0x21c>
    {
        /* unset socketID  */
        g_pCB->ActiveActionsBitmap &= ~(1<<(g_pCB->ObjPool[ObjIdx].AdditionalData & BSD_SOCKET_ID_MASK));
10006d48:	d0a7a817 	ldw	r2,-24928(gp)
10006d4c:	d0e7a817 	ldw	r3,-24928(gp)
10006d50:	18c02317 	ldw	r3,140(r3)
10006d54:	d167a817 	ldw	r5,-24928(gp)
10006d58:	e13fff03 	ldbu	r4,-4(fp)
10006d5c:	21000324 	muli	r4,r4,12
10006d60:	2909883a 	add	r4,r5,r4
10006d64:	21000604 	addi	r4,r4,24
10006d68:	21000043 	ldbu	r4,1(r4)
10006d6c:	21003fcc 	andi	r4,r4,255
10006d70:	210003cc 	andi	r4,r4,15
10006d74:	01400044 	movi	r5,1
10006d78:	2908983a 	sll	r4,r5,r4
10006d7c:	0108303a 	nor	r4,zero,r4
10006d80:	1906703a 	and	r3,r3,r4
10006d84:	10c02315 	stw	r3,140(r2)
10006d88:	00000f06 	br	10006dc8 <_SlDrvReleasePoolObj+0x258>
    }
    else
    {
        /* unset actionID  */
        g_pCB->ActiveActionsBitmap &= ~(1<<g_pCB->ObjPool[ObjIdx].ActionID);
10006d8c:	d0a7a817 	ldw	r2,-24928(gp)
10006d90:	d0e7a817 	ldw	r3,-24928(gp)
10006d94:	18c02317 	ldw	r3,140(r3)
10006d98:	d167a817 	ldw	r5,-24928(gp)
10006d9c:	e13fff03 	ldbu	r4,-4(fp)
10006da0:	21000324 	muli	r4,r4,12
10006da4:	2909883a 	add	r4,r5,r4
10006da8:	21000604 	addi	r4,r4,24
10006dac:	21000003 	ldbu	r4,0(r4)
10006db0:	21003fcc 	andi	r4,r4,255
10006db4:	01400044 	movi	r5,1
10006db8:	2908983a 	sll	r4,r5,r4
10006dbc:	0108303a 	nor	r4,zero,r4
10006dc0:	1906703a 	and	r3,r3,r4
10006dc4:	10c02315 	stw	r3,140(r2)
    }	

    /* delete old data */
    g_pCB->ObjPool[ObjIdx].pRespArgs = NULL;
10006dc8:	d0e7a817 	ldw	r3,-24928(gp)
10006dcc:	e0bfff03 	ldbu	r2,-4(fp)
10006dd0:	10800324 	muli	r2,r2,12
10006dd4:	1885883a 	add	r2,r3,r2
10006dd8:	10800504 	addi	r2,r2,20
10006ddc:	10000015 	stw	zero,0(r2)
    g_pCB->ObjPool[ObjIdx].ActionID = 0;
10006de0:	d0e7a817 	ldw	r3,-24928(gp)
10006de4:	e0bfff03 	ldbu	r2,-4(fp)
10006de8:	10800324 	muli	r2,r2,12
10006dec:	1885883a 	add	r2,r3,r2
10006df0:	10800604 	addi	r2,r2,24
10006df4:	10000005 	stb	zero,0(r2)
    g_pCB->ObjPool[ObjIdx].AdditionalData = SL_MAX_SOCKETS;
10006df8:	d0e7a817 	ldw	r3,-24928(gp)
10006dfc:	e0bfff03 	ldbu	r2,-4(fp)
10006e00:	10800324 	muli	r2,r2,12
10006e04:	1885883a 	add	r2,r3,r2
10006e08:	10800604 	addi	r2,r2,24
10006e0c:	00c00204 	movi	r3,8
10006e10:	10c00045 	stb	r3,1(r2)

    /* remove from active list */
    _SlRemoveFromList(&g_pCB->ActivePoolIdx, ObjIdx);
10006e14:	d0a7a817 	ldw	r2,-24928(gp)
10006e18:	10c02284 	addi	r3,r2,138
10006e1c:	e0bfff03 	ldbu	r2,-4(fp)
10006e20:	1809883a 	mov	r4,r3
10006e24:	100b883a 	mov	r5,r2
10006e28:	0006f900 	call	10006f90 <_SlRemoveFromList>
    /* move to free list */
    g_pCB->ObjPool[ObjIdx].NextIndex = g_pCB->FreePoolIdx;
10006e2c:	d127a817 	ldw	r4,-24928(gp)
10006e30:	e0bfff03 	ldbu	r2,-4(fp)
10006e34:	d0e7a817 	ldw	r3,-24928(gp)
10006e38:	18c02203 	ldbu	r3,136(r3)
10006e3c:	10800324 	muli	r2,r2,12
10006e40:	2085883a 	add	r2,r4,r2
10006e44:	10800604 	addi	r2,r2,24
10006e48:	10c00085 	stb	r3,2(r2)
    g_pCB->FreePoolIdx = ObjIdx;
10006e4c:	d0a7a817 	ldw	r2,-24928(gp)
10006e50:	e0ffff03 	ldbu	r3,-4(fp)
10006e54:	10c02205 	stb	r3,136(r2)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10006e58:	d0a7a817 	ldw	r2,-24928(gp)
10006e5c:	10802404 	addi	r2,r2,144
10006e60:	1009883a 	mov	r4,r2
10006e64:	01400cc4 	movi	r5,51
10006e68:	000938c0 	call	1000938c <_SlNonOsSemSet>
10006e6c:	10803fcc 	andi	r2,r2,255
10006e70:	1080201c 	xori	r2,r2,128
10006e74:	10bfe004 	addi	r2,r2,-128
10006e78:	e0bffe8d 	sth	r2,-6(fp)
10006e7c:	e0bffe8f 	ldh	r2,-6(fp)
10006e80:	10000126 	beq	r2,zero,10006e88 <_SlDrvReleasePoolObj+0x318>
10006e84:	003fff06 	br	10006e84 <__alt_data_end+0xf0006e84>
}
10006e88:	e037883a 	mov	sp,fp
10006e8c:	dfc00117 	ldw	ra,4(sp)
10006e90:	df000017 	ldw	fp,0(sp)
10006e94:	dec00204 	addi	sp,sp,8
10006e98:	f800283a 	ret

10006e9c <_SlDrvObjInit>:

/* ******************************************************************************/
/*  _SlDrvObjInit */
/* ******************************************************************************/
void _SlDrvObjInit(void)
{
10006e9c:	defffd04 	addi	sp,sp,-12
10006ea0:	dfc00215 	stw	ra,8(sp)
10006ea4:	df000115 	stw	fp,4(sp)
10006ea8:	df000104 	addi	fp,sp,4
    _u8 Idx;

    sl_Memset(&g_pCB->ObjPool[0],0,MAX_CONCURRENT_ACTIONS*sizeof(_SlPoolObj_t));
10006eac:	d0a7a817 	ldw	r2,-24928(gp)
10006eb0:	10800404 	addi	r2,r2,16
10006eb4:	1009883a 	mov	r4,r2
10006eb8:	000b883a 	mov	r5,zero
10006ebc:	01801e04 	movi	r6,120
10006ec0:	000c8bc0 	call	1000c8bc <memset>
    /* place all Obj in the free list */
    g_pCB->FreePoolIdx = 0;
10006ec4:	d0a7a817 	ldw	r2,-24928(gp)
10006ec8:	10002205 	stb	zero,136(r2)
    for (Idx = 0 ; Idx < MAX_CONCURRENT_ACTIONS ; Idx++)
10006ecc:	e03fff05 	stb	zero,-4(fp)
10006ed0:	00001206 	br	10006f1c <_SlDrvObjInit+0x80>
    {
        g_pCB->ObjPool[Idx].NextIndex = Idx + 1;
10006ed4:	d0e7a817 	ldw	r3,-24928(gp)
10006ed8:	e0bfff03 	ldbu	r2,-4(fp)
10006edc:	e13fff03 	ldbu	r4,-4(fp)
10006ee0:	21000044 	addi	r4,r4,1
10006ee4:	10800324 	muli	r2,r2,12
10006ee8:	1885883a 	add	r2,r3,r2
10006eec:	10800604 	addi	r2,r2,24
10006ef0:	11000085 	stb	r4,2(r2)
        g_pCB->ObjPool[Idx].AdditionalData = SL_MAX_SOCKETS;
10006ef4:	d0e7a817 	ldw	r3,-24928(gp)
10006ef8:	e0bfff03 	ldbu	r2,-4(fp)
10006efc:	10800324 	muli	r2,r2,12
10006f00:	1885883a 	add	r2,r3,r2
10006f04:	10800604 	addi	r2,r2,24
10006f08:	00c00204 	movi	r3,8
10006f0c:	10c00045 	stb	r3,1(r2)
    _u8 Idx;

    sl_Memset(&g_pCB->ObjPool[0],0,MAX_CONCURRENT_ACTIONS*sizeof(_SlPoolObj_t));
    /* place all Obj in the free list */
    g_pCB->FreePoolIdx = 0;
    for (Idx = 0 ; Idx < MAX_CONCURRENT_ACTIONS ; Idx++)
10006f10:	e0bfff03 	ldbu	r2,-4(fp)
10006f14:	10800044 	addi	r2,r2,1
10006f18:	e0bfff05 	stb	r2,-4(fp)
10006f1c:	e0bfff03 	ldbu	r2,-4(fp)
10006f20:	108002b0 	cmpltui	r2,r2,10
10006f24:	103feb1e 	bne	r2,zero,10006ed4 <__alt_data_end+0xf0006ed4>
    {
        g_pCB->ObjPool[Idx].NextIndex = Idx + 1;
        g_pCB->ObjPool[Idx].AdditionalData = SL_MAX_SOCKETS;
    }

    g_pCB->ActivePoolIdx = MAX_CONCURRENT_ACTIONS;
10006f28:	d0a7a817 	ldw	r2,-24928(gp)
10006f2c:	00c00284 	movi	r3,10
10006f30:	10c02285 	stb	r3,138(r2)
    g_pCB->PendingPoolIdx = MAX_CONCURRENT_ACTIONS;
10006f34:	d0a7a817 	ldw	r2,-24928(gp)
10006f38:	00c00284 	movi	r3,10
10006f3c:	10c02245 	stb	r3,137(r2)

}
10006f40:	e037883a 	mov	sp,fp
10006f44:	dfc00117 	ldw	ra,4(sp)
10006f48:	df000017 	ldw	fp,0(sp)
10006f4c:	dec00204 	addi	sp,sp,8
10006f50:	f800283a 	ret

10006f54 <_SlDrvObjDeInit>:

/* ******************************************************************************/
/*  _SlDrvObjDeInit  */
/* ******************************************************************************/
void _SlDrvObjDeInit(void)
{
10006f54:	deffff04 	addi	sp,sp,-4
10006f58:	df000015 	stw	fp,0(sp)
10006f5c:	d839883a 	mov	fp,sp
    g_pCB->FreePoolIdx = 0;
10006f60:	d0a7a817 	ldw	r2,-24928(gp)
10006f64:	10002205 	stb	zero,136(r2)
    g_pCB->PendingPoolIdx = MAX_CONCURRENT_ACTIONS;
10006f68:	d0a7a817 	ldw	r2,-24928(gp)
10006f6c:	00c00284 	movi	r3,10
10006f70:	10c02245 	stb	r3,137(r2)
    g_pCB->ActivePoolIdx = MAX_CONCURRENT_ACTIONS;
10006f74:	d0a7a817 	ldw	r2,-24928(gp)
10006f78:	00c00284 	movi	r3,10
10006f7c:	10c02285 	stb	r3,138(r2)

}
10006f80:	e037883a 	mov	sp,fp
10006f84:	df000017 	ldw	fp,0(sp)
10006f88:	dec00104 	addi	sp,sp,4
10006f8c:	f800283a 	ret

10006f90 <_SlRemoveFromList>:

/* ******************************************************************************/
/* _SlRemoveFromList  */
/* ******************************************************************************/
void _SlRemoveFromList(_u8 *ListIndex, _u8 ItemIndex)
{
10006f90:	defffc04 	addi	sp,sp,-16
10006f94:	df000315 	stw	fp,12(sp)
10006f98:	df000304 	addi	fp,sp,12
10006f9c:	e13ffe15 	stw	r4,-8(fp)
10006fa0:	2805883a 	mov	r2,r5
10006fa4:	e0bfff05 	stb	r2,-4(fp)
    _u8 Idx;
    /* only one item in the list */
    if (MAX_CONCURRENT_ACTIONS == g_pCB->ObjPool[*ListIndex].NextIndex)
10006fa8:	d0e7a817 	ldw	r3,-24928(gp)
10006fac:	e0bffe17 	ldw	r2,-8(fp)
10006fb0:	10800003 	ldbu	r2,0(r2)
10006fb4:	10803fcc 	andi	r2,r2,255
10006fb8:	10800324 	muli	r2,r2,12
10006fbc:	1885883a 	add	r2,r3,r2
10006fc0:	10800604 	addi	r2,r2,24
10006fc4:	10800083 	ldbu	r2,2(r2)
10006fc8:	10803fcc 	andi	r2,r2,255
10006fcc:	10800298 	cmpnei	r2,r2,10
10006fd0:	1000041e 	bne	r2,zero,10006fe4 <_SlRemoveFromList+0x54>
    {
        *ListIndex = MAX_CONCURRENT_ACTIONS;
10006fd4:	e0bffe17 	ldw	r2,-8(fp)
10006fd8:	00c00284 	movi	r3,10
10006fdc:	10c00005 	stb	r3,0(r2)
10006fe0:	00003206 	br	100070ac <_SlRemoveFromList+0x11c>
    }
    /* need to remove the first item in the list and therefore update the global which holds this index */
    else if (*ListIndex == ItemIndex)
10006fe4:	e0bffe17 	ldw	r2,-8(fp)
10006fe8:	10800003 	ldbu	r2,0(r2)
10006fec:	10c03fcc 	andi	r3,r2,255
10006ff0:	e0bfff03 	ldbu	r2,-4(fp)
10006ff4:	1880091e 	bne	r3,r2,1000701c <_SlRemoveFromList+0x8c>
    {
        *ListIndex = g_pCB->ObjPool[ItemIndex].NextIndex;
10006ff8:	d0e7a817 	ldw	r3,-24928(gp)
10006ffc:	e0bfff03 	ldbu	r2,-4(fp)
10007000:	10800324 	muli	r2,r2,12
10007004:	1885883a 	add	r2,r3,r2
10007008:	10800604 	addi	r2,r2,24
1000700c:	10c00083 	ldbu	r3,2(r2)
10007010:	e0bffe17 	ldw	r2,-8(fp)
10007014:	10c00005 	stb	r3,0(r2)
10007018:	00002406 	br	100070ac <_SlRemoveFromList+0x11c>
    }
    else
    {
        Idx = *ListIndex;
1000701c:	e0bffe17 	ldw	r2,-8(fp)
10007020:	10800003 	ldbu	r2,0(r2)
10007024:	e0bffd05 	stb	r2,-12(fp)
        while(MAX_CONCURRENT_ACTIONS > Idx)
10007028:	00001d06 	br	100070a0 <_SlRemoveFromList+0x110>
        {
            /* remove from list */
            if (g_pCB->ObjPool[Idx].NextIndex == ItemIndex)
1000702c:	d0e7a817 	ldw	r3,-24928(gp)
10007030:	e0bffd03 	ldbu	r2,-12(fp)
10007034:	10800324 	muli	r2,r2,12
10007038:	1885883a 	add	r2,r3,r2
1000703c:	10800604 	addi	r2,r2,24
10007040:	10800083 	ldbu	r2,2(r2)
10007044:	10c03fcc 	andi	r3,r2,255
10007048:	e0bfff03 	ldbu	r2,-4(fp)
1000704c:	18800d1e 	bne	r3,r2,10007084 <_SlRemoveFromList+0xf4>
            {
                g_pCB->ObjPool[Idx].NextIndex = g_pCB->ObjPool[ItemIndex].NextIndex;
10007050:	d127a817 	ldw	r4,-24928(gp)
10007054:	e0bffd03 	ldbu	r2,-12(fp)
10007058:	d167a817 	ldw	r5,-24928(gp)
1000705c:	e0ffff03 	ldbu	r3,-4(fp)
10007060:	18c00324 	muli	r3,r3,12
10007064:	28c7883a 	add	r3,r5,r3
10007068:	18c00604 	addi	r3,r3,24
1000706c:	18c00083 	ldbu	r3,2(r3)
10007070:	10800324 	muli	r2,r2,12
10007074:	2085883a 	add	r2,r4,r2
10007078:	10800604 	addi	r2,r2,24
1000707c:	10c00085 	stb	r3,2(r2)
                break;
10007080:	00000a06 	br	100070ac <_SlRemoveFromList+0x11c>
            }
            Idx = g_pCB->ObjPool[Idx].NextIndex;		
10007084:	d0e7a817 	ldw	r3,-24928(gp)
10007088:	e0bffd03 	ldbu	r2,-12(fp)
1000708c:	10800324 	muli	r2,r2,12
10007090:	1885883a 	add	r2,r3,r2
10007094:	10800604 	addi	r2,r2,24
10007098:	10800083 	ldbu	r2,2(r2)
1000709c:	e0bffd05 	stb	r2,-12(fp)
        *ListIndex = g_pCB->ObjPool[ItemIndex].NextIndex;
    }
    else
    {
        Idx = *ListIndex;
        while(MAX_CONCURRENT_ACTIONS > Idx)
100070a0:	e0bffd03 	ldbu	r2,-12(fp)
100070a4:	108002b0 	cmpltui	r2,r2,10
100070a8:	103fe01e 	bne	r2,zero,1000702c <__alt_data_end+0xf000702c>
                break;
            }
            Idx = g_pCB->ObjPool[Idx].NextIndex;		
        }
    }
}
100070ac:	e037883a 	mov	sp,fp
100070b0:	df000017 	ldw	fp,0(sp)
100070b4:	dec00104 	addi	sp,sp,4
100070b8:	f800283a 	ret

100070bc <_SlFindAndSetActiveObj>:

/* ******************************************************************************/
/*  _SlFindAndSetActiveObj                                                     */
/* ******************************************************************************/
_SlReturnVal_t _SlFindAndSetActiveObj(_SlOpcode_t  Opcode, _u8 Sd)
{
100070bc:	defffc04 	addi	sp,sp,-16
100070c0:	df000315 	stw	fp,12(sp)
100070c4:	df000304 	addi	fp,sp,12
100070c8:	2007883a 	mov	r3,r4
100070cc:	2805883a 	mov	r2,r5
100070d0:	e0fffe0d 	sth	r3,-8(fp)
100070d4:	e0bfff05 	stb	r2,-4(fp)
    _u8 ActiveIndex;

    ActiveIndex = g_pCB->ActivePoolIdx;
100070d8:	d0a7a817 	ldw	r2,-24928(gp)
100070dc:	10802283 	ldbu	r2,138(r2)
100070e0:	e0bffd05 	stb	r2,-12(fp)
    /* go over the active list if exist to find obj waiting for this Async event */
    while (MAX_CONCURRENT_ACTIONS > ActiveIndex)
100070e4:	00007106 	br	100072ac <_SlFindAndSetActiveObj+0x1f0>
    {
        /* unset the Ipv4\IPv6 bit in the opcode if family bit was set  */
        if (g_pCB->ObjPool[ActiveIndex].AdditionalData & SL_NETAPP_FAMILY_MASK)
100070e8:	d0e7a817 	ldw	r3,-24928(gp)
100070ec:	e0bffd03 	ldbu	r2,-12(fp)
100070f0:	10800324 	muli	r2,r2,12
100070f4:	1885883a 	add	r2,r3,r2
100070f8:	10800604 	addi	r2,r2,24
100070fc:	10800043 	ldbu	r2,1(r2)
10007100:	10803fcc 	andi	r2,r2,255
10007104:	1080201c 	xori	r2,r2,128
10007108:	10bfe004 	addi	r2,r2,-128
1000710c:	1000040e 	bge	r2,zero,10007120 <_SlFindAndSetActiveObj+0x64>
        {
            Opcode &= ~SL_OPCODE_IPV6;
10007110:	e0fffe0b 	ldhu	r3,-8(fp)
10007114:	00bf7fc4 	movi	r2,-513
10007118:	1884703a 	and	r2,r3,r2
1000711c:	e0bffe0d 	sth	r2,-8(fp)
        }

        if ((g_pCB->ObjPool[ActiveIndex].ActionID == RECV_ID) && (Sd == g_pCB->ObjPool[ActiveIndex].AdditionalData) && 
10007120:	d0e7a817 	ldw	r3,-24928(gp)
10007124:	e0bffd03 	ldbu	r2,-12(fp)
10007128:	10800324 	muli	r2,r2,12
1000712c:	1885883a 	add	r2,r3,r2
10007130:	10800604 	addi	r2,r2,24
10007134:	10800003 	ldbu	r2,0(r2)
10007138:	10803fcc 	andi	r2,r2,255
1000713c:	108003d8 	cmpnei	r2,r2,15
10007140:	1000171e 	bne	r2,zero,100071a0 <_SlFindAndSetActiveObj+0xe4>
10007144:	d0e7a817 	ldw	r3,-24928(gp)
10007148:	e0bffd03 	ldbu	r2,-12(fp)
1000714c:	10800324 	muli	r2,r2,12
10007150:	1885883a 	add	r2,r3,r2
10007154:	10800604 	addi	r2,r2,24
10007158:	10800043 	ldbu	r2,1(r2)
1000715c:	10c03fcc 	andi	r3,r2,255
10007160:	e0bfff03 	ldbu	r2,-4(fp)
10007164:	18800e1e 	bne	r3,r2,100071a0 <_SlFindAndSetActiveObj+0xe4>
10007168:	e0bffe0b 	ldhu	r2,-8(fp)
1000716c:	108402a0 	cmpeqi	r2,r2,4106
10007170:	1000061e 	bne	r2,zero,1000718c <_SlFindAndSetActiveObj+0xd0>
            ( (SL_OPCODE_SOCKET_RECVASYNCRESPONSE == Opcode) || (SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE == Opcode) || (SL_OPCODE_SOCKET_RECVFROMASYNCRESPONSE_V6 == Opcode) ) )
10007174:	e0bffe0b 	ldhu	r2,-8(fp)
10007178:	108402e0 	cmpeqi	r2,r2,4107
1000717c:	1000031e 	bne	r2,zero,1000718c <_SlFindAndSetActiveObj+0xd0>
10007180:	e0bffe0b 	ldhu	r2,-8(fp)
10007184:	108482d8 	cmpnei	r2,r2,4619
10007188:	1000051e 	bne	r2,zero,100071a0 <_SlFindAndSetActiveObj+0xe4>
        {
            g_pCB->FunctionParams.AsyncExt.ActionIndex = ActiveIndex;
1000718c:	d0a7a817 	ldw	r2,-24928(gp)
10007190:	e0fffd03 	ldbu	r3,-12(fp)
10007194:	10c02b05 	stb	r3,172(r2)
            return SL_RET_CODE_OK;
10007198:	0005883a 	mov	r2,zero
1000719c:	00004706 	br	100072bc <_SlFindAndSetActiveObj+0x200>
        }
        /* In case this action is socket related, SocketID is in use, otherwise will be set to SL_MAX_SOCKETS */
        if ( (_SlActionLookupTable[ g_pCB->ObjPool[ActiveIndex].ActionID - MAX_SOCKET_ENUM_IDX].ActionAsyncOpcode == Opcode) && 
100071a0:	d0e7a817 	ldw	r3,-24928(gp)
100071a4:	e0bffd03 	ldbu	r2,-12(fp)
100071a8:	10800324 	muli	r2,r2,12
100071ac:	1885883a 	add	r2,r3,r2
100071b0:	10800604 	addi	r2,r2,24
100071b4:	10800003 	ldbu	r2,0(r2)
100071b8:	10803fcc 	andi	r2,r2,255
100071bc:	10fffe04 	addi	r3,r2,-8
100071c0:	008400b4 	movhi	r2,4098
100071c4:	10942604 	addi	r2,r2,20632
100071c8:	180690fa 	slli	r3,r3,3
100071cc:	10c5883a 	add	r2,r2,r3
100071d0:	1080008b 	ldhu	r2,2(r2)
100071d4:	10ffffcc 	andi	r3,r2,65535
100071d8:	e0bffe0b 	ldhu	r2,-8(fp)
100071dc:	18802c1e 	bne	r3,r2,10007290 <_SlFindAndSetActiveObj+0x1d4>
            ( ((Sd == (g_pCB->ObjPool[ActiveIndex].AdditionalData & BSD_SOCKET_ID_MASK) ) && (SL_MAX_SOCKETS > Sd)) || (SL_MAX_SOCKETS == (g_pCB->ObjPool[ActiveIndex].AdditionalData & BSD_SOCKET_ID_MASK)) ) )
100071e0:	e0ffff03 	ldbu	r3,-4(fp)
100071e4:	d127a817 	ldw	r4,-24928(gp)
100071e8:	e0bffd03 	ldbu	r2,-12(fp)
100071ec:	10800324 	muli	r2,r2,12
100071f0:	2085883a 	add	r2,r4,r2
100071f4:	10800604 	addi	r2,r2,24
100071f8:	10800043 	ldbu	r2,1(r2)
100071fc:	10803fcc 	andi	r2,r2,255
10007200:	108003cc 	andi	r2,r2,15
        {
            g_pCB->FunctionParams.AsyncExt.ActionIndex = ActiveIndex;
            return SL_RET_CODE_OK;
        }
        /* In case this action is socket related, SocketID is in use, otherwise will be set to SL_MAX_SOCKETS */
        if ( (_SlActionLookupTable[ g_pCB->ObjPool[ActiveIndex].ActionID - MAX_SOCKET_ENUM_IDX].ActionAsyncOpcode == Opcode) && 
10007204:	1880031e 	bne	r3,r2,10007214 <_SlFindAndSetActiveObj+0x158>
            ( ((Sd == (g_pCB->ObjPool[ActiveIndex].AdditionalData & BSD_SOCKET_ID_MASK) ) && (SL_MAX_SOCKETS > Sd)) || (SL_MAX_SOCKETS == (g_pCB->ObjPool[ActiveIndex].AdditionalData & BSD_SOCKET_ID_MASK)) ) )
10007208:	e0bfff03 	ldbu	r2,-4(fp)
1000720c:	10800230 	cmpltui	r2,r2,8
10007210:	10000a1e 	bne	r2,zero,1000723c <_SlFindAndSetActiveObj+0x180>
10007214:	d0e7a817 	ldw	r3,-24928(gp)
10007218:	e0bffd03 	ldbu	r2,-12(fp)
1000721c:	10800324 	muli	r2,r2,12
10007220:	1885883a 	add	r2,r3,r2
10007224:	10800604 	addi	r2,r2,24
10007228:	10800043 	ldbu	r2,1(r2)
1000722c:	10803fcc 	andi	r2,r2,255
10007230:	108003cc 	andi	r2,r2,15
10007234:	10800218 	cmpnei	r2,r2,8
10007238:	1000151e 	bne	r2,zero,10007290 <_SlFindAndSetActiveObj+0x1d4>
        {
            /* set handler */
            g_pCB->FunctionParams.AsyncExt.AsyncEvtHandler = _SlActionLookupTable[ g_pCB->ObjPool[ActiveIndex].ActionID - MAX_SOCKET_ENUM_IDX].AsyncEventHandler;
1000723c:	d0e7a817 	ldw	r3,-24928(gp)
10007240:	d127a817 	ldw	r4,-24928(gp)
10007244:	e0bffd03 	ldbu	r2,-12(fp)
10007248:	10800324 	muli	r2,r2,12
1000724c:	2085883a 	add	r2,r4,r2
10007250:	10800604 	addi	r2,r2,24
10007254:	10800003 	ldbu	r2,0(r2)
10007258:	10803fcc 	andi	r2,r2,255
1000725c:	113ffe04 	addi	r4,r2,-8
10007260:	008400b4 	movhi	r2,4098
10007264:	10942604 	addi	r2,r2,20632
10007268:	200890fa 	slli	r4,r4,3
1000726c:	1105883a 	add	r2,r2,r4
10007270:	10800104 	addi	r2,r2,4
10007274:	10800017 	ldw	r2,0(r2)
10007278:	18802c15 	stw	r2,176(r3)
            g_pCB->FunctionParams.AsyncExt.ActionIndex = ActiveIndex;
1000727c:	d0a7a817 	ldw	r2,-24928(gp)
10007280:	e0fffd03 	ldbu	r3,-12(fp)
10007284:	10c02b05 	stb	r3,172(r2)
            return SL_RET_CODE_OK;
10007288:	0005883a 	mov	r2,zero
1000728c:	00000b06 	br	100072bc <_SlFindAndSetActiveObj+0x200>
        }
        ActiveIndex = g_pCB->ObjPool[ActiveIndex].NextIndex;
10007290:	d0e7a817 	ldw	r3,-24928(gp)
10007294:	e0bffd03 	ldbu	r2,-12(fp)
10007298:	10800324 	muli	r2,r2,12
1000729c:	1885883a 	add	r2,r3,r2
100072a0:	10800604 	addi	r2,r2,24
100072a4:	10800083 	ldbu	r2,2(r2)
100072a8:	e0bffd05 	stb	r2,-12(fp)
{
    _u8 ActiveIndex;

    ActiveIndex = g_pCB->ActivePoolIdx;
    /* go over the active list if exist to find obj waiting for this Async event */
    while (MAX_CONCURRENT_ACTIONS > ActiveIndex)
100072ac:	e0bffd03 	ldbu	r2,-12(fp)
100072b0:	108002b0 	cmpltui	r2,r2,10
100072b4:	103f8c1e 	bne	r2,zero,100070e8 <__alt_data_end+0xf00070e8>
            return SL_RET_CODE_OK;
        }
        ActiveIndex = g_pCB->ObjPool[ActiveIndex].NextIndex;
    }

    return SL_RET_CODE_SELF_ERROR;
100072b8:	00bfff44 	movi	r2,-3
}
100072bc:	e037883a 	mov	sp,fp
100072c0:	df000017 	ldw	fp,0(sp)
100072c4:	dec00104 	addi	sp,sp,4
100072c8:	f800283a 	ret

100072cc <_SlDrvFlowContInit>:

/*****************************************************************************/
/* _SlDrvFlowContInit */
/*****************************************************************************/
void _SlDrvFlowContInit(void)
{
100072cc:	defffd04 	addi	sp,sp,-12
100072d0:	dfc00215 	stw	ra,8(sp)
100072d4:	df000115 	stw	fp,4(sp)
100072d8:	df000104 	addi	fp,sp,4
    g_pCB->FlowContCB.TxPoolCnt = FLOW_CONT_MIN;
100072dc:	008400f4 	movhi	r2,4099
100072e0:	10a48204 	addi	r2,r2,-28152
100072e4:	10800017 	ldw	r2,0(r2)
100072e8:	00c00044 	movi	r3,1
100072ec:	10c024c5 	stb	r3,147(r2)

    OSI_RET_OK_CHECK(sl_LockObjCreate(&g_pCB->FlowContCB.TxLockObj, "TxLockObj"));
100072f0:	008400f4 	movhi	r2,4099
100072f4:	10a48204 	addi	r2,r2,-28152
100072f8:	10800017 	ldw	r2,0(r2)
100072fc:	10802504 	addi	r2,r2,148
10007300:	1009883a 	mov	r4,r2
10007304:	01400cc4 	movi	r5,51
10007308:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000730c:	10803fcc 	andi	r2,r2,255
10007310:	1080201c 	xori	r2,r2,128
10007314:	10bfe004 	addi	r2,r2,-128
10007318:	e0bfff0d 	sth	r2,-4(fp)
1000731c:	e0bfff0f 	ldh	r2,-4(fp)
10007320:	10000126 	beq	r2,zero,10007328 <_SlDrvFlowContInit+0x5c>
10007324:	003fff06 	br	10007324 <__alt_data_end+0xf0007324>

    OSI_RET_OK_CHECK(sl_SyncObjCreate(&g_pCB->FlowContCB.TxSyncObj, "TxSyncObj"));
10007328:	008400f4 	movhi	r2,4099
1000732c:	10a48204 	addi	r2,r2,-28152
10007330:	10800017 	ldw	r2,0(r2)
10007334:	10802544 	addi	r2,r2,149
10007338:	1009883a 	mov	r4,r2
1000733c:	01400444 	movi	r5,17
10007340:	000938c0 	call	1000938c <_SlNonOsSemSet>
10007344:	10803fcc 	andi	r2,r2,255
10007348:	1080201c 	xori	r2,r2,128
1000734c:	10bfe004 	addi	r2,r2,-128
10007350:	e0bfff8d 	sth	r2,-2(fp)
10007354:	e0bfff8f 	ldh	r2,-2(fp)
10007358:	10000126 	beq	r2,zero,10007360 <_SlDrvFlowContInit+0x94>
1000735c:	003fff06 	br	1000735c <__alt_data_end+0xf000735c>
}
10007360:	e037883a 	mov	sp,fp
10007364:	dfc00117 	ldw	ra,4(sp)
10007368:	df000017 	ldw	fp,0(sp)
1000736c:	dec00204 	addi	sp,sp,8
10007370:	f800283a 	ret

10007374 <_SlDrvFlowContDeinit>:

/*****************************************************************************/
/* _SlDrvFlowContDeinit */
/*****************************************************************************/
void _SlDrvFlowContDeinit(void)
{
10007374:	defffd04 	addi	sp,sp,-12
10007378:	dfc00215 	stw	ra,8(sp)
1000737c:	df000115 	stw	fp,4(sp)
10007380:	df000104 	addi	fp,sp,4
    g_pCB->FlowContCB.TxPoolCnt = 0;
10007384:	008400f4 	movhi	r2,4099
10007388:	10a48204 	addi	r2,r2,-28152
1000738c:	10800017 	ldw	r2,0(r2)
10007390:	100024c5 	stb	zero,147(r2)

    OSI_RET_OK_CHECK(sl_LockObjDelete(&g_pCB->FlowContCB.TxLockObj));
10007394:	008400f4 	movhi	r2,4099
10007398:	10a48204 	addi	r2,r2,-28152
1000739c:	10800017 	ldw	r2,0(r2)
100073a0:	10802504 	addi	r2,r2,148
100073a4:	1009883a 	mov	r4,r2
100073a8:	000b883a 	mov	r5,zero
100073ac:	000938c0 	call	1000938c <_SlNonOsSemSet>
100073b0:	10803fcc 	andi	r2,r2,255
100073b4:	1080201c 	xori	r2,r2,128
100073b8:	10bfe004 	addi	r2,r2,-128
100073bc:	e0bfff0d 	sth	r2,-4(fp)
100073c0:	e0bfff0f 	ldh	r2,-4(fp)
100073c4:	10000126 	beq	r2,zero,100073cc <_SlDrvFlowContDeinit+0x58>
100073c8:	003fff06 	br	100073c8 <__alt_data_end+0xf00073c8>

    OSI_RET_OK_CHECK(sl_SyncObjDelete(&g_pCB->FlowContCB.TxSyncObj));
100073cc:	008400f4 	movhi	r2,4099
100073d0:	10a48204 	addi	r2,r2,-28152
100073d4:	10800017 	ldw	r2,0(r2)
100073d8:	10802544 	addi	r2,r2,149
100073dc:	1009883a 	mov	r4,r2
100073e0:	000b883a 	mov	r5,zero
100073e4:	000938c0 	call	1000938c <_SlNonOsSemSet>
100073e8:	10803fcc 	andi	r2,r2,255
100073ec:	1080201c 	xori	r2,r2,128
100073f0:	10bfe004 	addi	r2,r2,-128
100073f4:	e0bfff8d 	sth	r2,-2(fp)
100073f8:	e0bfff8f 	ldh	r2,-2(fp)
100073fc:	10000126 	beq	r2,zero,10007404 <_SlDrvFlowContDeinit+0x90>
10007400:	003fff06 	br	10007400 <__alt_data_end+0xf0007400>
}
10007404:	e037883a 	mov	sp,fp
10007408:	dfc00117 	ldw	ra,4(sp)
1000740c:	df000017 	ldw	fp,0(sp)
10007410:	dec00204 	addi	sp,sp,8
10007414:	f800283a 	ret

10007418 <_sl_Strlen>:

/*****************************************************************************/
/* _sl_Strlen                                                                */
/*****************************************************************************/
_u16 _sl_Strlen(const _u8 *buffer)
{
10007418:	defffd04 	addi	sp,sp,-12
1000741c:	df000215 	stw	fp,8(sp)
10007420:	df000204 	addi	fp,sp,8
10007424:	e13fff15 	stw	r4,-4(fp)
    _u16 len = 0;
10007428:	e03ffe0d 	sth	zero,-8(fp)
    if( buffer != NULL )
1000742c:	e0bfff17 	ldw	r2,-4(fp)
10007430:	10000a26 	beq	r2,zero,1000745c <_sl_Strlen+0x44>
    {
      while(*buffer++) len++;
10007434:	00000306 	br	10007444 <_sl_Strlen+0x2c>
10007438:	e0bffe0b 	ldhu	r2,-8(fp)
1000743c:	10800044 	addi	r2,r2,1
10007440:	e0bffe0d 	sth	r2,-8(fp)
10007444:	e0bfff17 	ldw	r2,-4(fp)
10007448:	10c00044 	addi	r3,r2,1
1000744c:	e0ffff15 	stw	r3,-4(fp)
10007450:	10800003 	ldbu	r2,0(r2)
10007454:	10803fcc 	andi	r2,r2,255
10007458:	103ff71e 	bne	r2,zero,10007438 <__alt_data_end+0xf0007438>
    }
    return len;
1000745c:	e0bffe0b 	ldhu	r2,-8(fp)
}
10007460:	e037883a 	mov	sp,fp
10007464:	df000017 	ldw	fp,0(sp)
10007468:	dec00104 	addi	sp,sp,4
1000746c:	f800283a 	ret

10007470 <_sl_GetCreateFsMode>:

/*****************************************************************************/
/* _sl_GetCreateFsMode                                                       */
/*****************************************************************************/
_u32 _sl_GetCreateFsMode(_u32 maxSizeInBytes,_u32 accessFlags)
{
10007470:	defff504 	addi	sp,sp,-44
10007474:	dfc00a15 	stw	ra,40(sp)
10007478:	df000915 	stw	fp,36(sp)
1000747c:	df000904 	addi	fp,sp,36
10007480:	e13ffe15 	stw	r4,-8(fp)
10007484:	e17fff15 	stw	r5,-4(fp)
   _u32 granIdx = 0;
10007488:	e03ff715 	stw	zero,-36(fp)
   _u32 granNum = 0;
1000748c:	e03ff815 	stw	zero,-32(fp)
   _u32 granTable[_FS_MAX_MODE_SIZE_GRAN] = {256,1024,4096,16384,65536}; 
10007490:	00804004 	movi	r2,256
10007494:	e0bff915 	stw	r2,-28(fp)
10007498:	00810004 	movi	r2,1024
1000749c:	e0bffa15 	stw	r2,-24(fp)
100074a0:	00840004 	movi	r2,4096
100074a4:	e0bffb15 	stw	r2,-20(fp)
100074a8:	00900004 	movi	r2,16384
100074ac:	e0bffc15 	stw	r2,-16(fp)
100074b0:	00800074 	movhi	r2,1
100074b4:	e0bffd15 	stw	r2,-12(fp)
   for(granIdx= _FS_MODE_SIZE_GRAN_256B ;granIdx< _FS_MAX_MODE_SIZE_GRAN;granIdx++) 
100074b8:	e03ff715 	stw	zero,-36(fp)
100074bc:	00000e06 	br	100074f8 <_sl_GetCreateFsMode+0x88>
   {                                                       
       if( granTable[granIdx]*255 >= maxSizeInBytes ) 
100074c0:	e0bff717 	ldw	r2,-36(fp)
100074c4:	1085883a 	add	r2,r2,r2
100074c8:	1085883a 	add	r2,r2,r2
100074cc:	e0fff704 	addi	r3,fp,-36
100074d0:	1885883a 	add	r2,r3,r2
100074d4:	10800204 	addi	r2,r2,8
100074d8:	10800017 	ldw	r2,0(r2)
100074dc:	10c03fe4 	muli	r3,r2,255
100074e0:	e0bffe17 	ldw	r2,-8(fp)
100074e4:	18800136 	bltu	r3,r2,100074ec <_sl_GetCreateFsMode+0x7c>
            break;                                                      
100074e8:	00000606 	br	10007504 <_sl_GetCreateFsMode+0x94>
_u32 _sl_GetCreateFsMode(_u32 maxSizeInBytes,_u32 accessFlags)
{
   _u32 granIdx = 0;
   _u32 granNum = 0;
   _u32 granTable[_FS_MAX_MODE_SIZE_GRAN] = {256,1024,4096,16384,65536}; 
   for(granIdx= _FS_MODE_SIZE_GRAN_256B ;granIdx< _FS_MAX_MODE_SIZE_GRAN;granIdx++) 
100074ec:	e0bff717 	ldw	r2,-36(fp)
100074f0:	10800044 	addi	r2,r2,1
100074f4:	e0bff715 	stw	r2,-36(fp)
100074f8:	e0bff717 	ldw	r2,-36(fp)
100074fc:	10800170 	cmpltui	r2,r2,5
10007500:	103fef1e 	bne	r2,zero,100074c0 <__alt_data_end+0xf00074c0>
   {                                                       
       if( granTable[granIdx]*255 >= maxSizeInBytes ) 
            break;                                                      
   }                                                                 
   granNum = maxSizeInBytes/granTable[granIdx];
10007504:	e0bff717 	ldw	r2,-36(fp)
10007508:	1085883a 	add	r2,r2,r2
1000750c:	1085883a 	add	r2,r2,r2
10007510:	e0fff704 	addi	r3,fp,-36
10007514:	1885883a 	add	r2,r3,r2
10007518:	10800204 	addi	r2,r2,8
1000751c:	10800017 	ldw	r2,0(r2)
10007520:	e13ffe17 	ldw	r4,-8(fp)
10007524:	100b883a 	mov	r5,r2
10007528:	000c6e00 	call	1000c6e0 <__udivsi3>
1000752c:	e0bff815 	stw	r2,-32(fp)
   if( maxSizeInBytes % granTable[granIdx] != 0 )
10007530:	e0bff717 	ldw	r2,-36(fp)
10007534:	1085883a 	add	r2,r2,r2
10007538:	1085883a 	add	r2,r2,r2
1000753c:	e0fff704 	addi	r3,fp,-36
10007540:	1885883a 	add	r2,r3,r2
10007544:	10800204 	addi	r2,r2,8
10007548:	10800017 	ldw	r2,0(r2)
1000754c:	e0fffe17 	ldw	r3,-8(fp)
10007550:	1809883a 	mov	r4,r3
10007554:	100b883a 	mov	r5,r2
10007558:	000c6e80 	call	1000c6e8 <__umodsi3>
1000755c:	10000326 	beq	r2,zero,1000756c <_sl_GetCreateFsMode+0xfc>
         granNum++;
10007560:	e0bff817 	ldw	r2,-32(fp)
10007564:	10800044 	addi	r2,r2,1
10007568:	e0bff815 	stw	r2,-32(fp)

   return _FS_MODE(_FS_MODE_OPEN_WRITE_CREATE_IF_NOT_EXIST,  granIdx, granNum, accessFlags);
1000756c:	e0bff717 	ldw	r2,-36(fp)
10007570:	108003cc 	andi	r2,r2,15
10007574:	1006923a 	slli	r3,r2,8
10007578:	e0bff817 	ldw	r2,-32(fp)
1000757c:	10803fcc 	andi	r2,r2,255
10007580:	1886b03a 	or	r3,r3,r2
10007584:	e0bfff17 	ldw	r2,-4(fp)
10007588:	10803fcc 	andi	r2,r2,255
1000758c:	1004943a 	slli	r2,r2,16
10007590:	1884b03a 	or	r2,r3,r2
10007594:	108c0014 	ori	r2,r2,12288
}
10007598:	e037883a 	mov	sp,fp
1000759c:	dfc00117 	ldw	ra,4(sp)
100075a0:	df000017 	ldw	fp,0(sp)
100075a4:	dec00204 	addi	sp,sp,8
100075a8:	f800283a 	ret

100075ac <sl_FsOpen>:
    sizeof(_FsOpenResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_FsOpen)
_i32 sl_FsOpen(_u8 *pFileName,_u32 AccessModeAndMaxSize, _u32 *pToken,_i32 *pFileHandle)
{
100075ac:	defff304 	addi	sp,sp,-52
100075b0:	dfc00c15 	stw	ra,48(sp)
100075b4:	df000b15 	stw	fp,44(sp)
100075b8:	df000b04 	addi	fp,sp,44
100075bc:	e13ffc15 	stw	r4,-16(fp)
100075c0:	e17ffd15 	stw	r5,-12(fp)
100075c4:	e1bffe15 	stw	r6,-8(fp)
100075c8:	e1ffff15 	stw	r7,-4(fp)
    _SlReturnVal_t        RetVal;
    _SlFsOpenMsg_u        Msg;
    _SlCmdExt_t           CmdExt;

    CmdExt.TxPayloadLen = (_sl_Strlen(pFileName)+4) & (~3); // add 4: 1 for NULL and the 3 for align 
100075cc:	e13ffc17 	ldw	r4,-16(fp)
100075d0:	00074180 	call	10007418 <_sl_Strlen>
100075d4:	10800104 	addi	r2,r2,4
100075d8:	1007883a 	mov	r3,r2
100075dc:	00bfff04 	movi	r2,-4
100075e0:	1884703a 	and	r2,r3,r2
100075e4:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
100075e8:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = pFileName;
100075ec:	e0bffc17 	ldw	r2,-16(fp)
100075f0:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
100075f4:	e03ffb15 	stw	zero,-20(fp)

    Msg.Cmd.Mode          =  AccessModeAndMaxSize; 
100075f8:	e0bffd17 	ldw	r2,-12(fp)
100075fc:	e0bff615 	stw	r2,-40(fp)

	if(pToken != NULL)
10007600:	e0bffe17 	ldw	r2,-8(fp)
10007604:	10000426 	beq	r2,zero,10007618 <sl_FsOpen+0x6c>
	{
       Msg.Cmd.Token         = *pToken;
10007608:	e0bffe17 	ldw	r2,-8(fp)
1000760c:	10800017 	ldw	r2,0(r2)
10007610:	e0bff715 	stw	r2,-36(fp)
10007614:	00000106 	br	1000761c <sl_FsOpen+0x70>
	}
    else
	{
       Msg.Cmd.Token         = 0;
10007618:	e03ff715 	stw	zero,-36(fp)
	}

    RetVal = _SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsOpenCmdCtrl, &Msg, &CmdExt);
1000761c:	e0fff604 	addi	r3,fp,-40
10007620:	e0bff804 	addi	r2,fp,-32
10007624:	d1200d04 	addi	r4,gp,-32716
10007628:	180b883a 	mov	r5,r3
1000762c:	100d883a 	mov	r6,r2
10007630:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007634:	e0bff50d 	sth	r2,-44(fp)
    *pFileHandle = Msg.Rsp.FileHandle;
10007638:	e0bff617 	ldw	r2,-40(fp)
1000763c:	1007883a 	mov	r3,r2
10007640:	e0bfff17 	ldw	r2,-4(fp)
10007644:	10c00015 	stw	r3,0(r2)
	if (pToken != NULL)
10007648:	e0bffe17 	ldw	r2,-8(fp)
1000764c:	10000326 	beq	r2,zero,1000765c <sl_FsOpen+0xb0>
	{
        *pToken =      Msg.Rsp.Token;
10007650:	e0fff717 	ldw	r3,-36(fp)
10007654:	e0bffe17 	ldw	r2,-8(fp)
10007658:	10c00015 	stw	r3,0(r2)
	}
       
	/* in case of an error, return the erros file handler as an error code */
	if( *pFileHandle < 0 )
1000765c:	e0bfff17 	ldw	r2,-4(fp)
10007660:	10800017 	ldw	r2,0(r2)
10007664:	1000030e 	bge	r2,zero,10007674 <sl_FsOpen+0xc8>
	{
	   return *pFileHandle;
10007668:	e0bfff17 	ldw	r2,-4(fp)
1000766c:	10800017 	ldw	r2,0(r2)
10007670:	00000106 	br	10007678 <sl_FsOpen+0xcc>
	}
    return (_i32)RetVal;
10007674:	e0bff50f 	ldh	r2,-44(fp)
}
10007678:	e037883a 	mov	sp,fp
1000767c:	dfc00117 	ldw	ra,4(sp)
10007680:	df000017 	ldw	fp,0(sp)
10007684:	dec00204 	addi	sp,sp,8
10007688:	f800283a 	ret

1000768c <sl_FsClose>:
    sizeof(_FsCloseResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_FsClose)
_i16 sl_FsClose(_i32 FileHdl, _u8*  pCeritificateFileName,_u8*  pSignature ,_u32 SignatureLen)
{
1000768c:	defff204 	addi	sp,sp,-56
10007690:	dfc00d15 	stw	ra,52(sp)
10007694:	df000c15 	stw	fp,48(sp)
10007698:	df000c04 	addi	fp,sp,48
1000769c:	e13ffc15 	stw	r4,-16(fp)
100076a0:	e17ffd15 	stw	r5,-12(fp)
100076a4:	e1bffe15 	stw	r6,-8(fp)
100076a8:	e1ffff15 	stw	r7,-4(fp)
    _SlFsCloseMsg_u Msg = {0};
100076ac:	e03ff515 	stw	zero,-44(fp)
100076b0:	e03ff615 	stw	zero,-40(fp)
100076b4:	e03ff715 	stw	zero,-36(fp)
    _SlCmdExt_t         ExtCtrl;
    
    Msg.Cmd.FileHandle             = FileHdl;
100076b8:	e0bffc17 	ldw	r2,-16(fp)
100076bc:	e0bff515 	stw	r2,-44(fp)
    if( pCeritificateFileName != NULL )
100076c0:	e0bffd17 	ldw	r2,-12(fp)
100076c4:	10000826 	beq	r2,zero,100076e8 <sl_FsClose+0x5c>
    {
        Msg.Cmd.CertificFileNameLength = (_sl_Strlen(pCeritificateFileName)+4) & (~3); /* add 4: 1 for NULL and the 3 for align */
100076c8:	e13ffd17 	ldw	r4,-12(fp)
100076cc:	00074180 	call	10007418 <_sl_Strlen>
100076d0:	10bfffcc 	andi	r2,r2,65535
100076d4:	10800104 	addi	r2,r2,4
100076d8:	1007883a 	mov	r3,r2
100076dc:	00bfff04 	movi	r2,-4
100076e0:	1884703a 	and	r2,r3,r2
100076e4:	e0bff615 	stw	r2,-40(fp)
    }
    Msg.Cmd.SignatureLen           = SignatureLen;
100076e8:	e0bfff17 	ldw	r2,-4(fp)
100076ec:	e0bff715 	stw	r2,-36(fp)
    
    ExtCtrl.TxPayloadLen = ((SignatureLen+3) & (~3)); /* align */
100076f0:	e0bfff17 	ldw	r2,-4(fp)
100076f4:	108000c4 	addi	r2,r2,3
100076f8:	1007883a 	mov	r3,r2
100076fc:	00bfff04 	movi	r2,-4
10007700:	1884703a 	and	r2,r3,r2
10007704:	e0bff80d 	sth	r2,-32(fp)
    ExtCtrl.pTxPayload   = pSignature;
10007708:	e0bffe17 	ldw	r2,-8(fp)
1000770c:	e0bffa15 	stw	r2,-24(fp)
    ExtCtrl.RxPayloadLen = (_u16)Msg.Cmd.CertificFileNameLength;
10007710:	e0bff617 	ldw	r2,-40(fp)
10007714:	e0bff88d 	sth	r2,-30(fp)
    ExtCtrl.pRxPayload   = pCeritificateFileName; /* Add signature */
10007718:	e0bffd17 	ldw	r2,-12(fp)
1000771c:	e0bffb15 	stw	r2,-20(fp)
    
    if(ExtCtrl.pRxPayload != NULL &&  ExtCtrl.RxPayloadLen != 0)
10007720:	e0bffb17 	ldw	r2,-20(fp)
10007724:	10000826 	beq	r2,zero,10007748 <sl_FsClose+0xbc>
10007728:	e0bff88b 	ldhu	r2,-30(fp)
1000772c:	10bfffcc 	andi	r2,r2,65535
10007730:	10000526 	beq	r2,zero,10007748 <sl_FsClose+0xbc>
    {
        g_pCB->RelayFlagsViaRxPayload = TRUE;
10007734:	008400f4 	movhi	r2,4099
10007738:	10a48204 	addi	r2,r2,-28152
1000773c:	10800017 	ldw	r2,0(r2)
10007740:	00c00044 	movi	r3,1
10007744:	10c026c5 	stb	r3,155(r2)
    }

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsCloseCmdCtrl, &Msg, &ExtCtrl));
10007748:	e0fff504 	addi	r3,fp,-44
1000774c:	e0bff804 	addi	r2,fp,-32
10007750:	d1200e04 	addi	r4,gp,-32712
10007754:	180b883a 	mov	r5,r3
10007758:	100d883a 	mov	r6,r2
1000775c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007760:	e0bff40d 	sth	r2,-48(fp)
10007764:	e0bff40f 	ldh	r2,-48(fp)
10007768:	10000126 	beq	r2,zero,10007770 <sl_FsClose+0xe4>
1000776c:	003fff06 	br	1000776c <__alt_data_end+0xf000776c>

    return (_i16)((_i16)Msg.Rsp.status);
10007770:	e0bff50b 	ldhu	r2,-44(fp)
}
10007774:	e037883a 	mov	sp,fp
10007778:	dfc00117 	ldw	ra,4(sp)
1000777c:	df000017 	ldw	fp,0(sp)
10007780:	dec00204 	addi	sp,sp,8
10007784:	f800283a 	ret

10007788 <sl_FsRead>:
};

 
#if _SL_INCLUDE_FUNC(sl_FsRead)
_i32 sl_FsRead(_i32 FileHdl, _u32 Offset, _u8*  pData, _u32 Len)
{
10007788:	defff004 	addi	sp,sp,-64
1000778c:	dfc00f15 	stw	ra,60(sp)
10007790:	df000e15 	stw	fp,56(sp)
10007794:	df000e04 	addi	fp,sp,56
10007798:	e13ffc15 	stw	r4,-16(fp)
1000779c:	e17ffd15 	stw	r5,-12(fp)
100077a0:	e1bffe15 	stw	r6,-8(fp)
100077a4:	e1ffff15 	stw	r7,-4(fp)
    _SlFsReadMsg_u      Msg;
    _SlCmdExt_t         ExtCtrl;
    _u16      ChunkLen;
    _SlReturnVal_t      RetVal =0;
100077a8:	e03ff40d 	sth	zero,-48(fp)
    _i32                RetCount = 0;
100077ac:	e03ff315 	stw	zero,-52(fp)

    ExtCtrl.TxPayloadLen = 0;
100077b0:	e03ff80d 	sth	zero,-32(fp)
    ExtCtrl.pTxPayload   = NULL;
100077b4:	e03ffa15 	stw	zero,-24(fp)

    ChunkLen = (_u16)sl_min(MAX_NVMEM_CHUNK_SIZE,Len);
100077b8:	e0bfff17 	ldw	r2,-4(fp)
100077bc:	10816d68 	cmpgeui	r2,r2,1461
100077c0:	1000021e 	bne	r2,zero,100077cc <sl_FsRead+0x44>
100077c4:	e0bfff17 	ldw	r2,-4(fp)
100077c8:	00000106 	br	100077d0 <sl_FsRead+0x48>
100077cc:	00816d04 	movi	r2,1460
100077d0:	e0bff20d 	sth	r2,-56(fp)
    ExtCtrl.RxPayloadLen = ChunkLen;
100077d4:	e0bff20b 	ldhu	r2,-56(fp)
100077d8:	e0bff88d 	sth	r2,-30(fp)
    ExtCtrl.pRxPayload   = (_u8 *)(pData);
100077dc:	e0bffe17 	ldw	r2,-8(fp)
100077e0:	e0bffb15 	stw	r2,-20(fp)
    Msg.Cmd.Offset       = Offset;
100077e4:	e0bffd17 	ldw	r2,-12(fp)
100077e8:	e0bff615 	stw	r2,-40(fp)
    Msg.Cmd.Len          = ChunkLen;
100077ec:	e0bff20b 	ldhu	r2,-56(fp)
100077f0:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.FileHandle   = FileHdl;
100077f4:	e0bffc17 	ldw	r2,-16(fp)
100077f8:	e0bff515 	stw	r2,-44(fp)
    do
    {
        RetVal = _SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsReadCmdCtrl, &Msg, &ExtCtrl);
100077fc:	e0fff504 	addi	r3,fp,-44
10007800:	e0bff804 	addi	r2,fp,-32
10007804:	d1200f04 	addi	r4,gp,-32708
10007808:	180b883a 	mov	r5,r3
1000780c:	100d883a 	mov	r6,r2
10007810:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007814:	e0bff40d 	sth	r2,-48(fp)
        if(SL_OS_RET_CODE_OK == RetVal)
10007818:	e0bff40f 	ldh	r2,-48(fp)
1000781c:	1000311e 	bne	r2,zero,100078e4 <sl_FsRead+0x15c>
        {
            if( Msg.Rsp.status < 0)
10007820:	e0bff50b 	ldhu	r2,-44(fp)
10007824:	10bfffcc 	andi	r2,r2,65535
10007828:	10a0001c 	xori	r2,r2,32768
1000782c:	10a00004 	addi	r2,r2,-32768
10007830:	1000090e 	bge	r2,zero,10007858 <sl_FsRead+0xd0>
            {
                if( RetCount > 0)
10007834:	e0bff317 	ldw	r2,-52(fp)
10007838:	0080020e 	bge	zero,r2,10007844 <sl_FsRead+0xbc>
                {
                   return RetCount;
1000783c:	e0bff317 	ldw	r2,-52(fp)
10007840:	00002d06 	br	100078f8 <sl_FsRead+0x170>
                }
                else
                {
                   return Msg.Rsp.status;
10007844:	e0bff50b 	ldhu	r2,-44(fp)
10007848:	10bfffcc 	andi	r2,r2,65535
1000784c:	10a0001c 	xori	r2,r2,32768
10007850:	10a00004 	addi	r2,r2,-32768
10007854:	00002806 	br	100078f8 <sl_FsRead+0x170>
                }
            }
            RetCount += (_i32)Msg.Rsp.status;
10007858:	e0bff50b 	ldhu	r2,-44(fp)
1000785c:	10bfffcc 	andi	r2,r2,65535
10007860:	10a0001c 	xori	r2,r2,32768
10007864:	10a00004 	addi	r2,r2,-32768
10007868:	e0fff317 	ldw	r3,-52(fp)
1000786c:	1885883a 	add	r2,r3,r2
10007870:	e0bff315 	stw	r2,-52(fp)
            Len -= ChunkLen;
10007874:	e0bff20b 	ldhu	r2,-56(fp)
10007878:	e0ffff17 	ldw	r3,-4(fp)
1000787c:	1885c83a 	sub	r2,r3,r2
10007880:	e0bfff15 	stw	r2,-4(fp)
            Offset += ChunkLen;
10007884:	e0bff20b 	ldhu	r2,-56(fp)
10007888:	e0fffd17 	ldw	r3,-12(fp)
1000788c:	1885883a 	add	r2,r3,r2
10007890:	e0bffd15 	stw	r2,-12(fp)
            Msg.Cmd.Offset      = Offset;
10007894:	e0bffd17 	ldw	r2,-12(fp)
10007898:	e0bff615 	stw	r2,-40(fp)
            ExtCtrl.pRxPayload   += ChunkLen;
1000789c:	e0fffb17 	ldw	r3,-20(fp)
100078a0:	e0bff20b 	ldhu	r2,-56(fp)
100078a4:	1885883a 	add	r2,r3,r2
100078a8:	e0bffb15 	stw	r2,-20(fp)
            ChunkLen = (_u16)sl_min(MAX_NVMEM_CHUNK_SIZE,Len);
100078ac:	e0bfff17 	ldw	r2,-4(fp)
100078b0:	10816d68 	cmpgeui	r2,r2,1461
100078b4:	1000021e 	bne	r2,zero,100078c0 <sl_FsRead+0x138>
100078b8:	e0bfff17 	ldw	r2,-4(fp)
100078bc:	00000106 	br	100078c4 <sl_FsRead+0x13c>
100078c0:	00816d04 	movi	r2,1460
100078c4:	e0bff20d 	sth	r2,-56(fp)
            ExtCtrl.RxPayloadLen  = ChunkLen;
100078c8:	e0bff20b 	ldhu	r2,-56(fp)
100078cc:	e0bff88d 	sth	r2,-30(fp)
            Msg.Cmd.Len           = ChunkLen;
100078d0:	e0bff20b 	ldhu	r2,-56(fp)
100078d4:	e0bff70d 	sth	r2,-36(fp)
            Msg.Cmd.FileHandle  = FileHdl;
100078d8:	e0bffc17 	ldw	r2,-16(fp)
100078dc:	e0bff515 	stw	r2,-44(fp)
100078e0:	00000206 	br	100078ec <sl_FsRead+0x164>
        }
        else
        {
            return RetVal;
100078e4:	e0bff40f 	ldh	r2,-48(fp)
100078e8:	00000306 	br	100078f8 <sl_FsRead+0x170>
        }
    }while(ChunkLen > 0);
100078ec:	e0bff20b 	ldhu	r2,-56(fp)
100078f0:	103fc21e 	bne	r2,zero,100077fc <__alt_data_end+0xf00077fc>

    return (_i32)RetCount;
100078f4:	e0bff317 	ldw	r2,-52(fp)
}
100078f8:	e037883a 	mov	sp,fp
100078fc:	dfc00117 	ldw	ra,4(sp)
10007900:	df000017 	ldw	fp,0(sp)
10007904:	dec00204 	addi	sp,sp,8
10007908:	f800283a 	ret

1000790c <sl_FsWrite>:
};


#if _SL_INCLUDE_FUNC(sl_FsWrite)
_i32 sl_FsWrite(_i32 FileHdl, _u32 Offset, _u8*  pData, _u32 Len)
{
1000790c:	defff004 	addi	sp,sp,-64
10007910:	dfc00f15 	stw	ra,60(sp)
10007914:	df000e15 	stw	fp,56(sp)
10007918:	df000e04 	addi	fp,sp,56
1000791c:	e13ffc15 	stw	r4,-16(fp)
10007920:	e17ffd15 	stw	r5,-12(fp)
10007924:	e1bffe15 	stw	r6,-8(fp)
10007928:	e1ffff15 	stw	r7,-4(fp)
    _SlFsWriteMsg_u     Msg;
    _SlCmdExt_t         ExtCtrl;
    _u16      ChunkLen;
    _SlReturnVal_t      RetVal;
    _i32                RetCount = 0;
1000792c:	e03ff315 	stw	zero,-52(fp)

    ExtCtrl.RxPayloadLen = 0;
10007930:	e03ff88d 	sth	zero,-30(fp)
    ExtCtrl.pRxPayload   = NULL;
10007934:	e03ffb15 	stw	zero,-20(fp)

    ChunkLen = (_u16)sl_min(MAX_NVMEM_CHUNK_SIZE,Len);
10007938:	e0bfff17 	ldw	r2,-4(fp)
1000793c:	10816d68 	cmpgeui	r2,r2,1461
10007940:	1000021e 	bne	r2,zero,1000794c <sl_FsWrite+0x40>
10007944:	e0bfff17 	ldw	r2,-4(fp)
10007948:	00000106 	br	10007950 <sl_FsWrite+0x44>
1000794c:	00816d04 	movi	r2,1460
10007950:	e0bff20d 	sth	r2,-56(fp)
    ExtCtrl.TxPayloadLen = ChunkLen;
10007954:	e0bff20b 	ldhu	r2,-56(fp)
10007958:	e0bff80d 	sth	r2,-32(fp)
    ExtCtrl.pTxPayload   = (_u8 *)(pData);
1000795c:	e0bffe17 	ldw	r2,-8(fp)
10007960:	e0bffa15 	stw	r2,-24(fp)
    Msg.Cmd.Offset      = Offset;
10007964:	e0bffd17 	ldw	r2,-12(fp)
10007968:	e0bff615 	stw	r2,-40(fp)
    Msg.Cmd.Len          = ChunkLen;
1000796c:	e0bff20b 	ldhu	r2,-56(fp)
10007970:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.FileHandle  = FileHdl;
10007974:	e0bffc17 	ldw	r2,-16(fp)
10007978:	e0bff515 	stw	r2,-44(fp)

    do
    {
    
        RetVal = _SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsWriteCmdCtrl, &Msg, &ExtCtrl);
1000797c:	e0fff504 	addi	r3,fp,-44
10007980:	e0bff804 	addi	r2,fp,-32
10007984:	d1201004 	addi	r4,gp,-32704
10007988:	180b883a 	mov	r5,r3
1000798c:	100d883a 	mov	r6,r2
10007990:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007994:	e0bff40d 	sth	r2,-48(fp)
        if(SL_OS_RET_CODE_OK == RetVal)
10007998:	e0bff40f 	ldh	r2,-48(fp)
1000799c:	1000311e 	bne	r2,zero,10007a64 <sl_FsWrite+0x158>
        {
            if( Msg.Rsp.status < 0)
100079a0:	e0bff50b 	ldhu	r2,-44(fp)
100079a4:	10bfffcc 	andi	r2,r2,65535
100079a8:	10a0001c 	xori	r2,r2,32768
100079ac:	10a00004 	addi	r2,r2,-32768
100079b0:	1000090e 	bge	r2,zero,100079d8 <sl_FsWrite+0xcc>
            {
                if( RetCount > 0)
100079b4:	e0bff317 	ldw	r2,-52(fp)
100079b8:	0080020e 	bge	zero,r2,100079c4 <sl_FsWrite+0xb8>
                {
                   return RetCount;
100079bc:	e0bff317 	ldw	r2,-52(fp)
100079c0:	00002d06 	br	10007a78 <sl_FsWrite+0x16c>
                }
                else
                {
                   return Msg.Rsp.status;
100079c4:	e0bff50b 	ldhu	r2,-44(fp)
100079c8:	10bfffcc 	andi	r2,r2,65535
100079cc:	10a0001c 	xori	r2,r2,32768
100079d0:	10a00004 	addi	r2,r2,-32768
100079d4:	00002806 	br	10007a78 <sl_FsWrite+0x16c>
                }
            }

            RetCount += (_i32)Msg.Rsp.status;
100079d8:	e0bff50b 	ldhu	r2,-44(fp)
100079dc:	10bfffcc 	andi	r2,r2,65535
100079e0:	10a0001c 	xori	r2,r2,32768
100079e4:	10a00004 	addi	r2,r2,-32768
100079e8:	e0fff317 	ldw	r3,-52(fp)
100079ec:	1885883a 	add	r2,r3,r2
100079f0:	e0bff315 	stw	r2,-52(fp)
            Len -= ChunkLen;
100079f4:	e0bff20b 	ldhu	r2,-56(fp)
100079f8:	e0ffff17 	ldw	r3,-4(fp)
100079fc:	1885c83a 	sub	r2,r3,r2
10007a00:	e0bfff15 	stw	r2,-4(fp)
            Offset += ChunkLen;
10007a04:	e0bff20b 	ldhu	r2,-56(fp)
10007a08:	e0fffd17 	ldw	r3,-12(fp)
10007a0c:	1885883a 	add	r2,r3,r2
10007a10:	e0bffd15 	stw	r2,-12(fp)
            Msg.Cmd.Offset        = Offset;
10007a14:	e0bffd17 	ldw	r2,-12(fp)
10007a18:	e0bff615 	stw	r2,-40(fp)
            ExtCtrl.pTxPayload   += ChunkLen;
10007a1c:	e0fffa17 	ldw	r3,-24(fp)
10007a20:	e0bff20b 	ldhu	r2,-56(fp)
10007a24:	1885883a 	add	r2,r3,r2
10007a28:	e0bffa15 	stw	r2,-24(fp)
            ChunkLen = (_u16)sl_min(MAX_NVMEM_CHUNK_SIZE,Len);
10007a2c:	e0bfff17 	ldw	r2,-4(fp)
10007a30:	10816d68 	cmpgeui	r2,r2,1461
10007a34:	1000021e 	bne	r2,zero,10007a40 <sl_FsWrite+0x134>
10007a38:	e0bfff17 	ldw	r2,-4(fp)
10007a3c:	00000106 	br	10007a44 <sl_FsWrite+0x138>
10007a40:	00816d04 	movi	r2,1460
10007a44:	e0bff20d 	sth	r2,-56(fp)
            ExtCtrl.TxPayloadLen  = ChunkLen;
10007a48:	e0bff20b 	ldhu	r2,-56(fp)
10007a4c:	e0bff80d 	sth	r2,-32(fp)
            Msg.Cmd.Len           = ChunkLen;
10007a50:	e0bff20b 	ldhu	r2,-56(fp)
10007a54:	e0bff70d 	sth	r2,-36(fp)
            Msg.Cmd.FileHandle  = FileHdl;
10007a58:	e0bffc17 	ldw	r2,-16(fp)
10007a5c:	e0bff515 	stw	r2,-44(fp)
10007a60:	00000206 	br	10007a6c <sl_FsWrite+0x160>
        }
        else
        {
            return RetVal;
10007a64:	e0bff40f 	ldh	r2,-48(fp)
10007a68:	00000306 	br	10007a78 <sl_FsWrite+0x16c>
        }
    }while(ChunkLen > 0);
10007a6c:	e0bff20b 	ldhu	r2,-56(fp)
10007a70:	103fc21e 	bne	r2,zero,1000797c <__alt_data_end+0xf000797c>

    return (_i32)RetCount;
10007a74:	e0bff317 	ldw	r2,-52(fp)
}
10007a78:	e037883a 	mov	sp,fp
10007a7c:	dfc00117 	ldw	ra,4(sp)
10007a80:	df000017 	ldw	fp,0(sp)
10007a84:	dec00204 	addi	sp,sp,8
10007a88:	f800283a 	ret

10007a8c <sl_FsGetInfo>:
    sizeof(_FsGetInfoResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_FsGetInfo)
_i16 sl_FsGetInfo(_u8 *pFileName,_u32 Token,SlFsFileInfo_t* pFsFileInfo)
{
10007a8c:	deffef04 	addi	sp,sp,-68
10007a90:	dfc01015 	stw	ra,64(sp)
10007a94:	df000f15 	stw	fp,60(sp)
10007a98:	df000f04 	addi	fp,sp,60
10007a9c:	e13ffd15 	stw	r4,-12(fp)
10007aa0:	e17ffe15 	stw	r5,-8(fp)
10007aa4:	e1bfff15 	stw	r6,-4(fp)
    _SlFsGetInfoMsg_u    Msg;
    _SlCmdExt_t          CmdExt;

    CmdExt.TxPayloadLen = (_sl_Strlen(pFileName)+4) & (~3); /* add 4: 1 for NULL and the 3 for align  */
10007aa8:	e13ffd17 	ldw	r4,-12(fp)
10007aac:	00074180 	call	10007418 <_sl_Strlen>
10007ab0:	10800104 	addi	r2,r2,4
10007ab4:	1007883a 	mov	r3,r2
10007ab8:	00bfff04 	movi	r2,-4
10007abc:	1884703a 	and	r2,r3,r2
10007ac0:	e0bff90d 	sth	r2,-28(fp)
    CmdExt.RxPayloadLen = 0;
10007ac4:	e03ff98d 	sth	zero,-26(fp)
    CmdExt.pTxPayload   = pFileName;
10007ac8:	e0bffd17 	ldw	r2,-12(fp)
10007acc:	e0bffb15 	stw	r2,-20(fp)
    CmdExt.pRxPayload   = NULL;
10007ad0:	e03ffc15 	stw	zero,-16(fp)
    Msg.Cmd.Token       = Token;
10007ad4:	e0bffe17 	ldw	r2,-8(fp)
10007ad8:	e0bff215 	stw	r2,-56(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsGetInfoCmdCtrl, &Msg, &CmdExt));
10007adc:	e0fff204 	addi	r3,fp,-56
10007ae0:	e0bff904 	addi	r2,fp,-28
10007ae4:	d1201104 	addi	r4,gp,-32700
10007ae8:	180b883a 	mov	r5,r3
10007aec:	100d883a 	mov	r6,r2
10007af0:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007af4:	e0bff10d 	sth	r2,-60(fp)
10007af8:	e0bff10f 	ldh	r2,-60(fp)
10007afc:	10000126 	beq	r2,zero,10007b04 <sl_FsGetInfo+0x78>
10007b00:	003fff06 	br	10007b00 <__alt_data_end+0xf0007b00>

    pFsFileInfo->flags        = Msg.Rsp.flags;
10007b04:	e0fff28b 	ldhu	r3,-54(fp)
10007b08:	e0bfff17 	ldw	r2,-4(fp)
10007b0c:	10c0000d 	sth	r3,0(r2)
    pFsFileInfo->FileLen      = Msg.Rsp.FileLen;
10007b10:	e0fff317 	ldw	r3,-52(fp)
10007b14:	e0bfff17 	ldw	r2,-4(fp)
10007b18:	10c00115 	stw	r3,4(r2)
    pFsFileInfo->AllocatedLen = Msg.Rsp.AllocatedLen;
10007b1c:	e0fff417 	ldw	r3,-48(fp)
10007b20:	e0bfff17 	ldw	r2,-4(fp)
10007b24:	10c00215 	stw	r3,8(r2)
    pFsFileInfo->Token[0]     = Msg.Rsp.Token[0];
10007b28:	e0fff517 	ldw	r3,-44(fp)
10007b2c:	e0bfff17 	ldw	r2,-4(fp)
10007b30:	10c00315 	stw	r3,12(r2)
    pFsFileInfo->Token[1]     = Msg.Rsp.Token[1];
10007b34:	e0fff617 	ldw	r3,-40(fp)
10007b38:	e0bfff17 	ldw	r2,-4(fp)
10007b3c:	10c00415 	stw	r3,16(r2)
    pFsFileInfo->Token[2]     = Msg.Rsp.Token[2];
10007b40:	e0fff717 	ldw	r3,-36(fp)
10007b44:	e0bfff17 	ldw	r2,-4(fp)
10007b48:	10c00515 	stw	r3,20(r2)
    pFsFileInfo->Token[3]     = Msg.Rsp.Token[3];
10007b4c:	e0fff817 	ldw	r3,-32(fp)
10007b50:	e0bfff17 	ldw	r2,-4(fp)
10007b54:	10c00615 	stw	r3,24(r2)
    return  (_i16)((_i16)Msg.Rsp.Status);
10007b58:	e0bff20b 	ldhu	r2,-56(fp)
}
10007b5c:	e037883a 	mov	sp,fp
10007b60:	dfc00117 	ldw	ra,4(sp)
10007b64:	df000017 	ldw	fp,0(sp)
10007b68:	dec00204 	addi	sp,sp,8
10007b6c:	f800283a 	ret

10007b70 <sl_FsDel>:
    sizeof(_FsDeleteResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_FsDel)
_i16 sl_FsDel(_u8 *pFileName,_u32 Token)
{
10007b70:	defff604 	addi	sp,sp,-40
10007b74:	dfc00915 	stw	ra,36(sp)
10007b78:	df000815 	stw	fp,32(sp)
10007b7c:	df000804 	addi	fp,sp,32
10007b80:	e13ffe15 	stw	r4,-8(fp)
10007b84:	e17fff15 	stw	r5,-4(fp)
    _SlFsDeleteMsg_u Msg;
    _SlCmdExt_t          CmdExt;

    CmdExt.TxPayloadLen = (_sl_Strlen(pFileName)+4) & (~3); /* add 4: 1 for NULL and the 3 for align */
10007b88:	e13ffe17 	ldw	r4,-8(fp)
10007b8c:	00074180 	call	10007418 <_sl_Strlen>
10007b90:	10800104 	addi	r2,r2,4
10007b94:	1007883a 	mov	r3,r2
10007b98:	00bfff04 	movi	r2,-4
10007b9c:	1884703a 	and	r2,r3,r2
10007ba0:	e0bffa0d 	sth	r2,-24(fp)
    CmdExt.RxPayloadLen = 0;
10007ba4:	e03ffa8d 	sth	zero,-22(fp)
    CmdExt.pTxPayload   = pFileName;
10007ba8:	e0bffe17 	ldw	r2,-8(fp)
10007bac:	e0bffc15 	stw	r2,-16(fp)
    CmdExt.pRxPayload   = NULL;
10007bb0:	e03ffd15 	stw	zero,-12(fp)
    Msg.Cmd.Token       = Token;
10007bb4:	e0bfff17 	ldw	r2,-4(fp)
10007bb8:	e0bff915 	stw	r2,-28(fp)


    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlFsDeleteCmdCtrl, &Msg, &CmdExt));
10007bbc:	e0fff904 	addi	r3,fp,-28
10007bc0:	e0bffa04 	addi	r2,fp,-24
10007bc4:	d1201204 	addi	r4,gp,-32696
10007bc8:	180b883a 	mov	r5,r3
10007bcc:	100d883a 	mov	r6,r2
10007bd0:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007bd4:	e0bff80d 	sth	r2,-32(fp)
10007bd8:	e0bff80f 	ldh	r2,-32(fp)
10007bdc:	10000126 	beq	r2,zero,10007be4 <sl_FsDel+0x74>
10007be0:	003fff06 	br	10007be0 <__alt_data_end+0xf0007be0>

    return  (_i16)((_i16)Msg.Rsp.status);
10007be4:	e0bff90b 	ldhu	r2,-28(fp)
}
10007be8:	e037883a 	mov	sp,fp
10007bec:	dfc00117 	ldw	ra,4(sp)
10007bf0:	df000017 	ldw	fp,0(sp)
10007bf4:	dec00204 	addi	sp,sp,8
10007bf8:	f800283a 	ret

10007bfc <sl_NetAppStart>:
    sizeof(_NetAppStartStopResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_NetAppStart)
_i16 sl_NetAppStart(_u32 AppBitMap)
{
10007bfc:	defffb04 	addi	sp,sp,-20
10007c00:	dfc00415 	stw	ra,16(sp)
10007c04:	df000315 	stw	fp,12(sp)
10007c08:	df000304 	addi	fp,sp,12
10007c0c:	e13fff15 	stw	r4,-4(fp)
    _SlNetAppStartStopMsg_u Msg;
    Msg.Cmd.appId = AppBitMap;
10007c10:	e0bfff17 	ldw	r2,-4(fp)
10007c14:	e0bffe15 	stw	r2,-8(fp)
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetAppStartCtrl, &Msg, NULL));
10007c18:	e0bffe04 	addi	r2,fp,-8
10007c1c:	d1201304 	addi	r4,gp,-32692
10007c20:	100b883a 	mov	r5,r2
10007c24:	000d883a 	mov	r6,zero
10007c28:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007c2c:	e0bffd0d 	sth	r2,-12(fp)
10007c30:	e0bffd0f 	ldh	r2,-12(fp)
10007c34:	10000126 	beq	r2,zero,10007c3c <sl_NetAppStart+0x40>
10007c38:	003fff06 	br	10007c38 <__alt_data_end+0xf0007c38>

    return Msg.Rsp.status;
10007c3c:	e0bffe0b 	ldhu	r2,-8(fp)
}
10007c40:	e037883a 	mov	sp,fp
10007c44:	dfc00117 	ldw	ra,4(sp)
10007c48:	df000017 	ldw	fp,0(sp)
10007c4c:	dec00204 	addi	sp,sp,8
10007c50:	f800283a 	ret

10007c54 <sl_NetAppStop>:
/*****************************************************************************
 sl_NetAppStop
*****************************************************************************/
#if _SL_INCLUDE_FUNC(sl_NetAppStop)
_i16 sl_NetAppStop(_u32 AppBitMap)
{
10007c54:	defffb04 	addi	sp,sp,-20
10007c58:	dfc00415 	stw	ra,16(sp)
10007c5c:	df000315 	stw	fp,12(sp)
10007c60:	df000304 	addi	fp,sp,12
10007c64:	e13fff15 	stw	r4,-4(fp)
    _SlNetAppStartStopMsg_u Msg;
    Msg.Cmd.appId = AppBitMap;
10007c68:	e0bfff17 	ldw	r2,-4(fp)
10007c6c:	e0bffe15 	stw	r2,-8(fp)
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetAppStopCtrl, &Msg, NULL));
10007c70:	e0bffe04 	addi	r2,fp,-8
10007c74:	d1201404 	addi	r4,gp,-32688
10007c78:	100b883a 	mov	r5,r2
10007c7c:	000d883a 	mov	r6,zero
10007c80:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007c84:	e0bffd0d 	sth	r2,-12(fp)
10007c88:	e0bffd0f 	ldh	r2,-12(fp)
10007c8c:	10000126 	beq	r2,zero,10007c94 <sl_NetAppStop+0x40>
10007c90:	003fff06 	br	10007c90 <__alt_data_end+0xf0007c90>

    return Msg.Rsp.status;
10007c94:	e0bffe0b 	ldhu	r2,-8(fp)
}
10007c98:	e037883a 	mov	sp,fp
10007c9c:	dfc00117 	ldw	ra,4(sp)
10007ca0:	df000017 	ldw	fp,0(sp)
10007ca4:	dec00204 	addi	sp,sp,8
10007ca8:	f800283a 	ret

10007cac <sl_NetAppGetServiceList>:
						    _u8  MaxServiceCount,
							_u8  Flags,
						 _i8           *pBuffer,
							_u32  RxBufferLength
							)
{
10007cac:	defff204 	addi	sp,sp,-56
10007cb0:	dfc00d15 	stw	ra,52(sp)
10007cb4:	df000c15 	stw	fp,48(sp)
10007cb8:	df000c04 	addi	fp,sp,48
10007cbc:	2807883a 	mov	r3,r5
10007cc0:	3005883a 	mov	r2,r6
10007cc4:	e1ffff15 	stw	r7,-4(fp)
10007cc8:	e13ffc05 	stb	r4,-16(fp)
10007ccc:	e0fffd05 	stb	r3,-12(fp)
10007cd0:	e0bffe05 	stb	r2,-8(fp)

    _i32 					 retVal= 0;
10007cd4:	e03ff515 	stw	zero,-44(fp)
    _SlNetappGetServiceListMsg_u Msg;
    _SlCmdExt_t                  CmdExt;
	_u16               ServiceSize = 0;
10007cd8:	e03ff40d 	sth	zero,-48(fp)
	_u16               BufferSize = 0;
10007cdc:	e03ff60d 	sth	zero,-40(fp)
	Calculate RX pBuffer size
    WARNING:
    if this size is BufferSize than 1480 error should be returned because there
    is no place in the RX packet.
    */
    switch(Flags)
10007ce0:	e0bffe03 	ldbu	r2,-8(fp)
10007ce4:	10c000a0 	cmpeqi	r3,r2,2
10007ce8:	1800071e 	bne	r3,zero,10007d08 <sl_NetAppGetServiceList+0x5c>
10007cec:	10c000e0 	cmpeqi	r3,r2,3
10007cf0:	1800081e 	bne	r3,zero,10007d14 <sl_NetAppGetServiceList+0x68>
10007cf4:	10800060 	cmpeqi	r2,r2,1
10007cf8:	10000926 	beq	r2,zero,10007d20 <sl_NetAppGetServiceList+0x74>
    {
        case SL_NET_APP_FULL_SERVICE_WITH_TEXT_IPV4_TYPE:
            ServiceSize =  sizeof(SlNetAppGetFullServiceWithTextIpv4List_t);
10007cfc:	00806104 	movi	r2,388
10007d00:	e0bff40d 	sth	r2,-48(fp)
            break;
10007d04:	00000906 	br	10007d2c <sl_NetAppGetServiceList+0x80>

        case SL_NET_APP_FULL_SERVICE_IPV4_TYPE:
            ServiceSize =  sizeof(SlNetAppGetFullServiceIpv4List_t);
10007d08:	00802104 	movi	r2,132
10007d0c:	e0bff40d 	sth	r2,-48(fp)
            break;
10007d10:	00000606 	br	10007d2c <sl_NetAppGetServiceList+0x80>

        case SL_NET_APP_SHORT_SERVICE_IPV4_TYPE:
            ServiceSize =  sizeof(SlNetAppGetShortServiceIpv4List_t);
10007d14:	00800204 	movi	r2,8
10007d18:	e0bff40d 	sth	r2,-48(fp)
            break;
10007d1c:	00000306 	br	10007d2c <sl_NetAppGetServiceList+0x80>

        default:
			ServiceSize =  sizeof(_BasicResponse_t);
10007d20:	00800104 	movi	r2,4
10007d24:	e0bff40d 	sth	r2,-48(fp)
			break;
10007d28:	0001883a 	nop
    }



	BufferSize =  MaxServiceCount * ServiceSize;
10007d2c:	e0fffd03 	ldbu	r3,-12(fp)
10007d30:	e0bff40b 	ldhu	r2,-48(fp)
10007d34:	1885383a 	mul	r2,r3,r2
10007d38:	e0bff60d 	sth	r2,-40(fp)

	/*Check the size of the requested services is smaller than size of the user buffer.
	  If not an error is returned in order to avoid overwriting memory. */
	if(RxBufferLength <= BufferSize)
10007d3c:	e0fff60b 	ldhu	r3,-40(fp)
10007d40:	e0800217 	ldw	r2,8(fp)
10007d44:	18800236 	bltu	r3,r2,10007d50 <sl_NetAppGetServiceList+0xa4>
	{
		return SL_ERROR_NETAPP_RX_BUFFER_LENGTH_ERROR;
10007d48:	00bfc684 	movi	r2,-230
10007d4c:	00001d06 	br	10007dc4 <sl_NetAppGetServiceList+0x118>
	}

	CmdExt.TxPayloadLen = 0;
10007d50:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = BufferSize;
10007d54:	e0bff60b 	ldhu	r2,-40(fp)
10007d58:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
10007d5c:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)pBuffer; 
10007d60:	e0bfff17 	ldw	r2,-4(fp)
10007d64:	e0bffb15 	stw	r2,-20(fp)

    Msg.Cmd.IndexOffest		= IndexOffest;
10007d68:	e0bffc03 	ldbu	r2,-16(fp)
10007d6c:	e0bff705 	stb	r2,-36(fp)
    Msg.Cmd.MaxServiceCount = MaxServiceCount;
10007d70:	e0bffd03 	ldbu	r2,-12(fp)
10007d74:	e0bff745 	stb	r2,-35(fp)
    Msg.Cmd.Flags			= Flags;
10007d78:	e0bffe03 	ldbu	r2,-8(fp)
10007d7c:	e0bff785 	stb	r2,-34(fp)
    Msg.Cmd.Padding			= 0;
10007d80:	e03ff7c5 	stb	zero,-33(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlGetServiceListeCtrl, &Msg, &CmdExt));
10007d84:	e0fff704 	addi	r3,fp,-36
10007d88:	e0bff804 	addi	r2,fp,-32
10007d8c:	d1201504 	addi	r4,gp,-32684
10007d90:	180b883a 	mov	r5,r3
10007d94:	100d883a 	mov	r6,r2
10007d98:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007d9c:	e0bff68d 	sth	r2,-38(fp)
10007da0:	e0bff68f 	ldh	r2,-38(fp)
10007da4:	10000126 	beq	r2,zero,10007dac <sl_NetAppGetServiceList+0x100>
10007da8:	003fff06 	br	10007da8 <__alt_data_end+0xf0007da8>
    retVal = Msg.Rsp.status;
10007dac:	e0bff70b 	ldhu	r2,-36(fp)
10007db0:	10bfffcc 	andi	r2,r2,65535
10007db4:	10a0001c 	xori	r2,r2,32768
10007db8:	10a00004 	addi	r2,r2,-32768
10007dbc:	e0bff515 	stw	r2,-44(fp)

    return (_i16)retVal;
10007dc0:	e0bff517 	ldw	r2,-44(fp)
}
10007dc4:	e037883a 	mov	sp,fp
10007dc8:	dfc00117 	ldw	ra,4(sp)
10007dcc:	df000017 	ldw	fp,0(sp)
10007dd0:	dec00204 	addi	sp,sp,8
10007dd4:	f800283a 	ret

10007dd8 <sl_NetAppMDNSRegisterUnregisterService>:
											_u8   TextLen,
											_u16  Port,
											_u32   TTL,
											_u32   Options)

{
10007dd8:	deffb004 	addi	sp,sp,-320
10007ddc:	dfc04f15 	stw	ra,316(sp)
10007de0:	df004e15 	stw	fp,312(sp)
10007de4:	df004e04 	addi	fp,sp,312
10007de8:	e13ffb15 	stw	r4,-20(fp)
10007dec:	2809883a 	mov	r4,r5
10007df0:	e1bffd15 	stw	r6,-12(fp)
10007df4:	3807883a 	mov	r3,r7
10007df8:	e0800217 	ldw	r2,8(fp)
10007dfc:	e13ffc05 	stb	r4,-16(fp)
10007e00:	e0fffe05 	stb	r3,-8(fp)
10007e04:	e0bfff0d 	sth	r2,-4(fp)
	*/

	/*build the attribute part of the command.
	  It contains the constant parameters of the command*/

	Msg.Cmd.ServiceNameLen	= ServiceNameLen;
10007e08:	e0bffc03 	ldbu	r2,-16(fp)
10007e0c:	e0bfb405 	stb	r2,-304(fp)
	Msg.Cmd.Options			= Options;
10007e10:	e0800417 	ldw	r2,16(fp)
10007e14:	e0bfb615 	stw	r2,-296(fp)
	Msg.Cmd.Port			= Port;
10007e18:	e0bfff0b 	ldhu	r2,-4(fp)
10007e1c:	e0bfb48d 	sth	r2,-302(fp)
	Msg.Cmd.TextLen			= TextLen;
10007e20:	e0bffe03 	ldbu	r2,-8(fp)
10007e24:	e0bfb445 	stb	r2,-303(fp)
	Msg.Cmd.TTL				= TTL;
10007e28:	e0800317 	ldw	r2,12(fp)
10007e2c:	e0bfb515 	stw	r2,-300(fp)
	/*Build the payload part of the command
	 Copy the service name and text to one buffer.
	 NOTE - pay attention
	 			The size of the service length + the text length should be smaller than 255,
	 			Until the simplelink drive supports to variable length through SPI command. */
	if(TextLen + ServiceNameLen > (NETAPP_MDNS_MAX_SERVICE_NAME_AND_TEXT_LENGTH - 1 )) /*-1 is for giving a place to set null termination at the end of the text*/
10007e30:	e0fffe03 	ldbu	r3,-8(fp)
10007e34:	e0bffc03 	ldbu	r2,-16(fp)
10007e38:	1885883a 	add	r2,r3,r2
10007e3c:	10803fd0 	cmplti	r2,r2,255
10007e40:	1000021e 	bne	r2,zero,10007e4c <sl_NetAppMDNSRegisterUnregisterService+0x74>
	{
		return -1;
10007e44:	00bfffc4 	movi	r2,-1
10007e48:	00002906 	br	10007ef0 <sl_NetAppMDNSRegisterUnregisterService+0x118>
	}

	sl_Memset(ServiceNameAndTextBuffer,0,NETAPP_MDNS_MAX_SERVICE_NAME_AND_TEXT_LENGTH);
10007e4c:	e0bfbb04 	addi	r2,fp,-276
10007e50:	1009883a 	mov	r4,r2
10007e54:	000b883a 	mov	r5,zero
10007e58:	01803fc4 	movi	r6,255
10007e5c:	000c8bc0 	call	1000c8bc <memset>

	
	/*Copy the service name*/
	sl_Memcpy(ServiceNameAndTextBuffer,
10007e60:	e0bffc03 	ldbu	r2,-16(fp)
10007e64:	e0ffbb04 	addi	r3,fp,-276
10007e68:	1809883a 	mov	r4,r3
10007e6c:	e17ffb17 	ldw	r5,-20(fp)
10007e70:	100d883a 	mov	r6,r2
10007e74:	000c7840 	call	1000c784 <memcpy>
		      pServiceName,   
			  ServiceNameLen);

	if(TextLen > 0 )
10007e78:	e0bffe03 	ldbu	r2,-8(fp)
10007e7c:	10000926 	beq	r2,zero,10007ea4 <sl_NetAppMDNSRegisterUnregisterService+0xcc>
	{
		
		TextPtr = &ServiceNameAndTextBuffer[ServiceNameLen];
10007e80:	e0bffc03 	ldbu	r2,-16(fp)
10007e84:	e0ffbb04 	addi	r3,fp,-276
10007e88:	1885883a 	add	r2,r3,r2
10007e8c:	e0bfb215 	stw	r2,-312(fp)
		/*Copy the text just after the service name*/
		sl_Memcpy(TextPtr,
10007e90:	e0bffe03 	ldbu	r2,-8(fp)
10007e94:	e13fb217 	ldw	r4,-312(fp)
10007e98:	e17ffd17 	ldw	r5,-12(fp)
10007e9c:	100d883a 	mov	r6,r2
10007ea0:	000c7840 	call	1000c784 <memcpy>
				  TextLen);

  
	}

	CmdExt.TxPayloadLen = (TextLen + ServiceNameLen);
10007ea4:	e0fffe03 	ldbu	r3,-8(fp)
10007ea8:	e0bffc03 	ldbu	r2,-16(fp)
10007eac:	1885883a 	add	r2,r3,r2
10007eb0:	e0bfb70d 	sth	r2,-292(fp)
    CmdExt.RxPayloadLen = 0;
10007eb4:	e03fb78d 	sth	zero,-290(fp)
    CmdExt.pTxPayload   = (_u8 *)ServiceNameAndTextBuffer;
10007eb8:	e0bfbb04 	addi	r2,fp,-276
10007ebc:	e0bfb915 	stw	r2,-284(fp)
    CmdExt.pRxPayload   = NULL;
10007ec0:	e03fba15 	stw	zero,-280(fp)

	
	VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlRegisterServiceCtrl, &Msg, &CmdExt));
10007ec4:	e0ffb404 	addi	r3,fp,-304
10007ec8:	e0bfb704 	addi	r2,fp,-292
10007ecc:	d1201604 	addi	r4,gp,-32680
10007ed0:	180b883a 	mov	r5,r3
10007ed4:	100d883a 	mov	r6,r2
10007ed8:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10007edc:	e0bfb30d 	sth	r2,-308(fp)
10007ee0:	e0bfb30f 	ldh	r2,-308(fp)
10007ee4:	10000126 	beq	r2,zero,10007eec <sl_NetAppMDNSRegisterUnregisterService+0x114>
10007ee8:	003fff06 	br	10007ee8 <__alt_data_end+0xf0007ee8>

	return (_i16)Msg.Rsp.status;
10007eec:	e0bfb40b 	ldhu	r2,-304(fp)

	
}
10007ef0:	e037883a 	mov	sp,fp
10007ef4:	dfc00117 	ldw	ra,4(sp)
10007ef8:	df000017 	ldw	fp,0(sp)
10007efc:	dec00204 	addi	sp,sp,8
10007f00:	f800283a 	ret

10007f04 <sl_NetAppMDNSRegisterService>:
									_u8   TextLen,
									_u16  Port,
									_u32    TTL,
									_u32    Options)

{
10007f04:	defff604 	addi	sp,sp,-40
10007f08:	dfc00915 	stw	ra,36(sp)
10007f0c:	df000815 	stw	fp,32(sp)
10007f10:	df000804 	addi	fp,sp,32
10007f14:	e13ffb15 	stw	r4,-20(fp)
10007f18:	2809883a 	mov	r4,r5
10007f1c:	e1bffd15 	stw	r6,-12(fp)
10007f20:	3807883a 	mov	r3,r7
10007f24:	e0800217 	ldw	r2,8(fp)
10007f28:	e13ffc05 	stb	r4,-16(fp)
10007f2c:	e0fffe05 	stb	r3,-8(fp)
10007f30:	e0bfff0d 	sth	r2,-4(fp)
	/*Set the add service bit in the options parameter.
	  In order not use different opcodes for the register service and unregister service
	  bit 31 in option is taken for this purpose. if it is set it means in NWP that the service should be added
	  if it is cleared it means that the service should be deleted and there is only meaning to pServiceName
	  and ServiceNameLen values. */
	Options |=  NETAPP_MDNS_OPTIONS_ADD_SERVICE_BIT;
10007f34:	e0800417 	ldw	r2,16(fp)
10007f38:	10a00034 	orhi	r2,r2,32768
10007f3c:	e0800415 	stw	r2,16(fp)

    return  sl_NetAppMDNSRegisterUnregisterService(	pServiceName, 
10007f40:	e17ffc03 	ldbu	r5,-16(fp)
10007f44:	e0fffe03 	ldbu	r3,-8(fp)
10007f48:	e0bfff0b 	ldhu	r2,-4(fp)
10007f4c:	d8800015 	stw	r2,0(sp)
10007f50:	e0800317 	ldw	r2,12(fp)
10007f54:	d8800115 	stw	r2,4(sp)
10007f58:	e0800417 	ldw	r2,16(fp)
10007f5c:	d8800215 	stw	r2,8(sp)
10007f60:	e13ffb17 	ldw	r4,-20(fp)
10007f64:	e1bffd17 	ldw	r6,-12(fp)
10007f68:	180f883a 	mov	r7,r3
10007f6c:	0007dd80 	call	10007dd8 <sl_NetAppMDNSRegisterUnregisterService>
													Port,
													TTL,
													Options);

	
}
10007f70:	e037883a 	mov	sp,fp
10007f74:	dfc00117 	ldw	ra,4(sp)
10007f78:	df000017 	ldw	fp,0(sp)
10007f7c:	dec00204 	addi	sp,sp,8
10007f80:	f800283a 	ret

10007f84 <sl_NetAppMDNSUnRegisterService>:

_i16 sl_NetAppMDNSUnRegisterService(	const _i8* 		pServiceName, 
									_u8   ServiceNameLen)


{
10007f84:	defff804 	addi	sp,sp,-32
10007f88:	dfc00715 	stw	ra,28(sp)
10007f8c:	df000615 	stw	fp,24(sp)
10007f90:	df000604 	addi	fp,sp,24
10007f94:	e13ffe15 	stw	r4,-8(fp)
10007f98:	2805883a 	mov	r2,r5
10007f9c:	e0bfff05 	stb	r2,-4(fp)
    _u32    Options = 0;
10007fa0:	e03ffd15 	stw	zero,-12(fp)
	  In order not use different opcodes for the register service and unregister service
	  bit 31 in option is taken for this purpose. if it is set it means in NWP that the service should be added
	  if it is cleared it means that the service should be deleted and there is only meaning to pServiceName
	  and ServiceNameLen values.*/
	
	Options &=  (~NETAPP_MDNS_OPTIONS_ADD_SERVICE_BIT);
10007fa4:	e0fffd17 	ldw	r3,-12(fp)
10007fa8:	00a00034 	movhi	r2,32768
10007fac:	10bfffc4 	addi	r2,r2,-1
10007fb0:	1884703a 	and	r2,r3,r2
10007fb4:	e0bffd15 	stw	r2,-12(fp)

    return  sl_NetAppMDNSRegisterUnregisterService(	pServiceName, 
10007fb8:	e0ffff03 	ldbu	r3,-4(fp)
10007fbc:	d8000015 	stw	zero,0(sp)
10007fc0:	d8000115 	stw	zero,4(sp)
10007fc4:	e0bffd17 	ldw	r2,-12(fp)
10007fc8:	d8800215 	stw	r2,8(sp)
10007fcc:	e13ffe17 	ldw	r4,-8(fp)
10007fd0:	180b883a 	mov	r5,r3
10007fd4:	000d883a 	mov	r6,zero
10007fd8:	000f883a 	mov	r7,zero
10007fdc:	0007dd80 	call	10007dd8 <sl_NetAppMDNSRegisterUnregisterService>
													0,
													0,
													Options);

	
}
10007fe0:	e037883a 	mov	sp,fp
10007fe4:	dfc00117 	ldw	ra,4(sp)
10007fe8:	df000017 	ldw	fp,0(sp)
10007fec:	dec00204 	addi	sp,sp,8
10007ff0:	f800283a 	ret

10007ff4 <sl_NetAppDnsGetHostByService>:
								  _u32  pAddr[], 
								  _u32  *pPort,
								  _u16 *pTextLen, /* in: max len , out: actual len */
								  _i8          *pText
						         )
{
10007ff4:	deffed04 	addi	sp,sp,-76
10007ff8:	dfc01215 	stw	ra,72(sp)
10007ffc:	df001115 	stw	fp,68(sp)
10008000:	df001104 	addi	fp,sp,68
10008004:	e13ffc15 	stw	r4,-16(fp)
10008008:	2807883a 	mov	r3,r5
1000800c:	3005883a 	mov	r2,r6
10008010:	e1ffff15 	stw	r7,-4(fp)
10008014:	e0fffd05 	stb	r3,-12(fp)
10008018:	e0bffe05 	stb	r2,-8(fp)
    _SlGetHostByServiceMsg_u         Msg;
    _SlCmdExt_t                      CmdExt ;
    _GetHostByServiceAsyncResponse_t AsyncRsp;
	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
1000801c:	00800284 	movi	r2,10
10008020:	e0bfef05 	stb	r2,-68(fp)
 
*/
	/*build the attribute part of the command.
	  It contains the constant parameters of the command */

	Msg.Cmd.ServiceLen = ServiceLen;
10008024:	e0bffd03 	ldbu	r2,-12(fp)
10008028:	e0bff185 	stb	r2,-58(fp)
	Msg.Cmd.AddrLen    = Family;
1000802c:	e0bffe03 	ldbu	r2,-8(fp)
10008030:	e0bff1c5 	stb	r2,-57(fp)

	/*Build the payload part of the command
	  Copy the service name and text to one buffer.*/
	CmdExt.TxPayloadLen = ServiceLen;
10008034:	e0bffd03 	ldbu	r2,-12(fp)
10008038:	e0bff30d 	sth	r2,-52(fp)
    CmdExt.RxPayloadLen = 0;
1000803c:	e03ff38d 	sth	zero,-50(fp)
    CmdExt.pTxPayload   = (_u8 *)pServiceName;
10008040:	e0bffc17 	ldw	r2,-16(fp)
10008044:	e0bff515 	stw	r2,-44(fp)
    CmdExt.pRxPayload   = NULL;
10008048:	e03ff615 	stw	zero,-40(fp)

	/*set pointers to the output parameters (the returned parameters).
	  This pointers are belonged to local struct that is set to global Async response parameter.
	  It is done in order not to run more than one sl_DnsGetHostByService at the same time.
	  The API should be run only if global parameter is pointed to NULL. */
	AsyncRsp.out_pText     = pText;
1000804c:	e0800417 	ldw	r2,16(fp)
10008050:	e0bffb15 	stw	r2,-20(fp)
	AsyncRsp.inout_TextLen = (_u16* )pTextLen;
10008054:	e0800317 	ldw	r2,12(fp)
10008058:	e0bffa15 	stw	r2,-24(fp)
	AsyncRsp.out_pPort     = pPort;
1000805c:	e0800217 	ldw	r2,8(fp)
10008060:	e0bff915 	stw	r2,-28(fp)
	AsyncRsp.out_pAddr     = (_u32 *)pAddr;
10008064:	e0bfff17 	ldw	r2,-4(fp)
10008068:	e0bff815 	stw	r2,-32(fp)


    /*Use Obj to issue the command, if not available try later */
	ObjIdx = (_u8)_SlDrvWaitForPoolObj(GETHOSYBYSERVICE_ID,SL_MAX_SOCKETS);
1000806c:	01000304 	movi	r4,12
10008070:	01400204 	movi	r5,8
10008074:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
10008078:	e0bfef05 	stb	r2,-68(fp)

	if (MAX_CONCURRENT_ACTIONS == ObjIdx)
1000807c:	e0bfef03 	ldbu	r2,-68(fp)
10008080:	10800298 	cmpnei	r2,r2,10
10008084:	1000021e 	bne	r2,zero,10008090 <sl_NetAppDnsGetHostByService+0x9c>
	{
		return SL_POOL_IS_EMPTY;
10008088:	00be0c04 	movi	r2,-2000
1000808c:	00006806 	br	10008230 <sl_NetAppDnsGetHostByService+0x23c>
	}
	
    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10008090:	008400f4 	movhi	r2,4099
10008094:	10a48204 	addi	r2,r2,-28152
10008098:	10800017 	ldw	r2,0(r2)
1000809c:	10802404 	addi	r2,r2,144
100080a0:	1009883a 	mov	r4,r2
100080a4:	01400cc4 	movi	r5,51
100080a8:	01801104 	movi	r6,68
100080ac:	01c03fc4 	movi	r7,255
100080b0:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100080b4:	10803fcc 	andi	r2,r2,255
100080b8:	1080201c 	xori	r2,r2,128
100080bc:	10bfe004 	addi	r2,r2,-128
100080c0:	e0bfef8d 	sth	r2,-66(fp)
100080c4:	e0bfef8f 	ldh	r2,-66(fp)
100080c8:	10000126 	beq	r2,zero,100080d0 <sl_NetAppDnsGetHostByService+0xdc>
100080cc:	003fff06 	br	100080cc <__alt_data_end+0xf00080cc>

	g_pCB->ObjPool[ObjIdx].pRespArgs =  (void *)&AsyncRsp;
100080d0:	008400f4 	movhi	r2,4099
100080d4:	10a48204 	addi	r2,r2,-28152
100080d8:	10c00017 	ldw	r3,0(r2)
100080dc:	e0bfef03 	ldbu	r2,-68(fp)
100080e0:	10800324 	muli	r2,r2,12
100080e4:	1885883a 	add	r2,r3,r2
100080e8:	10800504 	addi	r2,r2,20
100080ec:	e0fff704 	addi	r3,fp,-36
100080f0:	10c00015 	stw	r3,0(r2)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100080f4:	008400f4 	movhi	r2,4099
100080f8:	10a48204 	addi	r2,r2,-28152
100080fc:	10800017 	ldw	r2,0(r2)
10008100:	10802404 	addi	r2,r2,144
10008104:	1009883a 	mov	r4,r2
10008108:	01400cc4 	movi	r5,51
1000810c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10008110:	10803fcc 	andi	r2,r2,255
10008114:	1080201c 	xori	r2,r2,128
10008118:	10bfe004 	addi	r2,r2,-128
1000811c:	e0bff00d 	sth	r2,-64(fp)
10008120:	e0bff00f 	ldh	r2,-64(fp)
10008124:	10000126 	beq	r2,zero,1000812c <sl_NetAppDnsGetHostByService+0x138>
10008128:	003fff06 	br	10008128 <__alt_data_end+0xf0008128>
	/* set bit to indicate IPv6 address is expected */
	if (SL_AF_INET6 == Family)  
1000812c:	e0bffe03 	ldbu	r2,-8(fp)
10008130:	108000d8 	cmpnei	r2,r2,3
10008134:	1000131e 	bne	r2,zero,10008184 <sl_NetAppDnsGetHostByService+0x190>
	{
		g_pCB->ObjPool[ObjIdx].AdditionalData |= SL_NETAPP_FAMILY_MASK;
10008138:	008400f4 	movhi	r2,4099
1000813c:	10a48204 	addi	r2,r2,-28152
10008140:	10c00017 	ldw	r3,0(r2)
10008144:	e13fef03 	ldbu	r4,-68(fp)
10008148:	008400f4 	movhi	r2,4099
1000814c:	10a48204 	addi	r2,r2,-28152
10008150:	11400017 	ldw	r5,0(r2)
10008154:	e0bfef03 	ldbu	r2,-68(fp)
10008158:	10800324 	muli	r2,r2,12
1000815c:	2885883a 	add	r2,r5,r2
10008160:	10800604 	addi	r2,r2,24
10008164:	11400043 	ldbu	r5,1(r2)
10008168:	00bfe004 	movi	r2,-128
1000816c:	2884b03a 	or	r2,r5,r2
10008170:	100b883a 	mov	r5,r2
10008174:	20800324 	muli	r2,r4,12
10008178:	1885883a 	add	r2,r3,r2
1000817c:	10800604 	addi	r2,r2,24
10008180:	11400045 	stb	r5,1(r2)
	}
    /* Send the command */
	VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlGetHostByServiceCtrl, &Msg, &CmdExt));
10008184:	e0fff184 	addi	r3,fp,-58
10008188:	e0bff304 	addi	r2,fp,-52
1000818c:	d1201704 	addi	r4,gp,-32676
10008190:	180b883a 	mov	r5,r3
10008194:	100d883a 	mov	r6,r2
10008198:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000819c:	e0bff08d 	sth	r2,-62(fp)
100081a0:	e0bff08f 	ldh	r2,-62(fp)
100081a4:	10000126 	beq	r2,zero,100081ac <sl_NetAppDnsGetHostByService+0x1b8>
100081a8:	003fff06 	br	100081a8 <__alt_data_end+0xf00081a8>

 
	 
    /* If the immediate reponse is O.K. than  wait for aSYNC event response. */
	if(SL_RET_CODE_OK == Msg.Rsp.status)
100081ac:	e0bff18b 	ldhu	r2,-58(fp)
100081b0:	10bfffcc 	andi	r2,r2,65535
100081b4:	10a0001c 	xori	r2,r2,32768
100081b8:	10a00004 	addi	r2,r2,-32768
100081bc:	1000151e 	bne	r2,zero,10008214 <sl_NetAppDnsGetHostByService+0x220>
    {        
		OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
100081c0:	008400f4 	movhi	r2,4099
100081c4:	10a48204 	addi	r2,r2,-28152
100081c8:	10c00017 	ldw	r3,0(r2)
100081cc:	e0bfef03 	ldbu	r2,-68(fp)
100081d0:	10800324 	muli	r2,r2,12
100081d4:	10800404 	addi	r2,r2,16
100081d8:	1885883a 	add	r2,r3,r2
100081dc:	1009883a 	mov	r4,r2
100081e0:	01400884 	movi	r5,34
100081e4:	01800444 	movi	r6,17
100081e8:	01c03fc4 	movi	r7,255
100081ec:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100081f0:	10803fcc 	andi	r2,r2,255
100081f4:	1080201c 	xori	r2,r2,128
100081f8:	10bfe004 	addi	r2,r2,-128
100081fc:	e0bff10d 	sth	r2,-60(fp)
10008200:	e0bff10f 	ldh	r2,-60(fp)
10008204:	10000126 	beq	r2,zero,1000820c <sl_NetAppDnsGetHostByService+0x218>
10008208:	003fff06 	br	10008208 <__alt_data_end+0xf0008208>
        
		/* If we are - it means that Async event was sent.
		   The results are copied in the Async handle return functions */
		
		Msg.Rsp.status = AsyncRsp.Status;
1000820c:	e0bff70b 	ldhu	r2,-36(fp)
10008210:	e0bff18d 	sth	r2,-58(fp)
    }

    _SlDrvReleasePoolObj(ObjIdx);
10008214:	e0bfef03 	ldbu	r2,-68(fp)
10008218:	1009883a 	mov	r4,r2
1000821c:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return Msg.Rsp.status;
10008220:	e0bff18b 	ldhu	r2,-58(fp)
10008224:	10bfffcc 	andi	r2,r2,65535
10008228:	10a0001c 	xori	r2,r2,32768
1000822c:	10a00004 	addi	r2,r2,-32768
}
10008230:	e037883a 	mov	sp,fp
10008234:	dfc00117 	ldw	ra,4(sp)
10008238:	df000017 	ldw	fp,0(sp)
1000823c:	dec00204 	addi	sp,sp,8
10008240:	f800283a 	ret

10008244 <_sl_HandleAsync_DnsGetHostByService>:



******************************************************************************/
void _sl_HandleAsync_DnsGetHostByService(void *pVoidBuf)
{
10008244:	defff904 	addi	sp,sp,-28
10008248:	dfc00615 	stw	ra,24(sp)
1000824c:	df000515 	stw	fp,20(sp)
10008250:	df000504 	addi	fp,sp,20
10008254:	e13fff15 	stw	r4,-4(fp)


	/*pVoidBuf - is point to opcode of the event.*/
    
	/*set pMsgArgs to point to the attribute of the event.*/
	_GetHostByServiceIPv4AsyncResponse_t   *pMsgArgs   = (_GetHostByServiceIPv4AsyncResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
10008258:	e0bfff17 	ldw	r2,-4(fp)
1000825c:	10800204 	addi	r2,r2,8
10008260:	e0bffb15 	stw	r2,-20(fp)

    VERIFY_SOCKET_CB(NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs);

	/*IPv6*/
	if(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].AdditionalData & SL_NETAPP_FAMILY_MASK)
10008264:	008400f4 	movhi	r2,4099
10008268:	10a48204 	addi	r2,r2,-28152
1000826c:	10c00017 	ldw	r3,0(r2)
10008270:	008400f4 	movhi	r2,4099
10008274:	10a48204 	addi	r2,r2,-28152
10008278:	10800017 	ldw	r2,0(r2)
1000827c:	10802b03 	ldbu	r2,172(r2)
10008280:	10803fcc 	andi	r2,r2,255
10008284:	10800324 	muli	r2,r2,12
10008288:	1885883a 	add	r2,r3,r2
1000828c:	10800604 	addi	r2,r2,24
10008290:	10800043 	ldbu	r2,1(r2)
10008294:	10803fcc 	andi	r2,r2,255
10008298:	1080201c 	xori	r2,r2,128
1000829c:	10bfe004 	addi	r2,r2,-128
100082a0:	1000010e 	bge	r2,zero,100082a8 <_sl_HandleAsync_DnsGetHostByService+0x64>
	{
		return;
100082a4:	00004c06 	br	100083d8 <_sl_HandleAsync_DnsGetHostByService+0x194>
	
	1. Copy the attribute part of the evnt to the attribute part of the response
	sl_Memcpy(g_pCB->GetHostByServiceCB.pAsyncRsp, pMsgArgs, sizeof(_GetHostByServiceIPv4AsyncResponse_t));

    set to TextLen the text length of the service.*/
	TextLen = pMsgArgs->TextLen;
100082a8:	e0bffb17 	ldw	r2,-20(fp)
100082ac:	1080008b 	ldhu	r2,2(r2)
100082b0:	e0bffc0d 	sth	r2,-16(fp)
	
	/*Res pointed to mDNS global object struct */
		Res = (_GetHostByServiceAsyncResponse_t*)g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs;
100082b4:	008400f4 	movhi	r2,4099
100082b8:	10a48204 	addi	r2,r2,-28152
100082bc:	10c00017 	ldw	r3,0(r2)
100082c0:	008400f4 	movhi	r2,4099
100082c4:	10a48204 	addi	r2,r2,-28152
100082c8:	10800017 	ldw	r2,0(r2)
100082cc:	10802b03 	ldbu	r2,172(r2)
100082d0:	10803fcc 	andi	r2,r2,255
100082d4:	10800324 	muli	r2,r2,12
100082d8:	1885883a 	add	r2,r3,r2
100082dc:	10800504 	addi	r2,r2,20
100082e0:	10800017 	ldw	r2,0(r2)
100082e4:	e0bffd15 	stw	r2,-12(fp)



	/*It is 4 bytes so we avoid from memcpy*/
	Res->out_pAddr[0]	= pMsgArgs->Address;
100082e8:	e0bffd17 	ldw	r2,-12(fp)
100082ec:	10800117 	ldw	r2,4(r2)
100082f0:	e0fffb17 	ldw	r3,-20(fp)
100082f4:	18c00217 	ldw	r3,8(r3)
100082f8:	10c00015 	stw	r3,0(r2)
	Res->out_pPort[0]	= pMsgArgs->Port;
100082fc:	e0bffd17 	ldw	r2,-12(fp)
10008300:	10800217 	ldw	r2,8(r2)
10008304:	e0fffb17 	ldw	r3,-20(fp)
10008308:	18c00117 	ldw	r3,4(r3)
1000830c:	10c00015 	stw	r3,0(r2)
	Res->Status			= pMsgArgs->Status;
10008310:	e0bffb17 	ldw	r2,-20(fp)
10008314:	1080000b 	ldhu	r2,0(r2)
10008318:	1007883a 	mov	r3,r2
1000831c:	e0bffd17 	ldw	r2,-12(fp)
10008320:	10c0000d 	sth	r3,0(r2)
	
	/*set to TextLen the text length of the user (input fromthe user).*/
	UserTextLen			= Res->inout_TextLen[0];
10008324:	e0bffd17 	ldw	r2,-12(fp)
10008328:	10800317 	ldw	r2,12(r2)
1000832c:	1080000b 	ldhu	r2,0(r2)
10008330:	e0bffe0d 	sth	r2,-8(fp)
    
	/*Cut the service text if the user requested for smaller text.*/
	UserTextLen = (TextLen <= UserTextLen) ? TextLen : UserTextLen;
10008334:	e17ffe0b 	ldhu	r5,-8(fp)
10008338:	e0bffc0b 	ldhu	r2,-16(fp)
1000833c:	10ffffcc 	andi	r3,r2,65535
10008340:	293fffcc 	andi	r4,r5,65535
10008344:	20c0012e 	bgeu	r4,r3,1000834c <_sl_HandleAsync_DnsGetHostByService+0x108>
10008348:	2805883a 	mov	r2,r5
1000834c:	e0bffe0d 	sth	r2,-8(fp)
	Res->inout_TextLen[0] = UserTextLen ;
10008350:	e0bffd17 	ldw	r2,-12(fp)
10008354:	10800317 	ldw	r2,12(r2)
10008358:	e0fffe0b 	ldhu	r3,-8(fp)
1000835c:	10c0000d 	sth	r3,0(r2)

	2. Copy the payload part of the evnt (the text) to the payload part of the response
	the lenght of the copy is according to the text length in the attribute part. */
	

	sl_Memcpy(Res->out_pText          ,
10008360:	e0bffd17 	ldw	r2,-12(fp)
10008364:	11000417 	ldw	r4,16(r2)
10008368:	e0bffb17 	ldw	r2,-20(fp)
1000836c:	10c00304 	addi	r3,r2,12
10008370:	e0bffe0b 	ldhu	r2,-8(fp)
10008374:	180b883a 	mov	r5,r3
10008378:	100d883a 	mov	r6,r2
1000837c:	000c7840 	call	1000c784 <memcpy>
			 UserTextLen              );


    /**************************************************************************************************/

		OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
10008380:	008400f4 	movhi	r2,4099
10008384:	10a48204 	addi	r2,r2,-28152
10008388:	10c00017 	ldw	r3,0(r2)
1000838c:	008400f4 	movhi	r2,4099
10008390:	10a48204 	addi	r2,r2,-28152
10008394:	10800017 	ldw	r2,0(r2)
10008398:	10802b03 	ldbu	r2,172(r2)
1000839c:	10803fcc 	andi	r2,r2,255
100083a0:	10800324 	muli	r2,r2,12
100083a4:	10800404 	addi	r2,r2,16
100083a8:	1885883a 	add	r2,r3,r2
100083ac:	1009883a 	mov	r4,r2
100083b0:	01400884 	movi	r5,34
100083b4:	000938c0 	call	1000938c <_SlNonOsSemSet>
100083b8:	10803fcc 	andi	r2,r2,255
100083bc:	1080201c 	xori	r2,r2,128
100083c0:	10bfe004 	addi	r2,r2,-128
100083c4:	e0bffe8d 	sth	r2,-6(fp)
100083c8:	e0bffe8f 	ldh	r2,-6(fp)
100083cc:	10000126 	beq	r2,zero,100083d4 <_sl_HandleAsync_DnsGetHostByService+0x190>
100083d0:	003fff06 	br	100083d0 <__alt_data_end+0xf00083d0>
		return;
100083d4:	0001883a 	nop
	}
}
100083d8:	e037883a 	mov	sp,fp
100083dc:	dfc00117 	ldw	ra,4(sp)
100083e0:	df000017 	ldw	fp,0(sp)
100083e4:	dec00204 	addi	sp,sp,8
100083e8:	f800283a 	ret

100083ec <_sl_HandleAsync_DnsGetHostByAddr>:

/*****************************************************************************/
/*  _sl_HandleAsync_DnsGetHostByAddr */
/*****************************************************************************/
void _sl_HandleAsync_DnsGetHostByAddr(void *pVoidBuf)
{
100083ec:	defffe04 	addi	sp,sp,-8
100083f0:	df000115 	stw	fp,4(sp)
100083f4:	df000104 	addi	fp,sp,4
100083f8:	e13fff15 	stw	r4,-4(fp)
    SL_TRACE0(DBG_MSG, MSG_303, "STUB: _sl_HandleAsync_DnsGetHostByAddr not implemented yet!");
    return;
100083fc:	0001883a 	nop
}
10008400:	e037883a 	mov	sp,fp
10008404:	df000017 	ldw	fp,0(sp)
10008408:	dec00104 	addi	sp,sp,4
1000840c:	f800283a 	ret

10008410 <sl_NetAppDnsGetHostByName>:
    sizeof(_GetHostByNameCommand_t),
    sizeof(_BasicResponse_t)
};
#if _SL_INCLUDE_FUNC(sl_NetAppDnsGetHostByName)
_i16 sl_NetAppDnsGetHostByName(_i8 * hostname, _u16 usNameLen, _u32*  out_ip_addr,_u8 family)
{
10008410:	deffed04 	addi	sp,sp,-76
10008414:	dfc01215 	stw	ra,72(sp)
10008418:	df001115 	stw	fp,68(sp)
1000841c:	df001104 	addi	fp,sp,68
10008420:	e13ffc15 	stw	r4,-16(fp)
10008424:	2807883a 	mov	r3,r5
10008428:	e1bffe15 	stw	r6,-8(fp)
1000842c:	3805883a 	mov	r2,r7
10008430:	e0fffd0d 	sth	r3,-12(fp)
10008434:	e0bfff05 	stb	r2,-4(fp)
    _SlGetHostByNameMsg_u           Msg;
    _SlCmdExt_t                     ExtCtrl;
    _GetHostByNameAsyncResponse_u   AsyncRsp;
	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
10008438:	00800284 	movi	r2,10
1000843c:	e0bfef05 	stb	r2,-68(fp)

    ExtCtrl.TxPayloadLen = usNameLen;
10008440:	e0bffd0b 	ldhu	r2,-12(fp)
10008444:	e0bff30d 	sth	r2,-52(fp)
    ExtCtrl.RxPayloadLen = 0;
10008448:	e03ff38d 	sth	zero,-50(fp)
    ExtCtrl.pTxPayload = (_u8 *)hostname;
1000844c:	e0bffc17 	ldw	r2,-16(fp)
10008450:	e0bff515 	stw	r2,-44(fp)
    ExtCtrl.pRxPayload = 0;
10008454:	e03ff615 	stw	zero,-40(fp)

    Msg.Cmd.Len = usNameLen;
10008458:	e0bffd0b 	ldhu	r2,-12(fp)
1000845c:	e0bff18d 	sth	r2,-58(fp)
    Msg.Cmd.family = family;
10008460:	e0bfff03 	ldbu	r2,-4(fp)
10008464:	e0bff205 	stb	r2,-56(fp)

	/*Use Obj to issue the command, if not available try later */
	ObjIdx = (_u8)_SlDrvWaitForPoolObj(GETHOSYBYNAME_ID,SL_MAX_SOCKETS);
10008468:	010002c4 	movi	r4,11
1000846c:	01400204 	movi	r5,8
10008470:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
10008474:	e0bfef05 	stb	r2,-68(fp)
	if (MAX_CONCURRENT_ACTIONS == ObjIdx)
10008478:	e0bfef03 	ldbu	r2,-68(fp)
1000847c:	10800298 	cmpnei	r2,r2,10
10008480:	1000021e 	bne	r2,zero,1000848c <sl_NetAppDnsGetHostByName+0x7c>
	{
		return SL_POOL_IS_EMPTY;
10008484:	00be0c04 	movi	r2,-2000
10008488:	00007606 	br	10008664 <sl_NetAppDnsGetHostByName+0x254>
	}
	OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000848c:	008400f4 	movhi	r2,4099
10008490:	10a48204 	addi	r2,r2,-28152
10008494:	10800017 	ldw	r2,0(r2)
10008498:	10802404 	addi	r2,r2,144
1000849c:	1009883a 	mov	r4,r2
100084a0:	01400cc4 	movi	r5,51
100084a4:	01801104 	movi	r6,68
100084a8:	01c03fc4 	movi	r7,255
100084ac:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100084b0:	10803fcc 	andi	r2,r2,255
100084b4:	1080201c 	xori	r2,r2,128
100084b8:	10bfe004 	addi	r2,r2,-128
100084bc:	e0bfef8d 	sth	r2,-66(fp)
100084c0:	e0bfef8f 	ldh	r2,-66(fp)
100084c4:	10000126 	beq	r2,zero,100084cc <sl_NetAppDnsGetHostByName+0xbc>
100084c8:	003fff06 	br	100084c8 <__alt_data_end+0xf00084c8>

	g_pCB->ObjPool[ObjIdx].pRespArgs =  (_u8 *)&AsyncRsp;
100084cc:	008400f4 	movhi	r2,4099
100084d0:	10a48204 	addi	r2,r2,-28152
100084d4:	10c00017 	ldw	r3,0(r2)
100084d8:	e0bfef03 	ldbu	r2,-68(fp)
100084dc:	10800324 	muli	r2,r2,12
100084e0:	1885883a 	add	r2,r3,r2
100084e4:	10800504 	addi	r2,r2,20
100084e8:	e0fff704 	addi	r3,fp,-36
100084ec:	10c00015 	stw	r3,0(r2)
	/*set bit to indicate IPv6 address is expected */
	if (SL_AF_INET6 == family)  
100084f0:	e0bfff03 	ldbu	r2,-4(fp)
100084f4:	108000d8 	cmpnei	r2,r2,3
100084f8:	1000131e 	bne	r2,zero,10008548 <sl_NetAppDnsGetHostByName+0x138>
	{
		g_pCB->ObjPool[ObjIdx].AdditionalData |= SL_NETAPP_FAMILY_MASK;
100084fc:	008400f4 	movhi	r2,4099
10008500:	10a48204 	addi	r2,r2,-28152
10008504:	10c00017 	ldw	r3,0(r2)
10008508:	e13fef03 	ldbu	r4,-68(fp)
1000850c:	008400f4 	movhi	r2,4099
10008510:	10a48204 	addi	r2,r2,-28152
10008514:	11400017 	ldw	r5,0(r2)
10008518:	e0bfef03 	ldbu	r2,-68(fp)
1000851c:	10800324 	muli	r2,r2,12
10008520:	2885883a 	add	r2,r5,r2
10008524:	10800604 	addi	r2,r2,24
10008528:	11400043 	ldbu	r5,1(r2)
1000852c:	00bfe004 	movi	r2,-128
10008530:	2884b03a 	or	r2,r5,r2
10008534:	100b883a 	mov	r5,r2
10008538:	20800324 	muli	r2,r4,12
1000853c:	1885883a 	add	r2,r3,r2
10008540:	10800604 	addi	r2,r2,24
10008544:	11400045 	stb	r5,1(r2)
	}
	
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10008548:	008400f4 	movhi	r2,4099
1000854c:	10a48204 	addi	r2,r2,-28152
10008550:	10800017 	ldw	r2,0(r2)
10008554:	10802404 	addi	r2,r2,144
10008558:	1009883a 	mov	r4,r2
1000855c:	01400cc4 	movi	r5,51
10008560:	000938c0 	call	1000938c <_SlNonOsSemSet>
10008564:	10803fcc 	andi	r2,r2,255
10008568:	1080201c 	xori	r2,r2,128
1000856c:	10bfe004 	addi	r2,r2,-128
10008570:	e0bff00d 	sth	r2,-64(fp)
10008574:	e0bff00f 	ldh	r2,-64(fp)
10008578:	10000126 	beq	r2,zero,10008580 <sl_NetAppDnsGetHostByName+0x170>
1000857c:	003fff06 	br	1000857c <__alt_data_end+0xf000857c>

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlGetHostByNameCtrl, &Msg, &ExtCtrl));
10008580:	e0fff184 	addi	r3,fp,-58
10008584:	e0bff304 	addi	r2,fp,-52
10008588:	d1201804 	addi	r4,gp,-32672
1000858c:	180b883a 	mov	r5,r3
10008590:	100d883a 	mov	r6,r2
10008594:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10008598:	e0bff08d 	sth	r2,-62(fp)
1000859c:	e0bff08f 	ldh	r2,-62(fp)
100085a0:	10000126 	beq	r2,zero,100085a8 <sl_NetAppDnsGetHostByName+0x198>
100085a4:	003fff06 	br	100085a4 <__alt_data_end+0xf00085a4>

    if(SL_RET_CODE_OK == Msg.Rsp.status)
100085a8:	e0bff18b 	ldhu	r2,-58(fp)
100085ac:	10bfffcc 	andi	r2,r2,65535
100085b0:	10a0001c 	xori	r2,r2,32768
100085b4:	10a00004 	addi	r2,r2,-32768
100085b8:	1000261e 	bne	r2,zero,10008654 <sl_NetAppDnsGetHostByName+0x244>
    {        
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
100085bc:	008400f4 	movhi	r2,4099
100085c0:	10a48204 	addi	r2,r2,-28152
100085c4:	10c00017 	ldw	r3,0(r2)
100085c8:	e0bfef03 	ldbu	r2,-68(fp)
100085cc:	10800324 	muli	r2,r2,12
100085d0:	10800404 	addi	r2,r2,16
100085d4:	1885883a 	add	r2,r3,r2
100085d8:	1009883a 	mov	r4,r2
100085dc:	01400884 	movi	r5,34
100085e0:	01800444 	movi	r6,17
100085e4:	01c03fc4 	movi	r7,255
100085e8:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100085ec:	10803fcc 	andi	r2,r2,255
100085f0:	1080201c 	xori	r2,r2,128
100085f4:	10bfe004 	addi	r2,r2,-128
100085f8:	e0bff10d 	sth	r2,-60(fp)
100085fc:	e0bff10f 	ldh	r2,-60(fp)
10008600:	10000126 	beq	r2,zero,10008608 <sl_NetAppDnsGetHostByName+0x1f8>
10008604:	003fff06 	br	10008604 <__alt_data_end+0xf0008604>
        Msg.Rsp.status = AsyncRsp.IpV4.status;
10008608:	e0bff70b 	ldhu	r2,-36(fp)
1000860c:	e0bff18d 	sth	r2,-58(fp)

        if(SL_OS_RET_CODE_OK == (_i16)Msg.Rsp.status)
10008610:	e0bff18b 	ldhu	r2,-58(fp)
10008614:	10bfffcc 	andi	r2,r2,65535
10008618:	10a0001c 	xori	r2,r2,32768
1000861c:	10a00004 	addi	r2,r2,-32768
10008620:	10000c1e 	bne	r2,zero,10008654 <sl_NetAppDnsGetHostByName+0x244>
        {
            sl_Memcpy((_i8 *)out_ip_addr,
10008624:	e0bfff03 	ldbu	r2,-4(fp)
10008628:	10800098 	cmpnei	r2,r2,2
1000862c:	1000021e 	bne	r2,zero,10008638 <sl_NetAppDnsGetHostByName+0x228>
10008630:	00800104 	movi	r2,4
10008634:	00000106 	br	1000863c <sl_NetAppDnsGetHostByName+0x22c>
10008638:	00800404 	movi	r2,16
1000863c:	e0fff704 	addi	r3,fp,-36
10008640:	18c00104 	addi	r3,r3,4
10008644:	e13ffe17 	ldw	r4,-8(fp)
10008648:	180b883a 	mov	r5,r3
1000864c:	100d883a 	mov	r6,r2
10008650:	000c7840 	call	1000c784 <memcpy>
                      (_i8 *)&AsyncRsp.IpV4.ip0, 
                      (SL_AF_INET == family) ? SL_IPV4_ADDRESS_SIZE : SL_IPV6_ADDRESS_SIZE);
        }
    }
    _SlDrvReleasePoolObj(ObjIdx);
10008654:	e0bfef03 	ldbu	r2,-68(fp)
10008658:	1009883a 	mov	r4,r2
1000865c:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return Msg.Rsp.status;
10008660:	e0bff18b 	ldhu	r2,-58(fp)
}
10008664:	e037883a 	mov	sp,fp
10008668:	dfc00117 	ldw	ra,4(sp)
1000866c:	df000017 	ldw	fp,0(sp)
10008670:	dec00204 	addi	sp,sp,8
10008674:	f800283a 	ret

10008678 <_sl_HandleAsync_DnsGetHostByName>:
#endif
/******************************************************************************/
/*  _sl_HandleAsync_DnsGetHostByName */
/******************************************************************************/
void _sl_HandleAsync_DnsGetHostByName(void *pVoidBuf)
{
10008678:	defffa04 	addi	sp,sp,-24
1000867c:	dfc00515 	stw	ra,20(sp)
10008680:	df000415 	stw	fp,16(sp)
10008684:	df000404 	addi	fp,sp,16
10008688:	e13fff15 	stw	r4,-4(fp)
    _GetHostByNameIPv4AsyncResponse_t     *pMsgArgs   = (_GetHostByNameIPv4AsyncResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
1000868c:	e0bfff17 	ldw	r2,-4(fp)
10008690:	10800204 	addi	r2,r2,8
10008694:	e0bffc15 	stw	r2,-16(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10008698:	008400f4 	movhi	r2,4099
1000869c:	10a48204 	addi	r2,r2,-28152
100086a0:	10800017 	ldw	r2,0(r2)
100086a4:	10802404 	addi	r2,r2,144
100086a8:	1009883a 	mov	r4,r2
100086ac:	01400cc4 	movi	r5,51
100086b0:	01801104 	movi	r6,68
100086b4:	01c03fc4 	movi	r7,255
100086b8:	00093c40 	call	100093c4 <_SlNonOsSemGet>
100086bc:	10803fcc 	andi	r2,r2,255
100086c0:	1080201c 	xori	r2,r2,128
100086c4:	10bfe004 	addi	r2,r2,-128
100086c8:	e0bffd0d 	sth	r2,-12(fp)
100086cc:	e0bffd0f 	ldh	r2,-12(fp)
100086d0:	10000126 	beq	r2,zero,100086d8 <_sl_HandleAsync_DnsGetHostByName+0x60>
100086d4:	003fff06 	br	100086d4 <__alt_data_end+0xf00086d4>

    VERIFY_SOCKET_CB(NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs);

	/*IPv6 */
	if(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].AdditionalData & SL_NETAPP_FAMILY_MASK)
100086d8:	008400f4 	movhi	r2,4099
100086dc:	10a48204 	addi	r2,r2,-28152
100086e0:	10c00017 	ldw	r3,0(r2)
100086e4:	008400f4 	movhi	r2,4099
100086e8:	10a48204 	addi	r2,r2,-28152
100086ec:	10800017 	ldw	r2,0(r2)
100086f0:	10802b03 	ldbu	r2,172(r2)
100086f4:	10803fcc 	andi	r2,r2,255
100086f8:	10800324 	muli	r2,r2,12
100086fc:	1885883a 	add	r2,r3,r2
10008700:	10800604 	addi	r2,r2,24
10008704:	10800043 	ldbu	r2,1(r2)
10008708:	10803fcc 	andi	r2,r2,255
1000870c:	1080201c 	xori	r2,r2,128
10008710:	10bfe004 	addi	r2,r2,-128
10008714:	1000110e 	bge	r2,zero,1000875c <_sl_HandleAsync_DnsGetHostByName+0xe4>
	{
		sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(_GetHostByNameIPv6AsyncResponse_t));
10008718:	008400f4 	movhi	r2,4099
1000871c:	10a48204 	addi	r2,r2,-28152
10008720:	10c00017 	ldw	r3,0(r2)
10008724:	008400f4 	movhi	r2,4099
10008728:	10a48204 	addi	r2,r2,-28152
1000872c:	10800017 	ldw	r2,0(r2)
10008730:	10802b03 	ldbu	r2,172(r2)
10008734:	10803fcc 	andi	r2,r2,255
10008738:	10800324 	muli	r2,r2,12
1000873c:	1885883a 	add	r2,r3,r2
10008740:	10800504 	addi	r2,r2,20
10008744:	10800017 	ldw	r2,0(r2)
10008748:	1009883a 	mov	r4,r2
1000874c:	e17ffc17 	ldw	r5,-16(fp)
10008750:	01800504 	movi	r6,20
10008754:	000c7840 	call	1000c784 <memcpy>
10008758:	00001006 	br	1000879c <_sl_HandleAsync_DnsGetHostByName+0x124>
	}
	/*IPv4 */
	else
	{
		sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(_GetHostByNameIPv4AsyncResponse_t));
1000875c:	008400f4 	movhi	r2,4099
10008760:	10a48204 	addi	r2,r2,-28152
10008764:	10c00017 	ldw	r3,0(r2)
10008768:	008400f4 	movhi	r2,4099
1000876c:	10a48204 	addi	r2,r2,-28152
10008770:	10800017 	ldw	r2,0(r2)
10008774:	10802b03 	ldbu	r2,172(r2)
10008778:	10803fcc 	andi	r2,r2,255
1000877c:	10800324 	muli	r2,r2,12
10008780:	1885883a 	add	r2,r3,r2
10008784:	10800504 	addi	r2,r2,20
10008788:	10800017 	ldw	r2,0(r2)
1000878c:	1009883a 	mov	r4,r2
10008790:	e17ffc17 	ldw	r5,-16(fp)
10008794:	01800204 	movi	r6,8
10008798:	000c7840 	call	1000c784 <memcpy>
	}
	OSI_RET_OK_CHECK(sl_SyncObjSignal(&(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj)));
1000879c:	008400f4 	movhi	r2,4099
100087a0:	10a48204 	addi	r2,r2,-28152
100087a4:	10c00017 	ldw	r3,0(r2)
100087a8:	008400f4 	movhi	r2,4099
100087ac:	10a48204 	addi	r2,r2,-28152
100087b0:	10800017 	ldw	r2,0(r2)
100087b4:	10802b03 	ldbu	r2,172(r2)
100087b8:	10803fcc 	andi	r2,r2,255
100087bc:	10800324 	muli	r2,r2,12
100087c0:	10800404 	addi	r2,r2,16
100087c4:	1885883a 	add	r2,r3,r2
100087c8:	1009883a 	mov	r4,r2
100087cc:	01400884 	movi	r5,34
100087d0:	000938c0 	call	1000938c <_SlNonOsSemSet>
100087d4:	10803fcc 	andi	r2,r2,255
100087d8:	1080201c 	xori	r2,r2,128
100087dc:	10bfe004 	addi	r2,r2,-128
100087e0:	e0bffd8d 	sth	r2,-10(fp)
100087e4:	e0bffd8f 	ldh	r2,-10(fp)
100087e8:	10000126 	beq	r2,zero,100087f0 <_sl_HandleAsync_DnsGetHostByName+0x178>
100087ec:	003fff06 	br	100087ec <__alt_data_end+0xf00087ec>

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
100087f0:	008400f4 	movhi	r2,4099
100087f4:	10a48204 	addi	r2,r2,-28152
100087f8:	10800017 	ldw	r2,0(r2)
100087fc:	10802404 	addi	r2,r2,144
10008800:	1009883a 	mov	r4,r2
10008804:	01400cc4 	movi	r5,51
10008808:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000880c:	10803fcc 	andi	r2,r2,255
10008810:	1080201c 	xori	r2,r2,128
10008814:	10bfe004 	addi	r2,r2,-128
10008818:	e0bffe0d 	sth	r2,-8(fp)
1000881c:	e0bffe0f 	ldh	r2,-8(fp)
10008820:	10000126 	beq	r2,zero,10008828 <_sl_HandleAsync_DnsGetHostByName+0x1b0>
10008824:	003fff06 	br	10008824 <__alt_data_end+0xf0008824>
    return;
10008828:	0001883a 	nop
}
1000882c:	e037883a 	mov	sp,fp
10008830:	dfc00117 	ldw	ra,4(sp)
10008834:	df000017 	ldw	fp,0(sp)
10008838:	dec00204 	addi	sp,sp,8
1000883c:	f800283a 	ret

10008840 <CopyPingResultsToReport>:


void CopyPingResultsToReport(_PingReportResponse_t *pResults,SlPingReport_t *pReport)
{
10008840:	defffd04 	addi	sp,sp,-12
10008844:	df000215 	stw	fp,8(sp)
10008848:	df000204 	addi	fp,sp,8
1000884c:	e13ffe15 	stw	r4,-8(fp)
10008850:	e17fff15 	stw	r5,-4(fp)
    pReport->PacketsSent     = pResults->numSendsPings;
10008854:	e0bffe17 	ldw	r2,-8(fp)
10008858:	10c00317 	ldw	r3,12(r2)
1000885c:	e0bfff17 	ldw	r2,-4(fp)
10008860:	10c00015 	stw	r3,0(r2)
    pReport->PacketsReceived = pResults->numSuccsessPings;
10008864:	e0bffe17 	ldw	r2,-8(fp)
10008868:	10c00217 	ldw	r3,8(r2)
1000886c:	e0bfff17 	ldw	r2,-4(fp)
10008870:	10c00115 	stw	r3,4(r2)
    pReport->MinRoundTime    = pResults->rttMin;
10008874:	e0bffe17 	ldw	r2,-8(fp)
10008878:	10c0008b 	ldhu	r3,2(r2)
1000887c:	e0bfff17 	ldw	r2,-4(fp)
10008880:	10c0020d 	sth	r3,8(r2)
    pReport->MaxRoundTime    = pResults->rttMax;
10008884:	e0bffe17 	ldw	r2,-8(fp)
10008888:	10c0010b 	ldhu	r3,4(r2)
1000888c:	e0bfff17 	ldw	r2,-4(fp)
10008890:	10c0028d 	sth	r3,10(r2)
    pReport->AvgRoundTime    = pResults->rttAvg;
10008894:	e0bffe17 	ldw	r2,-8(fp)
10008898:	10c0018b 	ldhu	r3,6(r2)
1000889c:	e0bfff17 	ldw	r2,-4(fp)
100088a0:	10c0030d 	sth	r3,12(r2)
    pReport->TestTime        = pResults->testTime;
100088a4:	e0bffe17 	ldw	r2,-8(fp)
100088a8:	10c00417 	ldw	r3,16(r2)
100088ac:	e0bfff17 	ldw	r2,-4(fp)
100088b0:	10c00415 	stw	r3,16(r2)
}
100088b4:	e037883a 	mov	sp,fp
100088b8:	df000017 	ldw	fp,0(sp)
100088bc:	dec00104 	addi	sp,sp,4
100088c0:	f800283a 	ret

100088c4 <_sl_HandleAsync_PingResponse>:

/*****************************************************************************/
/*  _sl_HandleAsync_PingResponse */
/*****************************************************************************/
void _sl_HandleAsync_PingResponse(void *pVoidBuf)
{
100088c4:	defff504 	addi	sp,sp,-44
100088c8:	dfc00a15 	stw	ra,40(sp)
100088cc:	df000915 	stw	fp,36(sp)
100088d0:	df000904 	addi	fp,sp,36
100088d4:	e13fff15 	stw	r4,-4(fp)
    _PingReportResponse_t     *pMsgArgs   = (_PingReportResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
100088d8:	e0bfff17 	ldw	r2,-4(fp)
100088dc:	10800204 	addi	r2,r2,8
100088e0:	e0bff715 	stw	r2,-36(fp)
    SlPingReport_t            pingReport;
    
    if(pPingCallBackFunc)
100088e4:	008400f4 	movhi	r2,4099
100088e8:	10a48304 	addi	r2,r2,-28148
100088ec:	10800017 	ldw	r2,0(r2)
100088f0:	10000b26 	beq	r2,zero,10008920 <_sl_HandleAsync_PingResponse+0x5c>
    {
        CopyPingResultsToReport(pMsgArgs,&pingReport);
100088f4:	e0bffa04 	addi	r2,fp,-24
100088f8:	e13ff717 	ldw	r4,-36(fp)
100088fc:	100b883a 	mov	r5,r2
10008900:	00088400 	call	10008840 <CopyPingResultsToReport>
        pPingCallBackFunc(&pingReport);
10008904:	008400f4 	movhi	r2,4099
10008908:	10a48304 	addi	r2,r2,-28148
1000890c:	10800017 	ldw	r2,0(r2)
10008910:	e0fffa04 	addi	r3,fp,-24
10008914:	1809883a 	mov	r4,r3
10008918:	103ee83a 	callr	r2
1000891c:	00005006 	br	10008a60 <_sl_HandleAsync_PingResponse+0x19c>
    }
    else
    {
       
        OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10008920:	008400f4 	movhi	r2,4099
10008924:	10a48204 	addi	r2,r2,-28152
10008928:	10800017 	ldw	r2,0(r2)
1000892c:	10802404 	addi	r2,r2,144
10008930:	1009883a 	mov	r4,r2
10008934:	01400cc4 	movi	r5,51
10008938:	01801104 	movi	r6,68
1000893c:	01c03fc4 	movi	r7,255
10008940:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10008944:	10803fcc 	andi	r2,r2,255
10008948:	1080201c 	xori	r2,r2,128
1000894c:	10bfe004 	addi	r2,r2,-128
10008950:	e0bff80d 	sth	r2,-32(fp)
10008954:	e0bff80f 	ldh	r2,-32(fp)
10008958:	10000126 	beq	r2,zero,10008960 <_sl_HandleAsync_PingResponse+0x9c>
1000895c:	003fff06 	br	1000895c <__alt_data_end+0xf000895c>
        VERIFY_SOCKET_CB(NULL != g_pCB->PingCB.PingAsync.pAsyncRsp);

		if (NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs)
10008960:	008400f4 	movhi	r2,4099
10008964:	10a48204 	addi	r2,r2,-28152
10008968:	10c00017 	ldw	r3,0(r2)
1000896c:	008400f4 	movhi	r2,4099
10008970:	10a48204 	addi	r2,r2,-28152
10008974:	10800017 	ldw	r2,0(r2)
10008978:	10802b03 	ldbu	r2,172(r2)
1000897c:	10803fcc 	andi	r2,r2,255
10008980:	10800324 	muli	r2,r2,12
10008984:	1885883a 	add	r2,r3,r2
10008988:	10800504 	addi	r2,r2,20
1000898c:	10800017 	ldw	r2,0(r2)
10008990:	10002526 	beq	r2,zero,10008a28 <_sl_HandleAsync_PingResponse+0x164>
		{
		   sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(_PingReportResponse_t));
10008994:	008400f4 	movhi	r2,4099
10008998:	10a48204 	addi	r2,r2,-28152
1000899c:	10c00017 	ldw	r3,0(r2)
100089a0:	008400f4 	movhi	r2,4099
100089a4:	10a48204 	addi	r2,r2,-28152
100089a8:	10800017 	ldw	r2,0(r2)
100089ac:	10802b03 	ldbu	r2,172(r2)
100089b0:	10803fcc 	andi	r2,r2,255
100089b4:	10800324 	muli	r2,r2,12
100089b8:	1885883a 	add	r2,r3,r2
100089bc:	10800504 	addi	r2,r2,20
100089c0:	10800017 	ldw	r2,0(r2)
100089c4:	1009883a 	mov	r4,r2
100089c8:	e17ff717 	ldw	r5,-36(fp)
100089cc:	01800504 	movi	r6,20
100089d0:	000c7840 	call	1000c784 <memcpy>
		   OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
100089d4:	008400f4 	movhi	r2,4099
100089d8:	10a48204 	addi	r2,r2,-28152
100089dc:	10c00017 	ldw	r3,0(r2)
100089e0:	008400f4 	movhi	r2,4099
100089e4:	10a48204 	addi	r2,r2,-28152
100089e8:	10800017 	ldw	r2,0(r2)
100089ec:	10802b03 	ldbu	r2,172(r2)
100089f0:	10803fcc 	andi	r2,r2,255
100089f4:	10800324 	muli	r2,r2,12
100089f8:	10800404 	addi	r2,r2,16
100089fc:	1885883a 	add	r2,r3,r2
10008a00:	1009883a 	mov	r4,r2
10008a04:	01400884 	movi	r5,34
10008a08:	000938c0 	call	1000938c <_SlNonOsSemSet>
10008a0c:	10803fcc 	andi	r2,r2,255
10008a10:	1080201c 	xori	r2,r2,128
10008a14:	10bfe004 	addi	r2,r2,-128
10008a18:	e0bff88d 	sth	r2,-30(fp)
10008a1c:	e0bff88f 	ldh	r2,-30(fp)
10008a20:	10000126 	beq	r2,zero,10008a28 <_sl_HandleAsync_PingResponse+0x164>
10008a24:	003fff06 	br	10008a24 <__alt_data_end+0xf0008a24>
		}
       OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10008a28:	008400f4 	movhi	r2,4099
10008a2c:	10a48204 	addi	r2,r2,-28152
10008a30:	10800017 	ldw	r2,0(r2)
10008a34:	10802404 	addi	r2,r2,144
10008a38:	1009883a 	mov	r4,r2
10008a3c:	01400cc4 	movi	r5,51
10008a40:	000938c0 	call	1000938c <_SlNonOsSemSet>
10008a44:	10803fcc 	andi	r2,r2,255
10008a48:	1080201c 	xori	r2,r2,128
10008a4c:	10bfe004 	addi	r2,r2,-128
10008a50:	e0bff90d 	sth	r2,-28(fp)
10008a54:	e0bff90f 	ldh	r2,-28(fp)
10008a58:	10000126 	beq	r2,zero,10008a60 <_sl_HandleAsync_PingResponse+0x19c>
10008a5c:	003fff06 	br	10008a5c <__alt_data_end+0xf0008a5c>
    }
    return;
10008a60:	0001883a 	nop
}
10008a64:	e037883a 	mov	sp,fp
10008a68:	dfc00117 	ldw	ra,4(sp)
10008a6c:	df000017 	ldw	fp,0(sp)
10008a70:	dec00204 	addi	sp,sp,8
10008a74:	f800283a 	ret

10008a78 <sl_NetAppPingStart>:
}_SlPingStatus_e;


#if _SL_INCLUDE_FUNC(sl_NetAppPingStart)
_i16 sl_NetAppPingStart(SlPingStartCommand_t* pPingParams,_u8 family,SlPingReport_t *pReport,const P_SL_DEV_PING_CALLBACK pPingCallback)
{
10008a78:	deffe904 	addi	sp,sp,-92
10008a7c:	dfc01615 	stw	ra,88(sp)
10008a80:	df001515 	stw	fp,84(sp)
10008a84:	df001504 	addi	fp,sp,84
10008a88:	e13ffc15 	stw	r4,-16(fp)
10008a8c:	2805883a 	mov	r2,r5
10008a90:	e1bffe15 	stw	r6,-8(fp)
10008a94:	e1ffff15 	stw	r7,-4(fp)
10008a98:	e0bffd05 	stb	r2,-12(fp)
    _SlCmdCtrl_t                CmdCtrl = {0, sizeof(_PingStartCommand_t), sizeof(_BasicResponse_t)};
10008a9c:	e03fed8d 	sth	zero,-74(fp)
10008aa0:	00800804 	movi	r2,32
10008aa4:	e0bfee05 	stb	r2,-72(fp)
10008aa8:	00800104 	movi	r2,4
10008aac:	e0bfee45 	stb	r2,-71(fp)
    _SlPingStartMsg_u           Msg;
    _PingReportResponse_t       PingRsp;
	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
10008ab0:	00800284 	movi	r2,10
10008ab4:	e0bfeb05 	stb	r2,-84(fp)

    if( 0 == pPingParams->Ip ) // stop any ongoing ping 
10008ab8:	e0bffc17 	ldw	r2,-16(fp)
10008abc:	10800417 	ldw	r2,16(r2)
10008ac0:	1000031e 	bne	r2,zero,10008ad0 <sl_NetAppPingStart+0x58>
    {
       return _SlDrvBasicCmd(SL_OPCODE_NETAPP_PINGSTOP); 
10008ac4:	012708d4 	movui	r4,39971
10008ac8:	00067bc0 	call	100067bc <_SlDrvBasicCmd>
10008acc:	00009906 	br	10008d34 <sl_NetAppPingStart+0x2bc>
    }

    if(SL_AF_INET == family)
10008ad0:	e0bffd03 	ldbu	r2,-12(fp)
10008ad4:	10800098 	cmpnei	r2,r2,2
10008ad8:	10000b1e 	bne	r2,zero,10008b08 <sl_NetAppPingStart+0x90>
    {
        CmdCtrl.Opcode = SL_OPCODE_NETAPP_PINGSTART;
10008adc:	00a70844 	movi	r2,-25567
10008ae0:	e0bfed8d 	sth	r2,-74(fp)
        sl_Memcpy(&Msg.Cmd.ip0, &pPingParams->Ip, SL_IPV4_ADDRESS_SIZE);
10008ae4:	e0bffc17 	ldw	r2,-16(fp)
10008ae8:	10c00404 	addi	r3,r2,16
10008aec:	e0bfef04 	addi	r2,fp,-68
10008af0:	10800404 	addi	r2,r2,16
10008af4:	1009883a 	mov	r4,r2
10008af8:	180b883a 	mov	r5,r3
10008afc:	01800104 	movi	r6,4
10008b00:	000c7840 	call	1000c784 <memcpy>
10008b04:	00000a06 	br	10008b30 <sl_NetAppPingStart+0xb8>
    }
    else
    {
        CmdCtrl.Opcode = SL_OPCODE_NETAPP_PINGSTART_V6;
10008b08:	00a78844 	movi	r2,-25055
10008b0c:	e0bfed8d 	sth	r2,-74(fp)
        sl_Memcpy(&Msg.Cmd.ip0, &pPingParams->Ip, SL_IPV6_ADDRESS_SIZE);
10008b10:	e0bffc17 	ldw	r2,-16(fp)
10008b14:	10c00404 	addi	r3,r2,16
10008b18:	e0bfef04 	addi	r2,fp,-68
10008b1c:	10800404 	addi	r2,r2,16
10008b20:	1009883a 	mov	r4,r2
10008b24:	180b883a 	mov	r5,r3
10008b28:	01800404 	movi	r6,16
10008b2c:	000c7840 	call	1000c784 <memcpy>
    }

    Msg.Cmd.pingIntervalTime        = pPingParams->PingIntervalTime;
10008b30:	e0bffc17 	ldw	r2,-16(fp)
10008b34:	10800017 	ldw	r2,0(r2)
10008b38:	e0bfef15 	stw	r2,-68(fp)
    Msg.Cmd.PingSize                = pPingParams->PingSize;
10008b3c:	e0bffc17 	ldw	r2,-16(fp)
10008b40:	1080010b 	ldhu	r2,4(r2)
10008b44:	e0bff00d 	sth	r2,-64(fp)
    Msg.Cmd.pingRequestTimeout      = pPingParams->PingRequestTimeout;
10008b48:	e0bffc17 	ldw	r2,-16(fp)
10008b4c:	1080018b 	ldhu	r2,6(r2)
10008b50:	e0bff08d 	sth	r2,-62(fp)
    Msg.Cmd.totalNumberOfAttempts   = pPingParams->TotalNumberOfAttempts;
10008b54:	e0bffc17 	ldw	r2,-16(fp)
10008b58:	10800217 	ldw	r2,8(r2)
10008b5c:	e0bff115 	stw	r2,-60(fp)
    Msg.Cmd.flags                   = pPingParams->Flags;
10008b60:	e0bffc17 	ldw	r2,-16(fp)
10008b64:	10800317 	ldw	r2,12(r2)
10008b68:	e0bff215 	stw	r2,-56(fp)

    if( pPingCallback )
10008b6c:	e0bfff17 	ldw	r2,-4(fp)
10008b70:	10000526 	beq	r2,zero,10008b88 <sl_NetAppPingStart+0x110>
    {	
       pPingCallBackFunc = pPingCallback;
10008b74:	008400f4 	movhi	r2,4099
10008b78:	10a48304 	addi	r2,r2,-28148
10008b7c:	e0ffff17 	ldw	r3,-4(fp)
10008b80:	10c00015 	stw	r3,0(r2)
10008b84:	00003306 	br	10008c54 <sl_NetAppPingStart+0x1dc>
    }
    else
    {
       /*Use Obj to issue the command, if not available try later */
	   ObjIdx = (_u8)_SlDrvWaitForPoolObj(PING_ID,SL_MAX_SOCKETS);
10008b88:	01000344 	movi	r4,13
10008b8c:	01400204 	movi	r5,8
10008b90:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
10008b94:	e0bfeb05 	stb	r2,-84(fp)
	   if (MAX_CONCURRENT_ACTIONS == ObjIdx)
10008b98:	e0bfeb03 	ldbu	r2,-84(fp)
10008b9c:	10800298 	cmpnei	r2,r2,10
10008ba0:	1000021e 	bne	r2,zero,10008bac <sl_NetAppPingStart+0x134>
	   {
		  return SL_POOL_IS_EMPTY;
10008ba4:	00be0c04 	movi	r2,-2000
10008ba8:	00006206 	br	10008d34 <sl_NetAppPingStart+0x2bc>
	   }
       OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10008bac:	008400f4 	movhi	r2,4099
10008bb0:	10a48204 	addi	r2,r2,-28152
10008bb4:	10800017 	ldw	r2,0(r2)
10008bb8:	10802404 	addi	r2,r2,144
10008bbc:	1009883a 	mov	r4,r2
10008bc0:	01400cc4 	movi	r5,51
10008bc4:	01801104 	movi	r6,68
10008bc8:	01c03fc4 	movi	r7,255
10008bcc:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10008bd0:	10803fcc 	andi	r2,r2,255
10008bd4:	1080201c 	xori	r2,r2,128
10008bd8:	10bfe004 	addi	r2,r2,-128
10008bdc:	e0bfeb8d 	sth	r2,-82(fp)
10008be0:	e0bfeb8f 	ldh	r2,-82(fp)
10008be4:	10000126 	beq	r2,zero,10008bec <sl_NetAppPingStart+0x174>
10008be8:	003fff06 	br	10008be8 <__alt_data_end+0xf0008be8>
        /* async response handler for non callback mode */
       g_pCB->ObjPool[ObjIdx].pRespArgs = (_u8 *)&PingRsp;
10008bec:	008400f4 	movhi	r2,4099
10008bf0:	10a48204 	addi	r2,r2,-28152
10008bf4:	10c00017 	ldw	r3,0(r2)
10008bf8:	e0bfeb03 	ldbu	r2,-84(fp)
10008bfc:	10800324 	muli	r2,r2,12
10008c00:	1885883a 	add	r2,r3,r2
10008c04:	10800504 	addi	r2,r2,20
10008c08:	e0fff704 	addi	r3,fp,-36
10008c0c:	10c00015 	stw	r3,0(r2)
       pPingCallBackFunc = NULL;
10008c10:	008400f4 	movhi	r2,4099
10008c14:	10a48304 	addi	r2,r2,-28148
10008c18:	10000015 	stw	zero,0(r2)
       OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10008c1c:	008400f4 	movhi	r2,4099
10008c20:	10a48204 	addi	r2,r2,-28152
10008c24:	10800017 	ldw	r2,0(r2)
10008c28:	10802404 	addi	r2,r2,144
10008c2c:	1009883a 	mov	r4,r2
10008c30:	01400cc4 	movi	r5,51
10008c34:	000938c0 	call	1000938c <_SlNonOsSemSet>
10008c38:	10803fcc 	andi	r2,r2,255
10008c3c:	1080201c 	xori	r2,r2,128
10008c40:	10bfe004 	addi	r2,r2,-128
10008c44:	e0bfec0d 	sth	r2,-80(fp)
10008c48:	e0bfec0f 	ldh	r2,-80(fp)
10008c4c:	10000126 	beq	r2,zero,10008c54 <sl_NetAppPingStart+0x1dc>
10008c50:	003fff06 	br	10008c50 <__alt_data_end+0xf0008c50>
    }


    VERIFY_RET_OK(_SlDrvCmdOp(&CmdCtrl, &Msg, NULL));
10008c54:	e0ffed84 	addi	r3,fp,-74
10008c58:	e0bfef04 	addi	r2,fp,-68
10008c5c:	1809883a 	mov	r4,r3
10008c60:	100b883a 	mov	r5,r2
10008c64:	000d883a 	mov	r6,zero
10008c68:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10008c6c:	e0bfec8d 	sth	r2,-78(fp)
10008c70:	e0bfec8f 	ldh	r2,-78(fp)
10008c74:	10000126 	beq	r2,zero,10008c7c <sl_NetAppPingStart+0x204>
10008c78:	003fff06 	br	10008c78 <__alt_data_end+0xf0008c78>
	/*send the command*/
    if(CMD_PING_TEST_RUNNING == (_i16)Msg.Rsp.status || CMD_PING_TEST_STOPPED == (_i16)Msg.Rsp.status )
10008c7c:	e0bfef0b 	ldhu	r2,-68(fp)
10008c80:	10bfffcc 	andi	r2,r2,65535
10008c84:	10000426 	beq	r2,zero,10008c98 <sl_NetAppPingStart+0x220>
10008c88:	e0bfef0b 	ldhu	r2,-68(fp)
10008c8c:	10bfffcc 	andi	r2,r2,65535
10008c90:	10800058 	cmpnei	r2,r2,1
10008c94:	1000211e 	bne	r2,zero,10008d1c <sl_NetAppPingStart+0x2a4>
    {
        /* block waiting for results if no callback function is used */
        if( NULL == pPingCallback )
10008c98:	e0bfff17 	ldw	r2,-4(fp)
10008c9c:	10001e1e 	bne	r2,zero,10008d18 <sl_NetAppPingStart+0x2a0>
        {
            OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
10008ca0:	008400f4 	movhi	r2,4099
10008ca4:	10a48204 	addi	r2,r2,-28152
10008ca8:	10c00017 	ldw	r3,0(r2)
10008cac:	e0bfeb03 	ldbu	r2,-84(fp)
10008cb0:	10800324 	muli	r2,r2,12
10008cb4:	10800404 	addi	r2,r2,16
10008cb8:	1885883a 	add	r2,r3,r2
10008cbc:	1009883a 	mov	r4,r2
10008cc0:	01400884 	movi	r5,34
10008cc4:	01800444 	movi	r6,17
10008cc8:	01c03fc4 	movi	r7,255
10008ccc:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10008cd0:	10803fcc 	andi	r2,r2,255
10008cd4:	1080201c 	xori	r2,r2,128
10008cd8:	10bfe004 	addi	r2,r2,-128
10008cdc:	e0bfed0d 	sth	r2,-76(fp)
10008ce0:	e0bfed0f 	ldh	r2,-76(fp)
10008ce4:	10000126 	beq	r2,zero,10008cec <sl_NetAppPingStart+0x274>
10008ce8:	003fff06 	br	10008ce8 <__alt_data_end+0xf0008ce8>
            if( SL_OS_RET_CODE_OK == (_i16)PingRsp.status )
10008cec:	e0bff70b 	ldhu	r2,-36(fp)
10008cf0:	10bfffcc 	andi	r2,r2,65535
10008cf4:	1000041e 	bne	r2,zero,10008d08 <sl_NetAppPingStart+0x290>
            {
                CopyPingResultsToReport(&PingRsp,pReport);
10008cf8:	e0bff704 	addi	r2,fp,-36
10008cfc:	1009883a 	mov	r4,r2
10008d00:	e17ffe17 	ldw	r5,-8(fp)
10008d04:	00088400 	call	10008840 <CopyPingResultsToReport>
            }
            _SlDrvReleasePoolObj(ObjIdx);
10008d08:	e0bfeb03 	ldbu	r2,-84(fp)
10008d0c:	1009883a 	mov	r4,r2
10008d10:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    VERIFY_RET_OK(_SlDrvCmdOp(&CmdCtrl, &Msg, NULL));
	/*send the command*/
    if(CMD_PING_TEST_RUNNING == (_i16)Msg.Rsp.status || CMD_PING_TEST_STOPPED == (_i16)Msg.Rsp.status )
    {
        /* block waiting for results if no callback function is used */
        if( NULL == pPingCallback )
10008d14:	00000606 	br	10008d30 <sl_NetAppPingStart+0x2b8>
10008d18:	00000506 	br	10008d30 <sl_NetAppPingStart+0x2b8>
            _SlDrvReleasePoolObj(ObjIdx);
        }
    }
    else
    {   /* ping failure, no async response */
        if( NULL == pPingCallback ) 
10008d1c:	e0bfff17 	ldw	r2,-4(fp)
10008d20:	1000031e 	bne	r2,zero,10008d30 <sl_NetAppPingStart+0x2b8>
        {	
            _SlDrvReleasePoolObj(ObjIdx);
10008d24:	e0bfeb03 	ldbu	r2,-84(fp)
10008d28:	1009883a 	mov	r4,r2
10008d2c:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
        }
    }

    return Msg.Rsp.status;
10008d30:	e0bfef0b 	ldhu	r2,-68(fp)
}
10008d34:	e037883a 	mov	sp,fp
10008d38:	dfc00117 	ldw	ra,4(sp)
10008d3c:	df000017 	ldw	fp,0(sp)
10008d40:	dec00204 	addi	sp,sp,8
10008d44:	f800283a 	ret

10008d48 <sl_NetAppSet>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_NetAppSet)
_i32 sl_NetAppSet(_u8 AppId ,_u8 Option,_u8 OptionLen, _u8 *pOptionValue)
{
10008d48:	defff304 	addi	sp,sp,-52
10008d4c:	dfc00c15 	stw	ra,48(sp)
10008d50:	df000b15 	stw	fp,44(sp)
10008d54:	df000b04 	addi	fp,sp,44
10008d58:	2807883a 	mov	r3,r5
10008d5c:	3005883a 	mov	r2,r6
10008d60:	e1ffff15 	stw	r7,-4(fp)
10008d64:	e13ffc05 	stb	r4,-16(fp)
10008d68:	e0fffd05 	stb	r3,-12(fp)
10008d6c:	e0bffe05 	stb	r2,-8(fp)
    _SlNetAppMsgSet_u         Msg;
    _SlCmdExt_t               CmdExt;

	CmdExt.TxPayloadLen = (OptionLen+3) & (~3);
10008d70:	e0bffe03 	ldbu	r2,-8(fp)
10008d74:	108000c4 	addi	r2,r2,3
10008d78:	1007883a 	mov	r3,r2
10008d7c:	00bfff04 	movi	r2,-4
10008d80:	1884703a 	and	r2,r3,r2
10008d84:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
10008d88:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = (_u8 *)pOptionValue;
10008d8c:	e0bfff17 	ldw	r2,-4(fp)
10008d90:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
10008d94:	e03ffb15 	stw	zero,-20(fp)


    Msg.Cmd.AppId    = AppId;
10008d98:	e0bffc03 	ldbu	r2,-16(fp)
10008d9c:	e0bff60d 	sth	r2,-40(fp)
    Msg.Cmd.ConfigLen   = OptionLen;
10008da0:	e0bffe03 	ldbu	r2,-8(fp)
10008da4:	e0bff70d 	sth	r2,-36(fp)
	Msg.Cmd.ConfigOpt   = Option;
10008da8:	e0bffd03 	ldbu	r2,-12(fp)
10008dac:	e0bff68d 	sth	r2,-38(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetAppSetCmdCtrl, &Msg, &CmdExt));
10008db0:	e0fff584 	addi	r3,fp,-42
10008db4:	e0bff804 	addi	r2,fp,-32
10008db8:	d1201904 	addi	r4,gp,-32668
10008dbc:	180b883a 	mov	r5,r3
10008dc0:	100d883a 	mov	r6,r2
10008dc4:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10008dc8:	e0bff50d 	sth	r2,-44(fp)
10008dcc:	e0bff50f 	ldh	r2,-44(fp)
10008dd0:	10000126 	beq	r2,zero,10008dd8 <sl_NetAppSet+0x90>
10008dd4:	003fff06 	br	10008dd4 <__alt_data_end+0xf0008dd4>

    return (_i16)Msg.Rsp.status;
10008dd8:	e0bff58b 	ldhu	r2,-42(fp)
10008ddc:	10bfffcc 	andi	r2,r2,65535
10008de0:	10a0001c 	xori	r2,r2,32768
10008de4:	10a00004 	addi	r2,r2,-32768
}
10008de8:	e037883a 	mov	sp,fp
10008dec:	dfc00117 	ldw	ra,4(sp)
10008df0:	df000017 	ldw	fp,0(sp)
10008df4:	dec00204 	addi	sp,sp,8
10008df8:	f800283a 	ret

10008dfc <sl_NetAppSendTokenValue>:
    sizeof(sl_NetAppHttpServerSendToken_t),
    sizeof(_BasicResponse_t)
};

_u16 sl_NetAppSendTokenValue(slHttpServerData_t * Token_value)
{
10008dfc:	defff204 	addi	sp,sp,-56
10008e00:	dfc00d15 	stw	ra,52(sp)
10008e04:	df000c15 	stw	fp,48(sp)
10008e08:	df000c04 	addi	fp,sp,48
10008e0c:	e13fff15 	stw	r4,-4(fp)
	_SlNetAppMsgSendTokenValue_u    Msg;
    _SlCmdExt_t						CmdExt;

	CmdExt.TxPayloadLen = (Token_value->value_len+3) & (~3);
10008e10:	e0bfff17 	ldw	r2,-4(fp)
10008e14:	10800003 	ldbu	r2,0(r2)
10008e18:	10803fcc 	andi	r2,r2,255
10008e1c:	108000c4 	addi	r2,r2,3
10008e20:	1007883a 	mov	r3,r2
10008e24:	00bfff04 	movi	r2,-4
10008e28:	1884703a 	and	r2,r3,r2
10008e2c:	e0bffb0d 	sth	r2,-20(fp)
    CmdExt.RxPayloadLen = 0;
10008e30:	e03ffb8d 	sth	zero,-18(fp)
	CmdExt.pTxPayload = (_u8 *) Token_value->token_value;
10008e34:	e0bfff17 	ldw	r2,-4(fp)
10008e38:	10800117 	ldw	r2,4(r2)
10008e3c:	e0bffd15 	stw	r2,-12(fp)
    CmdExt.pRxPayload = NULL;
10008e40:	e03ffe15 	stw	zero,-8(fp)

	Msg.Cmd.token_value_len = Token_value->value_len;
10008e44:	e0bfff17 	ldw	r2,-4(fp)
10008e48:	10800003 	ldbu	r2,0(r2)
10008e4c:	e0bff485 	stb	r2,-46(fp)
	Msg.Cmd.token_name_len = Token_value->name_len;
10008e50:	e0bfff17 	ldw	r2,-4(fp)
10008e54:	10800043 	ldbu	r2,1(r2)
10008e58:	e0bff4c5 	stb	r2,-45(fp)
	sl_Memcpy(&Msg.Cmd.token_name[0], Token_value->token_name, Token_value->name_len);
10008e5c:	e0bfff17 	ldw	r2,-4(fp)
10008e60:	11400217 	ldw	r5,8(r2)
10008e64:	e0bfff17 	ldw	r2,-4(fp)
10008e68:	10800043 	ldbu	r2,1(r2)
10008e6c:	10c03fcc 	andi	r3,r2,255
10008e70:	e0bff484 	addi	r2,fp,-46
10008e74:	10800084 	addi	r2,r2,2
10008e78:	1009883a 	mov	r4,r2
10008e7c:	180d883a 	mov	r6,r3
10008e80:	000c7840 	call	1000c784 <memcpy>
	

	VERIFY_RET_OK(_SlDrvCmdSend((_SlCmdCtrl_t *)&_SlNetAppSendTokenValueCmdCtrl, &Msg, &CmdExt));
10008e84:	e0fff484 	addi	r3,fp,-46
10008e88:	e0bffb04 	addi	r2,fp,-20
10008e8c:	d1201a04 	addi	r4,gp,-32664
10008e90:	180b883a 	mov	r5,r3
10008e94:	100d883a 	mov	r6,r2
10008e98:	00041e80 	call	100041e8 <_SlDrvCmdSend>
10008e9c:	e0bff40d 	sth	r2,-48(fp)
10008ea0:	e0bff40f 	ldh	r2,-48(fp)
10008ea4:	10000126 	beq	r2,zero,10008eac <sl_NetAppSendTokenValue+0xb0>
10008ea8:	003fff06 	br	10008ea8 <__alt_data_end+0xf0008ea8>

	return Msg.Rsp.status;
10008eac:	e0bff48b 	ldhu	r2,-46(fp)
}
10008eb0:	e037883a 	mov	sp,fp
10008eb4:	dfc00117 	ldw	ra,4(sp)
10008eb8:	df000017 	ldw	fp,0(sp)
10008ebc:	dec00204 	addi	sp,sp,8
10008ec0:	f800283a 	ret

10008ec4 <sl_NetAppGet>:
    sizeof(_NetAppSetGet_t)
};

#if _SL_INCLUDE_FUNC(sl_NetAppGet)
_i32 sl_NetAppGet(_u8 AppId, _u8 Option,_u8 *pOptionLen, _u8 *pOptionValue)
{
10008ec4:	defff304 	addi	sp,sp,-52
10008ec8:	dfc00c15 	stw	ra,48(sp)
10008ecc:	df000b15 	stw	fp,44(sp)
10008ed0:	df000b04 	addi	fp,sp,44
10008ed4:	2007883a 	mov	r3,r4
10008ed8:	2805883a 	mov	r2,r5
10008edc:	e1bffe15 	stw	r6,-8(fp)
10008ee0:	e1ffff15 	stw	r7,-4(fp)
10008ee4:	e0fffc05 	stb	r3,-16(fp)
10008ee8:	e0bffd05 	stb	r2,-12(fp)
    _SlNetAppMsgGet_u         Msg;
    _SlCmdExt_t               CmdExt;

       if (*pOptionLen == 0)
10008eec:	e0bffe17 	ldw	r2,-8(fp)
10008ef0:	10800003 	ldbu	r2,0(r2)
10008ef4:	10803fcc 	andi	r2,r2,255
10008ef8:	1000021e 	bne	r2,zero,10008f04 <sl_NetAppGet+0x40>
       {
              return SL_EZEROLEN;
10008efc:	00be0b84 	movi	r2,-2002
10008f00:	00002a06 	br	10008fac <sl_NetAppGet+0xe8>
       }
    CmdExt.TxPayloadLen = 0;
10008f04:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = *pOptionLen;
10008f08:	e0bffe17 	ldw	r2,-8(fp)
10008f0c:	10800003 	ldbu	r2,0(r2)
10008f10:	10803fcc 	andi	r2,r2,255
10008f14:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
10008f18:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)pOptionValue;
10008f1c:	e0bfff17 	ldw	r2,-4(fp)
10008f20:	e0bffb15 	stw	r2,-20(fp)
	CmdExt.ActualRxPayloadLen = 0;
10008f24:	e03ff90d 	sth	zero,-28(fp)

    Msg.Cmd.AppId    = AppId;
10008f28:	e0bffc03 	ldbu	r2,-16(fp)
10008f2c:	e0bff60d 	sth	r2,-40(fp)
    Msg.Cmd.ConfigOpt   = Option;
10008f30:	e0bffd03 	ldbu	r2,-12(fp)
10008f34:	e0bff68d 	sth	r2,-38(fp)
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetAppGetCmdCtrl, &Msg, &CmdExt));
10008f38:	e0fff584 	addi	r3,fp,-42
10008f3c:	e0bff804 	addi	r2,fp,-32
10008f40:	d1201b04 	addi	r4,gp,-32660
10008f44:	180b883a 	mov	r5,r3
10008f48:	100d883a 	mov	r6,r2
10008f4c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10008f50:	e0bff50d 	sth	r2,-44(fp)
10008f54:	e0bff50f 	ldh	r2,-44(fp)
10008f58:	10000126 	beq	r2,zero,10008f60 <sl_NetAppGet+0x9c>
10008f5c:	003fff06 	br	10008f5c <__alt_data_end+0xf0008f5c>
    

       if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
10008f60:	e0fff88b 	ldhu	r3,-30(fp)
10008f64:	e0bff90b 	ldhu	r2,-28(fp)
10008f68:	18ffffcc 	andi	r3,r3,65535
10008f6c:	10bfffcc 	andi	r2,r2,65535
10008f70:	1880062e 	bgeu	r3,r2,10008f8c <sl_NetAppGet+0xc8>
       {
              *pOptionLen = (_u8)CmdExt.RxPayloadLen;
10008f74:	e0bff88b 	ldhu	r2,-30(fp)
10008f78:	1007883a 	mov	r3,r2
10008f7c:	e0bffe17 	ldw	r2,-8(fp)
10008f80:	10c00005 	stb	r3,0(r2)
              return SL_ESMALLBUF;
10008f84:	00be0bc4 	movi	r2,-2001
10008f88:	00000806 	br	10008fac <sl_NetAppGet+0xe8>
       }
       else
       {
              *pOptionLen = (_u8)CmdExt.ActualRxPayloadLen;
10008f8c:	e0bff90b 	ldhu	r2,-28(fp)
10008f90:	1007883a 	mov	r3,r2
10008f94:	e0bffe17 	ldw	r2,-8(fp)
10008f98:	10c00005 	stb	r3,0(r2)
       }
  
    return (_i16)Msg.Rsp.Status;
10008f9c:	e0bff58b 	ldhu	r2,-42(fp)
10008fa0:	10bfffcc 	andi	r2,r2,65535
10008fa4:	10a0001c 	xori	r2,r2,32768
10008fa8:	10a00004 	addi	r2,r2,-32768
}
10008fac:	e037883a 	mov	sp,fp
10008fb0:	dfc00117 	ldw	ra,4(sp)
10008fb4:	df000017 	ldw	fp,0(sp)
10008fb8:	dec00204 	addi	sp,sp,8
10008fbc:	f800283a 	ret

10008fc0 <_SlDrvNetAppEventHandler>:

/*****************************************************************************/
/* _SlDrvNetAppEventHandler */
/*****************************************************************************/
void _SlDrvNetAppEventHandler(void *pArgs)
{
10008fc0:	deffeb04 	addi	sp,sp,-84
10008fc4:	dfc01415 	stw	ra,80(sp)
10008fc8:	df001315 	stw	fp,76(sp)
10008fcc:	df001304 	addi	fp,sp,76
10008fd0:	e13fff15 	stw	r4,-4(fp)
    _SlResponseHeader_t     *pHdr       = (_SlResponseHeader_t *)pArgs;
10008fd4:	e0bfff17 	ldw	r2,-4(fp)
10008fd8:	e0bfed15 	stw	r2,-76(fp)
#ifdef sl_HttpServerCallback   
    SlHttpServerEvent_t		httpServerEvent;
    SlHttpServerResponse_t	httpServerResponse;
#endif
    switch(pHdr->GenHeader.Opcode)
10008fdc:	e0bfed17 	ldw	r2,-76(fp)
10008fe0:	1080000b 	ldhu	r2,0(r2)
10008fe4:	10bfffcc 	andi	r2,r2,65535
10008fe8:	10c60c20 	cmpeqi	r3,r2,6192
10008fec:	18003e1e 	bne	r3,zero,100090e8 <_SlDrvNetAppEventHandler+0x128>
10008ff0:	10c60c48 	cmpgei	r3,r2,6193
10008ff4:	1800071e 	bne	r3,zero,10009014 <_SlDrvNetAppEventHandler+0x54>
10008ff8:	10c608a0 	cmpeqi	r3,r2,6178
10008ffc:	1800121e 	bne	r3,zero,10009048 <_SlDrvNetAppEventHandler+0x88>
10009000:	10c60ba0 	cmpeqi	r3,r2,6190
10009004:	1800131e 	bne	r3,zero,10009054 <_SlDrvNetAppEventHandler+0x94>
10009008:	10860820 	cmpeqi	r2,r2,6176
1000900c:	1000081e 	bne	r2,zero,10009030 <_SlDrvNetAppEventHandler+0x70>
10009010:	00005f06 	br	10009190 <_SlDrvNetAppEventHandler+0x1d0>
10009014:	10c68820 	cmpeqi	r3,r2,6688
10009018:	1800051e 	bne	r3,zero,10009030 <_SlDrvNetAppEventHandler+0x70>
1000901c:	10c68d60 	cmpeqi	r3,r2,6709
10009020:	1800061e 	bne	r3,zero,1000903c <_SlDrvNetAppEventHandler+0x7c>
10009024:	10860d60 	cmpeqi	r2,r2,6197
10009028:	1000041e 	bne	r2,zero,1000903c <_SlDrvNetAppEventHandler+0x7c>
1000902c:	00005806 	br	10009190 <_SlDrvNetAppEventHandler+0x1d0>
    {
        case SL_OPCODE_NETAPP_DNSGETHOSTBYNAMEASYNCRESPONSE:
        case SL_OPCODE_NETAPP_DNSGETHOSTBYNAMEASYNCRESPONSE_V6:
            _sl_HandleAsync_DnsGetHostByName(pArgs);
10009030:	e13fff17 	ldw	r4,-4(fp)
10009034:	00086780 	call	10008678 <_sl_HandleAsync_DnsGetHostByName>
            break;
10009038:	00005606 	br	10009194 <_SlDrvNetAppEventHandler+0x1d4>
        case SL_OPCODE_NETAPP_MDNSGETHOSTBYSERVICEASYNCRESPONSE:
        case SL_OPCODE_NETAPP_MDNSGETHOSTBYSERVICEASYNCRESPONSE_V6:
            _sl_HandleAsync_DnsGetHostByService(pArgs);
1000903c:	e13fff17 	ldw	r4,-4(fp)
10009040:	00082440 	call	10008244 <_sl_HandleAsync_DnsGetHostByService>
            break;
10009044:	00005306 	br	10009194 <_SlDrvNetAppEventHandler+0x1d4>
        case SL_OPCODE_NETAPP_PINGREPORTREQUESTRESPONSE:
            _sl_HandleAsync_PingResponse(pArgs);
10009048:	e13fff17 	ldw	r4,-4(fp)
1000904c:	00088c40 	call	100088c4 <_sl_HandleAsync_PingResponse>
            break;
10009050:	00005006 	br	10009194 <_SlDrvNetAppEventHandler+0x1d4>
		case SL_OPCODE_NETAPP_HTTPGETTOKENVALUE:
		{
#ifdef sl_HttpServerCallback                  
			_u8 *pTokenName;
			slHttpServerData_t Token_value;
			sl_NetAppHttpServerGetToken_t *httpGetToken = (sl_NetAppHttpServerGetToken_t *)_SL_RESP_ARGS_START(pHdr);
10009054:	e0bfed17 	ldw	r2,-76(fp)
10009058:	10800204 	addi	r2,r2,8
1000905c:	e0bfee15 	stw	r2,-72(fp)
                        pTokenName = (_u8 *)((sl_NetAppHttpServerGetToken_t *)httpGetToken + 1);
10009060:	e0bfee17 	ldw	r2,-72(fp)
10009064:	10800104 	addi	r2,r2,4
10009068:	e0bfef15 	stw	r2,-68(fp)

			httpServerResponse.Response = SL_NETAPP_HTTPSETTOKENVALUE;
1000906c:	00800044 	movi	r2,1
10009070:	e0bff915 	stw	r2,-28(fp)
			httpServerResponse.ResponseData.token_value.len = MAX_TOKEN_VALUE_LEN;
10009074:	00801004 	movi	r2,64
10009078:	e0bffa05 	stb	r2,-24(fp)
			httpServerResponse.ResponseData.token_value.data = (_u8 *)_SL_RESP_ARGS_START(pHdr) + MAX_TOKEN_NAME_LEN; //Reuse the async buffer for getting the token value response from the user
1000907c:	e0bfed17 	ldw	r2,-76(fp)
10009080:	10800704 	addi	r2,r2,28
10009084:	e0bffb15 	stw	r2,-20(fp)

                        httpServerEvent.Event = SL_NETAPP_HTTPGETTOKENVALUE_EVENT;
10009088:	00800044 	movi	r2,1
1000908c:	e0bff215 	stw	r2,-56(fp)
			httpServerEvent.EventData.httpTokenName.len = httpGetToken->token_name_len;
10009090:	e0bfee17 	ldw	r2,-72(fp)
10009094:	10800003 	ldbu	r2,0(r2)
10009098:	e0bff305 	stb	r2,-52(fp)
			httpServerEvent.EventData.httpTokenName.data = pTokenName;
1000909c:	e0bfef17 	ldw	r2,-68(fp)
100090a0:	e0bff415 	stw	r2,-48(fp)

			Token_value.token_name =  pTokenName;
100090a4:	e0bfef17 	ldw	r2,-68(fp)
100090a8:	e0bffe15 	stw	r2,-8(fp)

			sl_HttpServerCallback (&httpServerEvent, &httpServerResponse);
100090ac:	e0fff204 	addi	r3,fp,-56
100090b0:	e0bff904 	addi	r2,fp,-28
100090b4:	1809883a 	mov	r4,r3
100090b8:	100b883a 	mov	r5,r2
100090bc:	00018900 	call	10001890 <SimpleLinkHttpServerCallback>

			Token_value.value_len = httpServerResponse.ResponseData.token_value.len;
100090c0:	e0bffa03 	ldbu	r2,-24(fp)
100090c4:	e0bffc05 	stb	r2,-16(fp)
			Token_value.name_len = httpServerEvent.EventData.httpTokenName.len;
100090c8:	e0bff303 	ldbu	r2,-52(fp)
100090cc:	e0bffc45 	stb	r2,-15(fp)

			Token_value.token_value = httpServerResponse.ResponseData.token_value.data;
100090d0:	e0bffb17 	ldw	r2,-20(fp)
100090d4:	e0bffd15 	stw	r2,-12(fp)
			    

			sl_NetAppSendTokenValue(&Token_value);
100090d8:	e0bffc04 	addi	r2,fp,-16
100090dc:	1009883a 	mov	r4,r2
100090e0:	0008dfc0 	call	10008dfc <sl_NetAppSendTokenValue>
#endif
		}
		break;
100090e4:	00002b06 	br	10009194 <_SlDrvNetAppEventHandler+0x1d4>
		case SL_OPCODE_NETAPP_HTTPPOSTTOKENVALUE:
		{
#ifdef sl_HttpServerCallback                  
			_u8 *pPostParams;

			sl_NetAppHttpServerPostToken_t *httpPostTokenArgs = (sl_NetAppHttpServerPostToken_t *)_SL_RESP_ARGS_START(pHdr);
100090e8:	e0bfed17 	ldw	r2,-76(fp)
100090ec:	10800204 	addi	r2,r2,8
100090f0:	e0bff015 	stw	r2,-64(fp)
			pPostParams = (_u8 *)((sl_NetAppHttpServerPostToken_t *)httpPostTokenArgs + 1);
100090f4:	e0bff017 	ldw	r2,-64(fp)
100090f8:	10800104 	addi	r2,r2,4
100090fc:	e0bff115 	stw	r2,-60(fp)

			httpServerEvent.Event = SL_NETAPP_HTTPPOSTTOKENVALUE_EVENT;
10009100:	00800084 	movi	r2,2
10009104:	e0bff215 	stw	r2,-56(fp)

			httpServerEvent.EventData.httpPostData.action.len = httpPostTokenArgs->post_action_len;
10009108:	e0bff017 	ldw	r2,-64(fp)
1000910c:	10800003 	ldbu	r2,0(r2)
10009110:	e0bff305 	stb	r2,-52(fp)
			httpServerEvent.EventData.httpPostData.action.data = pPostParams;
10009114:	e0bff117 	ldw	r2,-60(fp)
10009118:	e0bff415 	stw	r2,-48(fp)
			pPostParams+=httpPostTokenArgs->post_action_len;
1000911c:	e0bff017 	ldw	r2,-64(fp)
10009120:	10800003 	ldbu	r2,0(r2)
10009124:	10803fcc 	andi	r2,r2,255
10009128:	e0fff117 	ldw	r3,-60(fp)
1000912c:	1885883a 	add	r2,r3,r2
10009130:	e0bff115 	stw	r2,-60(fp)

			httpServerEvent.EventData.httpPostData.token_name.len = httpPostTokenArgs->token_name_len;
10009134:	e0bff017 	ldw	r2,-64(fp)
10009138:	10800043 	ldbu	r2,1(r2)
1000913c:	e0bff505 	stb	r2,-44(fp)
			httpServerEvent.EventData.httpPostData.token_name.data = pPostParams;
10009140:	e0bff117 	ldw	r2,-60(fp)
10009144:	e0bff615 	stw	r2,-40(fp)
			pPostParams+=httpPostTokenArgs->token_name_len;
10009148:	e0bff017 	ldw	r2,-64(fp)
1000914c:	10800043 	ldbu	r2,1(r2)
10009150:	10803fcc 	andi	r2,r2,255
10009154:	e0fff117 	ldw	r3,-60(fp)
10009158:	1885883a 	add	r2,r3,r2
1000915c:	e0bff115 	stw	r2,-60(fp)

			httpServerEvent.EventData.httpPostData.token_value.len = httpPostTokenArgs->token_value_len;
10009160:	e0bff017 	ldw	r2,-64(fp)
10009164:	10800083 	ldbu	r2,2(r2)
10009168:	e0bff705 	stb	r2,-36(fp)
			httpServerEvent.EventData.httpPostData.token_value.data = pPostParams;
1000916c:	e0bff117 	ldw	r2,-60(fp)
10009170:	e0bff815 	stw	r2,-32(fp)

			httpServerResponse.Response = SL_NETAPP_RESPONSE_NONE;
10009174:	e03ff915 	stw	zero,-28(fp)


			sl_HttpServerCallback (&httpServerEvent, &httpServerResponse);
10009178:	e0fff204 	addi	r3,fp,-56
1000917c:	e0bff904 	addi	r2,fp,-28
10009180:	1809883a 	mov	r4,r3
10009184:	100b883a 	mov	r5,r2
10009188:	00018900 	call	10001890 <SimpleLinkHttpServerCallback>
#endif
		}
		break;
1000918c:	00000106 	br	10009194 <_SlDrvNetAppEventHandler+0x1d4>
        default:
            SL_ERROR_TRACE2(MSG_305, "ASSERT: _SlDrvNetAppEventHandler : invalid opcode = 0x%x = %1", pHdr->GenHeader.Opcode, pHdr->GenHeader.Opcode);
            VERIFY_PROTOCOL(0);
10009190:	003fff06 	br	10009190 <__alt_data_end+0xf0009190>
    }
}
10009194:	e037883a 	mov	sp,fp
10009198:	dfc00117 	ldw	ra,4(sp)
1000919c:	df000017 	ldw	fp,0(sp)
100091a0:	dec00204 	addi	sp,sp,8
100091a4:	f800283a 	ret

100091a8 <sl_NetCfgSet>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_NetCfgSet)
_i32 sl_NetCfgSet(_u8 ConfigId ,_u8 ConfigOpt,_u8 ConfigLen, _u8 *pValues)
{
100091a8:	defff304 	addi	sp,sp,-52
100091ac:	dfc00c15 	stw	ra,48(sp)
100091b0:	df000b15 	stw	fp,44(sp)
100091b4:	df000b04 	addi	fp,sp,44
100091b8:	2807883a 	mov	r3,r5
100091bc:	3005883a 	mov	r2,r6
100091c0:	e1ffff15 	stw	r7,-4(fp)
100091c4:	e13ffc05 	stb	r4,-16(fp)
100091c8:	e0fffd05 	stb	r3,-12(fp)
100091cc:	e0bffe05 	stb	r2,-8(fp)
    _SlNetCfgMsgSet_u         Msg;
    _SlCmdExt_t               CmdExt;

    CmdExt.TxPayloadLen = (ConfigLen+3) & (~3);
100091d0:	e0bffe03 	ldbu	r2,-8(fp)
100091d4:	108000c4 	addi	r2,r2,3
100091d8:	1007883a 	mov	r3,r2
100091dc:	00bfff04 	movi	r2,-4
100091e0:	1884703a 	and	r2,r3,r2
100091e4:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
100091e8:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = (_u8 *)pValues;
100091ec:	e0bfff17 	ldw	r2,-4(fp)
100091f0:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
100091f4:	e03ffb15 	stw	zero,-20(fp)


    Msg.Cmd.ConfigId    = ConfigId;
100091f8:	e0bffc03 	ldbu	r2,-16(fp)
100091fc:	e0bff60d 	sth	r2,-40(fp)
    Msg.Cmd.ConfigLen   = ConfigLen;
10009200:	e0bffe03 	ldbu	r2,-8(fp)
10009204:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.ConfigOpt   = ConfigOpt;
10009208:	e0bffd03 	ldbu	r2,-12(fp)
1000920c:	e0bff68d 	sth	r2,-38(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetCfgSetCmdCtrl, &Msg, &CmdExt));
10009210:	e0fff584 	addi	r3,fp,-42
10009214:	e0bff804 	addi	r2,fp,-32
10009218:	d1201c04 	addi	r4,gp,-32656
1000921c:	180b883a 	mov	r5,r3
10009220:	100d883a 	mov	r6,r2
10009224:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10009228:	e0bff50d 	sth	r2,-44(fp)
1000922c:	e0bff50f 	ldh	r2,-44(fp)
10009230:	10000126 	beq	r2,zero,10009238 <sl_NetCfgSet+0x90>
10009234:	003fff06 	br	10009234 <__alt_data_end+0xf0009234>

    return (_i16)Msg.Rsp.status;
10009238:	e0bff58b 	ldhu	r2,-42(fp)
1000923c:	10bfffcc 	andi	r2,r2,65535
10009240:	10a0001c 	xori	r2,r2,32768
10009244:	10a00004 	addi	r2,r2,-32768
}
10009248:	e037883a 	mov	sp,fp
1000924c:	dfc00117 	ldw	ra,4(sp)
10009250:	df000017 	ldw	fp,0(sp)
10009254:	dec00204 	addi	sp,sp,8
10009258:	f800283a 	ret

1000925c <sl_NetCfgGet>:
    sizeof(_NetCfgSetGet_t)
};

#if _SL_INCLUDE_FUNC(sl_NetCfgGet)
_i32 sl_NetCfgGet(_u8 ConfigId, _u8 *pConfigOpt,_u8 *pConfigLen, _u8 *pValues)
{
1000925c:	defff304 	addi	sp,sp,-52
10009260:	dfc00c15 	stw	ra,48(sp)
10009264:	df000b15 	stw	fp,44(sp)
10009268:	df000b04 	addi	fp,sp,44
1000926c:	2005883a 	mov	r2,r4
10009270:	e17ffd15 	stw	r5,-12(fp)
10009274:	e1bffe15 	stw	r6,-8(fp)
10009278:	e1ffff15 	stw	r7,-4(fp)
1000927c:	e0bffc05 	stb	r2,-16(fp)
    _SlNetCfgMsgGet_u         Msg;
    _SlCmdExt_t               CmdExt;

    if (*pConfigLen == 0)
10009280:	e0bffe17 	ldw	r2,-8(fp)
10009284:	10800003 	ldbu	r2,0(r2)
10009288:	10803fcc 	andi	r2,r2,255
1000928c:	1000021e 	bne	r2,zero,10009298 <sl_NetCfgGet+0x3c>
    {
        return SL_EZEROLEN;
10009290:	00be0b84 	movi	r2,-2002
10009294:	00003806 	br	10009378 <sl_NetCfgGet+0x11c>
    }
    CmdExt.TxPayloadLen = 0;
10009298:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = *pConfigLen;
1000929c:	e0bffe17 	ldw	r2,-8(fp)
100092a0:	10800003 	ldbu	r2,0(r2)
100092a4:	10803fcc 	andi	r2,r2,255
100092a8:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
100092ac:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)pValues;
100092b0:	e0bfff17 	ldw	r2,-4(fp)
100092b4:	e0bffb15 	stw	r2,-20(fp)
    CmdExt.ActualRxPayloadLen = 0;
100092b8:	e03ff90d 	sth	zero,-28(fp)
    Msg.Cmd.ConfigLen    = *pConfigLen;
100092bc:	e0bffe17 	ldw	r2,-8(fp)
100092c0:	10800003 	ldbu	r2,0(r2)
100092c4:	10803fcc 	andi	r2,r2,255
100092c8:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.ConfigId     = ConfigId;
100092cc:	e0bffc03 	ldbu	r2,-16(fp)
100092d0:	e0bff60d 	sth	r2,-40(fp)

    if( pConfigOpt )
100092d4:	e0bffd17 	ldw	r2,-12(fp)
100092d8:	10000426 	beq	r2,zero,100092ec <sl_NetCfgGet+0x90>
    {
        Msg.Cmd.ConfigOpt   = (_u16)*pConfigOpt;
100092dc:	e0bffd17 	ldw	r2,-12(fp)
100092e0:	10800003 	ldbu	r2,0(r2)
100092e4:	10803fcc 	andi	r2,r2,255
100092e8:	e0bff68d 	sth	r2,-38(fp)
    }
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlNetCfgGetCmdCtrl, &Msg, &CmdExt));
100092ec:	e0fff584 	addi	r3,fp,-42
100092f0:	e0bff804 	addi	r2,fp,-32
100092f4:	d1201d04 	addi	r4,gp,-32652
100092f8:	180b883a 	mov	r5,r3
100092fc:	100d883a 	mov	r6,r2
10009300:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10009304:	e0bff50d 	sth	r2,-44(fp)
10009308:	e0bff50f 	ldh	r2,-44(fp)
1000930c:	10000126 	beq	r2,zero,10009314 <sl_NetCfgGet+0xb8>
10009310:	003fff06 	br	10009310 <__alt_data_end+0xf0009310>

    if( pConfigOpt )
10009314:	e0bffd17 	ldw	r2,-12(fp)
10009318:	10000426 	beq	r2,zero,1000932c <sl_NetCfgGet+0xd0>
    {
        *pConfigOpt = (_u8)Msg.Rsp.ConfigOpt;
1000931c:	e0bff68b 	ldhu	r2,-38(fp)
10009320:	1007883a 	mov	r3,r2
10009324:	e0bffd17 	ldw	r2,-12(fp)
10009328:	10c00005 	stb	r3,0(r2)
    }
    if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
1000932c:	e0fff88b 	ldhu	r3,-30(fp)
10009330:	e0bff90b 	ldhu	r2,-28(fp)
10009334:	18ffffcc 	andi	r3,r3,65535
10009338:	10bfffcc 	andi	r2,r2,65535
1000933c:	1880062e 	bgeu	r3,r2,10009358 <sl_NetCfgGet+0xfc>
    {
        *pConfigLen = (_u8)CmdExt.RxPayloadLen;
10009340:	e0bff88b 	ldhu	r2,-30(fp)
10009344:	1007883a 	mov	r3,r2
10009348:	e0bffe17 	ldw	r2,-8(fp)
1000934c:	10c00005 	stb	r3,0(r2)
        return SL_ESMALLBUF;
10009350:	00be0bc4 	movi	r2,-2001
10009354:	00000806 	br	10009378 <sl_NetCfgGet+0x11c>
    }
    else
    {
        *pConfigLen = (_u8)CmdExt.ActualRxPayloadLen;
10009358:	e0bff90b 	ldhu	r2,-28(fp)
1000935c:	1007883a 	mov	r3,r2
10009360:	e0bffe17 	ldw	r2,-8(fp)
10009364:	10c00005 	stb	r3,0(r2)
    }

    return (_i16)Msg.Rsp.Status;
10009368:	e0bff58b 	ldhu	r2,-42(fp)
1000936c:	10bfffcc 	andi	r2,r2,65535
10009370:	10a0001c 	xori	r2,r2,32768
10009374:	10a00004 	addi	r2,r2,-32768
}
10009378:	e037883a 	mov	sp,fp
1000937c:	dfc00117 	ldw	ra,4(sp)
10009380:	df000017 	ldw	fp,0(sp)
10009384:	dec00204 	addi	sp,sp,8
10009388:	f800283a 	ret

1000938c <_SlNonOsSemSet>:

_SlNonOsCB_t g__SlNonOsCB;


_SlNonOsRetVal_t _SlNonOsSemSet(_SlNonOsSemObj_t* pSemObj , _SlNonOsSemObj_t Value)
{
1000938c:	defffd04 	addi	sp,sp,-12
10009390:	df000215 	stw	fp,8(sp)
10009394:	df000204 	addi	fp,sp,8
10009398:	e13ffe15 	stw	r4,-8(fp)
1000939c:	2805883a 	mov	r2,r5
100093a0:	e0bfff05 	stb	r2,-4(fp)
    *pSemObj = Value;
100093a4:	e0bffe17 	ldw	r2,-8(fp)
100093a8:	e0ffff03 	ldbu	r3,-4(fp)
100093ac:	10c00005 	stb	r3,0(r2)
    return NONOS_RET_OK;
100093b0:	0005883a 	mov	r2,zero
}
100093b4:	e037883a 	mov	sp,fp
100093b8:	df000017 	ldw	fp,0(sp)
100093bc:	dec00104 	addi	sp,sp,4
100093c0:	f800283a 	ret

100093c4 <_SlNonOsSemGet>:

_SlNonOsRetVal_t _SlNonOsSemGet(_SlNonOsSemObj_t* pSyncObj, _SlNonOsSemObj_t WaitValue, _SlNonOsSemObj_t SetValue, _SlNonOsTime_t Timeout)
{
100093c4:	defffa04 	addi	sp,sp,-24
100093c8:	dfc00515 	stw	ra,20(sp)
100093cc:	df000415 	stw	fp,16(sp)
100093d0:	df000404 	addi	fp,sp,16
100093d4:	e13ffc15 	stw	r4,-16(fp)
100093d8:	2809883a 	mov	r4,r5
100093dc:	3007883a 	mov	r3,r6
100093e0:	3805883a 	mov	r2,r7
100093e4:	e13ffd05 	stb	r4,-12(fp)
100093e8:	e0fffe05 	stb	r3,-8(fp)
100093ec:	e0bfff05 	stb	r2,-4(fp)
    while (Timeout>0)
100093f0:	00001006 	br	10009434 <_SlNonOsSemGet+0x70>
    {
        if (WaitValue == *pSyncObj)
100093f4:	e0bffc17 	ldw	r2,-16(fp)
100093f8:	10800003 	ldbu	r2,0(r2)
100093fc:	10c03fcc 	andi	r3,r2,255
10009400:	e0bffd03 	ldbu	r2,-12(fp)
10009404:	1880041e 	bne	r3,r2,10009418 <_SlNonOsSemGet+0x54>
        {
            *pSyncObj = SetValue;
10009408:	e0bffc17 	ldw	r2,-16(fp)
1000940c:	e0fffe03 	ldbu	r3,-8(fp)
10009410:	10c00005 	stb	r3,0(r2)
            break;
10009414:	00000906 	br	1000943c <_SlNonOsSemGet+0x78>
        }
        if (Timeout != NONOS_WAIT_FOREVER)
10009418:	e0bfff03 	ldbu	r2,-4(fp)
1000941c:	10803fe0 	cmpeqi	r2,r2,255
10009420:	1000031e 	bne	r2,zero,10009430 <_SlNonOsSemGet+0x6c>
        {		
            Timeout--;
10009424:	e0bfff03 	ldbu	r2,-4(fp)
10009428:	10bfffc4 	addi	r2,r2,-1
1000942c:	e0bfff05 	stb	r2,-4(fp)
        }
        _SlNonOsMainLoopTask();
10009430:	00094f00 	call	100094f0 <_SlNonOsMainLoopTask>
    return NONOS_RET_OK;
}

_SlNonOsRetVal_t _SlNonOsSemGet(_SlNonOsSemObj_t* pSyncObj, _SlNonOsSemObj_t WaitValue, _SlNonOsSemObj_t SetValue, _SlNonOsTime_t Timeout)
{
    while (Timeout>0)
10009434:	e0bfff03 	ldbu	r2,-4(fp)
10009438:	103fee1e 	bne	r2,zero,100093f4 <__alt_data_end+0xf00093f4>
            _SlSyncWaitLoopCallback();
        }
#endif
    }

    if (0 == Timeout)
1000943c:	e0bfff03 	ldbu	r2,-4(fp)
10009440:	1000021e 	bne	r2,zero,1000944c <_SlNonOsSemGet+0x88>
    {
        return NONOS_RET_ERR;
10009444:	00bfffc4 	movi	r2,-1
10009448:	00000106 	br	10009450 <_SlNonOsSemGet+0x8c>
    }
    else
    {
        return NONOS_RET_OK;
1000944c:	0005883a 	mov	r2,zero
    }
}
10009450:	e037883a 	mov	sp,fp
10009454:	dfc00117 	ldw	ra,4(sp)
10009458:	df000017 	ldw	fp,0(sp)
1000945c:	dec00204 	addi	sp,sp,8
10009460:	f800283a 	ret

10009464 <_SlNonOsSpawn>:


_SlNonOsRetVal_t _SlNonOsSpawn(_SlSpawnEntryFunc_t pEntry , void* pValue , _u32 flags)
{
10009464:	defffa04 	addi	sp,sp,-24
10009468:	df000515 	stw	fp,20(sp)
1000946c:	df000504 	addi	fp,sp,20
10009470:	e13ffd15 	stw	r4,-12(fp)
10009474:	e17ffe15 	stw	r5,-8(fp)
10009478:	e1bfff15 	stw	r6,-4(fp)
    _i16 i;

    for (i=0 ; i<NONOS_MAX_SPAWN_ENTRIES ; i++)
1000947c:	e03ffb0d 	sth	zero,-20(fp)
10009480:	00001306 	br	100094d0 <_SlNonOsSpawn+0x6c>
    {
        _SlNonOsSpawnEntry_t* pE = &g__SlNonOsCB.SpawnEntries[i];
10009484:	e0bffb0f 	ldh	r2,-20(fp)
10009488:	100690fa 	slli	r3,r2,3
1000948c:	008400f4 	movhi	r2,4099
10009490:	10a51a04 	addi	r2,r2,-27544
10009494:	1885883a 	add	r2,r3,r2
10009498:	e0bffc15 	stw	r2,-16(fp)

        if (NULL == pE->pEntry)
1000949c:	e0bffc17 	ldw	r2,-16(fp)
100094a0:	10800017 	ldw	r2,0(r2)
100094a4:	1000071e 	bne	r2,zero,100094c4 <_SlNonOsSpawn+0x60>
        {
            pE->pValue = pValue;
100094a8:	e0bffc17 	ldw	r2,-16(fp)
100094ac:	e0fffe17 	ldw	r3,-8(fp)
100094b0:	10c00115 	stw	r3,4(r2)
            pE->pEntry = pEntry;
100094b4:	e0bffc17 	ldw	r2,-16(fp)
100094b8:	e0fffd17 	ldw	r3,-12(fp)
100094bc:	10c00015 	stw	r3,0(r2)
            break;
100094c0:	00000606 	br	100094dc <_SlNonOsSpawn+0x78>

_SlNonOsRetVal_t _SlNonOsSpawn(_SlSpawnEntryFunc_t pEntry , void* pValue , _u32 flags)
{
    _i16 i;

    for (i=0 ; i<NONOS_MAX_SPAWN_ENTRIES ; i++)
100094c4:	e0bffb0b 	ldhu	r2,-20(fp)
100094c8:	10800044 	addi	r2,r2,1
100094cc:	e0bffb0d 	sth	r2,-20(fp)
100094d0:	e0bffb0f 	ldh	r2,-20(fp)
100094d4:	10800150 	cmplti	r2,r2,5
100094d8:	103fea1e 	bne	r2,zero,10009484 <__alt_data_end+0xf0009484>
            pE->pEntry = pEntry;
            break;
        }
    }

    return NONOS_RET_OK;
100094dc:	0005883a 	mov	r2,zero
}
100094e0:	e037883a 	mov	sp,fp
100094e4:	df000017 	ldw	fp,0(sp)
100094e8:	dec00104 	addi	sp,sp,4
100094ec:	f800283a 	ret

100094f0 <_SlNonOsMainLoopTask>:


_SlNonOsRetVal_t _SlNonOsMainLoopTask(void)
{
100094f0:	defffb04 	addi	sp,sp,-20
100094f4:	dfc00415 	stw	ra,16(sp)
100094f8:	df000315 	stw	fp,12(sp)
100094fc:	df000304 	addi	fp,sp,12
    _i16 i;

    for (i=0 ; i<NONOS_MAX_SPAWN_ENTRIES ; i++)
10009500:	e03ffd0d 	sth	zero,-12(fp)
10009504:	00002006 	br	10009588 <_SlNonOsMainLoopTask+0x98>
    {
        _SlNonOsSpawnEntry_t* pE = &g__SlNonOsCB.SpawnEntries[i];
10009508:	e0bffd0f 	ldh	r2,-12(fp)
1000950c:	100690fa 	slli	r3,r2,3
10009510:	008400f4 	movhi	r2,4099
10009514:	10a51a04 	addi	r2,r2,-27544
10009518:	1885883a 	add	r2,r3,r2
1000951c:	e0bffe15 	stw	r2,-8(fp)
        _SlSpawnEntryFunc_t 		pF = pE->pEntry;
10009520:	e0bffe17 	ldw	r2,-8(fp)
10009524:	10800017 	ldw	r2,0(r2)
10009528:	e0bfff15 	stw	r2,-4(fp)

        if (NULL != pF)
1000952c:	e0bfff17 	ldw	r2,-4(fp)
10009530:	10001226 	beq	r2,zero,1000957c <_SlNonOsMainLoopTask+0x8c>
        {
            if((g_pCB)->RxIrqCnt != (g_pCB)->RxDoneCnt)
10009534:	008400f4 	movhi	r2,4099
10009538:	10a48204 	addi	r2,r2,-28152
1000953c:	10800017 	ldw	r2,0(r2)
10009540:	10c025c3 	ldbu	r3,151(r2)
10009544:	008400f4 	movhi	r2,4099
10009548:	10a48204 	addi	r2,r2,-28152
1000954c:	10800017 	ldw	r2,0(r2)
10009550:	10802603 	ldbu	r2,152(r2)
10009554:	18c03fcc 	andi	r3,r3,255
10009558:	10803fcc 	andi	r2,r2,255
1000955c:	18800326 	beq	r3,r2,1000956c <_SlNonOsMainLoopTask+0x7c>
            {
                pF(0);/*(pValue);*/
10009560:	e0bfff17 	ldw	r2,-4(fp)
10009564:	0009883a 	mov	r4,zero
10009568:	103ee83a 	callr	r2
            }
            pE->pEntry = NULL;
1000956c:	e0bffe17 	ldw	r2,-8(fp)
10009570:	10000015 	stw	zero,0(r2)
            pE->pValue = NULL;
10009574:	e0bffe17 	ldw	r2,-8(fp)
10009578:	10000115 	stw	zero,4(r2)

_SlNonOsRetVal_t _SlNonOsMainLoopTask(void)
{
    _i16 i;

    for (i=0 ; i<NONOS_MAX_SPAWN_ENTRIES ; i++)
1000957c:	e0bffd0b 	ldhu	r2,-12(fp)
10009580:	10800044 	addi	r2,r2,1
10009584:	e0bffd0d 	sth	r2,-12(fp)
10009588:	e0bffd0f 	ldh	r2,-12(fp)
1000958c:	10800150 	cmplti	r2,r2,5
10009590:	103fdd1e 	bne	r2,zero,10009508 <__alt_data_end+0xf0009508>
            pE->pEntry = NULL;
            pE->pValue = NULL;
        }
    }

    return NONOS_RET_OK;
10009594:	0005883a 	mov	r2,zero
}
10009598:	e037883a 	mov	sp,fp
1000959c:	dfc00117 	ldw	ra,4(sp)
100095a0:	df000017 	ldw	fp,0(sp)
100095a4:	dec00204 	addi	sp,sp,8
100095a8:	f800283a 	ret

100095ac <_sl_BuildAddress>:

/* ******************************************************************************/
/*  _sl_BuildAddress */
/* ******************************************************************************/
void _sl_BuildAddress(const SlSockAddr_t *addr, _i16 addrlen, _SocketAddrCommand_u    *pCmd)
{
100095ac:	defffb04 	addi	sp,sp,-20
100095b0:	dfc00415 	stw	ra,16(sp)
100095b4:	df000315 	stw	fp,12(sp)
100095b8:	df000304 	addi	fp,sp,12
100095bc:	e13ffd15 	stw	r4,-12(fp)
100095c0:	2805883a 	mov	r2,r5
100095c4:	e1bfff15 	stw	r6,-4(fp)
100095c8:	e0bffe0d 	sth	r2,-8(fp)

    /*  Note: parsing of family and port in the generic way for all IPV4, IPV6 and EUI48 */
    /*  is possible as _i32 as these parameters are in the same offset and size for these */
    /*  three families. */
    pCmd->IpV4.FamilyAndFlags = (addr->sa_family << 4) & 0xF0;
100095cc:	e0bffd17 	ldw	r2,-12(fp)
100095d0:	1080000b 	ldhu	r2,0(r2)
100095d4:	10bfffcc 	andi	r2,r2,65535
100095d8:	1004913a 	slli	r2,r2,4
100095dc:	1007883a 	mov	r3,r2
100095e0:	e0bfff17 	ldw	r2,-4(fp)
100095e4:	10c000c5 	stb	r3,3(r2)
    pCmd->IpV4.port = ((SlSockAddrIn_t *)addr)->sin_port;
100095e8:	e0bffd17 	ldw	r2,-12(fp)
100095ec:	10c0008b 	ldhu	r3,2(r2)
100095f0:	e0bfff17 	ldw	r2,-4(fp)
100095f4:	10c0010d 	sth	r3,4(r2)

    if(SL_AF_INET == addr->sa_family)
100095f8:	e0bffd17 	ldw	r2,-12(fp)
100095fc:	1080000b 	ldhu	r2,0(r2)
10009600:	10bfffcc 	andi	r2,r2,65535
10009604:	10800098 	cmpnei	r2,r2,2
10009608:	1000051e 	bne	r2,zero,10009620 <_sl_BuildAddress+0x74>
    {
        pCmd->IpV4.address  = ((SlSockAddrIn_t *)addr)->sin_addr.s_addr;
1000960c:	e0bffd17 	ldw	r2,-12(fp)
10009610:	10c00117 	ldw	r3,4(r2)
10009614:	e0bfff17 	ldw	r2,-4(fp)
10009618:	10c00215 	stw	r3,8(r2)
1000961c:	00000d06 	br	10009654 <_sl_BuildAddress+0xa8>
    }
    else if (SL_AF_INET6_EUI_48 == addr->sa_family )
10009620:	e0bffd17 	ldw	r2,-12(fp)
10009624:	1080000b 	ldhu	r2,0(r2)
10009628:	10bfffcc 	andi	r2,r2,65535
1000962c:	10800258 	cmpnei	r2,r2,9
10009630:	1000081e 	bne	r2,zero,10009654 <_sl_BuildAddress+0xa8>
    {
        sl_Memcpy( pCmd->IpV6EUI48.address,((SlSockAddrIn6_t *)addr)->sin6_addr._S6_un._S6_u8, 6);
10009634:	e0bfff17 	ldw	r2,-4(fp)
10009638:	10c00184 	addi	r3,r2,6
1000963c:	e0bffd17 	ldw	r2,-12(fp)
10009640:	10800204 	addi	r2,r2,8
10009644:	1809883a 	mov	r4,r3
10009648:	100b883a 	mov	r5,r2
1000964c:	01800184 	movi	r6,6
10009650:	000c7840 	call	1000c784 <memcpy>
    else
    {
        sl_Memcpy(pCmd->IpV6.address, ((sockaddr_in6 *)addr)->sin6_addr._S6_un._S6_u32, 16 );
    }
#endif
}
10009654:	e037883a 	mov	sp,fp
10009658:	dfc00117 	ldw	ra,4(sp)
1000965c:	df000017 	ldw	fp,0(sp)
10009660:	dec00204 	addi	sp,sp,8
10009664:	f800283a 	ret

10009668 <_sl_TruncatePayloadByProtocol>:

/* ******************************************************************************/
/*  _sl_TruncatePayloadByProtocol */
/* ******************************************************************************/
_u16 _sl_TruncatePayloadByProtocol(const _i16 sd,const _u16 length)
{
10009668:	defffc04 	addi	sp,sp,-16
1000966c:	df000315 	stw	fp,12(sp)
10009670:	df000304 	addi	fp,sp,12
10009674:	2007883a 	mov	r3,r4
10009678:	2805883a 	mov	r2,r5
1000967c:	e0fffe0d 	sth	r3,-8(fp)
10009680:	e0bfff0d 	sth	r2,-4(fp)
   _u16 maxLength; 
   
   switch(sd & SL_SOCKET_PAYLOAD_TYPE_MASK)
10009684:	e0bffe0b 	ldhu	r2,-8(fp)
10009688:	10bfffcc 	andi	r2,r2,65535
1000968c:	10803c0c 	andi	r2,r2,240
10009690:	10c01420 	cmpeqi	r3,r2,80
10009694:	1800291e 	bne	r3,zero,1000973c <_sl_TruncatePayloadByProtocol+0xd4>
10009698:	10c01448 	cmpgei	r3,r2,81
1000969c:	18000d1e 	bne	r3,zero,100096d4 <_sl_TruncatePayloadByProtocol+0x6c>
100096a0:	10c00820 	cmpeqi	r3,r2,32
100096a4:	18001f1e 	bne	r3,zero,10009724 <_sl_TruncatePayloadByProtocol+0xbc>
100096a8:	10c00848 	cmpgei	r3,r2,33
100096ac:	1800041e 	bne	r3,zero,100096c0 <_sl_TruncatePayloadByProtocol+0x58>
100096b0:	10001626 	beq	r2,zero,1000970c <_sl_TruncatePayloadByProtocol+0xa4>
100096b4:	10800420 	cmpeqi	r2,r2,16
100096b8:	1000171e 	bne	r2,zero,10009718 <_sl_TruncatePayloadByProtocol+0xb0>
100096bc:	00002e06 	br	10009778 <_sl_TruncatePayloadByProtocol+0x110>
100096c0:	10c00c20 	cmpeqi	r3,r2,48
100096c4:	18001a1e 	bne	r3,zero,10009730 <_sl_TruncatePayloadByProtocol+0xc8>
100096c8:	10801020 	cmpeqi	r2,r2,64
100096cc:	10001b1e 	bne	r2,zero,1000973c <_sl_TruncatePayloadByProtocol+0xd4>
100096d0:	00002906 	br	10009778 <_sl_TruncatePayloadByProtocol+0x110>
100096d4:	10c02020 	cmpeqi	r3,r2,128
100096d8:	18001e1e 	bne	r3,zero,10009754 <_sl_TruncatePayloadByProtocol+0xec>
100096dc:	10c02048 	cmpgei	r3,r2,129
100096e0:	1800051e 	bne	r3,zero,100096f8 <_sl_TruncatePayloadByProtocol+0x90>
100096e4:	10c01820 	cmpeqi	r3,r2,96
100096e8:	1800171e 	bne	r3,zero,10009748 <_sl_TruncatePayloadByProtocol+0xe0>
100096ec:	10801c20 	cmpeqi	r2,r2,112
100096f0:	1000151e 	bne	r2,zero,10009748 <_sl_TruncatePayloadByProtocol+0xe0>
100096f4:	00002006 	br	10009778 <_sl_TruncatePayloadByProtocol+0x110>
100096f8:	10c02420 	cmpeqi	r3,r2,144
100096fc:	1800181e 	bne	r3,zero,10009760 <_sl_TruncatePayloadByProtocol+0xf8>
10009700:	10802820 	cmpeqi	r2,r2,160
10009704:	1000191e 	bne	r2,zero,1000976c <_sl_TruncatePayloadByProtocol+0x104>
10009708:	00001b06 	br	10009778 <_sl_TruncatePayloadByProtocol+0x110>
   {
      case SL_SOCKET_PAYLOAD_TYPE_UDP_IPV4:
         maxLength = 1472;
1000970c:	00817004 	movi	r2,1472
10009710:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009714:	00001b06 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      
      case SL_SOCKET_PAYLOAD_TYPE_TCP_IPV4:
         maxLength = 1460;
10009718:	00816d04 	movi	r2,1460
1000971c:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009720:	00001806 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      
      case SL_SOCKET_PAYLOAD_TYPE_UDP_IPV6:
         maxLength = 1452;
10009724:	00816b04 	movi	r2,1452
10009728:	e0bffd0d 	sth	r2,-12(fp)
      break;
1000972c:	00001506 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      
      case SL_SOCKET_PAYLOAD_TYPE_TCP_IPV6:
		  maxLength = 1440;
10009730:	00816804 	movi	r2,1440
10009734:	e0bffd0d 	sth	r2,-12(fp)
	  break;
10009738:	00001206 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      case SL_SOCKET_PAYLOAD_TYPE_TCP_IPV4_SECURE:
      case SL_SOCKET_PAYLOAD_TYPE_UDP_IPV4_SECURE:
		  maxLength = 1402;
1000973c:	00815e84 	movi	r2,1402
10009740:	e0bffd0d 	sth	r2,-12(fp)
	  break;
10009744:	00000f06 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      case SL_SOCKET_PAYLOAD_TYPE_UDP_IPV6_SECURE:
      case SL_SOCKET_PAYLOAD_TYPE_TCP_IPV6_SECURE:
         maxLength = 1396;
10009748:	00815d04 	movi	r2,1396
1000974c:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009750:	00000c06 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      case SL_SOCKET_PAYLOAD_TYPE_RAW_TRANCEIVER:
           maxLength = 1476;
10009754:	00817104 	movi	r2,1476
10009758:	e0bffd0d 	sth	r2,-12(fp)
      break;
1000975c:	00000906 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
     case SL_SOCKET_PAYLOAD_TYPE_RAW_PACKET:
           maxLength = 1514;
10009760:	00817a84 	movi	r2,1514
10009764:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009768:	00000606 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
	 case SL_SOCKET_PAYLOAD_TYPE_RAW_IP4:
           maxLength = 1480;
1000976c:	00817204 	movi	r2,1480
10009770:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009774:	00000306 	br	10009784 <_sl_TruncatePayloadByProtocol+0x11c>
      default:
           maxLength = 1440;
10009778:	00816804 	movi	r2,1440
1000977c:	e0bffd0d 	sth	r2,-12(fp)
      break;
10009780:	0001883a 	nop
   }
   
   if( length > maxLength )
10009784:	e0bfff0b 	ldhu	r2,-4(fp)
10009788:	e0fffd0b 	ldhu	r3,-12(fp)
1000978c:	1880022e 	bgeu	r3,r2,10009798 <_sl_TruncatePayloadByProtocol+0x130>
   {
      return maxLength;
10009790:	e0bffd0b 	ldhu	r2,-12(fp)
10009794:	00000106 	br	1000979c <_sl_TruncatePayloadByProtocol+0x134>
   }
   else
   {
      return length;
10009798:	e0bfff0b 	ldhu	r2,-4(fp)
   }
}
1000979c:	e037883a 	mov	sp,fp
100097a0:	df000017 	ldw	fp,0(sp)
100097a4:	dec00104 	addi	sp,sp,4
100097a8:	f800283a 	ret

100097ac <_sl_ParseAddress>:

/*******************************************************************************/
/*  _sl_ParseAddress */
/*******************************************************************************/
void _sl_ParseAddress(_SocketAddrResponse_u    *pRsp, SlSockAddr_t *addr, SlSocklen_t *addrlen)
{
100097ac:	defffb04 	addi	sp,sp,-20
100097b0:	dfc00415 	stw	ra,16(sp)
100097b4:	df000315 	stw	fp,12(sp)
100097b8:	df000304 	addi	fp,sp,12
100097bc:	e13ffd15 	stw	r4,-12(fp)
100097c0:	e17ffe15 	stw	r5,-8(fp)
100097c4:	e1bfff15 	stw	r6,-4(fp)
    /*  Note: parsing of family and port in the generic way for all IPV4, IPV6 and EUI48 */
    /*  is possible as long as these parameters are in the same offset and size for these */
    /*  three families. */
    addr->sa_family                 = pRsp->IpV4.family;
100097c8:	e0bffd17 	ldw	r2,-12(fp)
100097cc:	108000c3 	ldbu	r2,3(r2)
100097d0:	10c03fcc 	andi	r3,r2,255
100097d4:	e0bffe17 	ldw	r2,-8(fp)
100097d8:	10c0000d 	sth	r3,0(r2)
    ((SlSockAddrIn_t *)addr)->sin_port = pRsp->IpV4.port;
100097dc:	e0bffd17 	ldw	r2,-12(fp)
100097e0:	10c0010b 	ldhu	r3,4(r2)
100097e4:	e0bffe17 	ldw	r2,-8(fp)
100097e8:	10c0008d 	sth	r3,2(r2)

    *addrlen = (SL_AF_INET == addr->sa_family) ? sizeof(SlSockAddrIn_t) : sizeof(SlSockAddrIn6_t);
100097ec:	e0bffe17 	ldw	r2,-8(fp)
100097f0:	1080000b 	ldhu	r2,0(r2)
100097f4:	10bfffcc 	andi	r2,r2,65535
100097f8:	10800098 	cmpnei	r2,r2,2
100097fc:	1000021e 	bne	r2,zero,10009808 <_sl_ParseAddress+0x5c>
10009800:	00800404 	movi	r2,16
10009804:	00000106 	br	1000980c <_sl_ParseAddress+0x60>
10009808:	00800704 	movi	r2,28
1000980c:	e0ffff17 	ldw	r3,-4(fp)
10009810:	1880000d 	sth	r2,0(r3)

    if(SL_AF_INET == addr->sa_family)
10009814:	e0bffe17 	ldw	r2,-8(fp)
10009818:	1080000b 	ldhu	r2,0(r2)
1000981c:	10bfffcc 	andi	r2,r2,65535
10009820:	10800098 	cmpnei	r2,r2,2
10009824:	1000051e 	bne	r2,zero,1000983c <_sl_ParseAddress+0x90>
    {
        ((SlSockAddrIn_t *)addr)->sin_addr.s_addr  = pRsp->IpV4.address;
10009828:	e0bffd17 	ldw	r2,-12(fp)
1000982c:	10c00217 	ldw	r3,8(r2)
10009830:	e0bffe17 	ldw	r2,-8(fp)
10009834:	10c00115 	stw	r3,4(r2)
10009838:	00000d06 	br	10009870 <_sl_ParseAddress+0xc4>
    }
    else if (SL_AF_INET6_EUI_48 == addr->sa_family )
1000983c:	e0bffe17 	ldw	r2,-8(fp)
10009840:	1080000b 	ldhu	r2,0(r2)
10009844:	10bfffcc 	andi	r2,r2,65535
10009848:	10800258 	cmpnei	r2,r2,9
1000984c:	1000081e 	bne	r2,zero,10009870 <_sl_ParseAddress+0xc4>
    {
        sl_Memcpy(((SlSockAddrIn6_t *)addr)->sin6_addr._S6_un._S6_u8, pRsp->IpV6EUI48.address, 6);
10009850:	e0bffe17 	ldw	r2,-8(fp)
10009854:	10c00204 	addi	r3,r2,8
10009858:	e0bffd17 	ldw	r2,-12(fp)
1000985c:	10800184 	addi	r2,r2,6
10009860:	1809883a 	mov	r4,r3
10009864:	100b883a 	mov	r5,r2
10009868:	01800184 	movi	r6,6
1000986c:	000c7840 	call	1000c784 <memcpy>
    else
    {
        sl_Memcpy(((sockaddr_in6 *)addr)->sin6_addr._S6_un._S6_u32, pRsp->IpV6.address, 16);
    }
#endif
}
10009870:	e037883a 	mov	sp,fp
10009874:	dfc00117 	ldw	ra,4(sp)
10009878:	df000017 	ldw	fp,0(sp)
1000987c:	dec00204 	addi	sp,sp,8
10009880:	f800283a 	ret

10009884 <sl_Socket>:
    sizeof(_SocketResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_Socket)
_i16 sl_Socket(_i16 Domain, _i16 Type, _i16 Protocol)
{
10009884:	defff904 	addi	sp,sp,-28
10009888:	dfc00615 	stw	ra,24(sp)
1000988c:	df000515 	stw	fp,20(sp)
10009890:	df000504 	addi	fp,sp,20
10009894:	2807883a 	mov	r3,r5
10009898:	3005883a 	mov	r2,r6
1000989c:	e13ffd0d 	sth	r4,-12(fp)
100098a0:	e0fffe0d 	sth	r3,-8(fp)
100098a4:	e0bfff0d 	sth	r2,-4(fp)
    _SlSockSocketMsg_u  Msg;

    Msg.Cmd.Domain	    = (_u8)Domain;
100098a8:	e0bffd0b 	ldhu	r2,-12(fp)
100098ac:	e0bffc05 	stb	r2,-16(fp)
    Msg.Cmd.Type     	= (_u8)Type;
100098b0:	e0bffe0b 	ldhu	r2,-8(fp)
100098b4:	e0bffc45 	stb	r2,-15(fp)
    Msg.Cmd.Protocol 	= (_u8)Protocol;
100098b8:	e0bfff0b 	ldhu	r2,-4(fp)
100098bc:	e0bffc85 	stb	r2,-14(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlSockSocketCmdCtrl, &Msg, NULL));
100098c0:	e0bffc04 	addi	r2,fp,-16
100098c4:	d1201e04 	addi	r4,gp,-32648
100098c8:	100b883a 	mov	r5,r2
100098cc:	000d883a 	mov	r6,zero
100098d0:	00040cc0 	call	100040cc <_SlDrvCmdOp>
100098d4:	e0bffb0d 	sth	r2,-20(fp)
100098d8:	e0bffb0f 	ldh	r2,-20(fp)
100098dc:	10000126 	beq	r2,zero,100098e4 <sl_Socket+0x60>
100098e0:	003fff06 	br	100098e0 <__alt_data_end+0xf00098e0>

    if( Msg.Rsp.statusOrLen < 0 )
100098e4:	e0bffc0b 	ldhu	r2,-16(fp)
100098e8:	10bfffcc 	andi	r2,r2,65535
100098ec:	10a0001c 	xori	r2,r2,32768
100098f0:	10a00004 	addi	r2,r2,-32768
100098f4:	1000020e 	bge	r2,zero,10009900 <sl_Socket+0x7c>
	{
		return( Msg.Rsp.statusOrLen );
100098f8:	e0bffc0b 	ldhu	r2,-16(fp)
100098fc:	00000206 	br	10009908 <sl_Socket+0x84>
	}
	else
	{
    return (_i16)((_u8)Msg.Rsp.sd);
10009900:	e0bffc83 	ldbu	r2,-14(fp)
10009904:	10803fcc 	andi	r2,r2,255
}
}
10009908:	e037883a 	mov	sp,fp
1000990c:	dfc00117 	ldw	ra,4(sp)
10009910:	df000017 	ldw	fp,0(sp)
10009914:	dec00204 	addi	sp,sp,8
10009918:	f800283a 	ret

1000991c <sl_Close>:
    sizeof(_SocketResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_Close)
_i16 sl_Close(_i16 sd)
{
1000991c:	defffb04 	addi	sp,sp,-20
10009920:	dfc00415 	stw	ra,16(sp)
10009924:	df000315 	stw	fp,12(sp)
10009928:	df000304 	addi	fp,sp,12
1000992c:	2005883a 	mov	r2,r4
10009930:	e0bfff0d 	sth	r2,-4(fp)
	_SlSockCloseMsg_u   Msg;

    Msg.Cmd.sd = (_u8)sd;
10009934:	e0bfff0b 	ldhu	r2,-4(fp)
10009938:	e0bffd85 	stb	r2,-10(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlSockCloseCmdCtrl, &Msg, NULL));
1000993c:	e0bffd84 	addi	r2,fp,-10
10009940:	d1201f04 	addi	r4,gp,-32644
10009944:	100b883a 	mov	r5,r2
10009948:	000d883a 	mov	r6,zero
1000994c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10009950:	e0bffd0d 	sth	r2,-12(fp)
10009954:	e0bffd0f 	ldh	r2,-12(fp)
10009958:	10000126 	beq	r2,zero,10009960 <sl_Close+0x44>
1000995c:	003fff06 	br	1000995c <__alt_data_end+0xf000995c>

    return Msg.Rsp.statusOrLen;
10009960:	e0bffd8b 	ldhu	r2,-10(fp)
}
10009964:	e037883a 	mov	sp,fp
10009968:	dfc00117 	ldw	ra,4(sp)
1000996c:	df000017 	ldw	fp,0(sp)
10009970:	dec00204 	addi	sp,sp,8
10009974:	f800283a 	ret

10009978 <sl_Bind>:
	_SocketResponse_t	    Rsp;
}_SlSockBindMsg_u;

#if _SL_INCLUDE_FUNC(sl_Bind)
_i16 sl_Bind(_i16 sd, const SlSockAddr_t *addr, _i16 addrlen)
{
10009978:	defff604 	addi	sp,sp,-40
1000997c:	dfc00915 	stw	ra,36(sp)
10009980:	df000815 	stw	fp,32(sp)
10009984:	df000804 	addi	fp,sp,32
10009988:	2007883a 	mov	r3,r4
1000998c:	e17ffe15 	stw	r5,-8(fp)
10009990:	3005883a 	mov	r2,r6
10009994:	e0fffd0d 	sth	r3,-12(fp)
10009998:	e0bfff0d 	sth	r2,-4(fp)
	_SlSockBindMsg_u    Msg;
    _SlCmdCtrl_t         CmdCtrl = {0, 0, sizeof(_SocketResponse_t)};
1000999c:	e03ffc0d 	sth	zero,-16(fp)
100099a0:	e03ffc85 	stb	zero,-14(fp)
100099a4:	00800104 	movi	r2,4
100099a8:	e0bffcc5 	stb	r2,-13(fp)

    switch(addr->sa_family)
100099ac:	e0bffe17 	ldw	r2,-8(fp)
100099b0:	1080000b 	ldhu	r2,0(r2)
100099b4:	10bfffcc 	andi	r2,r2,65535
100099b8:	10c000a0 	cmpeqi	r3,r2,2
100099bc:	1800031e 	bne	r3,zero,100099cc <sl_Bind+0x54>
100099c0:	10800260 	cmpeqi	r2,r2,9
100099c4:	1000061e 	bne	r2,zero,100099e0 <sl_Bind+0x68>
100099c8:	00000a06 	br	100099f4 <sl_Bind+0x7c>
    {
        case SL_AF_INET :
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_BIND;
100099cc:	00a50104 	movi	r2,-27644
100099d0:	e0bffc0d 	sth	r2,-16(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv4Command_t);
100099d4:	00800304 	movi	r2,12
100099d8:	e0bffc85 	stb	r2,-14(fp)
            break;
100099dc:	00000706 	br	100099fc <sl_Bind+0x84>
        case SL_AF_INET6_EUI_48:
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_BIND_V6;
100099e0:	00a58104 	movi	r2,-27132
100099e4:	e0bffc0d 	sth	r2,-16(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6EUI48Command_t);
100099e8:	00800304 	movi	r2,12
100099ec:	e0bffc85 	stb	r2,-14(fp)
        	break;
100099f0:	00000206 	br	100099fc <sl_Bind+0x84>
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6Command_t);
            break;
#endif
        case SL_AF_RF   :
        default:
            return SL_RET_CODE_INVALID_INPUT;
100099f4:	00bfff84 	movi	r2,-2
100099f8:	00001406 	br	10009a4c <sl_Bind+0xd4>
    }

    Msg.Cmd.IpV4.lenOrPadding = 0;
100099fc:	e03ff90d 	sth	zero,-28(fp)
    Msg.Cmd.IpV4.sd = (_u8)sd;
10009a00:	e0bffd0b 	ldhu	r2,-12(fp)
10009a04:	e0bff985 	stb	r2,-26(fp)

    _sl_BuildAddress(addr, addrlen, &Msg.Cmd);
10009a08:	e0ffff0f 	ldh	r3,-4(fp)
10009a0c:	e0bff904 	addi	r2,fp,-28
10009a10:	e13ffe17 	ldw	r4,-8(fp)
10009a14:	180b883a 	mov	r5,r3
10009a18:	100d883a 	mov	r6,r2
10009a1c:	00095ac0 	call	100095ac <_sl_BuildAddress>

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&CmdCtrl, &Msg, NULL));
10009a20:	e0fffc04 	addi	r3,fp,-16
10009a24:	e0bff904 	addi	r2,fp,-28
10009a28:	1809883a 	mov	r4,r3
10009a2c:	100b883a 	mov	r5,r2
10009a30:	000d883a 	mov	r6,zero
10009a34:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10009a38:	e0bff80d 	sth	r2,-32(fp)
10009a3c:	e0bff80f 	ldh	r2,-32(fp)
10009a40:	10000126 	beq	r2,zero,10009a48 <sl_Bind+0xd0>
10009a44:	003fff06 	br	10009a44 <__alt_data_end+0xf0009a44>

    return Msg.Rsp.statusOrLen;
10009a48:	e0bff90b 	ldhu	r2,-28(fp)
}
10009a4c:	e037883a 	mov	sp,fp
10009a50:	dfc00117 	ldw	ra,4(sp)
10009a54:	df000017 	ldw	fp,0(sp)
10009a58:	dec00204 	addi	sp,sp,8
10009a5c:	f800283a 	ret

10009a60 <sl_SendTo>:
    /*  no response for 'sendto' commands*/
}_SlSendtoMsg_u;

#if _SL_INCLUDE_FUNC(sl_SendTo)
_i16 sl_SendTo(_i16 sd, const void *pBuf, _i16 Len, _i16 flags, const SlSockAddr_t *to, SlSocklen_t tolen)
{
10009a60:	defff004 	addi	sp,sp,-64
10009a64:	dfc00f15 	stw	ra,60(sp)
10009a68:	df000e15 	stw	fp,56(sp)
10009a6c:	df000e04 	addi	fp,sp,56
10009a70:	2011883a 	mov	r8,r4
10009a74:	e17ffc15 	stw	r5,-16(fp)
10009a78:	3009883a 	mov	r4,r6
10009a7c:	3807883a 	mov	r3,r7
10009a80:	e0800317 	ldw	r2,12(fp)
10009a84:	e23ffb0d 	sth	r8,-20(fp)
10009a88:	e13ffd0d 	sth	r4,-12(fp)
10009a8c:	e0fffe0d 	sth	r3,-8(fp)
10009a90:	e0bfff0d 	sth	r2,-4(fp)
    _SlSendtoMsg_u   Msg;
    _SlCmdCtrl_t     CmdCtrl = {0, 0, 0};
10009a94:	e03ff60d 	sth	zero,-40(fp)
10009a98:	e03ff685 	stb	zero,-38(fp)
10009a9c:	e03ff6c5 	stb	zero,-37(fp)
    _SlCmdExt_t      CmdExt;
    _u16           ChunkLen;
    _i16              RetVal;

    CmdExt.TxPayloadLen = (_u16)Len;
10009aa0:	e0bffd0b 	ldhu	r2,-12(fp)
10009aa4:	e0bff70d 	sth	r2,-36(fp)
    CmdExt.RxPayloadLen = 0;
10009aa8:	e03ff78d 	sth	zero,-34(fp)
    CmdExt.pTxPayload = (_u8 *)pBuf;
10009aac:	e0bffc17 	ldw	r2,-16(fp)
10009ab0:	e0bff915 	stw	r2,-28(fp)
    CmdExt.pRxPayload = NULL;
10009ab4:	e03ffa15 	stw	zero,-24(fp)


    switch(to->sa_family)
10009ab8:	e0800217 	ldw	r2,8(fp)
10009abc:	1080000b 	ldhu	r2,0(r2)
10009ac0:	10bfffcc 	andi	r2,r2,65535
10009ac4:	10c000a0 	cmpeqi	r3,r2,2
10009ac8:	1800031e 	bne	r3,zero,10009ad8 <sl_SendTo+0x78>
10009acc:	10800260 	cmpeqi	r2,r2,9
10009ad0:	1000061e 	bne	r2,zero,10009aec <sl_SendTo+0x8c>
10009ad4:	00000a06 	br	10009b00 <sl_SendTo+0xa0>
    {
        case SL_AF_INET:
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_SENDTO;
10009ad8:	00a50344 	movi	r2,-27635
10009adc:	e0bff60d 	sth	r2,-40(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv4Command_t);
10009ae0:	00800304 	movi	r2,12
10009ae4:	e0bff685 	stb	r2,-38(fp)
            break;
10009ae8:	00000706 	br	10009b08 <sl_SendTo+0xa8>
        case SL_AF_INET6_EUI_48:
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_BIND_V6;
10009aec:	00a58104 	movi	r2,-27132
10009af0:	e0bff60d 	sth	r2,-40(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6EUI48Command_t);
10009af4:	00800304 	movi	r2,12
10009af8:	e0bff685 	stb	r2,-38(fp)
        	break;
10009afc:	00000206 	br	10009b08 <sl_SendTo+0xa8>
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6Command_t);
            break;
#endif
        case SL_AF_RF:
        default:
            return SL_RET_CODE_INVALID_INPUT;
10009b00:	00bfff84 	movi	r2,-2
10009b04:	00004206 	br	10009c10 <sl_SendTo+0x1b0>
    }

    ChunkLen = _sl_TruncatePayloadByProtocol(sd,Len);
10009b08:	e0fffb0f 	ldh	r3,-20(fp)
10009b0c:	e0bffd0b 	ldhu	r2,-12(fp)
10009b10:	10bfffcc 	andi	r2,r2,65535
10009b14:	1809883a 	mov	r4,r3
10009b18:	100b883a 	mov	r5,r2
10009b1c:	00096680 	call	10009668 <_sl_TruncatePayloadByProtocol>
10009b20:	e0bff20d 	sth	r2,-56(fp)
    Msg.Cmd.IpV4.lenOrPadding = ChunkLen;
10009b24:	e0bff20b 	ldhu	r2,-56(fp)
10009b28:	e0bff30d 	sth	r2,-52(fp)
    CmdExt.TxPayloadLen = ChunkLen;
10009b2c:	e0bff20b 	ldhu	r2,-56(fp)
10009b30:	e0bff70d 	sth	r2,-36(fp)

    Msg.Cmd.IpV4.sd = (_u8)sd;
10009b34:	e0bffb0b 	ldhu	r2,-20(fp)
10009b38:	e0bff385 	stb	r2,-50(fp)

    _sl_BuildAddress(to, tolen, &Msg.Cmd);
10009b3c:	e0bfff0b 	ldhu	r2,-4(fp)
10009b40:	10ffffcc 	andi	r3,r2,65535
10009b44:	18e0001c 	xori	r3,r3,32768
10009b48:	18e00004 	addi	r3,r3,-32768
10009b4c:	e0bff304 	addi	r2,fp,-52
10009b50:	e1000217 	ldw	r4,8(fp)
10009b54:	180b883a 	mov	r5,r3
10009b58:	100d883a 	mov	r6,r2
10009b5c:	00095ac0 	call	100095ac <_sl_BuildAddress>

    Msg.Cmd.IpV4.FamilyAndFlags |= flags & 0x0F;
10009b60:	e0bff3c3 	ldbu	r2,-49(fp)
10009b64:	1007883a 	mov	r3,r2
10009b68:	e0bffe0b 	ldhu	r2,-8(fp)
10009b6c:	108003cc 	andi	r2,r2,15
10009b70:	1884b03a 	or	r2,r3,r2
10009b74:	e0bff3c5 	stb	r2,-49(fp)

    do
    {
        RetVal = _SlDrvDataWriteOp((_SlSd_t)sd, &CmdCtrl, &Msg, &CmdExt);
10009b78:	e0bffb0b 	ldhu	r2,-20(fp)
10009b7c:	11003fcc 	andi	r4,r2,255
10009b80:	e17ff604 	addi	r5,fp,-40
10009b84:	e0fff304 	addi	r3,fp,-52
10009b88:	e0bff704 	addi	r2,fp,-36
10009b8c:	180d883a 	mov	r6,r3
10009b90:	100f883a 	mov	r7,r2
10009b94:	00045f40 	call	100045f4 <_SlDrvDataWriteOp>
10009b98:	e0bff28d 	sth	r2,-54(fp)

        if(SL_OS_RET_CODE_OK == RetVal)
10009b9c:	e0bff28f 	ldh	r2,-54(fp)
10009ba0:	1000161e 	bne	r2,zero,10009bfc <sl_SendTo+0x19c>
        {
            CmdExt.pTxPayload += ChunkLen;
10009ba4:	e0fff917 	ldw	r3,-28(fp)
10009ba8:	e0bff20b 	ldhu	r2,-56(fp)
10009bac:	1885883a 	add	r2,r3,r2
10009bb0:	e0bff915 	stw	r2,-28(fp)
            ChunkLen = (_u16)((_u8 *)pBuf + Len - CmdExt.pTxPayload);
10009bb4:	e0bffd0f 	ldh	r2,-12(fp)
10009bb8:	e0fffc17 	ldw	r3,-16(fp)
10009bbc:	1885883a 	add	r2,r3,r2
10009bc0:	1007883a 	mov	r3,r2
10009bc4:	e0bff917 	ldw	r2,-28(fp)
10009bc8:	1885c83a 	sub	r2,r3,r2
10009bcc:	e0bff20d 	sth	r2,-56(fp)
            ChunkLen = _sl_TruncatePayloadByProtocol(sd,ChunkLen);
10009bd0:	e0fffb0f 	ldh	r3,-20(fp)
10009bd4:	e0bff20b 	ldhu	r2,-56(fp)
10009bd8:	1809883a 	mov	r4,r3
10009bdc:	100b883a 	mov	r5,r2
10009be0:	00096680 	call	10009668 <_sl_TruncatePayloadByProtocol>
10009be4:	e0bff20d 	sth	r2,-56(fp)
            CmdExt.TxPayloadLen = ChunkLen;
10009be8:	e0bff20b 	ldhu	r2,-56(fp)
10009bec:	e0bff70d 	sth	r2,-36(fp)
            Msg.Cmd.IpV4.lenOrPadding = ChunkLen;
10009bf0:	e0bff20b 	ldhu	r2,-56(fp)
10009bf4:	e0bff30d 	sth	r2,-52(fp)
10009bf8:	00000206 	br	10009c04 <sl_SendTo+0x1a4>
        }
        else
        {
            return RetVal;
10009bfc:	e0bff28b 	ldhu	r2,-54(fp)
10009c00:	00000306 	br	10009c10 <sl_SendTo+0x1b0>
        }
    }while(ChunkLen > 0);
10009c04:	e0bff20b 	ldhu	r2,-56(fp)
10009c08:	103fdb1e 	bne	r2,zero,10009b78 <__alt_data_end+0xf0009b78>

    return (_i16)Len;
10009c0c:	e0bffd0b 	ldhu	r2,-12(fp)
}
10009c10:	e037883a 	mov	sp,fp
10009c14:	dfc00117 	ldw	ra,4(sp)
10009c18:	df000017 	ldw	fp,0(sp)
10009c1c:	dec00204 	addi	sp,sp,8
10009c20:	f800283a 	ret

10009c24 <sl_RecvFrom>:
    sizeof(_SocketAddrResponse_u)
};

#if _SL_INCLUDE_FUNC(sl_RecvFrom)
_i16 sl_RecvFrom(_i16 sd, void *buf, _i16 Len, _i16 flags, SlSockAddr_t *from, SlSocklen_t *fromlen)
{
10009c24:	defff204 	addi	sp,sp,-56
10009c28:	dfc00d15 	stw	ra,52(sp)
10009c2c:	df000c15 	stw	fp,48(sp)
10009c30:	df000c04 	addi	fp,sp,48
10009c34:	e17ffd15 	stw	r5,-12(fp)
10009c38:	3007883a 	mov	r3,r6
10009c3c:	3805883a 	mov	r2,r7
10009c40:	e13ffc0d 	sth	r4,-16(fp)
10009c44:	e0fffe0d 	sth	r3,-8(fp)
10009c48:	e0bfff0d 	sth	r2,-4(fp)
    _SlRecvfromMsg_u    Msg;
    _SlCmdExt_t         CmdExt;
    _i16                 RetVal;

    CmdExt.TxPayloadLen = 0;
10009c4c:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = Len;
10009c50:	e0bffe0b 	ldhu	r2,-8(fp)
10009c54:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
10009c58:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)buf;
10009c5c:	e0bffd17 	ldw	r2,-12(fp)
10009c60:	e0bffb15 	stw	r2,-20(fp)


    Msg.Cmd.sd = (_u8)sd;
10009c64:	e0bffc0b 	ldhu	r2,-16(fp)
10009c68:	e0bff585 	stb	r2,-42(fp)
    Msg.Cmd.StatusOrLen = Len;
10009c6c:	e0bffe0b 	ldhu	r2,-8(fp)
10009c70:	e0bff50d 	sth	r2,-44(fp)
    /*  no size truncation in recv path */
    CmdExt.RxPayloadLen = Msg.Cmd.StatusOrLen;
10009c74:	e0bff50b 	ldhu	r2,-44(fp)
10009c78:	e0bff88d 	sth	r2,-30(fp)

    if(sizeof(SlSockAddrIn_t) == *fromlen)
10009c7c:	e0800317 	ldw	r2,12(fp)
10009c80:	1080000b 	ldhu	r2,0(r2)
10009c84:	10bfffcc 	andi	r2,r2,65535
10009c88:	10800418 	cmpnei	r2,r2,16
10009c8c:	1000031e 	bne	r2,zero,10009c9c <sl_RecvFrom+0x78>
    {
        Msg.Cmd.FamilyAndFlags = SL_AF_INET;
10009c90:	00800084 	movi	r2,2
10009c94:	e0bff5c5 	stb	r2,-41(fp)
10009c98:	00000a06 	br	10009cc4 <sl_RecvFrom+0xa0>
    }
    else if (sizeof(SlSockAddrIn6_t) == *fromlen)
10009c9c:	e0800317 	ldw	r2,12(fp)
10009ca0:	1080000b 	ldhu	r2,0(r2)
10009ca4:	10bfffcc 	andi	r2,r2,65535
10009ca8:	10800718 	cmpnei	r2,r2,28
10009cac:	1000031e 	bne	r2,zero,10009cbc <sl_RecvFrom+0x98>
    {
        Msg.Cmd.FamilyAndFlags = SL_AF_INET6;
10009cb0:	008000c4 	movi	r2,3
10009cb4:	e0bff5c5 	stb	r2,-41(fp)
10009cb8:	00000206 	br	10009cc4 <sl_RecvFrom+0xa0>
    }
    else
    {
        return SL_RET_CODE_INVALID_INPUT;
10009cbc:	00bfff84 	movi	r2,-2
10009cc0:	00004a06 	br	10009dec <sl_RecvFrom+0x1c8>
    }

    Msg.Cmd.FamilyAndFlags = (Msg.Cmd.FamilyAndFlags << 4) & 0xF0;
10009cc4:	e0bff5c3 	ldbu	r2,-41(fp)
10009cc8:	10803fcc 	andi	r2,r2,255
10009ccc:	1004913a 	slli	r2,r2,4
10009cd0:	e0bff5c5 	stb	r2,-41(fp)
    Msg.Cmd.FamilyAndFlags |= flags & 0x0F;
10009cd4:	e0bff5c3 	ldbu	r2,-41(fp)
10009cd8:	1007883a 	mov	r3,r2
10009cdc:	e0bfff0b 	ldhu	r2,-4(fp)
10009ce0:	108003cc 	andi	r2,r2,15
10009ce4:	1884b03a 	or	r2,r3,r2
10009ce8:	e0bff5c5 	stb	r2,-41(fp)

    RetVal = _SlDrvDataReadOp((_SlSd_t)sd, (_SlCmdCtrl_t *)&_SlRecvfomCmdCtrl, &Msg, &CmdExt);
10009cec:	e0bffc0b 	ldhu	r2,-16(fp)
10009cf0:	11003fcc 	andi	r4,r2,255
10009cf4:	e0fff504 	addi	r3,fp,-44
10009cf8:	e0bff804 	addi	r2,fp,-32
10009cfc:	d1602004 	addi	r5,gp,-32640
10009d00:	180d883a 	mov	r6,r3
10009d04:	100f883a 	mov	r7,r2
10009d08:	00042500 	call	10004250 <_SlDrvDataReadOp>
10009d0c:	e0bff40d 	sth	r2,-48(fp)
    if( RetVal != SL_OS_RET_CODE_OK )
10009d10:	e0bff40f 	ldh	r2,-48(fp)
10009d14:	10000226 	beq	r2,zero,10009d20 <sl_RecvFrom+0xfc>
    {
	return RetVal;
10009d18:	e0bff40b 	ldhu	r2,-48(fp)
10009d1c:	00003306 	br	10009dec <sl_RecvFrom+0x1c8>
    }

    RetVal = Msg.Rsp.IpV4.statusOrLen;
10009d20:	e0bff50b 	ldhu	r2,-44(fp)
10009d24:	e0bff40d 	sth	r2,-48(fp)

    if(RetVal >= 0)
10009d28:	e0bff40f 	ldh	r2,-48(fp)
10009d2c:	10002e16 	blt	r2,zero,10009de8 <sl_RecvFrom+0x1c4>
    {
        VERIFY_PROTOCOL(sd == Msg.Rsp.IpV4.sd);
10009d30:	e0fffc0f 	ldh	r3,-16(fp)
10009d34:	e0bff583 	ldbu	r2,-42(fp)
10009d38:	10803fcc 	andi	r2,r2,255
10009d3c:	18800126 	beq	r3,r2,10009d44 <sl_RecvFrom+0x120>
10009d40:	003fff06 	br	10009d40 <__alt_data_end+0xf0009d40>
#if 0
        _sl_ParseAddress(&Msg.Rsp, from, fromlen);
#else
        from->sa_family = Msg.Rsp.IpV4.family;
10009d44:	e0bff5c3 	ldbu	r2,-41(fp)
10009d48:	10c03fcc 	andi	r3,r2,255
10009d4c:	e0800217 	ldw	r2,8(fp)
10009d50:	10c0000d 	sth	r3,0(r2)
        if(SL_AF_INET == from->sa_family)
10009d54:	e0800217 	ldw	r2,8(fp)
10009d58:	1080000b 	ldhu	r2,0(r2)
10009d5c:	10bfffcc 	andi	r2,r2,65535
10009d60:	10800098 	cmpnei	r2,r2,2
10009d64:	10000a1e 	bne	r2,zero,10009d90 <sl_RecvFrom+0x16c>
        {
            ((SlSockAddrIn_t *)from)->sin_port = Msg.Rsp.IpV4.port;
10009d68:	e0fff60b 	ldhu	r3,-40(fp)
10009d6c:	e0800217 	ldw	r2,8(fp)
10009d70:	10c0008d 	sth	r3,2(r2)
            ((SlSockAddrIn_t *)from)->sin_addr.s_addr = Msg.Rsp.IpV4.address;
10009d74:	e0fff717 	ldw	r3,-36(fp)
10009d78:	e0800217 	ldw	r2,8(fp)
10009d7c:	10c00115 	stw	r3,4(r2)
            *fromlen = sizeof(SlSockAddrIn_t);
10009d80:	e0800317 	ldw	r2,12(fp)
10009d84:	00c00404 	movi	r3,16
10009d88:	10c0000d 	sth	r3,0(r2)
10009d8c:	00001606 	br	10009de8 <sl_RecvFrom+0x1c4>
        }
        else if (SL_AF_INET6_EUI_48 == from->sa_family )
10009d90:	e0800217 	ldw	r2,8(fp)
10009d94:	1080000b 	ldhu	r2,0(r2)
10009d98:	10bfffcc 	andi	r2,r2,65535
10009d9c:	10800258 	cmpnei	r2,r2,9
10009da0:	1000111e 	bne	r2,zero,10009de8 <sl_RecvFrom+0x1c4>
         {
            ((SlSockAddrIn6_t *)from)->sin6_port  = Msg.Rsp.IpV6EUI48.port;
10009da4:	e0fff60b 	ldhu	r3,-40(fp)
10009da8:	e0800217 	ldw	r2,8(fp)
10009dac:	10c0008d 	sth	r3,2(r2)
            sl_Memcpy(((SlSockAddrIn6_t *)from)->sin6_addr._S6_un._S6_u8, Msg.Rsp.IpV6EUI48.address, 6);
10009db0:	e0800217 	ldw	r2,8(fp)
10009db4:	10800204 	addi	r2,r2,8
10009db8:	e0fff683 	ldbu	r3,-38(fp)
10009dbc:	10c00005 	stb	r3,0(r2)
10009dc0:	e0fff6c3 	ldbu	r3,-37(fp)
10009dc4:	10c00045 	stb	r3,1(r2)
10009dc8:	e0fff703 	ldbu	r3,-36(fp)
10009dcc:	10c00085 	stb	r3,2(r2)
10009dd0:	e0fff743 	ldbu	r3,-35(fp)
10009dd4:	10c000c5 	stb	r3,3(r2)
10009dd8:	e0fff783 	ldbu	r3,-34(fp)
10009ddc:	10c00105 	stb	r3,4(r2)
10009de0:	e0fff7c3 	ldbu	r3,-33(fp)
10009de4:	10c00145 	stb	r3,5(r2)
        }
#endif
#endif
    }

    return (_i16)RetVal;
10009de8:	e0bff40b 	ldhu	r2,-48(fp)
}
10009dec:	e037883a 	mov	sp,fp
10009df0:	dfc00117 	ldw	ra,4(sp)
10009df4:	df000017 	ldw	fp,0(sp)
10009df8:	dec00204 	addi	sp,sp,8
10009dfc:	f800283a 	ret

10009e00 <sl_Connect>:
	_SocketResponse_t	    Rsp;
}_SlSockConnectMsg_u;

#if _SL_INCLUDE_FUNC(sl_Connect)
_i16 sl_Connect(_i16 sd, const SlSockAddr_t *addr, _i16 addrlen)
{
10009e00:	defff304 	addi	sp,sp,-52
10009e04:	dfc00c15 	stw	ra,48(sp)
10009e08:	df000b15 	stw	fp,44(sp)
10009e0c:	df000b04 	addi	fp,sp,44
10009e10:	2007883a 	mov	r3,r4
10009e14:	e17ffe15 	stw	r5,-8(fp)
10009e18:	3005883a 	mov	r2,r6
10009e1c:	e0fffd0d 	sth	r3,-12(fp)
10009e20:	e0bfff0d 	sth	r2,-4(fp)
	_SlSockConnectMsg_u  Msg;
	_SlReturnVal_t       RetVal;
    _SlCmdCtrl_t         CmdCtrl = {0, 0, sizeof(_SocketResponse_t)};
10009e24:	e03ffb0d 	sth	zero,-20(fp)
10009e28:	e03ffb85 	stb	zero,-18(fp)
10009e2c:	00800104 	movi	r2,4
10009e30:	e0bffbc5 	stb	r2,-17(fp)
    _SocketResponse_t    AsyncRsp;
	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
10009e34:	00800284 	movi	r2,10
10009e38:	e0bff585 	stb	r2,-42(fp)


    switch(addr->sa_family)
10009e3c:	e0bffe17 	ldw	r2,-8(fp)
10009e40:	1080000b 	ldhu	r2,0(r2)
10009e44:	10bfffcc 	andi	r2,r2,65535
10009e48:	10c000a0 	cmpeqi	r3,r2,2
10009e4c:	1800031e 	bne	r3,zero,10009e5c <sl_Connect+0x5c>
10009e50:	10800260 	cmpeqi	r2,r2,9
10009e54:	1000061e 	bne	r2,zero,10009e70 <sl_Connect+0x70>
10009e58:	00000a06 	br	10009e84 <sl_Connect+0x84>
    {
        case SL_AF_INET :
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_CONNECT;
10009e5c:	00a50184 	movi	r2,-27642
10009e60:	e0bffb0d 	sth	r2,-20(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv4Command_t);
10009e64:	00800304 	movi	r2,12
10009e68:	e0bffb85 	stb	r2,-18(fp)
            break;
10009e6c:	00000706 	br	10009e8c <sl_Connect+0x8c>
        case  SL_AF_INET6_EUI_48:
            CmdCtrl.Opcode = SL_OPCODE_SOCKET_CONNECT_V6;
10009e70:	00a58184 	movi	r2,-27130
10009e74:	e0bffb0d 	sth	r2,-20(fp)
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6EUI48Command_t);
10009e78:	00800304 	movi	r2,12
10009e7c:	e0bffb85 	stb	r2,-18(fp)
        	break;
10009e80:	00000206 	br	10009e8c <sl_Connect+0x8c>
            CmdCtrl.TxDescLen = sizeof(_SocketAddrIPv6Command_t);
            break;
#endif
        case SL_AF_RF   :
        default:
            return SL_RET_CODE_INVALID_INPUT;
10009e84:	00bfff84 	movi	r2,-2
10009e88:	00006d06 	br	1000a040 <sl_Connect+0x240>
    }

    Msg.Cmd.IpV4.lenOrPadding = 0;
10009e8c:	e03ff80d 	sth	zero,-32(fp)
    Msg.Cmd.IpV4.sd = (_u8)sd;
10009e90:	e0bffd0b 	ldhu	r2,-12(fp)
10009e94:	e0bff885 	stb	r2,-30(fp)

    _sl_BuildAddress(addr, addrlen, &Msg.Cmd);
10009e98:	e0ffff0f 	ldh	r3,-4(fp)
10009e9c:	e0bff804 	addi	r2,fp,-32
10009ea0:	e13ffe17 	ldw	r4,-8(fp)
10009ea4:	180b883a 	mov	r5,r3
10009ea8:	100d883a 	mov	r6,r2
10009eac:	00095ac0 	call	100095ac <_sl_BuildAddress>

	/* Use Obj to issue the command, if not available try later */
	ObjIdx = (_u8)_SlDrvWaitForPoolObj(CONNECT_ID, (_u8)(sd  & BSD_SOCKET_ID_MASK));
10009eb0:	e0bffd0b 	ldhu	r2,-12(fp)
10009eb4:	10803fcc 	andi	r2,r2,255
10009eb8:	108003cc 	andi	r2,r2,15
10009ebc:	01000244 	movi	r4,9
10009ec0:	100b883a 	mov	r5,r2
10009ec4:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
10009ec8:	e0bff585 	stb	r2,-42(fp)

	if (MAX_CONCURRENT_ACTIONS == ObjIdx)
10009ecc:	e0bff583 	ldbu	r2,-42(fp)
10009ed0:	10800298 	cmpnei	r2,r2,10
10009ed4:	1000021e 	bne	r2,zero,10009ee0 <sl_Connect+0xe0>
	{
		return SL_POOL_IS_EMPTY;
10009ed8:	00be0c04 	movi	r2,-2000
10009edc:	00005806 	br	1000a040 <sl_Connect+0x240>
	}
	OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
10009ee0:	008400f4 	movhi	r2,4099
10009ee4:	10a48204 	addi	r2,r2,-28152
10009ee8:	10800017 	ldw	r2,0(r2)
10009eec:	10802404 	addi	r2,r2,144
10009ef0:	1009883a 	mov	r4,r2
10009ef4:	01400cc4 	movi	r5,51
10009ef8:	01801104 	movi	r6,68
10009efc:	01c03fc4 	movi	r7,255
10009f00:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10009f04:	10803fcc 	andi	r2,r2,255
10009f08:	1080201c 	xori	r2,r2,128
10009f0c:	10bfe004 	addi	r2,r2,-128
10009f10:	e0bff60d 	sth	r2,-40(fp)
10009f14:	e0bff60f 	ldh	r2,-40(fp)
10009f18:	10000126 	beq	r2,zero,10009f20 <sl_Connect+0x120>
10009f1c:	003fff06 	br	10009f1c <__alt_data_end+0xf0009f1c>

	g_pCB->ObjPool[ObjIdx].pRespArgs =  (_u8 *)&AsyncRsp;
10009f20:	008400f4 	movhi	r2,4099
10009f24:	10a48204 	addi	r2,r2,-28152
10009f28:	10c00017 	ldw	r3,0(r2)
10009f2c:	e0bff583 	ldbu	r2,-42(fp)
10009f30:	10800324 	muli	r2,r2,12
10009f34:	1885883a 	add	r2,r3,r2
10009f38:	10800504 	addi	r2,r2,20
10009f3c:	e0fffc04 	addi	r3,fp,-16
10009f40:	10c00015 	stw	r3,0(r2)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
10009f44:	008400f4 	movhi	r2,4099
10009f48:	10a48204 	addi	r2,r2,-28152
10009f4c:	10800017 	ldw	r2,0(r2)
10009f50:	10802404 	addi	r2,r2,144
10009f54:	1009883a 	mov	r4,r2
10009f58:	01400cc4 	movi	r5,51
10009f5c:	000938c0 	call	1000938c <_SlNonOsSemSet>
10009f60:	10803fcc 	andi	r2,r2,255
10009f64:	1080201c 	xori	r2,r2,128
10009f68:	10bfe004 	addi	r2,r2,-128
10009f6c:	e0bff68d 	sth	r2,-38(fp)
10009f70:	e0bff68f 	ldh	r2,-38(fp)
10009f74:	10000126 	beq	r2,zero,10009f7c <sl_Connect+0x17c>
10009f78:	003fff06 	br	10009f78 <__alt_data_end+0xf0009f78>
	
	/* send the command */
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&CmdCtrl, &Msg, NULL));
10009f7c:	e0fffb04 	addi	r3,fp,-20
10009f80:	e0bff804 	addi	r2,fp,-32
10009f84:	1809883a 	mov	r4,r3
10009f88:	100b883a 	mov	r5,r2
10009f8c:	000d883a 	mov	r6,zero
10009f90:	00040cc0 	call	100040cc <_SlDrvCmdOp>
10009f94:	e0bff70d 	sth	r2,-36(fp)
10009f98:	e0bff70f 	ldh	r2,-36(fp)
10009f9c:	10000126 	beq	r2,zero,10009fa4 <sl_Connect+0x1a4>
10009fa0:	003fff06 	br	10009fa0 <__alt_data_end+0xf0009fa0>
    VERIFY_PROTOCOL(Msg.Rsp.sd == sd)
10009fa4:	e0bff883 	ldbu	r2,-30(fp)
10009fa8:	10c03fcc 	andi	r3,r2,255
10009fac:	e0bffd0f 	ldh	r2,-12(fp)
10009fb0:	18800126 	beq	r3,r2,10009fb8 <sl_Connect+0x1b8>
10009fb4:	003fff06 	br	10009fb4 <__alt_data_end+0xf0009fb4>

	RetVal = Msg.Rsp.statusOrLen;
10009fb8:	e0bff80b 	ldhu	r2,-32(fp)
10009fbc:	e0bff50d 	sth	r2,-44(fp)

    if(SL_RET_CODE_OK == RetVal)
10009fc0:	e0bff50f 	ldh	r2,-44(fp)
10009fc4:	10001a1e 	bne	r2,zero,1000a030 <sl_Connect+0x230>
    {
		/*  wait for async and get Data Read parameters */
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
10009fc8:	008400f4 	movhi	r2,4099
10009fcc:	10a48204 	addi	r2,r2,-28152
10009fd0:	10c00017 	ldw	r3,0(r2)
10009fd4:	e0bff583 	ldbu	r2,-42(fp)
10009fd8:	10800324 	muli	r2,r2,12
10009fdc:	10800404 	addi	r2,r2,16
10009fe0:	1885883a 	add	r2,r3,r2
10009fe4:	1009883a 	mov	r4,r2
10009fe8:	01400884 	movi	r5,34
10009fec:	01800444 	movi	r6,17
10009ff0:	01c03fc4 	movi	r7,255
10009ff4:	00093c40 	call	100093c4 <_SlNonOsSemGet>
10009ff8:	10803fcc 	andi	r2,r2,255
10009ffc:	1080201c 	xori	r2,r2,128
1000a000:	10bfe004 	addi	r2,r2,-128
1000a004:	e0bff78d 	sth	r2,-34(fp)
1000a008:	e0bff78f 	ldh	r2,-34(fp)
1000a00c:	10000126 	beq	r2,zero,1000a014 <sl_Connect+0x214>
1000a010:	003fff06 	br	1000a010 <__alt_data_end+0xf000a010>

        VERIFY_PROTOCOL(AsyncRsp.sd == sd);
1000a014:	e0bffc83 	ldbu	r2,-14(fp)
1000a018:	10c03fcc 	andi	r3,r2,255
1000a01c:	e0bffd0f 	ldh	r2,-12(fp)
1000a020:	18800126 	beq	r3,r2,1000a028 <sl_Connect+0x228>
1000a024:	003fff06 	br	1000a024 <__alt_data_end+0xf000a024>

        RetVal = AsyncRsp.statusOrLen;
1000a028:	e0bffc0b 	ldhu	r2,-16(fp)
1000a02c:	e0bff50d 	sth	r2,-44(fp)
    }
    _SlDrvReleasePoolObj(ObjIdx);
1000a030:	e0bff583 	ldbu	r2,-42(fp)
1000a034:	1009883a 	mov	r4,r2
1000a038:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return RetVal;
1000a03c:	e0bff50b 	ldhu	r2,-44(fp)
}
1000a040:	e037883a 	mov	sp,fp
1000a044:	dfc00117 	ldw	ra,4(sp)
1000a048:	df000017 	ldw	fp,0(sp)
1000a04c:	dec00204 	addi	sp,sp,8
1000a050:	f800283a 	ret

1000a054 <_sl_HandleAsync_Connect>:

/*******************************************************************************/
/*   _sl_HandleAsync_Connect */
/*******************************************************************************/
void _sl_HandleAsync_Connect(void *pVoidBuf)
{
1000a054:	defffa04 	addi	sp,sp,-24
1000a058:	dfc00515 	stw	ra,20(sp)
1000a05c:	df000415 	stw	fp,16(sp)
1000a060:	df000404 	addi	fp,sp,16
1000a064:	e13fff15 	stw	r4,-4(fp)
    _SocketResponse_t          *pMsgArgs   = (_SocketResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
1000a068:	e0bfff17 	ldw	r2,-4(fp)
1000a06c:	10800204 	addi	r2,r2,8
1000a070:	e0bffc15 	stw	r2,-16(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000a074:	008400f4 	movhi	r2,4099
1000a078:	10a48204 	addi	r2,r2,-28152
1000a07c:	10800017 	ldw	r2,0(r2)
1000a080:	10802404 	addi	r2,r2,144
1000a084:	1009883a 	mov	r4,r2
1000a088:	01400cc4 	movi	r5,51
1000a08c:	01801104 	movi	r6,68
1000a090:	01c03fc4 	movi	r7,255
1000a094:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000a098:	10803fcc 	andi	r2,r2,255
1000a09c:	1080201c 	xori	r2,r2,128
1000a0a0:	10bfe004 	addi	r2,r2,-128
1000a0a4:	e0bffd0d 	sth	r2,-12(fp)
1000a0a8:	e0bffd0f 	ldh	r2,-12(fp)
1000a0ac:	10000126 	beq	r2,zero,1000a0b4 <_sl_HandleAsync_Connect+0x60>
1000a0b0:	003fff06 	br	1000a0b0 <__alt_data_end+0xf000a0b0>

    VERIFY_PROTOCOL((pMsgArgs->sd & BSD_SOCKET_ID_MASK) <= SL_MAX_SOCKETS);
1000a0b4:	e0bffc17 	ldw	r2,-16(fp)
1000a0b8:	10800083 	ldbu	r2,2(r2)
1000a0bc:	10803fcc 	andi	r2,r2,255
1000a0c0:	108003cc 	andi	r2,r2,15
1000a0c4:	10800250 	cmplti	r2,r2,9
1000a0c8:	1000011e 	bne	r2,zero,1000a0d0 <_sl_HandleAsync_Connect+0x7c>
1000a0cc:	003fff06 	br	1000a0cc <__alt_data_end+0xf000a0cc>
    VERIFY_SOCKET_CB(NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs);

    ((_SocketResponse_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs))->sd = pMsgArgs->sd;
1000a0d0:	008400f4 	movhi	r2,4099
1000a0d4:	10a48204 	addi	r2,r2,-28152
1000a0d8:	10c00017 	ldw	r3,0(r2)
1000a0dc:	008400f4 	movhi	r2,4099
1000a0e0:	10a48204 	addi	r2,r2,-28152
1000a0e4:	10800017 	ldw	r2,0(r2)
1000a0e8:	10802b03 	ldbu	r2,172(r2)
1000a0ec:	10803fcc 	andi	r2,r2,255
1000a0f0:	10800324 	muli	r2,r2,12
1000a0f4:	1885883a 	add	r2,r3,r2
1000a0f8:	10800504 	addi	r2,r2,20
1000a0fc:	10800017 	ldw	r2,0(r2)
1000a100:	e0fffc17 	ldw	r3,-16(fp)
1000a104:	18c00083 	ldbu	r3,2(r3)
1000a108:	10c00085 	stb	r3,2(r2)
    ((_SocketResponse_t *)(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs))->statusOrLen = pMsgArgs->statusOrLen;
1000a10c:	008400f4 	movhi	r2,4099
1000a110:	10a48204 	addi	r2,r2,-28152
1000a114:	10c00017 	ldw	r3,0(r2)
1000a118:	008400f4 	movhi	r2,4099
1000a11c:	10a48204 	addi	r2,r2,-28152
1000a120:	10800017 	ldw	r2,0(r2)
1000a124:	10802b03 	ldbu	r2,172(r2)
1000a128:	10803fcc 	andi	r2,r2,255
1000a12c:	10800324 	muli	r2,r2,12
1000a130:	1885883a 	add	r2,r3,r2
1000a134:	10800504 	addi	r2,r2,20
1000a138:	10800017 	ldw	r2,0(r2)
1000a13c:	e0fffc17 	ldw	r3,-16(fp)
1000a140:	18c0000b 	ldhu	r3,0(r3)
1000a144:	10c0000d 	sth	r3,0(r2)

    OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
1000a148:	008400f4 	movhi	r2,4099
1000a14c:	10a48204 	addi	r2,r2,-28152
1000a150:	10c00017 	ldw	r3,0(r2)
1000a154:	008400f4 	movhi	r2,4099
1000a158:	10a48204 	addi	r2,r2,-28152
1000a15c:	10800017 	ldw	r2,0(r2)
1000a160:	10802b03 	ldbu	r2,172(r2)
1000a164:	10803fcc 	andi	r2,r2,255
1000a168:	10800324 	muli	r2,r2,12
1000a16c:	10800404 	addi	r2,r2,16
1000a170:	1885883a 	add	r2,r3,r2
1000a174:	1009883a 	mov	r4,r2
1000a178:	01400884 	movi	r5,34
1000a17c:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000a180:	10803fcc 	andi	r2,r2,255
1000a184:	1080201c 	xori	r2,r2,128
1000a188:	10bfe004 	addi	r2,r2,-128
1000a18c:	e0bffd8d 	sth	r2,-10(fp)
1000a190:	e0bffd8f 	ldh	r2,-10(fp)
1000a194:	10000126 	beq	r2,zero,1000a19c <_sl_HandleAsync_Connect+0x148>
1000a198:	003fff06 	br	1000a198 <__alt_data_end+0xf000a198>
    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000a19c:	008400f4 	movhi	r2,4099
1000a1a0:	10a48204 	addi	r2,r2,-28152
1000a1a4:	10800017 	ldw	r2,0(r2)
1000a1a8:	10802404 	addi	r2,r2,144
1000a1ac:	1009883a 	mov	r4,r2
1000a1b0:	01400cc4 	movi	r5,51
1000a1b4:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000a1b8:	10803fcc 	andi	r2,r2,255
1000a1bc:	1080201c 	xori	r2,r2,128
1000a1c0:	10bfe004 	addi	r2,r2,-128
1000a1c4:	e0bffe0d 	sth	r2,-8(fp)
1000a1c8:	e0bffe0f 	ldh	r2,-8(fp)
1000a1cc:	10000126 	beq	r2,zero,1000a1d4 <_sl_HandleAsync_Connect+0x180>
1000a1d0:	003fff06 	br	1000a1d0 <__alt_data_end+0xf000a1d0>
    return;
1000a1d4:	0001883a 	nop
}
1000a1d8:	e037883a 	mov	sp,fp
1000a1dc:	dfc00117 	ldw	ra,4(sp)
1000a1e0:	df000017 	ldw	fp,0(sp)
1000a1e4:	dec00204 	addi	sp,sp,8
1000a1e8:	f800283a 	ret

1000a1ec <sl_Send>:
    0
};

#if _SL_INCLUDE_FUNC(sl_Send)
_i16 sl_Send(_i16 sd, const void *pBuf, _i16 Len, _i16 flags)
{
1000a1ec:	defff204 	addi	sp,sp,-56
1000a1f0:	dfc00d15 	stw	ra,52(sp)
1000a1f4:	df000c15 	stw	fp,48(sp)
1000a1f8:	df000c04 	addi	fp,sp,48
1000a1fc:	e17ffd15 	stw	r5,-12(fp)
1000a200:	3007883a 	mov	r3,r6
1000a204:	3805883a 	mov	r2,r7
1000a208:	e13ffc0d 	sth	r4,-16(fp)
1000a20c:	e0fffe0d 	sth	r3,-8(fp)
1000a210:	e0bfff0d 	sth	r2,-4(fp)
    _SlSendMsg_u   Msg;
    _SlCmdExt_t    CmdExt;
    _u16         ChunkLen;
    _i16            RetVal;
	_u32         tempVal;
	_u8  runSingleChunk = FALSE; 
1000a214:	e03ff485 	stb	zero,-46(fp)

    CmdExt.TxPayloadLen = Len;
1000a218:	e0bffe0b 	ldhu	r2,-8(fp)
1000a21c:	e0bff70d 	sth	r2,-36(fp)
    CmdExt.RxPayloadLen = 0;
1000a220:	e03ff78d 	sth	zero,-34(fp)
    CmdExt.pTxPayload = (_u8 *)pBuf;
1000a224:	e0bffd17 	ldw	r2,-12(fp)
1000a228:	e0bff915 	stw	r2,-28(fp)

    /* Only for RAW transceiver type socket, relay the flags parameter in the 2 bytes (4 byte aligned) before the actual payload */
    if ((sd & SL_SOCKET_PAYLOAD_TYPE_MASK) == SL_SOCKET_PAYLOAD_TYPE_RAW_TRANCEIVER)
1000a22c:	e0bffc0b 	ldhu	r2,-16(fp)
1000a230:	10bfffcc 	andi	r2,r2,65535
1000a234:	10803c0c 	andi	r2,r2,240
1000a238:	10802018 	cmpnei	r2,r2,128
1000a23c:	10000e1e 	bne	r2,zero,1000a278 <sl_Send+0x8c>
    {
		tempVal = flags;
1000a240:	e0bfff0f 	ldh	r2,-4(fp)
1000a244:	e0bffb15 	stw	r2,-20(fp)
        CmdExt.pRxPayload = (_u8 *)&tempVal;
1000a248:	e0bffb04 	addi	r2,fp,-20
1000a24c:	e0bffa15 	stw	r2,-24(fp)
		CmdExt.RxPayloadLen = 4;
1000a250:	00800104 	movi	r2,4
1000a254:	e0bff78d 	sth	r2,-34(fp)
        g_pCB->RelayFlagsViaRxPayload = TRUE;
1000a258:	008400f4 	movhi	r2,4099
1000a25c:	10a48204 	addi	r2,r2,-28152
1000a260:	10800017 	ldw	r2,0(r2)
1000a264:	00c00044 	movi	r3,1
1000a268:	10c026c5 	stb	r3,155(r2)
		runSingleChunk = TRUE;
1000a26c:	00800044 	movi	r2,1
1000a270:	e0bff485 	stb	r2,-46(fp)
1000a274:	00000106 	br	1000a27c <sl_Send+0x90>
    }
    else
    {
        CmdExt.pRxPayload = NULL;
1000a278:	e03ffa15 	stw	zero,-24(fp)
    }

    ChunkLen = _sl_TruncatePayloadByProtocol(sd,Len);
1000a27c:	e0fffc0f 	ldh	r3,-16(fp)
1000a280:	e0bffe0b 	ldhu	r2,-8(fp)
1000a284:	10bfffcc 	andi	r2,r2,65535
1000a288:	1809883a 	mov	r4,r3
1000a28c:	100b883a 	mov	r5,r2
1000a290:	00096680 	call	10009668 <_sl_TruncatePayloadByProtocol>
1000a294:	e0bff40d 	sth	r2,-48(fp)
    CmdExt.TxPayloadLen = ChunkLen;
1000a298:	e0bff40b 	ldhu	r2,-48(fp)
1000a29c:	e0bff70d 	sth	r2,-36(fp)

    Msg.Cmd.StatusOrLen = ChunkLen;
1000a2a0:	e0bff40b 	ldhu	r2,-48(fp)
1000a2a4:	e0bff58d 	sth	r2,-42(fp)
    Msg.Cmd.sd = (_u8)sd;
1000a2a8:	e0bffc0b 	ldhu	r2,-16(fp)
1000a2ac:	e0bff605 	stb	r2,-40(fp)
    Msg.Cmd.FamilyAndFlags |= flags & 0x0F;
1000a2b0:	e0bff643 	ldbu	r2,-39(fp)
1000a2b4:	1007883a 	mov	r3,r2
1000a2b8:	e0bfff0b 	ldhu	r2,-4(fp)
1000a2bc:	108003cc 	andi	r2,r2,15
1000a2c0:	1884b03a 	or	r2,r3,r2
1000a2c4:	e0bff645 	stb	r2,-39(fp)

    do
    {
        RetVal = _SlDrvDataWriteOp((_u8)sd, (_SlCmdCtrl_t *)&_SlSendCmdCtrl, &Msg, &CmdExt);
1000a2c8:	e0bffc0b 	ldhu	r2,-16(fp)
1000a2cc:	11003fcc 	andi	r4,r2,255
1000a2d0:	e0fff584 	addi	r3,fp,-42
1000a2d4:	e0bff704 	addi	r2,fp,-36
1000a2d8:	d1602104 	addi	r5,gp,-32636
1000a2dc:	180d883a 	mov	r6,r3
1000a2e0:	100f883a 	mov	r7,r2
1000a2e4:	00045f40 	call	100045f4 <_SlDrvDataWriteOp>
1000a2e8:	e0bff50d 	sth	r2,-44(fp)
        if(SL_OS_RET_CODE_OK == RetVal)
1000a2ec:	e0bff50f 	ldh	r2,-44(fp)
1000a2f0:	1000181e 	bne	r2,zero,1000a354 <sl_Send+0x168>
        {
            CmdExt.pTxPayload += ChunkLen;
1000a2f4:	e0fff917 	ldw	r3,-28(fp)
1000a2f8:	e0bff40b 	ldhu	r2,-48(fp)
1000a2fc:	1885883a 	add	r2,r3,r2
1000a300:	e0bff915 	stw	r2,-28(fp)
            ChunkLen = (_u8 *)pBuf + Len - CmdExt.pTxPayload;
1000a304:	e0bffe0f 	ldh	r2,-8(fp)
1000a308:	e0fffd17 	ldw	r3,-12(fp)
1000a30c:	1885883a 	add	r2,r3,r2
1000a310:	1007883a 	mov	r3,r2
1000a314:	e0bff917 	ldw	r2,-28(fp)
1000a318:	1885c83a 	sub	r2,r3,r2
1000a31c:	e0bff40d 	sth	r2,-48(fp)
            ChunkLen = _sl_TruncatePayloadByProtocol(sd,ChunkLen);
1000a320:	e0fffc0f 	ldh	r3,-16(fp)
1000a324:	e0bff40b 	ldhu	r2,-48(fp)
1000a328:	1809883a 	mov	r4,r3
1000a32c:	100b883a 	mov	r5,r2
1000a330:	00096680 	call	10009668 <_sl_TruncatePayloadByProtocol>
1000a334:	e0bff40d 	sth	r2,-48(fp)
            CmdExt.TxPayloadLen = ChunkLen;
1000a338:	e0bff40b 	ldhu	r2,-48(fp)
1000a33c:	e0bff70d 	sth	r2,-36(fp)
            Msg.Cmd.StatusOrLen = ChunkLen;
1000a340:	e0bff40b 	ldhu	r2,-48(fp)
1000a344:	e0bff58d 	sth	r2,-42(fp)
        }
        else
        {
            return RetVal;
        }
    }while((ChunkLen > 0) && (runSingleChunk==FALSE));
1000a348:	e0bff40b 	ldhu	r2,-48(fp)
1000a34c:	10000526 	beq	r2,zero,1000a364 <sl_Send+0x178>
1000a350:	00000206 	br	1000a35c <sl_Send+0x170>
            CmdExt.TxPayloadLen = ChunkLen;
            Msg.Cmd.StatusOrLen = ChunkLen;
        }
        else
        {
            return RetVal;
1000a354:	e0bff50b 	ldhu	r2,-44(fp)
1000a358:	00000306 	br	1000a368 <sl_Send+0x17c>
        }
    }while((ChunkLen > 0) && (runSingleChunk==FALSE));
1000a35c:	e0bff483 	ldbu	r2,-46(fp)
1000a360:	103fd926 	beq	r2,zero,1000a2c8 <__alt_data_end+0xf000a2c8>
    
    return (_i16)Len;
1000a364:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000a368:	e037883a 	mov	sp,fp
1000a36c:	dfc00117 	ldw	ra,4(sp)
1000a370:	df000017 	ldw	fp,0(sp)
1000a374:	dec00204 	addi	sp,sp,8
1000a378:	f800283a 	ret

1000a37c <sl_Listen>:
    sizeof(_BasicResponse_t),
};

#if _SL_INCLUDE_FUNC(sl_Listen)
_i16 sl_Listen(_i16 sd, _i16 backlog)
{
1000a37c:	defffa04 	addi	sp,sp,-24
1000a380:	dfc00515 	stw	ra,20(sp)
1000a384:	df000415 	stw	fp,16(sp)
1000a388:	df000404 	addi	fp,sp,16
1000a38c:	2007883a 	mov	r3,r4
1000a390:	2805883a 	mov	r2,r5
1000a394:	e0fffe0d 	sth	r3,-8(fp)
1000a398:	e0bfff0d 	sth	r2,-4(fp)
    _SlListenMsg_u  Msg;

    Msg.Cmd.sd = (_u8)sd;
1000a39c:	e0bffe0b 	ldhu	r2,-8(fp)
1000a3a0:	e0bffc85 	stb	r2,-14(fp)
    Msg.Cmd.backlog = (_u8)backlog;
1000a3a4:	e0bfff0b 	ldhu	r2,-4(fp)
1000a3a8:	e0bffcc5 	stb	r2,-13(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlListenCmdCtrl, &Msg, NULL));
1000a3ac:	e0bffc84 	addi	r2,fp,-14
1000a3b0:	d1202204 	addi	r4,gp,-32632
1000a3b4:	100b883a 	mov	r5,r2
1000a3b8:	000d883a 	mov	r6,zero
1000a3bc:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000a3c0:	e0bffc0d 	sth	r2,-16(fp)
1000a3c4:	e0bffc0f 	ldh	r2,-16(fp)
1000a3c8:	10000126 	beq	r2,zero,1000a3d0 <sl_Listen+0x54>
1000a3cc:	003fff06 	br	1000a3cc <__alt_data_end+0xf000a3cc>

    return (_i16)Msg.Rsp.status;
1000a3d0:	e0bffc8b 	ldhu	r2,-14(fp)
}
1000a3d4:	e037883a 	mov	sp,fp
1000a3d8:	dfc00117 	ldw	ra,4(sp)
1000a3dc:	df000017 	ldw	fp,0(sp)
1000a3e0:	dec00204 	addi	sp,sp,8
1000a3e4:	f800283a 	ret

1000a3e8 <sl_Accept>:
    sizeof(_BasicResponse_t),
};

#if _SL_INCLUDE_FUNC(sl_Accept)
_i16 sl_Accept(_i16 sd, SlSockAddr_t *addr, SlSocklen_t *addrlen)
{
1000a3e8:	defff404 	addi	sp,sp,-48
1000a3ec:	dfc00b15 	stw	ra,44(sp)
1000a3f0:	df000a15 	stw	fp,40(sp)
1000a3f4:	df000a04 	addi	fp,sp,40
1000a3f8:	2005883a 	mov	r2,r4
1000a3fc:	e17ffe15 	stw	r5,-8(fp)
1000a400:	e1bfff15 	stw	r6,-4(fp)
1000a404:	e0bffd0d 	sth	r2,-12(fp)
	_SlSockAcceptMsg_u      Msg;
    _SlReturnVal_t          RetVal;
    _SocketAddrResponse_u   AsyncRsp;

	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
1000a408:	00800284 	movi	r2,10
1000a40c:	e0bff685 	stb	r2,-38(fp)


    Msg.Cmd.sd = (_u8)sd;
1000a410:	e0bffd0b 	ldhu	r2,-12(fp)
1000a414:	e0bff905 	stb	r2,-28(fp)
    Msg.Cmd.family = (sizeof(SlSockAddrIn_t) == *addrlen) ? SL_AF_INET : SL_AF_INET6;
1000a418:	e0bfff17 	ldw	r2,-4(fp)
1000a41c:	1080000b 	ldhu	r2,0(r2)
1000a420:	10bfffcc 	andi	r2,r2,65535
1000a424:	10800418 	cmpnei	r2,r2,16
1000a428:	1000021e 	bne	r2,zero,1000a434 <sl_Accept+0x4c>
1000a42c:	00800084 	movi	r2,2
1000a430:	00000106 	br	1000a438 <sl_Accept+0x50>
1000a434:	008000c4 	movi	r2,3
1000a438:	e0bff945 	stb	r2,-27(fp)

	/* Use Obj to issue the command, if not available try later */
	ObjIdx = (_u8)_SlDrvWaitForPoolObj(ACCEPT_ID, (_u8)(sd  & BSD_SOCKET_ID_MASK));
1000a43c:	e0bffd0b 	ldhu	r2,-12(fp)
1000a440:	10803fcc 	andi	r2,r2,255
1000a444:	108003cc 	andi	r2,r2,15
1000a448:	01000204 	movi	r4,8
1000a44c:	100b883a 	mov	r5,r2
1000a450:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
1000a454:	e0bff685 	stb	r2,-38(fp)
	
	if (MAX_CONCURRENT_ACTIONS == ObjIdx)
1000a458:	e0bff683 	ldbu	r2,-38(fp)
1000a45c:	10800298 	cmpnei	r2,r2,10
1000a460:	1000021e 	bne	r2,zero,1000a46c <sl_Accept+0x84>
	{
		return SL_POOL_IS_EMPTY;
1000a464:	00be0c04 	movi	r2,-2000
1000a468:	00009106 	br	1000a6b0 <sl_Accept+0x2c8>
	}
	
    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000a46c:	008400f4 	movhi	r2,4099
1000a470:	10a48204 	addi	r2,r2,-28152
1000a474:	10800017 	ldw	r2,0(r2)
1000a478:	10802404 	addi	r2,r2,144
1000a47c:	1009883a 	mov	r4,r2
1000a480:	01400cc4 	movi	r5,51
1000a484:	01801104 	movi	r6,68
1000a488:	01c03fc4 	movi	r7,255
1000a48c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000a490:	10803fcc 	andi	r2,r2,255
1000a494:	1080201c 	xori	r2,r2,128
1000a498:	10bfe004 	addi	r2,r2,-128
1000a49c:	e0bff70d 	sth	r2,-36(fp)
1000a4a0:	e0bff70f 	ldh	r2,-36(fp)
1000a4a4:	10000126 	beq	r2,zero,1000a4ac <sl_Accept+0xc4>
1000a4a8:	003fff06 	br	1000a4a8 <__alt_data_end+0xf000a4a8>

	g_pCB->ObjPool[ObjIdx].pRespArgs = (_u8 *)&AsyncRsp;
1000a4ac:	008400f4 	movhi	r2,4099
1000a4b0:	10a48204 	addi	r2,r2,-28152
1000a4b4:	10c00017 	ldw	r3,0(r2)
1000a4b8:	e0bff683 	ldbu	r2,-38(fp)
1000a4bc:	10800324 	muli	r2,r2,12
1000a4c0:	1885883a 	add	r2,r3,r2
1000a4c4:	10800504 	addi	r2,r2,20
1000a4c8:	e0fffa04 	addi	r3,fp,-24
1000a4cc:	10c00015 	stw	r3,0(r2)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000a4d0:	008400f4 	movhi	r2,4099
1000a4d4:	10a48204 	addi	r2,r2,-28152
1000a4d8:	10800017 	ldw	r2,0(r2)
1000a4dc:	10802404 	addi	r2,r2,144
1000a4e0:	1009883a 	mov	r4,r2
1000a4e4:	01400cc4 	movi	r5,51
1000a4e8:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000a4ec:	10803fcc 	andi	r2,r2,255
1000a4f0:	1080201c 	xori	r2,r2,128
1000a4f4:	10bfe004 	addi	r2,r2,-128
1000a4f8:	e0bff78d 	sth	r2,-34(fp)
1000a4fc:	e0bff78f 	ldh	r2,-34(fp)
1000a500:	10000126 	beq	r2,zero,1000a508 <sl_Accept+0x120>
1000a504:	003fff06 	br	1000a504 <__alt_data_end+0xf000a504>
	/* send the command */
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlAcceptCmdCtrl, &Msg, NULL));
1000a508:	e0bff904 	addi	r2,fp,-28
1000a50c:	d1202304 	addi	r4,gp,-32628
1000a510:	100b883a 	mov	r5,r2
1000a514:	000d883a 	mov	r6,zero
1000a518:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000a51c:	e0bff80d 	sth	r2,-32(fp)
1000a520:	e0bff80f 	ldh	r2,-32(fp)
1000a524:	10000126 	beq	r2,zero,1000a52c <sl_Accept+0x144>
1000a528:	003fff06 	br	1000a528 <__alt_data_end+0xf000a528>
    VERIFY_PROTOCOL(Msg.Rsp.sd == sd);
1000a52c:	e0bff983 	ldbu	r2,-26(fp)
1000a530:	10c03fcc 	andi	r3,r2,255
1000a534:	e0bffd0f 	ldh	r2,-12(fp)
1000a538:	18800126 	beq	r3,r2,1000a540 <sl_Accept+0x158>
1000a53c:	003fff06 	br	1000a53c <__alt_data_end+0xf000a53c>

    RetVal = Msg.Rsp.statusOrLen;
1000a540:	e0bff90b 	ldhu	r2,-28(fp)
1000a544:	e0bff60d 	sth	r2,-40(fp)

    if(SL_OS_RET_CODE_OK == RetVal)
1000a548:	e0bff60f 	ldh	r2,-40(fp)
1000a54c:	1000541e 	bne	r2,zero,1000a6a0 <sl_Accept+0x2b8>
    {
        /*  wait for async and get Data Read parameters */
		OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
1000a550:	008400f4 	movhi	r2,4099
1000a554:	10a48204 	addi	r2,r2,-28152
1000a558:	10c00017 	ldw	r3,0(r2)
1000a55c:	e0bff683 	ldbu	r2,-38(fp)
1000a560:	10800324 	muli	r2,r2,12
1000a564:	10800404 	addi	r2,r2,16
1000a568:	1885883a 	add	r2,r3,r2
1000a56c:	1009883a 	mov	r4,r2
1000a570:	01400884 	movi	r5,34
1000a574:	01800444 	movi	r6,17
1000a578:	01c03fc4 	movi	r7,255
1000a57c:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000a580:	10803fcc 	andi	r2,r2,255
1000a584:	1080201c 	xori	r2,r2,128
1000a588:	10bfe004 	addi	r2,r2,-128
1000a58c:	e0bff88d 	sth	r2,-30(fp)
1000a590:	e0bff88f 	ldh	r2,-30(fp)
1000a594:	10000126 	beq	r2,zero,1000a59c <sl_Accept+0x1b4>
1000a598:	003fff06 	br	1000a598 <__alt_data_end+0xf000a598>

        VERIFY_PROTOCOL(AsyncRsp.IpV4.sd == sd);
1000a59c:	e0bffa83 	ldbu	r2,-22(fp)
1000a5a0:	10c03fcc 	andi	r3,r2,255
1000a5a4:	e0bffd0f 	ldh	r2,-12(fp)
1000a5a8:	18800126 	beq	r3,r2,1000a5b0 <sl_Accept+0x1c8>
1000a5ac:	003fff06 	br	1000a5ac <__alt_data_end+0xf000a5ac>

        RetVal = AsyncRsp.IpV4.statusOrLen;
1000a5b0:	e0bffa0b 	ldhu	r2,-24(fp)
1000a5b4:	e0bff60d 	sth	r2,-40(fp)
        if( (NULL != addr) && (NULL != addrlen) )  
1000a5b8:	e0bffe17 	ldw	r2,-8(fp)
1000a5bc:	10003826 	beq	r2,zero,1000a6a0 <sl_Accept+0x2b8>
1000a5c0:	e0bfff17 	ldw	r2,-4(fp)
1000a5c4:	10003626 	beq	r2,zero,1000a6a0 <sl_Accept+0x2b8>
        {
#if 0 /*  Kept for backup */
            _sl_ParseAddress(&AsyncRsp, addr, addrlen);
#else
    	   addr->sa_family = AsyncRsp.IpV4.family;
1000a5c8:	e0bffac3 	ldbu	r2,-21(fp)
1000a5cc:	10c03fcc 	andi	r3,r2,255
1000a5d0:	e0bffe17 	ldw	r2,-8(fp)
1000a5d4:	10c0000d 	sth	r3,0(r2)

    	    if(SL_AF_INET == addr->sa_family)
1000a5d8:	e0bffe17 	ldw	r2,-8(fp)
1000a5dc:	1080000b 	ldhu	r2,0(r2)
1000a5e0:	10bfffcc 	andi	r2,r2,65535
1000a5e4:	10800098 	cmpnei	r2,r2,2
1000a5e8:	10000f1e 	bne	r2,zero,1000a628 <sl_Accept+0x240>
    	    {
              if( *addrlen == sizeof( SlSockAddrIn_t ) )
1000a5ec:	e0bfff17 	ldw	r2,-4(fp)
1000a5f0:	1080000b 	ldhu	r2,0(r2)
1000a5f4:	10bfffcc 	andi	r2,r2,65535
1000a5f8:	10800418 	cmpnei	r2,r2,16
1000a5fc:	1000071e 	bne	r2,zero,1000a61c <sl_Accept+0x234>
              {
                ((SlSockAddrIn_t *)addr)->sin_port         = AsyncRsp.IpV4.port;
1000a600:	e0fffb0b 	ldhu	r3,-20(fp)
1000a604:	e0bffe17 	ldw	r2,-8(fp)
1000a608:	10c0008d 	sth	r3,2(r2)
                ((SlSockAddrIn_t *)addr)->sin_addr.s_addr  = AsyncRsp.IpV4.address;
1000a60c:	e0fffc17 	ldw	r3,-16(fp)
1000a610:	e0bffe17 	ldw	r2,-8(fp)
1000a614:	10c00115 	stw	r3,4(r2)
1000a618:	00002106 	br	1000a6a0 <sl_Accept+0x2b8>
              }
              else
              {
                *addrlen = 0;
1000a61c:	e0bfff17 	ldw	r2,-4(fp)
1000a620:	1000000d 	sth	zero,0(r2)
1000a624:	00001e06 	br	1000a6a0 <sl_Accept+0x2b8>
              }
    	    }
    	    else if (SL_AF_INET6_EUI_48 == addr->sa_family )
1000a628:	e0bffe17 	ldw	r2,-8(fp)
1000a62c:	1080000b 	ldhu	r2,0(r2)
1000a630:	10bfffcc 	andi	r2,r2,65535
1000a634:	10800258 	cmpnei	r2,r2,9
1000a638:	1000191e 	bne	r2,zero,1000a6a0 <sl_Accept+0x2b8>
    	    {
                if( *addrlen == sizeof( SlSockAddrIn6_t ) )
1000a63c:	e0bfff17 	ldw	r2,-4(fp)
1000a640:	1080000b 	ldhu	r2,0(r2)
1000a644:	10bfffcc 	andi	r2,r2,65535
1000a648:	10800718 	cmpnei	r2,r2,28
1000a64c:	1000121e 	bne	r2,zero,1000a698 <sl_Accept+0x2b0>
              {
                ((SlSockAddrIn6_t *)addr)->sin6_port                   = AsyncRsp.IpV6EUI48.port    ;
1000a650:	e0fffb0b 	ldhu	r3,-20(fp)
1000a654:	e0bffe17 	ldw	r2,-8(fp)
1000a658:	10c0008d 	sth	r3,2(r2)
                /*  will be called from here and from _sl_BuildAddress*/
                sl_Memcpy(((SlSockAddrIn6_t *)addr)->sin6_addr._S6_un._S6_u8, AsyncRsp.IpV6EUI48.address, 6);
1000a65c:	e0bffe17 	ldw	r2,-8(fp)
1000a660:	10800204 	addi	r2,r2,8
1000a664:	e0fffb83 	ldbu	r3,-18(fp)
1000a668:	10c00005 	stb	r3,0(r2)
1000a66c:	e0fffbc3 	ldbu	r3,-17(fp)
1000a670:	10c00045 	stb	r3,1(r2)
1000a674:	e0fffc03 	ldbu	r3,-16(fp)
1000a678:	10c00085 	stb	r3,2(r2)
1000a67c:	e0fffc43 	ldbu	r3,-15(fp)
1000a680:	10c000c5 	stb	r3,3(r2)
1000a684:	e0fffc83 	ldbu	r3,-14(fp)
1000a688:	10c00105 	stb	r3,4(r2)
1000a68c:	e0fffcc3 	ldbu	r3,-13(fp)
1000a690:	10c00145 	stb	r3,5(r2)
1000a694:	00000206 	br	1000a6a0 <sl_Accept+0x2b8>
              }
              else
              {
                *addrlen = 0;
1000a698:	e0bfff17 	ldw	r2,-4(fp)
1000a69c:	1000000d 	sth	zero,0(r2)
#endif
#endif			
        }
    }

    _SlDrvReleasePoolObj(ObjIdx);
1000a6a0:	e0bff683 	ldbu	r2,-38(fp)
1000a6a4:	1009883a 	mov	r4,r2
1000a6a8:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return (_i16)RetVal;
1000a6ac:	e0bff60b 	ldhu	r2,-40(fp)
}
1000a6b0:	e037883a 	mov	sp,fp
1000a6b4:	dfc00117 	ldw	ra,4(sp)
1000a6b8:	df000017 	ldw	fp,0(sp)
1000a6bc:	dec00204 	addi	sp,sp,8
1000a6c0:	f800283a 	ret

1000a6c4 <sl_Htonl>:

/*******************************************************************************/
/*  sl_Htonl */
/*******************************************************************************/
_u32 sl_Htonl( _u32 val )
{
1000a6c4:	defffc04 	addi	sp,sp,-16
1000a6c8:	df000315 	stw	fp,12(sp)
1000a6cc:	df000304 	addi	fp,sp,12
1000a6d0:	e13fff15 	stw	r4,-4(fp)
  _u32 i = 1; 
1000a6d4:	00800044 	movi	r2,1
1000a6d8:	e0bffe15 	stw	r2,-8(fp)
  _i8 *p = (_i8 *)&i;  
1000a6dc:	e0bffe04 	addi	r2,fp,-8
1000a6e0:	e0bffd15 	stw	r2,-12(fp)
  if (p[0] == 1) /* little endian */
1000a6e4:	e0bffd17 	ldw	r2,-12(fp)
1000a6e8:	10800003 	ldbu	r2,0(r2)
1000a6ec:	10803fcc 	andi	r2,r2,255
1000a6f0:	1080201c 	xori	r2,r2,128
1000a6f4:	10bfe004 	addi	r2,r2,-128
1000a6f8:	10800058 	cmpnei	r2,r2,1
1000a6fc:	1000121e 	bne	r2,zero,1000a748 <sl_Htonl+0x84>
  {
    p[0] = ((_i8* )&val)[3];
1000a700:	e0ffffc3 	ldbu	r3,-1(fp)
1000a704:	e0bffd17 	ldw	r2,-12(fp)
1000a708:	10c00005 	stb	r3,0(r2)
    p[1] = ((_i8* )&val)[2];
1000a70c:	e0bffd17 	ldw	r2,-12(fp)
1000a710:	10800044 	addi	r2,r2,1
1000a714:	e0ffff83 	ldbu	r3,-2(fp)
1000a718:	10c00005 	stb	r3,0(r2)
    p[2] = ((_i8* )&val)[1];
1000a71c:	e0bffd17 	ldw	r2,-12(fp)
1000a720:	10800084 	addi	r2,r2,2
1000a724:	e0ffff43 	ldbu	r3,-3(fp)
1000a728:	10c00005 	stb	r3,0(r2)
    p[3] = ((_i8* )&val)[0];
1000a72c:	e0bffd17 	ldw	r2,-12(fp)
1000a730:	108000c4 	addi	r2,r2,3
1000a734:	e0ffff04 	addi	r3,fp,-4
1000a738:	18c00003 	ldbu	r3,0(r3)
1000a73c:	10c00005 	stb	r3,0(r2)
    return i;
1000a740:	e0bffe17 	ldw	r2,-8(fp)
1000a744:	00000106 	br	1000a74c <sl_Htonl+0x88>
  }
  else /* big endian */
  {
    return val; 
1000a748:	e0bfff17 	ldw	r2,-4(fp)
  }
}
1000a74c:	e037883a 	mov	sp,fp
1000a750:	df000017 	ldw	fp,0(sp)
1000a754:	dec00104 	addi	sp,sp,4
1000a758:	f800283a 	ret

1000a75c <sl_Htons>:

/*******************************************************************************/
/*  sl_Htonl */
/*******************************************************************************/
_u16 sl_Htons( _u16 val )
{
1000a75c:	defffc04 	addi	sp,sp,-16
1000a760:	df000315 	stw	fp,12(sp)
1000a764:	df000304 	addi	fp,sp,12
1000a768:	2005883a 	mov	r2,r4
1000a76c:	e0bfff0d 	sth	r2,-4(fp)
  _i16 i = 1; 
1000a770:	00800044 	movi	r2,1
1000a774:	e0bffe0d 	sth	r2,-8(fp)
  _i8 *p = (_i8 *)&i;  
1000a778:	e0bffe04 	addi	r2,fp,-8
1000a77c:	e0bffd15 	stw	r2,-12(fp)
  if (p[0] == 1) /* little endian */
1000a780:	e0bffd17 	ldw	r2,-12(fp)
1000a784:	10800003 	ldbu	r2,0(r2)
1000a788:	10803fcc 	andi	r2,r2,255
1000a78c:	1080201c 	xori	r2,r2,128
1000a790:	10bfe004 	addi	r2,r2,-128
1000a794:	10800058 	cmpnei	r2,r2,1
1000a798:	10000a1e 	bne	r2,zero,1000a7c4 <sl_Htons+0x68>
  {
    p[0] = ((_i8* )&val)[1];
1000a79c:	e0ffff43 	ldbu	r3,-3(fp)
1000a7a0:	e0bffd17 	ldw	r2,-12(fp)
1000a7a4:	10c00005 	stb	r3,0(r2)
    p[1] = ((_i8* )&val)[0];
1000a7a8:	e0bffd17 	ldw	r2,-12(fp)
1000a7ac:	10800044 	addi	r2,r2,1
1000a7b0:	e0ffff04 	addi	r3,fp,-4
1000a7b4:	18c00003 	ldbu	r3,0(r3)
1000a7b8:	10c00005 	stb	r3,0(r2)
    return i;
1000a7bc:	e0bffe0b 	ldhu	r2,-8(fp)
1000a7c0:	00000106 	br	1000a7c8 <sl_Htons+0x6c>
  }
  else /* big endian */
  {
    return val; 
1000a7c4:	e0bfff0b 	ldhu	r2,-4(fp)
  }
}
1000a7c8:	e037883a 	mov	sp,fp
1000a7cc:	df000017 	ldw	fp,0(sp)
1000a7d0:	dec00104 	addi	sp,sp,4
1000a7d4:	f800283a 	ret

1000a7d8 <_sl_HandleAsync_Accept>:

/*******************************************************************************/
/*   _sl_HandleAsync_Accept */
/*******************************************************************************/
void _sl_HandleAsync_Accept(void *pVoidBuf)
{
1000a7d8:	defffa04 	addi	sp,sp,-24
1000a7dc:	dfc00515 	stw	ra,20(sp)
1000a7e0:	df000415 	stw	fp,16(sp)
1000a7e4:	df000404 	addi	fp,sp,16
1000a7e8:	e13fff15 	stw	r4,-4(fp)
    _SocketAddrResponse_u      *pMsgArgs   = (_SocketAddrResponse_u *)_SL_RESP_ARGS_START(pVoidBuf);
1000a7ec:	e0bfff17 	ldw	r2,-4(fp)
1000a7f0:	10800204 	addi	r2,r2,8
1000a7f4:	e0bffc15 	stw	r2,-16(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000a7f8:	008400f4 	movhi	r2,4099
1000a7fc:	10a48204 	addi	r2,r2,-28152
1000a800:	10800017 	ldw	r2,0(r2)
1000a804:	10802404 	addi	r2,r2,144
1000a808:	1009883a 	mov	r4,r2
1000a80c:	01400cc4 	movi	r5,51
1000a810:	01801104 	movi	r6,68
1000a814:	01c03fc4 	movi	r7,255
1000a818:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000a81c:	10803fcc 	andi	r2,r2,255
1000a820:	1080201c 	xori	r2,r2,128
1000a824:	10bfe004 	addi	r2,r2,-128
1000a828:	e0bffd0d 	sth	r2,-12(fp)
1000a82c:	e0bffd0f 	ldh	r2,-12(fp)
1000a830:	10000126 	beq	r2,zero,1000a838 <_sl_HandleAsync_Accept+0x60>
1000a834:	003fff06 	br	1000a834 <__alt_data_end+0xf000a834>

    VERIFY_PROTOCOL(( pMsgArgs->IpV4.sd & BSD_SOCKET_ID_MASK) <= SL_MAX_SOCKETS);
1000a838:	e0bffc17 	ldw	r2,-16(fp)
1000a83c:	10800083 	ldbu	r2,2(r2)
1000a840:	10803fcc 	andi	r2,r2,255
1000a844:	108003cc 	andi	r2,r2,15
1000a848:	10800250 	cmplti	r2,r2,9
1000a84c:	1000011e 	bne	r2,zero,1000a854 <_sl_HandleAsync_Accept+0x7c>
1000a850:	003fff06 	br	1000a850 <__alt_data_end+0xf000a850>
    VERIFY_SOCKET_CB(NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs);

	sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs,sizeof(_SocketAddrResponse_u));
1000a854:	008400f4 	movhi	r2,4099
1000a858:	10a48204 	addi	r2,r2,-28152
1000a85c:	10c00017 	ldw	r3,0(r2)
1000a860:	008400f4 	movhi	r2,4099
1000a864:	10a48204 	addi	r2,r2,-28152
1000a868:	10800017 	ldw	r2,0(r2)
1000a86c:	10802b03 	ldbu	r2,172(r2)
1000a870:	10803fcc 	andi	r2,r2,255
1000a874:	10800324 	muli	r2,r2,12
1000a878:	1885883a 	add	r2,r3,r2
1000a87c:	10800504 	addi	r2,r2,20
1000a880:	10800017 	ldw	r2,0(r2)
1000a884:	1009883a 	mov	r4,r2
1000a888:	e17ffc17 	ldw	r5,-16(fp)
1000a88c:	01800304 	movi	r6,12
1000a890:	000c7840 	call	1000c784 <memcpy>
	OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
1000a894:	008400f4 	movhi	r2,4099
1000a898:	10a48204 	addi	r2,r2,-28152
1000a89c:	10c00017 	ldw	r3,0(r2)
1000a8a0:	008400f4 	movhi	r2,4099
1000a8a4:	10a48204 	addi	r2,r2,-28152
1000a8a8:	10800017 	ldw	r2,0(r2)
1000a8ac:	10802b03 	ldbu	r2,172(r2)
1000a8b0:	10803fcc 	andi	r2,r2,255
1000a8b4:	10800324 	muli	r2,r2,12
1000a8b8:	10800404 	addi	r2,r2,16
1000a8bc:	1885883a 	add	r2,r3,r2
1000a8c0:	1009883a 	mov	r4,r2
1000a8c4:	01400884 	movi	r5,34
1000a8c8:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000a8cc:	10803fcc 	andi	r2,r2,255
1000a8d0:	1080201c 	xori	r2,r2,128
1000a8d4:	10bfe004 	addi	r2,r2,-128
1000a8d8:	e0bffd8d 	sth	r2,-10(fp)
1000a8dc:	e0bffd8f 	ldh	r2,-10(fp)
1000a8e0:	10000126 	beq	r2,zero,1000a8e8 <_sl_HandleAsync_Accept+0x110>
1000a8e4:	003fff06 	br	1000a8e4 <__alt_data_end+0xf000a8e4>

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000a8e8:	008400f4 	movhi	r2,4099
1000a8ec:	10a48204 	addi	r2,r2,-28152
1000a8f0:	10800017 	ldw	r2,0(r2)
1000a8f4:	10802404 	addi	r2,r2,144
1000a8f8:	1009883a 	mov	r4,r2
1000a8fc:	01400cc4 	movi	r5,51
1000a900:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000a904:	10803fcc 	andi	r2,r2,255
1000a908:	1080201c 	xori	r2,r2,128
1000a90c:	10bfe004 	addi	r2,r2,-128
1000a910:	e0bffe0d 	sth	r2,-8(fp)
1000a914:	e0bffe0f 	ldh	r2,-8(fp)
1000a918:	10000126 	beq	r2,zero,1000a920 <_sl_HandleAsync_Accept+0x148>
1000a91c:	003fff06 	br	1000a91c <__alt_data_end+0xf000a91c>
    return;
1000a920:	0001883a 	nop
}
1000a924:	e037883a 	mov	sp,fp
1000a928:	dfc00117 	ldw	ra,4(sp)
1000a92c:	df000017 	ldw	fp,0(sp)
1000a930:	dec00204 	addi	sp,sp,8
1000a934:	f800283a 	ret

1000a938 <sl_Recv>:
    sizeof(_SocketResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_Recv)
_i16 sl_Recv(_i16 sd, void *pBuf, _i16 Len, _i16 flags)
{
1000a938:	defff404 	addi	sp,sp,-48
1000a93c:	dfc00b15 	stw	ra,44(sp)
1000a940:	df000a15 	stw	fp,40(sp)
1000a944:	df000a04 	addi	fp,sp,40
1000a948:	e17ffd15 	stw	r5,-12(fp)
1000a94c:	3007883a 	mov	r3,r6
1000a950:	3805883a 	mov	r2,r7
1000a954:	e13ffc0d 	sth	r4,-16(fp)
1000a958:	e0fffe0d 	sth	r3,-8(fp)
1000a95c:	e0bfff0d 	sth	r2,-4(fp)
    _SlRecvMsg_u    Msg;
    _SlCmdExt_t     CmdExt;
    _SlReturnVal_t status;

    CmdExt.TxPayloadLen = 0;
1000a960:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = Len;
1000a964:	e0bffe0b 	ldhu	r2,-8(fp)
1000a968:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
1000a96c:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)pBuf;
1000a970:	e0bffd17 	ldw	r2,-12(fp)
1000a974:	e0bffb15 	stw	r2,-20(fp)

    Msg.Cmd.sd = (_u8)sd;
1000a978:	e0bffc0b 	ldhu	r2,-16(fp)
1000a97c:	e0bff705 	stb	r2,-36(fp)
    Msg.Cmd.StatusOrLen = Len;
1000a980:	e0bffe0b 	ldhu	r2,-8(fp)
1000a984:	e0bff68d 	sth	r2,-38(fp)

    /*  no size truncation in recv path */
    CmdExt.RxPayloadLen = Msg.Cmd.StatusOrLen;
1000a988:	e0bff68b 	ldhu	r2,-38(fp)
1000a98c:	e0bff88d 	sth	r2,-30(fp)

    Msg.Cmd.FamilyAndFlags = flags & 0x0F;
1000a990:	e0bfff0b 	ldhu	r2,-4(fp)
1000a994:	108003cc 	andi	r2,r2,15
1000a998:	e0bff745 	stb	r2,-35(fp)

    status = _SlDrvDataReadOp((_SlSd_t)sd, (_SlCmdCtrl_t *)&_SlRecvCmdCtrl, &Msg, &CmdExt);
1000a99c:	e0bffc0b 	ldhu	r2,-16(fp)
1000a9a0:	11003fcc 	andi	r4,r2,255
1000a9a4:	e0fff684 	addi	r3,fp,-38
1000a9a8:	e0bff804 	addi	r2,fp,-32
1000a9ac:	d1602404 	addi	r5,gp,-32624
1000a9b0:	180d883a 	mov	r6,r3
1000a9b4:	100f883a 	mov	r7,r2
1000a9b8:	00042500 	call	10004250 <_SlDrvDataReadOp>
1000a9bc:	e0bff60d 	sth	r2,-40(fp)
    if( status != SL_OS_RET_CODE_OK )
1000a9c0:	e0bff60f 	ldh	r2,-40(fp)
1000a9c4:	10000226 	beq	r2,zero,1000a9d0 <sl_Recv+0x98>
    {
	return status;
1000a9c8:	e0bff60b 	ldhu	r2,-40(fp)
1000a9cc:	00000106 	br	1000a9d4 <sl_Recv+0x9c>
    }
     
    /*  if the Device side sends less than expected it is not the Driver's role */
    /*  the returned value could be smaller than the requested size */
    return (_i16)Msg.Rsp.statusOrLen;
1000a9d0:	e0bff68b 	ldhu	r2,-38(fp)
}
1000a9d4:	e037883a 	mov	sp,fp
1000a9d8:	dfc00117 	ldw	ra,4(sp)
1000a9dc:	df000017 	ldw	fp,0(sp)
1000a9e0:	dec00204 	addi	sp,sp,8
1000a9e4:	f800283a 	ret

1000a9e8 <sl_SetSockOpt>:
    sizeof(_SocketResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_SetSockOpt)
_i16 sl_SetSockOpt(_i16 sd, _i16 level, _i16 optname, const void *optval, SlSocklen_t optlen)
{
1000a9e8:	defff304 	addi	sp,sp,-52
1000a9ec:	dfc00c15 	stw	ra,48(sp)
1000a9f0:	df000b15 	stw	fp,44(sp)
1000a9f4:	df000b04 	addi	fp,sp,44
1000a9f8:	2011883a 	mov	r8,r4
1000a9fc:	2809883a 	mov	r4,r5
1000aa00:	3007883a 	mov	r3,r6
1000aa04:	e1fffe15 	stw	r7,-8(fp)
1000aa08:	e0800217 	ldw	r2,8(fp)
1000aa0c:	e23ffb0d 	sth	r8,-20(fp)
1000aa10:	e13ffc0d 	sth	r4,-16(fp)
1000aa14:	e0fffd0d 	sth	r3,-12(fp)
1000aa18:	e0bfff0d 	sth	r2,-4(fp)
    _SlSetSockOptMsg_u    Msg;
    _SlCmdExt_t           CmdExt;

    CmdExt.TxPayloadLen = optlen;
1000aa1c:	e0bfff0b 	ldhu	r2,-4(fp)
1000aa20:	e0bff70d 	sth	r2,-36(fp)
    CmdExt.RxPayloadLen = 0;
1000aa24:	e03ff78d 	sth	zero,-34(fp)
    CmdExt.pTxPayload = (_u8 *)optval;
1000aa28:	e0bffe17 	ldw	r2,-8(fp)
1000aa2c:	e0bff915 	stw	r2,-28(fp)
    CmdExt.pRxPayload = NULL;
1000aa30:	e03ffa15 	stw	zero,-24(fp)

    Msg.Cmd.sd = (_u8)sd;
1000aa34:	e0bffb0b 	ldhu	r2,-20(fp)
1000aa38:	e0bff585 	stb	r2,-42(fp)
    Msg.Cmd.level = (_u8)level;
1000aa3c:	e0bffc0b 	ldhu	r2,-16(fp)
1000aa40:	e0bff5c5 	stb	r2,-41(fp)
    Msg.Cmd.optionLen = (_u8)optlen;
1000aa44:	e0bfff0b 	ldhu	r2,-4(fp)
1000aa48:	e0bff645 	stb	r2,-39(fp)
    Msg.Cmd.optionName = (_u8)optname;
1000aa4c:	e0bffd0b 	ldhu	r2,-12(fp)
1000aa50:	e0bff605 	stb	r2,-40(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlSetSockOptCmdCtrl, &Msg, &CmdExt));
1000aa54:	e0fff584 	addi	r3,fp,-42
1000aa58:	e0bff704 	addi	r2,fp,-36
1000aa5c:	d1202504 	addi	r4,gp,-32620
1000aa60:	180b883a 	mov	r5,r3
1000aa64:	100d883a 	mov	r6,r2
1000aa68:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000aa6c:	e0bff50d 	sth	r2,-44(fp)
1000aa70:	e0bff50f 	ldh	r2,-44(fp)
1000aa74:	10000126 	beq	r2,zero,1000aa7c <sl_SetSockOpt+0x94>
1000aa78:	003fff06 	br	1000aa78 <__alt_data_end+0xf000aa78>

    return (_i16)Msg.Rsp.statusOrLen;
1000aa7c:	e0bff58b 	ldhu	r2,-42(fp)
}
1000aa80:	e037883a 	mov	sp,fp
1000aa84:	dfc00117 	ldw	ra,4(sp)
1000aa88:	df000017 	ldw	fp,0(sp)
1000aa8c:	dec00204 	addi	sp,sp,8
1000aa90:	f800283a 	ret

1000aa94 <sl_GetSockOpt>:
    sizeof(_getSockOptResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_GetSockOpt)
_i16 sl_GetSockOpt(_i16 sd, _i16 level, _i16 optname, void *optval, SlSocklen_t *optlen)
{
1000aa94:	defff404 	addi	sp,sp,-48
1000aa98:	dfc00b15 	stw	ra,44(sp)
1000aa9c:	df000a15 	stw	fp,40(sp)
1000aaa0:	df000a04 	addi	fp,sp,40
1000aaa4:	2807883a 	mov	r3,r5
1000aaa8:	3005883a 	mov	r2,r6
1000aaac:	e1ffff15 	stw	r7,-4(fp)
1000aab0:	e13ffc0d 	sth	r4,-16(fp)
1000aab4:	e0fffd0d 	sth	r3,-12(fp)
1000aab8:	e0bffe0d 	sth	r2,-8(fp)
    _SlGetSockOptMsg_u    Msg;
    _SlCmdExt_t           CmdExt;

	if (*optlen == 0)
1000aabc:	e0800217 	ldw	r2,8(fp)
1000aac0:	1080000b 	ldhu	r2,0(r2)
1000aac4:	10bfffcc 	andi	r2,r2,65535
1000aac8:	1000021e 	bne	r2,zero,1000aad4 <sl_GetSockOpt+0x40>
	{
		return SL_EZEROLEN;
1000aacc:	00be0b84 	movi	r2,-2002
1000aad0:	00002b06 	br	1000ab80 <sl_GetSockOpt+0xec>
	}
    CmdExt.TxPayloadLen = 0;
1000aad4:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = *optlen;
1000aad8:	e0800217 	ldw	r2,8(fp)
1000aadc:	1080000b 	ldhu	r2,0(r2)
1000aae0:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
1000aae4:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = optval;
1000aae8:	e0bfff17 	ldw	r2,-4(fp)
1000aaec:	e0bffb15 	stw	r2,-20(fp)
	CmdExt.ActualRxPayloadLen = 0;
1000aaf0:	e03ff90d 	sth	zero,-28(fp)

    Msg.Cmd.sd = (_u8)sd;
1000aaf4:	e0bffc0b 	ldhu	r2,-16(fp)
1000aaf8:	e0bff685 	stb	r2,-38(fp)
    Msg.Cmd.level = (_u8)level;
1000aafc:	e0bffd0b 	ldhu	r2,-12(fp)
1000ab00:	e0bff6c5 	stb	r2,-37(fp)
    Msg.Cmd.optionLen = (_u8)(*optlen);
1000ab04:	e0800217 	ldw	r2,8(fp)
1000ab08:	1080000b 	ldhu	r2,0(r2)
1000ab0c:	e0bff745 	stb	r2,-35(fp)
    Msg.Cmd.optionName = (_u8)optname;
1000ab10:	e0bffe0b 	ldhu	r2,-8(fp)
1000ab14:	e0bff705 	stb	r2,-36(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlGetSockOptCmdCtrl, &Msg, &CmdExt));
1000ab18:	e0fff684 	addi	r3,fp,-38
1000ab1c:	e0bff804 	addi	r2,fp,-32
1000ab20:	d1202604 	addi	r4,gp,-32616
1000ab24:	180b883a 	mov	r5,r3
1000ab28:	100d883a 	mov	r6,r2
1000ab2c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000ab30:	e0bff60d 	sth	r2,-40(fp)
1000ab34:	e0bff60f 	ldh	r2,-40(fp)
1000ab38:	10000126 	beq	r2,zero,1000ab40 <sl_GetSockOpt+0xac>
1000ab3c:	003fff06 	br	1000ab3c <__alt_data_end+0xf000ab3c>

	if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
1000ab40:	e0fff88b 	ldhu	r3,-30(fp)
1000ab44:	e0bff90b 	ldhu	r2,-28(fp)
1000ab48:	18ffffcc 	andi	r3,r3,65535
1000ab4c:	10bfffcc 	andi	r2,r2,65535
1000ab50:	1880062e 	bgeu	r3,r2,1000ab6c <sl_GetSockOpt+0xd8>
	{
	    *optlen = Msg.Rsp.optionLen;
1000ab54:	e0bff743 	ldbu	r2,-35(fp)
1000ab58:	10c03fcc 	andi	r3,r2,255
1000ab5c:	e0800217 	ldw	r2,8(fp)
1000ab60:	10c0000d 	sth	r3,0(r2)
	   return SL_ESMALLBUF;
1000ab64:	00be0bc4 	movi	r2,-2001
1000ab68:	00000506 	br	1000ab80 <sl_GetSockOpt+0xec>
	}
	else
	{
		*optlen = (_u8)CmdExt.ActualRxPayloadLen;
1000ab6c:	e0bff90b 	ldhu	r2,-28(fp)
1000ab70:	10c03fcc 	andi	r3,r2,255
1000ab74:	e0800217 	ldw	r2,8(fp)
1000ab78:	10c0000d 	sth	r3,0(r2)
	}
    return (_i16)Msg.Rsp.status;
1000ab7c:	e0bff68b 	ldhu	r2,-38(fp)
}
1000ab80:	e037883a 	mov	sp,fp
1000ab84:	dfc00117 	ldw	ra,4(sp)
1000ab88:	df000017 	ldw	fp,0(sp)
1000ab8c:	dec00204 	addi	sp,sp,8
1000ab90:	f800283a 	ret

1000ab94 <sl_Select>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_Select)
_i16 sl_Select(_i16 nfds, SlFdSet_t *readsds, SlFdSet_t *writesds, SlFdSet_t *exceptsds, struct SlTimeval_t *timeout)
{
1000ab94:	defff204 	addi	sp,sp,-56
1000ab98:	dfc00d15 	stw	ra,52(sp)
1000ab9c:	df000c15 	stw	fp,48(sp)
1000aba0:	df000c04 	addi	fp,sp,48
1000aba4:	2005883a 	mov	r2,r4
1000aba8:	e17ffd15 	stw	r5,-12(fp)
1000abac:	e1bffe15 	stw	r6,-8(fp)
1000abb0:	e1ffff15 	stw	r7,-4(fp)
1000abb4:	e0bffc0d 	sth	r2,-16(fp)
    _SlSelectMsg_u          Msg;
    _SelectAsyncResponse_t  AsyncRsp;
	_u8 ObjIdx = MAX_CONCURRENT_ACTIONS;
1000abb8:	00800284 	movi	r2,10
1000abbc:	e0bff405 	stb	r2,-48(fp)

    Msg.Cmd.nfds          = (_u8)nfds;
1000abc0:	e0bffc0b 	ldhu	r2,-16(fp)
1000abc4:	e0bff685 	stb	r2,-38(fp)
    Msg.Cmd.readFdsCount  = 0;
1000abc8:	e03ff6c5 	stb	zero,-37(fp)
    Msg.Cmd.writeFdsCount = 0;
1000abcc:	e03ff705 	stb	zero,-36(fp)
    
    Msg.Cmd.readFds = 0;
1000abd0:	e03ff78d 	sth	zero,-34(fp)
    Msg.Cmd.writeFds = 0; 
1000abd4:	e03ff80d 	sth	zero,-32(fp)
    
    if( readsds )
1000abd8:	e0bffd17 	ldw	r2,-12(fp)
1000abdc:	10000326 	beq	r2,zero,1000abec <sl_Select+0x58>
    {
       Msg.Cmd.readFds       = (_u16)readsds->fd_array[0];  
1000abe0:	e0bffd17 	ldw	r2,-12(fp)
1000abe4:	10800017 	ldw	r2,0(r2)
1000abe8:	e0bff78d 	sth	r2,-34(fp)
    }
    if( writesds )
1000abec:	e0bffe17 	ldw	r2,-8(fp)
1000abf0:	10000326 	beq	r2,zero,1000ac00 <sl_Select+0x6c>
    {
       Msg.Cmd.writeFds      = (_u16)writesds->fd_array[0]; 
1000abf4:	e0bffe17 	ldw	r2,-8(fp)
1000abf8:	10800017 	ldw	r2,0(r2)
1000abfc:	e0bff80d 	sth	r2,-32(fp)
    }
	if( NULL == timeout )
1000ac00:	e0800217 	ldw	r2,8(fp)
1000ac04:	1000051e 	bne	r2,zero,1000ac1c <sl_Select+0x88>
	{
		Msg.Cmd.tv_sec = 0xffff;
1000ac08:	00bfffc4 	movi	r2,-1
1000ac0c:	e0bff90d 	sth	r2,-28(fp)
		Msg.Cmd.tv_usec = 0xffff;
1000ac10:	00bfffc4 	movi	r2,-1
1000ac14:	e0bff88d 	sth	r2,-30(fp)
1000ac18:	00001906 	br	1000ac80 <sl_Select+0xec>
	}
	else
	{
		if( 0xffff <= timeout->tv_sec )	
1000ac1c:	e0800217 	ldw	r2,8(fp)
1000ac20:	10800017 	ldw	r2,0(r2)
1000ac24:	10bffff0 	cmpltui	r2,r2,65535
1000ac28:	1000031e 	bne	r2,zero,1000ac38 <sl_Select+0xa4>
		{
			Msg.Cmd.tv_sec = 0xffff;
1000ac2c:	00bfffc4 	movi	r2,-1
1000ac30:	e0bff90d 	sth	r2,-28(fp)
1000ac34:	00000306 	br	1000ac44 <sl_Select+0xb0>
		}
		else
		{
			Msg.Cmd.tv_sec = (_u16)timeout->tv_sec;
1000ac38:	e0800217 	ldw	r2,8(fp)
1000ac3c:	10800017 	ldw	r2,0(r2)
1000ac40:	e0bff90d 	sth	r2,-28(fp)
		}
		timeout->tv_usec = timeout->tv_usec >> 10;  /*  convert to milliseconds */
1000ac44:	e0800217 	ldw	r2,8(fp)
1000ac48:	10800117 	ldw	r2,4(r2)
1000ac4c:	1006d2ba 	srli	r3,r2,10
1000ac50:	e0800217 	ldw	r2,8(fp)
1000ac54:	10c00115 	stw	r3,4(r2)
		if( 0xffff <= timeout->tv_usec )	
1000ac58:	e0800217 	ldw	r2,8(fp)
1000ac5c:	10800117 	ldw	r2,4(r2)
1000ac60:	10bffff0 	cmpltui	r2,r2,65535
1000ac64:	1000031e 	bne	r2,zero,1000ac74 <sl_Select+0xe0>
		{
			Msg.Cmd.tv_usec = 0xffff;
1000ac68:	00bfffc4 	movi	r2,-1
1000ac6c:	e0bff88d 	sth	r2,-30(fp)
1000ac70:	00000306 	br	1000ac80 <sl_Select+0xec>
		}
		else
		{
			Msg.Cmd.tv_usec = (_u16)timeout->tv_usec;
1000ac74:	e0800217 	ldw	r2,8(fp)
1000ac78:	10800117 	ldw	r2,4(r2)
1000ac7c:	e0bff88d 	sth	r2,-30(fp)
		}
	}

	/* Use Obj to issue the command, if not available try later */
	ObjIdx = (_u8)_SlDrvWaitForPoolObj(SELECT_ID, SL_MAX_SOCKETS);
1000ac80:	01000284 	movi	r4,10
1000ac84:	01400204 	movi	r5,8
1000ac88:	00068300 	call	10006830 <_SlDrvWaitForPoolObj>
1000ac8c:	e0bff405 	stb	r2,-48(fp)

	if (MAX_CONCURRENT_ACTIONS == ObjIdx)
1000ac90:	e0bff403 	ldbu	r2,-48(fp)
1000ac94:	10800298 	cmpnei	r2,r2,10
1000ac98:	1000021e 	bne	r2,zero,1000aca4 <sl_Select+0x110>
	{
		return SL_POOL_IS_EMPTY;
1000ac9c:	00be0c04 	movi	r2,-2000
1000aca0:	00005f06 	br	1000ae20 <sl_Select+0x28c>
	}
	OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000aca4:	008400f4 	movhi	r2,4099
1000aca8:	10a48204 	addi	r2,r2,-28152
1000acac:	10800017 	ldw	r2,0(r2)
1000acb0:	10802404 	addi	r2,r2,144
1000acb4:	1009883a 	mov	r4,r2
1000acb8:	01400cc4 	movi	r5,51
1000acbc:	01801104 	movi	r6,68
1000acc0:	01c03fc4 	movi	r7,255
1000acc4:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000acc8:	10803fcc 	andi	r2,r2,255
1000accc:	1080201c 	xori	r2,r2,128
1000acd0:	10bfe004 	addi	r2,r2,-128
1000acd4:	e0bff48d 	sth	r2,-46(fp)
1000acd8:	e0bff48f 	ldh	r2,-46(fp)
1000acdc:	10000126 	beq	r2,zero,1000ace4 <sl_Select+0x150>
1000ace0:	003fff06 	br	1000ace0 <__alt_data_end+0xf000ace0>

	g_pCB->ObjPool[ObjIdx].pRespArgs =  (_u8 *)&AsyncRsp;
1000ace4:	008400f4 	movhi	r2,4099
1000ace8:	10a48204 	addi	r2,r2,-28152
1000acec:	10c00017 	ldw	r3,0(r2)
1000acf0:	e0bff403 	ldbu	r2,-48(fp)
1000acf4:	10800324 	muli	r2,r2,12
1000acf8:	1885883a 	add	r2,r3,r2
1000acfc:	10800504 	addi	r2,r2,20
1000ad00:	e0fff984 	addi	r3,fp,-26
1000ad04:	10c00015 	stw	r3,0(r2)

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000ad08:	008400f4 	movhi	r2,4099
1000ad0c:	10a48204 	addi	r2,r2,-28152
1000ad10:	10800017 	ldw	r2,0(r2)
1000ad14:	10802404 	addi	r2,r2,144
1000ad18:	1009883a 	mov	r4,r2
1000ad1c:	01400cc4 	movi	r5,51
1000ad20:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000ad24:	10803fcc 	andi	r2,r2,255
1000ad28:	1080201c 	xori	r2,r2,128
1000ad2c:	10bfe004 	addi	r2,r2,-128
1000ad30:	e0bff50d 	sth	r2,-44(fp)
1000ad34:	e0bff50f 	ldh	r2,-44(fp)
1000ad38:	10000126 	beq	r2,zero,1000ad40 <sl_Select+0x1ac>
1000ad3c:	003fff06 	br	1000ad3c <__alt_data_end+0xf000ad3c>
	/* send the command */
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlSelectCmdCtrl, &Msg, NULL));
1000ad40:	e0bff684 	addi	r2,fp,-38
1000ad44:	d1202704 	addi	r4,gp,-32612
1000ad48:	100b883a 	mov	r5,r2
1000ad4c:	000d883a 	mov	r6,zero
1000ad50:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000ad54:	e0bff58d 	sth	r2,-42(fp)
1000ad58:	e0bff58f 	ldh	r2,-42(fp)
1000ad5c:	10000126 	beq	r2,zero,1000ad64 <sl_Select+0x1d0>
1000ad60:	003fff06 	br	1000ad60 <__alt_data_end+0xf000ad60>

    if(SL_OS_RET_CODE_OK == (_i16)Msg.Rsp.status)
1000ad64:	e0bff68b 	ldhu	r2,-38(fp)
1000ad68:	10bfffcc 	andi	r2,r2,65535
1000ad6c:	10a0001c 	xori	r2,r2,32768
1000ad70:	10a00004 	addi	r2,r2,-32768
1000ad74:	1000261e 	bne	r2,zero,1000ae10 <sl_Select+0x27c>
    {
        OSI_RET_OK_CHECK(sl_SyncObjWait(&g_pCB->ObjPool[ObjIdx].SyncObj, SL_OS_WAIT_FOREVER));
1000ad78:	008400f4 	movhi	r2,4099
1000ad7c:	10a48204 	addi	r2,r2,-28152
1000ad80:	10c00017 	ldw	r3,0(r2)
1000ad84:	e0bff403 	ldbu	r2,-48(fp)
1000ad88:	10800324 	muli	r2,r2,12
1000ad8c:	10800404 	addi	r2,r2,16
1000ad90:	1885883a 	add	r2,r3,r2
1000ad94:	1009883a 	mov	r4,r2
1000ad98:	01400884 	movi	r5,34
1000ad9c:	01800444 	movi	r6,17
1000ada0:	01c03fc4 	movi	r7,255
1000ada4:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000ada8:	10803fcc 	andi	r2,r2,255
1000adac:	1080201c 	xori	r2,r2,128
1000adb0:	10bfe004 	addi	r2,r2,-128
1000adb4:	e0bff60d 	sth	r2,-40(fp)
1000adb8:	e0bff60f 	ldh	r2,-40(fp)
1000adbc:	10000126 	beq	r2,zero,1000adc4 <sl_Select+0x230>
1000adc0:	003fff06 	br	1000adc0 <__alt_data_end+0xf000adc0>
        Msg.Rsp.status = AsyncRsp.status;
1000adc4:	e0bff98b 	ldhu	r2,-26(fp)
1000adc8:	e0bff68d 	sth	r2,-38(fp)

        if(  ((_i16)Msg.Rsp.status) >= 0 )
1000adcc:	e0bff68b 	ldhu	r2,-38(fp)
1000add0:	10bfffcc 	andi	r2,r2,65535
1000add4:	10a0001c 	xori	r2,r2,32768
1000add8:	10a00004 	addi	r2,r2,-32768
1000addc:	10000c16 	blt	r2,zero,1000ae10 <sl_Select+0x27c>
        {
            if( readsds )
1000ade0:	e0bffd17 	ldw	r2,-12(fp)
1000ade4:	10000426 	beq	r2,zero,1000adf8 <sl_Select+0x264>
            {
               readsds->fd_array[0]  = AsyncRsp.readFds;
1000ade8:	e0bffa8b 	ldhu	r2,-22(fp)
1000adec:	10ffffcc 	andi	r3,r2,65535
1000adf0:	e0bffd17 	ldw	r2,-12(fp)
1000adf4:	10c00015 	stw	r3,0(r2)
            }
            if( writesds )
1000adf8:	e0bffe17 	ldw	r2,-8(fp)
1000adfc:	10000426 	beq	r2,zero,1000ae10 <sl_Select+0x27c>
            {
               writesds->fd_array[0] = AsyncRsp.writeFds;      
1000ae00:	e0bffb0b 	ldhu	r2,-20(fp)
1000ae04:	10ffffcc 	andi	r3,r2,65535
1000ae08:	e0bffe17 	ldw	r2,-8(fp)
1000ae0c:	10c00015 	stw	r3,0(r2)
            }
        }
    }

    _SlDrvReleasePoolObj(ObjIdx);
1000ae10:	e0bff403 	ldbu	r2,-48(fp)
1000ae14:	1009883a 	mov	r4,r2
1000ae18:	0006b700 	call	10006b70 <_SlDrvReleasePoolObj>
    return (_i16)Msg.Rsp.status;
1000ae1c:	e0bff68b 	ldhu	r2,-38(fp)
}
1000ae20:	e037883a 	mov	sp,fp
1000ae24:	dfc00117 	ldw	ra,4(sp)
1000ae28:	df000017 	ldw	fp,0(sp)
1000ae2c:	dec00204 	addi	sp,sp,8
1000ae30:	f800283a 	ret

1000ae34 <SL_FD_SET>:
/*  Select helper functions */
/*******************************************************************************/
/*  SL_FD_SET */
/* ******************************************************************************/
void SL_FD_SET(_i16 fd, SlFdSet_t *fdset)
{
1000ae34:	defffd04 	addi	sp,sp,-12
1000ae38:	df000215 	stw	fp,8(sp)
1000ae3c:	df000204 	addi	fp,sp,8
1000ae40:	2005883a 	mov	r2,r4
1000ae44:	e17fff15 	stw	r5,-4(fp)
1000ae48:	e0bffe0d 	sth	r2,-8(fp)
   fdset->fd_array[0] |=  (1<< (fd & BSD_SOCKET_ID_MASK));
1000ae4c:	e0bfff17 	ldw	r2,-4(fp)
1000ae50:	10800017 	ldw	r2,0(r2)
1000ae54:	e0fffe0b 	ldhu	r3,-8(fp)
1000ae58:	18ffffcc 	andi	r3,r3,65535
1000ae5c:	18c003cc 	andi	r3,r3,15
1000ae60:	01000044 	movi	r4,1
1000ae64:	20c6983a 	sll	r3,r4,r3
1000ae68:	10c6b03a 	or	r3,r2,r3
1000ae6c:	e0bfff17 	ldw	r2,-4(fp)
1000ae70:	10c00015 	stw	r3,0(r2)
}
1000ae74:	e037883a 	mov	sp,fp
1000ae78:	df000017 	ldw	fp,0(sp)
1000ae7c:	dec00104 	addi	sp,sp,4
1000ae80:	f800283a 	ret

1000ae84 <SL_FD_CLR>:
/*******************************************************************************/
/*  SL_FD_CLR */
/*******************************************************************************/
void SL_FD_CLR(_i16 fd, SlFdSet_t *fdset)
{
1000ae84:	defffd04 	addi	sp,sp,-12
1000ae88:	df000215 	stw	fp,8(sp)
1000ae8c:	df000204 	addi	fp,sp,8
1000ae90:	2005883a 	mov	r2,r4
1000ae94:	e17fff15 	stw	r5,-4(fp)
1000ae98:	e0bffe0d 	sth	r2,-8(fp)
  fdset->fd_array[0] &=  ~(1<< (fd & BSD_SOCKET_ID_MASK));
1000ae9c:	e0bfff17 	ldw	r2,-4(fp)
1000aea0:	10800017 	ldw	r2,0(r2)
1000aea4:	e0fffe0b 	ldhu	r3,-8(fp)
1000aea8:	18ffffcc 	andi	r3,r3,65535
1000aeac:	18c003cc 	andi	r3,r3,15
1000aeb0:	01000044 	movi	r4,1
1000aeb4:	20c6983a 	sll	r3,r4,r3
1000aeb8:	00c6303a 	nor	r3,zero,r3
1000aebc:	10c6703a 	and	r3,r2,r3
1000aec0:	e0bfff17 	ldw	r2,-4(fp)
1000aec4:	10c00015 	stw	r3,0(r2)
}
1000aec8:	e037883a 	mov	sp,fp
1000aecc:	df000017 	ldw	fp,0(sp)
1000aed0:	dec00104 	addi	sp,sp,4
1000aed4:	f800283a 	ret

1000aed8 <SL_FD_ISSET>:
/*******************************************************************************/
/*  SL_FD_ISSET */
/*******************************************************************************/
_i16  SL_FD_ISSET(_i16 fd, SlFdSet_t *fdset)
{
1000aed8:	defffd04 	addi	sp,sp,-12
1000aedc:	df000215 	stw	fp,8(sp)
1000aee0:	df000204 	addi	fp,sp,8
1000aee4:	2005883a 	mov	r2,r4
1000aee8:	e17fff15 	stw	r5,-4(fp)
1000aeec:	e0bffe0d 	sth	r2,-8(fp)
  if( fdset->fd_array[0] & (1<< (fd & BSD_SOCKET_ID_MASK)) )
1000aef0:	e0bfff17 	ldw	r2,-4(fp)
1000aef4:	10800017 	ldw	r2,0(r2)
1000aef8:	e0fffe0b 	ldhu	r3,-8(fp)
1000aefc:	18ffffcc 	andi	r3,r3,65535
1000af00:	18c003cc 	andi	r3,r3,15
1000af04:	01000044 	movi	r4,1
1000af08:	20c6983a 	sll	r3,r4,r3
1000af0c:	10c4703a 	and	r2,r2,r3
1000af10:	10000226 	beq	r2,zero,1000af1c <SL_FD_ISSET+0x44>
  {
    return 1;
1000af14:	00800044 	movi	r2,1
1000af18:	00000106 	br	1000af20 <SL_FD_ISSET+0x48>
  }
  return 0;
1000af1c:	0005883a 	mov	r2,zero
}
1000af20:	e037883a 	mov	sp,fp
1000af24:	df000017 	ldw	fp,0(sp)
1000af28:	dec00104 	addi	sp,sp,4
1000af2c:	f800283a 	ret

1000af30 <SL_FD_ZERO>:
/*******************************************************************************/
/*  SL_FD_ZERO */
/*******************************************************************************/  
void SL_FD_ZERO(SlFdSet_t *fdset)
{
1000af30:	defffe04 	addi	sp,sp,-8
1000af34:	df000115 	stw	fp,4(sp)
1000af38:	df000104 	addi	fp,sp,4
1000af3c:	e13fff15 	stw	r4,-4(fp)
  fdset->fd_array[0] = 0;
1000af40:	e0bfff17 	ldw	r2,-4(fp)
1000af44:	10000015 	stw	zero,0(r2)
}
1000af48:	e037883a 	mov	sp,fp
1000af4c:	df000017 	ldw	fp,0(sp)
1000af50:	dec00104 	addi	sp,sp,4
1000af54:	f800283a 	ret

1000af58 <_sl_HandleAsync_Select>:

/*******************************************************************************/
/*   _sl_HandleAsync_Select */
/*******************************************************************************/
void _sl_HandleAsync_Select(void *pVoidBuf)
{
1000af58:	defffa04 	addi	sp,sp,-24
1000af5c:	dfc00515 	stw	ra,20(sp)
1000af60:	df000415 	stw	fp,16(sp)
1000af64:	df000404 	addi	fp,sp,16
1000af68:	e13fff15 	stw	r4,-4(fp)
    _SelectAsyncResponse_t     *pMsgArgs   = (_SelectAsyncResponse_t *)_SL_RESP_ARGS_START(pVoidBuf);
1000af6c:	e0bfff17 	ldw	r2,-4(fp)
1000af70:	10800204 	addi	r2,r2,8
1000af74:	e0bffc15 	stw	r2,-16(fp)

    OSI_RET_OK_CHECK(sl_LockObjLock(&g_pCB->ProtectionLockObj, SL_OS_WAIT_FOREVER));
1000af78:	008400f4 	movhi	r2,4099
1000af7c:	10a48204 	addi	r2,r2,-28152
1000af80:	10800017 	ldw	r2,0(r2)
1000af84:	10802404 	addi	r2,r2,144
1000af88:	1009883a 	mov	r4,r2
1000af8c:	01400cc4 	movi	r5,51
1000af90:	01801104 	movi	r6,68
1000af94:	01c03fc4 	movi	r7,255
1000af98:	00093c40 	call	100093c4 <_SlNonOsSemGet>
1000af9c:	10803fcc 	andi	r2,r2,255
1000afa0:	1080201c 	xori	r2,r2,128
1000afa4:	10bfe004 	addi	r2,r2,-128
1000afa8:	e0bffd0d 	sth	r2,-12(fp)
1000afac:	e0bffd0f 	ldh	r2,-12(fp)
1000afb0:	10000126 	beq	r2,zero,1000afb8 <_sl_HandleAsync_Select+0x60>
1000afb4:	003fff06 	br	1000afb4 <__alt_data_end+0xf000afb4>

    VERIFY_SOCKET_CB(NULL != g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs);

    sl_Memcpy(g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].pRespArgs, pMsgArgs, sizeof(_SelectAsyncResponse_t));
1000afb8:	008400f4 	movhi	r2,4099
1000afbc:	10a48204 	addi	r2,r2,-28152
1000afc0:	10c00017 	ldw	r3,0(r2)
1000afc4:	008400f4 	movhi	r2,4099
1000afc8:	10a48204 	addi	r2,r2,-28152
1000afcc:	10800017 	ldw	r2,0(r2)
1000afd0:	10802b03 	ldbu	r2,172(r2)
1000afd4:	10803fcc 	andi	r2,r2,255
1000afd8:	10800324 	muli	r2,r2,12
1000afdc:	1885883a 	add	r2,r3,r2
1000afe0:	10800504 	addi	r2,r2,20
1000afe4:	10800017 	ldw	r2,0(r2)
1000afe8:	1009883a 	mov	r4,r2
1000afec:	e17ffc17 	ldw	r5,-16(fp)
1000aff0:	01800204 	movi	r6,8
1000aff4:	000c7840 	call	1000c784 <memcpy>
    OSI_RET_OK_CHECK(sl_SyncObjSignal(&g_pCB->ObjPool[g_pCB->FunctionParams.AsyncExt.ActionIndex].SyncObj));
1000aff8:	008400f4 	movhi	r2,4099
1000affc:	10a48204 	addi	r2,r2,-28152
1000b000:	10c00017 	ldw	r3,0(r2)
1000b004:	008400f4 	movhi	r2,4099
1000b008:	10a48204 	addi	r2,r2,-28152
1000b00c:	10800017 	ldw	r2,0(r2)
1000b010:	10802b03 	ldbu	r2,172(r2)
1000b014:	10803fcc 	andi	r2,r2,255
1000b018:	10800324 	muli	r2,r2,12
1000b01c:	10800404 	addi	r2,r2,16
1000b020:	1885883a 	add	r2,r3,r2
1000b024:	1009883a 	mov	r4,r2
1000b028:	01400884 	movi	r5,34
1000b02c:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000b030:	10803fcc 	andi	r2,r2,255
1000b034:	1080201c 	xori	r2,r2,128
1000b038:	10bfe004 	addi	r2,r2,-128
1000b03c:	e0bffd8d 	sth	r2,-10(fp)
1000b040:	e0bffd8f 	ldh	r2,-10(fp)
1000b044:	10000126 	beq	r2,zero,1000b04c <_sl_HandleAsync_Select+0xf4>
1000b048:	003fff06 	br	1000b048 <__alt_data_end+0xf000b048>

    OSI_RET_OK_CHECK(sl_LockObjUnlock(&g_pCB->ProtectionLockObj));
1000b04c:	008400f4 	movhi	r2,4099
1000b050:	10a48204 	addi	r2,r2,-28152
1000b054:	10800017 	ldw	r2,0(r2)
1000b058:	10802404 	addi	r2,r2,144
1000b05c:	1009883a 	mov	r4,r2
1000b060:	01400cc4 	movi	r5,51
1000b064:	000938c0 	call	1000938c <_SlNonOsSemSet>
1000b068:	10803fcc 	andi	r2,r2,255
1000b06c:	1080201c 	xori	r2,r2,128
1000b070:	10bfe004 	addi	r2,r2,-128
1000b074:	e0bffe0d 	sth	r2,-8(fp)
1000b078:	e0bffe0f 	ldh	r2,-8(fp)
1000b07c:	10000126 	beq	r2,zero,1000b084 <_sl_HandleAsync_Select+0x12c>
1000b080:	003fff06 	br	1000b080 <__alt_data_end+0xf000b080>
    return;
1000b084:	0001883a 	nop
}
1000b088:	e037883a 	mov	sp,fp
1000b08c:	dfc00117 	ldw	ra,4(sp)
1000b090:	df000017 	ldw	fp,0(sp)
1000b094:	dec00204 	addi	sp,sp,8
1000b098:	f800283a 	ret

1000b09c <sl_WlanConnect>:
}_SlWlanConnectMsg_u;


#if _SL_INCLUDE_FUNC(sl_WlanConnect)
_i16 sl_WlanConnect(_i8*  pName, _i16 NameLen, _u8 *pMacAddr, SlSecParams_t* pSecParams , SlSecParamsExt_t* pSecExtParams)
{
1000b09c:	deffcc04 	addi	sp,sp,-208
1000b0a0:	dfc03315 	stw	ra,204(sp)
1000b0a4:	df003215 	stw	fp,200(sp)
1000b0a8:	df003204 	addi	fp,sp,200
1000b0ac:	e13ffc15 	stw	r4,-16(fp)
1000b0b0:	2805883a 	mov	r2,r5
1000b0b4:	e1bffe15 	stw	r6,-8(fp)
1000b0b8:	e1ffff15 	stw	r7,-4(fp)
1000b0bc:	e0bffd0d 	sth	r2,-12(fp)
    _SlWlanConnectMsg_u    Msg = {0};
1000b0c0:	e0ffcf04 	addi	r3,fp,-196
1000b0c4:	00802c04 	movi	r2,176
1000b0c8:	1809883a 	mov	r4,r3
1000b0cc:	000b883a 	mov	r5,zero
1000b0d0:	100d883a 	mov	r6,r2
1000b0d4:	000c8bc0 	call	1000c8bc <memset>
    _SlCmdCtrl_t           CmdCtrl = {0};
1000b0d8:	e03ffb15 	stw	zero,-20(fp)

    CmdCtrl.TxDescLen = 0;/* init */
1000b0dc:	e03ffb85 	stb	zero,-18(fp)
    CmdCtrl.RxDescLen = sizeof(_BasicResponse_t);
1000b0e0:	00800104 	movi	r2,4
1000b0e4:	e0bffbc5 	stb	r2,-17(fp)

    /* verify SSID length */
    VERIFY_PROTOCOL(NameLen <= MAX_SSID_LEN);
1000b0e8:	e0bffd0f 	ldh	r2,-12(fp)
1000b0ec:	10800850 	cmplti	r2,r2,33
1000b0f0:	1000011e 	bne	r2,zero,1000b0f8 <sl_WlanConnect+0x5c>
1000b0f4:	003fff06 	br	1000b0f4 <__alt_data_end+0xf000b0f4>
    /* update SSID length */
    Msg.Cmd.Args.Common.SsidLen = (_u8)NameLen;
1000b0f8:	e0bffd0b 	ldhu	r2,-12(fp)
1000b0fc:	e0bfcf45 	stb	r2,-195(fp)

    /* Profile with no security */
    /* Enterprise security profile */
    if (NULL != pSecExtParams)
1000b100:	e0800217 	ldw	r2,8(fp)
1000b104:	10009526 	beq	r2,zero,1000b35c <sl_WlanConnect+0x2c0>
    {
        /* Update command opcode */
        CmdCtrl.Opcode = SL_OPCODE_WLAN_WLANCONNECTEAPCOMMAND;
1000b108:	00a32084 	movi	r2,-29566
1000b10c:	e0bffb0d 	sth	r2,-20(fp)
        CmdCtrl.TxDescLen += sizeof(_WlanConnectEapCommand_t);
1000b110:	e0bffb83 	ldbu	r2,-18(fp)
1000b114:	10800404 	addi	r2,r2,16
1000b118:	e0bffb85 	stb	r2,-18(fp)
        /* copy SSID */
        sl_Memcpy(EAP_SSID_STRING(&Msg), pName, NameLen);
1000b11c:	e0fffd0f 	ldh	r3,-12(fp)
1000b120:	e0bfcf04 	addi	r2,fp,-196
1000b124:	10800404 	addi	r2,r2,16
1000b128:	1009883a 	mov	r4,r2
1000b12c:	e17ffc17 	ldw	r5,-16(fp)
1000b130:	180d883a 	mov	r6,r3
1000b134:	000c7840 	call	1000c784 <memcpy>
        CmdCtrl.TxDescLen += NameLen;
1000b138:	e0bffb83 	ldbu	r2,-18(fp)
1000b13c:	e0fffd0b 	ldhu	r3,-12(fp)
1000b140:	10c5883a 	add	r2,r2,r3
1000b144:	e0bffb85 	stb	r2,-18(fp)
        /* Copy password if supplied */
        if ((NULL != pSecParams) && (pSecParams->KeyLen > 0))
1000b148:	e0bfff17 	ldw	r2,-4(fp)
1000b14c:	10002926 	beq	r2,zero,1000b1f4 <sl_WlanConnect+0x158>
1000b150:	e0bfff17 	ldw	r2,-4(fp)
1000b154:	10800203 	ldbu	r2,8(r2)
1000b158:	10803fcc 	andi	r2,r2,255
1000b15c:	10002526 	beq	r2,zero,1000b1f4 <sl_WlanConnect+0x158>
        {
            /* update security type */
            Msg.Cmd.Args.Common.SecType = pSecParams->Type;
1000b160:	e0bfff17 	ldw	r2,-4(fp)
1000b164:	10800003 	ldbu	r2,0(r2)
1000b168:	e0bfcf05 	stb	r2,-196(fp)
            /* verify key length */
            if (pSecParams->KeyLen > MAX_KEY_LEN)
1000b16c:	e0bfff17 	ldw	r2,-4(fp)
1000b170:	10800203 	ldbu	r2,8(r2)
1000b174:	10803fcc 	andi	r2,r2,255
1000b178:	10801030 	cmpltui	r2,r2,64
1000b17c:	1000021e 	bne	r2,zero,1000b188 <sl_WlanConnect+0xec>
            {
                return SL_INVALPARAM;
1000b180:	00be0b44 	movi	r2,-2003
1000b184:	0000ce06 	br	1000b4c0 <sl_WlanConnect+0x424>
            }
            /* update key length */
            Msg.Cmd.Args.Common.PasswordLen = pSecParams->KeyLen;
1000b188:	e0bfff17 	ldw	r2,-4(fp)
1000b18c:	10800203 	ldbu	r2,8(r2)
1000b190:	e0bfd105 	stb	r2,-188(fp)
            ARG_CHECK_PTR(pSecParams->Key);
1000b194:	e0bfff17 	ldw	r2,-4(fp)
1000b198:	10800117 	ldw	r2,4(r2)
1000b19c:	1000011e 	bne	r2,zero,1000b1a4 <sl_WlanConnect+0x108>
1000b1a0:	003fff06 	br	1000b1a0 <__alt_data_end+0xf000b1a0>
            /* copy key		 */
            sl_Memcpy(EAP_PASSWORD_STRING(&Msg), pSecParams->Key, pSecParams->KeyLen);
1000b1a4:	e0bfcf04 	addi	r2,fp,-196
1000b1a8:	10800043 	ldbu	r2,1(r2)
1000b1ac:	10803fcc 	andi	r2,r2,255
1000b1b0:	10800404 	addi	r2,r2,16
1000b1b4:	e0ffcf04 	addi	r3,fp,-196
1000b1b8:	1889883a 	add	r4,r3,r2
1000b1bc:	e0bfff17 	ldw	r2,-4(fp)
1000b1c0:	10c00117 	ldw	r3,4(r2)
1000b1c4:	e0bfff17 	ldw	r2,-4(fp)
1000b1c8:	10800203 	ldbu	r2,8(r2)
1000b1cc:	10803fcc 	andi	r2,r2,255
1000b1d0:	180b883a 	mov	r5,r3
1000b1d4:	100d883a 	mov	r6,r2
1000b1d8:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += pSecParams->KeyLen;
1000b1dc:	e0fffb83 	ldbu	r3,-18(fp)
1000b1e0:	e0bfff17 	ldw	r2,-4(fp)
1000b1e4:	10800203 	ldbu	r2,8(r2)
1000b1e8:	1885883a 	add	r2,r3,r2
1000b1ec:	e0bffb85 	stb	r2,-18(fp)
1000b1f0:	00000106 	br	1000b1f8 <sl_WlanConnect+0x15c>
        }
        else
        {
            Msg.Cmd.Args.Common.PasswordLen = 0;
1000b1f4:	e03fd105 	stb	zero,-188(fp)
        }

        ARG_CHECK_PTR(pSecExtParams);
1000b1f8:	e0800217 	ldw	r2,8(fp)
1000b1fc:	1000011e 	bne	r2,zero,1000b204 <sl_WlanConnect+0x168>
1000b200:	003fff06 	br	1000b200 <__alt_data_end+0xf000b200>
        /* Update Eap bitmask */
        Msg.Cmd.Args.EapBitmask = pSecExtParams->EapMethod;
1000b204:	e0800217 	ldw	r2,8(fp)
1000b208:	10800417 	ldw	r2,16(r2)
1000b20c:	e0bfd215 	stw	r2,-184(fp)
        /* Update Certificate file ID index - currently not supported */
        Msg.Cmd.Args.CertIndex = pSecExtParams->CertIndex;
1000b210:	e0800217 	ldw	r2,8(fp)
1000b214:	10800343 	ldbu	r2,13(r2)
1000b218:	e0bfd1c5 	stb	r2,-185(fp)
        /* verify user length */
        if (pSecExtParams->UserLen > MAX_USER_LEN)
1000b21c:	e0800217 	ldw	r2,8(fp)
1000b220:	10800103 	ldbu	r2,4(r2)
1000b224:	10803fcc 	andi	r2,r2,255
1000b228:	10800870 	cmpltui	r2,r2,33
1000b22c:	1000021e 	bne	r2,zero,1000b238 <sl_WlanConnect+0x19c>
        {
            return SL_INVALPARAM;
1000b230:	00be0b44 	movi	r2,-2003
1000b234:	0000a206 	br	1000b4c0 <sl_WlanConnect+0x424>
        }
        Msg.Cmd.Args.UserLen = pSecExtParams->UserLen;
1000b238:	e0800217 	ldw	r2,8(fp)
1000b23c:	10800103 	ldbu	r2,4(r2)
1000b240:	e0bfd145 	stb	r2,-187(fp)
        /* copy user name (identity) */
        if(pSecExtParams->UserLen > 0)
1000b244:	e0800217 	ldw	r2,8(fp)
1000b248:	10800103 	ldbu	r2,4(r2)
1000b24c:	10803fcc 	andi	r2,r2,255
1000b250:	10001726 	beq	r2,zero,1000b2b0 <sl_WlanConnect+0x214>
        {
            sl_Memcpy(EAP_USER_STRING(&Msg), pSecExtParams->User, pSecExtParams->UserLen);
1000b254:	e0bfcf04 	addi	r2,fp,-196
1000b258:	10800043 	ldbu	r2,1(r2)
1000b25c:	10c03fcc 	andi	r3,r2,255
1000b260:	e0bfcf04 	addi	r2,fp,-196
1000b264:	10800203 	ldbu	r2,8(r2)
1000b268:	10803fcc 	andi	r2,r2,255
1000b26c:	1885883a 	add	r2,r3,r2
1000b270:	10800404 	addi	r2,r2,16
1000b274:	e0ffcf04 	addi	r3,fp,-196
1000b278:	1889883a 	add	r4,r3,r2
1000b27c:	e0800217 	ldw	r2,8(fp)
1000b280:	10c00017 	ldw	r3,0(r2)
1000b284:	e0800217 	ldw	r2,8(fp)
1000b288:	10800103 	ldbu	r2,4(r2)
1000b28c:	10803fcc 	andi	r2,r2,255
1000b290:	180b883a 	mov	r5,r3
1000b294:	100d883a 	mov	r6,r2
1000b298:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += pSecExtParams->UserLen;
1000b29c:	e0fffb83 	ldbu	r3,-18(fp)
1000b2a0:	e0800217 	ldw	r2,8(fp)
1000b2a4:	10800103 	ldbu	r2,4(r2)
1000b2a8:	1885883a 	add	r2,r3,r2
1000b2ac:	e0bffb85 	stb	r2,-18(fp)
        }
        /* verify Anonymous user length  */
        if (pSecExtParams->AnonUserLen > MAX_ANON_USER_LEN)
1000b2b0:	e0800217 	ldw	r2,8(fp)
1000b2b4:	10800303 	ldbu	r2,12(r2)
1000b2b8:	10803fcc 	andi	r2,r2,255
1000b2bc:	10800870 	cmpltui	r2,r2,33
1000b2c0:	1000021e 	bne	r2,zero,1000b2cc <sl_WlanConnect+0x230>
        {
            return SL_INVALPARAM;
1000b2c4:	00be0b44 	movi	r2,-2003
1000b2c8:	00007d06 	br	1000b4c0 <sl_WlanConnect+0x424>
        }
        Msg.Cmd.Args.AnonUserLen = pSecExtParams->AnonUserLen;
1000b2cc:	e0800217 	ldw	r2,8(fp)
1000b2d0:	10800303 	ldbu	r2,12(r2)
1000b2d4:	e0bfd185 	stb	r2,-186(fp)
        /* copy Anonymous user */
        if(pSecExtParams->AnonUserLen > 0)
1000b2d8:	e0800217 	ldw	r2,8(fp)
1000b2dc:	10800303 	ldbu	r2,12(r2)
1000b2e0:	10803fcc 	andi	r2,r2,255
1000b2e4:	10001c26 	beq	r2,zero,1000b358 <sl_WlanConnect+0x2bc>
        {
            sl_Memcpy(EAP_ANON_USER_STRING(&Msg), pSecExtParams->AnonUser, pSecExtParams->AnonUserLen);
1000b2e8:	e0bfcf04 	addi	r2,fp,-196
1000b2ec:	10800043 	ldbu	r2,1(r2)
1000b2f0:	10c03fcc 	andi	r3,r2,255
1000b2f4:	e0bfcf04 	addi	r2,fp,-196
1000b2f8:	10800203 	ldbu	r2,8(r2)
1000b2fc:	10803fcc 	andi	r2,r2,255
1000b300:	1887883a 	add	r3,r3,r2
1000b304:	e0bfcf04 	addi	r2,fp,-196
1000b308:	10800243 	ldbu	r2,9(r2)
1000b30c:	10803fcc 	andi	r2,r2,255
1000b310:	1885883a 	add	r2,r3,r2
1000b314:	10800404 	addi	r2,r2,16
1000b318:	e0ffcf04 	addi	r3,fp,-196
1000b31c:	1889883a 	add	r4,r3,r2
1000b320:	e0800217 	ldw	r2,8(fp)
1000b324:	10c00217 	ldw	r3,8(r2)
1000b328:	e0800217 	ldw	r2,8(fp)
1000b32c:	10800303 	ldbu	r2,12(r2)
1000b330:	10803fcc 	andi	r2,r2,255
1000b334:	180b883a 	mov	r5,r3
1000b338:	100d883a 	mov	r6,r2
1000b33c:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += pSecExtParams->AnonUserLen;
1000b340:	e0fffb83 	ldbu	r3,-18(fp)
1000b344:	e0800217 	ldw	r2,8(fp)
1000b348:	10800303 	ldbu	r2,12(r2)
1000b34c:	1885883a 	add	r2,r3,r2
1000b350:	e0bffb85 	stb	r2,-18(fp)
1000b354:	00003906 	br	1000b43c <sl_WlanConnect+0x3a0>
1000b358:	00003806 	br	1000b43c <sl_WlanConnect+0x3a0>

    /* Regular or open security profile */
    else
    {
        /* Update command opcode */
        CmdCtrl.Opcode = SL_OPCODE_WLAN_WLANCONNECTCOMMAND;
1000b35c:	00a32004 	movi	r2,-29568
1000b360:	e0bffb0d 	sth	r2,-20(fp)
        CmdCtrl.TxDescLen += sizeof(_WlanConnectCommon_t);
1000b364:	e0bffb83 	ldbu	r2,-18(fp)
1000b368:	10800244 	addi	r2,r2,9
1000b36c:	e0bffb85 	stb	r2,-18(fp)
        /* copy SSID */
        sl_Memcpy(SSID_STRING(&Msg), pName, NameLen);	
1000b370:	e0fffd0f 	ldh	r3,-12(fp)
1000b374:	e0bfcf04 	addi	r2,fp,-196
1000b378:	10800244 	addi	r2,r2,9
1000b37c:	1009883a 	mov	r4,r2
1000b380:	e17ffc17 	ldw	r5,-16(fp)
1000b384:	180d883a 	mov	r6,r3
1000b388:	000c7840 	call	1000c784 <memcpy>
        CmdCtrl.TxDescLen += NameLen;
1000b38c:	e0bffb83 	ldbu	r2,-18(fp)
1000b390:	e0fffd0b 	ldhu	r3,-12(fp)
1000b394:	10c5883a 	add	r2,r2,r3
1000b398:	e0bffb85 	stb	r2,-18(fp)
        /* Copy password if supplied */
        if( NULL != pSecParams )
1000b39c:	e0bfff17 	ldw	r2,-4(fp)
1000b3a0:	10002426 	beq	r2,zero,1000b434 <sl_WlanConnect+0x398>
        {
            /* update security type */
            Msg.Cmd.Args.Common.SecType = pSecParams->Type;
1000b3a4:	e0bfff17 	ldw	r2,-4(fp)
1000b3a8:	10800003 	ldbu	r2,0(r2)
1000b3ac:	e0bfcf05 	stb	r2,-196(fp)
            /* verify key length is valid */
            if (pSecParams->KeyLen > MAX_KEY_LEN)
1000b3b0:	e0bfff17 	ldw	r2,-4(fp)
1000b3b4:	10800203 	ldbu	r2,8(r2)
1000b3b8:	10803fcc 	andi	r2,r2,255
1000b3bc:	10801030 	cmpltui	r2,r2,64
1000b3c0:	1000021e 	bne	r2,zero,1000b3cc <sl_WlanConnect+0x330>
            {
                return SL_INVALPARAM;
1000b3c4:	00be0b44 	movi	r2,-2003
1000b3c8:	00003d06 	br	1000b4c0 <sl_WlanConnect+0x424>
            }
            /* update key length */
            Msg.Cmd.Args.Common.PasswordLen = pSecParams->KeyLen;
1000b3cc:	e0bfff17 	ldw	r2,-4(fp)
1000b3d0:	10800203 	ldbu	r2,8(r2)
1000b3d4:	e0bfd105 	stb	r2,-188(fp)
            CmdCtrl.TxDescLen += pSecParams->KeyLen;
1000b3d8:	e0fffb83 	ldbu	r3,-18(fp)
1000b3dc:	e0bfff17 	ldw	r2,-4(fp)
1000b3e0:	10800203 	ldbu	r2,8(r2)
1000b3e4:	1885883a 	add	r2,r3,r2
1000b3e8:	e0bffb85 	stb	r2,-18(fp)
            /* copy key (could be no key in case of WPS pin) */
            if( NULL != pSecParams->Key )
1000b3ec:	e0bfff17 	ldw	r2,-4(fp)
1000b3f0:	10800117 	ldw	r2,4(r2)
1000b3f4:	10001126 	beq	r2,zero,1000b43c <sl_WlanConnect+0x3a0>
            {
                sl_Memcpy(PASSWORD_STRING(&Msg), pSecParams->Key, pSecParams->KeyLen);
1000b3f8:	e0bfcf04 	addi	r2,fp,-196
1000b3fc:	10800043 	ldbu	r2,1(r2)
1000b400:	10803fcc 	andi	r2,r2,255
1000b404:	10800244 	addi	r2,r2,9
1000b408:	e0ffcf04 	addi	r3,fp,-196
1000b40c:	1889883a 	add	r4,r3,r2
1000b410:	e0bfff17 	ldw	r2,-4(fp)
1000b414:	10c00117 	ldw	r3,4(r2)
1000b418:	e0bfff17 	ldw	r2,-4(fp)
1000b41c:	10800203 	ldbu	r2,8(r2)
1000b420:	10803fcc 	andi	r2,r2,255
1000b424:	180b883a 	mov	r5,r3
1000b428:	100d883a 	mov	r6,r2
1000b42c:	000c7840 	call	1000c784 <memcpy>
1000b430:	00000206 	br	1000b43c <sl_WlanConnect+0x3a0>
            }
        }
        /* Profile with no security */
        else
        {
            Msg.Cmd.Args.Common.PasswordLen = 0;
1000b434:	e03fd105 	stb	zero,-188(fp)
            Msg.Cmd.Args.Common.SecType = SL_SEC_TYPE_OPEN;
1000b438:	e03fcf05 	stb	zero,-196(fp)
        }	
    }
    /* If BSSID is not null, copy to buffer, otherwise set to 0 */
    if(NULL != pMacAddr)
1000b43c:	e0bffe17 	ldw	r2,-8(fp)
1000b440:	10000e26 	beq	r2,zero,1000b47c <sl_WlanConnect+0x3e0>
    {
        sl_Memcpy(Msg.Cmd.Args.Common.Bssid, pMacAddr, sizeof(Msg.Cmd.Args.Common.Bssid));
1000b444:	e0bffe17 	ldw	r2,-8(fp)
1000b448:	10c00003 	ldbu	r3,0(r2)
1000b44c:	e0ffcf85 	stb	r3,-194(fp)
1000b450:	10c00043 	ldbu	r3,1(r2)
1000b454:	e0ffcfc5 	stb	r3,-193(fp)
1000b458:	10c00083 	ldbu	r3,2(r2)
1000b45c:	e0ffd005 	stb	r3,-192(fp)
1000b460:	10c000c3 	ldbu	r3,3(r2)
1000b464:	e0ffd045 	stb	r3,-191(fp)
1000b468:	10c00103 	ldbu	r3,4(r2)
1000b46c:	e0ffd085 	stb	r3,-190(fp)
1000b470:	10800143 	ldbu	r2,5(r2)
1000b474:	e0bfd0c5 	stb	r2,-189(fp)
1000b478:	00000606 	br	1000b494 <sl_WlanConnect+0x3f8>
    }
    else
    {
        sl_Memset(Msg.Cmd.Args.Common.Bssid, 0, sizeof(Msg.Cmd.Args.Common.Bssid));
1000b47c:	e0bfcf04 	addi	r2,fp,-196
1000b480:	10800084 	addi	r2,r2,2
1000b484:	1009883a 	mov	r4,r2
1000b488:	000b883a 	mov	r5,zero
1000b48c:	01800184 	movi	r6,6
1000b490:	000c8bc0 	call	1000c8bc <memset>
    }


    VERIFY_RET_OK ( _SlDrvCmdOp(&CmdCtrl, &Msg, NULL));
1000b494:	e0fffb04 	addi	r3,fp,-20
1000b498:	e0bfcf04 	addi	r2,fp,-196
1000b49c:	1809883a 	mov	r4,r3
1000b4a0:	100b883a 	mov	r5,r2
1000b4a4:	000d883a 	mov	r6,zero
1000b4a8:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000b4ac:	e0bfce0d 	sth	r2,-200(fp)
1000b4b0:	e0bfce0f 	ldh	r2,-200(fp)
1000b4b4:	10000126 	beq	r2,zero,1000b4bc <sl_WlanConnect+0x420>
1000b4b8:	003fff06 	br	1000b4b8 <__alt_data_end+0xf000b4b8>

    return (_i16)Msg.Rsp.status;
1000b4bc:	e0bfcf0b 	ldhu	r2,-196(fp)
}
1000b4c0:	e037883a 	mov	sp,fp
1000b4c4:	dfc00117 	ldw	ra,4(sp)
1000b4c8:	df000017 	ldw	fp,0(sp)
1000b4cc:	dec00204 	addi	sp,sp,8
1000b4d0:	f800283a 	ret

1000b4d4 <sl_WlanDisconnect>:
/*******************************************************************************/
/*   sl_Disconnect  */
/* ******************************************************************************/
#if _SL_INCLUDE_FUNC(sl_WlanDisconnect)
_i16 sl_WlanDisconnect(void)
{
1000b4d4:	defffe04 	addi	sp,sp,-8
1000b4d8:	dfc00115 	stw	ra,4(sp)
1000b4dc:	df000015 	stw	fp,0(sp)
1000b4e0:	d839883a 	mov	fp,sp
    return _SlDrvBasicCmd(SL_OPCODE_WLAN_WLANDISCONNECTCOMMAND);
1000b4e4:	01232054 	movui	r4,35969
1000b4e8:	00067bc0 	call	100067bc <_SlDrvBasicCmd>
}
1000b4ec:	e037883a 	mov	sp,fp
1000b4f0:	dfc00117 	ldw	ra,4(sp)
1000b4f4:	df000017 	ldw	fp,0(sp)
1000b4f8:	dec00204 	addi	sp,sp,8
1000b4fc:	f800283a 	ret

1000b500 <sl_WlanPolicySet>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_WlanPolicySet)
_i16 sl_WlanPolicySet(_u8 Type , const _u8 Policy, _u8 *pVal,_u8 ValLen)
{
1000b500:	defff404 	addi	sp,sp,-48
1000b504:	dfc00b15 	stw	ra,44(sp)
1000b508:	df000a15 	stw	fp,40(sp)
1000b50c:	df000a04 	addi	fp,sp,40
1000b510:	2807883a 	mov	r3,r5
1000b514:	e1bffe15 	stw	r6,-8(fp)
1000b518:	3805883a 	mov	r2,r7
1000b51c:	e13ffc05 	stb	r4,-16(fp)
1000b520:	e0fffd05 	stb	r3,-12(fp)
1000b524:	e0bfff05 	stb	r2,-4(fp)
    _SlPolicyMsg_u         Msg;
    _SlCmdExt_t            CmdExt;

    CmdExt.TxPayloadLen = ValLen;
1000b528:	e0bfff03 	ldbu	r2,-4(fp)
1000b52c:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
1000b530:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = (_u8 *)pVal;
1000b534:	e0bffe17 	ldw	r2,-8(fp)
1000b538:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
1000b53c:	e03ffb15 	stw	zero,-20(fp)


    Msg.Cmd.PolicyType        = Type;
1000b540:	e0bffc03 	ldbu	r2,-16(fp)
1000b544:	e0bff685 	stb	r2,-38(fp)
    Msg.Cmd.PolicyOption      = Policy;
1000b548:	e0bffd03 	ldbu	r2,-12(fp)
1000b54c:	e0bff705 	stb	r2,-36(fp)
    Msg.Cmd.PolicyOptionLen   = ValLen;
1000b550:	e0bfff03 	ldbu	r2,-4(fp)
1000b554:	e0bff745 	stb	r2,-35(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlPolicySetCmdCtrl, &Msg, &CmdExt));
1000b558:	e0fff684 	addi	r3,fp,-38
1000b55c:	e0bff804 	addi	r2,fp,-32
1000b560:	d1202804 	addi	r4,gp,-32608
1000b564:	180b883a 	mov	r5,r3
1000b568:	100d883a 	mov	r6,r2
1000b56c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000b570:	e0bff60d 	sth	r2,-40(fp)
1000b574:	e0bff60f 	ldh	r2,-40(fp)
1000b578:	10000126 	beq	r2,zero,1000b580 <sl_WlanPolicySet+0x80>
1000b57c:	003fff06 	br	1000b57c <__alt_data_end+0xf000b57c>

    return (_i16)Msg.Rsp.status;
1000b580:	e0bff68b 	ldhu	r2,-38(fp)
}
1000b584:	e037883a 	mov	sp,fp
1000b588:	dfc00117 	ldw	ra,4(sp)
1000b58c:	df000017 	ldw	fp,0(sp)
1000b590:	dec00204 	addi	sp,sp,8
1000b594:	f800283a 	ret

1000b598 <sl_WlanPolicyGet>:
    sizeof(_WlanPoliciySetGet_t)
};

#if _SL_INCLUDE_FUNC(sl_WlanPolicyGet)
_i16 sl_WlanPolicyGet(_u8 Type , _u8 Policy,_u8 *pVal,_u8 *pValLen)
{
1000b598:	defff404 	addi	sp,sp,-48
1000b59c:	dfc00b15 	stw	ra,44(sp)
1000b5a0:	df000a15 	stw	fp,40(sp)
1000b5a4:	df000a04 	addi	fp,sp,40
1000b5a8:	2007883a 	mov	r3,r4
1000b5ac:	2805883a 	mov	r2,r5
1000b5b0:	e1bffe15 	stw	r6,-8(fp)
1000b5b4:	e1ffff15 	stw	r7,-4(fp)
1000b5b8:	e0fffc05 	stb	r3,-16(fp)
1000b5bc:	e0bffd05 	stb	r2,-12(fp)
    _SlPolicyGetMsg_u      Msg;
    _SlCmdExt_t            CmdExt;

    if (*pValLen == 0)
1000b5c0:	e0bfff17 	ldw	r2,-4(fp)
1000b5c4:	10800003 	ldbu	r2,0(r2)
1000b5c8:	10803fcc 	andi	r2,r2,255
1000b5cc:	1000021e 	bne	r2,zero,1000b5d8 <sl_WlanPolicyGet+0x40>
    {
        return SL_EZEROLEN;
1000b5d0:	00be0b84 	movi	r2,-2002
1000b5d4:	00002f06 	br	1000b694 <sl_WlanPolicyGet+0xfc>
    }
    CmdExt.TxPayloadLen = 0;
1000b5d8:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = *pValLen;
1000b5dc:	e0bfff17 	ldw	r2,-4(fp)
1000b5e0:	10800003 	ldbu	r2,0(r2)
1000b5e4:	10803fcc 	andi	r2,r2,255
1000b5e8:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
1000b5ec:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = pVal;
1000b5f0:	e0bffe17 	ldw	r2,-8(fp)
1000b5f4:	e0bffb15 	stw	r2,-20(fp)
    CmdExt.ActualRxPayloadLen = 0;
1000b5f8:	e03ff90d 	sth	zero,-28(fp)


    Msg.Cmd.PolicyType = Type;
1000b5fc:	e0bffc03 	ldbu	r2,-16(fp)
1000b600:	e0bff685 	stb	r2,-38(fp)
    Msg.Cmd.PolicyOption = Policy;
1000b604:	e0bffd03 	ldbu	r2,-12(fp)
1000b608:	e0bff705 	stb	r2,-36(fp)
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlPolicyGetCmdCtrl, &Msg, &CmdExt));
1000b60c:	e0fff684 	addi	r3,fp,-38
1000b610:	e0bff804 	addi	r2,fp,-32
1000b614:	d1202904 	addi	r4,gp,-32604
1000b618:	180b883a 	mov	r5,r3
1000b61c:	100d883a 	mov	r6,r2
1000b620:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000b624:	e0bff60d 	sth	r2,-40(fp)
1000b628:	e0bff60f 	ldh	r2,-40(fp)
1000b62c:	10000126 	beq	r2,zero,1000b634 <sl_WlanPolicyGet+0x9c>
1000b630:	003fff06 	br	1000b630 <__alt_data_end+0xf000b630>


    if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
1000b634:	e0fff88b 	ldhu	r3,-30(fp)
1000b638:	e0bff90b 	ldhu	r2,-28(fp)
1000b63c:	18ffffcc 	andi	r3,r3,65535
1000b640:	10bfffcc 	andi	r2,r2,65535
1000b644:	1880052e 	bgeu	r3,r2,1000b65c <sl_WlanPolicyGet+0xc4>
    {
        *pValLen = Msg.Rsp.PolicyOptionLen;
1000b648:	e0fff743 	ldbu	r3,-35(fp)
1000b64c:	e0bfff17 	ldw	r2,-4(fp)
1000b650:	10c00005 	stb	r3,0(r2)
        return SL_ESMALLBUF;
1000b654:	00be0bc4 	movi	r2,-2001
1000b658:	00000e06 	br	1000b694 <sl_WlanPolicyGet+0xfc>
    }
    else
    {
        /*  no pointer valus, fill the results into _i8 */
        *pValLen = (_u8)CmdExt.ActualRxPayloadLen;
1000b65c:	e0bff90b 	ldhu	r2,-28(fp)
1000b660:	1007883a 	mov	r3,r2
1000b664:	e0bfff17 	ldw	r2,-4(fp)
1000b668:	10c00005 	stb	r3,0(r2)
        if( 0 == CmdExt.ActualRxPayloadLen )
1000b66c:	e0bff90b 	ldhu	r2,-28(fp)
1000b670:	10bfffcc 	andi	r2,r2,65535
1000b674:	1000061e 	bne	r2,zero,1000b690 <sl_WlanPolicyGet+0xf8>
        {
            *pValLen = 1;
1000b678:	e0bfff17 	ldw	r2,-4(fp)
1000b67c:	00c00044 	movi	r3,1
1000b680:	10c00005 	stb	r3,0(r2)
            pVal[0] = Msg.Rsp.PolicyOption;
1000b684:	e0fff703 	ldbu	r3,-36(fp)
1000b688:	e0bffe17 	ldw	r2,-8(fp)
1000b68c:	10c00005 	stb	r3,0(r2)
        }
    }
    return (_i16)SL_OS_RET_CODE_OK;
1000b690:	0005883a 	mov	r2,zero
}
1000b694:	e037883a 	mov	sp,fp
1000b698:	dfc00117 	ldw	ra,4(sp)
1000b69c:	df000017 	ldw	fp,0(sp)
1000b6a0:	dec00204 	addi	sp,sp,8
1000b6a4:	f800283a 	ret

1000b6a8 <sl_WlanProfileAdd>:



#if _SL_INCLUDE_FUNC(sl_WlanProfileAdd)
_i16 sl_WlanProfileAdd(_i8*  pName, _i16 NameLen, _u8 *pMacAddr, SlSecParams_t* pSecParams , SlSecParamsExt_t* pSecExtParams, _u32  Priority, _u32  Options)
{
1000b6a8:	deffcb04 	addi	sp,sp,-212
1000b6ac:	dfc03415 	stw	ra,208(sp)
1000b6b0:	df003315 	stw	fp,204(sp)
1000b6b4:	df003304 	addi	fp,sp,204
1000b6b8:	e13ffc15 	stw	r4,-16(fp)
1000b6bc:	2805883a 	mov	r2,r5
1000b6c0:	e1bffe15 	stw	r6,-8(fp)
1000b6c4:	e1ffff15 	stw	r7,-4(fp)
1000b6c8:	e0bffd0d 	sth	r2,-12(fp)
    _SlProfileAddMsg_u      Msg;
    _SlCmdCtrl_t           CmdCtrl = {0};
1000b6cc:	e03ffb15 	stw	zero,-20(fp)
    CmdCtrl.TxDescLen = 0;/* init */
1000b6d0:	e03ffb85 	stb	zero,-18(fp)
    CmdCtrl.RxDescLen = sizeof(_BasicResponse_t);
1000b6d4:	00800104 	movi	r2,4
1000b6d8:	e0bffbc5 	stb	r2,-17(fp)

    /* update priority */
    Msg.Cmd.Args.Common.Priority = (_u8)Priority; 
1000b6dc:	e0800317 	ldw	r2,12(fp)
1000b6e0:	e0bfce85 	stb	r2,-198(fp)
    /* verify SSID length */
    VERIFY_PROTOCOL(NameLen <= MAX_SSID_LEN);
1000b6e4:	e0bffd0f 	ldh	r2,-12(fp)
1000b6e8:	10800850 	cmplti	r2,r2,33
1000b6ec:	1000011e 	bne	r2,zero,1000b6f4 <sl_WlanProfileAdd+0x4c>
1000b6f0:	003fff06 	br	1000b6f0 <__alt_data_end+0xf000b6f0>
    /* update SSID length */
    Msg.Cmd.Args.Common.SsidLen = (_u8)NameLen;
1000b6f4:	e0bffd0b 	ldhu	r2,-12(fp)
1000b6f8:	e0bfce45 	stb	r2,-199(fp)


    /* Enterprise security profile */
    if  (NULL != pSecExtParams)
1000b6fc:	e0800217 	ldw	r2,8(fp)
1000b700:	1000a226 	beq	r2,zero,1000b98c <sl_WlanProfileAdd+0x2e4>
    {
        /* Update command opcode */
        CmdCtrl.Opcode = SL_OPCODE_WLAN_EAP_PROFILEADDCOMMAND;
1000b704:	00a319c4 	movi	r2,-29593
1000b708:	e0bffb0d 	sth	r2,-20(fp)
        CmdCtrl.TxDescLen += sizeof(_WlanAddGetEapProfile_t);
1000b70c:	e0bffb83 	ldbu	r2,-18(fp)
1000b710:	10800504 	addi	r2,r2,20
1000b714:	e0bffb85 	stb	r2,-18(fp)

        /* copy SSID */
        sl_Memcpy(EAP_PROFILE_SSID_STRING(&Msg), pName, NameLen);	
1000b718:	e0fffd0f 	ldh	r3,-12(fp)
1000b71c:	e0bfce04 	addi	r2,fp,-200
1000b720:	10800504 	addi	r2,r2,20
1000b724:	1009883a 	mov	r4,r2
1000b728:	e17ffc17 	ldw	r5,-16(fp)
1000b72c:	180d883a 	mov	r6,r3
1000b730:	000c7840 	call	1000c784 <memcpy>
        CmdCtrl.TxDescLen += NameLen;
1000b734:	e0bffb83 	ldbu	r2,-18(fp)
1000b738:	e0fffd0b 	ldhu	r3,-12(fp)
1000b73c:	10c5883a 	add	r2,r2,r3
1000b740:	e0bffb85 	stb	r2,-18(fp)

        /* Copy password if supplied */
        if ((NULL != pSecParams) && (pSecParams->KeyLen > 0))
1000b744:	e0bfff17 	ldw	r2,-4(fp)
1000b748:	10003626 	beq	r2,zero,1000b824 <sl_WlanProfileAdd+0x17c>
1000b74c:	e0bfff17 	ldw	r2,-4(fp)
1000b750:	10800203 	ldbu	r2,8(r2)
1000b754:	10803fcc 	andi	r2,r2,255
1000b758:	10003226 	beq	r2,zero,1000b824 <sl_WlanProfileAdd+0x17c>
        {
            /* update security type */
            Msg.Cmd.Args.Common.SecType = pSecParams->Type;
1000b75c:	e0bfff17 	ldw	r2,-4(fp)
1000b760:	10800003 	ldbu	r2,0(r2)
1000b764:	e0bfce05 	stb	r2,-200(fp)

            if( SL_SEC_TYPE_WEP == Msg.Cmd.Args.Common.SecType )
1000b768:	e0bfce03 	ldbu	r2,-200(fp)
1000b76c:	10803fcc 	andi	r2,r2,255
1000b770:	1080201c 	xori	r2,r2,128
1000b774:	10bfe004 	addi	r2,r2,-128
1000b778:	10800058 	cmpnei	r2,r2,1
1000b77c:	1000011e 	bne	r2,zero,1000b784 <sl_WlanProfileAdd+0xdc>
            {
                Msg.Cmd.Args.Common.WepKeyId = 0;
1000b780:	e03fd085 	stb	zero,-190(fp)
            }

            /* verify key length */
            if (pSecParams->KeyLen > MAX_KEY_LEN)
1000b784:	e0bfff17 	ldw	r2,-4(fp)
1000b788:	10800203 	ldbu	r2,8(r2)
1000b78c:	10803fcc 	andi	r2,r2,255
1000b790:	10801030 	cmpltui	r2,r2,64
1000b794:	1000021e 	bne	r2,zero,1000b7a0 <sl_WlanProfileAdd+0xf8>
            {
                return SL_INVALPARAM;
1000b798:	00be0b44 	movi	r2,-2003
1000b79c:	0000dd06 	br	1000bb14 <sl_WlanProfileAdd+0x46c>
            }
            VERIFY_PROTOCOL(pSecParams->KeyLen <= MAX_KEY_LEN);
1000b7a0:	e0bfff17 	ldw	r2,-4(fp)
1000b7a4:	10800203 	ldbu	r2,8(r2)
1000b7a8:	10803fcc 	andi	r2,r2,255
1000b7ac:	10801030 	cmpltui	r2,r2,64
1000b7b0:	1000011e 	bne	r2,zero,1000b7b8 <sl_WlanProfileAdd+0x110>
1000b7b4:	003fff06 	br	1000b7b4 <__alt_data_end+0xf000b7b4>
            /* update key length */
            Msg.Cmd.Args.Common.PasswordLen = pSecParams->KeyLen;	
1000b7b8:	e0bfff17 	ldw	r2,-4(fp)
1000b7bc:	10800203 	ldbu	r2,8(r2)
1000b7c0:	e0bfd045 	stb	r2,-191(fp)
            CmdCtrl.TxDescLen += pSecParams->KeyLen;
1000b7c4:	e0fffb83 	ldbu	r3,-18(fp)
1000b7c8:	e0bfff17 	ldw	r2,-4(fp)
1000b7cc:	10800203 	ldbu	r2,8(r2)
1000b7d0:	1885883a 	add	r2,r3,r2
1000b7d4:	e0bffb85 	stb	r2,-18(fp)
            ARG_CHECK_PTR(pSecParams->Key);
1000b7d8:	e0bfff17 	ldw	r2,-4(fp)
1000b7dc:	10800117 	ldw	r2,4(r2)
1000b7e0:	1000011e 	bne	r2,zero,1000b7e8 <sl_WlanProfileAdd+0x140>
1000b7e4:	003fff06 	br	1000b7e4 <__alt_data_end+0xf000b7e4>
            /* copy key  */
            sl_Memcpy(EAP_PROFILE_PASSWORD_STRING(&Msg), pSecParams->Key, pSecParams->KeyLen);
1000b7e8:	e0bfce04 	addi	r2,fp,-200
1000b7ec:	10800043 	ldbu	r2,1(r2)
1000b7f0:	10803fcc 	andi	r2,r2,255
1000b7f4:	10800504 	addi	r2,r2,20
1000b7f8:	e0ffce04 	addi	r3,fp,-200
1000b7fc:	1889883a 	add	r4,r3,r2
1000b800:	e0bfff17 	ldw	r2,-4(fp)
1000b804:	10c00117 	ldw	r3,4(r2)
1000b808:	e0bfff17 	ldw	r2,-4(fp)
1000b80c:	10800203 	ldbu	r2,8(r2)
1000b810:	10803fcc 	andi	r2,r2,255
1000b814:	180b883a 	mov	r5,r3
1000b818:	100d883a 	mov	r6,r2
1000b81c:	000c7840 	call	1000c784 <memcpy>
1000b820:	00000106 	br	1000b828 <sl_WlanProfileAdd+0x180>
        }
        else
        {
            Msg.Cmd.Args.Common.PasswordLen = 0;
1000b824:	e03fd045 	stb	zero,-191(fp)
        }

        ARG_CHECK_PTR(pSecExtParams);
1000b828:	e0800217 	ldw	r2,8(fp)
1000b82c:	1000011e 	bne	r2,zero,1000b834 <sl_WlanProfileAdd+0x18c>
1000b830:	003fff06 	br	1000b830 <__alt_data_end+0xf000b830>
        /* Update Eap bitmask */
        Msg.Cmd.Args.EapBitmask = pSecExtParams->EapMethod;
1000b834:	e0800217 	ldw	r2,8(fp)
1000b838:	10800417 	ldw	r2,16(r2)
1000b83c:	e0bfd215 	stw	r2,-184(fp)
        /* Update Certificate file ID index - currently not supported */
        Msg.Cmd.Args.CertIndex = pSecExtParams->CertIndex;
1000b840:	e0800217 	ldw	r2,8(fp)
1000b844:	10800343 	ldbu	r2,13(r2)
1000b848:	e0bfd145 	stb	r2,-187(fp)
        /* verify user length */
        if (pSecExtParams->UserLen > MAX_USER_LEN)
1000b84c:	e0800217 	ldw	r2,8(fp)
1000b850:	10800103 	ldbu	r2,4(r2)
1000b854:	10803fcc 	andi	r2,r2,255
1000b858:	10800870 	cmpltui	r2,r2,33
1000b85c:	1000021e 	bne	r2,zero,1000b868 <sl_WlanProfileAdd+0x1c0>
        {
            return SL_INVALPARAM;
1000b860:	00be0b44 	movi	r2,-2003
1000b864:	0000ab06 	br	1000bb14 <sl_WlanProfileAdd+0x46c>
        }
        Msg.Cmd.Args.UserLen = pSecExtParams->UserLen;
1000b868:	e0800217 	ldw	r2,8(fp)
1000b86c:	10800103 	ldbu	r2,4(r2)
1000b870:	e0bfd0c5 	stb	r2,-189(fp)
        /* copy user name (identity) */
        if(pSecExtParams->UserLen > 0)
1000b874:	e0800217 	ldw	r2,8(fp)
1000b878:	10800103 	ldbu	r2,4(r2)
1000b87c:	10803fcc 	andi	r2,r2,255
1000b880:	10001726 	beq	r2,zero,1000b8e0 <sl_WlanProfileAdd+0x238>
        {
            sl_Memcpy(EAP_PROFILE_USER_STRING(&Msg), pSecExtParams->User, pSecExtParams->UserLen);
1000b884:	e0bfce04 	addi	r2,fp,-200
1000b888:	10800043 	ldbu	r2,1(r2)
1000b88c:	10c03fcc 	andi	r3,r2,255
1000b890:	e0bfce04 	addi	r2,fp,-200
1000b894:	10800243 	ldbu	r2,9(r2)
1000b898:	10803fcc 	andi	r2,r2,255
1000b89c:	1885883a 	add	r2,r3,r2
1000b8a0:	10800504 	addi	r2,r2,20
1000b8a4:	e0ffce04 	addi	r3,fp,-200
1000b8a8:	1889883a 	add	r4,r3,r2
1000b8ac:	e0800217 	ldw	r2,8(fp)
1000b8b0:	10c00017 	ldw	r3,0(r2)
1000b8b4:	e0800217 	ldw	r2,8(fp)
1000b8b8:	10800103 	ldbu	r2,4(r2)
1000b8bc:	10803fcc 	andi	r2,r2,255
1000b8c0:	180b883a 	mov	r5,r3
1000b8c4:	100d883a 	mov	r6,r2
1000b8c8:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += pSecExtParams->UserLen;
1000b8cc:	e0fffb83 	ldbu	r3,-18(fp)
1000b8d0:	e0800217 	ldw	r2,8(fp)
1000b8d4:	10800103 	ldbu	r2,4(r2)
1000b8d8:	1885883a 	add	r2,r3,r2
1000b8dc:	e0bffb85 	stb	r2,-18(fp)
        }

        /* verify Anonymous user length (for tunneled) */
        if (pSecExtParams->AnonUserLen > MAX_ANON_USER_LEN)
1000b8e0:	e0800217 	ldw	r2,8(fp)
1000b8e4:	10800303 	ldbu	r2,12(r2)
1000b8e8:	10803fcc 	andi	r2,r2,255
1000b8ec:	10800870 	cmpltui	r2,r2,33
1000b8f0:	1000021e 	bne	r2,zero,1000b8fc <sl_WlanProfileAdd+0x254>
        {
            return SL_INVALPARAM;
1000b8f4:	00be0b44 	movi	r2,-2003
1000b8f8:	00008606 	br	1000bb14 <sl_WlanProfileAdd+0x46c>
        }
        Msg.Cmd.Args.AnonUserLen = pSecExtParams->AnonUserLen;
1000b8fc:	e0800217 	ldw	r2,8(fp)
1000b900:	10800303 	ldbu	r2,12(r2)
1000b904:	e0bfd105 	stb	r2,-188(fp)

        /* copy Anonymous user */
        if(pSecExtParams->AnonUserLen > 0)
1000b908:	e0800217 	ldw	r2,8(fp)
1000b90c:	10800303 	ldbu	r2,12(r2)
1000b910:	10803fcc 	andi	r2,r2,255
1000b914:	10001c26 	beq	r2,zero,1000b988 <sl_WlanProfileAdd+0x2e0>
        {
            sl_Memcpy(EAP_PROFILE_ANON_USER_STRING(&Msg), pSecExtParams->AnonUser, pSecExtParams->AnonUserLen);
1000b918:	e0bfce04 	addi	r2,fp,-200
1000b91c:	10800043 	ldbu	r2,1(r2)
1000b920:	10c03fcc 	andi	r3,r2,255
1000b924:	e0bfce04 	addi	r2,fp,-200
1000b928:	10800243 	ldbu	r2,9(r2)
1000b92c:	10803fcc 	andi	r2,r2,255
1000b930:	1887883a 	add	r3,r3,r2
1000b934:	e0bfce04 	addi	r2,fp,-200
1000b938:	108002c3 	ldbu	r2,11(r2)
1000b93c:	10803fcc 	andi	r2,r2,255
1000b940:	1885883a 	add	r2,r3,r2
1000b944:	10800504 	addi	r2,r2,20
1000b948:	e0ffce04 	addi	r3,fp,-200
1000b94c:	1889883a 	add	r4,r3,r2
1000b950:	e0800217 	ldw	r2,8(fp)
1000b954:	10c00217 	ldw	r3,8(r2)
1000b958:	e0800217 	ldw	r2,8(fp)
1000b95c:	10800303 	ldbu	r2,12(r2)
1000b960:	10803fcc 	andi	r2,r2,255
1000b964:	180b883a 	mov	r5,r3
1000b968:	100d883a 	mov	r6,r2
1000b96c:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += pSecExtParams->AnonUserLen;
1000b970:	e0fffb83 	ldbu	r3,-18(fp)
1000b974:	e0800217 	ldw	r2,8(fp)
1000b978:	10800303 	ldbu	r2,12(r2)
1000b97c:	1885883a 	add	r2,r3,r2
1000b980:	e0bffb85 	stb	r2,-18(fp)
1000b984:	00004206 	br	1000ba90 <sl_WlanProfileAdd+0x3e8>
1000b988:	00004106 	br	1000ba90 <sl_WlanProfileAdd+0x3e8>
    }
    /* Regular or open security profile */
    else
    {
        /* Update command opcode */
        CmdCtrl.Opcode = SL_OPCODE_WLAN_PROFILEADDCOMMAND;
1000b98c:	00a320c4 	movi	r2,-29565
1000b990:	e0bffb0d 	sth	r2,-20(fp)
        /* update commnad length */
        CmdCtrl.TxDescLen += sizeof(_WlanAddGetProfile_t);
1000b994:	e0bffb83 	ldbu	r2,-18(fp)
1000b998:	108002c4 	addi	r2,r2,11
1000b99c:	e0bffb85 	stb	r2,-18(fp)

        if (NULL != pName)
1000b9a0:	e0bffc17 	ldw	r2,-16(fp)
1000b9a4:	10000b26 	beq	r2,zero,1000b9d4 <sl_WlanProfileAdd+0x32c>
        {
            /* copy SSID */
            sl_Memcpy(PROFILE_SSID_STRING(&Msg), pName, NameLen);
1000b9a8:	e0fffd0f 	ldh	r3,-12(fp)
1000b9ac:	e0bfce04 	addi	r2,fp,-200
1000b9b0:	108002c4 	addi	r2,r2,11
1000b9b4:	1009883a 	mov	r4,r2
1000b9b8:	e17ffc17 	ldw	r5,-16(fp)
1000b9bc:	180d883a 	mov	r6,r3
1000b9c0:	000c7840 	call	1000c784 <memcpy>
            CmdCtrl.TxDescLen += NameLen;
1000b9c4:	e0bffb83 	ldbu	r2,-18(fp)
1000b9c8:	e0fffd0b 	ldhu	r3,-12(fp)
1000b9cc:	10c5883a 	add	r2,r2,r3
1000b9d0:	e0bffb85 	stb	r2,-18(fp)
        }

        /* Copy password if supplied */
        if( NULL != pSecParams )
1000b9d4:	e0bfff17 	ldw	r2,-4(fp)
1000b9d8:	10002b26 	beq	r2,zero,1000ba88 <sl_WlanProfileAdd+0x3e0>
        {
            /* update security type */
            Msg.Cmd.Args.Common.SecType = pSecParams->Type;
1000b9dc:	e0bfff17 	ldw	r2,-4(fp)
1000b9e0:	10800003 	ldbu	r2,0(r2)
1000b9e4:	e0bfce05 	stb	r2,-200(fp)

            if( SL_SEC_TYPE_WEP == Msg.Cmd.Args.Common.SecType )
1000b9e8:	e0bfce03 	ldbu	r2,-200(fp)
1000b9ec:	10803fcc 	andi	r2,r2,255
1000b9f0:	1080201c 	xori	r2,r2,128
1000b9f4:	10bfe004 	addi	r2,r2,-128
1000b9f8:	10800058 	cmpnei	r2,r2,1
1000b9fc:	1000011e 	bne	r2,zero,1000ba04 <sl_WlanProfileAdd+0x35c>
            {
                Msg.Cmd.Args.Common.WepKeyId = 0;
1000ba00:	e03fd085 	stb	zero,-190(fp)
            }

            /* verify key length */
            if (pSecParams->KeyLen > MAX_KEY_LEN)
1000ba04:	e0bfff17 	ldw	r2,-4(fp)
1000ba08:	10800203 	ldbu	r2,8(r2)
1000ba0c:	10803fcc 	andi	r2,r2,255
1000ba10:	10801030 	cmpltui	r2,r2,64
1000ba14:	1000021e 	bne	r2,zero,1000ba20 <sl_WlanProfileAdd+0x378>
            {
                return SL_INVALPARAM;
1000ba18:	00be0b44 	movi	r2,-2003
1000ba1c:	00003d06 	br	1000bb14 <sl_WlanProfileAdd+0x46c>
            }
            /* update key length */
            Msg.Cmd.Args.Common.PasswordLen = pSecParams->KeyLen;
1000ba20:	e0bfff17 	ldw	r2,-4(fp)
1000ba24:	10800203 	ldbu	r2,8(r2)
1000ba28:	e0bfd045 	stb	r2,-191(fp)
            CmdCtrl.TxDescLen += pSecParams->KeyLen;
1000ba2c:	e0fffb83 	ldbu	r3,-18(fp)
1000ba30:	e0bfff17 	ldw	r2,-4(fp)
1000ba34:	10800203 	ldbu	r2,8(r2)
1000ba38:	1885883a 	add	r2,r3,r2
1000ba3c:	e0bffb85 	stb	r2,-18(fp)
            /* copy key (could be no key in case of WPS pin) */
            if( NULL != pSecParams->Key )
1000ba40:	e0bfff17 	ldw	r2,-4(fp)
1000ba44:	10800117 	ldw	r2,4(r2)
1000ba48:	10001126 	beq	r2,zero,1000ba90 <sl_WlanProfileAdd+0x3e8>
            {
                sl_Memcpy(PROFILE_PASSWORD_STRING(&Msg), pSecParams->Key, pSecParams->KeyLen);
1000ba4c:	e0bfce04 	addi	r2,fp,-200
1000ba50:	10800043 	ldbu	r2,1(r2)
1000ba54:	10803fcc 	andi	r2,r2,255
1000ba58:	108002c4 	addi	r2,r2,11
1000ba5c:	e0ffce04 	addi	r3,fp,-200
1000ba60:	1889883a 	add	r4,r3,r2
1000ba64:	e0bfff17 	ldw	r2,-4(fp)
1000ba68:	10c00117 	ldw	r3,4(r2)
1000ba6c:	e0bfff17 	ldw	r2,-4(fp)
1000ba70:	10800203 	ldbu	r2,8(r2)
1000ba74:	10803fcc 	andi	r2,r2,255
1000ba78:	180b883a 	mov	r5,r3
1000ba7c:	100d883a 	mov	r6,r2
1000ba80:	000c7840 	call	1000c784 <memcpy>
1000ba84:	00000206 	br	1000ba90 <sl_WlanProfileAdd+0x3e8>
            }
        }
        else
        {
            Msg.Cmd.Args.Common.SecType = SL_SEC_TYPE_OPEN;
1000ba88:	e03fce05 	stb	zero,-200(fp)
            Msg.Cmd.Args.Common.PasswordLen = 0;
1000ba8c:	e03fd045 	stb	zero,-191(fp)

    }


    /* If BSSID is not null, copy to buffer, otherwise set to 0  */
    if(NULL != pMacAddr)
1000ba90:	e0bffe17 	ldw	r2,-8(fp)
1000ba94:	10000e26 	beq	r2,zero,1000bad0 <sl_WlanProfileAdd+0x428>
    {
        sl_Memcpy(Msg.Cmd.Args.Common.Bssid, pMacAddr, sizeof(Msg.Cmd.Args.Common.Bssid));
1000ba98:	e0bffe17 	ldw	r2,-8(fp)
1000ba9c:	10c00003 	ldbu	r3,0(r2)
1000baa0:	e0ffcec5 	stb	r3,-197(fp)
1000baa4:	10c00043 	ldbu	r3,1(r2)
1000baa8:	e0ffcf05 	stb	r3,-196(fp)
1000baac:	10c00083 	ldbu	r3,2(r2)
1000bab0:	e0ffcf45 	stb	r3,-195(fp)
1000bab4:	10c000c3 	ldbu	r3,3(r2)
1000bab8:	e0ffcf85 	stb	r3,-194(fp)
1000babc:	10c00103 	ldbu	r3,4(r2)
1000bac0:	e0ffcfc5 	stb	r3,-193(fp)
1000bac4:	10800143 	ldbu	r2,5(r2)
1000bac8:	e0bfd005 	stb	r2,-192(fp)
1000bacc:	00000606 	br	1000bae8 <sl_WlanProfileAdd+0x440>
    }
    else
    {
        sl_Memset(Msg.Cmd.Args.Common.Bssid, 0, sizeof(Msg.Cmd.Args.Common.Bssid));
1000bad0:	e0bfce04 	addi	r2,fp,-200
1000bad4:	108000c4 	addi	r2,r2,3
1000bad8:	1009883a 	mov	r4,r2
1000badc:	000b883a 	mov	r5,zero
1000bae0:	01800184 	movi	r6,6
1000bae4:	000c8bc0 	call	1000c8bc <memset>
    }

    VERIFY_RET_OK(_SlDrvCmdOp(&CmdCtrl, &Msg, NULL));
1000bae8:	e0fffb04 	addi	r3,fp,-20
1000baec:	e0bfce04 	addi	r2,fp,-200
1000baf0:	1809883a 	mov	r4,r3
1000baf4:	100b883a 	mov	r5,r2
1000baf8:	000d883a 	mov	r6,zero
1000bafc:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bb00:	e0bfcd0d 	sth	r2,-204(fp)
1000bb04:	e0bfcd0f 	ldh	r2,-204(fp)
1000bb08:	10000126 	beq	r2,zero,1000bb10 <sl_WlanProfileAdd+0x468>
1000bb0c:	003fff06 	br	1000bb0c <__alt_data_end+0xf000bb0c>

    return (_i16)Msg.Rsp.status;
1000bb10:	e0bfce0b 	ldhu	r2,-200(fp)
}
1000bb14:	e037883a 	mov	sp,fp
1000bb18:	dfc00117 	ldw	ra,4(sp)
1000bb1c:	df000017 	ldw	fp,0(sp)
1000bb20:	dec00204 	addi	sp,sp,8
1000bb24:	f800283a 	ret

1000bb28 <sl_WlanProfileGet>:
    sizeof(_SlProfileParams_t)
};

#if _SL_INCLUDE_FUNC(sl_WlanProfileGet)
_i16 sl_WlanProfileGet(_i16 Index,_i8*  pName, _i16 *pNameLen, _u8 *pMacAddr, SlSecParams_t* pSecParams, SlGetSecParamsExt_t* pEntParams, _u32 *pPriority)
{
1000bb28:	deffcc04 	addi	sp,sp,-208
1000bb2c:	dfc03315 	stw	ra,204(sp)
1000bb30:	df003215 	stw	fp,200(sp)
1000bb34:	df003204 	addi	fp,sp,200
1000bb38:	2005883a 	mov	r2,r4
1000bb3c:	e17ffd15 	stw	r5,-12(fp)
1000bb40:	e1bffe15 	stw	r6,-8(fp)
1000bb44:	e1ffff15 	stw	r7,-4(fp)
1000bb48:	e0bffc0d 	sth	r2,-16(fp)
    _SlProfileGetMsg_u      Msg;
    Msg.Cmd.index = (_u8)Index;
1000bb4c:	e0bffc0b 	ldhu	r2,-16(fp)
1000bb50:	e0bfcf05 	stb	r2,-196(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlProfileGetCmdCtrl, &Msg, NULL));
1000bb54:	e0bfcf04 	addi	r2,fp,-196
1000bb58:	d1202a04 	addi	r4,gp,-32600
1000bb5c:	100b883a 	mov	r5,r2
1000bb60:	000d883a 	mov	r6,zero
1000bb64:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bb68:	e0bfce0d 	sth	r2,-200(fp)
1000bb6c:	e0bfce0f 	ldh	r2,-200(fp)
1000bb70:	10000126 	beq	r2,zero,1000bb78 <sl_WlanProfileGet+0x50>
1000bb74:	003fff06 	br	1000bb74 <__alt_data_end+0xf000bb74>

    pSecParams->Type = Msg.Rsp.Args.Common.SecType;
1000bb78:	e0bfcf03 	ldbu	r2,-196(fp)
1000bb7c:	1007883a 	mov	r3,r2
1000bb80:	e0800217 	ldw	r2,8(fp)
1000bb84:	10c00005 	stb	r3,0(r2)
    /* since password is not transferred in getprofile, password length should always be zero */
    pSecParams->KeyLen = Msg.Rsp.Args.Common.PasswordLen;
1000bb88:	e0ffd143 	ldbu	r3,-187(fp)
1000bb8c:	e0800217 	ldw	r2,8(fp)
1000bb90:	10c00205 	stb	r3,8(r2)
    if (NULL != pEntParams)
1000bb94:	e0800317 	ldw	r2,12(fp)
1000bb98:	10003526 	beq	r2,zero,1000bc70 <sl_WlanProfileGet+0x148>
    {
        pEntParams->UserLen = Msg.Rsp.Args.UserLen;
1000bb9c:	e0ffd1c3 	ldbu	r3,-185(fp)
1000bba0:	e0800317 	ldw	r2,12(fp)
1000bba4:	10c00805 	stb	r3,32(r2)
        /* copy user name */
        if (pEntParams->UserLen > 0)
1000bba8:	e0800317 	ldw	r2,12(fp)
1000bbac:	10800803 	ldbu	r2,32(r2)
1000bbb0:	10803fcc 	andi	r2,r2,255
1000bbb4:	10001126 	beq	r2,zero,1000bbfc <sl_WlanProfileGet+0xd4>
        {	 
            sl_Memcpy(pEntParams->User, EAP_PROFILE_USER_STRING(&Msg), pEntParams->UserLen);
1000bbb8:	e1000317 	ldw	r4,12(fp)
1000bbbc:	e0bfcf04 	addi	r2,fp,-196
1000bbc0:	10800043 	ldbu	r2,1(r2)
1000bbc4:	10c03fcc 	andi	r3,r2,255
1000bbc8:	e0bfcf04 	addi	r2,fp,-196
1000bbcc:	10800243 	ldbu	r2,9(r2)
1000bbd0:	10803fcc 	andi	r2,r2,255
1000bbd4:	1885883a 	add	r2,r3,r2
1000bbd8:	10800504 	addi	r2,r2,20
1000bbdc:	e0ffcf04 	addi	r3,fp,-196
1000bbe0:	1887883a 	add	r3,r3,r2
1000bbe4:	e0800317 	ldw	r2,12(fp)
1000bbe8:	10800803 	ldbu	r2,32(r2)
1000bbec:	10803fcc 	andi	r2,r2,255
1000bbf0:	180b883a 	mov	r5,r3
1000bbf4:	100d883a 	mov	r6,r2
1000bbf8:	000c7840 	call	1000c784 <memcpy>
        }
        pEntParams->AnonUserLen = Msg.Rsp.Args.AnonUserLen;
1000bbfc:	e0ffd203 	ldbu	r3,-184(fp)
1000bc00:	e0800317 	ldw	r2,12(fp)
1000bc04:	10c01045 	stb	r3,65(r2)
        /* copy anonymous user name */
        if (pEntParams->AnonUserLen > 0)
1000bc08:	e0800317 	ldw	r2,12(fp)
1000bc0c:	10801043 	ldbu	r2,65(r2)
1000bc10:	10803fcc 	andi	r2,r2,255
1000bc14:	10001626 	beq	r2,zero,1000bc70 <sl_WlanProfileGet+0x148>
        {
            sl_Memcpy(pEntParams->AnonUser, EAP_PROFILE_ANON_USER_STRING(&Msg), pEntParams->AnonUserLen);
1000bc18:	e0800317 	ldw	r2,12(fp)
1000bc1c:	11000844 	addi	r4,r2,33
1000bc20:	e0bfcf04 	addi	r2,fp,-196
1000bc24:	10800043 	ldbu	r2,1(r2)
1000bc28:	10c03fcc 	andi	r3,r2,255
1000bc2c:	e0bfcf04 	addi	r2,fp,-196
1000bc30:	10800243 	ldbu	r2,9(r2)
1000bc34:	10803fcc 	andi	r2,r2,255
1000bc38:	1887883a 	add	r3,r3,r2
1000bc3c:	e0bfcf04 	addi	r2,fp,-196
1000bc40:	108002c3 	ldbu	r2,11(r2)
1000bc44:	10803fcc 	andi	r2,r2,255
1000bc48:	1885883a 	add	r2,r3,r2
1000bc4c:	10800504 	addi	r2,r2,20
1000bc50:	e0ffcf04 	addi	r3,fp,-196
1000bc54:	1887883a 	add	r3,r3,r2
1000bc58:	e0800317 	ldw	r2,12(fp)
1000bc5c:	10801043 	ldbu	r2,65(r2)
1000bc60:	10803fcc 	andi	r2,r2,255
1000bc64:	180b883a 	mov	r5,r3
1000bc68:	100d883a 	mov	r6,r2
1000bc6c:	000c7840 	call	1000c784 <memcpy>
        }
    }

    *pNameLen  = Msg.Rsp.Args.Common.SsidLen;      
1000bc70:	e0bfcf43 	ldbu	r2,-195(fp)
1000bc74:	10c03fcc 	andi	r3,r2,255
1000bc78:	e0bffe17 	ldw	r2,-8(fp)
1000bc7c:	10c0000d 	sth	r3,0(r2)
    *pPriority = Msg.Rsp.Args.Common.Priority;       
1000bc80:	e0bfcf83 	ldbu	r2,-194(fp)
1000bc84:	10c03fcc 	andi	r3,r2,255
1000bc88:	e0800417 	ldw	r2,16(fp)
1000bc8c:	10c00015 	stw	r3,0(r2)

    if (NULL != Msg.Rsp.Args.Common.Bssid)
    {
        sl_Memcpy(pMacAddr, Msg.Rsp.Args.Common.Bssid, sizeof(Msg.Rsp.Args.Common.Bssid));
1000bc90:	e0bfff17 	ldw	r2,-4(fp)
1000bc94:	e0ffcfc3 	ldbu	r3,-193(fp)
1000bc98:	10c00005 	stb	r3,0(r2)
1000bc9c:	e0ffd003 	ldbu	r3,-192(fp)
1000bca0:	10c00045 	stb	r3,1(r2)
1000bca4:	e0ffd043 	ldbu	r3,-191(fp)
1000bca8:	10c00085 	stb	r3,2(r2)
1000bcac:	e0ffd083 	ldbu	r3,-190(fp)
1000bcb0:	10c000c5 	stb	r3,3(r2)
1000bcb4:	e0ffd0c3 	ldbu	r3,-189(fp)
1000bcb8:	10c00105 	stb	r3,4(r2)
1000bcbc:	e0ffd103 	ldbu	r3,-188(fp)
1000bcc0:	10c00145 	stb	r3,5(r2)
    }

    sl_Memcpy(pName, EAP_PROFILE_SSID_STRING(&Msg), *pNameLen);
1000bcc4:	e0bffe17 	ldw	r2,-8(fp)
1000bcc8:	1080000b 	ldhu	r2,0(r2)
1000bccc:	10ffffcc 	andi	r3,r2,65535
1000bcd0:	18e0001c 	xori	r3,r3,32768
1000bcd4:	18e00004 	addi	r3,r3,-32768
1000bcd8:	e0bfcf04 	addi	r2,fp,-196
1000bcdc:	10800504 	addi	r2,r2,20
1000bce0:	e13ffd17 	ldw	r4,-12(fp)
1000bce4:	100b883a 	mov	r5,r2
1000bce8:	180d883a 	mov	r6,r3
1000bcec:	000c7840 	call	1000c784 <memcpy>

    return (_i16)Msg.Rsp.Args.Common.SecType;
1000bcf0:	e0bfcf03 	ldbu	r2,-196(fp)
1000bcf4:	10803fcc 	andi	r2,r2,255
1000bcf8:	1080201c 	xori	r2,r2,128
1000bcfc:	10bfe004 	addi	r2,r2,-128

}
1000bd00:	e037883a 	mov	sp,fp
1000bd04:	dfc00117 	ldw	ra,4(sp)
1000bd08:	df000017 	ldw	fp,0(sp)
1000bd0c:	dec00204 	addi	sp,sp,8
1000bd10:	f800283a 	ret

1000bd14 <sl_WlanProfileDel>:
    sizeof(_BasicResponse_t)
};

#if _SL_INCLUDE_FUNC(sl_WlanProfileDel)
_i16 sl_WlanProfileDel(_i16 Index)
{
1000bd14:	defffb04 	addi	sp,sp,-20
1000bd18:	dfc00415 	stw	ra,16(sp)
1000bd1c:	df000315 	stw	fp,12(sp)
1000bd20:	df000304 	addi	fp,sp,12
1000bd24:	2005883a 	mov	r2,r4
1000bd28:	e0bfff0d 	sth	r2,-4(fp)
    _SlProfileDelMsg_u Msg;

    Msg.Cmd.index = (_u8)Index;
1000bd2c:	e0bfff0b 	ldhu	r2,-4(fp)
1000bd30:	e0bffd85 	stb	r2,-10(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlProfileDelCmdCtrl, &Msg, NULL));
1000bd34:	e0bffd84 	addi	r2,fp,-10
1000bd38:	d1202b04 	addi	r4,gp,-32596
1000bd3c:	100b883a 	mov	r5,r2
1000bd40:	000d883a 	mov	r6,zero
1000bd44:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bd48:	e0bffd0d 	sth	r2,-12(fp)
1000bd4c:	e0bffd0f 	ldh	r2,-12(fp)
1000bd50:	10000126 	beq	r2,zero,1000bd58 <sl_WlanProfileDel+0x44>
1000bd54:	003fff06 	br	1000bd54 <__alt_data_end+0xf000bd54>

    return (_i16)Msg.Rsp.status;
1000bd58:	e0bffd8b 	ldhu	r2,-10(fp)
}
1000bd5c:	e037883a 	mov	sp,fp
1000bd60:	dfc00117 	ldw	ra,4(sp)
1000bd64:	df000017 	ldw	fp,0(sp)
1000bd68:	dec00204 	addi	sp,sp,8
1000bd6c:	f800283a 	ret

1000bd70 <sl_WlanGetNetworkList>:
};


#if _SL_INCLUDE_FUNC(sl_WlanGetNetworkList)
_i16 sl_WlanGetNetworkList(_u8 Index, _u8 Count, Sl_WlanNetworkEntry_t *pEntries)
{
1000bd70:	defff504 	addi	sp,sp,-44
1000bd74:	dfc00a15 	stw	ra,40(sp)
1000bd78:	df000915 	stw	fp,36(sp)
1000bd7c:	df000904 	addi	fp,sp,36
1000bd80:	2007883a 	mov	r3,r4
1000bd84:	2805883a 	mov	r2,r5
1000bd88:	e1bfff15 	stw	r6,-4(fp)
1000bd8c:	e0fffd05 	stb	r3,-12(fp)
1000bd90:	e0bffe05 	stb	r2,-8(fp)
    _i16 retVal = 0;
1000bd94:	e03ff70d 	sth	zero,-36(fp)
    _SlWlanGetNetworkListMsg_u Msg;
    _SlCmdExt_t    CmdExt;

    if (Count == 0)
1000bd98:	e0bffe03 	ldbu	r2,-8(fp)
1000bd9c:	1000021e 	bne	r2,zero,1000bda8 <sl_WlanGetNetworkList+0x38>
    {
        return SL_EZEROLEN;
1000bda0:	00be0b84 	movi	r2,-2002
1000bda4:	00001806 	br	1000be08 <sl_WlanGetNetworkList+0x98>
    }
    CmdExt.TxPayloadLen = 0;
1000bda8:	e03ff90d 	sth	zero,-28(fp)
    CmdExt.RxPayloadLen = sizeof(Sl_WlanNetworkEntry_t)*(Count);
1000bdac:	e0bffe03 	ldbu	r2,-8(fp)
1000bdb0:	10800b24 	muli	r2,r2,44
1000bdb4:	e0bff98d 	sth	r2,-26(fp)
    CmdExt.pTxPayload = NULL;
1000bdb8:	e03ffb15 	stw	zero,-20(fp)
    CmdExt.pRxPayload = (_u8 *)pEntries; 
1000bdbc:	e0bfff17 	ldw	r2,-4(fp)
1000bdc0:	e0bffc15 	stw	r2,-16(fp)

    Msg.Cmd.index = Index;
1000bdc4:	e0bffd03 	ldbu	r2,-12(fp)
1000bdc8:	e0bff805 	stb	r2,-32(fp)
    Msg.Cmd.count = Count;
1000bdcc:	e0bffe03 	ldbu	r2,-8(fp)
1000bdd0:	e0bff845 	stb	r2,-31(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlWlanGetNetworkListCtrl, &Msg, &CmdExt));
1000bdd4:	e0fff804 	addi	r3,fp,-32
1000bdd8:	e0bff904 	addi	r2,fp,-28
1000bddc:	d1202c04 	addi	r4,gp,-32592
1000bde0:	180b883a 	mov	r5,r3
1000bde4:	100d883a 	mov	r6,r2
1000bde8:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bdec:	e0bff78d 	sth	r2,-34(fp)
1000bdf0:	e0bff78f 	ldh	r2,-34(fp)
1000bdf4:	10000126 	beq	r2,zero,1000bdfc <sl_WlanGetNetworkList+0x8c>
1000bdf8:	003fff06 	br	1000bdf8 <__alt_data_end+0xf000bdf8>
    retVal = Msg.Rsp.status;
1000bdfc:	e0bff80b 	ldhu	r2,-32(fp)
1000be00:	e0bff70d 	sth	r2,-36(fp)

    return (_i16)retVal;
1000be04:	e0bff70b 	ldhu	r2,-36(fp)
}
1000be08:	e037883a 	mov	sp,fp
1000be0c:	dfc00117 	ldw	ra,4(sp)
1000be10:	df000017 	ldw	fp,0(sp)
1000be14:	dec00204 	addi	sp,sp,8
1000be18:	f800283a 	ret

1000be1c <sl_WlanRxFilterAdd>:
    SlrxFilterFlags_t 					FilterFlags,
    const SlrxFilterRule_t* const 		Rule,
    const SlrxFilterTrigger_t* const 	Trigger,
    const SlrxFilterAction_t* const 	Action,
    SlrxFilterID_t*                     pFilterId)
{
1000be1c:	deffe604 	addi	sp,sp,-104
1000be20:	dfc01915 	stw	ra,100(sp)
1000be24:	df001815 	stw	fp,96(sp)
1000be28:	df001804 	addi	fp,sp,96
1000be2c:	2005883a 	mov	r2,r4
1000be30:	e17ffd45 	stb	r5,-11(fp)
1000be34:	e1bffe15 	stw	r6,-8(fp)
1000be38:	e1ffff15 	stw	r7,-4(fp)
1000be3c:	e0bffd05 	stb	r2,-12(fp)


    _SlrxFilterAddMsg_u Msg;
    Msg.Cmd.RuleType = RuleType;
1000be40:	e0bffd03 	ldbu	r2,-12(fp)
1000be44:	e0bfe905 	stb	r2,-92(fp)
    /* filterId is zero */
    Msg.Cmd.FilterId = 0;
1000be48:	e03fe985 	stb	zero,-90(fp)
    Msg.Cmd.FilterFlags = FilterFlags;
1000be4c:	e0bffd43 	ldbu	r2,-11(fp)
1000be50:	e0bfe945 	stb	r2,-91(fp)
    sl_Memcpy( &(Msg.Cmd.Rule), Rule, sizeof(SlrxFilterRule_t) );
1000be54:	e0bfe904 	addi	r2,fp,-92
1000be58:	10800104 	addi	r2,r2,4
1000be5c:	1009883a 	mov	r4,r2
1000be60:	e17ffe17 	ldw	r5,-8(fp)
1000be64:	01800e04 	movi	r6,56
1000be68:	000c7840 	call	1000c784 <memcpy>
    sl_Memcpy( &(Msg.Cmd.Trigger), Trigger, sizeof(SlrxFilterTrigger_t) );
1000be6c:	e0bfe904 	addi	r2,fp,-92
1000be70:	10800f04 	addi	r2,r2,60
1000be74:	1009883a 	mov	r4,r2
1000be78:	e17fff17 	ldw	r5,-4(fp)
1000be7c:	01800304 	movi	r6,12
1000be80:	000c7840 	call	1000c784 <memcpy>
    sl_Memcpy( &(Msg.Cmd.Action), Action, sizeof(SlrxFilterAction_t) );
1000be84:	e0800217 	ldw	r2,8(fp)
1000be88:	10c00003 	ldbu	r3,0(r2)
1000be8c:	e0fffb05 	stb	r3,-20(fp)
1000be90:	10c00043 	ldbu	r3,1(r2)
1000be94:	e0fffb45 	stb	r3,-19(fp)
1000be98:	10c00083 	ldbu	r3,2(r2)
1000be9c:	e0fffb85 	stb	r3,-18(fp)
1000bea0:	10c000c3 	ldbu	r3,3(r2)
1000bea4:	e0fffbc5 	stb	r3,-17(fp)
1000bea8:	10c00103 	ldbu	r3,4(r2)
1000beac:	e0fffc05 	stb	r3,-16(fp)
1000beb0:	10c00143 	ldbu	r3,5(r2)
1000beb4:	e0fffc45 	stb	r3,-15(fp)
1000beb8:	10c00183 	ldbu	r3,6(r2)
1000bebc:	e0fffc85 	stb	r3,-14(fp)
1000bec0:	108001c3 	ldbu	r2,7(r2)
1000bec4:	e0bffcc5 	stb	r2,-13(fp)
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlRxFilterAddtCmdCtrl, &Msg, NULL) );
1000bec8:	e0bfe904 	addi	r2,fp,-92
1000becc:	d1202d04 	addi	r4,gp,-32588
1000bed0:	100b883a 	mov	r5,r2
1000bed4:	000d883a 	mov	r6,zero
1000bed8:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bedc:	e0bfe80d 	sth	r2,-96(fp)
1000bee0:	e0bfe80f 	ldh	r2,-96(fp)
1000bee4:	10000126 	beq	r2,zero,1000beec <sl_WlanRxFilterAdd+0xd0>
1000bee8:	003fff06 	br	1000bee8 <__alt_data_end+0xf000bee8>
    *pFilterId = Msg.Rsp.FilterId;
1000beec:	e0ffe903 	ldbu	r3,-92(fp)
1000bef0:	e0800317 	ldw	r2,12(fp)
1000bef4:	10c00005 	stb	r3,0(r2)
    return (_i16)Msg.Rsp.Status;
1000bef8:	e0bfe943 	ldbu	r2,-91(fp)

}
1000befc:	e037883a 	mov	sp,fp
1000bf00:	dfc00117 	ldw	ra,4(sp)
1000bf04:	df000017 	ldw	fp,0(sp)
1000bf08:	dec00204 	addi	sp,sp,8
1000bf0c:	f800283a 	ret

1000bf10 <sl_WlanRxFilterSet>:
/*******************************************************************************/
#if _SL_INCLUDE_FUNC(sl_WlanRxFilterSet)
_i16 sl_WlanRxFilterSet(const SLrxFilterOperation_t RxFilterOperation,
    const _u8*  const pInputBuffer,
    _u16 InputbufferLength)
{
1000bf10:	defff504 	addi	sp,sp,-44
1000bf14:	dfc00a15 	stw	ra,40(sp)
1000bf18:	df000915 	stw	fp,36(sp)
1000bf1c:	df000904 	addi	fp,sp,36
1000bf20:	2007883a 	mov	r3,r4
1000bf24:	e17ffe15 	stw	r5,-8(fp)
1000bf28:	3005883a 	mov	r2,r6
1000bf2c:	e0fffd05 	stb	r3,-12(fp)
1000bf30:	e0bfff0d 	sth	r2,-4(fp)
    _SlRxFilterSetMsg_u   Msg;
    _SlCmdExt_t           CmdExt;

    CmdExt.TxPayloadLen = InputbufferLength;
1000bf34:	e0bfff0b 	ldhu	r2,-4(fp)
1000bf38:	e0bff90d 	sth	r2,-28(fp)
    CmdExt.pTxPayload   = (_u8 *)pInputBuffer;
1000bf3c:	e0bffe17 	ldw	r2,-8(fp)
1000bf40:	e0bffb15 	stw	r2,-20(fp)
    CmdExt.RxPayloadLen = 0;
1000bf44:	e03ff98d 	sth	zero,-26(fp)
    CmdExt.pRxPayload   = (_u8 *)NULL;
1000bf48:	e03ffc15 	stw	zero,-16(fp)

    Msg.Cmd.RxFilterOperation = RxFilterOperation;
1000bf4c:	e0bffd03 	ldbu	r2,-12(fp)
1000bf50:	e0bff805 	stb	r2,-32(fp)
    Msg.Cmd.InputBufferLength = InputbufferLength;
1000bf54:	e0bfff0b 	ldhu	r2,-4(fp)
1000bf58:	e0bff78d 	sth	r2,-34(fp)


    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlRxFilterSetCmdCtrl, &Msg, &CmdExt) );
1000bf5c:	e0fff784 	addi	r3,fp,-34
1000bf60:	e0bff904 	addi	r2,fp,-28
1000bf64:	d1202e04 	addi	r4,gp,-32584
1000bf68:	180b883a 	mov	r5,r3
1000bf6c:	100d883a 	mov	r6,r2
1000bf70:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000bf74:	e0bff70d 	sth	r2,-36(fp)
1000bf78:	e0bff70f 	ldh	r2,-36(fp)
1000bf7c:	10000126 	beq	r2,zero,1000bf84 <sl_WlanRxFilterSet+0x74>
1000bf80:	003fff06 	br	1000bf80 <__alt_data_end+0xf000bf80>


    return (_i16)Msg.Rsp.Status;
1000bf84:	e0bff783 	ldbu	r2,-34(fp)
1000bf88:	10803fcc 	andi	r2,r2,255
}
1000bf8c:	e037883a 	mov	sp,fp
1000bf90:	dfc00117 	ldw	ra,4(sp)
1000bf94:	df000017 	ldw	fp,0(sp)
1000bf98:	dec00204 	addi	sp,sp,8
1000bf9c:	f800283a 	ret

1000bfa0 <sl_WlanRxFilterGet>:
/******************************************************************************/
#if _SL_INCLUDE_FUNC(sl_WlanRxFilterGet)
_i16 sl_WlanRxFilterGet(const SLrxFilterOperation_t RxFilterOperation,
    _u8*  pOutputBuffer,
    _u16 OutputbufferLength)
{
1000bfa0:	defff504 	addi	sp,sp,-44
1000bfa4:	dfc00a15 	stw	ra,40(sp)
1000bfa8:	df000915 	stw	fp,36(sp)
1000bfac:	df000904 	addi	fp,sp,36
1000bfb0:	2007883a 	mov	r3,r4
1000bfb4:	e17ffe15 	stw	r5,-8(fp)
1000bfb8:	3005883a 	mov	r2,r6
1000bfbc:	e0fffd05 	stb	r3,-12(fp)
1000bfc0:	e0bfff0d 	sth	r2,-4(fp)
    _SlRxFilterGetMsg_u   Msg;
    _SlCmdExt_t           CmdExt;

    if (OutputbufferLength == 0)
1000bfc4:	e0bfff0b 	ldhu	r2,-4(fp)
1000bfc8:	1000021e 	bne	r2,zero,1000bfd4 <sl_WlanRxFilterGet+0x34>
    {
        return SL_EZEROLEN;
1000bfcc:	00be0b84 	movi	r2,-2002
1000bfd0:	00001e06 	br	1000c04c <sl_WlanRxFilterGet+0xac>
    }
    CmdExt.TxPayloadLen = 0;
1000bfd4:	e03ff90d 	sth	zero,-28(fp)
    CmdExt.pTxPayload   = NULL;
1000bfd8:	e03ffb15 	stw	zero,-20(fp)
    CmdExt.RxPayloadLen = OutputbufferLength;
1000bfdc:	e0bfff0b 	ldhu	r2,-4(fp)
1000bfe0:	e0bff98d 	sth	r2,-26(fp)
    CmdExt.pRxPayload   = (_u8 *)pOutputBuffer;
1000bfe4:	e0bffe17 	ldw	r2,-8(fp)
1000bfe8:	e0bffc15 	stw	r2,-16(fp)
    CmdExt.ActualRxPayloadLen = 0;
1000bfec:	e03ffa0d 	sth	zero,-24(fp)

    Msg.Cmd.RxFilterOperation = RxFilterOperation;
1000bff0:	e0bffd03 	ldbu	r2,-12(fp)
1000bff4:	e0bff805 	stb	r2,-32(fp)
    Msg.Cmd.OutputBufferLength = OutputbufferLength;
1000bff8:	e0bfff0b 	ldhu	r2,-4(fp)
1000bffc:	e0bff78d 	sth	r2,-34(fp)


    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlRxFilterGetCmdCtrl, &Msg, &CmdExt) );
1000c000:	e0fff784 	addi	r3,fp,-34
1000c004:	e0bff904 	addi	r2,fp,-28
1000c008:	d1202f04 	addi	r4,gp,-32580
1000c00c:	180b883a 	mov	r5,r3
1000c010:	100d883a 	mov	r6,r2
1000c014:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c018:	e0bff70d 	sth	r2,-36(fp)
1000c01c:	e0bff70f 	ldh	r2,-36(fp)
1000c020:	10000126 	beq	r2,zero,1000c028 <sl_WlanRxFilterGet+0x88>
1000c024:	003fff06 	br	1000c024 <__alt_data_end+0xf000c024>

    if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
1000c028:	e0fff98b 	ldhu	r3,-26(fp)
1000c02c:	e0bffa0b 	ldhu	r2,-24(fp)
1000c030:	18ffffcc 	andi	r3,r3,65535
1000c034:	10bfffcc 	andi	r2,r2,65535
1000c038:	1880022e 	bgeu	r3,r2,1000c044 <sl_WlanRxFilterGet+0xa4>
    {
        return SL_ESMALLBUF;
1000c03c:	00be0bc4 	movi	r2,-2001
1000c040:	00000206 	br	1000c04c <sl_WlanRxFilterGet+0xac>
    }

    return (_i16)Msg.Rsp.Status;
1000c044:	e0bff783 	ldbu	r2,-34(fp)
1000c048:	10803fcc 	andi	r2,r2,255
}
1000c04c:	e037883a 	mov	sp,fp
1000c050:	dfc00117 	ldw	ra,4(sp)
1000c054:	df000017 	ldw	fp,0(sp)
1000c058:	dec00204 	addi	sp,sp,8
1000c05c:	f800283a 	ret

1000c060 <sl_WlanRxStatStart>:
/*******************************************************************************/
/*             sl_WlanRxStatStart                                              */
/*******************************************************************************/
#if _SL_INCLUDE_FUNC(sl_WlanRxStatStart)
_i16 sl_WlanRxStatStart(void)
{
1000c060:	defffe04 	addi	sp,sp,-8
1000c064:	dfc00115 	stw	ra,4(sp)
1000c068:	df000015 	stw	fp,0(sp)
1000c06c:	d839883a 	mov	fp,sp
    return _SlDrvBasicCmd(SL_OPCODE_WLAN_STARTRXSTATCOMMAND);
1000c070:	01232b14 	movui	r4,36012
1000c074:	00067bc0 	call	100067bc <_SlDrvBasicCmd>
}
1000c078:	e037883a 	mov	sp,fp
1000c07c:	dfc00117 	ldw	ra,4(sp)
1000c080:	df000017 	ldw	fp,0(sp)
1000c084:	dec00204 	addi	sp,sp,8
1000c088:	f800283a 	ret

1000c08c <sl_WlanRxStatStop>:
#endif

#if _SL_INCLUDE_FUNC(sl_WlanRxStatStop)
_i16 sl_WlanRxStatStop(void)
{
1000c08c:	defffe04 	addi	sp,sp,-8
1000c090:	dfc00115 	stw	ra,4(sp)
1000c094:	df000015 	stw	fp,0(sp)
1000c098:	d839883a 	mov	fp,sp
    return _SlDrvBasicCmd(SL_OPCODE_WLAN_STOPRXSTATCOMMAND);
1000c09c:	01232b54 	movui	r4,36013
1000c0a0:	00067bc0 	call	100067bc <_SlDrvBasicCmd>
}
1000c0a4:	e037883a 	mov	sp,fp
1000c0a8:	dfc00117 	ldw	ra,4(sp)
1000c0ac:	df000017 	ldw	fp,0(sp)
1000c0b0:	dec00204 	addi	sp,sp,8
1000c0b4:	f800283a 	ret

1000c0b8 <sl_WlanRxStatGet>:
#endif

#if _SL_INCLUDE_FUNC(sl_WlanRxStatGet)
_i16 sl_WlanRxStatGet(SlGetRxStatResponse_t *pRxStat,_u32 Flags)
{
1000c0b8:	defffa04 	addi	sp,sp,-24
1000c0bc:	dfc00515 	stw	ra,20(sp)
1000c0c0:	df000415 	stw	fp,16(sp)
1000c0c4:	df000404 	addi	fp,sp,16
1000c0c8:	e13ffe15 	stw	r4,-8(fp)
1000c0cc:	e17fff15 	stw	r5,-4(fp)
    _SlCmdCtrl_t            CmdCtrl = {SL_OPCODE_WLAN_GETRXSTATCOMMAND, 0, sizeof(SlGetRxStatResponse_t)};
1000c0d0:	00a32bc4 	movi	r2,-29521
1000c0d4:	e0bffc8d 	sth	r2,-14(fp)
1000c0d8:	e03ffd05 	stb	zero,-12(fp)
1000c0dc:	00801304 	movi	r2,76
1000c0e0:	e0bffd45 	stb	r2,-11(fp)
    sl_Memset(pRxStat,0,sizeof(SlGetRxStatResponse_t));
1000c0e4:	e13ffe17 	ldw	r4,-8(fp)
1000c0e8:	000b883a 	mov	r5,zero
1000c0ec:	01801304 	movi	r6,76
1000c0f0:	000c8bc0 	call	1000c8bc <memset>
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&CmdCtrl, pRxStat, NULL)); 
1000c0f4:	e0bffc84 	addi	r2,fp,-14
1000c0f8:	1009883a 	mov	r4,r2
1000c0fc:	e17ffe17 	ldw	r5,-8(fp)
1000c100:	000d883a 	mov	r6,zero
1000c104:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c108:	e0bffc0d 	sth	r2,-16(fp)
1000c10c:	e0bffc0f 	ldh	r2,-16(fp)
1000c110:	10000126 	beq	r2,zero,1000c118 <sl_WlanRxStatGet+0x60>
1000c114:	003fff06 	br	1000c114 <__alt_data_end+0xf000c114>

    return 0;
1000c118:	0005883a 	mov	r2,zero
}
1000c11c:	e037883a 	mov	sp,fp
1000c120:	dfc00117 	ldw	ra,4(sp)
1000c124:	df000017 	ldw	fp,0(sp)
1000c128:	dec00204 	addi	sp,sp,8
1000c12c:	f800283a 	ret

1000c130 <sl_WlanSmartConfigStop>:
/******************************************************************************/
/*   sl_WlanSmartConfigStop                                                   */
/******************************************************************************/
#if _SL_INCLUDE_FUNC(sl_WlanSmartConfigStop)
_i16 sl_WlanSmartConfigStop(void)
{
1000c130:	defffe04 	addi	sp,sp,-8
1000c134:	dfc00115 	stw	ra,4(sp)
1000c138:	df000015 	stw	fp,0(sp)
1000c13c:	d839883a 	mov	fp,sp
    return _SlDrvBasicCmd(SL_OPCODE_WLAN_SMART_CONFIG_STOP_COMMAND);
1000c140:	01232cd4 	movui	r4,36019
1000c144:	00067bc0 	call	100067bc <_SlDrvBasicCmd>
}
1000c148:	e037883a 	mov	sp,fp
1000c14c:	dfc00117 	ldw	ra,4(sp)
1000c150:	df000017 	ldw	fp,0(sp)
1000c154:	dec00204 	addi	sp,sp,8
1000c158:	f800283a 	ret

1000c15c <sl_WlanSmartConfigStart>:
    const _u8    group1KeyLen,
    const _u8    group2KeyLen,
    const _u8*    pPublicKey,
    const _u8*    pGroup1Key,
    const _u8*    pGroup2Key)
{
1000c15c:	deffea04 	addi	sp,sp,-88
1000c160:	dfc01515 	stw	ra,84(sp)
1000c164:	df001415 	stw	fp,80(sp)
1000c168:	df001404 	addi	fp,sp,80
1000c16c:	e13ffb15 	stw	r4,-20(fp)
1000c170:	3009883a 	mov	r4,r6
1000c174:	3807883a 	mov	r3,r7
1000c178:	e0800217 	ldw	r2,8(fp)
1000c17c:	e17ffc05 	stb	r5,-16(fp)
1000c180:	e13ffd05 	stb	r4,-12(fp)
1000c184:	e0fffe05 	stb	r3,-8(fp)
1000c188:	e0bfff05 	stb	r2,-4(fp)
    _SlSmartConfigStartMsg_u      Msg;

    Msg.Cmd.Args.groupIdBitmask = (_u8)groupIdBitmask;
1000c18c:	e0bffb17 	ldw	r2,-20(fp)
1000c190:	10803fcc 	andi	r2,r2,255
1000c194:	e0bfed15 	stw	r2,-76(fp)
    Msg.Cmd.Args.cipher         = (_u8)cipher;
1000c198:	e0bffc03 	ldbu	r2,-16(fp)
1000c19c:	e0bfee05 	stb	r2,-72(fp)
    Msg.Cmd.Args.publicKeyLen   = (_u8)publicKeyLen;
1000c1a0:	e0bffd03 	ldbu	r2,-12(fp)
1000c1a4:	e0bfee45 	stb	r2,-71(fp)
    Msg.Cmd.Args.group1KeyLen   = (_u8)group1KeyLen;
1000c1a8:	e0bffe03 	ldbu	r2,-8(fp)
1000c1ac:	e0bfee85 	stb	r2,-70(fp)
    Msg.Cmd.Args.group2KeyLen   = (_u8)group2KeyLen;
1000c1b0:	e0bfff03 	ldbu	r2,-4(fp)
1000c1b4:	e0bfeec5 	stb	r2,-69(fp)

    /* copy keys (if exist) after command (one after another) */
    sl_Memcpy(SMART_CONFIG_START_PUBLIC_KEY_STRING(&Msg), pPublicKey, publicKeyLen);
1000c1b8:	e0fffd03 	ldbu	r3,-12(fp)
1000c1bc:	e0bfed04 	addi	r2,fp,-76
1000c1c0:	10800204 	addi	r2,r2,8
1000c1c4:	1009883a 	mov	r4,r2
1000c1c8:	e1400317 	ldw	r5,12(fp)
1000c1cc:	180d883a 	mov	r6,r3
1000c1d0:	000c7840 	call	1000c784 <memcpy>
    sl_Memcpy(SMART_CONFIG_START_GROUP1_KEY_STRING(&Msg), pGroup1Key, group1KeyLen);
1000c1d4:	e0bfed04 	addi	r2,fp,-76
1000c1d8:	10800143 	ldbu	r2,5(r2)
1000c1dc:	10803fcc 	andi	r2,r2,255
1000c1e0:	10800204 	addi	r2,r2,8
1000c1e4:	e0ffed04 	addi	r3,fp,-76
1000c1e8:	1887883a 	add	r3,r3,r2
1000c1ec:	e0bffe03 	ldbu	r2,-8(fp)
1000c1f0:	1809883a 	mov	r4,r3
1000c1f4:	e1400417 	ldw	r5,16(fp)
1000c1f8:	100d883a 	mov	r6,r2
1000c1fc:	000c7840 	call	1000c784 <memcpy>
    sl_Memcpy(SMART_CONFIG_START_GROUP2_KEY_STRING(&Msg), pGroup2Key, group2KeyLen);
1000c200:	e0bfed04 	addi	r2,fp,-76
1000c204:	10800143 	ldbu	r2,5(r2)
1000c208:	10c03fcc 	andi	r3,r2,255
1000c20c:	e0bfed04 	addi	r2,fp,-76
1000c210:	10800183 	ldbu	r2,6(r2)
1000c214:	10803fcc 	andi	r2,r2,255
1000c218:	1885883a 	add	r2,r3,r2
1000c21c:	10800204 	addi	r2,r2,8
1000c220:	e0ffed04 	addi	r3,fp,-76
1000c224:	1887883a 	add	r3,r3,r2
1000c228:	e0bfff03 	ldbu	r2,-4(fp)
1000c22c:	1809883a 	mov	r4,r3
1000c230:	e1400517 	ldw	r5,20(fp)
1000c234:	100d883a 	mov	r6,r2
1000c238:	000c7840 	call	1000c784 <memcpy>

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlSmartConfigStartCmdCtrl , &Msg, NULL));
1000c23c:	e0bfed04 	addi	r2,fp,-76
1000c240:	d1203004 	addi	r4,gp,-32576
1000c244:	100b883a 	mov	r5,r2
1000c248:	000d883a 	mov	r6,zero
1000c24c:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c250:	e0bfec0d 	sth	r2,-80(fp)
1000c254:	e0bfec0f 	ldh	r2,-80(fp)
1000c258:	10000126 	beq	r2,zero,1000c260 <sl_WlanSmartConfigStart+0x104>
1000c25c:	003fff06 	br	1000c25c <__alt_data_end+0xf000c25c>

    return (_i16)Msg.Rsp.status;
1000c260:	e0bfed0b 	ldhu	r2,-76(fp)


}
1000c264:	e037883a 	mov	sp,fp
1000c268:	dfc00117 	ldw	ra,4(sp)
1000c26c:	df000017 	ldw	fp,0(sp)
1000c270:	dec00204 	addi	sp,sp,8
1000c274:	f800283a 	ret

1000c278 <sl_WlanSetMode>:
WLAN_SET_AP_MODE    =   2
WLAN_SET_P2P_MODE   =   3  */

#if _SL_INCLUDE_FUNC(sl_WlanSetMode)
_i16 sl_WlanSetMode(const _u8    mode)
{
1000c278:	defffb04 	addi	sp,sp,-20
1000c27c:	dfc00415 	stw	ra,16(sp)
1000c280:	df000315 	stw	fp,12(sp)
1000c284:	df000304 	addi	fp,sp,12
1000c288:	2005883a 	mov	r2,r4
1000c28c:	e0bfff05 	stb	r2,-4(fp)
    _SlwlanSetModeMsg_u      Msg;

    Msg.Cmd.mode  = mode;
1000c290:	e0bfff03 	ldbu	r2,-4(fp)
1000c294:	e0bffd85 	stb	r2,-10(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlWlanSetModeCmdCtrl , &Msg, NULL));
1000c298:	e0bffd84 	addi	r2,fp,-10
1000c29c:	d1203104 	addi	r4,gp,-32572
1000c2a0:	100b883a 	mov	r5,r2
1000c2a4:	000d883a 	mov	r6,zero
1000c2a8:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c2ac:	e0bffd0d 	sth	r2,-12(fp)
1000c2b0:	e0bffd0f 	ldh	r2,-12(fp)
1000c2b4:	10000126 	beq	r2,zero,1000c2bc <sl_WlanSetMode+0x44>
1000c2b8:	003fff06 	br	1000c2b8 <__alt_data_end+0xf000c2b8>

    return (_i16)Msg.Rsp.status;
1000c2bc:	e0bffd8b 	ldhu	r2,-10(fp)

}
1000c2c0:	e037883a 	mov	sp,fp
1000c2c4:	dfc00117 	ldw	ra,4(sp)
1000c2c8:	df000017 	ldw	fp,0(sp)
1000c2cc:	dec00204 	addi	sp,sp,8
1000c2d0:	f800283a 	ret

1000c2d4 <sl_WlanSet>:
};


#if _SL_INCLUDE_FUNC(sl_WlanSet)
_i16 sl_WlanSet(_u16 ConfigId ,_u16 ConfigOpt,_u16 ConfigLen, _u8 *pValues)
{
1000c2d4:	defff304 	addi	sp,sp,-52
1000c2d8:	dfc00c15 	stw	ra,48(sp)
1000c2dc:	df000b15 	stw	fp,44(sp)
1000c2e0:	df000b04 	addi	fp,sp,44
1000c2e4:	2807883a 	mov	r3,r5
1000c2e8:	3005883a 	mov	r2,r6
1000c2ec:	e1ffff15 	stw	r7,-4(fp)
1000c2f0:	e13ffc0d 	sth	r4,-16(fp)
1000c2f4:	e0fffd0d 	sth	r3,-12(fp)
1000c2f8:	e0bffe0d 	sth	r2,-8(fp)
    _SlWlanCfgSetMsg_u         Msg;
    _SlCmdExt_t                CmdExt;

    CmdExt.TxPayloadLen = (ConfigLen+3) & (~3);
1000c2fc:	e0bffe0b 	ldhu	r2,-8(fp)
1000c300:	108000c4 	addi	r2,r2,3
1000c304:	1007883a 	mov	r3,r2
1000c308:	00bfff04 	movi	r2,-4
1000c30c:	1884703a 	and	r2,r3,r2
1000c310:	e0bff80d 	sth	r2,-32(fp)
    CmdExt.RxPayloadLen = 0;
1000c314:	e03ff88d 	sth	zero,-30(fp)
    CmdExt.pTxPayload = (_u8 *)pValues;
1000c318:	e0bfff17 	ldw	r2,-4(fp)
1000c31c:	e0bffa15 	stw	r2,-24(fp)
    CmdExt.pRxPayload = NULL;
1000c320:	e03ffb15 	stw	zero,-20(fp)


    Msg.Cmd.ConfigId    = ConfigId;
1000c324:	e0bffc0b 	ldhu	r2,-16(fp)
1000c328:	e0bff60d 	sth	r2,-40(fp)
    Msg.Cmd.ConfigLen   = ConfigLen;
1000c32c:	e0bffe0b 	ldhu	r2,-8(fp)
1000c330:	e0bff70d 	sth	r2,-36(fp)
    Msg.Cmd.ConfigOpt   = ConfigOpt;
1000c334:	e0bffd0b 	ldhu	r2,-12(fp)
1000c338:	e0bff68d 	sth	r2,-38(fp)

    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlWlanCfgSetCmdCtrl, &Msg, &CmdExt));
1000c33c:	e0fff584 	addi	r3,fp,-42
1000c340:	e0bff804 	addi	r2,fp,-32
1000c344:	d1203204 	addi	r4,gp,-32568
1000c348:	180b883a 	mov	r5,r3
1000c34c:	100d883a 	mov	r6,r2
1000c350:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c354:	e0bff50d 	sth	r2,-44(fp)
1000c358:	e0bff50f 	ldh	r2,-44(fp)
1000c35c:	10000126 	beq	r2,zero,1000c364 <sl_WlanSet+0x90>
1000c360:	003fff06 	br	1000c360 <__alt_data_end+0xf000c360>

    return (_i16)Msg.Rsp.status;
1000c364:	e0bff58b 	ldhu	r2,-42(fp)
}
1000c368:	e037883a 	mov	sp,fp
1000c36c:	dfc00117 	ldw	ra,4(sp)
1000c370:	df000017 	ldw	fp,0(sp)
1000c374:	dec00204 	addi	sp,sp,8
1000c378:	f800283a 	ret

1000c37c <sl_WlanGet>:
    sizeof(_WlanCfgSetGet_t)
};

#if _SL_INCLUDE_FUNC(sl_WlanGet)
_i16 sl_WlanGet(_u16 ConfigId, _u16 *pConfigOpt,_u16 *pConfigLen, _u8 *pValues)
{
1000c37c:	defff304 	addi	sp,sp,-52
1000c380:	dfc00c15 	stw	ra,48(sp)
1000c384:	df000b15 	stw	fp,44(sp)
1000c388:	df000b04 	addi	fp,sp,44
1000c38c:	2005883a 	mov	r2,r4
1000c390:	e17ffd15 	stw	r5,-12(fp)
1000c394:	e1bffe15 	stw	r6,-8(fp)
1000c398:	e1ffff15 	stw	r7,-4(fp)
1000c39c:	e0bffc0d 	sth	r2,-16(fp)
    _SlWlanCfgMsgGet_u        Msg;
    _SlCmdExt_t               CmdExt;

    if (*pConfigLen == 0)
1000c3a0:	e0bffe17 	ldw	r2,-8(fp)
1000c3a4:	1080000b 	ldhu	r2,0(r2)
1000c3a8:	10bfffcc 	andi	r2,r2,65535
1000c3ac:	1000021e 	bne	r2,zero,1000c3b8 <sl_WlanGet+0x3c>
    {
        return SL_EZEROLEN;
1000c3b0:	00be0b84 	movi	r2,-2002
1000c3b4:	00002f06 	br	1000c474 <sl_WlanGet+0xf8>
    }
    CmdExt.TxPayloadLen = 0;
1000c3b8:	e03ff80d 	sth	zero,-32(fp)
    CmdExt.RxPayloadLen = *pConfigLen;
1000c3bc:	e0bffe17 	ldw	r2,-8(fp)
1000c3c0:	1080000b 	ldhu	r2,0(r2)
1000c3c4:	e0bff88d 	sth	r2,-30(fp)
    CmdExt.pTxPayload = NULL;
1000c3c8:	e03ffa15 	stw	zero,-24(fp)
    CmdExt.pRxPayload = (_u8 *)pValues;
1000c3cc:	e0bfff17 	ldw	r2,-4(fp)
1000c3d0:	e0bffb15 	stw	r2,-20(fp)
    CmdExt.ActualRxPayloadLen = 0;
1000c3d4:	e03ff90d 	sth	zero,-28(fp)

    Msg.Cmd.ConfigId    = ConfigId;
1000c3d8:	e0bffc0b 	ldhu	r2,-16(fp)
1000c3dc:	e0bff60d 	sth	r2,-40(fp)
    if( pConfigOpt )
1000c3e0:	e0bffd17 	ldw	r2,-12(fp)
1000c3e4:	10000326 	beq	r2,zero,1000c3f4 <sl_WlanGet+0x78>
    {
        Msg.Cmd.ConfigOpt   = (_u16)*pConfigOpt;
1000c3e8:	e0bffd17 	ldw	r2,-12(fp)
1000c3ec:	1080000b 	ldhu	r2,0(r2)
1000c3f0:	e0bff68d 	sth	r2,-38(fp)
    }
    VERIFY_RET_OK(_SlDrvCmdOp((_SlCmdCtrl_t *)&_SlWlanCfgGetCmdCtrl, &Msg, &CmdExt));
1000c3f4:	e0fff584 	addi	r3,fp,-42
1000c3f8:	e0bff804 	addi	r2,fp,-32
1000c3fc:	d1203304 	addi	r4,gp,-32564
1000c400:	180b883a 	mov	r5,r3
1000c404:	100d883a 	mov	r6,r2
1000c408:	00040cc0 	call	100040cc <_SlDrvCmdOp>
1000c40c:	e0bff50d 	sth	r2,-44(fp)
1000c410:	e0bff50f 	ldh	r2,-44(fp)
1000c414:	10000126 	beq	r2,zero,1000c41c <sl_WlanGet+0xa0>
1000c418:	003fff06 	br	1000c418 <__alt_data_end+0xf000c418>

    if( pConfigOpt )
1000c41c:	e0bffd17 	ldw	r2,-12(fp)
1000c420:	10000426 	beq	r2,zero,1000c434 <sl_WlanGet+0xb8>
    {
        *pConfigOpt = (_u8)Msg.Rsp.ConfigOpt;
1000c424:	e0bff68b 	ldhu	r2,-38(fp)
1000c428:	10c03fcc 	andi	r3,r2,255
1000c42c:	e0bffd17 	ldw	r2,-12(fp)
1000c430:	10c0000d 	sth	r3,0(r2)
    }
    if (CmdExt.RxPayloadLen < CmdExt.ActualRxPayloadLen) 
1000c434:	e0fff88b 	ldhu	r3,-30(fp)
1000c438:	e0bff90b 	ldhu	r2,-28(fp)
1000c43c:	18ffffcc 	andi	r3,r3,65535
1000c440:	10bfffcc 	andi	r2,r2,65535
1000c444:	1880062e 	bgeu	r3,r2,1000c460 <sl_WlanGet+0xe4>
    {
        *pConfigLen = (_u8)CmdExt.RxPayloadLen;
1000c448:	e0bff88b 	ldhu	r2,-30(fp)
1000c44c:	10c03fcc 	andi	r3,r2,255
1000c450:	e0bffe17 	ldw	r2,-8(fp)
1000c454:	10c0000d 	sth	r3,0(r2)
        return SL_ESMALLBUF;
1000c458:	00be0bc4 	movi	r2,-2001
1000c45c:	00000506 	br	1000c474 <sl_WlanGet+0xf8>
    }
    else
    {
        *pConfigLen = (_u8)CmdExt.ActualRxPayloadLen;
1000c460:	e0bff90b 	ldhu	r2,-28(fp)
1000c464:	10c03fcc 	andi	r3,r2,255
1000c468:	e0bffe17 	ldw	r2,-8(fp)
1000c46c:	10c0000d 	sth	r3,0(r2)
    }


    return (_i16)Msg.Rsp.Status;
1000c470:	e0bff58b 	ldhu	r2,-42(fp)
}
1000c474:	e037883a 	mov	sp,fp
1000c478:	dfc00117 	ldw	ra,4(sp)
1000c47c:	df000017 	ldw	fp,0(sp)
1000c480:	dec00204 	addi	sp,sp,8
1000c484:	f800283a 	ret

1000c488 <spiSL_Open>:
 *   None.
 *
 * NOTES:
 ******************************************************************************/
spiSL_Handle spiSL_Open  (char *ifName, unsigned long flags)
{
1000c488:	defffd04 	addi	sp,sp,-12
1000c48c:	df000215 	stw	fp,8(sp)
1000c490:	df000204 	addi	fp,sp,8
1000c494:	e13ffe15 	stw	r4,-8(fp)
1000c498:	e17fff15 	stw	r5,-4(fp)
	// nHib release CC3100_CTRL_PIO_BASE
	//IOWR(CC3100_CTRL_PIO_BASE, 0, 1);

	return NONOS_RET_OK;
1000c49c:	00800044 	movi	r2,1
}
1000c4a0:	e037883a 	mov	sp,fp
1000c4a4:	df000017 	ldw	fp,0(sp)
1000c4a8:	dec00104 	addi	sp,sp,4
1000c4ac:	f800283a 	ret

1000c4b0 <spiSL_Close>:
 *   None.
 *
 * NOTES:
 ******************************************************************************/
int spiSL_Close (spiSL_Handle hdl)
{
1000c4b0:	defffe04 	addi	sp,sp,-8
1000c4b4:	df000115 	stw	fp,4(sp)
1000c4b8:	df000104 	addi	fp,sp,4
1000c4bc:	e13fff15 	stw	r4,-4(fp)

	return NONOS_RET_OK;
1000c4c0:	00800044 	movi	r2,1
}
1000c4c4:	e037883a 	mov	sp,fp
1000c4c8:	df000017 	ldw	fp,0(sp)
1000c4cc:	dec00104 	addi	sp,sp,4
1000c4d0:	f800283a 	ret

1000c4d4 <spiSL_Read>:
 *   None.
 *
 * NOTES:
 ******************************************************************************/
int spiSL_Read  (spiSL_Handle hdl, unsigned char *pBuff, int len)
{
1000c4d4:	defffa04 	addi	sp,sp,-24
1000c4d8:	dfc00515 	stw	ra,20(sp)
1000c4dc:	df000415 	stw	fp,16(sp)
1000c4e0:	df000404 	addi	fp,sp,16
1000c4e4:	e13ffd15 	stw	r4,-12(fp)
1000c4e8:	e17ffe15 	stw	r5,-8(fp)
1000c4ec:	e1bfff15 	stw	r6,-4(fp)
	spiRead(SPI_DEVICE_CC3100, pBuff, 0, len);
1000c4f0:	e0bfff17 	ldw	r2,-4(fp)
1000c4f4:	d8800015 	stw	r2,0(sp)
1000c4f8:	0009883a 	mov	r4,zero
1000c4fc:	e17ffe17 	ldw	r5,-8(fp)
1000c500:	000d883a 	mov	r6,zero
1000c504:	e1fffe17 	ldw	r7,-8(fp)
1000c508:	0000c980 	call	10000c98 <spiTransfer>
	return len;
1000c50c:	e0bfff17 	ldw	r2,-4(fp)

	//return NONOS_RET_OK;
}
1000c510:	e037883a 	mov	sp,fp
1000c514:	dfc00117 	ldw	ra,4(sp)
1000c518:	df000017 	ldw	fp,0(sp)
1000c51c:	dec00204 	addi	sp,sp,8
1000c520:	f800283a 	ret

1000c524 <spiSL_Write>:
 *   None.
 *
 * NOTES:
 ******************************************************************************/
int spiSL_Write (spiSL_Handle hdl, unsigned char *pBuff, int len)
{
1000c524:	defff904 	addi	sp,sp,-28
1000c528:	dfc00615 	stw	ra,24(sp)
1000c52c:	df000515 	stw	fp,20(sp)
1000c530:	df000504 	addi	fp,sp,20
1000c534:	e13ffd15 	stw	r4,-12(fp)
1000c538:	e17ffe15 	stw	r5,-8(fp)
1000c53c:	e1bfff15 	stw	r6,-4(fp)
	int iteration = len;
1000c540:	e0bfff17 	ldw	r2,-4(fp)
1000c544:	e0bffc15 	stw	r2,-16(fp)


	while (iteration > 0)
1000c548:	00001606 	br	1000c5a4 <spiSL_Write+0x80>
	{
		//spiWrite(SPI_DEVICE_CC3100, pBuff, len);
		if (iteration > 4)
1000c54c:	e0bffc17 	ldw	r2,-16(fp)
1000c550:	10800150 	cmplti	r2,r2,5
1000c554:	10000a1e 	bne	r2,zero,1000c580 <spiSL_Write+0x5c>
		{
			spiWrite(SPI_DEVICE_CC3100, pBuff, 4);
1000c558:	d8000015 	stw	zero,0(sp)
1000c55c:	0009883a 	mov	r4,zero
1000c560:	e17ffe17 	ldw	r5,-8(fp)
1000c564:	01800104 	movi	r6,4
1000c568:	000f883a 	mov	r7,zero
1000c56c:	0000c980 	call	10000c98 <spiTransfer>
			pBuff += 4;
1000c570:	e0bffe17 	ldw	r2,-8(fp)
1000c574:	10800104 	addi	r2,r2,4
1000c578:	e0bffe15 	stw	r2,-8(fp)
1000c57c:	00000606 	br	1000c598 <spiSL_Write+0x74>
		}
		else
		{
			spiWrite(SPI_DEVICE_CC3100, pBuff, iteration);
1000c580:	d8000015 	stw	zero,0(sp)
1000c584:	0009883a 	mov	r4,zero
1000c588:	e17ffe17 	ldw	r5,-8(fp)
1000c58c:	e1bffc17 	ldw	r6,-16(fp)
1000c590:	000f883a 	mov	r7,zero
1000c594:	0000c980 	call	10000c98 <spiTransfer>
		}

		iteration -= 4;
1000c598:	e0bffc17 	ldw	r2,-16(fp)
1000c59c:	10bfff04 	addi	r2,r2,-4
1000c5a0:	e0bffc15 	stw	r2,-16(fp)
int spiSL_Write (spiSL_Handle hdl, unsigned char *pBuff, int len)
{
	int iteration = len;


	while (iteration > 0)
1000c5a4:	e0bffc17 	ldw	r2,-16(fp)
1000c5a8:	00bfe816 	blt	zero,r2,1000c54c <__alt_data_end+0xf000c54c>
		}

		iteration -= 4;
	}

	return len;
1000c5ac:	e0bfff17 	ldw	r2,-4(fp)
	//return NONOS_RET_OK;
}
1000c5b0:	e037883a 	mov	sp,fp
1000c5b4:	dfc00117 	ldw	ra,4(sp)
1000c5b8:	df000017 	ldw	fp,0(sp)
1000c5bc:	dec00204 	addi	sp,sp,8
1000c5c0:	f800283a 	ret

1000c5c4 <udivmodsi4>:
1000c5c4:	2900182e 	bgeu	r5,r4,1000c628 <udivmodsi4+0x64>
1000c5c8:	28001716 	blt	r5,zero,1000c628 <udivmodsi4+0x64>
1000c5cc:	00800804 	movi	r2,32
1000c5d0:	00c00044 	movi	r3,1
1000c5d4:	00000206 	br	1000c5e0 <udivmodsi4+0x1c>
1000c5d8:	10001126 	beq	r2,zero,1000c620 <udivmodsi4+0x5c>
1000c5dc:	28000516 	blt	r5,zero,1000c5f4 <udivmodsi4+0x30>
1000c5e0:	294b883a 	add	r5,r5,r5
1000c5e4:	10bfffc4 	addi	r2,r2,-1
1000c5e8:	18c7883a 	add	r3,r3,r3
1000c5ec:	293ffa36 	bltu	r5,r4,1000c5d8 <__alt_data_end+0xf000c5d8>
1000c5f0:	18000b26 	beq	r3,zero,1000c620 <udivmodsi4+0x5c>
1000c5f4:	0005883a 	mov	r2,zero
1000c5f8:	21400236 	bltu	r4,r5,1000c604 <udivmodsi4+0x40>
1000c5fc:	2149c83a 	sub	r4,r4,r5
1000c600:	10c4b03a 	or	r2,r2,r3
1000c604:	1806d07a 	srli	r3,r3,1
1000c608:	280ad07a 	srli	r5,r5,1
1000c60c:	183ffa1e 	bne	r3,zero,1000c5f8 <__alt_data_end+0xf000c5f8>
1000c610:	3000011e 	bne	r6,zero,1000c618 <udivmodsi4+0x54>
1000c614:	f800283a 	ret
1000c618:	2005883a 	mov	r2,r4
1000c61c:	f800283a 	ret
1000c620:	0005883a 	mov	r2,zero
1000c624:	003ffa06 	br	1000c610 <__alt_data_end+0xf000c610>
1000c628:	00c00044 	movi	r3,1
1000c62c:	003ff106 	br	1000c5f4 <__alt_data_end+0xf000c5f4>

1000c630 <__divsi3>:
1000c630:	defffe04 	addi	sp,sp,-8
1000c634:	dfc00115 	stw	ra,4(sp)
1000c638:	dc000015 	stw	r16,0(sp)
1000c63c:	20000b16 	blt	r4,zero,1000c66c <__divsi3+0x3c>
1000c640:	0021883a 	mov	r16,zero
1000c644:	28000c16 	blt	r5,zero,1000c678 <__divsi3+0x48>
1000c648:	000d883a 	mov	r6,zero
1000c64c:	000c5c40 	call	1000c5c4 <udivmodsi4>
1000c650:	0407c83a 	sub	r3,zero,r16
1000c654:	1884f03a 	xor	r2,r3,r2
1000c658:	1405883a 	add	r2,r2,r16
1000c65c:	dfc00117 	ldw	ra,4(sp)
1000c660:	dc000017 	ldw	r16,0(sp)
1000c664:	dec00204 	addi	sp,sp,8
1000c668:	f800283a 	ret
1000c66c:	0109c83a 	sub	r4,zero,r4
1000c670:	04000044 	movi	r16,1
1000c674:	283ff40e 	bge	r5,zero,1000c648 <__alt_data_end+0xf000c648>
1000c678:	014bc83a 	sub	r5,zero,r5
1000c67c:	8400005c 	xori	r16,r16,1
1000c680:	003ff106 	br	1000c648 <__alt_data_end+0xf000c648>

1000c684 <__modsi3>:
1000c684:	defffd04 	addi	sp,sp,-12
1000c688:	dfc00215 	stw	ra,8(sp)
1000c68c:	dc400115 	stw	r17,4(sp)
1000c690:	dc000015 	stw	r16,0(sp)
1000c694:	20000c16 	blt	r4,zero,1000c6c8 <__modsi3+0x44>
1000c698:	0023883a 	mov	r17,zero
1000c69c:	0021883a 	mov	r16,zero
1000c6a0:	28000d16 	blt	r5,zero,1000c6d8 <__modsi3+0x54>
1000c6a4:	01800044 	movi	r6,1
1000c6a8:	000c5c40 	call	1000c5c4 <udivmodsi4>
1000c6ac:	1404f03a 	xor	r2,r2,r16
1000c6b0:	8885883a 	add	r2,r17,r2
1000c6b4:	dfc00217 	ldw	ra,8(sp)
1000c6b8:	dc400117 	ldw	r17,4(sp)
1000c6bc:	dc000017 	ldw	r16,0(sp)
1000c6c0:	dec00304 	addi	sp,sp,12
1000c6c4:	f800283a 	ret
1000c6c8:	0109c83a 	sub	r4,zero,r4
1000c6cc:	04400044 	movi	r17,1
1000c6d0:	043fffc4 	movi	r16,-1
1000c6d4:	283ff30e 	bge	r5,zero,1000c6a4 <__alt_data_end+0xf000c6a4>
1000c6d8:	014bc83a 	sub	r5,zero,r5
1000c6dc:	003ff106 	br	1000c6a4 <__alt_data_end+0xf000c6a4>

1000c6e0 <__udivsi3>:
1000c6e0:	000d883a 	mov	r6,zero
1000c6e4:	000c5c41 	jmpi	1000c5c4 <udivmodsi4>

1000c6e8 <__umodsi3>:
1000c6e8:	01800044 	movi	r6,1
1000c6ec:	000c5c41 	jmpi	1000c5c4 <udivmodsi4>

1000c6f0 <atoi>:
1000c6f0:	000b883a 	mov	r5,zero
1000c6f4:	01800284 	movi	r6,10
1000c6f8:	000cf381 	jmpi	1000cf38 <strtol>

1000c6fc <_atoi_r>:
1000c6fc:	000d883a 	mov	r6,zero
1000c700:	01c00284 	movi	r7,10
1000c704:	000ccd81 	jmpi	1000ccd8 <_strtol_r>

1000c708 <memcmp>:
1000c708:	01c000c4 	movi	r7,3
1000c70c:	3980192e 	bgeu	r7,r6,1000c774 <memcmp+0x6c>
1000c710:	2144b03a 	or	r2,r4,r5
1000c714:	11c4703a 	and	r2,r2,r7
1000c718:	10000f26 	beq	r2,zero,1000c758 <memcmp+0x50>
1000c71c:	20800003 	ldbu	r2,0(r4)
1000c720:	28c00003 	ldbu	r3,0(r5)
1000c724:	10c0151e 	bne	r2,r3,1000c77c <memcmp+0x74>
1000c728:	31bfff84 	addi	r6,r6,-2
1000c72c:	01ffffc4 	movi	r7,-1
1000c730:	00000406 	br	1000c744 <memcmp+0x3c>
1000c734:	20800003 	ldbu	r2,0(r4)
1000c738:	28c00003 	ldbu	r3,0(r5)
1000c73c:	31bfffc4 	addi	r6,r6,-1
1000c740:	10c00e1e 	bne	r2,r3,1000c77c <memcmp+0x74>
1000c744:	21000044 	addi	r4,r4,1
1000c748:	29400044 	addi	r5,r5,1
1000c74c:	31fff91e 	bne	r6,r7,1000c734 <__alt_data_end+0xf000c734>
1000c750:	0005883a 	mov	r2,zero
1000c754:	f800283a 	ret
1000c758:	20c00017 	ldw	r3,0(r4)
1000c75c:	28800017 	ldw	r2,0(r5)
1000c760:	1880041e 	bne	r3,r2,1000c774 <memcmp+0x6c>
1000c764:	31bfff04 	addi	r6,r6,-4
1000c768:	21000104 	addi	r4,r4,4
1000c76c:	29400104 	addi	r5,r5,4
1000c770:	39bff936 	bltu	r7,r6,1000c758 <__alt_data_end+0xf000c758>
1000c774:	303fe91e 	bne	r6,zero,1000c71c <__alt_data_end+0xf000c71c>
1000c778:	003ff506 	br	1000c750 <__alt_data_end+0xf000c750>
1000c77c:	10c5c83a 	sub	r2,r2,r3
1000c780:	f800283a 	ret

1000c784 <memcpy>:
1000c784:	deffff04 	addi	sp,sp,-4
1000c788:	dc000015 	stw	r16,0(sp)
1000c78c:	00c003c4 	movi	r3,15
1000c790:	2005883a 	mov	r2,r4
1000c794:	1980432e 	bgeu	r3,r6,1000c8a4 <memcpy+0x120>
1000c798:	2146b03a 	or	r3,r4,r5
1000c79c:	18c000cc 	andi	r3,r3,3
1000c7a0:	1800421e 	bne	r3,zero,1000c8ac <memcpy+0x128>
1000c7a4:	343ffc04 	addi	r16,r6,-16
1000c7a8:	8020d13a 	srli	r16,r16,4
1000c7ac:	28c00104 	addi	r3,r5,4
1000c7b0:	23400104 	addi	r13,r4,4
1000c7b4:	801e913a 	slli	r15,r16,4
1000c7b8:	2b000204 	addi	r12,r5,8
1000c7bc:	22c00204 	addi	r11,r4,8
1000c7c0:	7bc00504 	addi	r15,r15,20
1000c7c4:	2a800304 	addi	r10,r5,12
1000c7c8:	22400304 	addi	r9,r4,12
1000c7cc:	2bdf883a 	add	r15,r5,r15
1000c7d0:	2811883a 	mov	r8,r5
1000c7d4:	200f883a 	mov	r7,r4
1000c7d8:	41000017 	ldw	r4,0(r8)
1000c7dc:	39c00404 	addi	r7,r7,16
1000c7e0:	18c00404 	addi	r3,r3,16
1000c7e4:	393ffc15 	stw	r4,-16(r7)
1000c7e8:	1bbffc17 	ldw	r14,-16(r3)
1000c7ec:	6b400404 	addi	r13,r13,16
1000c7f0:	5ac00404 	addi	r11,r11,16
1000c7f4:	6bbffc15 	stw	r14,-16(r13)
1000c7f8:	63800017 	ldw	r14,0(r12)
1000c7fc:	4a400404 	addi	r9,r9,16
1000c800:	42000404 	addi	r8,r8,16
1000c804:	5bbffc15 	stw	r14,-16(r11)
1000c808:	53800017 	ldw	r14,0(r10)
1000c80c:	63000404 	addi	r12,r12,16
1000c810:	52800404 	addi	r10,r10,16
1000c814:	4bbffc15 	stw	r14,-16(r9)
1000c818:	1bffef1e 	bne	r3,r15,1000c7d8 <__alt_data_end+0xf000c7d8>
1000c81c:	81c00044 	addi	r7,r16,1
1000c820:	380e913a 	slli	r7,r7,4
1000c824:	310003cc 	andi	r4,r6,15
1000c828:	02c000c4 	movi	r11,3
1000c82c:	11c7883a 	add	r3,r2,r7
1000c830:	29cb883a 	add	r5,r5,r7
1000c834:	59001f2e 	bgeu	r11,r4,1000c8b4 <memcpy+0x130>
1000c838:	1813883a 	mov	r9,r3
1000c83c:	2811883a 	mov	r8,r5
1000c840:	200f883a 	mov	r7,r4
1000c844:	42800017 	ldw	r10,0(r8)
1000c848:	4a400104 	addi	r9,r9,4
1000c84c:	39ffff04 	addi	r7,r7,-4
1000c850:	4abfff15 	stw	r10,-4(r9)
1000c854:	42000104 	addi	r8,r8,4
1000c858:	59fffa36 	bltu	r11,r7,1000c844 <__alt_data_end+0xf000c844>
1000c85c:	213fff04 	addi	r4,r4,-4
1000c860:	2008d0ba 	srli	r4,r4,2
1000c864:	318000cc 	andi	r6,r6,3
1000c868:	21000044 	addi	r4,r4,1
1000c86c:	2109883a 	add	r4,r4,r4
1000c870:	2109883a 	add	r4,r4,r4
1000c874:	1907883a 	add	r3,r3,r4
1000c878:	290b883a 	add	r5,r5,r4
1000c87c:	30000626 	beq	r6,zero,1000c898 <memcpy+0x114>
1000c880:	198d883a 	add	r6,r3,r6
1000c884:	29c00003 	ldbu	r7,0(r5)
1000c888:	18c00044 	addi	r3,r3,1
1000c88c:	29400044 	addi	r5,r5,1
1000c890:	19ffffc5 	stb	r7,-1(r3)
1000c894:	19bffb1e 	bne	r3,r6,1000c884 <__alt_data_end+0xf000c884>
1000c898:	dc000017 	ldw	r16,0(sp)
1000c89c:	dec00104 	addi	sp,sp,4
1000c8a0:	f800283a 	ret
1000c8a4:	2007883a 	mov	r3,r4
1000c8a8:	003ff406 	br	1000c87c <__alt_data_end+0xf000c87c>
1000c8ac:	2007883a 	mov	r3,r4
1000c8b0:	003ff306 	br	1000c880 <__alt_data_end+0xf000c880>
1000c8b4:	200d883a 	mov	r6,r4
1000c8b8:	003ff006 	br	1000c87c <__alt_data_end+0xf000c87c>

1000c8bc <memset>:
1000c8bc:	20c000cc 	andi	r3,r4,3
1000c8c0:	2005883a 	mov	r2,r4
1000c8c4:	18004326 	beq	r3,zero,1000c9d4 <memset+0x118>
1000c8c8:	31ffffc4 	addi	r7,r6,-1
1000c8cc:	30004026 	beq	r6,zero,1000c9d0 <memset+0x114>
1000c8d0:	2813883a 	mov	r9,r5
1000c8d4:	200d883a 	mov	r6,r4
1000c8d8:	2007883a 	mov	r3,r4
1000c8dc:	00000406 	br	1000c8f0 <memset+0x34>
1000c8e0:	3a3fffc4 	addi	r8,r7,-1
1000c8e4:	31800044 	addi	r6,r6,1
1000c8e8:	38003926 	beq	r7,zero,1000c9d0 <memset+0x114>
1000c8ec:	400f883a 	mov	r7,r8
1000c8f0:	18c00044 	addi	r3,r3,1
1000c8f4:	32400005 	stb	r9,0(r6)
1000c8f8:	1a0000cc 	andi	r8,r3,3
1000c8fc:	403ff81e 	bne	r8,zero,1000c8e0 <__alt_data_end+0xf000c8e0>
1000c900:	010000c4 	movi	r4,3
1000c904:	21c02d2e 	bgeu	r4,r7,1000c9bc <memset+0x100>
1000c908:	29803fcc 	andi	r6,r5,255
1000c90c:	3008923a 	slli	r4,r6,8
1000c910:	218cb03a 	or	r6,r4,r6
1000c914:	3008943a 	slli	r4,r6,16
1000c918:	218cb03a 	or	r6,r4,r6
1000c91c:	010003c4 	movi	r4,15
1000c920:	21c0182e 	bgeu	r4,r7,1000c984 <memset+0xc8>
1000c924:	3b3ffc04 	addi	r12,r7,-16
1000c928:	6018d13a 	srli	r12,r12,4
1000c92c:	1a000104 	addi	r8,r3,4
1000c930:	1ac00204 	addi	r11,r3,8
1000c934:	6008913a 	slli	r4,r12,4
1000c938:	1a800304 	addi	r10,r3,12
1000c93c:	1813883a 	mov	r9,r3
1000c940:	21000504 	addi	r4,r4,20
1000c944:	1909883a 	add	r4,r3,r4
1000c948:	49800015 	stw	r6,0(r9)
1000c94c:	41800015 	stw	r6,0(r8)
1000c950:	59800015 	stw	r6,0(r11)
1000c954:	51800015 	stw	r6,0(r10)
1000c958:	42000404 	addi	r8,r8,16
1000c95c:	4a400404 	addi	r9,r9,16
1000c960:	5ac00404 	addi	r11,r11,16
1000c964:	52800404 	addi	r10,r10,16
1000c968:	413ff71e 	bne	r8,r4,1000c948 <__alt_data_end+0xf000c948>
1000c96c:	63000044 	addi	r12,r12,1
1000c970:	6018913a 	slli	r12,r12,4
1000c974:	39c003cc 	andi	r7,r7,15
1000c978:	010000c4 	movi	r4,3
1000c97c:	1b07883a 	add	r3,r3,r12
1000c980:	21c00e2e 	bgeu	r4,r7,1000c9bc <memset+0x100>
1000c984:	1813883a 	mov	r9,r3
1000c988:	3811883a 	mov	r8,r7
1000c98c:	010000c4 	movi	r4,3
1000c990:	49800015 	stw	r6,0(r9)
1000c994:	423fff04 	addi	r8,r8,-4
1000c998:	4a400104 	addi	r9,r9,4
1000c99c:	223ffc36 	bltu	r4,r8,1000c990 <__alt_data_end+0xf000c990>
1000c9a0:	393fff04 	addi	r4,r7,-4
1000c9a4:	2008d0ba 	srli	r4,r4,2
1000c9a8:	39c000cc 	andi	r7,r7,3
1000c9ac:	21000044 	addi	r4,r4,1
1000c9b0:	2109883a 	add	r4,r4,r4
1000c9b4:	2109883a 	add	r4,r4,r4
1000c9b8:	1907883a 	add	r3,r3,r4
1000c9bc:	38000426 	beq	r7,zero,1000c9d0 <memset+0x114>
1000c9c0:	19cf883a 	add	r7,r3,r7
1000c9c4:	19400005 	stb	r5,0(r3)
1000c9c8:	18c00044 	addi	r3,r3,1
1000c9cc:	19fffd1e 	bne	r3,r7,1000c9c4 <__alt_data_end+0xf000c9c4>
1000c9d0:	f800283a 	ret
1000c9d4:	2007883a 	mov	r3,r4
1000c9d8:	300f883a 	mov	r7,r6
1000c9dc:	003fc806 	br	1000c900 <__alt_data_end+0xf000c900>

1000c9e0 <_printf_r>:
1000c9e0:	defffd04 	addi	sp,sp,-12
1000c9e4:	dfc00015 	stw	ra,0(sp)
1000c9e8:	d9800115 	stw	r6,4(sp)
1000c9ec:	d9c00215 	stw	r7,8(sp)
1000c9f0:	280d883a 	mov	r6,r5
1000c9f4:	21400217 	ldw	r5,8(r4)
1000c9f8:	d9c00104 	addi	r7,sp,4
1000c9fc:	000eeec0 	call	1000eeec <___vfprintf_internal_r>
1000ca00:	dfc00017 	ldw	ra,0(sp)
1000ca04:	dec00304 	addi	sp,sp,12
1000ca08:	f800283a 	ret

1000ca0c <printf>:
1000ca0c:	defffc04 	addi	sp,sp,-16
1000ca10:	dfc00015 	stw	ra,0(sp)
1000ca14:	d9400115 	stw	r5,4(sp)
1000ca18:	d9800215 	stw	r6,8(sp)
1000ca1c:	d9c00315 	stw	r7,12(sp)
1000ca20:	008400b4 	movhi	r2,4098
1000ca24:	109d1004 	addi	r2,r2,29760
1000ca28:	10800017 	ldw	r2,0(r2)
1000ca2c:	200b883a 	mov	r5,r4
1000ca30:	d9800104 	addi	r6,sp,4
1000ca34:	11000217 	ldw	r4,8(r2)
1000ca38:	0010ee80 	call	10010ee8 <__vfprintf_internal>
1000ca3c:	dfc00017 	ldw	ra,0(sp)
1000ca40:	dec00404 	addi	sp,sp,16
1000ca44:	f800283a 	ret

1000ca48 <_puts_r>:
1000ca48:	defff604 	addi	sp,sp,-40
1000ca4c:	dc000715 	stw	r16,28(sp)
1000ca50:	2021883a 	mov	r16,r4
1000ca54:	2809883a 	mov	r4,r5
1000ca58:	dc400815 	stw	r17,32(sp)
1000ca5c:	dfc00915 	stw	ra,36(sp)
1000ca60:	2823883a 	mov	r17,r5
1000ca64:	000cc400 	call	1000cc40 <strlen>
1000ca68:	00c400b4 	movhi	r3,4098
1000ca6c:	18dd1004 	addi	r3,r3,29760
1000ca70:	18c00017 	ldw	r3,0(r3)
1000ca74:	11000044 	addi	r4,r2,1
1000ca78:	d8800115 	stw	r2,4(sp)
1000ca7c:	18c00217 	ldw	r3,8(r3)
1000ca80:	014400b4 	movhi	r5,4098
1000ca84:	29543404 	addi	r5,r5,20688
1000ca88:	1880030b 	ldhu	r2,12(r3)
1000ca8c:	d9400215 	stw	r5,8(sp)
1000ca90:	d9000615 	stw	r4,24(sp)
1000ca94:	01400044 	movi	r5,1
1000ca98:	01000084 	movi	r4,2
1000ca9c:	d9000515 	stw	r4,20(sp)
1000caa0:	dc400015 	stw	r17,0(sp)
1000caa4:	d9400315 	stw	r5,12(sp)
1000caa8:	dec00415 	stw	sp,16(sp)
1000caac:	1108000c 	andi	r4,r2,8192
1000cab0:	2000061e 	bne	r4,zero,1000cacc <_puts_r+0x84>
1000cab4:	19401917 	ldw	r5,100(r3)
1000cab8:	0137ffc4 	movi	r4,-8193
1000cabc:	10880014 	ori	r2,r2,8192
1000cac0:	2908703a 	and	r4,r5,r4
1000cac4:	1880030d 	sth	r2,12(r3)
1000cac8:	19001915 	stw	r4,100(r3)
1000cacc:	81400217 	ldw	r5,8(r16)
1000cad0:	8009883a 	mov	r4,r16
1000cad4:	d9800404 	addi	r6,sp,16
1000cad8:	0014e300 	call	10014e30 <__sfvwrite_r>
1000cadc:	1000061e 	bne	r2,zero,1000caf8 <_puts_r+0xb0>
1000cae0:	00800284 	movi	r2,10
1000cae4:	dfc00917 	ldw	ra,36(sp)
1000cae8:	dc400817 	ldw	r17,32(sp)
1000caec:	dc000717 	ldw	r16,28(sp)
1000caf0:	dec00a04 	addi	sp,sp,40
1000caf4:	f800283a 	ret
1000caf8:	00bfffc4 	movi	r2,-1
1000cafc:	003ff906 	br	1000cae4 <__alt_data_end+0xf000cae4>

1000cb00 <puts>:
1000cb00:	008400b4 	movhi	r2,4098
1000cb04:	109d1004 	addi	r2,r2,29760
1000cb08:	200b883a 	mov	r5,r4
1000cb0c:	11000017 	ldw	r4,0(r2)
1000cb10:	000ca481 	jmpi	1000ca48 <_puts_r>

1000cb14 <scanf>:
1000cb14:	defffc04 	addi	sp,sp,-16
1000cb18:	dfc00015 	stw	ra,0(sp)
1000cb1c:	d9400115 	stw	r5,4(sp)
1000cb20:	d9800215 	stw	r6,8(sp)
1000cb24:	d9c00315 	stw	r7,12(sp)
1000cb28:	008400b4 	movhi	r2,4098
1000cb2c:	109d1004 	addi	r2,r2,29760
1000cb30:	200d883a 	mov	r6,r4
1000cb34:	11000017 	ldw	r4,0(r2)
1000cb38:	d9c00104 	addi	r7,sp,4
1000cb3c:	21400117 	ldw	r5,4(r4)
1000cb40:	0010f0c0 	call	10010f0c <__svfscanf_r>
1000cb44:	dfc00017 	ldw	ra,0(sp)
1000cb48:	dec00404 	addi	sp,sp,16
1000cb4c:	f800283a 	ret

1000cb50 <_scanf_r>:
1000cb50:	defffd04 	addi	sp,sp,-12
1000cb54:	dfc00015 	stw	ra,0(sp)
1000cb58:	d9800115 	stw	r6,4(sp)
1000cb5c:	d9c00215 	stw	r7,8(sp)
1000cb60:	280d883a 	mov	r6,r5
1000cb64:	21400117 	ldw	r5,4(r4)
1000cb68:	d9c00104 	addi	r7,sp,4
1000cb6c:	0010f0c0 	call	10010f0c <__svfscanf_r>
1000cb70:	dfc00017 	ldw	ra,0(sp)
1000cb74:	dec00304 	addi	sp,sp,12
1000cb78:	f800283a 	ret

1000cb7c <_sprintf_r>:
1000cb7c:	deffe404 	addi	sp,sp,-112
1000cb80:	2807883a 	mov	r3,r5
1000cb84:	dfc01a15 	stw	ra,104(sp)
1000cb88:	d9c01b15 	stw	r7,108(sp)
1000cb8c:	00a00034 	movhi	r2,32768
1000cb90:	10bfffc4 	addi	r2,r2,-1
1000cb94:	02008204 	movi	r8,520
1000cb98:	d8800215 	stw	r2,8(sp)
1000cb9c:	d8800515 	stw	r2,20(sp)
1000cba0:	d80b883a 	mov	r5,sp
1000cba4:	d9c01b04 	addi	r7,sp,108
1000cba8:	00bfffc4 	movi	r2,-1
1000cbac:	d8c00015 	stw	r3,0(sp)
1000cbb0:	d8c00415 	stw	r3,16(sp)
1000cbb4:	da00030d 	sth	r8,12(sp)
1000cbb8:	d880038d 	sth	r2,14(sp)
1000cbbc:	000cf5c0 	call	1000cf5c <___svfprintf_internal_r>
1000cbc0:	d8c00017 	ldw	r3,0(sp)
1000cbc4:	18000005 	stb	zero,0(r3)
1000cbc8:	dfc01a17 	ldw	ra,104(sp)
1000cbcc:	dec01c04 	addi	sp,sp,112
1000cbd0:	f800283a 	ret

1000cbd4 <sprintf>:
1000cbd4:	deffe304 	addi	sp,sp,-116
1000cbd8:	2007883a 	mov	r3,r4
1000cbdc:	dfc01a15 	stw	ra,104(sp)
1000cbe0:	d9801b15 	stw	r6,108(sp)
1000cbe4:	d9c01c15 	stw	r7,112(sp)
1000cbe8:	010400b4 	movhi	r4,4098
1000cbec:	211d1004 	addi	r4,r4,29760
1000cbf0:	21000017 	ldw	r4,0(r4)
1000cbf4:	00a00034 	movhi	r2,32768
1000cbf8:	10bfffc4 	addi	r2,r2,-1
1000cbfc:	280d883a 	mov	r6,r5
1000cc00:	02008204 	movi	r8,520
1000cc04:	d8800215 	stw	r2,8(sp)
1000cc08:	d8800515 	stw	r2,20(sp)
1000cc0c:	d80b883a 	mov	r5,sp
1000cc10:	d9c01b04 	addi	r7,sp,108
1000cc14:	00bfffc4 	movi	r2,-1
1000cc18:	d8c00015 	stw	r3,0(sp)
1000cc1c:	d8c00415 	stw	r3,16(sp)
1000cc20:	da00030d 	sth	r8,12(sp)
1000cc24:	d880038d 	sth	r2,14(sp)
1000cc28:	000cf5c0 	call	1000cf5c <___svfprintf_internal_r>
1000cc2c:	d8c00017 	ldw	r3,0(sp)
1000cc30:	18000005 	stb	zero,0(r3)
1000cc34:	dfc01a17 	ldw	ra,104(sp)
1000cc38:	dec01d04 	addi	sp,sp,116
1000cc3c:	f800283a 	ret

1000cc40 <strlen>:
1000cc40:	208000cc 	andi	r2,r4,3
1000cc44:	10002026 	beq	r2,zero,1000ccc8 <strlen+0x88>
1000cc48:	20800007 	ldb	r2,0(r4)
1000cc4c:	10002026 	beq	r2,zero,1000ccd0 <strlen+0x90>
1000cc50:	2005883a 	mov	r2,r4
1000cc54:	00000206 	br	1000cc60 <strlen+0x20>
1000cc58:	10c00007 	ldb	r3,0(r2)
1000cc5c:	18001826 	beq	r3,zero,1000ccc0 <strlen+0x80>
1000cc60:	10800044 	addi	r2,r2,1
1000cc64:	10c000cc 	andi	r3,r2,3
1000cc68:	183ffb1e 	bne	r3,zero,1000cc58 <__alt_data_end+0xf000cc58>
1000cc6c:	10c00017 	ldw	r3,0(r2)
1000cc70:	01ffbff4 	movhi	r7,65279
1000cc74:	39ffbfc4 	addi	r7,r7,-257
1000cc78:	00ca303a 	nor	r5,zero,r3
1000cc7c:	01a02074 	movhi	r6,32897
1000cc80:	19c7883a 	add	r3,r3,r7
1000cc84:	31a02004 	addi	r6,r6,-32640
1000cc88:	1946703a 	and	r3,r3,r5
1000cc8c:	1986703a 	and	r3,r3,r6
1000cc90:	1800091e 	bne	r3,zero,1000ccb8 <strlen+0x78>
1000cc94:	10800104 	addi	r2,r2,4
1000cc98:	10c00017 	ldw	r3,0(r2)
1000cc9c:	19cb883a 	add	r5,r3,r7
1000cca0:	00c6303a 	nor	r3,zero,r3
1000cca4:	28c6703a 	and	r3,r5,r3
1000cca8:	1986703a 	and	r3,r3,r6
1000ccac:	183ff926 	beq	r3,zero,1000cc94 <__alt_data_end+0xf000cc94>
1000ccb0:	00000106 	br	1000ccb8 <strlen+0x78>
1000ccb4:	10800044 	addi	r2,r2,1
1000ccb8:	10c00007 	ldb	r3,0(r2)
1000ccbc:	183ffd1e 	bne	r3,zero,1000ccb4 <__alt_data_end+0xf000ccb4>
1000ccc0:	1105c83a 	sub	r2,r2,r4
1000ccc4:	f800283a 	ret
1000ccc8:	2005883a 	mov	r2,r4
1000cccc:	003fe706 	br	1000cc6c <__alt_data_end+0xf000cc6c>
1000ccd0:	0005883a 	mov	r2,zero
1000ccd4:	f800283a 	ret

1000ccd8 <_strtol_r>:
1000ccd8:	008400b4 	movhi	r2,4098
1000ccdc:	defff404 	addi	sp,sp,-48
1000cce0:	109d0e04 	addi	r2,r2,29752
1000cce4:	dcc00515 	stw	r19,20(sp)
1000cce8:	14c00017 	ldw	r19,0(r2)
1000ccec:	dd800815 	stw	r22,32(sp)
1000ccf0:	dd400715 	stw	r21,28(sp)
1000ccf4:	dd000615 	stw	r20,24(sp)
1000ccf8:	dfc00b15 	stw	ra,44(sp)
1000ccfc:	df000a15 	stw	fp,40(sp)
1000cd00:	ddc00915 	stw	r23,36(sp)
1000cd04:	dc800415 	stw	r18,16(sp)
1000cd08:	dc400315 	stw	r17,12(sp)
1000cd0c:	dc000215 	stw	r16,8(sp)
1000cd10:	282b883a 	mov	r21,r5
1000cd14:	d9000015 	stw	r4,0(sp)
1000cd18:	3029883a 	mov	r20,r6
1000cd1c:	382d883a 	mov	r22,r7
1000cd20:	2813883a 	mov	r9,r5
1000cd24:	4a000007 	ldb	r8,0(r9)
1000cd28:	4807883a 	mov	r3,r9
1000cd2c:	4a400044 	addi	r9,r9,1
1000cd30:	9a05883a 	add	r2,r19,r8
1000cd34:	10800043 	ldbu	r2,1(r2)
1000cd38:	1080020c 	andi	r2,r2,8
1000cd3c:	103ff91e 	bne	r2,zero,1000cd24 <__alt_data_end+0xf000cd24>
1000cd40:	00800b44 	movi	r2,45
1000cd44:	4025883a 	mov	r18,r8
1000cd48:	4823883a 	mov	r17,r9
1000cd4c:	40805826 	beq	r8,r2,1000ceb0 <_strtol_r+0x1d8>
1000cd50:	00800ac4 	movi	r2,43
1000cd54:	40805a26 	beq	r8,r2,1000cec0 <_strtol_r+0x1e8>
1000cd58:	0039883a 	mov	fp,zero
1000cd5c:	b0000426 	beq	r22,zero,1000cd70 <_strtol_r+0x98>
1000cd60:	00800404 	movi	r2,16
1000cd64:	b0805a26 	beq	r22,r2,1000ced0 <_strtol_r+0x1f8>
1000cd68:	b02f883a 	mov	r23,r22
1000cd6c:	00000406 	br	1000cd80 <_strtol_r+0xa8>
1000cd70:	00800c04 	movi	r2,48
1000cd74:	90806526 	beq	r18,r2,1000cf0c <_strtol_r+0x234>
1000cd78:	05800284 	movi	r22,10
1000cd7c:	b02f883a 	mov	r23,r22
1000cd80:	00e00034 	movhi	r3,32768
1000cd84:	18ffffc4 	addi	r3,r3,-1
1000cd88:	e0e1883a 	add	r16,fp,r3
1000cd8c:	b80b883a 	mov	r5,r23
1000cd90:	8009883a 	mov	r4,r16
1000cd94:	000c6e80 	call	1000c6e8 <__umodsi3>
1000cd98:	8009883a 	mov	r4,r16
1000cd9c:	b80b883a 	mov	r5,r23
1000cda0:	d8800115 	stw	r2,4(sp)
1000cda4:	000c6e00 	call	1000c6e0 <__udivsi3>
1000cda8:	9c91883a 	add	r8,r19,r18
1000cdac:	42000043 	ldbu	r8,1(r8)
1000cdb0:	8807883a 	mov	r3,r17
1000cdb4:	000d883a 	mov	r6,zero
1000cdb8:	4240010c 	andi	r9,r8,4
1000cdbc:	0009883a 	mov	r4,zero
1000cdc0:	02800044 	movi	r10,1
1000cdc4:	017fffc4 	movi	r5,-1
1000cdc8:	d9c00117 	ldw	r7,4(sp)
1000cdcc:	48000e26 	beq	r9,zero,1000ce08 <_strtol_r+0x130>
1000cdd0:	923ff404 	addi	r8,r18,-48
1000cdd4:	4580120e 	bge	r8,r22,1000ce20 <_strtol_r+0x148>
1000cdd8:	31400526 	beq	r6,r5,1000cdf0 <_strtol_r+0x118>
1000cddc:	11002736 	bltu	r2,r4,1000ce7c <_strtol_r+0x1a4>
1000cde0:	20802526 	beq	r4,r2,1000ce78 <_strtol_r+0x1a0>
1000cde4:	25c9383a 	mul	r4,r4,r23
1000cde8:	01800044 	movi	r6,1
1000cdec:	4109883a 	add	r4,r8,r4
1000cdf0:	1c800007 	ldb	r18,0(r3)
1000cdf4:	18c00044 	addi	r3,r3,1
1000cdf8:	9c91883a 	add	r8,r19,r18
1000cdfc:	42000043 	ldbu	r8,1(r8)
1000ce00:	4240010c 	andi	r9,r8,4
1000ce04:	483ff21e 	bne	r9,zero,1000cdd0 <__alt_data_end+0xf000cdd0>
1000ce08:	420000cc 	andi	r8,r8,3
1000ce0c:	40000426 	beq	r8,zero,1000ce20 <_strtol_r+0x148>
1000ce10:	42801c26 	beq	r8,r10,1000ce84 <_strtol_r+0x1ac>
1000ce14:	024015c4 	movi	r9,87
1000ce18:	9251c83a 	sub	r8,r18,r9
1000ce1c:	45bfee16 	blt	r8,r22,1000cdd8 <__alt_data_end+0xf000cdd8>
1000ce20:	00bfffc4 	movi	r2,-1
1000ce24:	30801926 	beq	r6,r2,1000ce8c <_strtol_r+0x1b4>
1000ce28:	0705c83a 	sub	r2,zero,fp
1000ce2c:	2084f03a 	xor	r2,r4,r2
1000ce30:	1739883a 	add	fp,r2,fp
1000ce34:	e005883a 	mov	r2,fp
1000ce38:	a0000326 	beq	r20,zero,1000ce48 <_strtol_r+0x170>
1000ce3c:	30001a1e 	bne	r6,zero,1000cea8 <_strtol_r+0x1d0>
1000ce40:	a80b883a 	mov	r5,r21
1000ce44:	a1400015 	stw	r5,0(r20)
1000ce48:	dfc00b17 	ldw	ra,44(sp)
1000ce4c:	df000a17 	ldw	fp,40(sp)
1000ce50:	ddc00917 	ldw	r23,36(sp)
1000ce54:	dd800817 	ldw	r22,32(sp)
1000ce58:	dd400717 	ldw	r21,28(sp)
1000ce5c:	dd000617 	ldw	r20,24(sp)
1000ce60:	dcc00517 	ldw	r19,20(sp)
1000ce64:	dc800417 	ldw	r18,16(sp)
1000ce68:	dc400317 	ldw	r17,12(sp)
1000ce6c:	dc000217 	ldw	r16,8(sp)
1000ce70:	dec00c04 	addi	sp,sp,48
1000ce74:	f800283a 	ret
1000ce78:	3a3fda0e 	bge	r7,r8,1000cde4 <__alt_data_end+0xf000cde4>
1000ce7c:	01bfffc4 	movi	r6,-1
1000ce80:	003fdb06 	br	1000cdf0 <__alt_data_end+0xf000cdf0>
1000ce84:	02400dc4 	movi	r9,55
1000ce88:	003fe306 	br	1000ce18 <__alt_data_end+0xf000ce18>
1000ce8c:	d9000017 	ldw	r4,0(sp)
1000ce90:	00800884 	movi	r2,34
1000ce94:	20800015 	stw	r2,0(r4)
1000ce98:	00a00034 	movhi	r2,32768
1000ce9c:	10bfffc4 	addi	r2,r2,-1
1000cea0:	e085883a 	add	r2,fp,r2
1000cea4:	a03fe826 	beq	r20,zero,1000ce48 <__alt_data_end+0xf000ce48>
1000cea8:	197fffc4 	addi	r5,r3,-1
1000ceac:	003fe506 	br	1000ce44 <__alt_data_end+0xf000ce44>
1000ceb0:	1c400084 	addi	r17,r3,2
1000ceb4:	1c800047 	ldb	r18,1(r3)
1000ceb8:	07000044 	movi	fp,1
1000cebc:	003fa706 	br	1000cd5c <__alt_data_end+0xf000cd5c>
1000cec0:	1c400084 	addi	r17,r3,2
1000cec4:	1c800047 	ldb	r18,1(r3)
1000cec8:	0039883a 	mov	fp,zero
1000cecc:	003fa306 	br	1000cd5c <__alt_data_end+0xf000cd5c>
1000ced0:	00800c04 	movi	r2,48
1000ced4:	90bfa41e 	bne	r18,r2,1000cd68 <__alt_data_end+0xf000cd68>
1000ced8:	88c00003 	ldbu	r3,0(r17)
1000cedc:	00bff7c4 	movi	r2,-33
1000cee0:	1884703a 	and	r2,r3,r2
1000cee4:	10803fcc 	andi	r2,r2,255
1000cee8:	1080201c 	xori	r2,r2,128
1000ceec:	10bfe004 	addi	r2,r2,-128
1000cef0:	00c01604 	movi	r3,88
1000cef4:	10ff9c1e 	bne	r2,r3,1000cd68 <__alt_data_end+0xf000cd68>
1000cef8:	05c00404 	movi	r23,16
1000cefc:	8c800047 	ldb	r18,1(r17)
1000cf00:	b82d883a 	mov	r22,r23
1000cf04:	8c400084 	addi	r17,r17,2
1000cf08:	003f9d06 	br	1000cd80 <__alt_data_end+0xf000cd80>
1000cf0c:	88c00003 	ldbu	r3,0(r17)
1000cf10:	00bff7c4 	movi	r2,-33
1000cf14:	1884703a 	and	r2,r3,r2
1000cf18:	10803fcc 	andi	r2,r2,255
1000cf1c:	1080201c 	xori	r2,r2,128
1000cf20:	10bfe004 	addi	r2,r2,-128
1000cf24:	00c01604 	movi	r3,88
1000cf28:	10fff326 	beq	r2,r3,1000cef8 <__alt_data_end+0xf000cef8>
1000cf2c:	05800204 	movi	r22,8
1000cf30:	b02f883a 	mov	r23,r22
1000cf34:	003f9206 	br	1000cd80 <__alt_data_end+0xf000cd80>

1000cf38 <strtol>:
1000cf38:	2007883a 	mov	r3,r4
1000cf3c:	010400b4 	movhi	r4,4098
1000cf40:	211d1004 	addi	r4,r4,29760
1000cf44:	21000017 	ldw	r4,0(r4)
1000cf48:	2805883a 	mov	r2,r5
1000cf4c:	300f883a 	mov	r7,r6
1000cf50:	180b883a 	mov	r5,r3
1000cf54:	100d883a 	mov	r6,r2
1000cf58:	000ccd81 	jmpi	1000ccd8 <_strtol_r>

1000cf5c <___svfprintf_internal_r>:
1000cf5c:	deffb504 	addi	sp,sp,-300
1000cf60:	dfc04a15 	stw	ra,296(sp)
1000cf64:	ddc04815 	stw	r23,288(sp)
1000cf68:	d9002f15 	stw	r4,188(sp)
1000cf6c:	282f883a 	mov	r23,r5
1000cf70:	d9802915 	stw	r6,164(sp)
1000cf74:	d9c02d15 	stw	r7,180(sp)
1000cf78:	df004915 	stw	fp,292(sp)
1000cf7c:	dd804715 	stw	r22,284(sp)
1000cf80:	dd404615 	stw	r21,280(sp)
1000cf84:	dd004515 	stw	r20,276(sp)
1000cf88:	dcc04415 	stw	r19,272(sp)
1000cf8c:	dc804315 	stw	r18,268(sp)
1000cf90:	dc404215 	stw	r17,264(sp)
1000cf94:	dc004115 	stw	r16,260(sp)
1000cf98:	00155200 	call	10015520 <_localeconv_r>
1000cf9c:	10800017 	ldw	r2,0(r2)
1000cfa0:	1009883a 	mov	r4,r2
1000cfa4:	d8803515 	stw	r2,212(sp)
1000cfa8:	000cc400 	call	1000cc40 <strlen>
1000cfac:	d8803915 	stw	r2,228(sp)
1000cfb0:	b880030b 	ldhu	r2,12(r23)
1000cfb4:	1080200c 	andi	r2,r2,128
1000cfb8:	10000226 	beq	r2,zero,1000cfc4 <___svfprintf_internal_r+0x68>
1000cfbc:	b8800417 	ldw	r2,16(r23)
1000cfc0:	10065d26 	beq	r2,zero,1000e938 <___svfprintf_internal_r+0x19dc>
1000cfc4:	db001dc4 	addi	r12,sp,119
1000cfc8:	dd801e04 	addi	r22,sp,120
1000cfcc:	d8800404 	addi	r2,sp,16
1000cfd0:	050400b4 	movhi	r20,4098
1000cfd4:	b317c83a 	sub	r11,r22,r12
1000cfd8:	a5144584 	addi	r20,r20,20758
1000cfdc:	db002815 	stw	r12,160(sp)
1000cfe0:	d8801e15 	stw	r2,120(sp)
1000cfe4:	d8002015 	stw	zero,128(sp)
1000cfe8:	d8001f15 	stw	zero,124(sp)
1000cfec:	d8003315 	stw	zero,204(sp)
1000cff0:	d8003715 	stw	zero,220(sp)
1000cff4:	d8003815 	stw	zero,224(sp)
1000cff8:	d8003b15 	stw	zero,236(sp)
1000cffc:	d8003a15 	stw	zero,232(sp)
1000d000:	d8003015 	stw	zero,192(sp)
1000d004:	1011883a 	mov	r8,r2
1000d008:	dac03d15 	stw	r11,244(sp)
1000d00c:	db002917 	ldw	r12,164(sp)
1000d010:	60800007 	ldb	r2,0(r12)
1000d014:	1000ab26 	beq	r2,zero,1000d2c4 <___svfprintf_internal_r+0x368>
1000d018:	00c00944 	movi	r3,37
1000d01c:	10c0a926 	beq	r2,r3,1000d2c4 <___svfprintf_internal_r+0x368>
1000d020:	6021883a 	mov	r16,r12
1000d024:	00000106 	br	1000d02c <___svfprintf_internal_r+0xd0>
1000d028:	10c08426 	beq	r2,r3,1000d23c <___svfprintf_internal_r+0x2e0>
1000d02c:	84000044 	addi	r16,r16,1
1000d030:	80800007 	ldb	r2,0(r16)
1000d034:	103ffc1e 	bne	r2,zero,1000d028 <__alt_data_end+0xf000d028>
1000d038:	dac02917 	ldw	r11,164(sp)
1000d03c:	82e3c83a 	sub	r17,r16,r11
1000d040:	88000f26 	beq	r17,zero,1000d080 <___svfprintf_internal_r+0x124>
1000d044:	d8c02017 	ldw	r3,128(sp)
1000d048:	d8801f17 	ldw	r2,124(sp)
1000d04c:	dac02917 	ldw	r11,164(sp)
1000d050:	1c47883a 	add	r3,r3,r17
1000d054:	10800044 	addi	r2,r2,1
1000d058:	d8c02015 	stw	r3,128(sp)
1000d05c:	42c00015 	stw	r11,0(r8)
1000d060:	44400115 	stw	r17,4(r8)
1000d064:	d8801f15 	stw	r2,124(sp)
1000d068:	00c001c4 	movi	r3,7
1000d06c:	18807616 	blt	r3,r2,1000d248 <___svfprintf_internal_r+0x2ec>
1000d070:	42000204 	addi	r8,r8,8
1000d074:	db003017 	ldw	r12,192(sp)
1000d078:	6459883a 	add	r12,r12,r17
1000d07c:	db003015 	stw	r12,192(sp)
1000d080:	80800007 	ldb	r2,0(r16)
1000d084:	10007726 	beq	r2,zero,1000d264 <___svfprintf_internal_r+0x308>
1000d088:	80800044 	addi	r2,r16,1
1000d08c:	84000047 	ldb	r16,1(r16)
1000d090:	d8002785 	stb	zero,158(sp)
1000d094:	000d883a 	mov	r6,zero
1000d098:	027fffc4 	movi	r9,-1
1000d09c:	d8002e15 	stw	zero,184(sp)
1000d0a0:	0023883a 	mov	r17,zero
1000d0a4:	01001604 	movi	r4,88
1000d0a8:	01400244 	movi	r5,9
1000d0ac:	02800a84 	movi	r10,42
1000d0b0:	01c01b04 	movi	r7,108
1000d0b4:	10c00044 	addi	r3,r2,1
1000d0b8:	80bff804 	addi	r2,r16,-32
1000d0bc:	2082e436 	bltu	r4,r2,1000dc50 <___svfprintf_internal_r+0xcf4>
1000d0c0:	100490ba 	slli	r2,r2,2
1000d0c4:	02c40074 	movhi	r11,4097
1000d0c8:	5af43604 	addi	r11,r11,-12072
1000d0cc:	12c5883a 	add	r2,r2,r11
1000d0d0:	10800017 	ldw	r2,0(r2)
1000d0d4:	1000683a 	jmp	r2
1000d0d8:	1000da08 	cmpgei	zero,r2,872
1000d0dc:	1000dc50 	cmplti	zero,r2,881
1000d0e0:	1000dc50 	cmplti	zero,r2,881
1000d0e4:	1000db88 	cmpgei	zero,r2,878
1000d0e8:	1000dc50 	cmplti	zero,r2,881
1000d0ec:	1000dc50 	cmplti	zero,r2,881
1000d0f0:	1000dc50 	cmplti	zero,r2,881
1000d0f4:	1000dc50 	cmplti	zero,r2,881
1000d0f8:	1000dc50 	cmplti	zero,r2,881
1000d0fc:	1000dc50 	cmplti	zero,r2,881
1000d100:	1000db4c 	andi	zero,r2,877
1000d104:	1000db78 	rdprs	zero,r2,877
1000d108:	1000dc50 	cmplti	zero,r2,881
1000d10c:	1000d2cc 	andi	zero,r2,843
1000d110:	1000d2dc 	xori	zero,r2,843
1000d114:	1000dc50 	cmplti	zero,r2,881
1000d118:	1000d31c 	xori	zero,r2,844
1000d11c:	1000d32c 	andhi	zero,r2,844
1000d120:	1000d32c 	andhi	zero,r2,844
1000d124:	1000d32c 	andhi	zero,r2,844
1000d128:	1000d32c 	andhi	zero,r2,844
1000d12c:	1000d32c 	andhi	zero,r2,844
1000d130:	1000d32c 	andhi	zero,r2,844
1000d134:	1000d32c 	andhi	zero,r2,844
1000d138:	1000d32c 	andhi	zero,r2,844
1000d13c:	1000d32c 	andhi	zero,r2,844
1000d140:	1000dc50 	cmplti	zero,r2,881
1000d144:	1000dc50 	cmplti	zero,r2,881
1000d148:	1000dc50 	cmplti	zero,r2,881
1000d14c:	1000dc50 	cmplti	zero,r2,881
1000d150:	1000dc50 	cmplti	zero,r2,881
1000d154:	1000dc50 	cmplti	zero,r2,881
1000d158:	1000dc50 	cmplti	zero,r2,881
1000d15c:	1000dc50 	cmplti	zero,r2,881
1000d160:	1000dc50 	cmplti	zero,r2,881
1000d164:	1000dc50 	cmplti	zero,r2,881
1000d168:	1000d360 	cmpeqi	zero,r2,845
1000d16c:	1000d84c 	andi	zero,r2,865
1000d170:	1000dc50 	cmplti	zero,r2,881
1000d174:	1000d84c 	andi	zero,r2,865
1000d178:	1000dc50 	cmplti	zero,r2,881
1000d17c:	1000dc50 	cmplti	zero,r2,881
1000d180:	1000dc50 	cmplti	zero,r2,881
1000d184:	1000dc50 	cmplti	zero,r2,881
1000d188:	1000d938 	rdprs	zero,r2,868
1000d18c:	1000dc50 	cmplti	zero,r2,881
1000d190:	1000dc50 	cmplti	zero,r2,881
1000d194:	1000d7e0 	cmpeqi	zero,r2,863
1000d198:	1000dc50 	cmplti	zero,r2,881
1000d19c:	1000dc50 	cmplti	zero,r2,881
1000d1a0:	1000dc50 	cmplti	zero,r2,881
1000d1a4:	1000dc50 	cmplti	zero,r2,881
1000d1a8:	1000dc50 	cmplti	zero,r2,881
1000d1ac:	1000d81c 	xori	zero,r2,864
1000d1b0:	1000dc50 	cmplti	zero,r2,881
1000d1b4:	1000dc50 	cmplti	zero,r2,881
1000d1b8:	1000da28 	cmpgeui	zero,r2,872
1000d1bc:	1000dc50 	cmplti	zero,r2,881
1000d1c0:	1000dc50 	cmplti	zero,r2,881
1000d1c4:	1000dc50 	cmplti	zero,r2,881
1000d1c8:	1000dc50 	cmplti	zero,r2,881
1000d1cc:	1000dc50 	cmplti	zero,r2,881
1000d1d0:	1000dc50 	cmplti	zero,r2,881
1000d1d4:	1000dc50 	cmplti	zero,r2,881
1000d1d8:	1000dc50 	cmplti	zero,r2,881
1000d1dc:	1000dc50 	cmplti	zero,r2,881
1000d1e0:	1000dc50 	cmplti	zero,r2,881
1000d1e4:	1000db0c 	andi	zero,r2,876
1000d1e8:	1000d948 	cmpgei	zero,r2,869
1000d1ec:	1000d84c 	andi	zero,r2,865
1000d1f0:	1000d84c 	andi	zero,r2,865
1000d1f4:	1000d84c 	andi	zero,r2,865
1000d1f8:	1000d9b0 	cmpltui	zero,r2,870
1000d1fc:	1000d948 	cmpgei	zero,r2,869
1000d200:	1000dc50 	cmplti	zero,r2,881
1000d204:	1000dc50 	cmplti	zero,r2,881
1000d208:	1000d9c0 	call	11000d9c <_gp+0xfd1a34>
1000d20c:	1000dc50 	cmplti	zero,r2,881
1000d210:	1000d9d4 	ori	zero,r2,871
1000d214:	1000dc14 	ori	zero,r2,880
1000d218:	1000d8f0 	cmpltui	zero,r2,867
1000d21c:	1000dafc 	xorhi	zero,r2,875
1000d220:	1000dc50 	cmplti	zero,r2,881
1000d224:	1000da84 	addi	zero,r2,874
1000d228:	1000dc50 	cmplti	zero,r2,881
1000d22c:	1000dbd8 	cmpnei	zero,r2,879
1000d230:	1000dc50 	cmplti	zero,r2,881
1000d234:	1000dc50 	cmplti	zero,r2,881
1000d238:	1000db98 	cmpnei	zero,r2,878
1000d23c:	db002917 	ldw	r12,164(sp)
1000d240:	8323c83a 	sub	r17,r16,r12
1000d244:	003f7e06 	br	1000d040 <__alt_data_end+0xf000d040>
1000d248:	d9002f17 	ldw	r4,188(sp)
1000d24c:	b80b883a 	mov	r5,r23
1000d250:	b00d883a 	mov	r6,r22
1000d254:	0019d080 	call	10019d08 <__ssprint_r>
1000d258:	1000081e 	bne	r2,zero,1000d27c <___svfprintf_internal_r+0x320>
1000d25c:	da000404 	addi	r8,sp,16
1000d260:	003f8406 	br	1000d074 <__alt_data_end+0xf000d074>
1000d264:	d8802017 	ldw	r2,128(sp)
1000d268:	10000426 	beq	r2,zero,1000d27c <___svfprintf_internal_r+0x320>
1000d26c:	d9002f17 	ldw	r4,188(sp)
1000d270:	b80b883a 	mov	r5,r23
1000d274:	d9801e04 	addi	r6,sp,120
1000d278:	0019d080 	call	10019d08 <__ssprint_r>
1000d27c:	b880030b 	ldhu	r2,12(r23)
1000d280:	1080100c 	andi	r2,r2,64
1000d284:	10000d1e 	bne	r2,zero,1000d2bc <___svfprintf_internal_r+0x360>
1000d288:	d8803017 	ldw	r2,192(sp)
1000d28c:	dfc04a17 	ldw	ra,296(sp)
1000d290:	df004917 	ldw	fp,292(sp)
1000d294:	ddc04817 	ldw	r23,288(sp)
1000d298:	dd804717 	ldw	r22,284(sp)
1000d29c:	dd404617 	ldw	r21,280(sp)
1000d2a0:	dd004517 	ldw	r20,276(sp)
1000d2a4:	dcc04417 	ldw	r19,272(sp)
1000d2a8:	dc804317 	ldw	r18,268(sp)
1000d2ac:	dc404217 	ldw	r17,264(sp)
1000d2b0:	dc004117 	ldw	r16,260(sp)
1000d2b4:	dec04b04 	addi	sp,sp,300
1000d2b8:	f800283a 	ret
1000d2bc:	00bfffc4 	movi	r2,-1
1000d2c0:	003ff206 	br	1000d28c <__alt_data_end+0xf000d28c>
1000d2c4:	dc002917 	ldw	r16,164(sp)
1000d2c8:	003f6d06 	br	1000d080 <__alt_data_end+0xf000d080>
1000d2cc:	1805883a 	mov	r2,r3
1000d2d0:	8c400114 	ori	r17,r17,4
1000d2d4:	1c000007 	ldb	r16,0(r3)
1000d2d8:	003f7606 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000d2dc:	1c000007 	ldb	r16,0(r3)
1000d2e0:	18800044 	addi	r2,r3,1
1000d2e4:	8286e726 	beq	r16,r10,1000ee84 <___svfprintf_internal_r+0x1f28>
1000d2e8:	82fff404 	addi	r11,r16,-48
1000d2ec:	1007883a 	mov	r3,r2
1000d2f0:	0013883a 	mov	r9,zero
1000d2f4:	2aff7036 	bltu	r5,r11,1000d0b8 <__alt_data_end+0xf000d0b8>
1000d2f8:	1c000007 	ldb	r16,0(r3)
1000d2fc:	4a4002a4 	muli	r9,r9,10
1000d300:	18c00044 	addi	r3,r3,1
1000d304:	5a53883a 	add	r9,r11,r9
1000d308:	82fff404 	addi	r11,r16,-48
1000d30c:	2afffa2e 	bgeu	r5,r11,1000d2f8 <__alt_data_end+0xf000d2f8>
1000d310:	483f690e 	bge	r9,zero,1000d0b8 <__alt_data_end+0xf000d0b8>
1000d314:	027fffc4 	movi	r9,-1
1000d318:	003f6706 	br	1000d0b8 <__alt_data_end+0xf000d0b8>
1000d31c:	8c402014 	ori	r17,r17,128
1000d320:	1805883a 	mov	r2,r3
1000d324:	1c000007 	ldb	r16,0(r3)
1000d328:	003f6206 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000d32c:	1805883a 	mov	r2,r3
1000d330:	d8002e15 	stw	zero,184(sp)
1000d334:	82fff404 	addi	r11,r16,-48
1000d338:	0019883a 	mov	r12,zero
1000d33c:	14000007 	ldb	r16,0(r2)
1000d340:	630002a4 	muli	r12,r12,10
1000d344:	18c00044 	addi	r3,r3,1
1000d348:	1805883a 	mov	r2,r3
1000d34c:	62d9883a 	add	r12,r12,r11
1000d350:	82fff404 	addi	r11,r16,-48
1000d354:	2afff92e 	bgeu	r5,r11,1000d33c <__alt_data_end+0xf000d33c>
1000d358:	db002e15 	stw	r12,184(sp)
1000d35c:	003f5606 	br	1000d0b8 <__alt_data_end+0xf000d0b8>
1000d360:	8c400414 	ori	r17,r17,16
1000d364:	d8c02915 	stw	r3,164(sp)
1000d368:	d9802785 	stb	r6,158(sp)
1000d36c:	8880080c 	andi	r2,r17,32
1000d370:	d8c02d17 	ldw	r3,180(sp)
1000d374:	10017926 	beq	r2,zero,1000d95c <___svfprintf_internal_r+0xa00>
1000d378:	db002d17 	ldw	r12,180(sp)
1000d37c:	18800117 	ldw	r2,4(r3)
1000d380:	1cc00017 	ldw	r19,0(r3)
1000d384:	63000204 	addi	r12,r12,8
1000d388:	db002d15 	stw	r12,180(sp)
1000d38c:	1039883a 	mov	fp,r2
1000d390:	10017d16 	blt	r2,zero,1000d988 <___svfprintf_internal_r+0xa2c>
1000d394:	dd402783 	ldbu	r21,158(sp)
1000d398:	da403215 	stw	r9,200(sp)
1000d39c:	00800044 	movi	r2,1
1000d3a0:	9f06b03a 	or	r3,r19,fp
1000d3a4:	48000216 	blt	r9,zero,1000d3b0 <___svfprintf_internal_r+0x454>
1000d3a8:	013fdfc4 	movi	r4,-129
1000d3ac:	8922703a 	and	r17,r17,r4
1000d3b0:	1802371e 	bne	r3,zero,1000dc90 <___svfprintf_internal_r+0xd34>
1000d3b4:	48034526 	beq	r9,zero,1000e0cc <___svfprintf_internal_r+0x1170>
1000d3b8:	10803fcc 	andi	r2,r2,255
1000d3bc:	00c00044 	movi	r3,1
1000d3c0:	10c25826 	beq	r2,r3,1000dd24 <___svfprintf_internal_r+0xdc8>
1000d3c4:	00c00084 	movi	r3,2
1000d3c8:	10c2db26 	beq	r2,r3,1000df38 <___svfprintf_internal_r+0xfdc>
1000d3cc:	b007883a 	mov	r3,r22
1000d3d0:	9808d0fa 	srli	r4,r19,3
1000d3d4:	e00a977a 	slli	r5,fp,29
1000d3d8:	e038d0fa 	srli	fp,fp,3
1000d3dc:	9cc001cc 	andi	r19,r19,7
1000d3e0:	98800c04 	addi	r2,r19,48
1000d3e4:	18ffffc4 	addi	r3,r3,-1
1000d3e8:	2926b03a 	or	r19,r5,r4
1000d3ec:	18800005 	stb	r2,0(r3)
1000d3f0:	9f08b03a 	or	r4,r19,fp
1000d3f4:	203ff61e 	bne	r4,zero,1000d3d0 <__alt_data_end+0xf000d3d0>
1000d3f8:	8900004c 	andi	r4,r17,1
1000d3fc:	d8c03115 	stw	r3,196(sp)
1000d400:	2002db26 	beq	r4,zero,1000df70 <___svfprintf_internal_r+0x1014>
1000d404:	10803fcc 	andi	r2,r2,255
1000d408:	1080201c 	xori	r2,r2,128
1000d40c:	10bfe004 	addi	r2,r2,-128
1000d410:	01000c04 	movi	r4,48
1000d414:	11056626 	beq	r2,r4,1000e9b0 <___svfprintf_internal_r+0x1a54>
1000d418:	dac03117 	ldw	r11,196(sp)
1000d41c:	193fffc5 	stb	r4,-1(r3)
1000d420:	5affffc4 	addi	r11,r11,-1
1000d424:	dac03115 	stw	r11,196(sp)
1000d428:	b2e5c83a 	sub	r18,r22,r11
1000d42c:	9005883a 	mov	r2,r18
1000d430:	9240010e 	bge	r18,r9,1000d438 <___svfprintf_internal_r+0x4dc>
1000d434:	4805883a 	mov	r2,r9
1000d438:	d8802a15 	stw	r2,168(sp)
1000d43c:	d8003415 	stw	zero,208(sp)
1000d440:	a8803fcc 	andi	r2,r21,255
1000d444:	1080201c 	xori	r2,r2,128
1000d448:	10bfe004 	addi	r2,r2,-128
1000d44c:	10000326 	beq	r2,zero,1000d45c <___svfprintf_internal_r+0x500>
1000d450:	d8c02a17 	ldw	r3,168(sp)
1000d454:	18c00044 	addi	r3,r3,1
1000d458:	d8c02a15 	stw	r3,168(sp)
1000d45c:	8ac0008c 	andi	r11,r17,2
1000d460:	dac02b15 	stw	r11,172(sp)
1000d464:	58000326 	beq	r11,zero,1000d474 <___svfprintf_internal_r+0x518>
1000d468:	db002a17 	ldw	r12,168(sp)
1000d46c:	63000084 	addi	r12,r12,2
1000d470:	db002a15 	stw	r12,168(sp)
1000d474:	88c0210c 	andi	r3,r17,132
1000d478:	d8c02c15 	stw	r3,176(sp)
1000d47c:	1802021e 	bne	r3,zero,1000dc88 <___svfprintf_internal_r+0xd2c>
1000d480:	dac02e17 	ldw	r11,184(sp)
1000d484:	db002a17 	ldw	r12,168(sp)
1000d488:	5b39c83a 	sub	fp,r11,r12
1000d48c:	0701fe0e 	bge	zero,fp,1000dc88 <___svfprintf_internal_r+0xd2c>
1000d490:	02400404 	movi	r9,16
1000d494:	d8c02017 	ldw	r3,128(sp)
1000d498:	d8801f17 	ldw	r2,124(sp)
1000d49c:	4f057d0e 	bge	r9,fp,1000ea94 <___svfprintf_internal_r+0x1b38>
1000d4a0:	014400b4 	movhi	r5,4098
1000d4a4:	e009883a 	mov	r4,fp
1000d4a8:	29544984 	addi	r5,r5,20774
1000d4ac:	dc003c15 	stw	r16,240(sp)
1000d4b0:	9039883a 	mov	fp,r18
1000d4b4:	d9403615 	stw	r5,216(sp)
1000d4b8:	8825883a 	mov	r18,r17
1000d4bc:	482b883a 	mov	r21,r9
1000d4c0:	04c001c4 	movi	r19,7
1000d4c4:	dc002f17 	ldw	r16,188(sp)
1000d4c8:	2023883a 	mov	r17,r4
1000d4cc:	00000306 	br	1000d4dc <___svfprintf_internal_r+0x580>
1000d4d0:	8c7ffc04 	addi	r17,r17,-16
1000d4d4:	42000204 	addi	r8,r8,8
1000d4d8:	ac40130e 	bge	r21,r17,1000d528 <___svfprintf_internal_r+0x5cc>
1000d4dc:	02c400b4 	movhi	r11,4098
1000d4e0:	18c00404 	addi	r3,r3,16
1000d4e4:	10800044 	addi	r2,r2,1
1000d4e8:	5ad44984 	addi	r11,r11,20774
1000d4ec:	42c00015 	stw	r11,0(r8)
1000d4f0:	45400115 	stw	r21,4(r8)
1000d4f4:	d8c02015 	stw	r3,128(sp)
1000d4f8:	d8801f15 	stw	r2,124(sp)
1000d4fc:	98bff40e 	bge	r19,r2,1000d4d0 <__alt_data_end+0xf000d4d0>
1000d500:	8009883a 	mov	r4,r16
1000d504:	b80b883a 	mov	r5,r23
1000d508:	b00d883a 	mov	r6,r22
1000d50c:	0019d080 	call	10019d08 <__ssprint_r>
1000d510:	103f5a1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000d514:	8c7ffc04 	addi	r17,r17,-16
1000d518:	d8c02017 	ldw	r3,128(sp)
1000d51c:	d8801f17 	ldw	r2,124(sp)
1000d520:	da000404 	addi	r8,sp,16
1000d524:	ac7fed16 	blt	r21,r17,1000d4dc <__alt_data_end+0xf000d4dc>
1000d528:	dc003c17 	ldw	r16,240(sp)
1000d52c:	8809883a 	mov	r4,r17
1000d530:	9023883a 	mov	r17,r18
1000d534:	e025883a 	mov	r18,fp
1000d538:	2039883a 	mov	fp,r4
1000d53c:	db003617 	ldw	r12,216(sp)
1000d540:	e0c7883a 	add	r3,fp,r3
1000d544:	10800044 	addi	r2,r2,1
1000d548:	43000015 	stw	r12,0(r8)
1000d54c:	47000115 	stw	fp,4(r8)
1000d550:	d8c02015 	stw	r3,128(sp)
1000d554:	d8801f15 	stw	r2,124(sp)
1000d558:	010001c4 	movi	r4,7
1000d55c:	20833516 	blt	r4,r2,1000e234 <___svfprintf_internal_r+0x12d8>
1000d560:	d8802787 	ldb	r2,158(sp)
1000d564:	42000204 	addi	r8,r8,8
1000d568:	10000c26 	beq	r2,zero,1000d59c <___svfprintf_internal_r+0x640>
1000d56c:	d8801f17 	ldw	r2,124(sp)
1000d570:	d9002784 	addi	r4,sp,158
1000d574:	18c00044 	addi	r3,r3,1
1000d578:	10800044 	addi	r2,r2,1
1000d57c:	41000015 	stw	r4,0(r8)
1000d580:	01000044 	movi	r4,1
1000d584:	41000115 	stw	r4,4(r8)
1000d588:	d8c02015 	stw	r3,128(sp)
1000d58c:	d8801f15 	stw	r2,124(sp)
1000d590:	010001c4 	movi	r4,7
1000d594:	2082df16 	blt	r4,r2,1000e114 <___svfprintf_internal_r+0x11b8>
1000d598:	42000204 	addi	r8,r8,8
1000d59c:	dac02b17 	ldw	r11,172(sp)
1000d5a0:	58000c26 	beq	r11,zero,1000d5d4 <___svfprintf_internal_r+0x678>
1000d5a4:	d8801f17 	ldw	r2,124(sp)
1000d5a8:	d9002704 	addi	r4,sp,156
1000d5ac:	18c00084 	addi	r3,r3,2
1000d5b0:	10800044 	addi	r2,r2,1
1000d5b4:	41000015 	stw	r4,0(r8)
1000d5b8:	01000084 	movi	r4,2
1000d5bc:	41000115 	stw	r4,4(r8)
1000d5c0:	d8c02015 	stw	r3,128(sp)
1000d5c4:	d8801f15 	stw	r2,124(sp)
1000d5c8:	010001c4 	movi	r4,7
1000d5cc:	2082d916 	blt	r4,r2,1000e134 <___svfprintf_internal_r+0x11d8>
1000d5d0:	42000204 	addi	r8,r8,8
1000d5d4:	db002c17 	ldw	r12,176(sp)
1000d5d8:	00802004 	movi	r2,128
1000d5dc:	60822026 	beq	r12,r2,1000de60 <___svfprintf_internal_r+0xf04>
1000d5e0:	db003217 	ldw	r12,200(sp)
1000d5e4:	64abc83a 	sub	r21,r12,r18
1000d5e8:	0540310e 	bge	zero,r21,1000d6b0 <___svfprintf_internal_r+0x754>
1000d5ec:	07000404 	movi	fp,16
1000d5f0:	d8801f17 	ldw	r2,124(sp)
1000d5f4:	e544180e 	bge	fp,r21,1000e658 <___svfprintf_internal_r+0x16fc>
1000d5f8:	014400b4 	movhi	r5,4098
1000d5fc:	a809883a 	mov	r4,r21
1000d600:	29544584 	addi	r5,r5,20758
1000d604:	dc002c15 	stw	r16,176(sp)
1000d608:	902b883a 	mov	r21,r18
1000d60c:	d9402b15 	stw	r5,172(sp)
1000d610:	8825883a 	mov	r18,r17
1000d614:	04c001c4 	movi	r19,7
1000d618:	dc002f17 	ldw	r16,188(sp)
1000d61c:	2023883a 	mov	r17,r4
1000d620:	00000306 	br	1000d630 <___svfprintf_internal_r+0x6d4>
1000d624:	8c7ffc04 	addi	r17,r17,-16
1000d628:	42000204 	addi	r8,r8,8
1000d62c:	e440110e 	bge	fp,r17,1000d674 <___svfprintf_internal_r+0x718>
1000d630:	18c00404 	addi	r3,r3,16
1000d634:	10800044 	addi	r2,r2,1
1000d638:	45000015 	stw	r20,0(r8)
1000d63c:	47000115 	stw	fp,4(r8)
1000d640:	d8c02015 	stw	r3,128(sp)
1000d644:	d8801f15 	stw	r2,124(sp)
1000d648:	98bff60e 	bge	r19,r2,1000d624 <__alt_data_end+0xf000d624>
1000d64c:	8009883a 	mov	r4,r16
1000d650:	b80b883a 	mov	r5,r23
1000d654:	b00d883a 	mov	r6,r22
1000d658:	0019d080 	call	10019d08 <__ssprint_r>
1000d65c:	103f071e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000d660:	8c7ffc04 	addi	r17,r17,-16
1000d664:	d8c02017 	ldw	r3,128(sp)
1000d668:	d8801f17 	ldw	r2,124(sp)
1000d66c:	da000404 	addi	r8,sp,16
1000d670:	e47fef16 	blt	fp,r17,1000d630 <__alt_data_end+0xf000d630>
1000d674:	dc002c17 	ldw	r16,176(sp)
1000d678:	8809883a 	mov	r4,r17
1000d67c:	9023883a 	mov	r17,r18
1000d680:	a825883a 	mov	r18,r21
1000d684:	202b883a 	mov	r21,r4
1000d688:	dac02b17 	ldw	r11,172(sp)
1000d68c:	1d47883a 	add	r3,r3,r21
1000d690:	10800044 	addi	r2,r2,1
1000d694:	42c00015 	stw	r11,0(r8)
1000d698:	45400115 	stw	r21,4(r8)
1000d69c:	d8c02015 	stw	r3,128(sp)
1000d6a0:	d8801f15 	stw	r2,124(sp)
1000d6a4:	010001c4 	movi	r4,7
1000d6a8:	20829216 	blt	r4,r2,1000e0f4 <___svfprintf_internal_r+0x1198>
1000d6ac:	42000204 	addi	r8,r8,8
1000d6b0:	8880400c 	andi	r2,r17,256
1000d6b4:	1001a11e 	bne	r2,zero,1000dd3c <___svfprintf_internal_r+0xde0>
1000d6b8:	d8801f17 	ldw	r2,124(sp)
1000d6bc:	db003117 	ldw	r12,196(sp)
1000d6c0:	1c87883a 	add	r3,r3,r18
1000d6c4:	10800044 	addi	r2,r2,1
1000d6c8:	43000015 	stw	r12,0(r8)
1000d6cc:	44800115 	stw	r18,4(r8)
1000d6d0:	d8c02015 	stw	r3,128(sp)
1000d6d4:	d8801f15 	stw	r2,124(sp)
1000d6d8:	010001c4 	movi	r4,7
1000d6dc:	20826d16 	blt	r4,r2,1000e094 <___svfprintf_internal_r+0x1138>
1000d6e0:	42000204 	addi	r8,r8,8
1000d6e4:	8c40010c 	andi	r17,r17,4
1000d6e8:	88003226 	beq	r17,zero,1000d7b4 <___svfprintf_internal_r+0x858>
1000d6ec:	db002e17 	ldw	r12,184(sp)
1000d6f0:	dac02a17 	ldw	r11,168(sp)
1000d6f4:	62e1c83a 	sub	r16,r12,r11
1000d6f8:	04002e0e 	bge	zero,r16,1000d7b4 <___svfprintf_internal_r+0x858>
1000d6fc:	04400404 	movi	r17,16
1000d700:	d8801f17 	ldw	r2,124(sp)
1000d704:	8c05240e 	bge	r17,r16,1000eb98 <___svfprintf_internal_r+0x1c3c>
1000d708:	010400b4 	movhi	r4,4098
1000d70c:	21144984 	addi	r4,r4,20774
1000d710:	d9003615 	stw	r4,216(sp)
1000d714:	048001c4 	movi	r18,7
1000d718:	dcc02f17 	ldw	r19,188(sp)
1000d71c:	00000306 	br	1000d72c <___svfprintf_internal_r+0x7d0>
1000d720:	843ffc04 	addi	r16,r16,-16
1000d724:	42000204 	addi	r8,r8,8
1000d728:	8c00130e 	bge	r17,r16,1000d778 <___svfprintf_internal_r+0x81c>
1000d72c:	014400b4 	movhi	r5,4098
1000d730:	18c00404 	addi	r3,r3,16
1000d734:	10800044 	addi	r2,r2,1
1000d738:	29544984 	addi	r5,r5,20774
1000d73c:	41400015 	stw	r5,0(r8)
1000d740:	44400115 	stw	r17,4(r8)
1000d744:	d8c02015 	stw	r3,128(sp)
1000d748:	d8801f15 	stw	r2,124(sp)
1000d74c:	90bff40e 	bge	r18,r2,1000d720 <__alt_data_end+0xf000d720>
1000d750:	9809883a 	mov	r4,r19
1000d754:	b80b883a 	mov	r5,r23
1000d758:	b00d883a 	mov	r6,r22
1000d75c:	0019d080 	call	10019d08 <__ssprint_r>
1000d760:	103ec61e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000d764:	843ffc04 	addi	r16,r16,-16
1000d768:	d8c02017 	ldw	r3,128(sp)
1000d76c:	d8801f17 	ldw	r2,124(sp)
1000d770:	da000404 	addi	r8,sp,16
1000d774:	8c3fed16 	blt	r17,r16,1000d72c <__alt_data_end+0xf000d72c>
1000d778:	dac03617 	ldw	r11,216(sp)
1000d77c:	1c07883a 	add	r3,r3,r16
1000d780:	10800044 	addi	r2,r2,1
1000d784:	42c00015 	stw	r11,0(r8)
1000d788:	44000115 	stw	r16,4(r8)
1000d78c:	d8c02015 	stw	r3,128(sp)
1000d790:	d8801f15 	stw	r2,124(sp)
1000d794:	010001c4 	movi	r4,7
1000d798:	2080060e 	bge	r4,r2,1000d7b4 <___svfprintf_internal_r+0x858>
1000d79c:	d9002f17 	ldw	r4,188(sp)
1000d7a0:	b80b883a 	mov	r5,r23
1000d7a4:	b00d883a 	mov	r6,r22
1000d7a8:	0019d080 	call	10019d08 <__ssprint_r>
1000d7ac:	103eb31e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000d7b0:	d8c02017 	ldw	r3,128(sp)
1000d7b4:	d8802a17 	ldw	r2,168(sp)
1000d7b8:	db002e17 	ldw	r12,184(sp)
1000d7bc:	1300010e 	bge	r2,r12,1000d7c4 <___svfprintf_internal_r+0x868>
1000d7c0:	6005883a 	mov	r2,r12
1000d7c4:	dac03017 	ldw	r11,192(sp)
1000d7c8:	5897883a 	add	r11,r11,r2
1000d7cc:	dac03015 	stw	r11,192(sp)
1000d7d0:	1802381e 	bne	r3,zero,1000e0b4 <___svfprintf_internal_r+0x1158>
1000d7d4:	d8001f15 	stw	zero,124(sp)
1000d7d8:	da000404 	addi	r8,sp,16
1000d7dc:	003e0b06 	br	1000d00c <__alt_data_end+0xf000d00c>
1000d7e0:	8c400414 	ori	r17,r17,16
1000d7e4:	d8c02915 	stw	r3,164(sp)
1000d7e8:	8880080c 	andi	r2,r17,32
1000d7ec:	10010c26 	beq	r2,zero,1000dc20 <___svfprintf_internal_r+0xcc4>
1000d7f0:	db002d17 	ldw	r12,180(sp)
1000d7f4:	0005883a 	mov	r2,zero
1000d7f8:	64c00017 	ldw	r19,0(r12)
1000d7fc:	67000117 	ldw	fp,4(r12)
1000d800:	63000204 	addi	r12,r12,8
1000d804:	db002d15 	stw	r12,180(sp)
1000d808:	9f06b03a 	or	r3,r19,fp
1000d80c:	d8002785 	stb	zero,158(sp)
1000d810:	da403215 	stw	r9,200(sp)
1000d814:	002b883a 	mov	r21,zero
1000d818:	003ee206 	br	1000d3a4 <__alt_data_end+0xf000d3a4>
1000d81c:	8c400414 	ori	r17,r17,16
1000d820:	d8c02915 	stw	r3,164(sp)
1000d824:	8880080c 	andi	r2,r17,32
1000d828:	1000ee26 	beq	r2,zero,1000dbe4 <___svfprintf_internal_r+0xc88>
1000d82c:	dac02d17 	ldw	r11,180(sp)
1000d830:	00800044 	movi	r2,1
1000d834:	5cc00017 	ldw	r19,0(r11)
1000d838:	5f000117 	ldw	fp,4(r11)
1000d83c:	5ac00204 	addi	r11,r11,8
1000d840:	dac02d15 	stw	r11,180(sp)
1000d844:	9f06b03a 	or	r3,r19,fp
1000d848:	003ff006 	br	1000d80c <__alt_data_end+0xf000d80c>
1000d84c:	db002d17 	ldw	r12,180(sp)
1000d850:	dac02d17 	ldw	r11,180(sp)
1000d854:	d8c02915 	stw	r3,164(sp)
1000d858:	63000017 	ldw	r12,0(r12)
1000d85c:	5ac00117 	ldw	r11,4(r11)
1000d860:	d9802785 	stb	r6,158(sp)
1000d864:	6009883a 	mov	r4,r12
1000d868:	580b883a 	mov	r5,r11
1000d86c:	db003715 	stw	r12,220(sp)
1000d870:	da004015 	stw	r8,256(sp)
1000d874:	da403f15 	stw	r9,252(sp)
1000d878:	dac03815 	stw	r11,224(sp)
1000d87c:	0017a240 	call	10017a24 <__fpclassifyd>
1000d880:	db002d17 	ldw	r12,180(sp)
1000d884:	04800044 	movi	r18,1
1000d888:	da004017 	ldw	r8,256(sp)
1000d88c:	64c00204 	addi	r19,r12,8
1000d890:	da403f17 	ldw	r9,252(sp)
1000d894:	d9003717 	ldw	r4,220(sp)
1000d898:	d9403817 	ldw	r5,224(sp)
1000d89c:	14832c1e 	bne	r2,r18,1000e550 <___svfprintf_internal_r+0x15f4>
1000d8a0:	000d883a 	mov	r6,zero
1000d8a4:	000f883a 	mov	r7,zero
1000d8a8:	001fd440 	call	1001fd44 <__ledf2>
1000d8ac:	da004017 	ldw	r8,256(sp)
1000d8b0:	1004c416 	blt	r2,zero,1000ebc4 <___svfprintf_internal_r+0x1c68>
1000d8b4:	dd402783 	ldbu	r21,158(sp)
1000d8b8:	008011c4 	movi	r2,71
1000d8bc:	14041a0e 	bge	r2,r16,1000e928 <___svfprintf_internal_r+0x19cc>
1000d8c0:	00c400b4 	movhi	r3,4098
1000d8c4:	18d43604 	addi	r3,r3,20696
1000d8c8:	d8c03115 	stw	r3,196(sp)
1000d8cc:	02c000c4 	movi	r11,3
1000d8d0:	00bfdfc4 	movi	r2,-129
1000d8d4:	dac02a15 	stw	r11,168(sp)
1000d8d8:	88a2703a 	and	r17,r17,r2
1000d8dc:	dcc02d15 	stw	r19,180(sp)
1000d8e0:	5825883a 	mov	r18,r11
1000d8e4:	d8003215 	stw	zero,200(sp)
1000d8e8:	d8003415 	stw	zero,208(sp)
1000d8ec:	003ed406 	br	1000d440 <__alt_data_end+0xf000d440>
1000d8f0:	db002d17 	ldw	r12,180(sp)
1000d8f4:	00800c04 	movi	r2,48
1000d8f8:	d8802705 	stb	r2,156(sp)
1000d8fc:	64c00017 	ldw	r19,0(r12)
1000d900:	00801e04 	movi	r2,120
1000d904:	d8802745 	stb	r2,157(sp)
1000d908:	008400b4 	movhi	r2,4098
1000d90c:	10943e04 	addi	r2,r2,20728
1000d910:	63000104 	addi	r12,r12,4
1000d914:	d8c02915 	stw	r3,164(sp)
1000d918:	d8803b15 	stw	r2,236(sp)
1000d91c:	0039883a 	mov	fp,zero
1000d920:	8c400094 	ori	r17,r17,2
1000d924:	db002d15 	stw	r12,180(sp)
1000d928:	00800084 	movi	r2,2
1000d92c:	04001e04 	movi	r16,120
1000d930:	9807883a 	mov	r3,r19
1000d934:	003fb506 	br	1000d80c <__alt_data_end+0xf000d80c>
1000d938:	8c400214 	ori	r17,r17,8
1000d93c:	1805883a 	mov	r2,r3
1000d940:	1c000007 	ldb	r16,0(r3)
1000d944:	003ddb06 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000d948:	d8c02915 	stw	r3,164(sp)
1000d94c:	d9802785 	stb	r6,158(sp)
1000d950:	8880080c 	andi	r2,r17,32
1000d954:	d8c02d17 	ldw	r3,180(sp)
1000d958:	103e871e 	bne	r2,zero,1000d378 <__alt_data_end+0xf000d378>
1000d95c:	8880040c 	andi	r2,r17,16
1000d960:	10027a1e 	bne	r2,zero,1000e34c <___svfprintf_internal_r+0x13f0>
1000d964:	8880100c 	andi	r2,r17,64
1000d968:	10027826 	beq	r2,zero,1000e34c <___svfprintf_internal_r+0x13f0>
1000d96c:	1cc0000f 	ldh	r19,0(r3)
1000d970:	db002d17 	ldw	r12,180(sp)
1000d974:	9839d7fa 	srai	fp,r19,31
1000d978:	63000104 	addi	r12,r12,4
1000d97c:	db002d15 	stw	r12,180(sp)
1000d980:	e005883a 	mov	r2,fp
1000d984:	103e830e 	bge	r2,zero,1000d394 <__alt_data_end+0xf000d394>
1000d988:	04e7c83a 	sub	r19,zero,r19
1000d98c:	9804c03a 	cmpne	r2,r19,zero
1000d990:	0739c83a 	sub	fp,zero,fp
1000d994:	e0b9c83a 	sub	fp,fp,r2
1000d998:	05400b44 	movi	r21,45
1000d99c:	dd402785 	stb	r21,158(sp)
1000d9a0:	da403215 	stw	r9,200(sp)
1000d9a4:	00800044 	movi	r2,1
1000d9a8:	9f06b03a 	or	r3,r19,fp
1000d9ac:	003e7d06 	br	1000d3a4 <__alt_data_end+0xf000d3a4>
1000d9b0:	8c401014 	ori	r17,r17,64
1000d9b4:	1805883a 	mov	r2,r3
1000d9b8:	1c000007 	ldb	r16,0(r3)
1000d9bc:	003dbd06 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000d9c0:	1c000007 	ldb	r16,0(r3)
1000d9c4:	81c37126 	beq	r16,r7,1000e78c <___svfprintf_internal_r+0x1830>
1000d9c8:	8c400414 	ori	r17,r17,16
1000d9cc:	1805883a 	mov	r2,r3
1000d9d0:	003db806 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000d9d4:	d8c02915 	stw	r3,164(sp)
1000d9d8:	d9802785 	stb	r6,158(sp)
1000d9dc:	8880080c 	andi	r2,r17,32
1000d9e0:	1002f026 	beq	r2,zero,1000e5a4 <___svfprintf_internal_r+0x1648>
1000d9e4:	db002d17 	ldw	r12,180(sp)
1000d9e8:	dac03017 	ldw	r11,192(sp)
1000d9ec:	60800017 	ldw	r2,0(r12)
1000d9f0:	5807d7fa 	srai	r3,r11,31
1000d9f4:	63000104 	addi	r12,r12,4
1000d9f8:	db002d15 	stw	r12,180(sp)
1000d9fc:	12c00015 	stw	r11,0(r2)
1000da00:	10c00115 	stw	r3,4(r2)
1000da04:	003d8106 	br	1000d00c <__alt_data_end+0xf000d00c>
1000da08:	30803fcc 	andi	r2,r6,255
1000da0c:	1080201c 	xori	r2,r2,128
1000da10:	10bfe004 	addi	r2,r2,-128
1000da14:	1002fd1e 	bne	r2,zero,1000e60c <___svfprintf_internal_r+0x16b0>
1000da18:	1805883a 	mov	r2,r3
1000da1c:	01800804 	movi	r6,32
1000da20:	1c000007 	ldb	r16,0(r3)
1000da24:	003da306 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000da28:	030400b4 	movhi	r12,4098
1000da2c:	63143904 	addi	r12,r12,20708
1000da30:	d8c02915 	stw	r3,164(sp)
1000da34:	d9802785 	stb	r6,158(sp)
1000da38:	db003b15 	stw	r12,236(sp)
1000da3c:	88c0080c 	andi	r3,r17,32
1000da40:	d8802d17 	ldw	r2,180(sp)
1000da44:	18005c26 	beq	r3,zero,1000dbb8 <___svfprintf_internal_r+0xc5c>
1000da48:	dac02d17 	ldw	r11,180(sp)
1000da4c:	14c00017 	ldw	r19,0(r2)
1000da50:	17000117 	ldw	fp,4(r2)
1000da54:	5ac00204 	addi	r11,r11,8
1000da58:	dac02d15 	stw	r11,180(sp)
1000da5c:	8880004c 	andi	r2,r17,1
1000da60:	10022f26 	beq	r2,zero,1000e320 <___svfprintf_internal_r+0x13c4>
1000da64:	9f06b03a 	or	r3,r19,fp
1000da68:	1802eb26 	beq	r3,zero,1000e618 <___svfprintf_internal_r+0x16bc>
1000da6c:	00800c04 	movi	r2,48
1000da70:	d8802705 	stb	r2,156(sp)
1000da74:	dc002745 	stb	r16,157(sp)
1000da78:	8c400094 	ori	r17,r17,2
1000da7c:	00800084 	movi	r2,2
1000da80:	003f6206 	br	1000d80c <__alt_data_end+0xf000d80c>
1000da84:	dac02d17 	ldw	r11,180(sp)
1000da88:	db002d17 	ldw	r12,180(sp)
1000da8c:	d8c02915 	stw	r3,164(sp)
1000da90:	5ac00017 	ldw	r11,0(r11)
1000da94:	d8002785 	stb	zero,158(sp)
1000da98:	64c00104 	addi	r19,r12,4
1000da9c:	dac03115 	stw	r11,196(sp)
1000daa0:	58042e26 	beq	r11,zero,1000eb5c <___svfprintf_internal_r+0x1c00>
1000daa4:	d9003117 	ldw	r4,196(sp)
1000daa8:	4803c416 	blt	r9,zero,1000e9bc <___svfprintf_internal_r+0x1a60>
1000daac:	480d883a 	mov	r6,r9
1000dab0:	000b883a 	mov	r5,zero
1000dab4:	da004015 	stw	r8,256(sp)
1000dab8:	da403f15 	stw	r9,252(sp)
1000dabc:	00160f00 	call	100160f0 <memchr>
1000dac0:	da004017 	ldw	r8,256(sp)
1000dac4:	da403f17 	ldw	r9,252(sp)
1000dac8:	10048a26 	beq	r2,zero,1000ecf4 <___svfprintf_internal_r+0x1d98>
1000dacc:	d8c03117 	ldw	r3,196(sp)
1000dad0:	10e5c83a 	sub	r18,r2,r3
1000dad4:	4c80010e 	bge	r9,r18,1000dadc <___svfprintf_internal_r+0xb80>
1000dad8:	4825883a 	mov	r18,r9
1000dadc:	9005883a 	mov	r2,r18
1000dae0:	9003bb16 	blt	r18,zero,1000e9d0 <___svfprintf_internal_r+0x1a74>
1000dae4:	dd402783 	ldbu	r21,158(sp)
1000dae8:	d8802a15 	stw	r2,168(sp)
1000daec:	dcc02d15 	stw	r19,180(sp)
1000daf0:	d8003215 	stw	zero,200(sp)
1000daf4:	d8003415 	stw	zero,208(sp)
1000daf8:	003e5106 	br	1000d440 <__alt_data_end+0xf000d440>
1000dafc:	8c400814 	ori	r17,r17,32
1000db00:	1805883a 	mov	r2,r3
1000db04:	1c000007 	ldb	r16,0(r3)
1000db08:	003d6a06 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000db0c:	db002d17 	ldw	r12,180(sp)
1000db10:	d8c02915 	stw	r3,164(sp)
1000db14:	dac01404 	addi	r11,sp,80
1000db18:	60800017 	ldw	r2,0(r12)
1000db1c:	00c00044 	movi	r3,1
1000db20:	63000104 	addi	r12,r12,4
1000db24:	d8801405 	stb	r2,80(sp)
1000db28:	d8c02a15 	stw	r3,168(sp)
1000db2c:	d8002785 	stb	zero,158(sp)
1000db30:	db002d15 	stw	r12,180(sp)
1000db34:	1825883a 	mov	r18,r3
1000db38:	d8003215 	stw	zero,200(sp)
1000db3c:	d8003415 	stw	zero,208(sp)
1000db40:	dac03115 	stw	r11,196(sp)
1000db44:	0005883a 	mov	r2,zero
1000db48:	003e4406 	br	1000d45c <__alt_data_end+0xf000d45c>
1000db4c:	dac02d17 	ldw	r11,180(sp)
1000db50:	db002d17 	ldw	r12,180(sp)
1000db54:	5ac00017 	ldw	r11,0(r11)
1000db58:	dac02e15 	stw	r11,184(sp)
1000db5c:	62c00104 	addi	r11,r12,4
1000db60:	db002e17 	ldw	r12,184(sp)
1000db64:	60030316 	blt	r12,zero,1000e774 <___svfprintf_internal_r+0x1818>
1000db68:	dac02d15 	stw	r11,180(sp)
1000db6c:	1805883a 	mov	r2,r3
1000db70:	1c000007 	ldb	r16,0(r3)
1000db74:	003d4f06 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000db78:	1805883a 	mov	r2,r3
1000db7c:	01800ac4 	movi	r6,43
1000db80:	1c000007 	ldb	r16,0(r3)
1000db84:	003d4b06 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000db88:	8c400054 	ori	r17,r17,1
1000db8c:	1805883a 	mov	r2,r3
1000db90:	1c000007 	ldb	r16,0(r3)
1000db94:	003d4706 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000db98:	008400b4 	movhi	r2,4098
1000db9c:	10943e04 	addi	r2,r2,20728
1000dba0:	d8c02915 	stw	r3,164(sp)
1000dba4:	d8803b15 	stw	r2,236(sp)
1000dba8:	d9802785 	stb	r6,158(sp)
1000dbac:	88c0080c 	andi	r3,r17,32
1000dbb0:	d8802d17 	ldw	r2,180(sp)
1000dbb4:	183fa41e 	bne	r3,zero,1000da48 <__alt_data_end+0xf000da48>
1000dbb8:	88c0040c 	andi	r3,r17,16
1000dbbc:	18028b26 	beq	r3,zero,1000e5ec <___svfprintf_internal_r+0x1690>
1000dbc0:	db002d17 	ldw	r12,180(sp)
1000dbc4:	14c00017 	ldw	r19,0(r2)
1000dbc8:	0039883a 	mov	fp,zero
1000dbcc:	63000104 	addi	r12,r12,4
1000dbd0:	db002d15 	stw	r12,180(sp)
1000dbd4:	003fa106 	br	1000da5c <__alt_data_end+0xf000da5c>
1000dbd8:	d8c02915 	stw	r3,164(sp)
1000dbdc:	8880080c 	andi	r2,r17,32
1000dbe0:	103f121e 	bne	r2,zero,1000d82c <__alt_data_end+0xf000d82c>
1000dbe4:	8880040c 	andi	r2,r17,16
1000dbe8:	1001df1e 	bne	r2,zero,1000e368 <___svfprintf_internal_r+0x140c>
1000dbec:	8880100c 	andi	r2,r17,64
1000dbf0:	1001dd26 	beq	r2,zero,1000e368 <___svfprintf_internal_r+0x140c>
1000dbf4:	dac02d17 	ldw	r11,180(sp)
1000dbf8:	0039883a 	mov	fp,zero
1000dbfc:	00800044 	movi	r2,1
1000dc00:	5cc0000b 	ldhu	r19,0(r11)
1000dc04:	5ac00104 	addi	r11,r11,4
1000dc08:	dac02d15 	stw	r11,180(sp)
1000dc0c:	9807883a 	mov	r3,r19
1000dc10:	003efe06 	br	1000d80c <__alt_data_end+0xf000d80c>
1000dc14:	d8c02915 	stw	r3,164(sp)
1000dc18:	8880080c 	andi	r2,r17,32
1000dc1c:	103ef41e 	bne	r2,zero,1000d7f0 <__alt_data_end+0xf000d7f0>
1000dc20:	8880040c 	andi	r2,r17,16
1000dc24:	1001c11e 	bne	r2,zero,1000e32c <___svfprintf_internal_r+0x13d0>
1000dc28:	8880100c 	andi	r2,r17,64
1000dc2c:	1001bf26 	beq	r2,zero,1000e32c <___svfprintf_internal_r+0x13d0>
1000dc30:	db002d17 	ldw	r12,180(sp)
1000dc34:	0039883a 	mov	fp,zero
1000dc38:	0005883a 	mov	r2,zero
1000dc3c:	64c0000b 	ldhu	r19,0(r12)
1000dc40:	63000104 	addi	r12,r12,4
1000dc44:	db002d15 	stw	r12,180(sp)
1000dc48:	9807883a 	mov	r3,r19
1000dc4c:	003eef06 	br	1000d80c <__alt_data_end+0xf000d80c>
1000dc50:	d8c02915 	stw	r3,164(sp)
1000dc54:	d9802785 	stb	r6,158(sp)
1000dc58:	803d8226 	beq	r16,zero,1000d264 <__alt_data_end+0xf000d264>
1000dc5c:	02c00044 	movi	r11,1
1000dc60:	db001404 	addi	r12,sp,80
1000dc64:	dac02a15 	stw	r11,168(sp)
1000dc68:	dc001405 	stb	r16,80(sp)
1000dc6c:	d8002785 	stb	zero,158(sp)
1000dc70:	5825883a 	mov	r18,r11
1000dc74:	d8003215 	stw	zero,200(sp)
1000dc78:	d8003415 	stw	zero,208(sp)
1000dc7c:	db003115 	stw	r12,196(sp)
1000dc80:	0005883a 	mov	r2,zero
1000dc84:	003df506 	br	1000d45c <__alt_data_end+0xf000d45c>
1000dc88:	d8c02017 	ldw	r3,128(sp)
1000dc8c:	003e3606 	br	1000d568 <__alt_data_end+0xf000d568>
1000dc90:	10803fcc 	andi	r2,r2,255
1000dc94:	00c00044 	movi	r3,1
1000dc98:	10fdca1e 	bne	r2,r3,1000d3c4 <__alt_data_end+0xf000d3c4>
1000dc9c:	e000021e 	bne	fp,zero,1000dca8 <___svfprintf_internal_r+0xd4c>
1000dca0:	00800244 	movi	r2,9
1000dca4:	14c01f2e 	bgeu	r2,r19,1000dd24 <___svfprintf_internal_r+0xdc8>
1000dca8:	dc002a15 	stw	r16,168(sp)
1000dcac:	dc402b15 	stw	r17,172(sp)
1000dcb0:	9821883a 	mov	r16,r19
1000dcb4:	e023883a 	mov	r17,fp
1000dcb8:	b025883a 	mov	r18,r22
1000dcbc:	4027883a 	mov	r19,r8
1000dcc0:	4839883a 	mov	fp,r9
1000dcc4:	8009883a 	mov	r4,r16
1000dcc8:	880b883a 	mov	r5,r17
1000dccc:	01800284 	movi	r6,10
1000dcd0:	000f883a 	mov	r7,zero
1000dcd4:	001e3040 	call	1001e304 <__umoddi3>
1000dcd8:	10800c04 	addi	r2,r2,48
1000dcdc:	94bfffc4 	addi	r18,r18,-1
1000dce0:	8009883a 	mov	r4,r16
1000dce4:	880b883a 	mov	r5,r17
1000dce8:	01800284 	movi	r6,10
1000dcec:	000f883a 	mov	r7,zero
1000dcf0:	90800005 	stb	r2,0(r18)
1000dcf4:	001dd440 	call	1001dd44 <__udivdi3>
1000dcf8:	1021883a 	mov	r16,r2
1000dcfc:	10c4b03a 	or	r2,r2,r3
1000dd00:	1823883a 	mov	r17,r3
1000dd04:	103fef1e 	bne	r2,zero,1000dcc4 <__alt_data_end+0xf000dcc4>
1000dd08:	dc803115 	stw	r18,196(sp)
1000dd0c:	dc002a17 	ldw	r16,168(sp)
1000dd10:	9811883a 	mov	r8,r19
1000dd14:	dc402b17 	ldw	r17,172(sp)
1000dd18:	e013883a 	mov	r9,fp
1000dd1c:	b4a5c83a 	sub	r18,r22,r18
1000dd20:	003dc206 	br	1000d42c <__alt_data_end+0xf000d42c>
1000dd24:	9cc00c04 	addi	r19,r19,48
1000dd28:	db001dc4 	addi	r12,sp,119
1000dd2c:	dcc01dc5 	stb	r19,119(sp)
1000dd30:	dc803d17 	ldw	r18,244(sp)
1000dd34:	db003115 	stw	r12,196(sp)
1000dd38:	003dbc06 	br	1000d42c <__alt_data_end+0xf000d42c>
1000dd3c:	00801944 	movi	r2,101
1000dd40:	14008d0e 	bge	r2,r16,1000df78 <___svfprintf_internal_r+0x101c>
1000dd44:	d9003717 	ldw	r4,220(sp)
1000dd48:	d9403817 	ldw	r5,224(sp)
1000dd4c:	000d883a 	mov	r6,zero
1000dd50:	000f883a 	mov	r7,zero
1000dd54:	d8c03e15 	stw	r3,248(sp)
1000dd58:	da004015 	stw	r8,256(sp)
1000dd5c:	001fbe00 	call	1001fbe0 <__eqdf2>
1000dd60:	d8c03e17 	ldw	r3,248(sp)
1000dd64:	da004017 	ldw	r8,256(sp)
1000dd68:	1000fd1e 	bne	r2,zero,1000e160 <___svfprintf_internal_r+0x1204>
1000dd6c:	d8801f17 	ldw	r2,124(sp)
1000dd70:	010400b4 	movhi	r4,4098
1000dd74:	21144504 	addi	r4,r4,20756
1000dd78:	18c00044 	addi	r3,r3,1
1000dd7c:	10800044 	addi	r2,r2,1
1000dd80:	41000015 	stw	r4,0(r8)
1000dd84:	01000044 	movi	r4,1
1000dd88:	41000115 	stw	r4,4(r8)
1000dd8c:	d8c02015 	stw	r3,128(sp)
1000dd90:	d8801f15 	stw	r2,124(sp)
1000dd94:	010001c4 	movi	r4,7
1000dd98:	20823316 	blt	r4,r2,1000e668 <___svfprintf_internal_r+0x170c>
1000dd9c:	42000204 	addi	r8,r8,8
1000dda0:	d8802617 	ldw	r2,152(sp)
1000dda4:	dac03317 	ldw	r11,204(sp)
1000dda8:	12c00216 	blt	r2,r11,1000ddb4 <___svfprintf_internal_r+0xe58>
1000ddac:	8880004c 	andi	r2,r17,1
1000ddb0:	103e4c26 	beq	r2,zero,1000d6e4 <__alt_data_end+0xf000d6e4>
1000ddb4:	db003917 	ldw	r12,228(sp)
1000ddb8:	d8801f17 	ldw	r2,124(sp)
1000ddbc:	dac03517 	ldw	r11,212(sp)
1000ddc0:	1b07883a 	add	r3,r3,r12
1000ddc4:	10800044 	addi	r2,r2,1
1000ddc8:	42c00015 	stw	r11,0(r8)
1000ddcc:	43000115 	stw	r12,4(r8)
1000ddd0:	d8c02015 	stw	r3,128(sp)
1000ddd4:	d8801f15 	stw	r2,124(sp)
1000ddd8:	010001c4 	movi	r4,7
1000dddc:	20826f16 	blt	r4,r2,1000e79c <___svfprintf_internal_r+0x1840>
1000dde0:	42000204 	addi	r8,r8,8
1000dde4:	db003317 	ldw	r12,204(sp)
1000dde8:	643fffc4 	addi	r16,r12,-1
1000ddec:	043e3d0e 	bge	zero,r16,1000d6e4 <__alt_data_end+0xf000d6e4>
1000ddf0:	04800404 	movi	r18,16
1000ddf4:	d8801f17 	ldw	r2,124(sp)
1000ddf8:	94009a0e 	bge	r18,r16,1000e064 <___svfprintf_internal_r+0x1108>
1000ddfc:	014400b4 	movhi	r5,4098
1000de00:	29544584 	addi	r5,r5,20758
1000de04:	d9402b15 	stw	r5,172(sp)
1000de08:	054001c4 	movi	r21,7
1000de0c:	dcc02f17 	ldw	r19,188(sp)
1000de10:	00000306 	br	1000de20 <___svfprintf_internal_r+0xec4>
1000de14:	42000204 	addi	r8,r8,8
1000de18:	843ffc04 	addi	r16,r16,-16
1000de1c:	9400940e 	bge	r18,r16,1000e070 <___svfprintf_internal_r+0x1114>
1000de20:	18c00404 	addi	r3,r3,16
1000de24:	10800044 	addi	r2,r2,1
1000de28:	45000015 	stw	r20,0(r8)
1000de2c:	44800115 	stw	r18,4(r8)
1000de30:	d8c02015 	stw	r3,128(sp)
1000de34:	d8801f15 	stw	r2,124(sp)
1000de38:	a8bff60e 	bge	r21,r2,1000de14 <__alt_data_end+0xf000de14>
1000de3c:	9809883a 	mov	r4,r19
1000de40:	b80b883a 	mov	r5,r23
1000de44:	b00d883a 	mov	r6,r22
1000de48:	0019d080 	call	10019d08 <__ssprint_r>
1000de4c:	103d0b1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000de50:	d8c02017 	ldw	r3,128(sp)
1000de54:	d8801f17 	ldw	r2,124(sp)
1000de58:	da000404 	addi	r8,sp,16
1000de5c:	003fee06 	br	1000de18 <__alt_data_end+0xf000de18>
1000de60:	dac02e17 	ldw	r11,184(sp)
1000de64:	db002a17 	ldw	r12,168(sp)
1000de68:	5b2bc83a 	sub	r21,r11,r12
1000de6c:	057ddc0e 	bge	zero,r21,1000d5e0 <__alt_data_end+0xf000d5e0>
1000de70:	07000404 	movi	fp,16
1000de74:	d8801f17 	ldw	r2,124(sp)
1000de78:	e5435d0e 	bge	fp,r21,1000ebf0 <___svfprintf_internal_r+0x1c94>
1000de7c:	014400b4 	movhi	r5,4098
1000de80:	a809883a 	mov	r4,r21
1000de84:	29544584 	addi	r5,r5,20758
1000de88:	dc002c15 	stw	r16,176(sp)
1000de8c:	902b883a 	mov	r21,r18
1000de90:	d9402b15 	stw	r5,172(sp)
1000de94:	8825883a 	mov	r18,r17
1000de98:	04c001c4 	movi	r19,7
1000de9c:	dc002f17 	ldw	r16,188(sp)
1000dea0:	2023883a 	mov	r17,r4
1000dea4:	00000306 	br	1000deb4 <___svfprintf_internal_r+0xf58>
1000dea8:	8c7ffc04 	addi	r17,r17,-16
1000deac:	42000204 	addi	r8,r8,8
1000deb0:	e440110e 	bge	fp,r17,1000def8 <___svfprintf_internal_r+0xf9c>
1000deb4:	18c00404 	addi	r3,r3,16
1000deb8:	10800044 	addi	r2,r2,1
1000debc:	45000015 	stw	r20,0(r8)
1000dec0:	47000115 	stw	fp,4(r8)
1000dec4:	d8c02015 	stw	r3,128(sp)
1000dec8:	d8801f15 	stw	r2,124(sp)
1000decc:	98bff60e 	bge	r19,r2,1000dea8 <__alt_data_end+0xf000dea8>
1000ded0:	8009883a 	mov	r4,r16
1000ded4:	b80b883a 	mov	r5,r23
1000ded8:	b00d883a 	mov	r6,r22
1000dedc:	0019d080 	call	10019d08 <__ssprint_r>
1000dee0:	103ce61e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000dee4:	8c7ffc04 	addi	r17,r17,-16
1000dee8:	d8c02017 	ldw	r3,128(sp)
1000deec:	d8801f17 	ldw	r2,124(sp)
1000def0:	da000404 	addi	r8,sp,16
1000def4:	e47fef16 	blt	fp,r17,1000deb4 <__alt_data_end+0xf000deb4>
1000def8:	dc002c17 	ldw	r16,176(sp)
1000defc:	8809883a 	mov	r4,r17
1000df00:	9023883a 	mov	r17,r18
1000df04:	a825883a 	mov	r18,r21
1000df08:	202b883a 	mov	r21,r4
1000df0c:	dac02b17 	ldw	r11,172(sp)
1000df10:	1d47883a 	add	r3,r3,r21
1000df14:	10800044 	addi	r2,r2,1
1000df18:	42c00015 	stw	r11,0(r8)
1000df1c:	45400115 	stw	r21,4(r8)
1000df20:	d8c02015 	stw	r3,128(sp)
1000df24:	d8801f15 	stw	r2,124(sp)
1000df28:	010001c4 	movi	r4,7
1000df2c:	20818016 	blt	r4,r2,1000e530 <___svfprintf_internal_r+0x15d4>
1000df30:	42000204 	addi	r8,r8,8
1000df34:	003daa06 	br	1000d5e0 <__alt_data_end+0xf000d5e0>
1000df38:	d9403b17 	ldw	r5,236(sp)
1000df3c:	b007883a 	mov	r3,r22
1000df40:	988003cc 	andi	r2,r19,15
1000df44:	e008973a 	slli	r4,fp,28
1000df48:	2885883a 	add	r2,r5,r2
1000df4c:	9826d13a 	srli	r19,r19,4
1000df50:	10800003 	ldbu	r2,0(r2)
1000df54:	e038d13a 	srli	fp,fp,4
1000df58:	18ffffc4 	addi	r3,r3,-1
1000df5c:	24e6b03a 	or	r19,r4,r19
1000df60:	18800005 	stb	r2,0(r3)
1000df64:	9f04b03a 	or	r2,r19,fp
1000df68:	103ff51e 	bne	r2,zero,1000df40 <__alt_data_end+0xf000df40>
1000df6c:	d8c03115 	stw	r3,196(sp)
1000df70:	b0e5c83a 	sub	r18,r22,r3
1000df74:	003d2d06 	br	1000d42c <__alt_data_end+0xf000d42c>
1000df78:	db003317 	ldw	r12,204(sp)
1000df7c:	00800044 	movi	r2,1
1000df80:	18c00044 	addi	r3,r3,1
1000df84:	13014b0e 	bge	r2,r12,1000e4b4 <___svfprintf_internal_r+0x1558>
1000df88:	dc001f17 	ldw	r16,124(sp)
1000df8c:	dac03117 	ldw	r11,196(sp)
1000df90:	00800044 	movi	r2,1
1000df94:	84000044 	addi	r16,r16,1
1000df98:	40800115 	stw	r2,4(r8)
1000df9c:	42c00015 	stw	r11,0(r8)
1000dfa0:	d8c02015 	stw	r3,128(sp)
1000dfa4:	dc001f15 	stw	r16,124(sp)
1000dfa8:	008001c4 	movi	r2,7
1000dfac:	14014e16 	blt	r2,r16,1000e4e8 <___svfprintf_internal_r+0x158c>
1000dfb0:	42000204 	addi	r8,r8,8
1000dfb4:	db003917 	ldw	r12,228(sp)
1000dfb8:	dac03517 	ldw	r11,212(sp)
1000dfbc:	84000044 	addi	r16,r16,1
1000dfc0:	1b07883a 	add	r3,r3,r12
1000dfc4:	42c00015 	stw	r11,0(r8)
1000dfc8:	43000115 	stw	r12,4(r8)
1000dfcc:	d8c02015 	stw	r3,128(sp)
1000dfd0:	dc001f15 	stw	r16,124(sp)
1000dfd4:	008001c4 	movi	r2,7
1000dfd8:	14014c16 	blt	r2,r16,1000e50c <___svfprintf_internal_r+0x15b0>
1000dfdc:	44800204 	addi	r18,r8,8
1000dfe0:	d9003717 	ldw	r4,220(sp)
1000dfe4:	d9403817 	ldw	r5,224(sp)
1000dfe8:	000d883a 	mov	r6,zero
1000dfec:	000f883a 	mov	r7,zero
1000dff0:	d8c03e15 	stw	r3,248(sp)
1000dff4:	001fbe00 	call	1001fbe0 <__eqdf2>
1000dff8:	d8c03e17 	ldw	r3,248(sp)
1000dffc:	db003317 	ldw	r12,204(sp)
1000e000:	10009526 	beq	r2,zero,1000e258 <___svfprintf_internal_r+0x12fc>
1000e004:	dac03117 	ldw	r11,196(sp)
1000e008:	60bfffc4 	addi	r2,r12,-1
1000e00c:	1887883a 	add	r3,r3,r2
1000e010:	59000044 	addi	r4,r11,1
1000e014:	84000044 	addi	r16,r16,1
1000e018:	90800115 	stw	r2,4(r18)
1000e01c:	91000015 	stw	r4,0(r18)
1000e020:	d8c02015 	stw	r3,128(sp)
1000e024:	dc001f15 	stw	r16,124(sp)
1000e028:	008001c4 	movi	r2,7
1000e02c:	1400b316 	blt	r2,r16,1000e2fc <___svfprintf_internal_r+0x13a0>
1000e030:	94800204 	addi	r18,r18,8
1000e034:	dac03a17 	ldw	r11,232(sp)
1000e038:	dd4022c4 	addi	r21,sp,139
1000e03c:	84000044 	addi	r16,r16,1
1000e040:	58c7883a 	add	r3,r11,r3
1000e044:	95400015 	stw	r21,0(r18)
1000e048:	92c00115 	stw	r11,4(r18)
1000e04c:	d8c02015 	stw	r3,128(sp)
1000e050:	dc001f15 	stw	r16,124(sp)
1000e054:	008001c4 	movi	r2,7
1000e058:	14000e16 	blt	r2,r16,1000e094 <___svfprintf_internal_r+0x1138>
1000e05c:	92000204 	addi	r8,r18,8
1000e060:	003da006 	br	1000d6e4 <__alt_data_end+0xf000d6e4>
1000e064:	010400b4 	movhi	r4,4098
1000e068:	21144584 	addi	r4,r4,20758
1000e06c:	d9002b15 	stw	r4,172(sp)
1000e070:	dac02b17 	ldw	r11,172(sp)
1000e074:	1c07883a 	add	r3,r3,r16
1000e078:	44000115 	stw	r16,4(r8)
1000e07c:	42c00015 	stw	r11,0(r8)
1000e080:	10800044 	addi	r2,r2,1
1000e084:	d8c02015 	stw	r3,128(sp)
1000e088:	d8801f15 	stw	r2,124(sp)
1000e08c:	010001c4 	movi	r4,7
1000e090:	20bd930e 	bge	r4,r2,1000d6e0 <__alt_data_end+0xf000d6e0>
1000e094:	d9002f17 	ldw	r4,188(sp)
1000e098:	b80b883a 	mov	r5,r23
1000e09c:	b00d883a 	mov	r6,r22
1000e0a0:	0019d080 	call	10019d08 <__ssprint_r>
1000e0a4:	103c751e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e0a8:	d8c02017 	ldw	r3,128(sp)
1000e0ac:	da000404 	addi	r8,sp,16
1000e0b0:	003d8c06 	br	1000d6e4 <__alt_data_end+0xf000d6e4>
1000e0b4:	d9002f17 	ldw	r4,188(sp)
1000e0b8:	b80b883a 	mov	r5,r23
1000e0bc:	b00d883a 	mov	r6,r22
1000e0c0:	0019d080 	call	10019d08 <__ssprint_r>
1000e0c4:	103dc326 	beq	r2,zero,1000d7d4 <__alt_data_end+0xf000d7d4>
1000e0c8:	003c6c06 	br	1000d27c <__alt_data_end+0xf000d27c>
1000e0cc:	10803fcc 	andi	r2,r2,255
1000e0d0:	1000201e 	bne	r2,zero,1000e154 <___svfprintf_internal_r+0x11f8>
1000e0d4:	8880004c 	andi	r2,r17,1
1000e0d8:	10001e26 	beq	r2,zero,1000e154 <___svfprintf_internal_r+0x11f8>
1000e0dc:	00800c04 	movi	r2,48
1000e0e0:	d8c01dc4 	addi	r3,sp,119
1000e0e4:	d8801dc5 	stb	r2,119(sp)
1000e0e8:	dc803d17 	ldw	r18,244(sp)
1000e0ec:	d8c03115 	stw	r3,196(sp)
1000e0f0:	003cce06 	br	1000d42c <__alt_data_end+0xf000d42c>
1000e0f4:	d9002f17 	ldw	r4,188(sp)
1000e0f8:	b80b883a 	mov	r5,r23
1000e0fc:	b00d883a 	mov	r6,r22
1000e100:	0019d080 	call	10019d08 <__ssprint_r>
1000e104:	103c5d1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e108:	d8c02017 	ldw	r3,128(sp)
1000e10c:	da000404 	addi	r8,sp,16
1000e110:	003d6706 	br	1000d6b0 <__alt_data_end+0xf000d6b0>
1000e114:	d9002f17 	ldw	r4,188(sp)
1000e118:	b80b883a 	mov	r5,r23
1000e11c:	b00d883a 	mov	r6,r22
1000e120:	0019d080 	call	10019d08 <__ssprint_r>
1000e124:	103c551e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e128:	d8c02017 	ldw	r3,128(sp)
1000e12c:	da000404 	addi	r8,sp,16
1000e130:	003d1a06 	br	1000d59c <__alt_data_end+0xf000d59c>
1000e134:	d9002f17 	ldw	r4,188(sp)
1000e138:	b80b883a 	mov	r5,r23
1000e13c:	b00d883a 	mov	r6,r22
1000e140:	0019d080 	call	10019d08 <__ssprint_r>
1000e144:	103c4d1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e148:	d8c02017 	ldw	r3,128(sp)
1000e14c:	da000404 	addi	r8,sp,16
1000e150:	003d2006 	br	1000d5d4 <__alt_data_end+0xf000d5d4>
1000e154:	0025883a 	mov	r18,zero
1000e158:	dd803115 	stw	r22,196(sp)
1000e15c:	003cb306 	br	1000d42c <__alt_data_end+0xf000d42c>
1000e160:	dc002617 	ldw	r16,152(sp)
1000e164:	0401480e 	bge	zero,r16,1000e688 <___svfprintf_internal_r+0x172c>
1000e168:	db003117 	ldw	r12,196(sp)
1000e16c:	dac03317 	ldw	r11,204(sp)
1000e170:	62e1883a 	add	r16,r12,r11
1000e174:	db003417 	ldw	r12,208(sp)
1000e178:	5825883a 	mov	r18,r11
1000e17c:	62c0010e 	bge	r12,r11,1000e184 <___svfprintf_internal_r+0x1228>
1000e180:	6025883a 	mov	r18,r12
1000e184:	04800b0e 	bge	zero,r18,1000e1b4 <___svfprintf_internal_r+0x1258>
1000e188:	d8801f17 	ldw	r2,124(sp)
1000e18c:	dac03117 	ldw	r11,196(sp)
1000e190:	1c87883a 	add	r3,r3,r18
1000e194:	10800044 	addi	r2,r2,1
1000e198:	42c00015 	stw	r11,0(r8)
1000e19c:	44800115 	stw	r18,4(r8)
1000e1a0:	d8c02015 	stw	r3,128(sp)
1000e1a4:	d8801f15 	stw	r2,124(sp)
1000e1a8:	010001c4 	movi	r4,7
1000e1ac:	20823f16 	blt	r4,r2,1000eaac <___svfprintf_internal_r+0x1b50>
1000e1b0:	42000204 	addi	r8,r8,8
1000e1b4:	90023b16 	blt	r18,zero,1000eaa4 <___svfprintf_internal_r+0x1b48>
1000e1b8:	db003417 	ldw	r12,208(sp)
1000e1bc:	64a5c83a 	sub	r18,r12,r18
1000e1c0:	0480780e 	bge	zero,r18,1000e3a4 <___svfprintf_internal_r+0x1448>
1000e1c4:	05400404 	movi	r21,16
1000e1c8:	d8801f17 	ldw	r2,124(sp)
1000e1cc:	ac81140e 	bge	r21,r18,1000e620 <___svfprintf_internal_r+0x16c4>
1000e1d0:	014400b4 	movhi	r5,4098
1000e1d4:	29544584 	addi	r5,r5,20758
1000e1d8:	d9402b15 	stw	r5,172(sp)
1000e1dc:	070001c4 	movi	fp,7
1000e1e0:	dcc02f17 	ldw	r19,188(sp)
1000e1e4:	00000306 	br	1000e1f4 <___svfprintf_internal_r+0x1298>
1000e1e8:	42000204 	addi	r8,r8,8
1000e1ec:	94bffc04 	addi	r18,r18,-16
1000e1f0:	ac810e0e 	bge	r21,r18,1000e62c <___svfprintf_internal_r+0x16d0>
1000e1f4:	18c00404 	addi	r3,r3,16
1000e1f8:	10800044 	addi	r2,r2,1
1000e1fc:	45000015 	stw	r20,0(r8)
1000e200:	45400115 	stw	r21,4(r8)
1000e204:	d8c02015 	stw	r3,128(sp)
1000e208:	d8801f15 	stw	r2,124(sp)
1000e20c:	e0bff60e 	bge	fp,r2,1000e1e8 <__alt_data_end+0xf000e1e8>
1000e210:	9809883a 	mov	r4,r19
1000e214:	b80b883a 	mov	r5,r23
1000e218:	b00d883a 	mov	r6,r22
1000e21c:	0019d080 	call	10019d08 <__ssprint_r>
1000e220:	103c161e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e224:	d8c02017 	ldw	r3,128(sp)
1000e228:	d8801f17 	ldw	r2,124(sp)
1000e22c:	da000404 	addi	r8,sp,16
1000e230:	003fee06 	br	1000e1ec <__alt_data_end+0xf000e1ec>
1000e234:	d9002f17 	ldw	r4,188(sp)
1000e238:	b80b883a 	mov	r5,r23
1000e23c:	b00d883a 	mov	r6,r22
1000e240:	0019d080 	call	10019d08 <__ssprint_r>
1000e244:	103c0d1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e248:	d8c02017 	ldw	r3,128(sp)
1000e24c:	d8802787 	ldb	r2,158(sp)
1000e250:	da000404 	addi	r8,sp,16
1000e254:	003cc406 	br	1000d568 <__alt_data_end+0xf000d568>
1000e258:	657fffc4 	addi	r21,r12,-1
1000e25c:	057f750e 	bge	zero,r21,1000e034 <__alt_data_end+0xf000e034>
1000e260:	07000404 	movi	fp,16
1000e264:	e542ef0e 	bge	fp,r21,1000ee24 <___svfprintf_internal_r+0x1ec8>
1000e268:	010400b4 	movhi	r4,4098
1000e26c:	21144584 	addi	r4,r4,20758
1000e270:	d9002b15 	stw	r4,172(sp)
1000e274:	01c001c4 	movi	r7,7
1000e278:	dcc02f17 	ldw	r19,188(sp)
1000e27c:	00000306 	br	1000e28c <___svfprintf_internal_r+0x1330>
1000e280:	ad7ffc04 	addi	r21,r21,-16
1000e284:	94800204 	addi	r18,r18,8
1000e288:	e540130e 	bge	fp,r21,1000e2d8 <___svfprintf_internal_r+0x137c>
1000e28c:	18c00404 	addi	r3,r3,16
1000e290:	84000044 	addi	r16,r16,1
1000e294:	95000015 	stw	r20,0(r18)
1000e298:	97000115 	stw	fp,4(r18)
1000e29c:	d8c02015 	stw	r3,128(sp)
1000e2a0:	dc001f15 	stw	r16,124(sp)
1000e2a4:	3c3ff60e 	bge	r7,r16,1000e280 <__alt_data_end+0xf000e280>
1000e2a8:	9809883a 	mov	r4,r19
1000e2ac:	b80b883a 	mov	r5,r23
1000e2b0:	b00d883a 	mov	r6,r22
1000e2b4:	d9c03e15 	stw	r7,248(sp)
1000e2b8:	0019d080 	call	10019d08 <__ssprint_r>
1000e2bc:	d9c03e17 	ldw	r7,248(sp)
1000e2c0:	103bee1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e2c4:	ad7ffc04 	addi	r21,r21,-16
1000e2c8:	d8c02017 	ldw	r3,128(sp)
1000e2cc:	dc001f17 	ldw	r16,124(sp)
1000e2d0:	dc800404 	addi	r18,sp,16
1000e2d4:	e57fed16 	blt	fp,r21,1000e28c <__alt_data_end+0xf000e28c>
1000e2d8:	dac02b17 	ldw	r11,172(sp)
1000e2dc:	1d47883a 	add	r3,r3,r21
1000e2e0:	84000044 	addi	r16,r16,1
1000e2e4:	92c00015 	stw	r11,0(r18)
1000e2e8:	95400115 	stw	r21,4(r18)
1000e2ec:	d8c02015 	stw	r3,128(sp)
1000e2f0:	dc001f15 	stw	r16,124(sp)
1000e2f4:	008001c4 	movi	r2,7
1000e2f8:	143f4d0e 	bge	r2,r16,1000e030 <__alt_data_end+0xf000e030>
1000e2fc:	d9002f17 	ldw	r4,188(sp)
1000e300:	b80b883a 	mov	r5,r23
1000e304:	b00d883a 	mov	r6,r22
1000e308:	0019d080 	call	10019d08 <__ssprint_r>
1000e30c:	103bdb1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e310:	d8c02017 	ldw	r3,128(sp)
1000e314:	dc001f17 	ldw	r16,124(sp)
1000e318:	dc800404 	addi	r18,sp,16
1000e31c:	003f4506 	br	1000e034 <__alt_data_end+0xf000e034>
1000e320:	00800084 	movi	r2,2
1000e324:	9f06b03a 	or	r3,r19,fp
1000e328:	003d3806 	br	1000d80c <__alt_data_end+0xf000d80c>
1000e32c:	dac02d17 	ldw	r11,180(sp)
1000e330:	0039883a 	mov	fp,zero
1000e334:	0005883a 	mov	r2,zero
1000e338:	5cc00017 	ldw	r19,0(r11)
1000e33c:	5ac00104 	addi	r11,r11,4
1000e340:	dac02d15 	stw	r11,180(sp)
1000e344:	9807883a 	mov	r3,r19
1000e348:	003d3006 	br	1000d80c <__alt_data_end+0xf000d80c>
1000e34c:	1cc00017 	ldw	r19,0(r3)
1000e350:	dac02d17 	ldw	r11,180(sp)
1000e354:	9839d7fa 	srai	fp,r19,31
1000e358:	5ac00104 	addi	r11,r11,4
1000e35c:	dac02d15 	stw	r11,180(sp)
1000e360:	e005883a 	mov	r2,fp
1000e364:	003c0a06 	br	1000d390 <__alt_data_end+0xf000d390>
1000e368:	db002d17 	ldw	r12,180(sp)
1000e36c:	0039883a 	mov	fp,zero
1000e370:	00800044 	movi	r2,1
1000e374:	64c00017 	ldw	r19,0(r12)
1000e378:	63000104 	addi	r12,r12,4
1000e37c:	db002d15 	stw	r12,180(sp)
1000e380:	9807883a 	mov	r3,r19
1000e384:	003d2106 	br	1000d80c <__alt_data_end+0xf000d80c>
1000e388:	d9002f17 	ldw	r4,188(sp)
1000e38c:	b80b883a 	mov	r5,r23
1000e390:	b00d883a 	mov	r6,r22
1000e394:	0019d080 	call	10019d08 <__ssprint_r>
1000e398:	103bb81e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e39c:	d8c02017 	ldw	r3,128(sp)
1000e3a0:	da000404 	addi	r8,sp,16
1000e3a4:	db003117 	ldw	r12,196(sp)
1000e3a8:	dac03417 	ldw	r11,208(sp)
1000e3ac:	d8802617 	ldw	r2,152(sp)
1000e3b0:	62e5883a 	add	r18,r12,r11
1000e3b4:	db003317 	ldw	r12,204(sp)
1000e3b8:	13000216 	blt	r2,r12,1000e3c4 <___svfprintf_internal_r+0x1468>
1000e3bc:	8900004c 	andi	r4,r17,1
1000e3c0:	20000c26 	beq	r4,zero,1000e3f4 <___svfprintf_internal_r+0x1498>
1000e3c4:	dac03917 	ldw	r11,228(sp)
1000e3c8:	d9001f17 	ldw	r4,124(sp)
1000e3cc:	db003517 	ldw	r12,212(sp)
1000e3d0:	1ac7883a 	add	r3,r3,r11
1000e3d4:	21000044 	addi	r4,r4,1
1000e3d8:	43000015 	stw	r12,0(r8)
1000e3dc:	42c00115 	stw	r11,4(r8)
1000e3e0:	d8c02015 	stw	r3,128(sp)
1000e3e4:	d9001f15 	stw	r4,124(sp)
1000e3e8:	014001c4 	movi	r5,7
1000e3ec:	2901b716 	blt	r5,r4,1000eacc <___svfprintf_internal_r+0x1b70>
1000e3f0:	42000204 	addi	r8,r8,8
1000e3f4:	dac03317 	ldw	r11,204(sp)
1000e3f8:	8489c83a 	sub	r4,r16,r18
1000e3fc:	5885c83a 	sub	r2,r11,r2
1000e400:	1021883a 	mov	r16,r2
1000e404:	2080010e 	bge	r4,r2,1000e40c <___svfprintf_internal_r+0x14b0>
1000e408:	2021883a 	mov	r16,r4
1000e40c:	04000a0e 	bge	zero,r16,1000e438 <___svfprintf_internal_r+0x14dc>
1000e410:	d9001f17 	ldw	r4,124(sp)
1000e414:	1c07883a 	add	r3,r3,r16
1000e418:	44800015 	stw	r18,0(r8)
1000e41c:	21000044 	addi	r4,r4,1
1000e420:	44000115 	stw	r16,4(r8)
1000e424:	d8c02015 	stw	r3,128(sp)
1000e428:	d9001f15 	stw	r4,124(sp)
1000e42c:	014001c4 	movi	r5,7
1000e430:	2901bf16 	blt	r5,r4,1000eb30 <___svfprintf_internal_r+0x1bd4>
1000e434:	42000204 	addi	r8,r8,8
1000e438:	8001bb16 	blt	r16,zero,1000eb28 <___svfprintf_internal_r+0x1bcc>
1000e43c:	1421c83a 	sub	r16,r2,r16
1000e440:	043ca80e 	bge	zero,r16,1000d6e4 <__alt_data_end+0xf000d6e4>
1000e444:	04800404 	movi	r18,16
1000e448:	d8801f17 	ldw	r2,124(sp)
1000e44c:	943f050e 	bge	r18,r16,1000e064 <__alt_data_end+0xf000e064>
1000e450:	014400b4 	movhi	r5,4098
1000e454:	29544584 	addi	r5,r5,20758
1000e458:	d9402b15 	stw	r5,172(sp)
1000e45c:	054001c4 	movi	r21,7
1000e460:	dcc02f17 	ldw	r19,188(sp)
1000e464:	00000306 	br	1000e474 <___svfprintf_internal_r+0x1518>
1000e468:	42000204 	addi	r8,r8,8
1000e46c:	843ffc04 	addi	r16,r16,-16
1000e470:	943eff0e 	bge	r18,r16,1000e070 <__alt_data_end+0xf000e070>
1000e474:	18c00404 	addi	r3,r3,16
1000e478:	10800044 	addi	r2,r2,1
1000e47c:	45000015 	stw	r20,0(r8)
1000e480:	44800115 	stw	r18,4(r8)
1000e484:	d8c02015 	stw	r3,128(sp)
1000e488:	d8801f15 	stw	r2,124(sp)
1000e48c:	a8bff60e 	bge	r21,r2,1000e468 <__alt_data_end+0xf000e468>
1000e490:	9809883a 	mov	r4,r19
1000e494:	b80b883a 	mov	r5,r23
1000e498:	b00d883a 	mov	r6,r22
1000e49c:	0019d080 	call	10019d08 <__ssprint_r>
1000e4a0:	103b761e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e4a4:	d8c02017 	ldw	r3,128(sp)
1000e4a8:	d8801f17 	ldw	r2,124(sp)
1000e4ac:	da000404 	addi	r8,sp,16
1000e4b0:	003fee06 	br	1000e46c <__alt_data_end+0xf000e46c>
1000e4b4:	8888703a 	and	r4,r17,r2
1000e4b8:	203eb31e 	bne	r4,zero,1000df88 <__alt_data_end+0xf000df88>
1000e4bc:	dc001f17 	ldw	r16,124(sp)
1000e4c0:	db003117 	ldw	r12,196(sp)
1000e4c4:	40800115 	stw	r2,4(r8)
1000e4c8:	84000044 	addi	r16,r16,1
1000e4cc:	43000015 	stw	r12,0(r8)
1000e4d0:	d8c02015 	stw	r3,128(sp)
1000e4d4:	dc001f15 	stw	r16,124(sp)
1000e4d8:	008001c4 	movi	r2,7
1000e4dc:	143f8716 	blt	r2,r16,1000e2fc <__alt_data_end+0xf000e2fc>
1000e4e0:	44800204 	addi	r18,r8,8
1000e4e4:	003ed306 	br	1000e034 <__alt_data_end+0xf000e034>
1000e4e8:	d9002f17 	ldw	r4,188(sp)
1000e4ec:	b80b883a 	mov	r5,r23
1000e4f0:	b00d883a 	mov	r6,r22
1000e4f4:	0019d080 	call	10019d08 <__ssprint_r>
1000e4f8:	103b601e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e4fc:	d8c02017 	ldw	r3,128(sp)
1000e500:	dc001f17 	ldw	r16,124(sp)
1000e504:	da000404 	addi	r8,sp,16
1000e508:	003eaa06 	br	1000dfb4 <__alt_data_end+0xf000dfb4>
1000e50c:	d9002f17 	ldw	r4,188(sp)
1000e510:	b80b883a 	mov	r5,r23
1000e514:	b00d883a 	mov	r6,r22
1000e518:	0019d080 	call	10019d08 <__ssprint_r>
1000e51c:	103b571e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e520:	d8c02017 	ldw	r3,128(sp)
1000e524:	dc001f17 	ldw	r16,124(sp)
1000e528:	dc800404 	addi	r18,sp,16
1000e52c:	003eac06 	br	1000dfe0 <__alt_data_end+0xf000dfe0>
1000e530:	d9002f17 	ldw	r4,188(sp)
1000e534:	b80b883a 	mov	r5,r23
1000e538:	b00d883a 	mov	r6,r22
1000e53c:	0019d080 	call	10019d08 <__ssprint_r>
1000e540:	103b4e1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e544:	d8c02017 	ldw	r3,128(sp)
1000e548:	da000404 	addi	r8,sp,16
1000e54c:	003c2406 	br	1000d5e0 <__alt_data_end+0xf000d5e0>
1000e550:	da004015 	stw	r8,256(sp)
1000e554:	da403f15 	stw	r9,252(sp)
1000e558:	0017a240 	call	10017a24 <__fpclassifyd>
1000e55c:	da004017 	ldw	r8,256(sp)
1000e560:	da403f17 	ldw	r9,252(sp)
1000e564:	1000951e 	bne	r2,zero,1000e7bc <___svfprintf_internal_r+0x1860>
1000e568:	008011c4 	movi	r2,71
1000e56c:	1400fb16 	blt	r2,r16,1000e95c <___svfprintf_internal_r+0x1a00>
1000e570:	030400b4 	movhi	r12,4098
1000e574:	63143704 	addi	r12,r12,20700
1000e578:	db003115 	stw	r12,196(sp)
1000e57c:	00c000c4 	movi	r3,3
1000e580:	00bfdfc4 	movi	r2,-129
1000e584:	d8c02a15 	stw	r3,168(sp)
1000e588:	88a2703a 	and	r17,r17,r2
1000e58c:	dd402783 	ldbu	r21,158(sp)
1000e590:	dcc02d15 	stw	r19,180(sp)
1000e594:	1825883a 	mov	r18,r3
1000e598:	d8003215 	stw	zero,200(sp)
1000e59c:	d8003415 	stw	zero,208(sp)
1000e5a0:	003ba706 	br	1000d440 <__alt_data_end+0xf000d440>
1000e5a4:	8880040c 	andi	r2,r17,16
1000e5a8:	1000091e 	bne	r2,zero,1000e5d0 <___svfprintf_internal_r+0x1674>
1000e5ac:	8c40100c 	andi	r17,r17,64
1000e5b0:	88000726 	beq	r17,zero,1000e5d0 <___svfprintf_internal_r+0x1674>
1000e5b4:	db002d17 	ldw	r12,180(sp)
1000e5b8:	dac03017 	ldw	r11,192(sp)
1000e5bc:	60800017 	ldw	r2,0(r12)
1000e5c0:	63000104 	addi	r12,r12,4
1000e5c4:	db002d15 	stw	r12,180(sp)
1000e5c8:	12c0000d 	sth	r11,0(r2)
1000e5cc:	003a8f06 	br	1000d00c <__alt_data_end+0xf000d00c>
1000e5d0:	db002d17 	ldw	r12,180(sp)
1000e5d4:	dac03017 	ldw	r11,192(sp)
1000e5d8:	60800017 	ldw	r2,0(r12)
1000e5dc:	63000104 	addi	r12,r12,4
1000e5e0:	db002d15 	stw	r12,180(sp)
1000e5e4:	12c00015 	stw	r11,0(r2)
1000e5e8:	003a8806 	br	1000d00c <__alt_data_end+0xf000d00c>
1000e5ec:	88c0100c 	andi	r3,r17,64
1000e5f0:	1800e926 	beq	r3,zero,1000e998 <___svfprintf_internal_r+0x1a3c>
1000e5f4:	dac02d17 	ldw	r11,180(sp)
1000e5f8:	14c0000b 	ldhu	r19,0(r2)
1000e5fc:	0039883a 	mov	fp,zero
1000e600:	5ac00104 	addi	r11,r11,4
1000e604:	dac02d15 	stw	r11,180(sp)
1000e608:	003d1406 	br	1000da5c <__alt_data_end+0xf000da5c>
1000e60c:	1c000007 	ldb	r16,0(r3)
1000e610:	1805883a 	mov	r2,r3
1000e614:	003aa706 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000e618:	00800084 	movi	r2,2
1000e61c:	003c7b06 	br	1000d80c <__alt_data_end+0xf000d80c>
1000e620:	010400b4 	movhi	r4,4098
1000e624:	21144584 	addi	r4,r4,20758
1000e628:	d9002b15 	stw	r4,172(sp)
1000e62c:	dac02b17 	ldw	r11,172(sp)
1000e630:	1c87883a 	add	r3,r3,r18
1000e634:	10800044 	addi	r2,r2,1
1000e638:	42c00015 	stw	r11,0(r8)
1000e63c:	44800115 	stw	r18,4(r8)
1000e640:	d8c02015 	stw	r3,128(sp)
1000e644:	d8801f15 	stw	r2,124(sp)
1000e648:	010001c4 	movi	r4,7
1000e64c:	20bf4e16 	blt	r4,r2,1000e388 <__alt_data_end+0xf000e388>
1000e650:	42000204 	addi	r8,r8,8
1000e654:	003f5306 	br	1000e3a4 <__alt_data_end+0xf000e3a4>
1000e658:	010400b4 	movhi	r4,4098
1000e65c:	21144584 	addi	r4,r4,20758
1000e660:	d9002b15 	stw	r4,172(sp)
1000e664:	003c0806 	br	1000d688 <__alt_data_end+0xf000d688>
1000e668:	d9002f17 	ldw	r4,188(sp)
1000e66c:	b80b883a 	mov	r5,r23
1000e670:	b00d883a 	mov	r6,r22
1000e674:	0019d080 	call	10019d08 <__ssprint_r>
1000e678:	103b001e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e67c:	d8c02017 	ldw	r3,128(sp)
1000e680:	da000404 	addi	r8,sp,16
1000e684:	003dc606 	br	1000dda0 <__alt_data_end+0xf000dda0>
1000e688:	d8801f17 	ldw	r2,124(sp)
1000e68c:	030400b4 	movhi	r12,4098
1000e690:	01000044 	movi	r4,1
1000e694:	18c00044 	addi	r3,r3,1
1000e698:	10800044 	addi	r2,r2,1
1000e69c:	63144504 	addi	r12,r12,20756
1000e6a0:	41000115 	stw	r4,4(r8)
1000e6a4:	43000015 	stw	r12,0(r8)
1000e6a8:	d8c02015 	stw	r3,128(sp)
1000e6ac:	d8801f15 	stw	r2,124(sp)
1000e6b0:	010001c4 	movi	r4,7
1000e6b4:	2080ad16 	blt	r4,r2,1000e96c <___svfprintf_internal_r+0x1a10>
1000e6b8:	42000204 	addi	r8,r8,8
1000e6bc:	8000041e 	bne	r16,zero,1000e6d0 <___svfprintf_internal_r+0x1774>
1000e6c0:	dac03317 	ldw	r11,204(sp)
1000e6c4:	5800021e 	bne	r11,zero,1000e6d0 <___svfprintf_internal_r+0x1774>
1000e6c8:	8880004c 	andi	r2,r17,1
1000e6cc:	103c0526 	beq	r2,zero,1000d6e4 <__alt_data_end+0xf000d6e4>
1000e6d0:	db003917 	ldw	r12,228(sp)
1000e6d4:	d8801f17 	ldw	r2,124(sp)
1000e6d8:	dac03517 	ldw	r11,212(sp)
1000e6dc:	1b07883a 	add	r3,r3,r12
1000e6e0:	10800044 	addi	r2,r2,1
1000e6e4:	42c00015 	stw	r11,0(r8)
1000e6e8:	43000115 	stw	r12,4(r8)
1000e6ec:	d8c02015 	stw	r3,128(sp)
1000e6f0:	d8801f15 	stw	r2,124(sp)
1000e6f4:	010001c4 	movi	r4,7
1000e6f8:	20818816 	blt	r4,r2,1000ed1c <___svfprintf_internal_r+0x1dc0>
1000e6fc:	42000204 	addi	r8,r8,8
1000e700:	0421c83a 	sub	r16,zero,r16
1000e704:	0400bc0e 	bge	zero,r16,1000e9f8 <___svfprintf_internal_r+0x1a9c>
1000e708:	04800404 	movi	r18,16
1000e70c:	9400f80e 	bge	r18,r16,1000eaf0 <___svfprintf_internal_r+0x1b94>
1000e710:	010400b4 	movhi	r4,4098
1000e714:	21144584 	addi	r4,r4,20758
1000e718:	d9002b15 	stw	r4,172(sp)
1000e71c:	054001c4 	movi	r21,7
1000e720:	dcc02f17 	ldw	r19,188(sp)
1000e724:	00000306 	br	1000e734 <___svfprintf_internal_r+0x17d8>
1000e728:	42000204 	addi	r8,r8,8
1000e72c:	843ffc04 	addi	r16,r16,-16
1000e730:	9400f20e 	bge	r18,r16,1000eafc <___svfprintf_internal_r+0x1ba0>
1000e734:	18c00404 	addi	r3,r3,16
1000e738:	10800044 	addi	r2,r2,1
1000e73c:	45000015 	stw	r20,0(r8)
1000e740:	44800115 	stw	r18,4(r8)
1000e744:	d8c02015 	stw	r3,128(sp)
1000e748:	d8801f15 	stw	r2,124(sp)
1000e74c:	a8bff60e 	bge	r21,r2,1000e728 <__alt_data_end+0xf000e728>
1000e750:	9809883a 	mov	r4,r19
1000e754:	b80b883a 	mov	r5,r23
1000e758:	b00d883a 	mov	r6,r22
1000e75c:	0019d080 	call	10019d08 <__ssprint_r>
1000e760:	103ac61e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e764:	d8c02017 	ldw	r3,128(sp)
1000e768:	d8801f17 	ldw	r2,124(sp)
1000e76c:	da000404 	addi	r8,sp,16
1000e770:	003fee06 	br	1000e72c <__alt_data_end+0xf000e72c>
1000e774:	db002e17 	ldw	r12,184(sp)
1000e778:	1805883a 	mov	r2,r3
1000e77c:	dac02d15 	stw	r11,180(sp)
1000e780:	0319c83a 	sub	r12,zero,r12
1000e784:	db002e15 	stw	r12,184(sp)
1000e788:	003ad106 	br	1000d2d0 <__alt_data_end+0xf000d2d0>
1000e78c:	18800044 	addi	r2,r3,1
1000e790:	8c400814 	ori	r17,r17,32
1000e794:	1c000047 	ldb	r16,1(r3)
1000e798:	003a4606 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000e79c:	d9002f17 	ldw	r4,188(sp)
1000e7a0:	b80b883a 	mov	r5,r23
1000e7a4:	b00d883a 	mov	r6,r22
1000e7a8:	0019d080 	call	10019d08 <__ssprint_r>
1000e7ac:	103ab31e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e7b0:	d8c02017 	ldw	r3,128(sp)
1000e7b4:	da000404 	addi	r8,sp,16
1000e7b8:	003d8a06 	br	1000dde4 <__alt_data_end+0xf000dde4>
1000e7bc:	057ff7c4 	movi	r21,-33
1000e7c0:	00bfffc4 	movi	r2,-1
1000e7c4:	856a703a 	and	r21,r16,r21
1000e7c8:	48807126 	beq	r9,r2,1000e990 <___svfprintf_internal_r+0x1a34>
1000e7cc:	008011c4 	movi	r2,71
1000e7d0:	a8814f26 	beq	r21,r2,1000ed10 <___svfprintf_internal_r+0x1db4>
1000e7d4:	db003817 	ldw	r12,224(sp)
1000e7d8:	8ac04014 	ori	r11,r17,256
1000e7dc:	dac02d15 	stw	r11,180(sp)
1000e7e0:	60015816 	blt	r12,zero,1000ed44 <___svfprintf_internal_r+0x1de8>
1000e7e4:	dc803817 	ldw	r18,224(sp)
1000e7e8:	d8002a05 	stb	zero,168(sp)
1000e7ec:	00801984 	movi	r2,102
1000e7f0:	80808c26 	beq	r16,r2,1000ea24 <___svfprintf_internal_r+0x1ac8>
1000e7f4:	00801184 	movi	r2,70
1000e7f8:	80808a26 	beq	r16,r2,1000ea24 <___svfprintf_internal_r+0x1ac8>
1000e7fc:	00801144 	movi	r2,69
1000e800:	a8815426 	beq	r21,r2,1000ed54 <___svfprintf_internal_r+0x1df8>
1000e804:	4839883a 	mov	fp,r9
1000e808:	d8802604 	addi	r2,sp,152
1000e80c:	d8800115 	stw	r2,4(sp)
1000e810:	d9002f17 	ldw	r4,188(sp)
1000e814:	d8802504 	addi	r2,sp,148
1000e818:	d9403717 	ldw	r5,220(sp)
1000e81c:	d8800215 	stw	r2,8(sp)
1000e820:	d8802104 	addi	r2,sp,132
1000e824:	df000015 	stw	fp,0(sp)
1000e828:	d8800315 	stw	r2,12(sp)
1000e82c:	900d883a 	mov	r6,r18
1000e830:	01c00084 	movi	r7,2
1000e834:	da004015 	stw	r8,256(sp)
1000e838:	da403f15 	stw	r9,252(sp)
1000e83c:	0012a7c0 	call	10012a7c <_dtoa_r>
1000e840:	d8803115 	stw	r2,196(sp)
1000e844:	008019c4 	movi	r2,103
1000e848:	da004017 	ldw	r8,256(sp)
1000e84c:	da403f17 	ldw	r9,252(sp)
1000e850:	80800226 	beq	r16,r2,1000e85c <___svfprintf_internal_r+0x1900>
1000e854:	008011c4 	movi	r2,71
1000e858:	8080841e 	bne	r16,r2,1000ea6c <___svfprintf_internal_r+0x1b10>
1000e85c:	8880004c 	andi	r2,r17,1
1000e860:	10015126 	beq	r2,zero,1000eda8 <___svfprintf_internal_r+0x1e4c>
1000e864:	db003117 	ldw	r12,196(sp)
1000e868:	6715883a 	add	r10,r12,fp
1000e86c:	d9003717 	ldw	r4,220(sp)
1000e870:	900b883a 	mov	r5,r18
1000e874:	000d883a 	mov	r6,zero
1000e878:	000f883a 	mov	r7,zero
1000e87c:	da004015 	stw	r8,256(sp)
1000e880:	da403f15 	stw	r9,252(sp)
1000e884:	da803e15 	stw	r10,248(sp)
1000e888:	001fbe00 	call	1001fbe0 <__eqdf2>
1000e88c:	da004017 	ldw	r8,256(sp)
1000e890:	da403f17 	ldw	r9,252(sp)
1000e894:	da803e17 	ldw	r10,248(sp)
1000e898:	1000d926 	beq	r2,zero,1000ec00 <___svfprintf_internal_r+0x1ca4>
1000e89c:	d8802117 	ldw	r2,132(sp)
1000e8a0:	1280062e 	bgeu	r2,r10,1000e8bc <___svfprintf_internal_r+0x1960>
1000e8a4:	01000c04 	movi	r4,48
1000e8a8:	10c00044 	addi	r3,r2,1
1000e8ac:	d8c02115 	stw	r3,132(sp)
1000e8b0:	11000005 	stb	r4,0(r2)
1000e8b4:	d8802117 	ldw	r2,132(sp)
1000e8b8:	12bffb36 	bltu	r2,r10,1000e8a8 <__alt_data_end+0xf000e8a8>
1000e8bc:	db003117 	ldw	r12,196(sp)
1000e8c0:	1305c83a 	sub	r2,r2,r12
1000e8c4:	d8803315 	stw	r2,204(sp)
1000e8c8:	008011c4 	movi	r2,71
1000e8cc:	a880b626 	beq	r21,r2,1000eba8 <___svfprintf_internal_r+0x1c4c>
1000e8d0:	00801944 	movi	r2,101
1000e8d4:	14017e0e 	bge	r2,r16,1000eed0 <___svfprintf_internal_r+0x1f74>
1000e8d8:	00801984 	movi	r2,102
1000e8dc:	80812826 	beq	r16,r2,1000ed80 <___svfprintf_internal_r+0x1e24>
1000e8e0:	db002617 	ldw	r12,152(sp)
1000e8e4:	db003415 	stw	r12,208(sp)
1000e8e8:	db003417 	ldw	r12,208(sp)
1000e8ec:	dac03317 	ldw	r11,204(sp)
1000e8f0:	62c11a16 	blt	r12,r11,1000ed5c <___svfprintf_internal_r+0x1e00>
1000e8f4:	8c40004c 	andi	r17,r17,1
1000e8f8:	88013d1e 	bne	r17,zero,1000edf0 <___svfprintf_internal_r+0x1e94>
1000e8fc:	6005883a 	mov	r2,r12
1000e900:	60012716 	blt	r12,zero,1000eda0 <___svfprintf_internal_r+0x1e44>
1000e904:	dc803417 	ldw	r18,208(sp)
1000e908:	df002a07 	ldb	fp,168(sp)
1000e90c:	e000b01e 	bne	fp,zero,1000ebd0 <___svfprintf_internal_r+0x1c74>
1000e910:	dc402d17 	ldw	r17,180(sp)
1000e914:	dd402783 	ldbu	r21,158(sp)
1000e918:	d8802a15 	stw	r2,168(sp)
1000e91c:	dcc02d15 	stw	r19,180(sp)
1000e920:	d8003215 	stw	zero,200(sp)
1000e924:	003ac606 	br	1000d440 <__alt_data_end+0xf000d440>
1000e928:	008400b4 	movhi	r2,4098
1000e92c:	10943504 	addi	r2,r2,20692
1000e930:	d8803115 	stw	r2,196(sp)
1000e934:	003be506 	br	1000d8cc <__alt_data_end+0xf000d8cc>
1000e938:	d9002f17 	ldw	r4,188(sp)
1000e93c:	04001004 	movi	r16,64
1000e940:	800b883a 	mov	r5,r16
1000e944:	001570c0 	call	1001570c <_malloc_r>
1000e948:	b8800015 	stw	r2,0(r23)
1000e94c:	b8800415 	stw	r2,16(r23)
1000e950:	10016126 	beq	r2,zero,1000eed8 <___svfprintf_internal_r+0x1f7c>
1000e954:	bc000515 	stw	r16,20(r23)
1000e958:	00399a06 	br	1000cfc4 <__alt_data_end+0xf000cfc4>
1000e95c:	008400b4 	movhi	r2,4098
1000e960:	10943804 	addi	r2,r2,20704
1000e964:	d8803115 	stw	r2,196(sp)
1000e968:	003f0406 	br	1000e57c <__alt_data_end+0xf000e57c>
1000e96c:	d9002f17 	ldw	r4,188(sp)
1000e970:	b80b883a 	mov	r5,r23
1000e974:	b00d883a 	mov	r6,r22
1000e978:	0019d080 	call	10019d08 <__ssprint_r>
1000e97c:	103a3f1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e980:	dc002617 	ldw	r16,152(sp)
1000e984:	d8c02017 	ldw	r3,128(sp)
1000e988:	da000404 	addi	r8,sp,16
1000e98c:	003f4b06 	br	1000e6bc <__alt_data_end+0xf000e6bc>
1000e990:	02400184 	movi	r9,6
1000e994:	003f8f06 	br	1000e7d4 <__alt_data_end+0xf000e7d4>
1000e998:	db002d17 	ldw	r12,180(sp)
1000e99c:	14c00017 	ldw	r19,0(r2)
1000e9a0:	0039883a 	mov	fp,zero
1000e9a4:	63000104 	addi	r12,r12,4
1000e9a8:	db002d15 	stw	r12,180(sp)
1000e9ac:	003c2b06 	br	1000da5c <__alt_data_end+0xf000da5c>
1000e9b0:	d8c03117 	ldw	r3,196(sp)
1000e9b4:	b0e5c83a 	sub	r18,r22,r3
1000e9b8:	003a9c06 	br	1000d42c <__alt_data_end+0xf000d42c>
1000e9bc:	da004015 	stw	r8,256(sp)
1000e9c0:	000cc400 	call	1000cc40 <strlen>
1000e9c4:	1025883a 	mov	r18,r2
1000e9c8:	da004017 	ldw	r8,256(sp)
1000e9cc:	903c450e 	bge	r18,zero,1000dae4 <__alt_data_end+0xf000dae4>
1000e9d0:	0005883a 	mov	r2,zero
1000e9d4:	003c4306 	br	1000dae4 <__alt_data_end+0xf000dae4>
1000e9d8:	d9002f17 	ldw	r4,188(sp)
1000e9dc:	b80b883a 	mov	r5,r23
1000e9e0:	b00d883a 	mov	r6,r22
1000e9e4:	0019d080 	call	10019d08 <__ssprint_r>
1000e9e8:	103a241e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000e9ec:	d8c02017 	ldw	r3,128(sp)
1000e9f0:	d8801f17 	ldw	r2,124(sp)
1000e9f4:	da000404 	addi	r8,sp,16
1000e9f8:	db003317 	ldw	r12,204(sp)
1000e9fc:	dac03117 	ldw	r11,196(sp)
1000ea00:	10800044 	addi	r2,r2,1
1000ea04:	60c7883a 	add	r3,r12,r3
1000ea08:	42c00015 	stw	r11,0(r8)
1000ea0c:	43000115 	stw	r12,4(r8)
1000ea10:	d8c02015 	stw	r3,128(sp)
1000ea14:	d8801f15 	stw	r2,124(sp)
1000ea18:	010001c4 	movi	r4,7
1000ea1c:	20bb300e 	bge	r4,r2,1000d6e0 <__alt_data_end+0xf000d6e0>
1000ea20:	003d9c06 	br	1000e094 <__alt_data_end+0xf000e094>
1000ea24:	d8802604 	addi	r2,sp,152
1000ea28:	d8800115 	stw	r2,4(sp)
1000ea2c:	d9002f17 	ldw	r4,188(sp)
1000ea30:	d8802504 	addi	r2,sp,148
1000ea34:	d9403717 	ldw	r5,220(sp)
1000ea38:	d8800215 	stw	r2,8(sp)
1000ea3c:	d8802104 	addi	r2,sp,132
1000ea40:	da400015 	stw	r9,0(sp)
1000ea44:	d8800315 	stw	r2,12(sp)
1000ea48:	900d883a 	mov	r6,r18
1000ea4c:	01c000c4 	movi	r7,3
1000ea50:	da004015 	stw	r8,256(sp)
1000ea54:	da403f15 	stw	r9,252(sp)
1000ea58:	0012a7c0 	call	10012a7c <_dtoa_r>
1000ea5c:	da403f17 	ldw	r9,252(sp)
1000ea60:	da004017 	ldw	r8,256(sp)
1000ea64:	d8803115 	stw	r2,196(sp)
1000ea68:	4839883a 	mov	fp,r9
1000ea6c:	dac03117 	ldw	r11,196(sp)
1000ea70:	00801184 	movi	r2,70
1000ea74:	5f15883a 	add	r10,r11,fp
1000ea78:	a8bf7c1e 	bne	r21,r2,1000e86c <__alt_data_end+0xf000e86c>
1000ea7c:	59000007 	ldb	r4,0(r11)
1000ea80:	00800c04 	movi	r2,48
1000ea84:	2080ca26 	beq	r4,r2,1000edb0 <___svfprintf_internal_r+0x1e54>
1000ea88:	d8c02617 	ldw	r3,152(sp)
1000ea8c:	50d5883a 	add	r10,r10,r3
1000ea90:	003f7606 	br	1000e86c <__alt_data_end+0xf000e86c>
1000ea94:	010400b4 	movhi	r4,4098
1000ea98:	21144984 	addi	r4,r4,20774
1000ea9c:	d9003615 	stw	r4,216(sp)
1000eaa0:	003aa606 	br	1000d53c <__alt_data_end+0xf000d53c>
1000eaa4:	0025883a 	mov	r18,zero
1000eaa8:	003dc306 	br	1000e1b8 <__alt_data_end+0xf000e1b8>
1000eaac:	d9002f17 	ldw	r4,188(sp)
1000eab0:	b80b883a 	mov	r5,r23
1000eab4:	b00d883a 	mov	r6,r22
1000eab8:	0019d080 	call	10019d08 <__ssprint_r>
1000eabc:	1039ef1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000eac0:	d8c02017 	ldw	r3,128(sp)
1000eac4:	da000404 	addi	r8,sp,16
1000eac8:	003dba06 	br	1000e1b4 <__alt_data_end+0xf000e1b4>
1000eacc:	d9002f17 	ldw	r4,188(sp)
1000ead0:	b80b883a 	mov	r5,r23
1000ead4:	b00d883a 	mov	r6,r22
1000ead8:	0019d080 	call	10019d08 <__ssprint_r>
1000eadc:	1039e71e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000eae0:	d8802617 	ldw	r2,152(sp)
1000eae4:	d8c02017 	ldw	r3,128(sp)
1000eae8:	da000404 	addi	r8,sp,16
1000eaec:	003e4106 	br	1000e3f4 <__alt_data_end+0xf000e3f4>
1000eaf0:	030400b4 	movhi	r12,4098
1000eaf4:	63144584 	addi	r12,r12,20758
1000eaf8:	db002b15 	stw	r12,172(sp)
1000eafc:	dac02b17 	ldw	r11,172(sp)
1000eb00:	1c07883a 	add	r3,r3,r16
1000eb04:	10800044 	addi	r2,r2,1
1000eb08:	42c00015 	stw	r11,0(r8)
1000eb0c:	44000115 	stw	r16,4(r8)
1000eb10:	d8c02015 	stw	r3,128(sp)
1000eb14:	d8801f15 	stw	r2,124(sp)
1000eb18:	010001c4 	movi	r4,7
1000eb1c:	20bfae16 	blt	r4,r2,1000e9d8 <__alt_data_end+0xf000e9d8>
1000eb20:	42000204 	addi	r8,r8,8
1000eb24:	003fb406 	br	1000e9f8 <__alt_data_end+0xf000e9f8>
1000eb28:	0021883a 	mov	r16,zero
1000eb2c:	003e4306 	br	1000e43c <__alt_data_end+0xf000e43c>
1000eb30:	d9002f17 	ldw	r4,188(sp)
1000eb34:	b80b883a 	mov	r5,r23
1000eb38:	b00d883a 	mov	r6,r22
1000eb3c:	0019d080 	call	10019d08 <__ssprint_r>
1000eb40:	1039ce1e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000eb44:	d8802617 	ldw	r2,152(sp)
1000eb48:	db003317 	ldw	r12,204(sp)
1000eb4c:	d8c02017 	ldw	r3,128(sp)
1000eb50:	da000404 	addi	r8,sp,16
1000eb54:	6085c83a 	sub	r2,r12,r2
1000eb58:	003e3706 	br	1000e438 <__alt_data_end+0xf000e438>
1000eb5c:	00800184 	movi	r2,6
1000eb60:	1240012e 	bgeu	r2,r9,1000eb68 <___svfprintf_internal_r+0x1c0c>
1000eb64:	1013883a 	mov	r9,r2
1000eb68:	4825883a 	mov	r18,r9
1000eb6c:	4805883a 	mov	r2,r9
1000eb70:	4800a416 	blt	r9,zero,1000ee04 <___svfprintf_internal_r+0x1ea8>
1000eb74:	d8802a15 	stw	r2,168(sp)
1000eb78:	008400b4 	movhi	r2,4098
1000eb7c:	10944304 	addi	r2,r2,20748
1000eb80:	d8803115 	stw	r2,196(sp)
1000eb84:	dcc02d15 	stw	r19,180(sp)
1000eb88:	d8003215 	stw	zero,200(sp)
1000eb8c:	d8003415 	stw	zero,208(sp)
1000eb90:	0005883a 	mov	r2,zero
1000eb94:	003a3106 	br	1000d45c <__alt_data_end+0xf000d45c>
1000eb98:	030400b4 	movhi	r12,4098
1000eb9c:	63144984 	addi	r12,r12,20774
1000eba0:	db003615 	stw	r12,216(sp)
1000eba4:	003af406 	br	1000d778 <__alt_data_end+0xf000d778>
1000eba8:	d8c02617 	ldw	r3,152(sp)
1000ebac:	00bfff44 	movi	r2,-3
1000ebb0:	18801516 	blt	r3,r2,1000ec08 <___svfprintf_internal_r+0x1cac>
1000ebb4:	48c01416 	blt	r9,r3,1000ec08 <___svfprintf_internal_r+0x1cac>
1000ebb8:	d8c03415 	stw	r3,208(sp)
1000ebbc:	040019c4 	movi	r16,103
1000ebc0:	003f4906 	br	1000e8e8 <__alt_data_end+0xf000e8e8>
1000ebc4:	05400b44 	movi	r21,45
1000ebc8:	dd402785 	stb	r21,158(sp)
1000ebcc:	003b3a06 	br	1000d8b8 <__alt_data_end+0xf000d8b8>
1000ebd0:	00c00b44 	movi	r3,45
1000ebd4:	d8802a15 	stw	r2,168(sp)
1000ebd8:	dc402d17 	ldw	r17,180(sp)
1000ebdc:	d8c02785 	stb	r3,158(sp)
1000ebe0:	dcc02d15 	stw	r19,180(sp)
1000ebe4:	d8003215 	stw	zero,200(sp)
1000ebe8:	00800b44 	movi	r2,45
1000ebec:	003a1806 	br	1000d450 <__alt_data_end+0xf000d450>
1000ebf0:	010400b4 	movhi	r4,4098
1000ebf4:	21144584 	addi	r4,r4,20758
1000ebf8:	d9002b15 	stw	r4,172(sp)
1000ebfc:	003cc306 	br	1000df0c <__alt_data_end+0xf000df0c>
1000ec00:	5005883a 	mov	r2,r10
1000ec04:	003f2d06 	br	1000e8bc <__alt_data_end+0xf000e8bc>
1000ec08:	843fff84 	addi	r16,r16,-2
1000ec0c:	1f3fffc4 	addi	fp,r3,-1
1000ec10:	df002615 	stw	fp,152(sp)
1000ec14:	dc0022c5 	stb	r16,139(sp)
1000ec18:	e000a216 	blt	fp,zero,1000eea4 <___svfprintf_internal_r+0x1f48>
1000ec1c:	00800ac4 	movi	r2,43
1000ec20:	d8802305 	stb	r2,140(sp)
1000ec24:	00800244 	movi	r2,9
1000ec28:	1700820e 	bge	r2,fp,1000ee34 <___svfprintf_internal_r+0x1ed8>
1000ec2c:	dd4022c4 	addi	r21,sp,139
1000ec30:	dc002b15 	stw	r16,172(sp)
1000ec34:	8825883a 	mov	r18,r17
1000ec38:	a821883a 	mov	r16,r21
1000ec3c:	4023883a 	mov	r17,r8
1000ec40:	e009883a 	mov	r4,fp
1000ec44:	01400284 	movi	r5,10
1000ec48:	000c6840 	call	1000c684 <__modsi3>
1000ec4c:	10800c04 	addi	r2,r2,48
1000ec50:	843fffc4 	addi	r16,r16,-1
1000ec54:	e009883a 	mov	r4,fp
1000ec58:	01400284 	movi	r5,10
1000ec5c:	80800005 	stb	r2,0(r16)
1000ec60:	000c6300 	call	1000c630 <__divsi3>
1000ec64:	1039883a 	mov	fp,r2
1000ec68:	00800244 	movi	r2,9
1000ec6c:	173ff416 	blt	r2,fp,1000ec40 <__alt_data_end+0xf000ec40>
1000ec70:	8811883a 	mov	r8,r17
1000ec74:	e0800c04 	addi	r2,fp,48
1000ec78:	9023883a 	mov	r17,r18
1000ec7c:	8025883a 	mov	r18,r16
1000ec80:	913fffc4 	addi	r4,r18,-1
1000ec84:	90bfffc5 	stb	r2,-1(r18)
1000ec88:	dc002b17 	ldw	r16,172(sp)
1000ec8c:	25408e2e 	bgeu	r4,r21,1000eec8 <___svfprintf_internal_r+0x1f6c>
1000ec90:	d9402384 	addi	r5,sp,142
1000ec94:	2c8bc83a 	sub	r5,r5,r18
1000ec98:	d8c02344 	addi	r3,sp,141
1000ec9c:	a94b883a 	add	r5,r21,r5
1000eca0:	00000106 	br	1000eca8 <___svfprintf_internal_r+0x1d4c>
1000eca4:	20800003 	ldbu	r2,0(r4)
1000eca8:	18800005 	stb	r2,0(r3)
1000ecac:	18c00044 	addi	r3,r3,1
1000ecb0:	21000044 	addi	r4,r4,1
1000ecb4:	197ffb1e 	bne	r3,r5,1000eca4 <__alt_data_end+0xf000eca4>
1000ecb8:	d8802304 	addi	r2,sp,140
1000ecbc:	1485c83a 	sub	r2,r2,r18
1000ecc0:	d8c02344 	addi	r3,sp,141
1000ecc4:	1885883a 	add	r2,r3,r2
1000ecc8:	dac03317 	ldw	r11,204(sp)
1000eccc:	156bc83a 	sub	r21,r2,r21
1000ecd0:	dd403a15 	stw	r21,232(sp)
1000ecd4:	00800044 	movi	r2,1
1000ecd8:	5d65883a 	add	r18,r11,r21
1000ecdc:	12c0770e 	bge	r2,r11,1000eebc <___svfprintf_internal_r+0x1f60>
1000ece0:	94800044 	addi	r18,r18,1
1000ece4:	9005883a 	mov	r2,r18
1000ece8:	90007216 	blt	r18,zero,1000eeb4 <___svfprintf_internal_r+0x1f58>
1000ecec:	d8003415 	stw	zero,208(sp)
1000ecf0:	003f0506 	br	1000e908 <__alt_data_end+0xf000e908>
1000ecf4:	da402a15 	stw	r9,168(sp)
1000ecf8:	dd402783 	ldbu	r21,158(sp)
1000ecfc:	4825883a 	mov	r18,r9
1000ed00:	dcc02d15 	stw	r19,180(sp)
1000ed04:	d8003215 	stw	zero,200(sp)
1000ed08:	d8003415 	stw	zero,208(sp)
1000ed0c:	0039cc06 	br	1000d440 <__alt_data_end+0xf000d440>
1000ed10:	483eb01e 	bne	r9,zero,1000e7d4 <__alt_data_end+0xf000e7d4>
1000ed14:	9013883a 	mov	r9,r18
1000ed18:	003eae06 	br	1000e7d4 <__alt_data_end+0xf000e7d4>
1000ed1c:	d9002f17 	ldw	r4,188(sp)
1000ed20:	b80b883a 	mov	r5,r23
1000ed24:	b00d883a 	mov	r6,r22
1000ed28:	0019d080 	call	10019d08 <__ssprint_r>
1000ed2c:	1039531e 	bne	r2,zero,1000d27c <__alt_data_end+0xf000d27c>
1000ed30:	dc002617 	ldw	r16,152(sp)
1000ed34:	d8c02017 	ldw	r3,128(sp)
1000ed38:	d8801f17 	ldw	r2,124(sp)
1000ed3c:	da000404 	addi	r8,sp,16
1000ed40:	003e6f06 	br	1000e700 <__alt_data_end+0xf000e700>
1000ed44:	00c00b44 	movi	r3,45
1000ed48:	64a0003c 	xorhi	r18,r12,32768
1000ed4c:	d8c02a05 	stb	r3,168(sp)
1000ed50:	003ea606 	br	1000e7ec <__alt_data_end+0xf000e7ec>
1000ed54:	4f000044 	addi	fp,r9,1
1000ed58:	003eab06 	br	1000e808 <__alt_data_end+0xf000e808>
1000ed5c:	d8c03417 	ldw	r3,208(sp)
1000ed60:	00c0410e 	bge	zero,r3,1000ee68 <___svfprintf_internal_r+0x1f0c>
1000ed64:	04800044 	movi	r18,1
1000ed68:	dac03317 	ldw	r11,204(sp)
1000ed6c:	92e5883a 	add	r18,r18,r11
1000ed70:	9005883a 	mov	r2,r18
1000ed74:	903ee40e 	bge	r18,zero,1000e908 <__alt_data_end+0xf000e908>
1000ed78:	0005883a 	mov	r2,zero
1000ed7c:	003ee206 	br	1000e908 <__alt_data_end+0xf000e908>
1000ed80:	d8c02617 	ldw	r3,152(sp)
1000ed84:	d8c03415 	stw	r3,208(sp)
1000ed88:	00c0310e 	bge	zero,r3,1000ee50 <___svfprintf_internal_r+0x1ef4>
1000ed8c:	48001f1e 	bne	r9,zero,1000ee0c <___svfprintf_internal_r+0x1eb0>
1000ed90:	8c40004c 	andi	r17,r17,1
1000ed94:	88001d1e 	bne	r17,zero,1000ee0c <___svfprintf_internal_r+0x1eb0>
1000ed98:	1805883a 	mov	r2,r3
1000ed9c:	183ed90e 	bge	r3,zero,1000e904 <__alt_data_end+0xf000e904>
1000eda0:	0005883a 	mov	r2,zero
1000eda4:	003ed706 	br	1000e904 <__alt_data_end+0xf000e904>
1000eda8:	d8802117 	ldw	r2,132(sp)
1000edac:	003ec306 	br	1000e8bc <__alt_data_end+0xf000e8bc>
1000edb0:	d9003717 	ldw	r4,220(sp)
1000edb4:	900b883a 	mov	r5,r18
1000edb8:	000d883a 	mov	r6,zero
1000edbc:	000f883a 	mov	r7,zero
1000edc0:	da004015 	stw	r8,256(sp)
1000edc4:	da403f15 	stw	r9,252(sp)
1000edc8:	da803e15 	stw	r10,248(sp)
1000edcc:	001fbe00 	call	1001fbe0 <__eqdf2>
1000edd0:	da004017 	ldw	r8,256(sp)
1000edd4:	da403f17 	ldw	r9,252(sp)
1000edd8:	da803e17 	ldw	r10,248(sp)
1000eddc:	103f2a26 	beq	r2,zero,1000ea88 <__alt_data_end+0xf000ea88>
1000ede0:	00800044 	movi	r2,1
1000ede4:	1707c83a 	sub	r3,r2,fp
1000ede8:	d8c02615 	stw	r3,152(sp)
1000edec:	003f2706 	br	1000ea8c <__alt_data_end+0xf000ea8c>
1000edf0:	db003417 	ldw	r12,208(sp)
1000edf4:	64800044 	addi	r18,r12,1
1000edf8:	9005883a 	mov	r2,r18
1000edfc:	903ec20e 	bge	r18,zero,1000e908 <__alt_data_end+0xf000e908>
1000ee00:	003fdd06 	br	1000ed78 <__alt_data_end+0xf000ed78>
1000ee04:	0005883a 	mov	r2,zero
1000ee08:	003f5a06 	br	1000eb74 <__alt_data_end+0xf000eb74>
1000ee0c:	dac03417 	ldw	r11,208(sp)
1000ee10:	4a400044 	addi	r9,r9,1
1000ee14:	5a65883a 	add	r18,r11,r9
1000ee18:	9005883a 	mov	r2,r18
1000ee1c:	903eba0e 	bge	r18,zero,1000e908 <__alt_data_end+0xf000e908>
1000ee20:	003fd506 	br	1000ed78 <__alt_data_end+0xf000ed78>
1000ee24:	008400b4 	movhi	r2,4098
1000ee28:	10944584 	addi	r2,r2,20758
1000ee2c:	d8802b15 	stw	r2,172(sp)
1000ee30:	003d2906 	br	1000e2d8 <__alt_data_end+0xf000e2d8>
1000ee34:	00800c04 	movi	r2,48
1000ee38:	e0c00c04 	addi	r3,fp,48
1000ee3c:	d8802345 	stb	r2,141(sp)
1000ee40:	d8c02385 	stb	r3,142(sp)
1000ee44:	d88023c4 	addi	r2,sp,143
1000ee48:	dd4022c4 	addi	r21,sp,139
1000ee4c:	003f9e06 	br	1000ecc8 <__alt_data_end+0xf000ecc8>
1000ee50:	4800081e 	bne	r9,zero,1000ee74 <___svfprintf_internal_r+0x1f18>
1000ee54:	8c40004c 	andi	r17,r17,1
1000ee58:	8800061e 	bne	r17,zero,1000ee74 <___svfprintf_internal_r+0x1f18>
1000ee5c:	00800044 	movi	r2,1
1000ee60:	1025883a 	mov	r18,r2
1000ee64:	003ea806 	br	1000e908 <__alt_data_end+0xf000e908>
1000ee68:	04800084 	movi	r18,2
1000ee6c:	90e5c83a 	sub	r18,r18,r3
1000ee70:	003fbd06 	br	1000ed68 <__alt_data_end+0xf000ed68>
1000ee74:	4c800084 	addi	r18,r9,2
1000ee78:	9005883a 	mov	r2,r18
1000ee7c:	903ea20e 	bge	r18,zero,1000e908 <__alt_data_end+0xf000e908>
1000ee80:	003fbd06 	br	1000ed78 <__alt_data_end+0xf000ed78>
1000ee84:	dac02d17 	ldw	r11,180(sp)
1000ee88:	5a400017 	ldw	r9,0(r11)
1000ee8c:	5ac00104 	addi	r11,r11,4
1000ee90:	dac02d15 	stw	r11,180(sp)
1000ee94:	483e3f0e 	bge	r9,zero,1000e794 <__alt_data_end+0xf000e794>
1000ee98:	027fffc4 	movi	r9,-1
1000ee9c:	1c000047 	ldb	r16,1(r3)
1000eea0:	00388406 	br	1000d0b4 <__alt_data_end+0xf000d0b4>
1000eea4:	00800b44 	movi	r2,45
1000eea8:	0739c83a 	sub	fp,zero,fp
1000eeac:	d8802305 	stb	r2,140(sp)
1000eeb0:	003f5c06 	br	1000ec24 <__alt_data_end+0xf000ec24>
1000eeb4:	0005883a 	mov	r2,zero
1000eeb8:	003f8c06 	br	1000ecec <__alt_data_end+0xf000ecec>
1000eebc:	88a2703a 	and	r17,r17,r2
1000eec0:	883f8826 	beq	r17,zero,1000ece4 <__alt_data_end+0xf000ece4>
1000eec4:	003f8606 	br	1000ece0 <__alt_data_end+0xf000ece0>
1000eec8:	d8802344 	addi	r2,sp,141
1000eecc:	003f7e06 	br	1000ecc8 <__alt_data_end+0xf000ecc8>
1000eed0:	d8c02617 	ldw	r3,152(sp)
1000eed4:	003f4d06 	br	1000ec0c <__alt_data_end+0xf000ec0c>
1000eed8:	dac02f17 	ldw	r11,188(sp)
1000eedc:	00800304 	movi	r2,12
1000eee0:	58800015 	stw	r2,0(r11)
1000eee4:	00bfffc4 	movi	r2,-1
1000eee8:	0038e806 	br	1000d28c <__alt_data_end+0xf000d28c>

1000eeec <___vfprintf_internal_r>:
1000eeec:	defeb604 	addi	sp,sp,-1320
1000eef0:	dfc14915 	stw	ra,1316(sp)
1000eef4:	ddc14715 	stw	r23,1308(sp)
1000eef8:	dd814615 	stw	r22,1304(sp)
1000eefc:	282f883a 	mov	r23,r5
1000ef00:	202d883a 	mov	r22,r4
1000ef04:	d9812a15 	stw	r6,1192(sp)
1000ef08:	d9c12d15 	stw	r7,1204(sp)
1000ef0c:	df014815 	stw	fp,1312(sp)
1000ef10:	dd414515 	stw	r21,1300(sp)
1000ef14:	dd014415 	stw	r20,1296(sp)
1000ef18:	dcc14315 	stw	r19,1292(sp)
1000ef1c:	dc814215 	stw	r18,1288(sp)
1000ef20:	dc414115 	stw	r17,1284(sp)
1000ef24:	dc014015 	stw	r16,1280(sp)
1000ef28:	00155200 	call	10015520 <_localeconv_r>
1000ef2c:	10800017 	ldw	r2,0(r2)
1000ef30:	1009883a 	mov	r4,r2
1000ef34:	d8813515 	stw	r2,1236(sp)
1000ef38:	000cc400 	call	1000cc40 <strlen>
1000ef3c:	d8813815 	stw	r2,1248(sp)
1000ef40:	b0000226 	beq	r22,zero,1000ef4c <___vfprintf_internal_r+0x60>
1000ef44:	b0800e17 	ldw	r2,56(r22)
1000ef48:	10010426 	beq	r2,zero,1000f35c <___vfprintf_internal_r+0x470>
1000ef4c:	b8c0030b 	ldhu	r3,12(r23)
1000ef50:	1908000c 	andi	r4,r3,8192
1000ef54:	1805883a 	mov	r2,r3
1000ef58:	2000071e 	bne	r4,zero,1000ef78 <___vfprintf_internal_r+0x8c>
1000ef5c:	b9001917 	ldw	r4,100(r23)
1000ef60:	18880014 	ori	r2,r3,8192
1000ef64:	00f7ffc4 	movi	r3,-8193
1000ef68:	20c8703a 	and	r4,r4,r3
1000ef6c:	b880030d 	sth	r2,12(r23)
1000ef70:	1007883a 	mov	r3,r2
1000ef74:	b9001915 	stw	r4,100(r23)
1000ef78:	1100020c 	andi	r4,r2,8
1000ef7c:	2000a726 	beq	r4,zero,1000f21c <___vfprintf_internal_r+0x330>
1000ef80:	b9000417 	ldw	r4,16(r23)
1000ef84:	2000a526 	beq	r4,zero,1000f21c <___vfprintf_internal_r+0x330>
1000ef88:	1080068c 	andi	r2,r2,26
1000ef8c:	01000284 	movi	r4,10
1000ef90:	1100ab26 	beq	r2,r4,1000f240 <___vfprintf_internal_r+0x354>
1000ef94:	dac10e04 	addi	r11,sp,1080
1000ef98:	db010dc4 	addi	r12,sp,1079
1000ef9c:	d8800404 	addi	r2,sp,16
1000efa0:	050400b4 	movhi	r20,4098
1000efa4:	dac12815 	stw	r11,1184(sp)
1000efa8:	5b17c83a 	sub	r11,r11,r12
1000efac:	a5144d84 	addi	r20,r20,20790
1000efb0:	db012915 	stw	r12,1188(sp)
1000efb4:	d8811e15 	stw	r2,1144(sp)
1000efb8:	d8012015 	stw	zero,1152(sp)
1000efbc:	d8011f15 	stw	zero,1148(sp)
1000efc0:	d8013315 	stw	zero,1228(sp)
1000efc4:	d8013715 	stw	zero,1244(sp)
1000efc8:	d8013915 	stw	zero,1252(sp)
1000efcc:	d8013b15 	stw	zero,1260(sp)
1000efd0:	d8013a15 	stw	zero,1256(sp)
1000efd4:	d8012f15 	stw	zero,1212(sp)
1000efd8:	1011883a 	mov	r8,r2
1000efdc:	dac13c15 	stw	r11,1264(sp)
1000efe0:	db012a17 	ldw	r12,1192(sp)
1000efe4:	60800007 	ldb	r2,0(r12)
1000efe8:	1000df26 	beq	r2,zero,1000f368 <___vfprintf_internal_r+0x47c>
1000efec:	00c00944 	movi	r3,37
1000eff0:	10c0dd26 	beq	r2,r3,1000f368 <___vfprintf_internal_r+0x47c>
1000eff4:	6021883a 	mov	r16,r12
1000eff8:	00000106 	br	1000f000 <___vfprintf_internal_r+0x114>
1000effc:	10c08426 	beq	r2,r3,1000f210 <___vfprintf_internal_r+0x324>
1000f000:	84000044 	addi	r16,r16,1
1000f004:	80800007 	ldb	r2,0(r16)
1000f008:	103ffc1e 	bne	r2,zero,1000effc <__alt_data_end+0xf000effc>
1000f00c:	dac12a17 	ldw	r11,1192(sp)
1000f010:	82e3c83a 	sub	r17,r16,r11
1000f014:	88000f26 	beq	r17,zero,1000f054 <___vfprintf_internal_r+0x168>
1000f018:	d8c12017 	ldw	r3,1152(sp)
1000f01c:	d8811f17 	ldw	r2,1148(sp)
1000f020:	dac12a17 	ldw	r11,1192(sp)
1000f024:	1c47883a 	add	r3,r3,r17
1000f028:	10800044 	addi	r2,r2,1
1000f02c:	d8c12015 	stw	r3,1152(sp)
1000f030:	42c00015 	stw	r11,0(r8)
1000f034:	44400115 	stw	r17,4(r8)
1000f038:	d8811f15 	stw	r2,1148(sp)
1000f03c:	00c001c4 	movi	r3,7
1000f040:	1880b416 	blt	r3,r2,1000f314 <___vfprintf_internal_r+0x428>
1000f044:	42000204 	addi	r8,r8,8
1000f048:	db012f17 	ldw	r12,1212(sp)
1000f04c:	6459883a 	add	r12,r12,r17
1000f050:	db012f15 	stw	r12,1212(sp)
1000f054:	80800007 	ldb	r2,0(r16)
1000f058:	1000b526 	beq	r2,zero,1000f330 <___vfprintf_internal_r+0x444>
1000f05c:	80800044 	addi	r2,r16,1
1000f060:	84000047 	ldb	r16,1(r16)
1000f064:	d8012785 	stb	zero,1182(sp)
1000f068:	000d883a 	mov	r6,zero
1000f06c:	027fffc4 	movi	r9,-1
1000f070:	d8012e15 	stw	zero,1208(sp)
1000f074:	0023883a 	mov	r17,zero
1000f078:	01001604 	movi	r4,88
1000f07c:	01400244 	movi	r5,9
1000f080:	02800a84 	movi	r10,42
1000f084:	01c01b04 	movi	r7,108
1000f088:	10c00044 	addi	r3,r2,1
1000f08c:	80bff804 	addi	r2,r16,-32
1000f090:	2082f236 	bltu	r4,r2,1000fc5c <___vfprintf_internal_r+0xd70>
1000f094:	100490ba 	slli	r2,r2,2
1000f098:	02c40074 	movhi	r11,4097
1000f09c:	5afc2b04 	addi	r11,r11,-3924
1000f0a0:	12c5883a 	add	r2,r2,r11
1000f0a4:	10800017 	ldw	r2,0(r2)
1000f0a8:	1000683a 	jmp	r2
1000f0ac:	1000faa4 	muli	zero,r2,1002
1000f0b0:	1000fc5c 	xori	zero,r2,1009
1000f0b4:	1000fc5c 	xori	zero,r2,1009
1000f0b8:	1000fac4 	addi	zero,r2,1003
1000f0bc:	1000fc5c 	xori	zero,r2,1009
1000f0c0:	1000fc5c 	xori	zero,r2,1009
1000f0c4:	1000fc5c 	xori	zero,r2,1009
1000f0c8:	1000fc5c 	xori	zero,r2,1009
1000f0cc:	1000fc5c 	xori	zero,r2,1009
1000f0d0:	1000fc5c 	xori	zero,r2,1009
1000f0d4:	1000fc20 	cmpeqi	zero,r2,1008
1000f0d8:	1000fc4c 	andi	zero,r2,1009
1000f0dc:	1000fc5c 	xori	zero,r2,1009
1000f0e0:	1000f370 	cmpltui	zero,r2,973
1000f0e4:	1000f380 	call	11000f38 <_gp+0xfd1bd0>
1000f0e8:	1000fc5c 	xori	zero,r2,1009
1000f0ec:	1000f3c0 	call	11000f3c <_gp+0xfd1bd4>
1000f0f0:	1000f8b4 	orhi	zero,r2,994
1000f0f4:	1000f8b4 	orhi	zero,r2,994
1000f0f8:	1000f8b4 	orhi	zero,r2,994
1000f0fc:	1000f8b4 	orhi	zero,r2,994
1000f100:	1000f8b4 	orhi	zero,r2,994
1000f104:	1000f8b4 	orhi	zero,r2,994
1000f108:	1000f8b4 	orhi	zero,r2,994
1000f10c:	1000f8b4 	orhi	zero,r2,994
1000f110:	1000f8b4 	orhi	zero,r2,994
1000f114:	1000fc5c 	xori	zero,r2,1009
1000f118:	1000fc5c 	xori	zero,r2,1009
1000f11c:	1000fc5c 	xori	zero,r2,1009
1000f120:	1000fc5c 	xori	zero,r2,1009
1000f124:	1000fc5c 	xori	zero,r2,1009
1000f128:	1000fc5c 	xori	zero,r2,1009
1000f12c:	1000fc5c 	xori	zero,r2,1009
1000f130:	1000fc5c 	xori	zero,r2,1009
1000f134:	1000fc5c 	xori	zero,r2,1009
1000f138:	1000fc5c 	xori	zero,r2,1009
1000f13c:	1000f8e8 	cmpgeui	zero,r2,995
1000f140:	1000f3d0 	cmplti	zero,r2,975
1000f144:	1000fc5c 	xori	zero,r2,1009
1000f148:	1000f3d0 	cmplti	zero,r2,975
1000f14c:	1000fc5c 	xori	zero,r2,1009
1000f150:	1000fc5c 	xori	zero,r2,1009
1000f154:	1000fc5c 	xori	zero,r2,1009
1000f158:	1000fc5c 	xori	zero,r2,1009
1000f15c:	1000f474 	orhi	zero,r2,977
1000f160:	1000fc5c 	xori	zero,r2,1009
1000f164:	1000fc5c 	xori	zero,r2,1009
1000f168:	1000f484 	addi	zero,r2,978
1000f16c:	1000fc5c 	xori	zero,r2,1009
1000f170:	1000fc5c 	xori	zero,r2,1009
1000f174:	1000fc5c 	xori	zero,r2,1009
1000f178:	1000fc5c 	xori	zero,r2,1009
1000f17c:	1000fc5c 	xori	zero,r2,1009
1000f180:	1000f880 	call	11000f88 <_gp+0xfd1c20>
1000f184:	1000fc5c 	xori	zero,r2,1009
1000f188:	1000fc5c 	xori	zero,r2,1009
1000f18c:	1000f930 	cmpltui	zero,r2,996
1000f190:	1000fc5c 	xori	zero,r2,1009
1000f194:	1000fc5c 	xori	zero,r2,1009
1000f198:	1000fc5c 	xori	zero,r2,1009
1000f19c:	1000fc5c 	xori	zero,r2,1009
1000f1a0:	1000fc5c 	xori	zero,r2,1009
1000f1a4:	1000fc5c 	xori	zero,r2,1009
1000f1a8:	1000fc5c 	xori	zero,r2,1009
1000f1ac:	1000fc5c 	xori	zero,r2,1009
1000f1b0:	1000fc5c 	xori	zero,r2,1009
1000f1b4:	1000fc5c 	xori	zero,r2,1009
1000f1b8:	1000fb24 	muli	zero,r2,1004
1000f1bc:	1000fad4 	ori	zero,r2,1003
1000f1c0:	1000f3d0 	cmplti	zero,r2,975
1000f1c4:	1000f3d0 	cmplti	zero,r2,975
1000f1c8:	1000f3d0 	cmplti	zero,r2,975
1000f1cc:	1000fb14 	ori	zero,r2,1004
1000f1d0:	1000fad4 	ori	zero,r2,1003
1000f1d4:	1000fc5c 	xori	zero,r2,1009
1000f1d8:	1000fc5c 	xori	zero,r2,1009
1000f1dc:	1000fa1c 	xori	zero,r2,1000
1000f1e0:	1000fc5c 	xori	zero,r2,1009
1000f1e4:	1000fa30 	cmpltui	zero,r2,1000
1000f1e8:	1000fa64 	muli	zero,r2,1001
1000f1ec:	1000fb64 	muli	zero,r2,1005
1000f1f0:	1000f98c 	andi	zero,r2,998
1000f1f4:	1000fc5c 	xori	zero,r2,1009
1000f1f8:	1000fbac 	andhi	zero,r2,1006
1000f1fc:	1000fc5c 	xori	zero,r2,1009
1000f200:	1000f99c 	xori	zero,r2,998
1000f204:	1000fc5c 	xori	zero,r2,1009
1000f208:	1000fc5c 	xori	zero,r2,1009
1000f20c:	1000f9dc 	xori	zero,r2,999
1000f210:	db012a17 	ldw	r12,1192(sp)
1000f214:	8323c83a 	sub	r17,r16,r12
1000f218:	003f7e06 	br	1000f014 <__alt_data_end+0xf000f014>
1000f21c:	b009883a 	mov	r4,r22
1000f220:	b80b883a 	mov	r5,r23
1000f224:	001274c0 	call	1001274c <__swsetup_r>
1000f228:	10002d1e 	bne	r2,zero,1000f2e0 <___vfprintf_internal_r+0x3f4>
1000f22c:	b8c0030b 	ldhu	r3,12(r23)
1000f230:	01000284 	movi	r4,10
1000f234:	1805883a 	mov	r2,r3
1000f238:	1080068c 	andi	r2,r2,26
1000f23c:	113f551e 	bne	r2,r4,1000ef94 <__alt_data_end+0xf000ef94>
1000f240:	b880038b 	ldhu	r2,14(r23)
1000f244:	113fffcc 	andi	r4,r2,65535
1000f248:	2120001c 	xori	r4,r4,32768
1000f24c:	21200004 	addi	r4,r4,-32768
1000f250:	203f5016 	blt	r4,zero,1000ef94 <__alt_data_end+0xf000ef94>
1000f254:	bac01917 	ldw	r11,100(r23)
1000f258:	ba800717 	ldw	r10,28(r23)
1000f25c:	ba400917 	ldw	r9,36(r23)
1000f260:	d9812a17 	ldw	r6,1192(sp)
1000f264:	d9c12d17 	ldw	r7,1204(sp)
1000f268:	02010004 	movi	r8,1024
1000f26c:	18ffff4c 	andi	r3,r3,65533
1000f270:	d881078d 	sth	r2,1054(sp)
1000f274:	b009883a 	mov	r4,r22
1000f278:	d8800404 	addi	r2,sp,16
1000f27c:	d9410404 	addi	r5,sp,1040
1000f280:	d8c1070d 	sth	r3,1052(sp)
1000f284:	dac11d15 	stw	r11,1140(sp)
1000f288:	da810b15 	stw	r10,1068(sp)
1000f28c:	da410d15 	stw	r9,1076(sp)
1000f290:	d8810415 	stw	r2,1040(sp)
1000f294:	d8810815 	stw	r2,1056(sp)
1000f298:	da010615 	stw	r8,1048(sp)
1000f29c:	da010915 	stw	r8,1060(sp)
1000f2a0:	d8010a15 	stw	zero,1064(sp)
1000f2a4:	000eeec0 	call	1000eeec <___vfprintf_internal_r>
1000f2a8:	1021883a 	mov	r16,r2
1000f2ac:	10000416 	blt	r2,zero,1000f2c0 <___vfprintf_internal_r+0x3d4>
1000f2b0:	b009883a 	mov	r4,r22
1000f2b4:	d9410404 	addi	r5,sp,1040
1000f2b8:	00141a40 	call	100141a4 <_fflush_r>
1000f2bc:	1006ee1e 	bne	r2,zero,10010e78 <___vfprintf_internal_r+0x1f8c>
1000f2c0:	d881070b 	ldhu	r2,1052(sp)
1000f2c4:	1080100c 	andi	r2,r2,64
1000f2c8:	10000326 	beq	r2,zero,1000f2d8 <___vfprintf_internal_r+0x3ec>
1000f2cc:	b880030b 	ldhu	r2,12(r23)
1000f2d0:	10801014 	ori	r2,r2,64
1000f2d4:	b880030d 	sth	r2,12(r23)
1000f2d8:	8005883a 	mov	r2,r16
1000f2dc:	00000106 	br	1000f2e4 <___vfprintf_internal_r+0x3f8>
1000f2e0:	00bfffc4 	movi	r2,-1
1000f2e4:	dfc14917 	ldw	ra,1316(sp)
1000f2e8:	df014817 	ldw	fp,1312(sp)
1000f2ec:	ddc14717 	ldw	r23,1308(sp)
1000f2f0:	dd814617 	ldw	r22,1304(sp)
1000f2f4:	dd414517 	ldw	r21,1300(sp)
1000f2f8:	dd014417 	ldw	r20,1296(sp)
1000f2fc:	dcc14317 	ldw	r19,1292(sp)
1000f300:	dc814217 	ldw	r18,1288(sp)
1000f304:	dc414117 	ldw	r17,1284(sp)
1000f308:	dc014017 	ldw	r16,1280(sp)
1000f30c:	dec14a04 	addi	sp,sp,1320
1000f310:	f800283a 	ret
1000f314:	b009883a 	mov	r4,r22
1000f318:	b80b883a 	mov	r5,r23
1000f31c:	d9811e04 	addi	r6,sp,1144
1000f320:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f324:	1000081e 	bne	r2,zero,1000f348 <___vfprintf_internal_r+0x45c>
1000f328:	da000404 	addi	r8,sp,16
1000f32c:	003f4606 	br	1000f048 <__alt_data_end+0xf000f048>
1000f330:	d8812017 	ldw	r2,1152(sp)
1000f334:	10000426 	beq	r2,zero,1000f348 <___vfprintf_internal_r+0x45c>
1000f338:	b009883a 	mov	r4,r22
1000f33c:	b80b883a 	mov	r5,r23
1000f340:	d9811e04 	addi	r6,sp,1144
1000f344:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f348:	b880030b 	ldhu	r2,12(r23)
1000f34c:	1080100c 	andi	r2,r2,64
1000f350:	103fe31e 	bne	r2,zero,1000f2e0 <__alt_data_end+0xf000f2e0>
1000f354:	d8812f17 	ldw	r2,1212(sp)
1000f358:	003fe206 	br	1000f2e4 <__alt_data_end+0xf000f2e4>
1000f35c:	b009883a 	mov	r4,r22
1000f360:	001474c0 	call	1001474c <__sinit>
1000f364:	003ef906 	br	1000ef4c <__alt_data_end+0xf000ef4c>
1000f368:	dc012a17 	ldw	r16,1192(sp)
1000f36c:	003f3906 	br	1000f054 <__alt_data_end+0xf000f054>
1000f370:	1805883a 	mov	r2,r3
1000f374:	8c400114 	ori	r17,r17,4
1000f378:	1c000007 	ldb	r16,0(r3)
1000f37c:	003f4206 	br	1000f088 <__alt_data_end+0xf000f088>
1000f380:	1c000007 	ldb	r16,0(r3)
1000f384:	18800044 	addi	r2,r3,1
1000f388:	8286b326 	beq	r16,r10,10010e58 <___vfprintf_internal_r+0x1f6c>
1000f38c:	82fff404 	addi	r11,r16,-48
1000f390:	1007883a 	mov	r3,r2
1000f394:	0013883a 	mov	r9,zero
1000f398:	2aff3c36 	bltu	r5,r11,1000f08c <__alt_data_end+0xf000f08c>
1000f39c:	1c000007 	ldb	r16,0(r3)
1000f3a0:	4a4002a4 	muli	r9,r9,10
1000f3a4:	18c00044 	addi	r3,r3,1
1000f3a8:	5a53883a 	add	r9,r11,r9
1000f3ac:	82fff404 	addi	r11,r16,-48
1000f3b0:	2afffa2e 	bgeu	r5,r11,1000f39c <__alt_data_end+0xf000f39c>
1000f3b4:	483f350e 	bge	r9,zero,1000f08c <__alt_data_end+0xf000f08c>
1000f3b8:	027fffc4 	movi	r9,-1
1000f3bc:	003f3306 	br	1000f08c <__alt_data_end+0xf000f08c>
1000f3c0:	8c402014 	ori	r17,r17,128
1000f3c4:	1805883a 	mov	r2,r3
1000f3c8:	1c000007 	ldb	r16,0(r3)
1000f3cc:	003f2e06 	br	1000f088 <__alt_data_end+0xf000f088>
1000f3d0:	db012d17 	ldw	r12,1204(sp)
1000f3d4:	dac12d17 	ldw	r11,1204(sp)
1000f3d8:	d8c12a15 	stw	r3,1192(sp)
1000f3dc:	63000017 	ldw	r12,0(r12)
1000f3e0:	5ac00117 	ldw	r11,4(r11)
1000f3e4:	d9812785 	stb	r6,1182(sp)
1000f3e8:	6009883a 	mov	r4,r12
1000f3ec:	580b883a 	mov	r5,r11
1000f3f0:	db013715 	stw	r12,1244(sp)
1000f3f4:	da013f15 	stw	r8,1276(sp)
1000f3f8:	da413e15 	stw	r9,1272(sp)
1000f3fc:	dac13915 	stw	r11,1252(sp)
1000f400:	0017a240 	call	10017a24 <__fpclassifyd>
1000f404:	db012d17 	ldw	r12,1204(sp)
1000f408:	04800044 	movi	r18,1
1000f40c:	da013f17 	ldw	r8,1276(sp)
1000f410:	64c00204 	addi	r19,r12,8
1000f414:	da413e17 	ldw	r9,1272(sp)
1000f418:	d9013717 	ldw	r4,1244(sp)
1000f41c:	d9413917 	ldw	r5,1252(sp)
1000f420:	1484581e 	bne	r2,r18,10010584 <___vfprintf_internal_r+0x1698>
1000f424:	000d883a 	mov	r6,zero
1000f428:	000f883a 	mov	r7,zero
1000f42c:	001fd440 	call	1001fd44 <__ledf2>
1000f430:	da013f17 	ldw	r8,1276(sp)
1000f434:	1005ef16 	blt	r2,zero,10010bf4 <___vfprintf_internal_r+0x1d08>
1000f438:	dd412783 	ldbu	r21,1182(sp)
1000f43c:	008011c4 	movi	r2,71
1000f440:	14053b0e 	bge	r2,r16,10010930 <___vfprintf_internal_r+0x1a44>
1000f444:	00c400b4 	movhi	r3,4098
1000f448:	18d43604 	addi	r3,r3,20696
1000f44c:	d8c13115 	stw	r3,1220(sp)
1000f450:	02c000c4 	movi	r11,3
1000f454:	00bfdfc4 	movi	r2,-129
1000f458:	dac12b15 	stw	r11,1196(sp)
1000f45c:	88a2703a 	and	r17,r17,r2
1000f460:	dcc12d15 	stw	r19,1204(sp)
1000f464:	5825883a 	mov	r18,r11
1000f468:	d8013215 	stw	zero,1224(sp)
1000f46c:	d8013415 	stw	zero,1232(sp)
1000f470:	00003206 	br	1000f53c <___vfprintf_internal_r+0x650>
1000f474:	8c400214 	ori	r17,r17,8
1000f478:	1805883a 	mov	r2,r3
1000f47c:	1c000007 	ldb	r16,0(r3)
1000f480:	003f0106 	br	1000f088 <__alt_data_end+0xf000f088>
1000f484:	8c400414 	ori	r17,r17,16
1000f488:	d8c12a15 	stw	r3,1192(sp)
1000f48c:	88c0080c 	andi	r3,r17,32
1000f490:	d8812d17 	ldw	r2,1204(sp)
1000f494:	18017726 	beq	r3,zero,1000fa74 <___vfprintf_internal_r+0xb88>
1000f498:	db012d17 	ldw	r12,1204(sp)
1000f49c:	14c00017 	ldw	r19,0(r2)
1000f4a0:	17000117 	ldw	fp,4(r2)
1000f4a4:	63000204 	addi	r12,r12,8
1000f4a8:	db012d15 	stw	r12,1204(sp)
1000f4ac:	0005883a 	mov	r2,zero
1000f4b0:	9f06b03a 	or	r3,r19,fp
1000f4b4:	d8012785 	stb	zero,1182(sp)
1000f4b8:	da413215 	stw	r9,1224(sp)
1000f4bc:	002b883a 	mov	r21,zero
1000f4c0:	48000216 	blt	r9,zero,1000f4cc <___vfprintf_internal_r+0x5e0>
1000f4c4:	013fdfc4 	movi	r4,-129
1000f4c8:	8922703a 	and	r17,r17,r4
1000f4cc:	1801ed1e 	bne	r3,zero,1000fc84 <___vfprintf_internal_r+0xd98>
1000f4d0:	4802e026 	beq	r9,zero,10010054 <___vfprintf_internal_r+0x1168>
1000f4d4:	10803fcc 	andi	r2,r2,255
1000f4d8:	00c00044 	movi	r3,1
1000f4dc:	10c20f26 	beq	r2,r3,1000fd1c <___vfprintf_internal_r+0xe30>
1000f4e0:	00c00084 	movi	r3,2
1000f4e4:	10c2fd26 	beq	r2,r3,100100dc <___vfprintf_internal_r+0x11f0>
1000f4e8:	d8c10e04 	addi	r3,sp,1080
1000f4ec:	9808d0fa 	srli	r4,r19,3
1000f4f0:	e00a977a 	slli	r5,fp,29
1000f4f4:	e038d0fa 	srli	fp,fp,3
1000f4f8:	9cc001cc 	andi	r19,r19,7
1000f4fc:	98800c04 	addi	r2,r19,48
1000f500:	18ffffc4 	addi	r3,r3,-1
1000f504:	2926b03a 	or	r19,r5,r4
1000f508:	18800005 	stb	r2,0(r3)
1000f50c:	9f08b03a 	or	r4,r19,fp
1000f510:	203ff61e 	bne	r4,zero,1000f4ec <__alt_data_end+0xf000f4ec>
1000f514:	8900004c 	andi	r4,r17,1
1000f518:	d8c13115 	stw	r3,1220(sp)
1000f51c:	2003791e 	bne	r4,zero,10010304 <___vfprintf_internal_r+0x1418>
1000f520:	dac12817 	ldw	r11,1184(sp)
1000f524:	58e5c83a 	sub	r18,r11,r3
1000f528:	9005883a 	mov	r2,r18
1000f52c:	9240010e 	bge	r18,r9,1000f534 <___vfprintf_internal_r+0x648>
1000f530:	4805883a 	mov	r2,r9
1000f534:	d8812b15 	stw	r2,1196(sp)
1000f538:	d8013415 	stw	zero,1232(sp)
1000f53c:	a8803fcc 	andi	r2,r21,255
1000f540:	1080201c 	xori	r2,r2,128
1000f544:	10bfe004 	addi	r2,r2,-128
1000f548:	10000326 	beq	r2,zero,1000f558 <___vfprintf_internal_r+0x66c>
1000f54c:	db012b17 	ldw	r12,1196(sp)
1000f550:	63000044 	addi	r12,r12,1
1000f554:	db012b15 	stw	r12,1196(sp)
1000f558:	88c0008c 	andi	r3,r17,2
1000f55c:	d8c12c15 	stw	r3,1200(sp)
1000f560:	18000326 	beq	r3,zero,1000f570 <___vfprintf_internal_r+0x684>
1000f564:	dac12b17 	ldw	r11,1196(sp)
1000f568:	5ac00084 	addi	r11,r11,2
1000f56c:	dac12b15 	stw	r11,1196(sp)
1000f570:	8b00210c 	andi	r12,r17,132
1000f574:	db013015 	stw	r12,1216(sp)
1000f578:	6001c01e 	bne	r12,zero,1000fc7c <___vfprintf_internal_r+0xd90>
1000f57c:	dac12e17 	ldw	r11,1208(sp)
1000f580:	db012b17 	ldw	r12,1196(sp)
1000f584:	5b39c83a 	sub	fp,r11,r12
1000f588:	0701bc0e 	bge	zero,fp,1000fc7c <___vfprintf_internal_r+0xd90>
1000f58c:	02400404 	movi	r9,16
1000f590:	d8c12017 	ldw	r3,1152(sp)
1000f594:	d8811f17 	ldw	r2,1148(sp)
1000f598:	4f05220e 	bge	r9,fp,10010a24 <___vfprintf_internal_r+0x1b38>
1000f59c:	014400b4 	movhi	r5,4098
1000f5a0:	29545184 	addi	r5,r5,20806
1000f5a4:	d9413615 	stw	r5,1240(sp)
1000f5a8:	482b883a 	mov	r21,r9
1000f5ac:	04c001c4 	movi	r19,7
1000f5b0:	00000306 	br	1000f5c0 <___vfprintf_internal_r+0x6d4>
1000f5b4:	e73ffc04 	addi	fp,fp,-16
1000f5b8:	42000204 	addi	r8,r8,8
1000f5bc:	af00130e 	bge	r21,fp,1000f60c <___vfprintf_internal_r+0x720>
1000f5c0:	02c400b4 	movhi	r11,4098
1000f5c4:	18c00404 	addi	r3,r3,16
1000f5c8:	10800044 	addi	r2,r2,1
1000f5cc:	5ad45184 	addi	r11,r11,20806
1000f5d0:	42c00015 	stw	r11,0(r8)
1000f5d4:	45400115 	stw	r21,4(r8)
1000f5d8:	d8c12015 	stw	r3,1152(sp)
1000f5dc:	d8811f15 	stw	r2,1148(sp)
1000f5e0:	98bff40e 	bge	r19,r2,1000f5b4 <__alt_data_end+0xf000f5b4>
1000f5e4:	b009883a 	mov	r4,r22
1000f5e8:	b80b883a 	mov	r5,r23
1000f5ec:	d9811e04 	addi	r6,sp,1144
1000f5f0:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f5f4:	103f541e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000f5f8:	e73ffc04 	addi	fp,fp,-16
1000f5fc:	d8c12017 	ldw	r3,1152(sp)
1000f600:	d8811f17 	ldw	r2,1148(sp)
1000f604:	da000404 	addi	r8,sp,16
1000f608:	af3fed16 	blt	r21,fp,1000f5c0 <__alt_data_end+0xf000f5c0>
1000f60c:	db013617 	ldw	r12,1240(sp)
1000f610:	e0c7883a 	add	r3,fp,r3
1000f614:	10800044 	addi	r2,r2,1
1000f618:	43000015 	stw	r12,0(r8)
1000f61c:	47000115 	stw	fp,4(r8)
1000f620:	d8c12015 	stw	r3,1152(sp)
1000f624:	d8811f15 	stw	r2,1148(sp)
1000f628:	010001c4 	movi	r4,7
1000f62c:	2082f416 	blt	r4,r2,10010200 <___vfprintf_internal_r+0x1314>
1000f630:	d8812787 	ldb	r2,1182(sp)
1000f634:	42000204 	addi	r8,r8,8
1000f638:	10000c26 	beq	r2,zero,1000f66c <___vfprintf_internal_r+0x780>
1000f63c:	d8811f17 	ldw	r2,1148(sp)
1000f640:	d9012784 	addi	r4,sp,1182
1000f644:	18c00044 	addi	r3,r3,1
1000f648:	10800044 	addi	r2,r2,1
1000f64c:	41000015 	stw	r4,0(r8)
1000f650:	01000044 	movi	r4,1
1000f654:	41000115 	stw	r4,4(r8)
1000f658:	d8c12015 	stw	r3,1152(sp)
1000f65c:	d8811f15 	stw	r2,1148(sp)
1000f660:	010001c4 	movi	r4,7
1000f664:	20828d16 	blt	r4,r2,1001009c <___vfprintf_internal_r+0x11b0>
1000f668:	42000204 	addi	r8,r8,8
1000f66c:	dac12c17 	ldw	r11,1200(sp)
1000f670:	58000c26 	beq	r11,zero,1000f6a4 <___vfprintf_internal_r+0x7b8>
1000f674:	d8811f17 	ldw	r2,1148(sp)
1000f678:	d9012704 	addi	r4,sp,1180
1000f67c:	18c00084 	addi	r3,r3,2
1000f680:	10800044 	addi	r2,r2,1
1000f684:	41000015 	stw	r4,0(r8)
1000f688:	01000084 	movi	r4,2
1000f68c:	41000115 	stw	r4,4(r8)
1000f690:	d8c12015 	stw	r3,1152(sp)
1000f694:	d8811f15 	stw	r2,1148(sp)
1000f698:	010001c4 	movi	r4,7
1000f69c:	20828716 	blt	r4,r2,100100bc <___vfprintf_internal_r+0x11d0>
1000f6a0:	42000204 	addi	r8,r8,8
1000f6a4:	db013017 	ldw	r12,1216(sp)
1000f6a8:	00802004 	movi	r2,128
1000f6ac:	6081e926 	beq	r12,r2,1000fe54 <___vfprintf_internal_r+0xf68>
1000f6b0:	db013217 	ldw	r12,1224(sp)
1000f6b4:	64abc83a 	sub	r21,r12,r18
1000f6b8:	0540260e 	bge	zero,r21,1000f754 <___vfprintf_internal_r+0x868>
1000f6bc:	07000404 	movi	fp,16
1000f6c0:	d8811f17 	ldw	r2,1148(sp)
1000f6c4:	e5443d0e 	bge	fp,r21,100107bc <___vfprintf_internal_r+0x18d0>
1000f6c8:	014400b4 	movhi	r5,4098
1000f6cc:	29544d84 	addi	r5,r5,20790
1000f6d0:	d9412c15 	stw	r5,1200(sp)
1000f6d4:	04c001c4 	movi	r19,7
1000f6d8:	00000306 	br	1000f6e8 <___vfprintf_internal_r+0x7fc>
1000f6dc:	ad7ffc04 	addi	r21,r21,-16
1000f6e0:	42000204 	addi	r8,r8,8
1000f6e4:	e540110e 	bge	fp,r21,1000f72c <___vfprintf_internal_r+0x840>
1000f6e8:	18c00404 	addi	r3,r3,16
1000f6ec:	10800044 	addi	r2,r2,1
1000f6f0:	45000015 	stw	r20,0(r8)
1000f6f4:	47000115 	stw	fp,4(r8)
1000f6f8:	d8c12015 	stw	r3,1152(sp)
1000f6fc:	d8811f15 	stw	r2,1148(sp)
1000f700:	98bff60e 	bge	r19,r2,1000f6dc <__alt_data_end+0xf000f6dc>
1000f704:	b009883a 	mov	r4,r22
1000f708:	b80b883a 	mov	r5,r23
1000f70c:	d9811e04 	addi	r6,sp,1144
1000f710:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f714:	103f0c1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000f718:	ad7ffc04 	addi	r21,r21,-16
1000f71c:	d8c12017 	ldw	r3,1152(sp)
1000f720:	d8811f17 	ldw	r2,1148(sp)
1000f724:	da000404 	addi	r8,sp,16
1000f728:	e57fef16 	blt	fp,r21,1000f6e8 <__alt_data_end+0xf000f6e8>
1000f72c:	dac12c17 	ldw	r11,1200(sp)
1000f730:	1d47883a 	add	r3,r3,r21
1000f734:	10800044 	addi	r2,r2,1
1000f738:	42c00015 	stw	r11,0(r8)
1000f73c:	45400115 	stw	r21,4(r8)
1000f740:	d8c12015 	stw	r3,1152(sp)
1000f744:	d8811f15 	stw	r2,1148(sp)
1000f748:	010001c4 	movi	r4,7
1000f74c:	20824b16 	blt	r4,r2,1001007c <___vfprintf_internal_r+0x1190>
1000f750:	42000204 	addi	r8,r8,8
1000f754:	8880400c 	andi	r2,r17,256
1000f758:	1001761e 	bne	r2,zero,1000fd34 <___vfprintf_internal_r+0xe48>
1000f75c:	d8811f17 	ldw	r2,1148(sp)
1000f760:	db013117 	ldw	r12,1220(sp)
1000f764:	1c87883a 	add	r3,r3,r18
1000f768:	10800044 	addi	r2,r2,1
1000f76c:	43000015 	stw	r12,0(r8)
1000f770:	44800115 	stw	r18,4(r8)
1000f774:	d8c12015 	stw	r3,1152(sp)
1000f778:	d8811f15 	stw	r2,1148(sp)
1000f77c:	010001c4 	movi	r4,7
1000f780:	20822616 	blt	r4,r2,1001001c <___vfprintf_internal_r+0x1130>
1000f784:	42000204 	addi	r8,r8,8
1000f788:	8c40010c 	andi	r17,r17,4
1000f78c:	88003126 	beq	r17,zero,1000f854 <___vfprintf_internal_r+0x968>
1000f790:	db012e17 	ldw	r12,1208(sp)
1000f794:	dac12b17 	ldw	r11,1196(sp)
1000f798:	62e1c83a 	sub	r16,r12,r11
1000f79c:	04002d0e 	bge	zero,r16,1000f854 <___vfprintf_internal_r+0x968>
1000f7a0:	04400404 	movi	r17,16
1000f7a4:	d8811f17 	ldw	r2,1148(sp)
1000f7a8:	8c04df0e 	bge	r17,r16,10010b28 <___vfprintf_internal_r+0x1c3c>
1000f7ac:	010400b4 	movhi	r4,4098
1000f7b0:	21145184 	addi	r4,r4,20806
1000f7b4:	d9013615 	stw	r4,1240(sp)
1000f7b8:	048001c4 	movi	r18,7
1000f7bc:	00000306 	br	1000f7cc <___vfprintf_internal_r+0x8e0>
1000f7c0:	843ffc04 	addi	r16,r16,-16
1000f7c4:	42000204 	addi	r8,r8,8
1000f7c8:	8c00130e 	bge	r17,r16,1000f818 <___vfprintf_internal_r+0x92c>
1000f7cc:	014400b4 	movhi	r5,4098
1000f7d0:	18c00404 	addi	r3,r3,16
1000f7d4:	10800044 	addi	r2,r2,1
1000f7d8:	29545184 	addi	r5,r5,20806
1000f7dc:	41400015 	stw	r5,0(r8)
1000f7e0:	44400115 	stw	r17,4(r8)
1000f7e4:	d8c12015 	stw	r3,1152(sp)
1000f7e8:	d8811f15 	stw	r2,1148(sp)
1000f7ec:	90bff40e 	bge	r18,r2,1000f7c0 <__alt_data_end+0xf000f7c0>
1000f7f0:	b009883a 	mov	r4,r22
1000f7f4:	b80b883a 	mov	r5,r23
1000f7f8:	d9811e04 	addi	r6,sp,1144
1000f7fc:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f800:	103ed11e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000f804:	843ffc04 	addi	r16,r16,-16
1000f808:	d8c12017 	ldw	r3,1152(sp)
1000f80c:	d8811f17 	ldw	r2,1148(sp)
1000f810:	da000404 	addi	r8,sp,16
1000f814:	8c3fed16 	blt	r17,r16,1000f7cc <__alt_data_end+0xf000f7cc>
1000f818:	dac13617 	ldw	r11,1240(sp)
1000f81c:	1c07883a 	add	r3,r3,r16
1000f820:	10800044 	addi	r2,r2,1
1000f824:	42c00015 	stw	r11,0(r8)
1000f828:	44000115 	stw	r16,4(r8)
1000f82c:	d8c12015 	stw	r3,1152(sp)
1000f830:	d8811f15 	stw	r2,1148(sp)
1000f834:	010001c4 	movi	r4,7
1000f838:	2080060e 	bge	r4,r2,1000f854 <___vfprintf_internal_r+0x968>
1000f83c:	b009883a 	mov	r4,r22
1000f840:	b80b883a 	mov	r5,r23
1000f844:	d9811e04 	addi	r6,sp,1144
1000f848:	001b2ac0 	call	1001b2ac <__sprint_r>
1000f84c:	103ebe1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000f850:	d8c12017 	ldw	r3,1152(sp)
1000f854:	d8812b17 	ldw	r2,1196(sp)
1000f858:	db012e17 	ldw	r12,1208(sp)
1000f85c:	1300010e 	bge	r2,r12,1000f864 <___vfprintf_internal_r+0x978>
1000f860:	6005883a 	mov	r2,r12
1000f864:	dac12f17 	ldw	r11,1212(sp)
1000f868:	5897883a 	add	r11,r11,r2
1000f86c:	dac12f15 	stw	r11,1212(sp)
1000f870:	1801f21e 	bne	r3,zero,1001003c <___vfprintf_internal_r+0x1150>
1000f874:	d8011f15 	stw	zero,1148(sp)
1000f878:	da000404 	addi	r8,sp,16
1000f87c:	003dd806 	br	1000efe0 <__alt_data_end+0xf000efe0>
1000f880:	8c400414 	ori	r17,r17,16
1000f884:	d8c12a15 	stw	r3,1192(sp)
1000f888:	88c0080c 	andi	r3,r17,32
1000f88c:	d8812d17 	ldw	r2,1204(sp)
1000f890:	18004626 	beq	r3,zero,1000f9ac <___vfprintf_internal_r+0xac0>
1000f894:	dac12d17 	ldw	r11,1204(sp)
1000f898:	14c00017 	ldw	r19,0(r2)
1000f89c:	17000117 	ldw	fp,4(r2)
1000f8a0:	5ac00204 	addi	r11,r11,8
1000f8a4:	dac12d15 	stw	r11,1204(sp)
1000f8a8:	00800044 	movi	r2,1
1000f8ac:	9f06b03a 	or	r3,r19,fp
1000f8b0:	003f0006 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1000f8b4:	1805883a 	mov	r2,r3
1000f8b8:	d8012e15 	stw	zero,1208(sp)
1000f8bc:	82fff404 	addi	r11,r16,-48
1000f8c0:	0019883a 	mov	r12,zero
1000f8c4:	14000007 	ldb	r16,0(r2)
1000f8c8:	630002a4 	muli	r12,r12,10
1000f8cc:	18c00044 	addi	r3,r3,1
1000f8d0:	1805883a 	mov	r2,r3
1000f8d4:	62d9883a 	add	r12,r12,r11
1000f8d8:	82fff404 	addi	r11,r16,-48
1000f8dc:	2afff92e 	bgeu	r5,r11,1000f8c4 <__alt_data_end+0xf000f8c4>
1000f8e0:	db012e15 	stw	r12,1208(sp)
1000f8e4:	003de906 	br	1000f08c <__alt_data_end+0xf000f08c>
1000f8e8:	8c400414 	ori	r17,r17,16
1000f8ec:	d8c12a15 	stw	r3,1192(sp)
1000f8f0:	d9812785 	stb	r6,1182(sp)
1000f8f4:	8880080c 	andi	r2,r17,32
1000f8f8:	d8c12d17 	ldw	r3,1204(sp)
1000f8fc:	10007a26 	beq	r2,zero,1000fae8 <___vfprintf_internal_r+0xbfc>
1000f900:	db012d17 	ldw	r12,1204(sp)
1000f904:	18800117 	ldw	r2,4(r3)
1000f908:	1cc00017 	ldw	r19,0(r3)
1000f90c:	63000204 	addi	r12,r12,8
1000f910:	db012d15 	stw	r12,1204(sp)
1000f914:	1039883a 	mov	fp,r2
1000f918:	10031016 	blt	r2,zero,1001055c <___vfprintf_internal_r+0x1670>
1000f91c:	dd412783 	ldbu	r21,1182(sp)
1000f920:	da413215 	stw	r9,1224(sp)
1000f924:	00800044 	movi	r2,1
1000f928:	9f06b03a 	or	r3,r19,fp
1000f92c:	003ee406 	br	1000f4c0 <__alt_data_end+0xf000f4c0>
1000f930:	030400b4 	movhi	r12,4098
1000f934:	63143904 	addi	r12,r12,20708
1000f938:	d8c12a15 	stw	r3,1192(sp)
1000f93c:	d9812785 	stb	r6,1182(sp)
1000f940:	db013b15 	stw	r12,1260(sp)
1000f944:	88c0080c 	andi	r3,r17,32
1000f948:	d8812d17 	ldw	r2,1204(sp)
1000f94c:	18002b26 	beq	r3,zero,1000f9fc <___vfprintf_internal_r+0xb10>
1000f950:	dac12d17 	ldw	r11,1204(sp)
1000f954:	14c00017 	ldw	r19,0(r2)
1000f958:	17000117 	ldw	fp,4(r2)
1000f95c:	5ac00204 	addi	r11,r11,8
1000f960:	dac12d15 	stw	r11,1204(sp)
1000f964:	8880004c 	andi	r2,r17,1
1000f968:	10025b26 	beq	r2,zero,100102d8 <___vfprintf_internal_r+0x13ec>
1000f96c:	9f06b03a 	or	r3,r19,fp
1000f970:	18037026 	beq	r3,zero,10010734 <___vfprintf_internal_r+0x1848>
1000f974:	00800c04 	movi	r2,48
1000f978:	d8812705 	stb	r2,1180(sp)
1000f97c:	dc012745 	stb	r16,1181(sp)
1000f980:	8c400094 	ori	r17,r17,2
1000f984:	00800084 	movi	r2,2
1000f988:	003eca06 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1000f98c:	8c400814 	ori	r17,r17,32
1000f990:	1805883a 	mov	r2,r3
1000f994:	1c000007 	ldb	r16,0(r3)
1000f998:	003dbb06 	br	1000f088 <__alt_data_end+0xf000f088>
1000f99c:	d8c12a15 	stw	r3,1192(sp)
1000f9a0:	88c0080c 	andi	r3,r17,32
1000f9a4:	d8812d17 	ldw	r2,1204(sp)
1000f9a8:	183fba1e 	bne	r3,zero,1000f894 <__alt_data_end+0xf000f894>
1000f9ac:	88c0040c 	andi	r3,r17,16
1000f9b0:	18024c1e 	bne	r3,zero,100102e4 <___vfprintf_internal_r+0x13f8>
1000f9b4:	88c0100c 	andi	r3,r17,64
1000f9b8:	18024a26 	beq	r3,zero,100102e4 <___vfprintf_internal_r+0x13f8>
1000f9bc:	dac12d17 	ldw	r11,1204(sp)
1000f9c0:	14c0000b 	ldhu	r19,0(r2)
1000f9c4:	0039883a 	mov	fp,zero
1000f9c8:	5ac00104 	addi	r11,r11,4
1000f9cc:	dac12d15 	stw	r11,1204(sp)
1000f9d0:	00800044 	movi	r2,1
1000f9d4:	9807883a 	mov	r3,r19
1000f9d8:	003eb606 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1000f9dc:	008400b4 	movhi	r2,4098
1000f9e0:	10943e04 	addi	r2,r2,20728
1000f9e4:	d8c12a15 	stw	r3,1192(sp)
1000f9e8:	d8813b15 	stw	r2,1260(sp)
1000f9ec:	d9812785 	stb	r6,1182(sp)
1000f9f0:	88c0080c 	andi	r3,r17,32
1000f9f4:	d8812d17 	ldw	r2,1204(sp)
1000f9f8:	183fd51e 	bne	r3,zero,1000f950 <__alt_data_end+0xf000f950>
1000f9fc:	88c0040c 	andi	r3,r17,16
1000fa00:	18034126 	beq	r3,zero,10010708 <___vfprintf_internal_r+0x181c>
1000fa04:	db012d17 	ldw	r12,1204(sp)
1000fa08:	14c00017 	ldw	r19,0(r2)
1000fa0c:	0039883a 	mov	fp,zero
1000fa10:	63000104 	addi	r12,r12,4
1000fa14:	db012d15 	stw	r12,1204(sp)
1000fa18:	003fd206 	br	1000f964 <__alt_data_end+0xf000f964>
1000fa1c:	1c000007 	ldb	r16,0(r3)
1000fa20:	81c3d626 	beq	r16,r7,1001097c <___vfprintf_internal_r+0x1a90>
1000fa24:	8c400414 	ori	r17,r17,16
1000fa28:	1805883a 	mov	r2,r3
1000fa2c:	003d9606 	br	1000f088 <__alt_data_end+0xf000f088>
1000fa30:	d8c12a15 	stw	r3,1192(sp)
1000fa34:	d9812785 	stb	r6,1182(sp)
1000fa38:	8880080c 	andi	r2,r17,32
1000fa3c:	10033f26 	beq	r2,zero,1001073c <___vfprintf_internal_r+0x1850>
1000fa40:	db012d17 	ldw	r12,1204(sp)
1000fa44:	dac12f17 	ldw	r11,1212(sp)
1000fa48:	60800017 	ldw	r2,0(r12)
1000fa4c:	5807d7fa 	srai	r3,r11,31
1000fa50:	63000104 	addi	r12,r12,4
1000fa54:	db012d15 	stw	r12,1204(sp)
1000fa58:	12c00015 	stw	r11,0(r2)
1000fa5c:	10c00115 	stw	r3,4(r2)
1000fa60:	003d5f06 	br	1000efe0 <__alt_data_end+0xf000efe0>
1000fa64:	d8c12a15 	stw	r3,1192(sp)
1000fa68:	88c0080c 	andi	r3,r17,32
1000fa6c:	d8812d17 	ldw	r2,1204(sp)
1000fa70:	183e891e 	bne	r3,zero,1000f498 <__alt_data_end+0xf000f498>
1000fa74:	88c0040c 	andi	r3,r17,16
1000fa78:	1801ea1e 	bne	r3,zero,10010224 <___vfprintf_internal_r+0x1338>
1000fa7c:	88c0100c 	andi	r3,r17,64
1000fa80:	1801e826 	beq	r3,zero,10010224 <___vfprintf_internal_r+0x1338>
1000fa84:	db012d17 	ldw	r12,1204(sp)
1000fa88:	14c0000b 	ldhu	r19,0(r2)
1000fa8c:	0039883a 	mov	fp,zero
1000fa90:	63000104 	addi	r12,r12,4
1000fa94:	db012d15 	stw	r12,1204(sp)
1000fa98:	0005883a 	mov	r2,zero
1000fa9c:	9807883a 	mov	r3,r19
1000faa0:	003e8406 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1000faa4:	30803fcc 	andi	r2,r6,255
1000faa8:	1080201c 	xori	r2,r2,128
1000faac:	10bfe004 	addi	r2,r2,-128
1000fab0:	10031d1e 	bne	r2,zero,10010728 <___vfprintf_internal_r+0x183c>
1000fab4:	1805883a 	mov	r2,r3
1000fab8:	01800804 	movi	r6,32
1000fabc:	1c000007 	ldb	r16,0(r3)
1000fac0:	003d7106 	br	1000f088 <__alt_data_end+0xf000f088>
1000fac4:	8c400054 	ori	r17,r17,1
1000fac8:	1805883a 	mov	r2,r3
1000facc:	1c000007 	ldb	r16,0(r3)
1000fad0:	003d6d06 	br	1000f088 <__alt_data_end+0xf000f088>
1000fad4:	d8c12a15 	stw	r3,1192(sp)
1000fad8:	d9812785 	stb	r6,1182(sp)
1000fadc:	8880080c 	andi	r2,r17,32
1000fae0:	d8c12d17 	ldw	r3,1204(sp)
1000fae4:	103f861e 	bne	r2,zero,1000f900 <__alt_data_end+0xf000f900>
1000fae8:	8880040c 	andi	r2,r17,16
1000faec:	1001f31e 	bne	r2,zero,100102bc <___vfprintf_internal_r+0x13d0>
1000faf0:	8880100c 	andi	r2,r17,64
1000faf4:	1001f126 	beq	r2,zero,100102bc <___vfprintf_internal_r+0x13d0>
1000faf8:	1cc0000f 	ldh	r19,0(r3)
1000fafc:	db012d17 	ldw	r12,1204(sp)
1000fb00:	9839d7fa 	srai	fp,r19,31
1000fb04:	63000104 	addi	r12,r12,4
1000fb08:	db012d15 	stw	r12,1204(sp)
1000fb0c:	e005883a 	mov	r2,fp
1000fb10:	003f8106 	br	1000f918 <__alt_data_end+0xf000f918>
1000fb14:	8c401014 	ori	r17,r17,64
1000fb18:	1805883a 	mov	r2,r3
1000fb1c:	1c000007 	ldb	r16,0(r3)
1000fb20:	003d5906 	br	1000f088 <__alt_data_end+0xf000f088>
1000fb24:	db012d17 	ldw	r12,1204(sp)
1000fb28:	d8c12a15 	stw	r3,1192(sp)
1000fb2c:	00c00044 	movi	r3,1
1000fb30:	60800017 	ldw	r2,0(r12)
1000fb34:	63000104 	addi	r12,r12,4
1000fb38:	d8c12b15 	stw	r3,1196(sp)
1000fb3c:	d8012785 	stb	zero,1182(sp)
1000fb40:	d8810405 	stb	r2,1040(sp)
1000fb44:	db012d15 	stw	r12,1204(sp)
1000fb48:	dac10404 	addi	r11,sp,1040
1000fb4c:	1825883a 	mov	r18,r3
1000fb50:	d8013215 	stw	zero,1224(sp)
1000fb54:	d8013415 	stw	zero,1232(sp)
1000fb58:	dac13115 	stw	r11,1220(sp)
1000fb5c:	0005883a 	mov	r2,zero
1000fb60:	003e7d06 	br	1000f558 <__alt_data_end+0xf000f558>
1000fb64:	db012d17 	ldw	r12,1204(sp)
1000fb68:	00800c04 	movi	r2,48
1000fb6c:	d8812705 	stb	r2,1180(sp)
1000fb70:	64c00017 	ldw	r19,0(r12)
1000fb74:	00801e04 	movi	r2,120
1000fb78:	d8812745 	stb	r2,1181(sp)
1000fb7c:	008400b4 	movhi	r2,4098
1000fb80:	10943e04 	addi	r2,r2,20728
1000fb84:	63000104 	addi	r12,r12,4
1000fb88:	d8c12a15 	stw	r3,1192(sp)
1000fb8c:	d8813b15 	stw	r2,1260(sp)
1000fb90:	0039883a 	mov	fp,zero
1000fb94:	8c400094 	ori	r17,r17,2
1000fb98:	db012d15 	stw	r12,1204(sp)
1000fb9c:	00800084 	movi	r2,2
1000fba0:	04001e04 	movi	r16,120
1000fba4:	9807883a 	mov	r3,r19
1000fba8:	003e4206 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1000fbac:	dac12d17 	ldw	r11,1204(sp)
1000fbb0:	db012d17 	ldw	r12,1204(sp)
1000fbb4:	d8c12a15 	stw	r3,1192(sp)
1000fbb8:	5ac00017 	ldw	r11,0(r11)
1000fbbc:	d8012785 	stb	zero,1182(sp)
1000fbc0:	64c00104 	addi	r19,r12,4
1000fbc4:	dac13115 	stw	r11,1220(sp)
1000fbc8:	5803e826 	beq	r11,zero,10010b6c <___vfprintf_internal_r+0x1c80>
1000fbcc:	d9013117 	ldw	r4,1220(sp)
1000fbd0:	48037a16 	blt	r9,zero,100109bc <___vfprintf_internal_r+0x1ad0>
1000fbd4:	480d883a 	mov	r6,r9
1000fbd8:	000b883a 	mov	r5,zero
1000fbdc:	da013f15 	stw	r8,1276(sp)
1000fbe0:	da413e15 	stw	r9,1272(sp)
1000fbe4:	00160f00 	call	100160f0 <memchr>
1000fbe8:	da013f17 	ldw	r8,1276(sp)
1000fbec:	da413e17 	ldw	r9,1272(sp)
1000fbf0:	10044426 	beq	r2,zero,10010d04 <___vfprintf_internal_r+0x1e18>
1000fbf4:	d8c13117 	ldw	r3,1220(sp)
1000fbf8:	10e5c83a 	sub	r18,r2,r3
1000fbfc:	4c834416 	blt	r9,r18,10010910 <___vfprintf_internal_r+0x1a24>
1000fc00:	9005883a 	mov	r2,r18
1000fc04:	90037216 	blt	r18,zero,100109d0 <___vfprintf_internal_r+0x1ae4>
1000fc08:	dd412783 	ldbu	r21,1182(sp)
1000fc0c:	d8812b15 	stw	r2,1196(sp)
1000fc10:	dcc12d15 	stw	r19,1204(sp)
1000fc14:	d8013215 	stw	zero,1224(sp)
1000fc18:	d8013415 	stw	zero,1232(sp)
1000fc1c:	003e4706 	br	1000f53c <__alt_data_end+0xf000f53c>
1000fc20:	dac12d17 	ldw	r11,1204(sp)
1000fc24:	db012d17 	ldw	r12,1204(sp)
1000fc28:	5ac00017 	ldw	r11,0(r11)
1000fc2c:	dac12e15 	stw	r11,1208(sp)
1000fc30:	62c00104 	addi	r11,r12,4
1000fc34:	db012e17 	ldw	r12,1208(sp)
1000fc38:	60034a16 	blt	r12,zero,10010964 <___vfprintf_internal_r+0x1a78>
1000fc3c:	dac12d15 	stw	r11,1204(sp)
1000fc40:	1805883a 	mov	r2,r3
1000fc44:	1c000007 	ldb	r16,0(r3)
1000fc48:	003d0f06 	br	1000f088 <__alt_data_end+0xf000f088>
1000fc4c:	1805883a 	mov	r2,r3
1000fc50:	01800ac4 	movi	r6,43
1000fc54:	1c000007 	ldb	r16,0(r3)
1000fc58:	003d0b06 	br	1000f088 <__alt_data_end+0xf000f088>
1000fc5c:	d8c12a15 	stw	r3,1192(sp)
1000fc60:	d9812785 	stb	r6,1182(sp)
1000fc64:	803db226 	beq	r16,zero,1000f330 <__alt_data_end+0xf000f330>
1000fc68:	00c00044 	movi	r3,1
1000fc6c:	d8c12b15 	stw	r3,1196(sp)
1000fc70:	dc010405 	stb	r16,1040(sp)
1000fc74:	d8012785 	stb	zero,1182(sp)
1000fc78:	003fb306 	br	1000fb48 <__alt_data_end+0xf000fb48>
1000fc7c:	d8c12017 	ldw	r3,1152(sp)
1000fc80:	003e6d06 	br	1000f638 <__alt_data_end+0xf000f638>
1000fc84:	10803fcc 	andi	r2,r2,255
1000fc88:	00c00044 	movi	r3,1
1000fc8c:	10fe141e 	bne	r2,r3,1000f4e0 <__alt_data_end+0xf000f4e0>
1000fc90:	e000021e 	bne	fp,zero,1000fc9c <___vfprintf_internal_r+0xdb0>
1000fc94:	00800244 	movi	r2,9
1000fc98:	14c0202e 	bgeu	r2,r19,1000fd1c <___vfprintf_internal_r+0xe30>
1000fc9c:	dc012b15 	stw	r16,1196(sp)
1000fca0:	dc412c15 	stw	r17,1200(sp)
1000fca4:	9821883a 	mov	r16,r19
1000fca8:	e023883a 	mov	r17,fp
1000fcac:	dc810e04 	addi	r18,sp,1080
1000fcb0:	4027883a 	mov	r19,r8
1000fcb4:	4839883a 	mov	fp,r9
1000fcb8:	8009883a 	mov	r4,r16
1000fcbc:	880b883a 	mov	r5,r17
1000fcc0:	01800284 	movi	r6,10
1000fcc4:	000f883a 	mov	r7,zero
1000fcc8:	001e3040 	call	1001e304 <__umoddi3>
1000fccc:	10800c04 	addi	r2,r2,48
1000fcd0:	94bfffc4 	addi	r18,r18,-1
1000fcd4:	8009883a 	mov	r4,r16
1000fcd8:	880b883a 	mov	r5,r17
1000fcdc:	01800284 	movi	r6,10
1000fce0:	000f883a 	mov	r7,zero
1000fce4:	90800005 	stb	r2,0(r18)
1000fce8:	001dd440 	call	1001dd44 <__udivdi3>
1000fcec:	1021883a 	mov	r16,r2
1000fcf0:	10c4b03a 	or	r2,r2,r3
1000fcf4:	1823883a 	mov	r17,r3
1000fcf8:	103fef1e 	bne	r2,zero,1000fcb8 <__alt_data_end+0xf000fcb8>
1000fcfc:	dac12817 	ldw	r11,1184(sp)
1000fd00:	dc813115 	stw	r18,1220(sp)
1000fd04:	dc012b17 	ldw	r16,1196(sp)
1000fd08:	9811883a 	mov	r8,r19
1000fd0c:	dc412c17 	ldw	r17,1200(sp)
1000fd10:	e013883a 	mov	r9,fp
1000fd14:	5ca5c83a 	sub	r18,r11,r18
1000fd18:	003e0306 	br	1000f528 <__alt_data_end+0xf000f528>
1000fd1c:	9cc00c04 	addi	r19,r19,48
1000fd20:	d8c10dc4 	addi	r3,sp,1079
1000fd24:	dcc10dc5 	stb	r19,1079(sp)
1000fd28:	dc813c17 	ldw	r18,1264(sp)
1000fd2c:	d8c13115 	stw	r3,1220(sp)
1000fd30:	003dfd06 	br	1000f528 <__alt_data_end+0xf000f528>
1000fd34:	00801944 	movi	r2,101
1000fd38:	1400710e 	bge	r2,r16,1000ff00 <___vfprintf_internal_r+0x1014>
1000fd3c:	d9013717 	ldw	r4,1244(sp)
1000fd40:	d9413917 	ldw	r5,1252(sp)
1000fd44:	000d883a 	mov	r6,zero
1000fd48:	000f883a 	mov	r7,zero
1000fd4c:	d8c13d15 	stw	r3,1268(sp)
1000fd50:	da013f15 	stw	r8,1276(sp)
1000fd54:	001fbe00 	call	1001fbe0 <__eqdf2>
1000fd58:	d8c13d17 	ldw	r3,1268(sp)
1000fd5c:	da013f17 	ldw	r8,1276(sp)
1000fd60:	1000ef1e 	bne	r2,zero,10010120 <___vfprintf_internal_r+0x1234>
1000fd64:	d8811f17 	ldw	r2,1148(sp)
1000fd68:	010400b4 	movhi	r4,4098
1000fd6c:	21144504 	addi	r4,r4,20756
1000fd70:	18c00044 	addi	r3,r3,1
1000fd74:	10800044 	addi	r2,r2,1
1000fd78:	41000015 	stw	r4,0(r8)
1000fd7c:	01000044 	movi	r4,1
1000fd80:	41000115 	stw	r4,4(r8)
1000fd84:	d8c12015 	stw	r3,1152(sp)
1000fd88:	d8811f15 	stw	r2,1148(sp)
1000fd8c:	010001c4 	movi	r4,7
1000fd90:	20828e16 	blt	r4,r2,100107cc <___vfprintf_internal_r+0x18e0>
1000fd94:	42000204 	addi	r8,r8,8
1000fd98:	d8812617 	ldw	r2,1176(sp)
1000fd9c:	dac13317 	ldw	r11,1228(sp)
1000fda0:	12c00216 	blt	r2,r11,1000fdac <___vfprintf_internal_r+0xec0>
1000fda4:	8880004c 	andi	r2,r17,1
1000fda8:	103e7726 	beq	r2,zero,1000f788 <__alt_data_end+0xf000f788>
1000fdac:	db013817 	ldw	r12,1248(sp)
1000fdb0:	d8811f17 	ldw	r2,1148(sp)
1000fdb4:	dac13517 	ldw	r11,1236(sp)
1000fdb8:	1b07883a 	add	r3,r3,r12
1000fdbc:	10800044 	addi	r2,r2,1
1000fdc0:	42c00015 	stw	r11,0(r8)
1000fdc4:	43000115 	stw	r12,4(r8)
1000fdc8:	d8c12015 	stw	r3,1152(sp)
1000fdcc:	d8811f15 	stw	r2,1148(sp)
1000fdd0:	010001c4 	movi	r4,7
1000fdd4:	2082ed16 	blt	r4,r2,1001098c <___vfprintf_internal_r+0x1aa0>
1000fdd8:	42000204 	addi	r8,r8,8
1000fddc:	db013317 	ldw	r12,1228(sp)
1000fde0:	643fffc4 	addi	r16,r12,-1
1000fde4:	043e680e 	bge	zero,r16,1000f788 <__alt_data_end+0xf000f788>
1000fde8:	04800404 	movi	r18,16
1000fdec:	d8811f17 	ldw	r2,1148(sp)
1000fdf0:	94007e0e 	bge	r18,r16,1000ffec <___vfprintf_internal_r+0x1100>
1000fdf4:	014400b4 	movhi	r5,4098
1000fdf8:	29544d84 	addi	r5,r5,20790
1000fdfc:	d9412c15 	stw	r5,1200(sp)
1000fe00:	054001c4 	movi	r21,7
1000fe04:	00000306 	br	1000fe14 <___vfprintf_internal_r+0xf28>
1000fe08:	42000204 	addi	r8,r8,8
1000fe0c:	843ffc04 	addi	r16,r16,-16
1000fe10:	9400790e 	bge	r18,r16,1000fff8 <___vfprintf_internal_r+0x110c>
1000fe14:	18c00404 	addi	r3,r3,16
1000fe18:	10800044 	addi	r2,r2,1
1000fe1c:	45000015 	stw	r20,0(r8)
1000fe20:	44800115 	stw	r18,4(r8)
1000fe24:	d8c12015 	stw	r3,1152(sp)
1000fe28:	d8811f15 	stw	r2,1148(sp)
1000fe2c:	a8bff60e 	bge	r21,r2,1000fe08 <__alt_data_end+0xf000fe08>
1000fe30:	b009883a 	mov	r4,r22
1000fe34:	b80b883a 	mov	r5,r23
1000fe38:	d9811e04 	addi	r6,sp,1144
1000fe3c:	001b2ac0 	call	1001b2ac <__sprint_r>
1000fe40:	103d411e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000fe44:	d8c12017 	ldw	r3,1152(sp)
1000fe48:	d8811f17 	ldw	r2,1148(sp)
1000fe4c:	da000404 	addi	r8,sp,16
1000fe50:	003fee06 	br	1000fe0c <__alt_data_end+0xf000fe0c>
1000fe54:	dac12e17 	ldw	r11,1208(sp)
1000fe58:	db012b17 	ldw	r12,1196(sp)
1000fe5c:	5b2bc83a 	sub	r21,r11,r12
1000fe60:	057e130e 	bge	zero,r21,1000f6b0 <__alt_data_end+0xf000f6b0>
1000fe64:	07000404 	movi	fp,16
1000fe68:	d8811f17 	ldw	r2,1148(sp)
1000fe6c:	e543640e 	bge	fp,r21,10010c00 <___vfprintf_internal_r+0x1d14>
1000fe70:	014400b4 	movhi	r5,4098
1000fe74:	29544d84 	addi	r5,r5,20790
1000fe78:	d9412c15 	stw	r5,1200(sp)
1000fe7c:	04c001c4 	movi	r19,7
1000fe80:	00000306 	br	1000fe90 <___vfprintf_internal_r+0xfa4>
1000fe84:	ad7ffc04 	addi	r21,r21,-16
1000fe88:	42000204 	addi	r8,r8,8
1000fe8c:	e540110e 	bge	fp,r21,1000fed4 <___vfprintf_internal_r+0xfe8>
1000fe90:	18c00404 	addi	r3,r3,16
1000fe94:	10800044 	addi	r2,r2,1
1000fe98:	45000015 	stw	r20,0(r8)
1000fe9c:	47000115 	stw	fp,4(r8)
1000fea0:	d8c12015 	stw	r3,1152(sp)
1000fea4:	d8811f15 	stw	r2,1148(sp)
1000fea8:	98bff60e 	bge	r19,r2,1000fe84 <__alt_data_end+0xf000fe84>
1000feac:	b009883a 	mov	r4,r22
1000feb0:	b80b883a 	mov	r5,r23
1000feb4:	d9811e04 	addi	r6,sp,1144
1000feb8:	001b2ac0 	call	1001b2ac <__sprint_r>
1000febc:	103d221e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1000fec0:	ad7ffc04 	addi	r21,r21,-16
1000fec4:	d8c12017 	ldw	r3,1152(sp)
1000fec8:	d8811f17 	ldw	r2,1148(sp)
1000fecc:	da000404 	addi	r8,sp,16
1000fed0:	e57fef16 	blt	fp,r21,1000fe90 <__alt_data_end+0xf000fe90>
1000fed4:	dac12c17 	ldw	r11,1200(sp)
1000fed8:	1d47883a 	add	r3,r3,r21
1000fedc:	10800044 	addi	r2,r2,1
1000fee0:	42c00015 	stw	r11,0(r8)
1000fee4:	45400115 	stw	r21,4(r8)
1000fee8:	d8c12015 	stw	r3,1152(sp)
1000feec:	d8811f15 	stw	r2,1148(sp)
1000fef0:	010001c4 	movi	r4,7
1000fef4:	20819116 	blt	r4,r2,1001053c <___vfprintf_internal_r+0x1650>
1000fef8:	42000204 	addi	r8,r8,8
1000fefc:	003dec06 	br	1000f6b0 <__alt_data_end+0xf000f6b0>
1000ff00:	db013317 	ldw	r12,1228(sp)
1000ff04:	00800044 	movi	r2,1
1000ff08:	18c00044 	addi	r3,r3,1
1000ff0c:	1301530e 	bge	r2,r12,1001045c <___vfprintf_internal_r+0x1570>
1000ff10:	dc011f17 	ldw	r16,1148(sp)
1000ff14:	dac13117 	ldw	r11,1220(sp)
1000ff18:	00800044 	movi	r2,1
1000ff1c:	84000044 	addi	r16,r16,1
1000ff20:	40800115 	stw	r2,4(r8)
1000ff24:	42c00015 	stw	r11,0(r8)
1000ff28:	d8c12015 	stw	r3,1152(sp)
1000ff2c:	dc011f15 	stw	r16,1148(sp)
1000ff30:	008001c4 	movi	r2,7
1000ff34:	14016b16 	blt	r2,r16,100104e4 <___vfprintf_internal_r+0x15f8>
1000ff38:	42000204 	addi	r8,r8,8
1000ff3c:	db013817 	ldw	r12,1248(sp)
1000ff40:	dac13517 	ldw	r11,1236(sp)
1000ff44:	84000044 	addi	r16,r16,1
1000ff48:	1b07883a 	add	r3,r3,r12
1000ff4c:	42c00015 	stw	r11,0(r8)
1000ff50:	43000115 	stw	r12,4(r8)
1000ff54:	d8c12015 	stw	r3,1152(sp)
1000ff58:	dc011f15 	stw	r16,1148(sp)
1000ff5c:	008001c4 	movi	r2,7
1000ff60:	14016916 	blt	r2,r16,10010508 <___vfprintf_internal_r+0x161c>
1000ff64:	44800204 	addi	r18,r8,8
1000ff68:	d9013717 	ldw	r4,1244(sp)
1000ff6c:	d9413917 	ldw	r5,1252(sp)
1000ff70:	000d883a 	mov	r6,zero
1000ff74:	000f883a 	mov	r7,zero
1000ff78:	d8c13d15 	stw	r3,1268(sp)
1000ff7c:	001fbe00 	call	1001fbe0 <__eqdf2>
1000ff80:	d8c13d17 	ldw	r3,1268(sp)
1000ff84:	db013317 	ldw	r12,1228(sp)
1000ff88:	1000ae26 	beq	r2,zero,10010244 <___vfprintf_internal_r+0x1358>
1000ff8c:	dac13117 	ldw	r11,1220(sp)
1000ff90:	60bfffc4 	addi	r2,r12,-1
1000ff94:	1887883a 	add	r3,r3,r2
1000ff98:	59000044 	addi	r4,r11,1
1000ff9c:	84000044 	addi	r16,r16,1
1000ffa0:	90800115 	stw	r2,4(r18)
1000ffa4:	91000015 	stw	r4,0(r18)
1000ffa8:	d8c12015 	stw	r3,1152(sp)
1000ffac:	dc011f15 	stw	r16,1148(sp)
1000ffb0:	008001c4 	movi	r2,7
1000ffb4:	14014216 	blt	r2,r16,100104c0 <___vfprintf_internal_r+0x15d4>
1000ffb8:	94800204 	addi	r18,r18,8
1000ffbc:	dac13a17 	ldw	r11,1256(sp)
1000ffc0:	dd4122c4 	addi	r21,sp,1163
1000ffc4:	84000044 	addi	r16,r16,1
1000ffc8:	58c7883a 	add	r3,r11,r3
1000ffcc:	95400015 	stw	r21,0(r18)
1000ffd0:	92c00115 	stw	r11,4(r18)
1000ffd4:	d8c12015 	stw	r3,1152(sp)
1000ffd8:	dc011f15 	stw	r16,1148(sp)
1000ffdc:	008001c4 	movi	r2,7
1000ffe0:	14000e16 	blt	r2,r16,1001001c <___vfprintf_internal_r+0x1130>
1000ffe4:	92000204 	addi	r8,r18,8
1000ffe8:	003de706 	br	1000f788 <__alt_data_end+0xf000f788>
1000ffec:	010400b4 	movhi	r4,4098
1000fff0:	21144d84 	addi	r4,r4,20790
1000fff4:	d9012c15 	stw	r4,1200(sp)
1000fff8:	dac12c17 	ldw	r11,1200(sp)
1000fffc:	1c07883a 	add	r3,r3,r16
10010000:	44000115 	stw	r16,4(r8)
10010004:	42c00015 	stw	r11,0(r8)
10010008:	10800044 	addi	r2,r2,1
1001000c:	d8c12015 	stw	r3,1152(sp)
10010010:	d8811f15 	stw	r2,1148(sp)
10010014:	010001c4 	movi	r4,7
10010018:	20bdda0e 	bge	r4,r2,1000f784 <__alt_data_end+0xf000f784>
1001001c:	b009883a 	mov	r4,r22
10010020:	b80b883a 	mov	r5,r23
10010024:	d9811e04 	addi	r6,sp,1144
10010028:	001b2ac0 	call	1001b2ac <__sprint_r>
1001002c:	103cc61e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010030:	d8c12017 	ldw	r3,1152(sp)
10010034:	da000404 	addi	r8,sp,16
10010038:	003dd306 	br	1000f788 <__alt_data_end+0xf000f788>
1001003c:	b009883a 	mov	r4,r22
10010040:	b80b883a 	mov	r5,r23
10010044:	d9811e04 	addi	r6,sp,1144
10010048:	001b2ac0 	call	1001b2ac <__sprint_r>
1001004c:	103e0926 	beq	r2,zero,1000f874 <__alt_data_end+0xf000f874>
10010050:	003cbd06 	br	1000f348 <__alt_data_end+0xf000f348>
10010054:	10803fcc 	andi	r2,r2,255
10010058:	1000651e 	bne	r2,zero,100101f0 <___vfprintf_internal_r+0x1304>
1001005c:	8880004c 	andi	r2,r17,1
10010060:	10013226 	beq	r2,zero,1001052c <___vfprintf_internal_r+0x1640>
10010064:	00800c04 	movi	r2,48
10010068:	d8c10dc4 	addi	r3,sp,1079
1001006c:	d8810dc5 	stb	r2,1079(sp)
10010070:	dc813c17 	ldw	r18,1264(sp)
10010074:	d8c13115 	stw	r3,1220(sp)
10010078:	003d2b06 	br	1000f528 <__alt_data_end+0xf000f528>
1001007c:	b009883a 	mov	r4,r22
10010080:	b80b883a 	mov	r5,r23
10010084:	d9811e04 	addi	r6,sp,1144
10010088:	001b2ac0 	call	1001b2ac <__sprint_r>
1001008c:	103cae1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010090:	d8c12017 	ldw	r3,1152(sp)
10010094:	da000404 	addi	r8,sp,16
10010098:	003dae06 	br	1000f754 <__alt_data_end+0xf000f754>
1001009c:	b009883a 	mov	r4,r22
100100a0:	b80b883a 	mov	r5,r23
100100a4:	d9811e04 	addi	r6,sp,1144
100100a8:	001b2ac0 	call	1001b2ac <__sprint_r>
100100ac:	103ca61e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100100b0:	d8c12017 	ldw	r3,1152(sp)
100100b4:	da000404 	addi	r8,sp,16
100100b8:	003d6c06 	br	1000f66c <__alt_data_end+0xf000f66c>
100100bc:	b009883a 	mov	r4,r22
100100c0:	b80b883a 	mov	r5,r23
100100c4:	d9811e04 	addi	r6,sp,1144
100100c8:	001b2ac0 	call	1001b2ac <__sprint_r>
100100cc:	103c9e1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100100d0:	d8c12017 	ldw	r3,1152(sp)
100100d4:	da000404 	addi	r8,sp,16
100100d8:	003d7206 	br	1000f6a4 <__alt_data_end+0xf000f6a4>
100100dc:	d9413b17 	ldw	r5,1260(sp)
100100e0:	d8c10e04 	addi	r3,sp,1080
100100e4:	988003cc 	andi	r2,r19,15
100100e8:	e008973a 	slli	r4,fp,28
100100ec:	2885883a 	add	r2,r5,r2
100100f0:	9826d13a 	srli	r19,r19,4
100100f4:	10800003 	ldbu	r2,0(r2)
100100f8:	e038d13a 	srli	fp,fp,4
100100fc:	18ffffc4 	addi	r3,r3,-1
10010100:	24e6b03a 	or	r19,r4,r19
10010104:	18800005 	stb	r2,0(r3)
10010108:	9f04b03a 	or	r2,r19,fp
1001010c:	103ff51e 	bne	r2,zero,100100e4 <__alt_data_end+0xf00100e4>
10010110:	db012817 	ldw	r12,1184(sp)
10010114:	d8c13115 	stw	r3,1220(sp)
10010118:	60e5c83a 	sub	r18,r12,r3
1001011c:	003d0206 	br	1000f528 <__alt_data_end+0xf000f528>
10010120:	dc012617 	ldw	r16,1176(sp)
10010124:	0401b10e 	bge	zero,r16,100107ec <___vfprintf_internal_r+0x1900>
10010128:	db013117 	ldw	r12,1220(sp)
1001012c:	dac13317 	ldw	r11,1228(sp)
10010130:	62e1883a 	add	r16,r12,r11
10010134:	db013417 	ldw	r12,1232(sp)
10010138:	5825883a 	mov	r18,r11
1001013c:	62c0010e 	bge	r12,r11,10010144 <___vfprintf_internal_r+0x1258>
10010140:	6025883a 	mov	r18,r12
10010144:	04800b0e 	bge	zero,r18,10010174 <___vfprintf_internal_r+0x1288>
10010148:	d8811f17 	ldw	r2,1148(sp)
1001014c:	dac13117 	ldw	r11,1220(sp)
10010150:	1c87883a 	add	r3,r3,r18
10010154:	10800044 	addi	r2,r2,1
10010158:	42c00015 	stw	r11,0(r8)
1001015c:	44800115 	stw	r18,4(r8)
10010160:	d8c12015 	stw	r3,1152(sp)
10010164:	d8811f15 	stw	r2,1148(sp)
10010168:	010001c4 	movi	r4,7
1001016c:	20824f16 	blt	r4,r2,10010aac <___vfprintf_internal_r+0x1bc0>
10010170:	42000204 	addi	r8,r8,8
10010174:	90024b16 	blt	r18,zero,10010aa4 <___vfprintf_internal_r+0x1bb8>
10010178:	db013417 	ldw	r12,1232(sp)
1001017c:	64a5c83a 	sub	r18,r12,r18
10010180:	0480730e 	bge	zero,r18,10010350 <___vfprintf_internal_r+0x1464>
10010184:	05400404 	movi	r21,16
10010188:	d8811f17 	ldw	r2,1148(sp)
1001018c:	ac817d0e 	bge	r21,r18,10010784 <___vfprintf_internal_r+0x1898>
10010190:	014400b4 	movhi	r5,4098
10010194:	29544d84 	addi	r5,r5,20790
10010198:	d9412c15 	stw	r5,1200(sp)
1001019c:	070001c4 	movi	fp,7
100101a0:	00000306 	br	100101b0 <___vfprintf_internal_r+0x12c4>
100101a4:	42000204 	addi	r8,r8,8
100101a8:	94bffc04 	addi	r18,r18,-16
100101ac:	ac81780e 	bge	r21,r18,10010790 <___vfprintf_internal_r+0x18a4>
100101b0:	18c00404 	addi	r3,r3,16
100101b4:	10800044 	addi	r2,r2,1
100101b8:	45000015 	stw	r20,0(r8)
100101bc:	45400115 	stw	r21,4(r8)
100101c0:	d8c12015 	stw	r3,1152(sp)
100101c4:	d8811f15 	stw	r2,1148(sp)
100101c8:	e0bff60e 	bge	fp,r2,100101a4 <__alt_data_end+0xf00101a4>
100101cc:	b009883a 	mov	r4,r22
100101d0:	b80b883a 	mov	r5,r23
100101d4:	d9811e04 	addi	r6,sp,1144
100101d8:	001b2ac0 	call	1001b2ac <__sprint_r>
100101dc:	103c5a1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100101e0:	d8c12017 	ldw	r3,1152(sp)
100101e4:	d8811f17 	ldw	r2,1148(sp)
100101e8:	da000404 	addi	r8,sp,16
100101ec:	003fee06 	br	100101a8 <__alt_data_end+0xf00101a8>
100101f0:	dac10e04 	addi	r11,sp,1080
100101f4:	0025883a 	mov	r18,zero
100101f8:	dac13115 	stw	r11,1220(sp)
100101fc:	003cca06 	br	1000f528 <__alt_data_end+0xf000f528>
10010200:	b009883a 	mov	r4,r22
10010204:	b80b883a 	mov	r5,r23
10010208:	d9811e04 	addi	r6,sp,1144
1001020c:	001b2ac0 	call	1001b2ac <__sprint_r>
10010210:	103c4d1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010214:	d8c12017 	ldw	r3,1152(sp)
10010218:	d8812787 	ldb	r2,1182(sp)
1001021c:	da000404 	addi	r8,sp,16
10010220:	003d0506 	br	1000f638 <__alt_data_end+0xf000f638>
10010224:	dac12d17 	ldw	r11,1204(sp)
10010228:	14c00017 	ldw	r19,0(r2)
1001022c:	0039883a 	mov	fp,zero
10010230:	5ac00104 	addi	r11,r11,4
10010234:	dac12d15 	stw	r11,1204(sp)
10010238:	0005883a 	mov	r2,zero
1001023c:	9807883a 	mov	r3,r19
10010240:	003c9c06 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
10010244:	657fffc4 	addi	r21,r12,-1
10010248:	057f5c0e 	bge	zero,r21,1000ffbc <__alt_data_end+0xf000ffbc>
1001024c:	07000404 	movi	fp,16
10010250:	e5408f0e 	bge	fp,r21,10010490 <___vfprintf_internal_r+0x15a4>
10010254:	010400b4 	movhi	r4,4098
10010258:	21144d84 	addi	r4,r4,20790
1001025c:	d9012c15 	stw	r4,1200(sp)
10010260:	01c001c4 	movi	r7,7
10010264:	00000306 	br	10010274 <___vfprintf_internal_r+0x1388>
10010268:	94800204 	addi	r18,r18,8
1001026c:	ad7ffc04 	addi	r21,r21,-16
10010270:	e5408a0e 	bge	fp,r21,1001049c <___vfprintf_internal_r+0x15b0>
10010274:	18c00404 	addi	r3,r3,16
10010278:	84000044 	addi	r16,r16,1
1001027c:	95000015 	stw	r20,0(r18)
10010280:	97000115 	stw	fp,4(r18)
10010284:	d8c12015 	stw	r3,1152(sp)
10010288:	dc011f15 	stw	r16,1148(sp)
1001028c:	3c3ff60e 	bge	r7,r16,10010268 <__alt_data_end+0xf0010268>
10010290:	b009883a 	mov	r4,r22
10010294:	b80b883a 	mov	r5,r23
10010298:	d9811e04 	addi	r6,sp,1144
1001029c:	d9c13d15 	stw	r7,1268(sp)
100102a0:	001b2ac0 	call	1001b2ac <__sprint_r>
100102a4:	d9c13d17 	ldw	r7,1268(sp)
100102a8:	103c271e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100102ac:	d8c12017 	ldw	r3,1152(sp)
100102b0:	dc011f17 	ldw	r16,1148(sp)
100102b4:	dc800404 	addi	r18,sp,16
100102b8:	003fec06 	br	1001026c <__alt_data_end+0xf001026c>
100102bc:	1cc00017 	ldw	r19,0(r3)
100102c0:	dac12d17 	ldw	r11,1204(sp)
100102c4:	9839d7fa 	srai	fp,r19,31
100102c8:	5ac00104 	addi	r11,r11,4
100102cc:	dac12d15 	stw	r11,1204(sp)
100102d0:	e005883a 	mov	r2,fp
100102d4:	003d9006 	br	1000f918 <__alt_data_end+0xf000f918>
100102d8:	00800084 	movi	r2,2
100102dc:	9f06b03a 	or	r3,r19,fp
100102e0:	003c7406 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
100102e4:	db012d17 	ldw	r12,1204(sp)
100102e8:	14c00017 	ldw	r19,0(r2)
100102ec:	0039883a 	mov	fp,zero
100102f0:	63000104 	addi	r12,r12,4
100102f4:	db012d15 	stw	r12,1204(sp)
100102f8:	00800044 	movi	r2,1
100102fc:	9807883a 	mov	r3,r19
10010300:	003c6c06 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
10010304:	10803fcc 	andi	r2,r2,255
10010308:	1080201c 	xori	r2,r2,128
1001030c:	10bfe004 	addi	r2,r2,-128
10010310:	01000c04 	movi	r4,48
10010314:	1101a526 	beq	r2,r4,100109ac <___vfprintf_internal_r+0x1ac0>
10010318:	dac13117 	ldw	r11,1220(sp)
1001031c:	db012817 	ldw	r12,1184(sp)
10010320:	193fffc5 	stb	r4,-1(r3)
10010324:	5affffc4 	addi	r11,r11,-1
10010328:	dac13115 	stw	r11,1220(sp)
1001032c:	62e5c83a 	sub	r18,r12,r11
10010330:	003c7d06 	br	1000f528 <__alt_data_end+0xf000f528>
10010334:	b009883a 	mov	r4,r22
10010338:	b80b883a 	mov	r5,r23
1001033c:	d9811e04 	addi	r6,sp,1144
10010340:	001b2ac0 	call	1001b2ac <__sprint_r>
10010344:	103c001e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010348:	d8c12017 	ldw	r3,1152(sp)
1001034c:	da000404 	addi	r8,sp,16
10010350:	db013117 	ldw	r12,1220(sp)
10010354:	dac13417 	ldw	r11,1232(sp)
10010358:	d8812617 	ldw	r2,1176(sp)
1001035c:	62e5883a 	add	r18,r12,r11
10010360:	db013317 	ldw	r12,1228(sp)
10010364:	13000216 	blt	r2,r12,10010370 <___vfprintf_internal_r+0x1484>
10010368:	8900004c 	andi	r4,r17,1
1001036c:	20000c26 	beq	r4,zero,100103a0 <___vfprintf_internal_r+0x14b4>
10010370:	dac13817 	ldw	r11,1248(sp)
10010374:	d9011f17 	ldw	r4,1148(sp)
10010378:	db013517 	ldw	r12,1236(sp)
1001037c:	1ac7883a 	add	r3,r3,r11
10010380:	21000044 	addi	r4,r4,1
10010384:	43000015 	stw	r12,0(r8)
10010388:	42c00115 	stw	r11,4(r8)
1001038c:	d8c12015 	stw	r3,1152(sp)
10010390:	d9011f15 	stw	r4,1148(sp)
10010394:	014001c4 	movi	r5,7
10010398:	2901cc16 	blt	r5,r4,10010acc <___vfprintf_internal_r+0x1be0>
1001039c:	42000204 	addi	r8,r8,8
100103a0:	dac13317 	ldw	r11,1228(sp)
100103a4:	8489c83a 	sub	r4,r16,r18
100103a8:	5885c83a 	sub	r2,r11,r2
100103ac:	1021883a 	mov	r16,r2
100103b0:	2080010e 	bge	r4,r2,100103b8 <___vfprintf_internal_r+0x14cc>
100103b4:	2021883a 	mov	r16,r4
100103b8:	04000a0e 	bge	zero,r16,100103e4 <___vfprintf_internal_r+0x14f8>
100103bc:	d9011f17 	ldw	r4,1148(sp)
100103c0:	1c07883a 	add	r3,r3,r16
100103c4:	44800015 	stw	r18,0(r8)
100103c8:	21000044 	addi	r4,r4,1
100103cc:	44000115 	stw	r16,4(r8)
100103d0:	d8c12015 	stw	r3,1152(sp)
100103d4:	d9011f15 	stw	r4,1148(sp)
100103d8:	014001c4 	movi	r5,7
100103dc:	2901d616 	blt	r5,r4,10010b38 <___vfprintf_internal_r+0x1c4c>
100103e0:	42000204 	addi	r8,r8,8
100103e4:	8001df16 	blt	r16,zero,10010b64 <___vfprintf_internal_r+0x1c78>
100103e8:	1421c83a 	sub	r16,r2,r16
100103ec:	043ce60e 	bge	zero,r16,1000f788 <__alt_data_end+0xf000f788>
100103f0:	04800404 	movi	r18,16
100103f4:	d8811f17 	ldw	r2,1148(sp)
100103f8:	943efc0e 	bge	r18,r16,1000ffec <__alt_data_end+0xf000ffec>
100103fc:	014400b4 	movhi	r5,4098
10010400:	29544d84 	addi	r5,r5,20790
10010404:	d9412c15 	stw	r5,1200(sp)
10010408:	054001c4 	movi	r21,7
1001040c:	00000306 	br	1001041c <___vfprintf_internal_r+0x1530>
10010410:	42000204 	addi	r8,r8,8
10010414:	843ffc04 	addi	r16,r16,-16
10010418:	943ef70e 	bge	r18,r16,1000fff8 <__alt_data_end+0xf000fff8>
1001041c:	18c00404 	addi	r3,r3,16
10010420:	10800044 	addi	r2,r2,1
10010424:	45000015 	stw	r20,0(r8)
10010428:	44800115 	stw	r18,4(r8)
1001042c:	d8c12015 	stw	r3,1152(sp)
10010430:	d8811f15 	stw	r2,1148(sp)
10010434:	a8bff60e 	bge	r21,r2,10010410 <__alt_data_end+0xf0010410>
10010438:	b009883a 	mov	r4,r22
1001043c:	b80b883a 	mov	r5,r23
10010440:	d9811e04 	addi	r6,sp,1144
10010444:	001b2ac0 	call	1001b2ac <__sprint_r>
10010448:	103bbf1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1001044c:	d8c12017 	ldw	r3,1152(sp)
10010450:	d8811f17 	ldw	r2,1148(sp)
10010454:	da000404 	addi	r8,sp,16
10010458:	003fee06 	br	10010414 <__alt_data_end+0xf0010414>
1001045c:	8888703a 	and	r4,r17,r2
10010460:	203eab1e 	bne	r4,zero,1000ff10 <__alt_data_end+0xf000ff10>
10010464:	dc011f17 	ldw	r16,1148(sp)
10010468:	db013117 	ldw	r12,1220(sp)
1001046c:	40800115 	stw	r2,4(r8)
10010470:	84000044 	addi	r16,r16,1
10010474:	43000015 	stw	r12,0(r8)
10010478:	d8c12015 	stw	r3,1152(sp)
1001047c:	dc011f15 	stw	r16,1148(sp)
10010480:	008001c4 	movi	r2,7
10010484:	14000e16 	blt	r2,r16,100104c0 <___vfprintf_internal_r+0x15d4>
10010488:	44800204 	addi	r18,r8,8
1001048c:	003ecb06 	br	1000ffbc <__alt_data_end+0xf000ffbc>
10010490:	008400b4 	movhi	r2,4098
10010494:	10944d84 	addi	r2,r2,20790
10010498:	d8812c15 	stw	r2,1200(sp)
1001049c:	dac12c17 	ldw	r11,1200(sp)
100104a0:	1d47883a 	add	r3,r3,r21
100104a4:	84000044 	addi	r16,r16,1
100104a8:	92c00015 	stw	r11,0(r18)
100104ac:	95400115 	stw	r21,4(r18)
100104b0:	d8c12015 	stw	r3,1152(sp)
100104b4:	dc011f15 	stw	r16,1148(sp)
100104b8:	008001c4 	movi	r2,7
100104bc:	143ebe0e 	bge	r2,r16,1000ffb8 <__alt_data_end+0xf000ffb8>
100104c0:	b009883a 	mov	r4,r22
100104c4:	b80b883a 	mov	r5,r23
100104c8:	d9811e04 	addi	r6,sp,1144
100104cc:	001b2ac0 	call	1001b2ac <__sprint_r>
100104d0:	103b9d1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100104d4:	d8c12017 	ldw	r3,1152(sp)
100104d8:	dc011f17 	ldw	r16,1148(sp)
100104dc:	dc800404 	addi	r18,sp,16
100104e0:	003eb606 	br	1000ffbc <__alt_data_end+0xf000ffbc>
100104e4:	b009883a 	mov	r4,r22
100104e8:	b80b883a 	mov	r5,r23
100104ec:	d9811e04 	addi	r6,sp,1144
100104f0:	001b2ac0 	call	1001b2ac <__sprint_r>
100104f4:	103b941e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100104f8:	d8c12017 	ldw	r3,1152(sp)
100104fc:	dc011f17 	ldw	r16,1148(sp)
10010500:	da000404 	addi	r8,sp,16
10010504:	003e8d06 	br	1000ff3c <__alt_data_end+0xf000ff3c>
10010508:	b009883a 	mov	r4,r22
1001050c:	b80b883a 	mov	r5,r23
10010510:	d9811e04 	addi	r6,sp,1144
10010514:	001b2ac0 	call	1001b2ac <__sprint_r>
10010518:	103b8b1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
1001051c:	d8c12017 	ldw	r3,1152(sp)
10010520:	dc011f17 	ldw	r16,1148(sp)
10010524:	dc800404 	addi	r18,sp,16
10010528:	003e8f06 	br	1000ff68 <__alt_data_end+0xf000ff68>
1001052c:	db010e04 	addi	r12,sp,1080
10010530:	0025883a 	mov	r18,zero
10010534:	db013115 	stw	r12,1220(sp)
10010538:	003bfb06 	br	1000f528 <__alt_data_end+0xf000f528>
1001053c:	b009883a 	mov	r4,r22
10010540:	b80b883a 	mov	r5,r23
10010544:	d9811e04 	addi	r6,sp,1144
10010548:	001b2ac0 	call	1001b2ac <__sprint_r>
1001054c:	103b7e1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010550:	d8c12017 	ldw	r3,1152(sp)
10010554:	da000404 	addi	r8,sp,16
10010558:	003c5506 	br	1000f6b0 <__alt_data_end+0xf000f6b0>
1001055c:	04e7c83a 	sub	r19,zero,r19
10010560:	9804c03a 	cmpne	r2,r19,zero
10010564:	0739c83a 	sub	fp,zero,fp
10010568:	e0b9c83a 	sub	fp,fp,r2
1001056c:	05400b44 	movi	r21,45
10010570:	dd412785 	stb	r21,1182(sp)
10010574:	da413215 	stw	r9,1224(sp)
10010578:	00800044 	movi	r2,1
1001057c:	9f06b03a 	or	r3,r19,fp
10010580:	003bcf06 	br	1000f4c0 <__alt_data_end+0xf000f4c0>
10010584:	da013f15 	stw	r8,1276(sp)
10010588:	da413e15 	stw	r9,1272(sp)
1001058c:	0017a240 	call	10017a24 <__fpclassifyd>
10010590:	da013f17 	ldw	r8,1276(sp)
10010594:	da413e17 	ldw	r9,1272(sp)
10010598:	1000ce26 	beq	r2,zero,100108d4 <___vfprintf_internal_r+0x19e8>
1001059c:	057ff7c4 	movi	r21,-33
100105a0:	00bfffc4 	movi	r2,-1
100105a4:	856a703a 	and	r21,r16,r21
100105a8:	4881f026 	beq	r9,r2,10010d6c <___vfprintf_internal_r+0x1e80>
100105ac:	008011c4 	movi	r2,71
100105b0:	a881e526 	beq	r21,r2,10010d48 <___vfprintf_internal_r+0x1e5c>
100105b4:	db013917 	ldw	r12,1252(sp)
100105b8:	8ac04014 	ori	r11,r17,256
100105bc:	dac12d15 	stw	r11,1204(sp)
100105c0:	6001e416 	blt	r12,zero,10010d54 <___vfprintf_internal_r+0x1e68>
100105c4:	dc813917 	ldw	r18,1252(sp)
100105c8:	d8012b05 	stb	zero,1196(sp)
100105cc:	00801984 	movi	r2,102
100105d0:	80811826 	beq	r16,r2,10010a34 <___vfprintf_internal_r+0x1b48>
100105d4:	00801184 	movi	r2,70
100105d8:	80811626 	beq	r16,r2,10010a34 <___vfprintf_internal_r+0x1b48>
100105dc:	00801144 	movi	r2,69
100105e0:	a881e026 	beq	r21,r2,10010d64 <___vfprintf_internal_r+0x1e78>
100105e4:	4839883a 	mov	fp,r9
100105e8:	d8812604 	addi	r2,sp,1176
100105ec:	d8800115 	stw	r2,4(sp)
100105f0:	d9413717 	ldw	r5,1244(sp)
100105f4:	d8812504 	addi	r2,sp,1172
100105f8:	d8800215 	stw	r2,8(sp)
100105fc:	d8812104 	addi	r2,sp,1156
10010600:	df000015 	stw	fp,0(sp)
10010604:	d8800315 	stw	r2,12(sp)
10010608:	b009883a 	mov	r4,r22
1001060c:	900d883a 	mov	r6,r18
10010610:	01c00084 	movi	r7,2
10010614:	da013f15 	stw	r8,1276(sp)
10010618:	da413e15 	stw	r9,1272(sp)
1001061c:	0012a7c0 	call	10012a7c <_dtoa_r>
10010620:	d8813115 	stw	r2,1220(sp)
10010624:	008019c4 	movi	r2,103
10010628:	da013f17 	ldw	r8,1276(sp)
1001062c:	da413e17 	ldw	r9,1272(sp)
10010630:	80800226 	beq	r16,r2,1001063c <___vfprintf_internal_r+0x1750>
10010634:	008011c4 	movi	r2,71
10010638:	8081101e 	bne	r16,r2,10010a7c <___vfprintf_internal_r+0x1b90>
1001063c:	8880004c 	andi	r2,r17,1
10010640:	1001df26 	beq	r2,zero,10010dc0 <___vfprintf_internal_r+0x1ed4>
10010644:	db013117 	ldw	r12,1220(sp)
10010648:	6715883a 	add	r10,r12,fp
1001064c:	d9013717 	ldw	r4,1244(sp)
10010650:	900b883a 	mov	r5,r18
10010654:	000d883a 	mov	r6,zero
10010658:	000f883a 	mov	r7,zero
1001065c:	da013f15 	stw	r8,1276(sp)
10010660:	da413e15 	stw	r9,1272(sp)
10010664:	da813d15 	stw	r10,1268(sp)
10010668:	001fbe00 	call	1001fbe0 <__eqdf2>
1001066c:	da013f17 	ldw	r8,1276(sp)
10010670:	da413e17 	ldw	r9,1272(sp)
10010674:	da813d17 	ldw	r10,1268(sp)
10010678:	10016526 	beq	r2,zero,10010c10 <___vfprintf_internal_r+0x1d24>
1001067c:	d8812117 	ldw	r2,1156(sp)
10010680:	1280062e 	bgeu	r2,r10,1001069c <___vfprintf_internal_r+0x17b0>
10010684:	01000c04 	movi	r4,48
10010688:	10c00044 	addi	r3,r2,1
1001068c:	d8c12115 	stw	r3,1156(sp)
10010690:	11000005 	stb	r4,0(r2)
10010694:	d8812117 	ldw	r2,1156(sp)
10010698:	12bffb36 	bltu	r2,r10,10010688 <__alt_data_end+0xf0010688>
1001069c:	db013117 	ldw	r12,1220(sp)
100106a0:	1305c83a 	sub	r2,r2,r12
100106a4:	d8813315 	stw	r2,1228(sp)
100106a8:	008011c4 	movi	r2,71
100106ac:	a8814a26 	beq	r21,r2,10010bd8 <___vfprintf_internal_r+0x1cec>
100106b0:	00801944 	movi	r2,101
100106b4:	14020a0e 	bge	r2,r16,10010ee0 <___vfprintf_internal_r+0x1ff4>
100106b8:	00801984 	movi	r2,102
100106bc:	8081b626 	beq	r16,r2,10010d98 <___vfprintf_internal_r+0x1eac>
100106c0:	db012617 	ldw	r12,1176(sp)
100106c4:	db013415 	stw	r12,1232(sp)
100106c8:	db013417 	ldw	r12,1232(sp)
100106cc:	dac13317 	ldw	r11,1228(sp)
100106d0:	62c1a816 	blt	r12,r11,10010d74 <___vfprintf_internal_r+0x1e88>
100106d4:	8c40004c 	andi	r17,r17,1
100106d8:	8801ca1e 	bne	r17,zero,10010e04 <___vfprintf_internal_r+0x1f18>
100106dc:	6005883a 	mov	r2,r12
100106e0:	6001b516 	blt	r12,zero,10010db8 <___vfprintf_internal_r+0x1ecc>
100106e4:	dc813417 	ldw	r18,1232(sp)
100106e8:	df012b07 	ldb	fp,1196(sp)
100106ec:	e001321e 	bne	fp,zero,10010bb8 <___vfprintf_internal_r+0x1ccc>
100106f0:	dc412d17 	ldw	r17,1204(sp)
100106f4:	dd412783 	ldbu	r21,1182(sp)
100106f8:	d8812b15 	stw	r2,1196(sp)
100106fc:	dcc12d15 	stw	r19,1204(sp)
10010700:	d8013215 	stw	zero,1224(sp)
10010704:	003b8d06 	br	1000f53c <__alt_data_end+0xf000f53c>
10010708:	88c0100c 	andi	r3,r17,64
1001070c:	18008226 	beq	r3,zero,10010918 <___vfprintf_internal_r+0x1a2c>
10010710:	dac12d17 	ldw	r11,1204(sp)
10010714:	14c0000b 	ldhu	r19,0(r2)
10010718:	0039883a 	mov	fp,zero
1001071c:	5ac00104 	addi	r11,r11,4
10010720:	dac12d15 	stw	r11,1204(sp)
10010724:	003c8f06 	br	1000f964 <__alt_data_end+0xf000f964>
10010728:	1c000007 	ldb	r16,0(r3)
1001072c:	1805883a 	mov	r2,r3
10010730:	003a5506 	br	1000f088 <__alt_data_end+0xf000f088>
10010734:	00800084 	movi	r2,2
10010738:	003b5e06 	br	1000f4b4 <__alt_data_end+0xf000f4b4>
1001073c:	8880040c 	andi	r2,r17,16
10010740:	1000091e 	bne	r2,zero,10010768 <___vfprintf_internal_r+0x187c>
10010744:	8c40100c 	andi	r17,r17,64
10010748:	88000726 	beq	r17,zero,10010768 <___vfprintf_internal_r+0x187c>
1001074c:	db012d17 	ldw	r12,1204(sp)
10010750:	dac12f17 	ldw	r11,1212(sp)
10010754:	60800017 	ldw	r2,0(r12)
10010758:	63000104 	addi	r12,r12,4
1001075c:	db012d15 	stw	r12,1204(sp)
10010760:	12c0000d 	sth	r11,0(r2)
10010764:	003a1e06 	br	1000efe0 <__alt_data_end+0xf000efe0>
10010768:	db012d17 	ldw	r12,1204(sp)
1001076c:	dac12f17 	ldw	r11,1212(sp)
10010770:	60800017 	ldw	r2,0(r12)
10010774:	63000104 	addi	r12,r12,4
10010778:	db012d15 	stw	r12,1204(sp)
1001077c:	12c00015 	stw	r11,0(r2)
10010780:	003a1706 	br	1000efe0 <__alt_data_end+0xf000efe0>
10010784:	010400b4 	movhi	r4,4098
10010788:	21144d84 	addi	r4,r4,20790
1001078c:	d9012c15 	stw	r4,1200(sp)
10010790:	dac12c17 	ldw	r11,1200(sp)
10010794:	1c87883a 	add	r3,r3,r18
10010798:	10800044 	addi	r2,r2,1
1001079c:	42c00015 	stw	r11,0(r8)
100107a0:	44800115 	stw	r18,4(r8)
100107a4:	d8c12015 	stw	r3,1152(sp)
100107a8:	d8811f15 	stw	r2,1148(sp)
100107ac:	010001c4 	movi	r4,7
100107b0:	20bee016 	blt	r4,r2,10010334 <__alt_data_end+0xf0010334>
100107b4:	42000204 	addi	r8,r8,8
100107b8:	003ee506 	br	10010350 <__alt_data_end+0xf0010350>
100107bc:	010400b4 	movhi	r4,4098
100107c0:	21144d84 	addi	r4,r4,20790
100107c4:	d9012c15 	stw	r4,1200(sp)
100107c8:	003bd806 	br	1000f72c <__alt_data_end+0xf000f72c>
100107cc:	b009883a 	mov	r4,r22
100107d0:	b80b883a 	mov	r5,r23
100107d4:	d9811e04 	addi	r6,sp,1144
100107d8:	001b2ac0 	call	1001b2ac <__sprint_r>
100107dc:	103ada1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100107e0:	d8c12017 	ldw	r3,1152(sp)
100107e4:	da000404 	addi	r8,sp,16
100107e8:	003d6b06 	br	1000fd98 <__alt_data_end+0xf000fd98>
100107ec:	d8811f17 	ldw	r2,1148(sp)
100107f0:	030400b4 	movhi	r12,4098
100107f4:	01000044 	movi	r4,1
100107f8:	18c00044 	addi	r3,r3,1
100107fc:	10800044 	addi	r2,r2,1
10010800:	63144504 	addi	r12,r12,20756
10010804:	41000115 	stw	r4,4(r8)
10010808:	43000015 	stw	r12,0(r8)
1001080c:	d8c12015 	stw	r3,1152(sp)
10010810:	d8811f15 	stw	r2,1148(sp)
10010814:	010001c4 	movi	r4,7
10010818:	20804916 	blt	r4,r2,10010940 <___vfprintf_internal_r+0x1a54>
1001081c:	42000204 	addi	r8,r8,8
10010820:	8000041e 	bne	r16,zero,10010834 <___vfprintf_internal_r+0x1948>
10010824:	dac13317 	ldw	r11,1228(sp)
10010828:	5800021e 	bne	r11,zero,10010834 <___vfprintf_internal_r+0x1948>
1001082c:	8880004c 	andi	r2,r17,1
10010830:	103bd526 	beq	r2,zero,1000f788 <__alt_data_end+0xf000f788>
10010834:	db013817 	ldw	r12,1248(sp)
10010838:	d8811f17 	ldw	r2,1148(sp)
1001083c:	dac13517 	ldw	r11,1236(sp)
10010840:	1b07883a 	add	r3,r3,r12
10010844:	10800044 	addi	r2,r2,1
10010848:	42c00015 	stw	r11,0(r8)
1001084c:	43000115 	stw	r12,4(r8)
10010850:	d8c12015 	stw	r3,1152(sp)
10010854:	d8811f15 	stw	r2,1148(sp)
10010858:	010001c4 	movi	r4,7
1001085c:	20813016 	blt	r4,r2,10010d20 <___vfprintf_internal_r+0x1e34>
10010860:	42000204 	addi	r8,r8,8
10010864:	0421c83a 	sub	r16,zero,r16
10010868:	0400630e 	bge	zero,r16,100109f8 <___vfprintf_internal_r+0x1b0c>
1001086c:	04800404 	movi	r18,16
10010870:	94009f0e 	bge	r18,r16,10010af0 <___vfprintf_internal_r+0x1c04>
10010874:	010400b4 	movhi	r4,4098
10010878:	21144d84 	addi	r4,r4,20790
1001087c:	d9012c15 	stw	r4,1200(sp)
10010880:	054001c4 	movi	r21,7
10010884:	00000306 	br	10010894 <___vfprintf_internal_r+0x19a8>
10010888:	42000204 	addi	r8,r8,8
1001088c:	843ffc04 	addi	r16,r16,-16
10010890:	94009a0e 	bge	r18,r16,10010afc <___vfprintf_internal_r+0x1c10>
10010894:	18c00404 	addi	r3,r3,16
10010898:	10800044 	addi	r2,r2,1
1001089c:	45000015 	stw	r20,0(r8)
100108a0:	44800115 	stw	r18,4(r8)
100108a4:	d8c12015 	stw	r3,1152(sp)
100108a8:	d8811f15 	stw	r2,1148(sp)
100108ac:	a8bff60e 	bge	r21,r2,10010888 <__alt_data_end+0xf0010888>
100108b0:	b009883a 	mov	r4,r22
100108b4:	b80b883a 	mov	r5,r23
100108b8:	d9811e04 	addi	r6,sp,1144
100108bc:	001b2ac0 	call	1001b2ac <__sprint_r>
100108c0:	103aa11e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100108c4:	d8c12017 	ldw	r3,1152(sp)
100108c8:	d8811f17 	ldw	r2,1148(sp)
100108cc:	da000404 	addi	r8,sp,16
100108d0:	003fee06 	br	1001088c <__alt_data_end+0xf001088c>
100108d4:	008011c4 	movi	r2,71
100108d8:	1400b316 	blt	r2,r16,10010ba8 <___vfprintf_internal_r+0x1cbc>
100108dc:	030400b4 	movhi	r12,4098
100108e0:	63143704 	addi	r12,r12,20700
100108e4:	db013115 	stw	r12,1220(sp)
100108e8:	00c000c4 	movi	r3,3
100108ec:	00bfdfc4 	movi	r2,-129
100108f0:	d8c12b15 	stw	r3,1196(sp)
100108f4:	88a2703a 	and	r17,r17,r2
100108f8:	dd412783 	ldbu	r21,1182(sp)
100108fc:	dcc12d15 	stw	r19,1204(sp)
10010900:	1825883a 	mov	r18,r3
10010904:	d8013215 	stw	zero,1224(sp)
10010908:	d8013415 	stw	zero,1232(sp)
1001090c:	003b0b06 	br	1000f53c <__alt_data_end+0xf000f53c>
10010910:	4825883a 	mov	r18,r9
10010914:	003cba06 	br	1000fc00 <__alt_data_end+0xf000fc00>
10010918:	db012d17 	ldw	r12,1204(sp)
1001091c:	14c00017 	ldw	r19,0(r2)
10010920:	0039883a 	mov	fp,zero
10010924:	63000104 	addi	r12,r12,4
10010928:	db012d15 	stw	r12,1204(sp)
1001092c:	003c0d06 	br	1000f964 <__alt_data_end+0xf000f964>
10010930:	008400b4 	movhi	r2,4098
10010934:	10943504 	addi	r2,r2,20692
10010938:	d8813115 	stw	r2,1220(sp)
1001093c:	003ac406 	br	1000f450 <__alt_data_end+0xf000f450>
10010940:	b009883a 	mov	r4,r22
10010944:	b80b883a 	mov	r5,r23
10010948:	d9811e04 	addi	r6,sp,1144
1001094c:	001b2ac0 	call	1001b2ac <__sprint_r>
10010950:	103a7d1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010954:	dc012617 	ldw	r16,1176(sp)
10010958:	d8c12017 	ldw	r3,1152(sp)
1001095c:	da000404 	addi	r8,sp,16
10010960:	003faf06 	br	10010820 <__alt_data_end+0xf0010820>
10010964:	db012e17 	ldw	r12,1208(sp)
10010968:	1805883a 	mov	r2,r3
1001096c:	dac12d15 	stw	r11,1204(sp)
10010970:	0319c83a 	sub	r12,zero,r12
10010974:	db012e15 	stw	r12,1208(sp)
10010978:	003a7e06 	br	1000f374 <__alt_data_end+0xf000f374>
1001097c:	18800044 	addi	r2,r3,1
10010980:	8c400814 	ori	r17,r17,32
10010984:	1c000047 	ldb	r16,1(r3)
10010988:	0039bf06 	br	1000f088 <__alt_data_end+0xf000f088>
1001098c:	b009883a 	mov	r4,r22
10010990:	b80b883a 	mov	r5,r23
10010994:	d9811e04 	addi	r6,sp,1144
10010998:	001b2ac0 	call	1001b2ac <__sprint_r>
1001099c:	103a6a1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100109a0:	d8c12017 	ldw	r3,1152(sp)
100109a4:	da000404 	addi	r8,sp,16
100109a8:	003d0c06 	br	1000fddc <__alt_data_end+0xf000fddc>
100109ac:	db012817 	ldw	r12,1184(sp)
100109b0:	d8c13117 	ldw	r3,1220(sp)
100109b4:	60e5c83a 	sub	r18,r12,r3
100109b8:	003adb06 	br	1000f528 <__alt_data_end+0xf000f528>
100109bc:	da013f15 	stw	r8,1276(sp)
100109c0:	000cc400 	call	1000cc40 <strlen>
100109c4:	1025883a 	mov	r18,r2
100109c8:	da013f17 	ldw	r8,1276(sp)
100109cc:	903c8e0e 	bge	r18,zero,1000fc08 <__alt_data_end+0xf000fc08>
100109d0:	0005883a 	mov	r2,zero
100109d4:	003c8c06 	br	1000fc08 <__alt_data_end+0xf000fc08>
100109d8:	b009883a 	mov	r4,r22
100109dc:	b80b883a 	mov	r5,r23
100109e0:	d9811e04 	addi	r6,sp,1144
100109e4:	001b2ac0 	call	1001b2ac <__sprint_r>
100109e8:	103a571e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
100109ec:	d8c12017 	ldw	r3,1152(sp)
100109f0:	d8811f17 	ldw	r2,1148(sp)
100109f4:	da000404 	addi	r8,sp,16
100109f8:	db013317 	ldw	r12,1228(sp)
100109fc:	dac13117 	ldw	r11,1220(sp)
10010a00:	10800044 	addi	r2,r2,1
10010a04:	60c7883a 	add	r3,r12,r3
10010a08:	42c00015 	stw	r11,0(r8)
10010a0c:	43000115 	stw	r12,4(r8)
10010a10:	d8c12015 	stw	r3,1152(sp)
10010a14:	d8811f15 	stw	r2,1148(sp)
10010a18:	010001c4 	movi	r4,7
10010a1c:	20bb590e 	bge	r4,r2,1000f784 <__alt_data_end+0xf000f784>
10010a20:	003d7e06 	br	1001001c <__alt_data_end+0xf001001c>
10010a24:	010400b4 	movhi	r4,4098
10010a28:	21145184 	addi	r4,r4,20806
10010a2c:	d9013615 	stw	r4,1240(sp)
10010a30:	003af606 	br	1000f60c <__alt_data_end+0xf000f60c>
10010a34:	d8812604 	addi	r2,sp,1176
10010a38:	d8800115 	stw	r2,4(sp)
10010a3c:	d9413717 	ldw	r5,1244(sp)
10010a40:	d8812504 	addi	r2,sp,1172
10010a44:	d8800215 	stw	r2,8(sp)
10010a48:	d8812104 	addi	r2,sp,1156
10010a4c:	da400015 	stw	r9,0(sp)
10010a50:	d8800315 	stw	r2,12(sp)
10010a54:	b009883a 	mov	r4,r22
10010a58:	900d883a 	mov	r6,r18
10010a5c:	01c000c4 	movi	r7,3
10010a60:	da013f15 	stw	r8,1276(sp)
10010a64:	da413e15 	stw	r9,1272(sp)
10010a68:	0012a7c0 	call	10012a7c <_dtoa_r>
10010a6c:	da413e17 	ldw	r9,1272(sp)
10010a70:	da013f17 	ldw	r8,1276(sp)
10010a74:	d8813115 	stw	r2,1220(sp)
10010a78:	4839883a 	mov	fp,r9
10010a7c:	dac13117 	ldw	r11,1220(sp)
10010a80:	00801184 	movi	r2,70
10010a84:	5f15883a 	add	r10,r11,fp
10010a88:	a8bef01e 	bne	r21,r2,1001064c <__alt_data_end+0xf001064c>
10010a8c:	59000007 	ldb	r4,0(r11)
10010a90:	00800c04 	movi	r2,48
10010a94:	2080e026 	beq	r4,r2,10010e18 <___vfprintf_internal_r+0x1f2c>
10010a98:	d8c12617 	ldw	r3,1176(sp)
10010a9c:	50d5883a 	add	r10,r10,r3
10010aa0:	003eea06 	br	1001064c <__alt_data_end+0xf001064c>
10010aa4:	0025883a 	mov	r18,zero
10010aa8:	003db306 	br	10010178 <__alt_data_end+0xf0010178>
10010aac:	b009883a 	mov	r4,r22
10010ab0:	b80b883a 	mov	r5,r23
10010ab4:	d9811e04 	addi	r6,sp,1144
10010ab8:	001b2ac0 	call	1001b2ac <__sprint_r>
10010abc:	103a221e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010ac0:	d8c12017 	ldw	r3,1152(sp)
10010ac4:	da000404 	addi	r8,sp,16
10010ac8:	003daa06 	br	10010174 <__alt_data_end+0xf0010174>
10010acc:	b009883a 	mov	r4,r22
10010ad0:	b80b883a 	mov	r5,r23
10010ad4:	d9811e04 	addi	r6,sp,1144
10010ad8:	001b2ac0 	call	1001b2ac <__sprint_r>
10010adc:	103a1a1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010ae0:	d8812617 	ldw	r2,1176(sp)
10010ae4:	d8c12017 	ldw	r3,1152(sp)
10010ae8:	da000404 	addi	r8,sp,16
10010aec:	003e2c06 	br	100103a0 <__alt_data_end+0xf00103a0>
10010af0:	030400b4 	movhi	r12,4098
10010af4:	63144d84 	addi	r12,r12,20790
10010af8:	db012c15 	stw	r12,1200(sp)
10010afc:	dac12c17 	ldw	r11,1200(sp)
10010b00:	1c07883a 	add	r3,r3,r16
10010b04:	10800044 	addi	r2,r2,1
10010b08:	42c00015 	stw	r11,0(r8)
10010b0c:	44000115 	stw	r16,4(r8)
10010b10:	d8c12015 	stw	r3,1152(sp)
10010b14:	d8811f15 	stw	r2,1148(sp)
10010b18:	010001c4 	movi	r4,7
10010b1c:	20bfae16 	blt	r4,r2,100109d8 <__alt_data_end+0xf00109d8>
10010b20:	42000204 	addi	r8,r8,8
10010b24:	003fb406 	br	100109f8 <__alt_data_end+0xf00109f8>
10010b28:	030400b4 	movhi	r12,4098
10010b2c:	63145184 	addi	r12,r12,20806
10010b30:	db013615 	stw	r12,1240(sp)
10010b34:	003b3806 	br	1000f818 <__alt_data_end+0xf000f818>
10010b38:	b009883a 	mov	r4,r22
10010b3c:	b80b883a 	mov	r5,r23
10010b40:	d9811e04 	addi	r6,sp,1144
10010b44:	001b2ac0 	call	1001b2ac <__sprint_r>
10010b48:	1039ff1e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010b4c:	d8812617 	ldw	r2,1176(sp)
10010b50:	db013317 	ldw	r12,1228(sp)
10010b54:	d8c12017 	ldw	r3,1152(sp)
10010b58:	da000404 	addi	r8,sp,16
10010b5c:	6085c83a 	sub	r2,r12,r2
10010b60:	003e2006 	br	100103e4 <__alt_data_end+0xf00103e4>
10010b64:	0021883a 	mov	r16,zero
10010b68:	003e1f06 	br	100103e8 <__alt_data_end+0xf00103e8>
10010b6c:	00800184 	movi	r2,6
10010b70:	1240012e 	bgeu	r2,r9,10010b78 <___vfprintf_internal_r+0x1c8c>
10010b74:	1013883a 	mov	r9,r2
10010b78:	4825883a 	mov	r18,r9
10010b7c:	4805883a 	mov	r2,r9
10010b80:	48009e16 	blt	r9,zero,10010dfc <___vfprintf_internal_r+0x1f10>
10010b84:	d8812b15 	stw	r2,1196(sp)
10010b88:	008400b4 	movhi	r2,4098
10010b8c:	10944304 	addi	r2,r2,20748
10010b90:	d8813115 	stw	r2,1220(sp)
10010b94:	dcc12d15 	stw	r19,1204(sp)
10010b98:	d8013215 	stw	zero,1224(sp)
10010b9c:	d8013415 	stw	zero,1232(sp)
10010ba0:	0005883a 	mov	r2,zero
10010ba4:	003a6c06 	br	1000f558 <__alt_data_end+0xf000f558>
10010ba8:	008400b4 	movhi	r2,4098
10010bac:	10943804 	addi	r2,r2,20704
10010bb0:	d8813115 	stw	r2,1220(sp)
10010bb4:	003f4c06 	br	100108e8 <__alt_data_end+0xf00108e8>
10010bb8:	00c00b44 	movi	r3,45
10010bbc:	d8812b15 	stw	r2,1196(sp)
10010bc0:	dc412d17 	ldw	r17,1204(sp)
10010bc4:	d8c12785 	stb	r3,1182(sp)
10010bc8:	dcc12d15 	stw	r19,1204(sp)
10010bcc:	d8013215 	stw	zero,1224(sp)
10010bd0:	00800b44 	movi	r2,45
10010bd4:	003a5d06 	br	1000f54c <__alt_data_end+0xf000f54c>
10010bd8:	d8c12617 	ldw	r3,1176(sp)
10010bdc:	00bfff44 	movi	r2,-3
10010be0:	18800d16 	blt	r3,r2,10010c18 <___vfprintf_internal_r+0x1d2c>
10010be4:	48c00c16 	blt	r9,r3,10010c18 <___vfprintf_internal_r+0x1d2c>
10010be8:	d8c13415 	stw	r3,1232(sp)
10010bec:	040019c4 	movi	r16,103
10010bf0:	003eb506 	br	100106c8 <__alt_data_end+0xf00106c8>
10010bf4:	05400b44 	movi	r21,45
10010bf8:	dd412785 	stb	r21,1182(sp)
10010bfc:	003a0f06 	br	1000f43c <__alt_data_end+0xf000f43c>
10010c00:	010400b4 	movhi	r4,4098
10010c04:	21144d84 	addi	r4,r4,20790
10010c08:	d9012c15 	stw	r4,1200(sp)
10010c0c:	003cb106 	br	1000fed4 <__alt_data_end+0xf000fed4>
10010c10:	5005883a 	mov	r2,r10
10010c14:	003ea106 	br	1001069c <__alt_data_end+0xf001069c>
10010c18:	843fff84 	addi	r16,r16,-2
10010c1c:	1f3fffc4 	addi	fp,r3,-1
10010c20:	df012615 	stw	fp,1176(sp)
10010c24:	dc0122c5 	stb	r16,1163(sp)
10010c28:	e0009516 	blt	fp,zero,10010e80 <___vfprintf_internal_r+0x1f94>
10010c2c:	00800ac4 	movi	r2,43
10010c30:	d8812305 	stb	r2,1164(sp)
10010c34:	00800244 	movi	r2,9
10010c38:	1700690e 	bge	r2,fp,10010de0 <___vfprintf_internal_r+0x1ef4>
10010c3c:	dd4122c4 	addi	r21,sp,1163
10010c40:	dc012c15 	stw	r16,1200(sp)
10010c44:	8825883a 	mov	r18,r17
10010c48:	a821883a 	mov	r16,r21
10010c4c:	4023883a 	mov	r17,r8
10010c50:	e009883a 	mov	r4,fp
10010c54:	01400284 	movi	r5,10
10010c58:	000c6840 	call	1000c684 <__modsi3>
10010c5c:	10800c04 	addi	r2,r2,48
10010c60:	843fffc4 	addi	r16,r16,-1
10010c64:	e009883a 	mov	r4,fp
10010c68:	01400284 	movi	r5,10
10010c6c:	80800005 	stb	r2,0(r16)
10010c70:	000c6300 	call	1000c630 <__divsi3>
10010c74:	1039883a 	mov	fp,r2
10010c78:	00800244 	movi	r2,9
10010c7c:	173ff416 	blt	r2,fp,10010c50 <__alt_data_end+0xf0010c50>
10010c80:	8811883a 	mov	r8,r17
10010c84:	e0800c04 	addi	r2,fp,48
10010c88:	9023883a 	mov	r17,r18
10010c8c:	8025883a 	mov	r18,r16
10010c90:	913fffc4 	addi	r4,r18,-1
10010c94:	90bfffc5 	stb	r2,-1(r18)
10010c98:	dc012c17 	ldw	r16,1200(sp)
10010c9c:	25408e2e 	bgeu	r4,r21,10010ed8 <___vfprintf_internal_r+0x1fec>
10010ca0:	d9412384 	addi	r5,sp,1166
10010ca4:	2c8bc83a 	sub	r5,r5,r18
10010ca8:	d8c12344 	addi	r3,sp,1165
10010cac:	a94b883a 	add	r5,r21,r5
10010cb0:	00000106 	br	10010cb8 <___vfprintf_internal_r+0x1dcc>
10010cb4:	20800003 	ldbu	r2,0(r4)
10010cb8:	18800005 	stb	r2,0(r3)
10010cbc:	18c00044 	addi	r3,r3,1
10010cc0:	21000044 	addi	r4,r4,1
10010cc4:	197ffb1e 	bne	r3,r5,10010cb4 <__alt_data_end+0xf0010cb4>
10010cc8:	d8812304 	addi	r2,sp,1164
10010ccc:	1485c83a 	sub	r2,r2,r18
10010cd0:	d8c12344 	addi	r3,sp,1165
10010cd4:	1885883a 	add	r2,r3,r2
10010cd8:	dac13317 	ldw	r11,1228(sp)
10010cdc:	156bc83a 	sub	r21,r2,r21
10010ce0:	dd413a15 	stw	r21,1256(sp)
10010ce4:	00800044 	movi	r2,1
10010ce8:	5d65883a 	add	r18,r11,r21
10010cec:	12c0770e 	bge	r2,r11,10010ecc <___vfprintf_internal_r+0x1fe0>
10010cf0:	94800044 	addi	r18,r18,1
10010cf4:	9005883a 	mov	r2,r18
10010cf8:	90007216 	blt	r18,zero,10010ec4 <___vfprintf_internal_r+0x1fd8>
10010cfc:	d8013415 	stw	zero,1232(sp)
10010d00:	003e7906 	br	100106e8 <__alt_data_end+0xf00106e8>
10010d04:	da412b15 	stw	r9,1196(sp)
10010d08:	dd412783 	ldbu	r21,1182(sp)
10010d0c:	4825883a 	mov	r18,r9
10010d10:	dcc12d15 	stw	r19,1204(sp)
10010d14:	d8013215 	stw	zero,1224(sp)
10010d18:	d8013415 	stw	zero,1232(sp)
10010d1c:	003a0706 	br	1000f53c <__alt_data_end+0xf000f53c>
10010d20:	b009883a 	mov	r4,r22
10010d24:	b80b883a 	mov	r5,r23
10010d28:	d9811e04 	addi	r6,sp,1144
10010d2c:	001b2ac0 	call	1001b2ac <__sprint_r>
10010d30:	1039851e 	bne	r2,zero,1000f348 <__alt_data_end+0xf000f348>
10010d34:	dc012617 	ldw	r16,1176(sp)
10010d38:	d8c12017 	ldw	r3,1152(sp)
10010d3c:	d8811f17 	ldw	r2,1148(sp)
10010d40:	da000404 	addi	r8,sp,16
10010d44:	003ec706 	br	10010864 <__alt_data_end+0xf0010864>
10010d48:	483e1a1e 	bne	r9,zero,100105b4 <__alt_data_end+0xf00105b4>
10010d4c:	9013883a 	mov	r9,r18
10010d50:	003e1806 	br	100105b4 <__alt_data_end+0xf00105b4>
10010d54:	00c00b44 	movi	r3,45
10010d58:	64a0003c 	xorhi	r18,r12,32768
10010d5c:	d8c12b05 	stb	r3,1196(sp)
10010d60:	003e1a06 	br	100105cc <__alt_data_end+0xf00105cc>
10010d64:	4f000044 	addi	fp,r9,1
10010d68:	003e1f06 	br	100105e8 <__alt_data_end+0xf00105e8>
10010d6c:	02400184 	movi	r9,6
10010d70:	003e1006 	br	100105b4 <__alt_data_end+0xf00105b4>
10010d74:	d8c13417 	ldw	r3,1232(sp)
10010d78:	00c04b0e 	bge	zero,r3,10010ea8 <___vfprintf_internal_r+0x1fbc>
10010d7c:	04800044 	movi	r18,1
10010d80:	dac13317 	ldw	r11,1228(sp)
10010d84:	92e5883a 	add	r18,r18,r11
10010d88:	9005883a 	mov	r2,r18
10010d8c:	903e560e 	bge	r18,zero,100106e8 <__alt_data_end+0xf00106e8>
10010d90:	0005883a 	mov	r2,zero
10010d94:	003e5406 	br	100106e8 <__alt_data_end+0xf00106e8>
10010d98:	d8c12617 	ldw	r3,1176(sp)
10010d9c:	d8c13415 	stw	r3,1232(sp)
10010da0:	00c03b0e 	bge	zero,r3,10010e90 <___vfprintf_internal_r+0x1fa4>
10010da4:	4800081e 	bne	r9,zero,10010dc8 <___vfprintf_internal_r+0x1edc>
10010da8:	8c40004c 	andi	r17,r17,1
10010dac:	8800061e 	bne	r17,zero,10010dc8 <___vfprintf_internal_r+0x1edc>
10010db0:	1805883a 	mov	r2,r3
10010db4:	183e4b0e 	bge	r3,zero,100106e4 <__alt_data_end+0xf00106e4>
10010db8:	0005883a 	mov	r2,zero
10010dbc:	003e4906 	br	100106e4 <__alt_data_end+0xf00106e4>
10010dc0:	d8812117 	ldw	r2,1156(sp)
10010dc4:	003e3506 	br	1001069c <__alt_data_end+0xf001069c>
10010dc8:	dac13417 	ldw	r11,1232(sp)
10010dcc:	4a400044 	addi	r9,r9,1
10010dd0:	5a65883a 	add	r18,r11,r9
10010dd4:	9005883a 	mov	r2,r18
10010dd8:	903e430e 	bge	r18,zero,100106e8 <__alt_data_end+0xf00106e8>
10010ddc:	003fec06 	br	10010d90 <__alt_data_end+0xf0010d90>
10010de0:	00800c04 	movi	r2,48
10010de4:	e0c00c04 	addi	r3,fp,48
10010de8:	d8812345 	stb	r2,1165(sp)
10010dec:	d8c12385 	stb	r3,1166(sp)
10010df0:	d88123c4 	addi	r2,sp,1167
10010df4:	dd4122c4 	addi	r21,sp,1163
10010df8:	003fb706 	br	10010cd8 <__alt_data_end+0xf0010cd8>
10010dfc:	0005883a 	mov	r2,zero
10010e00:	003f6006 	br	10010b84 <__alt_data_end+0xf0010b84>
10010e04:	db013417 	ldw	r12,1232(sp)
10010e08:	64800044 	addi	r18,r12,1
10010e0c:	9005883a 	mov	r2,r18
10010e10:	903e350e 	bge	r18,zero,100106e8 <__alt_data_end+0xf00106e8>
10010e14:	003fde06 	br	10010d90 <__alt_data_end+0xf0010d90>
10010e18:	d9013717 	ldw	r4,1244(sp)
10010e1c:	900b883a 	mov	r5,r18
10010e20:	000d883a 	mov	r6,zero
10010e24:	000f883a 	mov	r7,zero
10010e28:	da013f15 	stw	r8,1276(sp)
10010e2c:	da413e15 	stw	r9,1272(sp)
10010e30:	da813d15 	stw	r10,1268(sp)
10010e34:	001fbe00 	call	1001fbe0 <__eqdf2>
10010e38:	da013f17 	ldw	r8,1276(sp)
10010e3c:	da413e17 	ldw	r9,1272(sp)
10010e40:	da813d17 	ldw	r10,1268(sp)
10010e44:	103f1426 	beq	r2,zero,10010a98 <__alt_data_end+0xf0010a98>
10010e48:	00800044 	movi	r2,1
10010e4c:	1707c83a 	sub	r3,r2,fp
10010e50:	d8c12615 	stw	r3,1176(sp)
10010e54:	003f1106 	br	10010a9c <__alt_data_end+0xf0010a9c>
10010e58:	dac12d17 	ldw	r11,1204(sp)
10010e5c:	5a400017 	ldw	r9,0(r11)
10010e60:	5ac00104 	addi	r11,r11,4
10010e64:	dac12d15 	stw	r11,1204(sp)
10010e68:	483ec60e 	bge	r9,zero,10010984 <__alt_data_end+0xf0010984>
10010e6c:	027fffc4 	movi	r9,-1
10010e70:	1c000047 	ldb	r16,1(r3)
10010e74:	00388406 	br	1000f088 <__alt_data_end+0xf000f088>
10010e78:	043fffc4 	movi	r16,-1
10010e7c:	00391006 	br	1000f2c0 <__alt_data_end+0xf000f2c0>
10010e80:	00800b44 	movi	r2,45
10010e84:	0739c83a 	sub	fp,zero,fp
10010e88:	d8812305 	stb	r2,1164(sp)
10010e8c:	003f6906 	br	10010c34 <__alt_data_end+0xf0010c34>
10010e90:	4800081e 	bne	r9,zero,10010eb4 <___vfprintf_internal_r+0x1fc8>
10010e94:	8c40004c 	andi	r17,r17,1
10010e98:	8800061e 	bne	r17,zero,10010eb4 <___vfprintf_internal_r+0x1fc8>
10010e9c:	00800044 	movi	r2,1
10010ea0:	1025883a 	mov	r18,r2
10010ea4:	003e1006 	br	100106e8 <__alt_data_end+0xf00106e8>
10010ea8:	04800084 	movi	r18,2
10010eac:	90e5c83a 	sub	r18,r18,r3
10010eb0:	003fb306 	br	10010d80 <__alt_data_end+0xf0010d80>
10010eb4:	4c800084 	addi	r18,r9,2
10010eb8:	9005883a 	mov	r2,r18
10010ebc:	903e0a0e 	bge	r18,zero,100106e8 <__alt_data_end+0xf00106e8>
10010ec0:	003fb306 	br	10010d90 <__alt_data_end+0xf0010d90>
10010ec4:	0005883a 	mov	r2,zero
10010ec8:	003f8c06 	br	10010cfc <__alt_data_end+0xf0010cfc>
10010ecc:	88a2703a 	and	r17,r17,r2
10010ed0:	883f8826 	beq	r17,zero,10010cf4 <__alt_data_end+0xf0010cf4>
10010ed4:	003f8606 	br	10010cf0 <__alt_data_end+0xf0010cf0>
10010ed8:	d8812344 	addi	r2,sp,1165
10010edc:	003f7e06 	br	10010cd8 <__alt_data_end+0xf0010cd8>
10010ee0:	d8c12617 	ldw	r3,1176(sp)
10010ee4:	003f4d06 	br	10010c1c <__alt_data_end+0xf0010c1c>

10010ee8 <__vfprintf_internal>:
10010ee8:	2007883a 	mov	r3,r4
10010eec:	010400b4 	movhi	r4,4098
10010ef0:	211d1004 	addi	r4,r4,29760
10010ef4:	21000017 	ldw	r4,0(r4)
10010ef8:	2805883a 	mov	r2,r5
10010efc:	300f883a 	mov	r7,r6
10010f00:	180b883a 	mov	r5,r3
10010f04:	100d883a 	mov	r6,r2
10010f08:	000eeec1 	jmpi	1000eeec <___vfprintf_internal_r>

10010f0c <__svfscanf_r>:
10010f0c:	deff4b04 	addi	sp,sp,-724
10010f10:	df00b315 	stw	fp,716(sp)
10010f14:	dd80b115 	stw	r22,708(sp)
10010f18:	dc40ac15 	stw	r17,688(sp)
10010f1c:	2839883a 	mov	fp,r5
10010f20:	dfc0b415 	stw	ra,720(sp)
10010f24:	ddc0b215 	stw	r23,712(sp)
10010f28:	dd40b015 	stw	r21,704(sp)
10010f2c:	dd00af15 	stw	r20,700(sp)
10010f30:	dcc0ae15 	stw	r19,696(sp)
10010f34:	dc80ad15 	stw	r18,692(sp)
10010f38:	dc00ab15 	stw	r16,684(sp)
10010f3c:	202d883a 	mov	r22,r4
10010f40:	3023883a 	mov	r17,r6
10010f44:	d9c09c15 	stw	r7,624(sp)
10010f48:	001475c0 	call	1001475c <__sfp_lock_acquire>
10010f4c:	e080030b 	ldhu	r2,12(fp)
10010f50:	10c8000c 	andi	r3,r2,8192
10010f54:	1800061e 	bne	r3,zero,10010f70 <__svfscanf_r+0x64>
10010f58:	e1001917 	ldw	r4,100(fp)
10010f5c:	00f7ffc4 	movi	r3,-8193
10010f60:	10880014 	ori	r2,r2,8192
10010f64:	20c6703a 	and	r3,r4,r3
10010f68:	e080030d 	sth	r2,12(fp)
10010f6c:	e0c01915 	stw	r3,100(fp)
10010f70:	88800007 	ldb	r2,0(r17)
10010f74:	0029883a 	mov	r20,zero
10010f78:	054400b4 	movhi	r21,4098
10010f7c:	d800a015 	stw	zero,640(sp)
10010f80:	d8009e15 	stw	zero,632(sp)
10010f84:	d8009f15 	stw	zero,636(sp)
10010f88:	d8809b15 	stw	r2,620(sp)
10010f8c:	ad5d0e04 	addi	r21,r21,29752
10010f90:	a027883a 	mov	r19,r20
10010f94:	e02f883a 	mov	r23,fp
10010f98:	8c800044 	addi	r18,r17,1
10010f9c:	10001e26 	beq	r2,zero,10011018 <__svfscanf_r+0x10c>
10010fa0:	a9000017 	ldw	r4,0(r21)
10010fa4:	2087883a 	add	r3,r4,r2
10010fa8:	18c00043 	ldbu	r3,1(r3)
10010fac:	18c0020c 	andi	r3,r3,8
10010fb0:	18001c26 	beq	r3,zero,10011024 <__svfscanf_r+0x118>
10010fb4:	b8800117 	ldw	r2,4(r23)
10010fb8:	00800e0e 	bge	zero,r2,10010ff4 <__svfscanf_r+0xe8>
10010fbc:	b8c00017 	ldw	r3,0(r23)
10010fc0:	a9000017 	ldw	r4,0(r21)
10010fc4:	18800003 	ldbu	r2,0(r3)
10010fc8:	2085883a 	add	r2,r4,r2
10010fcc:	10800043 	ldbu	r2,1(r2)
10010fd0:	1080020c 	andi	r2,r2,8
10010fd4:	10000b26 	beq	r2,zero,10011004 <__svfscanf_r+0xf8>
10010fd8:	b8800117 	ldw	r2,4(r23)
10010fdc:	18c00044 	addi	r3,r3,1
10010fe0:	b8c00015 	stw	r3,0(r23)
10010fe4:	10bfffc4 	addi	r2,r2,-1
10010fe8:	b8800115 	stw	r2,4(r23)
10010fec:	9cc00044 	addi	r19,r19,1
10010ff0:	00bff216 	blt	zero,r2,10010fbc <__alt_data_end+0xf0010fbc>
10010ff4:	b009883a 	mov	r4,r22
10010ff8:	b80b883a 	mov	r5,r23
10010ffc:	001787c0 	call	1001787c <__srefill_r>
10011000:	103fee26 	beq	r2,zero,10010fbc <__alt_data_end+0xf0010fbc>
10011004:	9023883a 	mov	r17,r18
10011008:	88800007 	ldb	r2,0(r17)
1001100c:	8c800044 	addi	r18,r17,1
10011010:	d8809b15 	stw	r2,620(sp)
10011014:	103fe21e 	bne	r2,zero,10010fa0 <__alt_data_end+0xf0010fa0>
10011018:	00147600 	call	10014760 <__sfp_lock_release>
1001101c:	d8809f17 	ldw	r2,636(sp)
10011020:	00021906 	br	10011888 <__svfscanf_r+0x97c>
10011024:	00c00944 	movi	r3,37
10011028:	10c0881e 	bne	r2,r3,1001124c <__svfscanf_r+0x340>
1001102c:	88c00043 	ldbu	r3,1(r17)
10011030:	0021883a 	mov	r16,zero
10011034:	0023883a 	mov	r17,zero
10011038:	01801e04 	movi	r6,120
1001103c:	01c01b04 	movi	r7,108
10011040:	18803fcc 	andi	r2,r3,255
10011044:	91400044 	addi	r5,r18,1
10011048:	3081ef36 	bltu	r6,r2,10011808 <__svfscanf_r+0x8fc>
1001104c:	100490ba 	slli	r2,r2,2
10011050:	02040074 	movhi	r8,4097
10011054:	42041904 	addi	r8,r8,4196
10011058:	1205883a 	add	r2,r2,r8
1001105c:	10800017 	ldw	r2,0(r2)
10011060:	1000683a 	jmp	r2
10011064:	10011880 	call	11001188 <_gp+0xfd1e20>
10011068:	10011808 	cmpgei	zero,r2,1120
1001106c:	10011808 	cmpgei	zero,r2,1120
10011070:	10011808 	cmpgei	zero,r2,1120
10011074:	10011808 	cmpgei	zero,r2,1120
10011078:	10011808 	cmpgei	zero,r2,1120
1001107c:	10011808 	cmpgei	zero,r2,1120
10011080:	10011808 	cmpgei	zero,r2,1120
10011084:	10011808 	cmpgei	zero,r2,1120
10011088:	10011808 	cmpgei	zero,r2,1120
1001108c:	10011808 	cmpgei	zero,r2,1120
10011090:	10011808 	cmpgei	zero,r2,1120
10011094:	10011808 	cmpgei	zero,r2,1120
10011098:	10011808 	cmpgei	zero,r2,1120
1001109c:	10011808 	cmpgei	zero,r2,1120
100110a0:	10011808 	cmpgei	zero,r2,1120
100110a4:	10011808 	cmpgei	zero,r2,1120
100110a8:	10011808 	cmpgei	zero,r2,1120
100110ac:	10011808 	cmpgei	zero,r2,1120
100110b0:	10011808 	cmpgei	zero,r2,1120
100110b4:	10011808 	cmpgei	zero,r2,1120
100110b8:	10011808 	cmpgei	zero,r2,1120
100110bc:	10011808 	cmpgei	zero,r2,1120
100110c0:	10011808 	cmpgei	zero,r2,1120
100110c4:	10011808 	cmpgei	zero,r2,1120
100110c8:	10011808 	cmpgei	zero,r2,1120
100110cc:	10011808 	cmpgei	zero,r2,1120
100110d0:	10011808 	cmpgei	zero,r2,1120
100110d4:	10011808 	cmpgei	zero,r2,1120
100110d8:	10011808 	cmpgei	zero,r2,1120
100110dc:	10011808 	cmpgei	zero,r2,1120
100110e0:	10011808 	cmpgei	zero,r2,1120
100110e4:	10011808 	cmpgei	zero,r2,1120
100110e8:	10011808 	cmpgei	zero,r2,1120
100110ec:	10011808 	cmpgei	zero,r2,1120
100110f0:	10011808 	cmpgei	zero,r2,1120
100110f4:	10011808 	cmpgei	zero,r2,1120
100110f8:	10011248 	cmpgei	zero,r2,1097
100110fc:	10011808 	cmpgei	zero,r2,1120
10011100:	10011808 	cmpgei	zero,r2,1120
10011104:	10011808 	cmpgei	zero,r2,1120
10011108:	10011808 	cmpgei	zero,r2,1120
1001110c:	100117f0 	cmpltui	zero,r2,1119
10011110:	10011808 	cmpgei	zero,r2,1120
10011114:	10011808 	cmpgei	zero,r2,1120
10011118:	10011808 	cmpgei	zero,r2,1120
1001111c:	10011808 	cmpgei	zero,r2,1120
10011120:	10011808 	cmpgei	zero,r2,1120
10011124:	10011900 	call	11001190 <_gp+0xfd1e28>
10011128:	10011900 	call	11001190 <_gp+0xfd1e28>
1001112c:	10011900 	call	11001190 <_gp+0xfd1e28>
10011130:	10011900 	call	11001190 <_gp+0xfd1e28>
10011134:	10011900 	call	11001190 <_gp+0xfd1e28>
10011138:	10011900 	call	11001190 <_gp+0xfd1e28>
1001113c:	10011900 	call	11001190 <_gp+0xfd1e28>
10011140:	10011900 	call	11001190 <_gp+0xfd1e28>
10011144:	10011900 	call	11001190 <_gp+0xfd1e28>
10011148:	10011900 	call	11001190 <_gp+0xfd1e28>
1001114c:	10011808 	cmpgei	zero,r2,1120
10011150:	10011808 	cmpgei	zero,r2,1120
10011154:	10011808 	cmpgei	zero,r2,1120
10011158:	10011808 	cmpgei	zero,r2,1120
1001115c:	10011808 	cmpgei	zero,r2,1120
10011160:	10011808 	cmpgei	zero,r2,1120
10011164:	10011808 	cmpgei	zero,r2,1120
10011168:	10011808 	cmpgei	zero,r2,1120
1001116c:	10011808 	cmpgei	zero,r2,1120
10011170:	10011808 	cmpgei	zero,r2,1120
10011174:	100118d8 	cmpnei	zero,r2,1123
10011178:	100118c8 	cmpgei	zero,r2,1123
1001117c:	10011808 	cmpgei	zero,r2,1120
10011180:	100118c8 	cmpgei	zero,r2,1123
10011184:	10011808 	cmpgei	zero,r2,1120
10011188:	10011808 	cmpgei	zero,r2,1120
1001118c:	10011808 	cmpgei	zero,r2,1120
10011190:	10011808 	cmpgei	zero,r2,1120
10011194:	100118b8 	rdprs	zero,r2,1122
10011198:	10011808 	cmpgei	zero,r2,1120
1001119c:	10011808 	cmpgei	zero,r2,1120
100111a0:	10011a44 	addi	zero,r2,1129
100111a4:	10011808 	cmpgei	zero,r2,1120
100111a8:	10011808 	cmpgei	zero,r2,1120
100111ac:	10011808 	cmpgei	zero,r2,1120
100111b0:	10011808 	cmpgei	zero,r2,1120
100111b4:	10011808 	cmpgei	zero,r2,1120
100111b8:	10011808 	cmpgei	zero,r2,1120
100111bc:	10011808 	cmpgei	zero,r2,1120
100111c0:	10011808 	cmpgei	zero,r2,1120
100111c4:	10011a38 	rdprs	zero,r2,1128
100111c8:	10011808 	cmpgei	zero,r2,1120
100111cc:	10011808 	cmpgei	zero,r2,1120
100111d0:	10011a1c 	xori	zero,r2,1128
100111d4:	10011808 	cmpgei	zero,r2,1120
100111d8:	10011808 	cmpgei	zero,r2,1120
100111dc:	10011808 	cmpgei	zero,r2,1120
100111e0:	10011808 	cmpgei	zero,r2,1120
100111e4:	10011808 	cmpgei	zero,r2,1120
100111e8:	10011808 	cmpgei	zero,r2,1120
100111ec:	10011808 	cmpgei	zero,r2,1120
100111f0:	10011a08 	cmpgei	zero,r2,1128
100111f4:	10011a00 	call	110011a0 <_gp+0xfd1e38>
100111f8:	100118c8 	cmpgei	zero,r2,1123
100111fc:	100118c8 	cmpgei	zero,r2,1123
10011200:	100118c8 	cmpgei	zero,r2,1123
10011204:	100119f0 	cmpltui	zero,r2,1127
10011208:	10011284 	addi	zero,r2,1098
1001120c:	10011808 	cmpgei	zero,r2,1120
10011210:	10011808 	cmpgei	zero,r2,1120
10011214:	100119d0 	cmplti	zero,r2,1127
10011218:	10011808 	cmpgei	zero,r2,1120
1001121c:	100119a4 	muli	zero,r2,1126
10011220:	10011980 	call	11001198 <_gp+0xfd1e30>
10011224:	10011958 	cmpnei	zero,r2,1125
10011228:	10011808 	cmpgei	zero,r2,1120
1001122c:	10011808 	cmpgei	zero,r2,1120
10011230:	10011948 	cmpgei	zero,r2,1125
10011234:	10011808 	cmpgei	zero,r2,1120
10011238:	10011924 	muli	zero,r2,1124
1001123c:	10011808 	cmpgei	zero,r2,1120
10011240:	10011808 	cmpgei	zero,r2,1120
10011244:	10011a38 	rdprs	zero,r2,1128
10011248:	2825883a 	mov	r18,r5
1001124c:	b8800117 	ldw	r2,4(r23)
10011250:	00844f0e 	bge	zero,r2,10012390 <__svfscanf_r+0x1484>
10011254:	b8800017 	ldw	r2,0(r23)
10011258:	90ffffc3 	ldbu	r3,-1(r18)
1001125c:	11000003 	ldbu	r4,0(r2)
10011260:	20ff6d1e 	bne	r4,r3,10011018 <__alt_data_end+0xf0011018>
10011264:	b8c00117 	ldw	r3,4(r23)
10011268:	10800044 	addi	r2,r2,1
1001126c:	b8800015 	stw	r2,0(r23)
10011270:	18bfffc4 	addi	r2,r3,-1
10011274:	b8800115 	stw	r2,4(r23)
10011278:	9cc00044 	addi	r19,r19,1
1001127c:	9023883a 	mov	r17,r18
10011280:	003f6106 	br	10011008 <__alt_data_end+0xf0011008>
10011284:	02c40074 	movhi	r11,4097
10011288:	5af33604 	addi	r11,r11,-13096
1001128c:	8839883a 	mov	fp,r17
10011290:	2825883a 	mov	r18,r5
10011294:	dac0a015 	stw	r11,640(sp)
10011298:	d8009e15 	stw	zero,632(sp)
1001129c:	050000c4 	movi	r20,3
100112a0:	b8800117 	ldw	r2,4(r23)
100112a4:	00816a0e 	bge	zero,r2,10011850 <__svfscanf_r+0x944>
100112a8:	8080100c 	andi	r2,r16,64
100112ac:	10007a26 	beq	r2,zero,10011498 <__svfscanf_r+0x58c>
100112b0:	00800084 	movi	r2,2
100112b4:	a0820a26 	beq	r20,r2,10011ae0 <__svfscanf_r+0xbd4>
100112b8:	1501e70e 	bge	r2,r20,10011a58 <__svfscanf_r+0xb4c>
100112bc:	008000c4 	movi	r2,3
100112c0:	a0823f26 	beq	r20,r2,10011bc0 <__svfscanf_r+0xcb4>
100112c4:	00800104 	movi	r2,4
100112c8:	a082221e 	bne	r20,r2,10011b54 <__svfscanf_r+0xc48>
100112cc:	88bfffc4 	addi	r2,r17,-1
100112d0:	01005704 	movi	r4,348
100112d4:	20830e2e 	bgeu	r4,r2,10011f10 <__svfscanf_r+0x1004>
100112d8:	8c7fa8c4 	addi	r17,r17,-349
100112dc:	dc40a315 	stw	r17,652(sp)
100112e0:	07005744 	movi	fp,349
100112e4:	8401e014 	ori	r16,r16,1920
100112e8:	0023883a 	mov	r17,zero
100112ec:	d9c00104 	addi	r7,sp,4
100112f0:	9011883a 	mov	r8,r18
100112f4:	d800a415 	stw	zero,656(sp)
100112f8:	8825883a 	mov	r18,r17
100112fc:	d800a215 	stw	zero,648(sp)
10011300:	8023883a 	mov	r17,r16
10011304:	d8009d15 	stw	zero,628(sp)
10011308:	e021883a 	mov	r16,fp
1001130c:	d800a115 	stw	zero,644(sp)
10011310:	0029883a 	mov	r20,zero
10011314:	02c01384 	movi	r11,78
10011318:	00fe1fc4 	movi	r3,-1921
1001131c:	3839883a 	mov	fp,r7
10011320:	b9800017 	ldw	r6,0(r23)
10011324:	31000003 	ldbu	r4,0(r6)
10011328:	20bff544 	addi	r2,r4,-43
1001132c:	10803fcc 	andi	r2,r2,255
10011330:	58807b36 	bltu	r11,r2,10011520 <__svfscanf_r+0x614>
10011334:	100490ba 	slli	r2,r2,2
10011338:	01440074 	movhi	r5,4097
1001133c:	2944d304 	addi	r5,r5,4940
10011340:	1145883a 	add	r2,r2,r5
10011344:	10800017 	ldw	r2,0(r2)
10011348:	1000683a 	jmp	r2
1001134c:	100116b0 	cmpltui	zero,r2,1114
10011350:	10011520 	cmpeqi	zero,r2,1108
10011354:	100116b0 	cmpltui	zero,r2,1114
10011358:	10011694 	ori	zero,r2,1114
1001135c:	10011520 	cmpeqi	zero,r2,1108
10011360:	100117bc 	xorhi	zero,r2,1118
10011364:	100114d8 	cmpnei	zero,r2,1107
10011368:	100114d8 	cmpnei	zero,r2,1107
1001136c:	100114d8 	cmpnei	zero,r2,1107
10011370:	100114d8 	cmpnei	zero,r2,1107
10011374:	100114d8 	cmpnei	zero,r2,1107
10011378:	100114d8 	cmpnei	zero,r2,1107
1001137c:	100114d8 	cmpnei	zero,r2,1107
10011380:	100114d8 	cmpnei	zero,r2,1107
10011384:	100114d8 	cmpnei	zero,r2,1107
10011388:	10011520 	cmpeqi	zero,r2,1108
1001138c:	10011520 	cmpeqi	zero,r2,1108
10011390:	10011520 	cmpeqi	zero,r2,1108
10011394:	10011520 	cmpeqi	zero,r2,1108
10011398:	10011520 	cmpeqi	zero,r2,1108
1001139c:	10011520 	cmpeqi	zero,r2,1108
100113a0:	10011520 	cmpeqi	zero,r2,1108
100113a4:	100117ac 	andhi	zero,r2,1118
100113a8:	10011520 	cmpeqi	zero,r2,1108
100113ac:	10011520 	cmpeqi	zero,r2,1108
100113b0:	10011520 	cmpeqi	zero,r2,1108
100113b4:	10011764 	muli	zero,r2,1117
100113b8:	10011748 	cmpgei	zero,r2,1117
100113bc:	10011520 	cmpeqi	zero,r2,1108
100113c0:	10011520 	cmpeqi	zero,r2,1108
100113c4:	10011710 	cmplti	zero,r2,1116
100113c8:	10011520 	cmpeqi	zero,r2,1108
100113cc:	10011520 	cmpeqi	zero,r2,1108
100113d0:	10011520 	cmpeqi	zero,r2,1108
100113d4:	10011520 	cmpeqi	zero,r2,1108
100113d8:	100116e0 	cmpeqi	zero,r2,1115
100113dc:	10011520 	cmpeqi	zero,r2,1108
100113e0:	10011520 	cmpeqi	zero,r2,1108
100113e4:	10011520 	cmpeqi	zero,r2,1108
100113e8:	10011520 	cmpeqi	zero,r2,1108
100113ec:	10011520 	cmpeqi	zero,r2,1108
100113f0:	100116c4 	addi	zero,r2,1115
100113f4:	10011520 	cmpeqi	zero,r2,1108
100113f8:	10011520 	cmpeqi	zero,r2,1108
100113fc:	10011520 	cmpeqi	zero,r2,1108
10011400:	10011520 	cmpeqi	zero,r2,1108
10011404:	10011678 	rdprs	zero,r2,1113
10011408:	10011520 	cmpeqi	zero,r2,1108
1001140c:	10011520 	cmpeqi	zero,r2,1108
10011410:	10011520 	cmpeqi	zero,r2,1108
10011414:	10011520 	cmpeqi	zero,r2,1108
10011418:	10011520 	cmpeqi	zero,r2,1108
1001141c:	10011520 	cmpeqi	zero,r2,1108
10011420:	10011520 	cmpeqi	zero,r2,1108
10011424:	100117ac 	andhi	zero,r2,1118
10011428:	10011520 	cmpeqi	zero,r2,1108
1001142c:	10011520 	cmpeqi	zero,r2,1108
10011430:	10011520 	cmpeqi	zero,r2,1108
10011434:	10011764 	muli	zero,r2,1117
10011438:	10011748 	cmpgei	zero,r2,1117
1001143c:	10011520 	cmpeqi	zero,r2,1108
10011440:	10011520 	cmpeqi	zero,r2,1108
10011444:	10011710 	cmplti	zero,r2,1116
10011448:	10011520 	cmpeqi	zero,r2,1108
1001144c:	10011520 	cmpeqi	zero,r2,1108
10011450:	10011520 	cmpeqi	zero,r2,1108
10011454:	10011520 	cmpeqi	zero,r2,1108
10011458:	100116e0 	cmpeqi	zero,r2,1115
1001145c:	10011520 	cmpeqi	zero,r2,1108
10011460:	10011520 	cmpeqi	zero,r2,1108
10011464:	10011520 	cmpeqi	zero,r2,1108
10011468:	10011520 	cmpeqi	zero,r2,1108
1001146c:	10011520 	cmpeqi	zero,r2,1108
10011470:	100116c4 	addi	zero,r2,1115
10011474:	10011520 	cmpeqi	zero,r2,1108
10011478:	10011520 	cmpeqi	zero,r2,1108
1001147c:	10011520 	cmpeqi	zero,r2,1108
10011480:	10011520 	cmpeqi	zero,r2,1108
10011484:	10011678 	rdprs	zero,r2,1113
10011488:	b009883a 	mov	r4,r22
1001148c:	b80b883a 	mov	r5,r23
10011490:	001787c0 	call	1001787c <__srefill_r>
10011494:	1000f21e 	bne	r2,zero,10011860 <__svfscanf_r+0x954>
10011498:	a9400017 	ldw	r5,0(r21)
1001149c:	b9000017 	ldw	r4,0(r23)
100114a0:	00000206 	br	100114ac <__svfscanf_r+0x5a0>
100114a4:	21000044 	addi	r4,r4,1
100114a8:	b9000015 	stw	r4,0(r23)
100114ac:	20800003 	ldbu	r2,0(r4)
100114b0:	2885883a 	add	r2,r5,r2
100114b4:	10800043 	ldbu	r2,1(r2)
100114b8:	1080020c 	andi	r2,r2,8
100114bc:	103f7c26 	beq	r2,zero,100112b0 <__alt_data_end+0xf00112b0>
100114c0:	b8800117 	ldw	r2,4(r23)
100114c4:	9cc00044 	addi	r19,r19,1
100114c8:	10bfffc4 	addi	r2,r2,-1
100114cc:	b8800115 	stw	r2,4(r23)
100114d0:	00bff416 	blt	zero,r2,100114a4 <__alt_data_end+0xf00114a4>
100114d4:	003fec06 	br	10011488 <__alt_data_end+0xf0011488>
100114d8:	90803fcc 	andi	r2,r18,255
100114dc:	1080201c 	xori	r2,r2,128
100114e0:	10bfe004 	addi	r2,r2,-128
100114e4:	a085883a 	add	r2,r20,r2
100114e8:	10000d1e 	bne	r2,zero,10011520 <__svfscanf_r+0x614>
100114ec:	00bf9fc4 	movi	r2,-385
100114f0:	88a2703a 	and	r17,r17,r2
100114f4:	e1000005 	stb	r4,0(fp)
100114f8:	e7000044 	addi	fp,fp,1
100114fc:	b8800117 	ldw	r2,4(r23)
10011500:	843fffc4 	addi	r16,r16,-1
10011504:	9cc00044 	addi	r19,r19,1
10011508:	10bfffc4 	addi	r2,r2,-1
1001150c:	b8800115 	stw	r2,4(r23)
10011510:	00826e0e 	bge	zero,r2,10011ecc <__svfscanf_r+0xfc0>
10011514:	31800044 	addi	r6,r6,1
10011518:	b9800015 	stw	r6,0(r23)
1001151c:	803f801e 	bne	r16,zero,10011320 <__alt_data_end+0xf0011320>
10011520:	d8c09d17 	ldw	r3,628(sp)
10011524:	8821883a 	mov	r16,r17
10011528:	e00f883a 	mov	r7,fp
1001152c:	9023883a 	mov	r17,r18
10011530:	4025883a 	mov	r18,r8
10011534:	1802711e 	bne	r3,zero,10011efc <__svfscanf_r+0xff0>
10011538:	a33fffc4 	addi	r12,r20,-1
1001153c:	00800044 	movi	r2,1
10011540:	1304262e 	bgeu	r2,r12,100125dc <__svfscanf_r+0x16d0>
10011544:	88803fcc 	andi	r2,r17,255
10011548:	1080201c 	xori	r2,r2,128
1001154c:	10bfe004 	addi	r2,r2,-128
10011550:	10ffffc4 	addi	r3,r2,-1
10011554:	01000184 	movi	r4,6
10011558:	20c01336 	bltu	r4,r3,100115a8 <__svfscanf_r+0x69c>
1001155c:	00c00084 	movi	r3,2
10011560:	18842a0e 	bge	r3,r2,1001260c <__svfscanf_r+0x1700>
10011564:	050000c4 	movi	r20,3
10011568:	8839883a 	mov	fp,r17
1001156c:	15000e26 	beq	r2,r20,100115a8 <__svfscanf_r+0x69c>
10011570:	3823883a 	mov	r17,r7
10011574:	99e7c83a 	sub	r19,r19,r7
10011578:	8c7fffc4 	addi	r17,r17,-1
1001157c:	89400007 	ldb	r5,0(r17)
10011580:	b009883a 	mov	r4,r22
10011584:	b80d883a 	mov	r6,r23
10011588:	001b00c0 	call	1001b00c <_ungetc_r>
1001158c:	e0bfffc4 	addi	r2,fp,-1
10011590:	10c03fcc 	andi	r3,r2,255
10011594:	8cd3883a 	add	r9,r17,r19
10011598:	1039883a 	mov	fp,r2
1001159c:	a0fff636 	bltu	r20,r3,10011578 <__alt_data_end+0xf0011578>
100115a0:	4827883a 	mov	r19,r9
100115a4:	880f883a 	mov	r7,r17
100115a8:	8080400c 	andi	r2,r16,256
100115ac:	10001626 	beq	r2,zero,10011608 <__svfscanf_r+0x6fc>
100115b0:	8081000c 	andi	r2,r16,1024
100115b4:	1004211e 	bne	r2,zero,1001263c <__svfscanf_r+0x1730>
100115b8:	397fffc7 	ldb	r5,-1(r7)
100115bc:	00801944 	movi	r2,101
100115c0:	3c7fffc4 	addi	r17,r7,-1
100115c4:	9d3fffc4 	addi	r20,r19,-1
100115c8:	28800a26 	beq	r5,r2,100115f4 <__svfscanf_r+0x6e8>
100115cc:	00801144 	movi	r2,69
100115d0:	28800826 	beq	r5,r2,100115f4 <__svfscanf_r+0x6e8>
100115d4:	b009883a 	mov	r4,r22
100115d8:	b80d883a 	mov	r6,r23
100115dc:	d9c0a815 	stw	r7,672(sp)
100115e0:	001b00c0 	call	1001b00c <_ungetc_r>
100115e4:	d9c0a817 	ldw	r7,672(sp)
100115e8:	9d3fff84 	addi	r20,r19,-2
100115ec:	397fff87 	ldb	r5,-2(r7)
100115f0:	3c7fff84 	addi	r17,r7,-2
100115f4:	b009883a 	mov	r4,r22
100115f8:	b80d883a 	mov	r6,r23
100115fc:	001b00c0 	call	1001b00c <_ungetc_r>
10011600:	a027883a 	mov	r19,r20
10011604:	880f883a 	mov	r7,r17
10011608:	8080040c 	andi	r2,r16,16
1001160c:	103e7d1e 	bne	r2,zero,10011004 <__alt_data_end+0xf0011004>
10011610:	38000005 	stb	zero,0(r7)
10011614:	80c1800c 	andi	r3,r16,1536
10011618:	00810004 	movi	r2,1024
1001161c:	18836b26 	beq	r3,r2,100123cc <__svfscanf_r+0x14c0>
10011620:	d8c0a217 	ldw	r3,648(sp)
10011624:	1803221e 	bne	r3,zero,100122b0 <__svfscanf_r+0x13a4>
10011628:	b009883a 	mov	r4,r22
1001162c:	d9400104 	addi	r5,sp,4
10011630:	000d883a 	mov	r6,zero
10011634:	0017d940 	call	10017d94 <_strtod_r>
10011638:	1023883a 	mov	r17,r2
1001163c:	8080004c 	andi	r2,r16,1
10011640:	1002eb1e 	bne	r2,zero,100121f0 <__svfscanf_r+0x12e4>
10011644:	8280008c 	andi	r10,r16,2
10011648:	50038e26 	beq	r10,zero,10012484 <__svfscanf_r+0x1578>
1001164c:	dac09c17 	ldw	r11,624(sp)
10011650:	58800017 	ldw	r2,0(r11)
10011654:	5ac00104 	addi	r11,r11,4
10011658:	dac09c15 	stw	r11,624(sp)
1001165c:	14400015 	stw	r17,0(r2)
10011660:	10c00115 	stw	r3,4(r2)
10011664:	dac09f17 	ldw	r11,636(sp)
10011668:	9023883a 	mov	r17,r18
1001166c:	5ac00044 	addi	r11,r11,1
10011670:	dac09f15 	stw	r11,636(sp)
10011674:	003e6406 	br	10011008 <__alt_data_end+0xf0011008>
10011678:	90803fcc 	andi	r2,r18,255
1001167c:	1080201c 	xori	r2,r2,128
10011680:	10bfe004 	addi	r2,r2,-128
10011684:	014001c4 	movi	r5,7
10011688:	117fa51e 	bne	r2,r5,10011520 <__alt_data_end+0xf0011520>
1001168c:	04800204 	movi	r18,8
10011690:	003f9806 	br	100114f4 <__alt_data_end+0xf00114f4>
10011694:	8880800c 	andi	r2,r17,512
10011698:	103fa126 	beq	r2,zero,10011520 <__alt_data_end+0xf0011520>
1001169c:	d9409d17 	ldw	r5,628(sp)
100116a0:	00bf5fc4 	movi	r2,-641
100116a4:	88a2703a 	and	r17,r17,r2
100116a8:	d940a115 	stw	r5,644(sp)
100116ac:	003f9106 	br	100114f4 <__alt_data_end+0xf00114f4>
100116b0:	8880200c 	andi	r2,r17,128
100116b4:	103f9a26 	beq	r2,zero,10011520 <__alt_data_end+0xf0011520>
100116b8:	00bfdfc4 	movi	r2,-129
100116bc:	88a2703a 	and	r17,r17,r2
100116c0:	003f8c06 	br	100114f4 <__alt_data_end+0xf00114f4>
100116c4:	91403fcc 	andi	r5,r18,255
100116c8:	2940201c 	xori	r5,r5,128
100116cc:	297fe004 	addi	r5,r5,-128
100116d0:	00800184 	movi	r2,6
100116d4:	28bf921e 	bne	r5,r2,10011520 <__alt_data_end+0xf0011520>
100116d8:	048001c4 	movi	r18,7
100116dc:	003f8506 	br	100114f4 <__alt_data_end+0xf00114f4>
100116e0:	a0025c1e 	bne	r20,zero,10012054 <__svfscanf_r+0x1148>
100116e4:	d9409d17 	ldw	r5,628(sp)
100116e8:	2802d226 	beq	r5,zero,10012234 <__svfscanf_r+0x1328>
100116ec:	90803fcc 	andi	r2,r18,255
100116f0:	1080201c 	xori	r2,r2,128
100116f4:	10bfe004 	addi	r2,r2,-128
100116f8:	01400044 	movi	r5,1
100116fc:	11400226 	beq	r2,r5,10011708 <__svfscanf_r+0x7fc>
10011700:	01400104 	movi	r5,4
10011704:	117f861e 	bne	r2,r5,10011520 <__alt_data_end+0xf0011520>
10011708:	94800044 	addi	r18,r18,1
1001170c:	003f7906 	br	100114f4 <__alt_data_end+0xf00114f4>
10011710:	90803fcc 	andi	r2,r18,255
10011714:	1080201c 	xori	r2,r2,128
10011718:	10bfe004 	addi	r2,r2,-128
1001171c:	1002481e 	bne	r2,zero,10012040 <__svfscanf_r+0x1134>
10011720:	d8809d17 	ldw	r2,628(sp)
10011724:	1002bc1e 	bne	r2,zero,10012218 <__svfscanf_r+0x130c>
10011728:	8941c00c 	andi	r5,r17,1792
1001172c:	0081c004 	movi	r2,1792
10011730:	28838f26 	beq	r5,r2,10012570 <__svfscanf_r+0x1664>
10011734:	8821883a 	mov	r16,r17
10011738:	e00f883a 	mov	r7,fp
1001173c:	9023883a 	mov	r17,r18
10011740:	4025883a 	mov	r18,r8
10011744:	003f7c06 	br	10011538 <__alt_data_end+0xf0011538>
10011748:	91403fcc 	andi	r5,r18,255
1001174c:	2940201c 	xori	r5,r5,128
10011750:	297fe004 	addi	r5,r5,-128
10011754:	00800084 	movi	r2,2
10011758:	28bf711e 	bne	r5,r2,10011520 <__alt_data_end+0xf0011520>
1001175c:	048000c4 	movi	r18,3
10011760:	003f6406 	br	100114f4 <__alt_data_end+0xf00114f4>
10011764:	8881400c 	andi	r2,r17,1280
10011768:	01410004 	movi	r5,1024
1001176c:	11400426 	beq	r2,r5,10011780 <__svfscanf_r+0x874>
10011770:	8944703a 	and	r2,r17,r5
10011774:	103f6a26 	beq	r2,zero,10011520 <__alt_data_end+0xf0011520>
10011778:	d8809d17 	ldw	r2,628(sp)
1001177c:	103fed26 	beq	r2,zero,10011734 <__alt_data_end+0xf0011734>
10011780:	8880800c 	andi	r2,r17,512
10011784:	1000051e 	bne	r2,zero,1001179c <__svfscanf_r+0x890>
10011788:	d9409d17 	ldw	r5,628(sp)
1001178c:	d880a117 	ldw	r2,644(sp)
10011790:	df00a415 	stw	fp,656(sp)
10011794:	288bc83a 	sub	r5,r5,r2
10011798:	d940a215 	stw	r5,648(sp)
1001179c:	88e2703a 	and	r17,r17,r3
100117a0:	8c406014 	ori	r17,r17,384
100117a4:	d8009d15 	stw	zero,628(sp)
100117a8:	003f5206 	br	100114f4 <__alt_data_end+0xf00114f4>
100117ac:	00800044 	movi	r2,1
100117b0:	a0bf5b1e 	bne	r20,r2,10011520 <__alt_data_end+0xf0011520>
100117b4:	05000084 	movi	r20,2
100117b8:	003f4e06 	br	100114f4 <__alt_data_end+0xf00114f4>
100117bc:	8880400c 	andi	r2,r17,256
100117c0:	103f4526 	beq	r2,zero,100114d8 <__alt_data_end+0xf00114d8>
100117c4:	00bfdfc4 	movi	r2,-129
100117c8:	88a2703a 	and	r17,r17,r2
100117cc:	d8809d17 	ldw	r2,628(sp)
100117d0:	d900a317 	ldw	r4,652(sp)
100117d4:	10800044 	addi	r2,r2,1
100117d8:	d8809d15 	stw	r2,628(sp)
100117dc:	203f4726 	beq	r4,zero,100114fc <__alt_data_end+0xf00114fc>
100117e0:	213fffc4 	addi	r4,r4,-1
100117e4:	d900a315 	stw	r4,652(sp)
100117e8:	84000044 	addi	r16,r16,1
100117ec:	003f4306 	br	100114fc <__alt_data_end+0xf00114fc>
100117f0:	90c00043 	ldbu	r3,1(r18)
100117f4:	2825883a 	mov	r18,r5
100117f8:	84000414 	ori	r16,r16,16
100117fc:	18803fcc 	andi	r2,r3,255
10011800:	91400044 	addi	r5,r18,1
10011804:	30be112e 	bgeu	r6,r2,1001104c <__alt_data_end+0xf001104c>
10011808:	18c03fcc 	andi	r3,r3,255
1001180c:	18c0201c 	xori	r3,r3,128
10011810:	18ffe004 	addi	r3,r3,-128
10011814:	20c9883a 	add	r4,r4,r3
10011818:	20800043 	ldbu	r2,1(r4)
1001181c:	00c00044 	movi	r3,1
10011820:	2825883a 	mov	r18,r5
10011824:	108000cc 	andi	r2,r2,3
10011828:	10c2ee26 	beq	r2,r3,100123e4 <__svfscanf_r+0x14d8>
1001182c:	00840074 	movhi	r2,4097
10011830:	10b33604 	addi	r2,r2,-13096
10011834:	d880a015 	stw	r2,640(sp)
10011838:	b8800117 	ldw	r2,4(r23)
1001183c:	02000284 	movi	r8,10
10011840:	da009e15 	stw	r8,632(sp)
10011844:	8839883a 	mov	fp,r17
10011848:	050000c4 	movi	r20,3
1001184c:	00be9616 	blt	zero,r2,100112a8 <__alt_data_end+0xf00112a8>
10011850:	b009883a 	mov	r4,r22
10011854:	b80b883a 	mov	r5,r23
10011858:	001787c0 	call	1001787c <__srefill_r>
1001185c:	103e9226 	beq	r2,zero,100112a8 <__alt_data_end+0xf00112a8>
10011860:	00147600 	call	10014760 <__sfp_lock_release>
10011864:	da009f17 	ldw	r8,636(sp)
10011868:	40007926 	beq	r8,zero,10011a50 <__svfscanf_r+0xb44>
1001186c:	b880030b 	ldhu	r2,12(r23)
10011870:	1080100c 	andi	r2,r2,64
10011874:	1000761e 	bne	r2,zero,10011a50 <__svfscanf_r+0xb44>
10011878:	4005883a 	mov	r2,r8
1001187c:	00000206 	br	10011888 <__svfscanf_r+0x97c>
10011880:	00147600 	call	10014760 <__sfp_lock_release>
10011884:	00bfffc4 	movi	r2,-1
10011888:	dfc0b417 	ldw	ra,720(sp)
1001188c:	df00b317 	ldw	fp,716(sp)
10011890:	ddc0b217 	ldw	r23,712(sp)
10011894:	dd80b117 	ldw	r22,708(sp)
10011898:	dd40b017 	ldw	r21,704(sp)
1001189c:	dd00af17 	ldw	r20,700(sp)
100118a0:	dcc0ae17 	ldw	r19,696(sp)
100118a4:	dc80ad17 	ldw	r18,692(sp)
100118a8:	dc40ac17 	ldw	r17,688(sp)
100118ac:	dc00ab17 	ldw	r16,684(sp)
100118b0:	dec0b504 	addi	sp,sp,724
100118b4:	f800283a 	ret
100118b8:	90c00043 	ldbu	r3,1(r18)
100118bc:	84000094 	ori	r16,r16,2
100118c0:	2825883a 	mov	r18,r5
100118c4:	003dde06 	br	10011040 <__alt_data_end+0xf0011040>
100118c8:	2825883a 	mov	r18,r5
100118cc:	8839883a 	mov	fp,r17
100118d0:	05000104 	movi	r20,4
100118d4:	003e7206 	br	100112a0 <__alt_data_end+0xf00112a0>
100118d8:	2825883a 	mov	r18,r5
100118dc:	84000054 	ori	r16,r16,1
100118e0:	02c40074 	movhi	r11,4097
100118e4:	5af33604 	addi	r11,r11,-13096
100118e8:	02000284 	movi	r8,10
100118ec:	8839883a 	mov	fp,r17
100118f0:	dac0a015 	stw	r11,640(sp)
100118f4:	da009e15 	stw	r8,632(sp)
100118f8:	050000c4 	movi	r20,3
100118fc:	003e6806 	br	100112a0 <__alt_data_end+0xf00112a0>
10011900:	18803fcc 	andi	r2,r3,255
10011904:	8c4002a4 	muli	r17,r17,10
10011908:	1080201c 	xori	r2,r2,128
1001190c:	10bfe004 	addi	r2,r2,-128
10011910:	88a3883a 	add	r17,r17,r2
10011914:	90c00043 	ldbu	r3,1(r18)
10011918:	8c7ff404 	addi	r17,r17,-48
1001191c:	2825883a 	mov	r18,r5
10011920:	003dc706 	br	10011040 <__alt_data_end+0xf0011040>
10011924:	02c400b4 	movhi	r11,4098
10011928:	5ae5c204 	addi	r11,r11,-26872
1001192c:	02000284 	movi	r8,10
10011930:	2825883a 	mov	r18,r5
10011934:	8839883a 	mov	fp,r17
10011938:	dac0a015 	stw	r11,640(sp)
1001193c:	da009e15 	stw	r8,632(sp)
10011940:	050000c4 	movi	r20,3
10011944:	003e5606 	br	100112a0 <__alt_data_end+0xf00112a0>
10011948:	2825883a 	mov	r18,r5
1001194c:	8839883a 	mov	fp,r17
10011950:	05000084 	movi	r20,2
10011954:	003e5206 	br	100112a0 <__alt_data_end+0xf00112a0>
10011958:	2825883a 	mov	r18,r5
1001195c:	84008814 	ori	r16,r16,544
10011960:	02c400b4 	movhi	r11,4098
10011964:	5ae5c204 	addi	r11,r11,-26872
10011968:	02000404 	movi	r8,16
1001196c:	8839883a 	mov	fp,r17
10011970:	dac0a015 	stw	r11,640(sp)
10011974:	da009e15 	stw	r8,632(sp)
10011978:	050000c4 	movi	r20,3
1001197c:	003e4806 	br	100112a0 <__alt_data_end+0xf00112a0>
10011980:	2825883a 	mov	r18,r5
10011984:	02c400b4 	movhi	r11,4098
10011988:	5ae5c204 	addi	r11,r11,-26872
1001198c:	02000204 	movi	r8,8
10011990:	8839883a 	mov	fp,r17
10011994:	dac0a015 	stw	r11,640(sp)
10011998:	da009e15 	stw	r8,632(sp)
1001199c:	050000c4 	movi	r20,3
100119a0:	003e3f06 	br	100112a0 <__alt_data_end+0xf00112a0>
100119a4:	8080040c 	andi	r2,r16,16
100119a8:	2825883a 	mov	r18,r5
100119ac:	103d951e 	bne	r2,zero,10011004 <__alt_data_end+0xf0011004>
100119b0:	8080010c 	andi	r2,r16,4
100119b4:	10028d26 	beq	r2,zero,100123ec <__svfscanf_r+0x14e0>
100119b8:	dac09c17 	ldw	r11,624(sp)
100119bc:	58800017 	ldw	r2,0(r11)
100119c0:	5ac00104 	addi	r11,r11,4
100119c4:	dac09c15 	stw	r11,624(sp)
100119c8:	14c0000d 	sth	r19,0(r2)
100119cc:	003d8d06 	br	10011004 <__alt_data_end+0xf0011004>
100119d0:	90c00043 	ldbu	r3,1(r18)
100119d4:	18803fcc 	andi	r2,r3,255
100119d8:	1080201c 	xori	r2,r2,128
100119dc:	10bfe004 	addi	r2,r2,-128
100119e0:	11c27626 	beq	r2,r7,100123bc <__svfscanf_r+0x14b0>
100119e4:	84000054 	ori	r16,r16,1
100119e8:	2825883a 	mov	r18,r5
100119ec:	003d9406 	br	10011040 <__alt_data_end+0xf0011040>
100119f0:	90c00043 	ldbu	r3,1(r18)
100119f4:	84000114 	ori	r16,r16,4
100119f8:	2825883a 	mov	r18,r5
100119fc:	003d9006 	br	10011040 <__alt_data_end+0xf0011040>
10011a00:	2825883a 	mov	r18,r5
10011a04:	003fb606 	br	100118e0 <__alt_data_end+0xf00118e0>
10011a08:	2825883a 	mov	r18,r5
10011a0c:	84001014 	ori	r16,r16,64
10011a10:	8839883a 	mov	fp,r17
10011a14:	0029883a 	mov	r20,zero
10011a18:	003e2106 	br	100112a0 <__alt_data_end+0xf00112a0>
10011a1c:	d9005884 	addi	r4,sp,354
10011a20:	0017aec0 	call	10017aec <__sccl>
10011a24:	1025883a 	mov	r18,r2
10011a28:	84001014 	ori	r16,r16,64
10011a2c:	8839883a 	mov	fp,r17
10011a30:	05000044 	movi	r20,1
10011a34:	003e1a06 	br	100112a0 <__alt_data_end+0xf00112a0>
10011a38:	2825883a 	mov	r18,r5
10011a3c:	84008014 	ori	r16,r16,512
10011a40:	003fc706 	br	10011960 <__alt_data_end+0xf0011960>
10011a44:	2825883a 	mov	r18,r5
10011a48:	84000054 	ori	r16,r16,1
10011a4c:	003fcd06 	br	10011984 <__alt_data_end+0xf0011984>
10011a50:	00bfffc4 	movi	r2,-1
10011a54:	003f8c06 	br	10011888 <__alt_data_end+0xf0011888>
10011a58:	00800044 	movi	r2,1
10011a5c:	a0803d1e 	bne	r20,r2,10011b54 <__svfscanf_r+0xc48>
10011a60:	8800011e 	bne	r17,zero,10011a68 <__svfscanf_r+0xb5c>
10011a64:	073fffc4 	movi	fp,-1
10011a68:	8400040c 	andi	r16,r16,16
10011a6c:	80012a26 	beq	r16,zero,10011f18 <__svfscanf_r+0x100c>
10011a70:	b9000017 	ldw	r4,0(r23)
10011a74:	0021883a 	mov	r16,zero
10011a78:	dc405884 	addi	r17,sp,354
10011a7c:	20800003 	ldbu	r2,0(r4)
10011a80:	8885883a 	add	r2,r17,r2
10011a84:	10800007 	ldb	r2,0(r2)
10011a88:	10001126 	beq	r2,zero,10011ad0 <__svfscanf_r+0xbc4>
10011a8c:	b8800117 	ldw	r2,4(r23)
10011a90:	21000044 	addi	r4,r4,1
10011a94:	84000044 	addi	r16,r16,1
10011a98:	10bfffc4 	addi	r2,r2,-1
10011a9c:	b8800115 	stw	r2,4(r23)
10011aa0:	b9000015 	stw	r4,0(r23)
10011aa4:	e4000b26 	beq	fp,r16,10011ad4 <__svfscanf_r+0xbc8>
10011aa8:	00bff416 	blt	zero,r2,10011a7c <__alt_data_end+0xf0011a7c>
10011aac:	b009883a 	mov	r4,r22
10011ab0:	b80b883a 	mov	r5,r23
10011ab4:	001787c0 	call	1001787c <__srefill_r>
10011ab8:	1000061e 	bne	r2,zero,10011ad4 <__svfscanf_r+0xbc8>
10011abc:	b9000017 	ldw	r4,0(r23)
10011ac0:	20800003 	ldbu	r2,0(r4)
10011ac4:	8885883a 	add	r2,r17,r2
10011ac8:	10800007 	ldb	r2,0(r2)
10011acc:	103fef1e 	bne	r2,zero,10011a8c <__alt_data_end+0xf0011a8c>
10011ad0:	803d5126 	beq	r16,zero,10011018 <__alt_data_end+0xf0011018>
10011ad4:	9c27883a 	add	r19,r19,r16
10011ad8:	9023883a 	mov	r17,r18
10011adc:	003d4a06 	br	10011008 <__alt_data_end+0xf0011008>
10011ae0:	8800011e 	bne	r17,zero,10011ae8 <__svfscanf_r+0xbdc>
10011ae4:	073fffc4 	movi	fp,-1
10011ae8:	8080004c 	andi	r2,r16,1
10011aec:	10016f1e 	bne	r2,zero,100120ac <__svfscanf_r+0x11a0>
10011af0:	8400040c 	andi	r16,r16,16
10011af4:	80012a26 	beq	r16,zero,10011fa0 <__svfscanf_r+0x1094>
10011af8:	a9400017 	ldw	r5,0(r21)
10011afc:	b9000017 	ldw	r4,0(r23)
10011b00:	0021883a 	mov	r16,zero
10011b04:	20800003 	ldbu	r2,0(r4)
10011b08:	2885883a 	add	r2,r5,r2
10011b0c:	10800043 	ldbu	r2,1(r2)
10011b10:	1080020c 	andi	r2,r2,8
10011b14:	103fef1e 	bne	r2,zero,10011ad4 <__alt_data_end+0xf0011ad4>
10011b18:	b8800117 	ldw	r2,4(r23)
10011b1c:	21000044 	addi	r4,r4,1
10011b20:	84000044 	addi	r16,r16,1
10011b24:	10bfffc4 	addi	r2,r2,-1
10011b28:	b8800115 	stw	r2,4(r23)
10011b2c:	b9000015 	stw	r4,0(r23)
10011b30:	e43fe826 	beq	fp,r16,10011ad4 <__alt_data_end+0xf0011ad4>
10011b34:	00bff316 	blt	zero,r2,10011b04 <__alt_data_end+0xf0011b04>
10011b38:	b009883a 	mov	r4,r22
10011b3c:	b80b883a 	mov	r5,r23
10011b40:	001787c0 	call	1001787c <__srefill_r>
10011b44:	103fe31e 	bne	r2,zero,10011ad4 <__alt_data_end+0xf0011ad4>
10011b48:	a9400017 	ldw	r5,0(r21)
10011b4c:	b9000017 	ldw	r4,0(r23)
10011b50:	003fec06 	br	10011b04 <__alt_data_end+0xf0011b04>
10011b54:	8800011e 	bne	r17,zero,10011b5c <__svfscanf_r+0xc50>
10011b58:	07000044 	movi	fp,1
10011b5c:	8080004c 	andi	r2,r16,1
10011b60:	1001701e 	bne	r2,zero,10012124 <__svfscanf_r+0x1218>
10011b64:	8400040c 	andi	r16,r16,16
10011b68:	8001f626 	beq	r16,zero,10012344 <__svfscanf_r+0x1438>
10011b6c:	0021883a 	mov	r16,zero
10011b70:	00000906 	br	10011b98 <__svfscanf_r+0xc8c>
10011b74:	b8c00017 	ldw	r3,0(r23)
10011b78:	b009883a 	mov	r4,r22
10011b7c:	b80b883a 	mov	r5,r23
10011b80:	1887883a 	add	r3,r3,r2
10011b84:	b8c00015 	stw	r3,0(r23)
10011b88:	80a1883a 	add	r16,r16,r2
10011b8c:	e0b9c83a 	sub	fp,fp,r2
10011b90:	001787c0 	call	1001787c <__srefill_r>
10011b94:	1001e81e 	bne	r2,zero,10012338 <__svfscanf_r+0x142c>
10011b98:	b8800117 	ldw	r2,4(r23)
10011b9c:	173ff516 	blt	r2,fp,10011b74 <__alt_data_end+0xf0011b74>
10011ba0:	b9000017 	ldw	r4,0(r23)
10011ba4:	1705c83a 	sub	r2,r2,fp
10011ba8:	e421883a 	add	r16,fp,r16
10011bac:	2707883a 	add	r3,r4,fp
10011bb0:	b8800115 	stw	r2,4(r23)
10011bb4:	b8c00015 	stw	r3,0(r23)
10011bb8:	9c27883a 	add	r19,r19,r16
10011bbc:	003fc606 	br	10011ad8 <__alt_data_end+0xf0011ad8>
10011bc0:	88bfffc4 	addi	r2,r17,-1
10011bc4:	01005704 	movi	r4,348
10011bc8:	2080cf2e 	bgeu	r4,r2,10011f08 <__svfscanf_r+0xffc>
10011bcc:	89ffa8c4 	addi	r7,r17,-349
10011bd0:	07005744 	movi	fp,349
10011bd4:	84436014 	ori	r17,r16,3456
10011bd8:	0021883a 	mov	r16,zero
10011bdc:	9013883a 	mov	r9,r18
10011be0:	8025883a 	mov	r18,r16
10011be4:	dc009e17 	ldw	r16,632(sp)
10011be8:	dd000104 	addi	r20,sp,4
10011bec:	02001344 	movi	r8,77
10011bf0:	02808004 	movi	r10,512
10011bf4:	01bf7fc4 	movi	r6,-513
10011bf8:	00ffdfc4 	movi	r3,-129
10011bfc:	b9000017 	ldw	r4,0(r23)
10011c00:	21400003 	ldbu	r5,0(r4)
10011c04:	28bff544 	addi	r2,r5,-43
10011c08:	10803fcc 	andi	r2,r2,255
10011c0c:	40806336 	bltu	r8,r2,10011d9c <__svfscanf_r+0xe90>
10011c10:	100490ba 	slli	r2,r2,2
10011c14:	02c40074 	movhi	r11,4097
10011c18:	5ac70a04 	addi	r11,r11,7208
10011c1c:	12c5883a 	add	r2,r2,r11
10011c20:	10800017 	ldw	r2,0(r2)
10011c24:	1000683a 	jmp	r2
10011c28:	10011ebc 	xorhi	zero,r2,1146
10011c2c:	10011d9c 	xori	zero,r2,1142
10011c30:	10011ebc 	xorhi	zero,r2,1146
10011c34:	10011d9c 	xori	zero,r2,1142
10011c38:	10011d9c 	xori	zero,r2,1142
10011c3c:	10011e34 	orhi	zero,r2,1144
10011c40:	10011e14 	ori	zero,r2,1144
10011c44:	10011e14 	ori	zero,r2,1144
10011c48:	10011e14 	ori	zero,r2,1144
10011c4c:	10011e14 	ori	zero,r2,1144
10011c50:	10011e14 	ori	zero,r2,1144
10011c54:	10011e14 	ori	zero,r2,1144
10011c58:	10011e14 	ori	zero,r2,1144
10011c5c:	10011df4 	orhi	zero,r2,1143
10011c60:	10011df4 	orhi	zero,r2,1143
10011c64:	10011d9c 	xori	zero,r2,1142
10011c68:	10011d9c 	xori	zero,r2,1142
10011c6c:	10011d9c 	xori	zero,r2,1142
10011c70:	10011d9c 	xori	zero,r2,1142
10011c74:	10011d9c 	xori	zero,r2,1142
10011c78:	10011d9c 	xori	zero,r2,1142
10011c7c:	10011d9c 	xori	zero,r2,1142
10011c80:	10011de0 	cmpeqi	zero,r2,1143
10011c84:	10011de0 	cmpeqi	zero,r2,1143
10011c88:	10011de0 	cmpeqi	zero,r2,1143
10011c8c:	10011de0 	cmpeqi	zero,r2,1143
10011c90:	10011de0 	cmpeqi	zero,r2,1143
10011c94:	10011de0 	cmpeqi	zero,r2,1143
10011c98:	10011d9c 	xori	zero,r2,1142
10011c9c:	10011d9c 	xori	zero,r2,1142
10011ca0:	10011d9c 	xori	zero,r2,1142
10011ca4:	10011d9c 	xori	zero,r2,1142
10011ca8:	10011d9c 	xori	zero,r2,1142
10011cac:	10011d9c 	xori	zero,r2,1142
10011cb0:	10011d9c 	xori	zero,r2,1142
10011cb4:	10011d9c 	xori	zero,r2,1142
10011cb8:	10011d9c 	xori	zero,r2,1142
10011cbc:	10011d9c 	xori	zero,r2,1142
10011cc0:	10011d9c 	xori	zero,r2,1142
10011cc4:	10011d9c 	xori	zero,r2,1142
10011cc8:	10011d9c 	xori	zero,r2,1142
10011ccc:	10011d9c 	xori	zero,r2,1142
10011cd0:	10011d9c 	xori	zero,r2,1142
10011cd4:	10011d9c 	xori	zero,r2,1142
10011cd8:	10011d9c 	xori	zero,r2,1142
10011cdc:	10011d60 	cmpeqi	zero,r2,1141
10011ce0:	10011d9c 	xori	zero,r2,1142
10011ce4:	10011d9c 	xori	zero,r2,1142
10011ce8:	10011d9c 	xori	zero,r2,1142
10011cec:	10011d9c 	xori	zero,r2,1142
10011cf0:	10011d9c 	xori	zero,r2,1142
10011cf4:	10011d9c 	xori	zero,r2,1142
10011cf8:	10011d9c 	xori	zero,r2,1142
10011cfc:	10011d9c 	xori	zero,r2,1142
10011d00:	10011de0 	cmpeqi	zero,r2,1143
10011d04:	10011de0 	cmpeqi	zero,r2,1143
10011d08:	10011de0 	cmpeqi	zero,r2,1143
10011d0c:	10011de0 	cmpeqi	zero,r2,1143
10011d10:	10011de0 	cmpeqi	zero,r2,1143
10011d14:	10011de0 	cmpeqi	zero,r2,1143
10011d18:	10011d9c 	xori	zero,r2,1142
10011d1c:	10011d9c 	xori	zero,r2,1142
10011d20:	10011d9c 	xori	zero,r2,1142
10011d24:	10011d9c 	xori	zero,r2,1142
10011d28:	10011d9c 	xori	zero,r2,1142
10011d2c:	10011d9c 	xori	zero,r2,1142
10011d30:	10011d9c 	xori	zero,r2,1142
10011d34:	10011d9c 	xori	zero,r2,1142
10011d38:	10011d9c 	xori	zero,r2,1142
10011d3c:	10011d9c 	xori	zero,r2,1142
10011d40:	10011d9c 	xori	zero,r2,1142
10011d44:	10011d9c 	xori	zero,r2,1142
10011d48:	10011d9c 	xori	zero,r2,1142
10011d4c:	10011d9c 	xori	zero,r2,1142
10011d50:	10011d9c 	xori	zero,r2,1142
10011d54:	10011d9c 	xori	zero,r2,1142
10011d58:	10011d9c 	xori	zero,r2,1142
10011d5c:	10011d60 	cmpeqi	zero,r2,1141
10011d60:	8881800c 	andi	r2,r17,1536
10011d64:	12800d1e 	bne	r2,r10,10011d9c <__svfscanf_r+0xe90>
10011d68:	89a2703a 	and	r17,r17,r6
10011d6c:	8c414014 	ori	r17,r17,1280
10011d70:	04000404 	movi	r16,16
10011d74:	b8800117 	ldw	r2,4(r23)
10011d78:	a1400005 	stb	r5,0(r20)
10011d7c:	a5000044 	addi	r20,r20,1
10011d80:	10bfffc4 	addi	r2,r2,-1
10011d84:	b8800115 	stw	r2,4(r23)
10011d88:	00803b0e 	bge	zero,r2,10011e78 <__svfscanf_r+0xf6c>
10011d8c:	21000044 	addi	r4,r4,1
10011d90:	b9000015 	stw	r4,0(r23)
10011d94:	e73fffc4 	addi	fp,fp,-1
10011d98:	e03f981e 	bne	fp,zero,10011bfc <__alt_data_end+0xf0011bfc>
10011d9c:	dc009e15 	stw	r16,632(sp)
10011da0:	8880400c 	andi	r2,r17,256
10011da4:	9021883a 	mov	r16,r18
10011da8:	4825883a 	mov	r18,r9
10011dac:	10000426 	beq	r2,zero,10011dc0 <__svfscanf_r+0xeb4>
10011db0:	d8800104 	addi	r2,sp,4
10011db4:	15017b36 	bltu	r2,r20,100123a4 <__svfscanf_r+0x1498>
10011db8:	d8c00104 	addi	r3,sp,4
10011dbc:	1d3c9626 	beq	r3,r20,10011018 <__alt_data_end+0xf0011018>
10011dc0:	8880040c 	andi	r2,r17,16
10011dc4:	1000a726 	beq	r2,zero,10012064 <__svfscanf_r+0x1158>
10011dc8:	dac00104 	addi	r11,sp,4
10011dcc:	a2e9c83a 	sub	r20,r20,r11
10011dd0:	a429883a 	add	r20,r20,r16
10011dd4:	9d27883a 	add	r19,r19,r20
10011dd8:	9023883a 	mov	r17,r18
10011ddc:	003c8a06 	br	10011008 <__alt_data_end+0xf0011008>
10011de0:	00800284 	movi	r2,10
10011de4:	143fed0e 	bge	r2,r16,10011d9c <__alt_data_end+0xf0011d9c>
10011de8:	00bd1fc4 	movi	r2,-2945
10011dec:	88a2703a 	and	r17,r17,r2
10011df0:	003fe006 	br	10011d74 <__alt_data_end+0xf0011d74>
10011df4:	02c400b4 	movhi	r11,4098
10011df8:	8421883a 	add	r16,r16,r16
10011dfc:	5ad45784 	addi	r11,r11,20830
10011e00:	5c05883a 	add	r2,r11,r16
10011e04:	1400000f 	ldh	r16,0(r2)
10011e08:	00800204 	movi	r2,8
10011e0c:	143ff616 	blt	r2,r16,10011de8 <__alt_data_end+0xf0011de8>
10011e10:	003fe206 	br	10011d9c <__alt_data_end+0xf0011d9c>
10011e14:	02c400b4 	movhi	r11,4098
10011e18:	8421883a 	add	r16,r16,r16
10011e1c:	5ad45784 	addi	r11,r11,20830
10011e20:	5c05883a 	add	r2,r11,r16
10011e24:	1400000f 	ldh	r16,0(r2)
10011e28:	00bd1fc4 	movi	r2,-2945
10011e2c:	88a2703a 	and	r17,r17,r2
10011e30:	003fd006 	br	10011d74 <__alt_data_end+0xf0011d74>
10011e34:	8882000c 	andi	r2,r17,2048
10011e38:	103fce26 	beq	r2,zero,10011d74 <__alt_data_end+0xf0011d74>
10011e3c:	8000021e 	bne	r16,zero,10011e48 <__svfscanf_r+0xf3c>
10011e40:	8c408014 	ori	r17,r17,512
10011e44:	04000204 	movi	r16,8
10011e48:	8881000c 	andi	r2,r17,1024
10011e4c:	1000ef1e 	bne	r2,zero,1001220c <__svfscanf_r+0x1300>
10011e50:	00bf1fc4 	movi	r2,-897
10011e54:	88a2703a 	and	r17,r17,r2
10011e58:	38000226 	beq	r7,zero,10011e64 <__svfscanf_r+0xf58>
10011e5c:	39ffffc4 	addi	r7,r7,-1
10011e60:	e7000044 	addi	fp,fp,1
10011e64:	b8800117 	ldw	r2,4(r23)
10011e68:	94800044 	addi	r18,r18,1
10011e6c:	10bfffc4 	addi	r2,r2,-1
10011e70:	b8800115 	stw	r2,4(r23)
10011e74:	00bfc516 	blt	zero,r2,10011d8c <__alt_data_end+0xf0011d8c>
10011e78:	b009883a 	mov	r4,r22
10011e7c:	b80b883a 	mov	r5,r23
10011e80:	d8c0aa15 	stw	r3,680(sp)
10011e84:	d980a615 	stw	r6,664(sp)
10011e88:	d9c0a815 	stw	r7,672(sp)
10011e8c:	da00a915 	stw	r8,676(sp)
10011e90:	da40a715 	stw	r9,668(sp)
10011e94:	da80a515 	stw	r10,660(sp)
10011e98:	001787c0 	call	1001787c <__srefill_r>
10011e9c:	d8c0aa17 	ldw	r3,680(sp)
10011ea0:	d980a617 	ldw	r6,664(sp)
10011ea4:	d9c0a817 	ldw	r7,672(sp)
10011ea8:	da00a917 	ldw	r8,676(sp)
10011eac:	da40a717 	ldw	r9,668(sp)
10011eb0:	da80a517 	ldw	r10,660(sp)
10011eb4:	103fb726 	beq	r2,zero,10011d94 <__alt_data_end+0xf0011d94>
10011eb8:	003fb806 	br	10011d9c <__alt_data_end+0xf0011d9c>
10011ebc:	8880200c 	andi	r2,r17,128
10011ec0:	103fb626 	beq	r2,zero,10011d9c <__alt_data_end+0xf0011d9c>
10011ec4:	88e2703a 	and	r17,r17,r3
10011ec8:	003faa06 	br	10011d74 <__alt_data_end+0xf0011d74>
10011ecc:	b009883a 	mov	r4,r22
10011ed0:	b80b883a 	mov	r5,r23
10011ed4:	d8c0aa15 	stw	r3,680(sp)
10011ed8:	da00a915 	stw	r8,676(sp)
10011edc:	dac0a515 	stw	r11,660(sp)
10011ee0:	001787c0 	call	1001787c <__srefill_r>
10011ee4:	d8c0aa17 	ldw	r3,680(sp)
10011ee8:	da00a917 	ldw	r8,676(sp)
10011eec:	dac0a517 	ldw	r11,660(sp)
10011ef0:	103d8b1e 	bne	r2,zero,10011520 <__alt_data_end+0xf0011520>
10011ef4:	803d0a1e 	bne	r16,zero,10011320 <__alt_data_end+0xf0011320>
10011ef8:	003d8906 	br	10011520 <__alt_data_end+0xf0011520>
10011efc:	00bfbfc4 	movi	r2,-257
10011f00:	80a0703a 	and	r16,r16,r2
10011f04:	003d8c06 	br	10011538 <__alt_data_end+0xf0011538>
10011f08:	000f883a 	mov	r7,zero
10011f0c:	003f3106 	br	10011bd4 <__alt_data_end+0xf0011bd4>
10011f10:	d800a315 	stw	zero,652(sp)
10011f14:	003cf306 	br	100112e4 <__alt_data_end+0xf00112e4>
10011f18:	dac09c17 	ldw	r11,624(sp)
10011f1c:	e0ffffc4 	addi	r3,fp,-1
10011f20:	dc405884 	addi	r17,sp,354
10011f24:	5c000017 	ldw	r16,0(r11)
10011f28:	5a000104 	addi	r8,r11,4
10011f2c:	da009c15 	stw	r8,624(sp)
10011f30:	800b883a 	mov	r5,r16
10011f34:	80e9883a 	add	r20,r16,r3
10011f38:	00000106 	br	10011f40 <__svfscanf_r+0x1034>
10011f3c:	e00b883a 	mov	r5,fp
10011f40:	b8c00017 	ldw	r3,0(r23)
10011f44:	280d883a 	mov	r6,r5
10011f48:	18800003 	ldbu	r2,0(r3)
10011f4c:	8885883a 	add	r2,r17,r2
10011f50:	10800007 	ldb	r2,0(r2)
10011f54:	1000f626 	beq	r2,zero,10012330 <__svfscanf_r+0x1424>
10011f58:	b8800117 	ldw	r2,4(r23)
10011f5c:	19c00044 	addi	r7,r3,1
10011f60:	b9c00015 	stw	r7,0(r23)
10011f64:	10bfffc4 	addi	r2,r2,-1
10011f68:	b8800115 	stw	r2,4(r23)
10011f6c:	18800003 	ldbu	r2,0(r3)
10011f70:	37000044 	addi	fp,r6,1
10011f74:	28800005 	stb	r2,0(r5)
10011f78:	3500e426 	beq	r6,r20,1001230c <__svfscanf_r+0x1400>
10011f7c:	b8800117 	ldw	r2,4(r23)
10011f80:	00bfee16 	blt	zero,r2,10011f3c <__alt_data_end+0xf0011f3c>
10011f84:	b009883a 	mov	r4,r22
10011f88:	b80b883a 	mov	r5,r23
10011f8c:	001787c0 	call	1001787c <__srefill_r>
10011f90:	103fea26 	beq	r2,zero,10011f3c <__alt_data_end+0xf0011f3c>
10011f94:	e009883a 	mov	r4,fp
10011f98:	8700dd1e 	bne	r16,fp,10012310 <__svfscanf_r+0x1404>
10011f9c:	003e3006 	br	10011860 <__alt_data_end+0xf0011860>
10011fa0:	da009c17 	ldw	r8,624(sp)
10011fa4:	e0ffffc4 	addi	r3,fp,-1
10011fa8:	44400017 	ldw	r17,0(r8)
10011fac:	42c00104 	addi	r11,r8,4
10011fb0:	dac09c15 	stw	r11,624(sp)
10011fb4:	88e9883a 	add	r20,r17,r3
10011fb8:	880b883a 	mov	r5,r17
10011fbc:	00000106 	br	10011fc4 <__svfscanf_r+0x10b8>
10011fc0:	800b883a 	mov	r5,r16
10011fc4:	b8c00017 	ldw	r3,0(r23)
10011fc8:	a9800017 	ldw	r6,0(r21)
10011fcc:	18800003 	ldbu	r2,0(r3)
10011fd0:	3085883a 	add	r2,r6,r2
10011fd4:	10800043 	ldbu	r2,1(r2)
10011fd8:	1080020c 	andi	r2,r2,8
10011fdc:	1000ea1e 	bne	r2,zero,10012388 <__svfscanf_r+0x147c>
10011fe0:	b8800117 	ldw	r2,4(r23)
10011fe4:	19800044 	addi	r6,r3,1
10011fe8:	b9800015 	stw	r6,0(r23)
10011fec:	10bfffc4 	addi	r2,r2,-1
10011ff0:	b8800115 	stw	r2,4(r23)
10011ff4:	18800003 	ldbu	r2,0(r3)
10011ff8:	2c000044 	addi	r16,r5,1
10011ffc:	8039883a 	mov	fp,r16
10012000:	28800005 	stb	r2,0(r5)
10012004:	2d000626 	beq	r5,r20,10012020 <__svfscanf_r+0x1114>
10012008:	b8800117 	ldw	r2,4(r23)
1001200c:	00bfec16 	blt	zero,r2,10011fc0 <__alt_data_end+0xf0011fc0>
10012010:	b009883a 	mov	r4,r22
10012014:	b80b883a 	mov	r5,r23
10012018:	001787c0 	call	1001787c <__srefill_r>
1001201c:	103fe826 	beq	r2,zero,10011fc0 <__alt_data_end+0xf0011fc0>
10012020:	da009f17 	ldw	r8,636(sp)
10012024:	e463c83a 	sub	r17,fp,r17
10012028:	9c67883a 	add	r19,r19,r17
1001202c:	42000044 	addi	r8,r8,1
10012030:	e0000005 	stb	zero,0(fp)
10012034:	da009f15 	stw	r8,636(sp)
10012038:	9023883a 	mov	r17,r18
1001203c:	003bf206 	br	10011008 <__alt_data_end+0xf0011008>
10012040:	014000c4 	movi	r5,3
10012044:	117db026 	beq	r2,r5,10011708 <__alt_data_end+0xf0011708>
10012048:	01400144 	movi	r5,5
1001204c:	117dae26 	beq	r2,r5,10011708 <__alt_data_end+0xf0011708>
10012050:	003d3306 	br	10011520 <__alt_data_end+0xf0011520>
10012054:	00800084 	movi	r2,2
10012058:	a0bda41e 	bne	r20,r2,100116ec <__alt_data_end+0xf00116ec>
1001205c:	050000c4 	movi	r20,3
10012060:	003d2406 	br	100114f4 <__alt_data_end+0xf00114f4>
10012064:	d9c09e17 	ldw	r7,632(sp)
10012068:	da00a017 	ldw	r8,640(sp)
1001206c:	b009883a 	mov	r4,r22
10012070:	d9400104 	addi	r5,sp,4
10012074:	000d883a 	mov	r6,zero
10012078:	a0000005 	stb	zero,0(r20)
1001207c:	403ee83a 	callr	r8
10012080:	88c0080c 	andi	r3,r17,32
10012084:	18008226 	beq	r3,zero,10012290 <__svfscanf_r+0x1384>
10012088:	dac09c17 	ldw	r11,624(sp)
1001208c:	58c00017 	ldw	r3,0(r11)
10012090:	5ac00104 	addi	r11,r11,4
10012094:	dac09c15 	stw	r11,624(sp)
10012098:	18800015 	stw	r2,0(r3)
1001209c:	da009f17 	ldw	r8,636(sp)
100120a0:	42000044 	addi	r8,r8,1
100120a4:	da009f15 	stw	r8,636(sp)
100120a8:	003f4706 	br	10011dc8 <__alt_data_end+0xf0011dc8>
100120ac:	d8c09904 	addi	r3,sp,612
100120b0:	8400040c 	andi	r16,r16,16
100120b4:	1809883a 	mov	r4,r3
100120b8:	000b883a 	mov	r5,zero
100120bc:	01800204 	movi	r6,8
100120c0:	d8c09d15 	stw	r3,628(sp)
100120c4:	000c8bc0 	call	1000c8bc <memset>
100120c8:	80006c26 	beq	r16,zero,1001227c <__svfscanf_r+0x1370>
100120cc:	dc409b04 	addi	r17,sp,620
100120d0:	0007883a 	mov	r3,zero
100120d4:	dc80a115 	stw	r18,644(sp)
100120d8:	8025883a 	mov	r18,r16
100120dc:	1821883a 	mov	r16,r3
100120e0:	b8800017 	ldw	r2,0(r23)
100120e4:	a8c00017 	ldw	r3,0(r21)
100120e8:	10800003 	ldbu	r2,0(r2)
100120ec:	1885883a 	add	r2,r3,r2
100120f0:	10800043 	ldbu	r2,1(r2)
100120f4:	1080020c 	andi	r2,r2,8
100120f8:	1000011e 	bne	r2,zero,10012100 <__svfscanf_r+0x11f4>
100120fc:	e000f51e 	bne	fp,zero,100124d4 <__svfscanf_r+0x15c8>
10012100:	9021883a 	mov	r16,r18
10012104:	dc80a117 	ldw	r18,644(sp)
10012108:	803bbe1e 	bne	r16,zero,10011004 <__alt_data_end+0xf0011004>
1001210c:	dac09f17 	ldw	r11,636(sp)
10012110:	88000015 	stw	zero,0(r17)
10012114:	9023883a 	mov	r17,r18
10012118:	5ac00044 	addi	r11,r11,1
1001211c:	dac09f15 	stw	r11,636(sp)
10012120:	003bb906 	br	10011008 <__alt_data_end+0xf0011008>
10012124:	dac09904 	addi	r11,sp,612
10012128:	8400040c 	andi	r16,r16,16
1001212c:	5809883a 	mov	r4,r11
10012130:	000b883a 	mov	r5,zero
10012134:	01800204 	movi	r6,8
10012138:	dc00a115 	stw	r16,644(sp)
1001213c:	dac09d15 	stw	r11,628(sp)
10012140:	000c8bc0 	call	1000c8bc <memset>
10012144:	dc00a117 	ldw	r16,644(sp)
10012148:	80004726 	beq	r16,zero,10012268 <__svfscanf_r+0x135c>
1001214c:	0023883a 	mov	r17,zero
10012150:	dc00a117 	ldw	r16,644(sp)
10012154:	0029883a 	mov	r20,zero
10012158:	dc80a215 	stw	r18,648(sp)
1001215c:	00154fc0 	call	100154fc <__locale_mb_cur_max>
10012160:	153dbf26 	beq	r2,r20,10011860 <__alt_data_end+0xf0011860>
10012164:	b8800017 	ldw	r2,0(r23)
10012168:	b9000117 	ldw	r4,4(r23)
1001216c:	d8c09d17 	ldw	r3,628(sp)
10012170:	12400003 	ldbu	r9,0(r2)
10012174:	213fffc4 	addi	r4,r4,-1
10012178:	10800044 	addi	r2,r2,1
1001217c:	dac00104 	addi	r11,sp,4
10012180:	b9000115 	stw	r4,4(r23)
10012184:	b8800015 	stw	r2,0(r23)
10012188:	a4800044 	addi	r18,r20,1
1001218c:	d8c00015 	stw	r3,0(sp)
10012190:	5d29883a 	add	r20,r11,r20
10012194:	b009883a 	mov	r4,r22
10012198:	880b883a 	mov	r5,r17
1001219c:	580d883a 	mov	r6,r11
100121a0:	900f883a 	mov	r7,r18
100121a4:	a2400005 	stb	r9,0(r20)
100121a8:	0015eb40 	call	10015eb4 <_mbrtowc_r>
100121ac:	013fffc4 	movi	r4,-1
100121b0:	113dab26 	beq	r2,r4,10011860 <__alt_data_end+0xf0011860>
100121b4:	10004f1e 	bne	r2,zero,100122f4 <__svfscanf_r+0x13e8>
100121b8:	8000011e 	bne	r16,zero,100121c0 <__svfscanf_r+0x12b4>
100121bc:	88000015 	stw	zero,0(r17)
100121c0:	9ca7883a 	add	r19,r19,r18
100121c4:	e73fffc4 	addi	fp,fp,-1
100121c8:	80004e1e 	bne	r16,zero,10012304 <__svfscanf_r+0x13f8>
100121cc:	8c400104 	addi	r17,r17,4
100121d0:	0029883a 	mov	r20,zero
100121d4:	b8800117 	ldw	r2,4(r23)
100121d8:	00801c0e 	bge	zero,r2,1001224c <__svfscanf_r+0x1340>
100121dc:	e03fdf1e 	bne	fp,zero,1001215c <__alt_data_end+0xf001215c>
100121e0:	dc80a217 	ldw	r18,648(sp)
100121e4:	da00a117 	ldw	r8,644(sp)
100121e8:	403d1e26 	beq	r8,zero,10011664 <__alt_data_end+0xf0011664>
100121ec:	003b8506 	br	10011004 <__alt_data_end+0xf0011004>
100121f0:	da009c17 	ldw	r8,624(sp)
100121f4:	40800017 	ldw	r2,0(r8)
100121f8:	42000104 	addi	r8,r8,4
100121fc:	da009c15 	stw	r8,624(sp)
10012200:	14400015 	stw	r17,0(r2)
10012204:	10c00115 	stw	r3,4(r2)
10012208:	003d1606 	br	10011664 <__alt_data_end+0xf0011664>
1001220c:	00be9fc4 	movi	r2,-1409
10012210:	88a2703a 	and	r17,r17,r2
10012214:	003ed706 	br	10011d74 <__alt_data_end+0xf0011d74>
10012218:	8821883a 	mov	r16,r17
1001221c:	00bfbfc4 	movi	r2,-257
10012220:	9023883a 	mov	r17,r18
10012224:	e00f883a 	mov	r7,fp
10012228:	4025883a 	mov	r18,r8
1001222c:	80a0703a 	and	r16,r16,r2
10012230:	003cc106 	br	10011538 <__alt_data_end+0xf0011538>
10012234:	8941c00c 	andi	r5,r17,1792
10012238:	0081c004 	movi	r2,1792
1001223c:	28bd2b1e 	bne	r5,r2,100116ec <__alt_data_end+0xf00116ec>
10012240:	88e2703a 	and	r17,r17,r3
10012244:	05000044 	movi	r20,1
10012248:	003caa06 	br	100114f4 <__alt_data_end+0xf00114f4>
1001224c:	b009883a 	mov	r4,r22
10012250:	b80b883a 	mov	r5,r23
10012254:	001787c0 	call	1001787c <__srefill_r>
10012258:	103fe026 	beq	r2,zero,100121dc <__alt_data_end+0xf00121dc>
1001225c:	dc80a217 	ldw	r18,648(sp)
10012260:	a03fe026 	beq	r20,zero,100121e4 <__alt_data_end+0xf00121e4>
10012264:	003d7e06 	br	10011860 <__alt_data_end+0xf0011860>
10012268:	da009c17 	ldw	r8,624(sp)
1001226c:	44400017 	ldw	r17,0(r8)
10012270:	42000104 	addi	r8,r8,4
10012274:	da009c15 	stw	r8,624(sp)
10012278:	003fb506 	br	10012150 <__alt_data_end+0xf0012150>
1001227c:	da009c17 	ldw	r8,624(sp)
10012280:	44400017 	ldw	r17,0(r8)
10012284:	42000104 	addi	r8,r8,4
10012288:	da009c15 	stw	r8,624(sp)
1001228c:	003f9006 	br	100120d0 <__alt_data_end+0xf00120d0>
10012290:	88c0010c 	andi	r3,r17,4
10012294:	18006726 	beq	r3,zero,10012434 <__svfscanf_r+0x1528>
10012298:	da009c17 	ldw	r8,624(sp)
1001229c:	40c00017 	ldw	r3,0(r8)
100122a0:	42000104 	addi	r8,r8,4
100122a4:	da009c15 	stw	r8,624(sp)
100122a8:	1880000d 	sth	r2,0(r3)
100122ac:	003f7b06 	br	1001209c <__alt_data_end+0xf001209c>
100122b0:	da00a417 	ldw	r8,656(sp)
100122b4:	000d883a 	mov	r6,zero
100122b8:	01c00284 	movi	r7,10
100122bc:	b009883a 	mov	r4,r22
100122c0:	41400044 	addi	r5,r8,1
100122c4:	000ccd80 	call	1000ccd8 <_strtol_r>
100122c8:	dac0a217 	ldw	r11,648(sp)
100122cc:	d9c0a417 	ldw	r7,656(sp)
100122d0:	12cdc83a 	sub	r6,r2,r11
100122d4:	d88055c4 	addi	r2,sp,343
100122d8:	38800136 	bltu	r7,r2,100122e0 <__svfscanf_r+0x13d4>
100122dc:	d9c05584 	addi	r7,sp,342
100122e0:	014400b4 	movhi	r5,4098
100122e4:	29545604 	addi	r5,r5,20824
100122e8:	3809883a 	mov	r4,r7
100122ec:	000cbd40 	call	1000cbd4 <sprintf>
100122f0:	003ccd06 	br	10011628 <__alt_data_end+0xf0011628>
100122f4:	017fff84 	movi	r5,-2
100122f8:	117fb11e 	bne	r2,r5,100121c0 <__alt_data_end+0xf00121c0>
100122fc:	9029883a 	mov	r20,r18
10012300:	003fb406 	br	100121d4 <__alt_data_end+0xf00121d4>
10012304:	0029883a 	mov	r20,zero
10012308:	003fb206 	br	100121d4 <__alt_data_end+0xf00121d4>
1001230c:	e009883a 	mov	r4,fp
10012310:	2421c83a 	sub	r16,r4,r16
10012314:	803b4026 	beq	r16,zero,10011018 <__alt_data_end+0xf0011018>
10012318:	dac09f17 	ldw	r11,636(sp)
1001231c:	20000005 	stb	zero,0(r4)
10012320:	9c27883a 	add	r19,r19,r16
10012324:	5ac00044 	addi	r11,r11,1
10012328:	dac09f15 	stw	r11,636(sp)
1001232c:	003dea06 	br	10011ad8 <__alt_data_end+0xf0011ad8>
10012330:	2809883a 	mov	r4,r5
10012334:	003ff606 	br	10012310 <__alt_data_end+0xf0012310>
10012338:	803d4926 	beq	r16,zero,10011860 <__alt_data_end+0xf0011860>
1001233c:	9c27883a 	add	r19,r19,r16
10012340:	003de506 	br	10011ad8 <__alt_data_end+0xf0011ad8>
10012344:	da009c17 	ldw	r8,624(sp)
10012348:	ddc00015 	stw	r23,0(sp)
1001234c:	b009883a 	mov	r4,r22
10012350:	41400017 	ldw	r5,0(r8)
10012354:	01800044 	movi	r6,1
10012358:	e00f883a 	mov	r7,fp
1001235c:	001479c0 	call	1001479c <_fread_r>
10012360:	dac09c17 	ldw	r11,624(sp)
10012364:	58c00104 	addi	r3,r11,4
10012368:	103d3d26 	beq	r2,zero,10011860 <__alt_data_end+0xf0011860>
1001236c:	da009f17 	ldw	r8,636(sp)
10012370:	14e7883a 	add	r19,r2,r19
10012374:	d8c09c15 	stw	r3,624(sp)
10012378:	42000044 	addi	r8,r8,1
1001237c:	da009f15 	stw	r8,636(sp)
10012380:	9023883a 	mov	r17,r18
10012384:	003b2006 	br	10011008 <__alt_data_end+0xf0011008>
10012388:	2839883a 	mov	fp,r5
1001238c:	003f2406 	br	10012020 <__alt_data_end+0xf0012020>
10012390:	b009883a 	mov	r4,r22
10012394:	b80b883a 	mov	r5,r23
10012398:	001787c0 	call	1001787c <__srefill_r>
1001239c:	103bad26 	beq	r2,zero,10011254 <__alt_data_end+0xf0011254>
100123a0:	003d2f06 	br	10011860 <__alt_data_end+0xf0011860>
100123a4:	a17fffc7 	ldb	r5,-1(r20)
100123a8:	b009883a 	mov	r4,r22
100123ac:	b80d883a 	mov	r6,r23
100123b0:	a53fffc4 	addi	r20,r20,-1
100123b4:	001b00c0 	call	1001b00c <_ungetc_r>
100123b8:	003e7f06 	br	10011db8 <__alt_data_end+0xf0011db8>
100123bc:	90c00083 	ldbu	r3,2(r18)
100123c0:	84000094 	ori	r16,r16,2
100123c4:	94800084 	addi	r18,r18,2
100123c8:	003b1d06 	br	10011040 <__alt_data_end+0xf0011040>
100123cc:	da009d17 	ldw	r8,628(sp)
100123d0:	dac0a117 	ldw	r11,644(sp)
100123d4:	42c5c83a 	sub	r2,r8,r11
100123d8:	008dc83a 	sub	r6,zero,r2
100123dc:	103fbd1e 	bne	r2,zero,100122d4 <__alt_data_end+0xf00122d4>
100123e0:	003c9106 	br	10011628 <__alt_data_end+0xf0011628>
100123e4:	80e0b03a 	or	r16,r16,r3
100123e8:	003d3d06 	br	100118e0 <__alt_data_end+0xf00118e0>
100123ec:	8080004c 	andi	r2,r16,1
100123f0:	10000a1e 	bne	r2,zero,1001241c <__svfscanf_r+0x1510>
100123f4:	8400008c 	andi	r16,r16,2
100123f8:	80000826 	beq	r16,zero,1001241c <__svfscanf_r+0x1510>
100123fc:	dac09c17 	ldw	r11,624(sp)
10012400:	9807d7fa 	srai	r3,r19,31
10012404:	58800017 	ldw	r2,0(r11)
10012408:	5ac00104 	addi	r11,r11,4
1001240c:	dac09c15 	stw	r11,624(sp)
10012410:	14c00015 	stw	r19,0(r2)
10012414:	10c00115 	stw	r3,4(r2)
10012418:	003afa06 	br	10011004 <__alt_data_end+0xf0011004>
1001241c:	da009c17 	ldw	r8,624(sp)
10012420:	40800017 	ldw	r2,0(r8)
10012424:	42000104 	addi	r8,r8,4
10012428:	da009c15 	stw	r8,624(sp)
1001242c:	14c00015 	stw	r19,0(r2)
10012430:	003af406 	br	10011004 <__alt_data_end+0xf0011004>
10012434:	88c0004c 	andi	r3,r17,1
10012438:	183f131e 	bne	r3,zero,10012088 <__alt_data_end+0xf0012088>
1001243c:	88c0008c 	andi	r3,r17,2
10012440:	183f1126 	beq	r3,zero,10012088 <__alt_data_end+0xf0012088>
10012444:	da00a017 	ldw	r8,640(sp)
10012448:	02c400b4 	movhi	r11,4098
1001244c:	5ae5c204 	addi	r11,r11,-26872
10012450:	b009883a 	mov	r4,r22
10012454:	d9400104 	addi	r5,sp,4
10012458:	000d883a 	mov	r6,zero
1001245c:	d9c09e17 	ldw	r7,632(sp)
10012460:	42c08226 	beq	r8,r11,1001266c <__svfscanf_r+0x1760>
10012464:	00193f40 	call	100193f4 <_strtoll_r>
10012468:	da009c17 	ldw	r8,624(sp)
1001246c:	41000017 	ldw	r4,0(r8)
10012470:	42000104 	addi	r8,r8,4
10012474:	da009c15 	stw	r8,624(sp)
10012478:	20800015 	stw	r2,0(r4)
1001247c:	20c00115 	stw	r3,4(r4)
10012480:	003f0606 	br	1001209c <__alt_data_end+0xf001209c>
10012484:	da009c17 	ldw	r8,624(sp)
10012488:	180b883a 	mov	r5,r3
1001248c:	8809883a 	mov	r4,r17
10012490:	45000017 	ldw	r20,0(r8)
10012494:	44000104 	addi	r16,r8,4
10012498:	d8c0aa15 	stw	r3,680(sp)
1001249c:	0017a240 	call	10017a24 <__fpclassifyd>
100124a0:	d8c0aa17 	ldw	r3,680(sp)
100124a4:	10000626 	beq	r2,zero,100124c0 <__svfscanf_r+0x15b4>
100124a8:	8809883a 	mov	r4,r17
100124ac:	180b883a 	mov	r5,r3
100124b0:	00210140 	call	10021014 <__truncdfsf2>
100124b4:	a0800015 	stw	r2,0(r20)
100124b8:	dc009c15 	stw	r16,624(sp)
100124bc:	003c6906 	br	10011664 <__alt_data_end+0xf0011664>
100124c0:	0009883a 	mov	r4,zero
100124c4:	0017bac0 	call	10017bac <nanf>
100124c8:	a0800015 	stw	r2,0(r20)
100124cc:	dc009c15 	stw	r16,624(sp)
100124d0:	003c6406 	br	10011664 <__alt_data_end+0xf0011664>
100124d4:	00154fc0 	call	100154fc <__locale_mb_cur_max>
100124d8:	143ce126 	beq	r2,r16,10011860 <__alt_data_end+0xf0011860>
100124dc:	b8800017 	ldw	r2,0(r23)
100124e0:	b9000117 	ldw	r4,4(r23)
100124e4:	d8c09d17 	ldw	r3,628(sp)
100124e8:	12000003 	ldbu	r8,0(r2)
100124ec:	213fffc4 	addi	r4,r4,-1
100124f0:	10800044 	addi	r2,r2,1
100124f4:	dac00104 	addi	r11,sp,4
100124f8:	b9000115 	stw	r4,4(r23)
100124fc:	b8800015 	stw	r2,0(r23)
10012500:	85000044 	addi	r20,r16,1
10012504:	d8c00015 	stw	r3,0(sp)
10012508:	5c21883a 	add	r16,r11,r16
1001250c:	b009883a 	mov	r4,r22
10012510:	880b883a 	mov	r5,r17
10012514:	580d883a 	mov	r6,r11
10012518:	a00f883a 	mov	r7,r20
1001251c:	82000005 	stb	r8,0(r16)
10012520:	0015eb40 	call	10015eb4 <_mbrtowc_r>
10012524:	013fffc4 	movi	r4,-1
10012528:	113ccd26 	beq	r2,r4,10011860 <__alt_data_end+0xf0011860>
1001252c:	1000131e 	bne	r2,zero,1001257c <__svfscanf_r+0x1670>
10012530:	88000015 	stw	zero,0(r17)
10012534:	0009883a 	mov	r4,zero
10012538:	00154440 	call	10015444 <iswspace>
1001253c:	10001d26 	beq	r2,zero,100125b4 <__svfscanf_r+0x16a8>
10012540:	9021883a 	mov	r16,r18
10012544:	dc80a117 	ldw	r18,644(sp)
10012548:	a03eef26 	beq	r20,zero,10012108 <__alt_data_end+0xf0012108>
1001254c:	a53fffc4 	addi	r20,r20,-1
10012550:	da000104 	addi	r8,sp,4
10012554:	4505883a 	add	r2,r8,r20
10012558:	11400003 	ldbu	r5,0(r2)
1001255c:	b009883a 	mov	r4,r22
10012560:	b80d883a 	mov	r6,r23
10012564:	001b00c0 	call	1001b00c <_ungetc_r>
10012568:	a03ff81e 	bne	r20,zero,1001254c <__alt_data_end+0xf001254c>
1001256c:	003ee606 	br	10012108 <__alt_data_end+0xf0012108>
10012570:	88e2703a 	and	r17,r17,r3
10012574:	04800044 	movi	r18,1
10012578:	003bde06 	br	100114f4 <__alt_data_end+0xf00114f4>
1001257c:	017fff84 	movi	r5,-2
10012580:	1140121e 	bne	r2,r5,100125cc <__svfscanf_r+0x16c0>
10012584:	a021883a 	mov	r16,r20
10012588:	b8800117 	ldw	r2,4(r23)
1001258c:	00bed416 	blt	zero,r2,100120e0 <__alt_data_end+0xf00120e0>
10012590:	b009883a 	mov	r4,r22
10012594:	b80b883a 	mov	r5,r23
10012598:	001787c0 	call	1001787c <__srefill_r>
1001259c:	103ed026 	beq	r2,zero,100120e0 <__alt_data_end+0xf00120e0>
100125a0:	8007883a 	mov	r3,r16
100125a4:	9021883a 	mov	r16,r18
100125a8:	dc80a117 	ldw	r18,644(sp)
100125ac:	183cac1e 	bne	r3,zero,10011860 <__alt_data_end+0xf0011860>
100125b0:	003ed506 	br	10012108 <__alt_data_end+0xf0012108>
100125b4:	9d27883a 	add	r19,r19,r20
100125b8:	e73fffc4 	addi	fp,fp,-1
100125bc:	9000051e 	bne	r18,zero,100125d4 <__svfscanf_r+0x16c8>
100125c0:	8c400104 	addi	r17,r17,4
100125c4:	0021883a 	mov	r16,zero
100125c8:	003fef06 	br	10012588 <__alt_data_end+0xf0012588>
100125cc:	89000017 	ldw	r4,0(r17)
100125d0:	003fd906 	br	10012538 <__alt_data_end+0xf0012538>
100125d4:	0021883a 	mov	r16,zero
100125d8:	003feb06 	br	10012588 <__alt_data_end+0xf0012588>
100125dc:	d9000104 	addi	r4,sp,4
100125e0:	b839883a 	mov	fp,r23
100125e4:	3821883a 	mov	r16,r7
100125e8:	21fa8b2e 	bgeu	r4,r7,10011018 <__alt_data_end+0xf0011018>
100125ec:	843fffc4 	addi	r16,r16,-1
100125f0:	81400007 	ldb	r5,0(r16)
100125f4:	b009883a 	mov	r4,r22
100125f8:	e00d883a 	mov	r6,fp
100125fc:	001b00c0 	call	1001b00c <_ungetc_r>
10012600:	d9400104 	addi	r5,sp,4
10012604:	817ff91e 	bne	r16,r5,100125ec <__alt_data_end+0xf00125ec>
10012608:	003a8306 	br	10011018 <__alt_data_end+0xf0011018>
1001260c:	da000104 	addi	r8,sp,4
10012610:	b839883a 	mov	fp,r23
10012614:	3821883a 	mov	r16,r7
10012618:	41fa7f2e 	bgeu	r8,r7,10011018 <__alt_data_end+0xf0011018>
1001261c:	843fffc4 	addi	r16,r16,-1
10012620:	81400007 	ldb	r5,0(r16)
10012624:	b009883a 	mov	r4,r22
10012628:	e00d883a 	mov	r6,fp
1001262c:	001b00c0 	call	1001b00c <_ungetc_r>
10012630:	dac00104 	addi	r11,sp,4
10012634:	82fff91e 	bne	r16,r11,1001261c <__alt_data_end+0xf001261c>
10012638:	003a7706 	br	10011018 <__alt_data_end+0xf0011018>
1001263c:	d8800104 	addi	r2,sp,4
10012640:	b839883a 	mov	fp,r23
10012644:	382f883a 	mov	r23,r7
10012648:	11fa732e 	bgeu	r2,r7,10011018 <__alt_data_end+0xf0011018>
1001264c:	bdffffc4 	addi	r23,r23,-1
10012650:	b9400007 	ldb	r5,0(r23)
10012654:	b009883a 	mov	r4,r22
10012658:	e00d883a 	mov	r6,fp
1001265c:	001b00c0 	call	1001b00c <_ungetc_r>
10012660:	d8c00104 	addi	r3,sp,4
10012664:	b8fff91e 	bne	r23,r3,1001264c <__alt_data_end+0xf001264c>
10012668:	003a6b06 	br	10011018 <__alt_data_end+0xf0011018>
1001266c:	00199b40 	call	100199b4 <_strtoull_r>
10012670:	003f7d06 	br	10012468 <__alt_data_end+0xf0012468>

10012674 <vfscanf>:
10012674:	defffb04 	addi	sp,sp,-20
10012678:	dc000115 	stw	r16,4(sp)
1001267c:	040400b4 	movhi	r16,4098
10012680:	841d1004 	addi	r16,r16,29760
10012684:	dc800315 	stw	r18,12(sp)
10012688:	2025883a 	mov	r18,r4
1001268c:	81000017 	ldw	r4,0(r16)
10012690:	dc400215 	stw	r17,8(sp)
10012694:	dfc00415 	stw	ra,16(sp)
10012698:	2823883a 	mov	r17,r5
1001269c:	300f883a 	mov	r7,r6
100126a0:	20000626 	beq	r4,zero,100126bc <vfscanf+0x48>
100126a4:	20800e17 	ldw	r2,56(r4)
100126a8:	1000041e 	bne	r2,zero,100126bc <vfscanf+0x48>
100126ac:	d9800015 	stw	r6,0(sp)
100126b0:	001474c0 	call	1001474c <__sinit>
100126b4:	81000017 	ldw	r4,0(r16)
100126b8:	d9c00017 	ldw	r7,0(sp)
100126bc:	900b883a 	mov	r5,r18
100126c0:	880d883a 	mov	r6,r17
100126c4:	dfc00417 	ldw	ra,16(sp)
100126c8:	dc800317 	ldw	r18,12(sp)
100126cc:	dc400217 	ldw	r17,8(sp)
100126d0:	dc000117 	ldw	r16,4(sp)
100126d4:	dec00504 	addi	sp,sp,20
100126d8:	0010f0c1 	jmpi	10010f0c <__svfscanf_r>

100126dc <__svfscanf>:
100126dc:	2007883a 	mov	r3,r4
100126e0:	010400b4 	movhi	r4,4098
100126e4:	211d1004 	addi	r4,r4,29760
100126e8:	21000017 	ldw	r4,0(r4)
100126ec:	2805883a 	mov	r2,r5
100126f0:	300f883a 	mov	r7,r6
100126f4:	180b883a 	mov	r5,r3
100126f8:	100d883a 	mov	r6,r2
100126fc:	0010f0c1 	jmpi	10010f0c <__svfscanf_r>

10012700 <_vfscanf_r>:
10012700:	defffb04 	addi	sp,sp,-20
10012704:	dc000315 	stw	r16,12(sp)
10012708:	dfc00415 	stw	ra,16(sp)
1001270c:	2021883a 	mov	r16,r4
10012710:	20000926 	beq	r4,zero,10012738 <_vfscanf_r+0x38>
10012714:	20800e17 	ldw	r2,56(r4)
10012718:	1000071e 	bne	r2,zero,10012738 <_vfscanf_r+0x38>
1001271c:	d9400015 	stw	r5,0(sp)
10012720:	d9800115 	stw	r6,4(sp)
10012724:	d9c00215 	stw	r7,8(sp)
10012728:	001474c0 	call	1001474c <__sinit>
1001272c:	d9c00217 	ldw	r7,8(sp)
10012730:	d9800117 	ldw	r6,4(sp)
10012734:	d9400017 	ldw	r5,0(sp)
10012738:	8009883a 	mov	r4,r16
1001273c:	dfc00417 	ldw	ra,16(sp)
10012740:	dc000317 	ldw	r16,12(sp)
10012744:	dec00504 	addi	sp,sp,20
10012748:	0010f0c1 	jmpi	10010f0c <__svfscanf_r>

1001274c <__swsetup_r>:
1001274c:	008400b4 	movhi	r2,4098
10012750:	defffd04 	addi	sp,sp,-12
10012754:	109d1004 	addi	r2,r2,29760
10012758:	dc400115 	stw	r17,4(sp)
1001275c:	2023883a 	mov	r17,r4
10012760:	11000017 	ldw	r4,0(r2)
10012764:	dc000015 	stw	r16,0(sp)
10012768:	dfc00215 	stw	ra,8(sp)
1001276c:	2821883a 	mov	r16,r5
10012770:	20000226 	beq	r4,zero,1001277c <__swsetup_r+0x30>
10012774:	20c00e17 	ldw	r3,56(r4)
10012778:	18002e26 	beq	r3,zero,10012834 <__swsetup_r+0xe8>
1001277c:	8080030b 	ldhu	r2,12(r16)
10012780:	10c0020c 	andi	r3,r2,8
10012784:	100d883a 	mov	r6,r2
10012788:	18000f26 	beq	r3,zero,100127c8 <__swsetup_r+0x7c>
1001278c:	80c00417 	ldw	r3,16(r16)
10012790:	18001526 	beq	r3,zero,100127e8 <__swsetup_r+0x9c>
10012794:	1100004c 	andi	r4,r2,1
10012798:	20001c1e 	bne	r4,zero,1001280c <__swsetup_r+0xc0>
1001279c:	1080008c 	andi	r2,r2,2
100127a0:	1000261e 	bne	r2,zero,1001283c <__swsetup_r+0xf0>
100127a4:	80800517 	ldw	r2,20(r16)
100127a8:	80800215 	stw	r2,8(r16)
100127ac:	18001c26 	beq	r3,zero,10012820 <__swsetup_r+0xd4>
100127b0:	0005883a 	mov	r2,zero
100127b4:	dfc00217 	ldw	ra,8(sp)
100127b8:	dc400117 	ldw	r17,4(sp)
100127bc:	dc000017 	ldw	r16,0(sp)
100127c0:	dec00304 	addi	sp,sp,12
100127c4:	f800283a 	ret
100127c8:	3080040c 	andi	r2,r6,16
100127cc:	10001726 	beq	r2,zero,1001282c <__swsetup_r+0xe0>
100127d0:	3080010c 	andi	r2,r6,4
100127d4:	10001b1e 	bne	r2,zero,10012844 <__swsetup_r+0xf8>
100127d8:	80c00417 	ldw	r3,16(r16)
100127dc:	30800214 	ori	r2,r6,8
100127e0:	8080030d 	sth	r2,12(r16)
100127e4:	183feb1e 	bne	r3,zero,10012794 <__alt_data_end+0xf0012794>
100127e8:	1140a00c 	andi	r5,r2,640
100127ec:	01008004 	movi	r4,512
100127f0:	293fe826 	beq	r5,r4,10012794 <__alt_data_end+0xf0012794>
100127f4:	8809883a 	mov	r4,r17
100127f8:	800b883a 	mov	r5,r16
100127fc:	00155540 	call	10015554 <__smakebuf_r>
10012800:	8080030b 	ldhu	r2,12(r16)
10012804:	80c00417 	ldw	r3,16(r16)
10012808:	003fe206 	br	10012794 <__alt_data_end+0xf0012794>
1001280c:	80800517 	ldw	r2,20(r16)
10012810:	80000215 	stw	zero,8(r16)
10012814:	0085c83a 	sub	r2,zero,r2
10012818:	80800615 	stw	r2,24(r16)
1001281c:	183fe41e 	bne	r3,zero,100127b0 <__alt_data_end+0xf00127b0>
10012820:	8080030b 	ldhu	r2,12(r16)
10012824:	1080200c 	andi	r2,r2,128
10012828:	103fe226 	beq	r2,zero,100127b4 <__alt_data_end+0xf00127b4>
1001282c:	00bfffc4 	movi	r2,-1
10012830:	003fe006 	br	100127b4 <__alt_data_end+0xf00127b4>
10012834:	001474c0 	call	1001474c <__sinit>
10012838:	003fd006 	br	1001277c <__alt_data_end+0xf001277c>
1001283c:	0005883a 	mov	r2,zero
10012840:	003fd906 	br	100127a8 <__alt_data_end+0xf00127a8>
10012844:	81400c17 	ldw	r5,48(r16)
10012848:	28000626 	beq	r5,zero,10012864 <__swsetup_r+0x118>
1001284c:	80801004 	addi	r2,r16,64
10012850:	28800326 	beq	r5,r2,10012860 <__swsetup_r+0x114>
10012854:	8809883a 	mov	r4,r17
10012858:	0014b400 	call	10014b40 <_free_r>
1001285c:	8180030b 	ldhu	r6,12(r16)
10012860:	80000c15 	stw	zero,48(r16)
10012864:	80c00417 	ldw	r3,16(r16)
10012868:	00bff6c4 	movi	r2,-37
1001286c:	118c703a 	and	r6,r2,r6
10012870:	80000115 	stw	zero,4(r16)
10012874:	80c00015 	stw	r3,0(r16)
10012878:	003fd806 	br	100127dc <__alt_data_end+0xf00127dc>

1001287c <quorem>:
1001287c:	defff704 	addi	sp,sp,-36
10012880:	dc800215 	stw	r18,8(sp)
10012884:	20800417 	ldw	r2,16(r4)
10012888:	2c800417 	ldw	r18,16(r5)
1001288c:	dfc00815 	stw	ra,32(sp)
10012890:	ddc00715 	stw	r23,28(sp)
10012894:	dd800615 	stw	r22,24(sp)
10012898:	dd400515 	stw	r21,20(sp)
1001289c:	dd000415 	stw	r20,16(sp)
100128a0:	dcc00315 	stw	r19,12(sp)
100128a4:	dc400115 	stw	r17,4(sp)
100128a8:	dc000015 	stw	r16,0(sp)
100128ac:	14807116 	blt	r2,r18,10012a74 <quorem+0x1f8>
100128b0:	94bfffc4 	addi	r18,r18,-1
100128b4:	94ad883a 	add	r22,r18,r18
100128b8:	b5ad883a 	add	r22,r22,r22
100128bc:	2c400504 	addi	r17,r5,20
100128c0:	8da9883a 	add	r20,r17,r22
100128c4:	25400504 	addi	r21,r4,20
100128c8:	282f883a 	mov	r23,r5
100128cc:	adad883a 	add	r22,r21,r22
100128d0:	a1400017 	ldw	r5,0(r20)
100128d4:	2021883a 	mov	r16,r4
100128d8:	b1000017 	ldw	r4,0(r22)
100128dc:	29400044 	addi	r5,r5,1
100128e0:	000c6e00 	call	1000c6e0 <__udivsi3>
100128e4:	1027883a 	mov	r19,r2
100128e8:	10002c26 	beq	r2,zero,1001299c <quorem+0x120>
100128ec:	a813883a 	mov	r9,r21
100128f0:	8811883a 	mov	r8,r17
100128f4:	0009883a 	mov	r4,zero
100128f8:	000d883a 	mov	r6,zero
100128fc:	41c00017 	ldw	r7,0(r8)
10012900:	49400017 	ldw	r5,0(r9)
10012904:	42000104 	addi	r8,r8,4
10012908:	38bfffcc 	andi	r2,r7,65535
1001290c:	14c5383a 	mul	r2,r2,r19
10012910:	380ed43a 	srli	r7,r7,16
10012914:	28ffffcc 	andi	r3,r5,65535
10012918:	2085883a 	add	r2,r4,r2
1001291c:	1008d43a 	srli	r4,r2,16
10012920:	3ccf383a 	mul	r7,r7,r19
10012924:	198d883a 	add	r6,r3,r6
10012928:	10ffffcc 	andi	r3,r2,65535
1001292c:	30c7c83a 	sub	r3,r6,r3
10012930:	280ad43a 	srli	r5,r5,16
10012934:	21c9883a 	add	r4,r4,r7
10012938:	180dd43a 	srai	r6,r3,16
1001293c:	20bfffcc 	andi	r2,r4,65535
10012940:	288bc83a 	sub	r5,r5,r2
10012944:	298b883a 	add	r5,r5,r6
10012948:	280e943a 	slli	r7,r5,16
1001294c:	18ffffcc 	andi	r3,r3,65535
10012950:	2008d43a 	srli	r4,r4,16
10012954:	38ceb03a 	or	r7,r7,r3
10012958:	49c00015 	stw	r7,0(r9)
1001295c:	280dd43a 	srai	r6,r5,16
10012960:	4a400104 	addi	r9,r9,4
10012964:	a23fe52e 	bgeu	r20,r8,100128fc <__alt_data_end+0xf00128fc>
10012968:	b0800017 	ldw	r2,0(r22)
1001296c:	10000b1e 	bne	r2,zero,1001299c <quorem+0x120>
10012970:	b0bfff04 	addi	r2,r22,-4
10012974:	a880082e 	bgeu	r21,r2,10012998 <quorem+0x11c>
10012978:	b0ffff17 	ldw	r3,-4(r22)
1001297c:	18000326 	beq	r3,zero,1001298c <quorem+0x110>
10012980:	00000506 	br	10012998 <quorem+0x11c>
10012984:	10c00017 	ldw	r3,0(r2)
10012988:	1800031e 	bne	r3,zero,10012998 <quorem+0x11c>
1001298c:	10bfff04 	addi	r2,r2,-4
10012990:	94bfffc4 	addi	r18,r18,-1
10012994:	a8bffb36 	bltu	r21,r2,10012984 <__alt_data_end+0xf0012984>
10012998:	84800415 	stw	r18,16(r16)
1001299c:	8009883a 	mov	r4,r16
100129a0:	b80b883a 	mov	r5,r23
100129a4:	0016bf40 	call	10016bf4 <__mcmp>
100129a8:	10002616 	blt	r2,zero,10012a44 <quorem+0x1c8>
100129ac:	9cc00044 	addi	r19,r19,1
100129b0:	a80d883a 	mov	r6,r21
100129b4:	000b883a 	mov	r5,zero
100129b8:	31000017 	ldw	r4,0(r6)
100129bc:	88800017 	ldw	r2,0(r17)
100129c0:	31800104 	addi	r6,r6,4
100129c4:	20ffffcc 	andi	r3,r4,65535
100129c8:	194b883a 	add	r5,r3,r5
100129cc:	10ffffcc 	andi	r3,r2,65535
100129d0:	28c7c83a 	sub	r3,r5,r3
100129d4:	1004d43a 	srli	r2,r2,16
100129d8:	2008d43a 	srli	r4,r4,16
100129dc:	180bd43a 	srai	r5,r3,16
100129e0:	18ffffcc 	andi	r3,r3,65535
100129e4:	2089c83a 	sub	r4,r4,r2
100129e8:	2149883a 	add	r4,r4,r5
100129ec:	2004943a 	slli	r2,r4,16
100129f0:	8c400104 	addi	r17,r17,4
100129f4:	200bd43a 	srai	r5,r4,16
100129f8:	10c6b03a 	or	r3,r2,r3
100129fc:	30ffff15 	stw	r3,-4(r6)
10012a00:	a47fed2e 	bgeu	r20,r17,100129b8 <__alt_data_end+0xf00129b8>
10012a04:	9485883a 	add	r2,r18,r18
10012a08:	1085883a 	add	r2,r2,r2
10012a0c:	a887883a 	add	r3,r21,r2
10012a10:	18800017 	ldw	r2,0(r3)
10012a14:	10000b1e 	bne	r2,zero,10012a44 <quorem+0x1c8>
10012a18:	18bfff04 	addi	r2,r3,-4
10012a1c:	a880082e 	bgeu	r21,r2,10012a40 <quorem+0x1c4>
10012a20:	18ffff17 	ldw	r3,-4(r3)
10012a24:	18000326 	beq	r3,zero,10012a34 <quorem+0x1b8>
10012a28:	00000506 	br	10012a40 <quorem+0x1c4>
10012a2c:	10c00017 	ldw	r3,0(r2)
10012a30:	1800031e 	bne	r3,zero,10012a40 <quorem+0x1c4>
10012a34:	10bfff04 	addi	r2,r2,-4
10012a38:	94bfffc4 	addi	r18,r18,-1
10012a3c:	a8bffb36 	bltu	r21,r2,10012a2c <__alt_data_end+0xf0012a2c>
10012a40:	84800415 	stw	r18,16(r16)
10012a44:	9805883a 	mov	r2,r19
10012a48:	dfc00817 	ldw	ra,32(sp)
10012a4c:	ddc00717 	ldw	r23,28(sp)
10012a50:	dd800617 	ldw	r22,24(sp)
10012a54:	dd400517 	ldw	r21,20(sp)
10012a58:	dd000417 	ldw	r20,16(sp)
10012a5c:	dcc00317 	ldw	r19,12(sp)
10012a60:	dc800217 	ldw	r18,8(sp)
10012a64:	dc400117 	ldw	r17,4(sp)
10012a68:	dc000017 	ldw	r16,0(sp)
10012a6c:	dec00904 	addi	sp,sp,36
10012a70:	f800283a 	ret
10012a74:	0005883a 	mov	r2,zero
10012a78:	003ff306 	br	10012a48 <__alt_data_end+0xf0012a48>

10012a7c <_dtoa_r>:
10012a7c:	20801017 	ldw	r2,64(r4)
10012a80:	deffde04 	addi	sp,sp,-136
10012a84:	dd401d15 	stw	r21,116(sp)
10012a88:	dcc01b15 	stw	r19,108(sp)
10012a8c:	dc801a15 	stw	r18,104(sp)
10012a90:	dc401915 	stw	r17,100(sp)
10012a94:	dc001815 	stw	r16,96(sp)
10012a98:	dfc02115 	stw	ra,132(sp)
10012a9c:	df002015 	stw	fp,128(sp)
10012aa0:	ddc01f15 	stw	r23,124(sp)
10012aa4:	dd801e15 	stw	r22,120(sp)
10012aa8:	dd001c15 	stw	r20,112(sp)
10012aac:	d9c00315 	stw	r7,12(sp)
10012ab0:	2021883a 	mov	r16,r4
10012ab4:	302b883a 	mov	r21,r6
10012ab8:	2825883a 	mov	r18,r5
10012abc:	dc402417 	ldw	r17,144(sp)
10012ac0:	3027883a 	mov	r19,r6
10012ac4:	10000826 	beq	r2,zero,10012ae8 <_dtoa_r+0x6c>
10012ac8:	21801117 	ldw	r6,68(r4)
10012acc:	00c00044 	movi	r3,1
10012ad0:	100b883a 	mov	r5,r2
10012ad4:	1986983a 	sll	r3,r3,r6
10012ad8:	11800115 	stw	r6,4(r2)
10012adc:	10c00215 	stw	r3,8(r2)
10012ae0:	00163dc0 	call	100163dc <_Bfree>
10012ae4:	80001015 	stw	zero,64(r16)
10012ae8:	a8002d16 	blt	r21,zero,10012ba0 <_dtoa_r+0x124>
10012aec:	88000015 	stw	zero,0(r17)
10012af0:	a8dffc2c 	andhi	r3,r21,32752
10012af4:	009ffc34 	movhi	r2,32752
10012af8:	18801b26 	beq	r3,r2,10012b68 <_dtoa_r+0xec>
10012afc:	9009883a 	mov	r4,r18
10012b00:	980b883a 	mov	r5,r19
10012b04:	000d883a 	mov	r6,zero
10012b08:	000f883a 	mov	r7,zero
10012b0c:	001fbe00 	call	1001fbe0 <__eqdf2>
10012b10:	10002a1e 	bne	r2,zero,10012bbc <_dtoa_r+0x140>
10012b14:	d8c02317 	ldw	r3,140(sp)
10012b18:	d9002517 	ldw	r4,148(sp)
10012b1c:	00800044 	movi	r2,1
10012b20:	18800015 	stw	r2,0(r3)
10012b24:	2001a226 	beq	r4,zero,100131b0 <_dtoa_r+0x734>
10012b28:	008400b4 	movhi	r2,4098
10012b2c:	10944544 	addi	r2,r2,20757
10012b30:	20800015 	stw	r2,0(r4)
10012b34:	10bfffc4 	addi	r2,r2,-1
10012b38:	dfc02117 	ldw	ra,132(sp)
10012b3c:	df002017 	ldw	fp,128(sp)
10012b40:	ddc01f17 	ldw	r23,124(sp)
10012b44:	dd801e17 	ldw	r22,120(sp)
10012b48:	dd401d17 	ldw	r21,116(sp)
10012b4c:	dd001c17 	ldw	r20,112(sp)
10012b50:	dcc01b17 	ldw	r19,108(sp)
10012b54:	dc801a17 	ldw	r18,104(sp)
10012b58:	dc401917 	ldw	r17,100(sp)
10012b5c:	dc001817 	ldw	r16,96(sp)
10012b60:	dec02204 	addi	sp,sp,136
10012b64:	f800283a 	ret
10012b68:	d8c02317 	ldw	r3,140(sp)
10012b6c:	0089c3c4 	movi	r2,9999
10012b70:	18800015 	stw	r2,0(r3)
10012b74:	90017c26 	beq	r18,zero,10013168 <_dtoa_r+0x6ec>
10012b78:	008400b4 	movhi	r2,4098
10012b7c:	10950404 	addi	r2,r2,21520
10012b80:	d9002517 	ldw	r4,148(sp)
10012b84:	203fec26 	beq	r4,zero,10012b38 <__alt_data_end+0xf0012b38>
10012b88:	10c000c7 	ldb	r3,3(r2)
10012b8c:	18017d1e 	bne	r3,zero,10013184 <_dtoa_r+0x708>
10012b90:	10c000c4 	addi	r3,r2,3
10012b94:	d9802517 	ldw	r6,148(sp)
10012b98:	30c00015 	stw	r3,0(r6)
10012b9c:	003fe606 	br	10012b38 <__alt_data_end+0xf0012b38>
10012ba0:	04e00034 	movhi	r19,32768
10012ba4:	9cffffc4 	addi	r19,r19,-1
10012ba8:	00800044 	movi	r2,1
10012bac:	ace6703a 	and	r19,r21,r19
10012bb0:	88800015 	stw	r2,0(r17)
10012bb4:	982b883a 	mov	r21,r19
10012bb8:	003fcd06 	br	10012af0 <__alt_data_end+0xf0012af0>
10012bbc:	d8800204 	addi	r2,sp,8
10012bc0:	a822d53a 	srli	r17,r21,20
10012bc4:	d8800015 	stw	r2,0(sp)
10012bc8:	8009883a 	mov	r4,r16
10012bcc:	900b883a 	mov	r5,r18
10012bd0:	980d883a 	mov	r6,r19
10012bd4:	d9c00104 	addi	r7,sp,4
10012bd8:	0016f680 	call	10016f68 <__d2b>
10012bdc:	1039883a 	mov	fp,r2
10012be0:	88016a1e 	bne	r17,zero,1001318c <_dtoa_r+0x710>
10012be4:	dd000217 	ldw	r20,8(sp)
10012be8:	dc400117 	ldw	r17,4(sp)
10012bec:	00befbc4 	movi	r2,-1041
10012bf0:	a463883a 	add	r17,r20,r17
10012bf4:	8882ea16 	blt	r17,r2,100137a0 <_dtoa_r+0xd24>
10012bf8:	00bf0384 	movi	r2,-1010
10012bfc:	1445c83a 	sub	r2,r2,r17
10012c00:	89010484 	addi	r4,r17,1042
10012c04:	a8aa983a 	sll	r21,r21,r2
10012c08:	9108d83a 	srl	r4,r18,r4
10012c0c:	a908b03a 	or	r4,r21,r4
10012c10:	0020f700 	call	10020f70 <__floatunsidf>
10012c14:	017f8434 	movhi	r5,65040
10012c18:	01800044 	movi	r6,1
10012c1c:	1009883a 	mov	r4,r2
10012c20:	194b883a 	add	r5,r3,r5
10012c24:	8c7fffc4 	addi	r17,r17,-1
10012c28:	d9800f15 	stw	r6,60(sp)
10012c2c:	000d883a 	mov	r6,zero
10012c30:	01cffe34 	movhi	r7,16376
10012c34:	00205480 	call	10020548 <__subdf3>
10012c38:	0198dbf4 	movhi	r6,25455
10012c3c:	01cff4f4 	movhi	r7,16339
10012c40:	1009883a 	mov	r4,r2
10012c44:	180b883a 	mov	r5,r3
10012c48:	3190d844 	addi	r6,r6,17249
10012c4c:	39e1e9c4 	addi	r7,r7,-30809
10012c50:	001fe240 	call	1001fe24 <__muldf3>
10012c54:	01a2d874 	movhi	r6,35681
10012c58:	01cff1f4 	movhi	r7,16327
10012c5c:	180b883a 	mov	r5,r3
10012c60:	31b22cc4 	addi	r6,r6,-14157
10012c64:	39e28a04 	addi	r7,r7,-30168
10012c68:	1009883a 	mov	r4,r2
10012c6c:	001ea780 	call	1001ea78 <__adddf3>
10012c70:	8809883a 	mov	r4,r17
10012c74:	102d883a 	mov	r22,r2
10012c78:	182b883a 	mov	r21,r3
10012c7c:	0020ea00 	call	10020ea0 <__floatsidf>
10012c80:	019427f4 	movhi	r6,20639
10012c84:	01cff4f4 	movhi	r7,16339
10012c88:	1009883a 	mov	r4,r2
10012c8c:	180b883a 	mov	r5,r3
10012c90:	319e7ec4 	addi	r6,r6,31227
10012c94:	39d104c4 	addi	r7,r7,17427
10012c98:	001fe240 	call	1001fe24 <__muldf3>
10012c9c:	b009883a 	mov	r4,r22
10012ca0:	a80b883a 	mov	r5,r21
10012ca4:	100d883a 	mov	r6,r2
10012ca8:	180f883a 	mov	r7,r3
10012cac:	001ea780 	call	1001ea78 <__adddf3>
10012cb0:	1009883a 	mov	r4,r2
10012cb4:	180b883a 	mov	r5,r3
10012cb8:	102d883a 	mov	r22,r2
10012cbc:	182b883a 	mov	r21,r3
10012cc0:	0020e180 	call	10020e18 <__fixdfsi>
10012cc4:	b009883a 	mov	r4,r22
10012cc8:	a80b883a 	mov	r5,r21
10012ccc:	000d883a 	mov	r6,zero
10012cd0:	000f883a 	mov	r7,zero
10012cd4:	d8800515 	stw	r2,20(sp)
10012cd8:	001fd440 	call	1001fd44 <__ledf2>
10012cdc:	10023116 	blt	r2,zero,100135a4 <_dtoa_r+0xb28>
10012ce0:	d8c00517 	ldw	r3,20(sp)
10012ce4:	00800584 	movi	r2,22
10012ce8:	10c21f36 	bltu	r2,r3,10013568 <_dtoa_r+0xaec>
10012cec:	180490fa 	slli	r2,r3,3
10012cf0:	00c400b4 	movhi	r3,4098
10012cf4:	18d52004 	addi	r3,r3,21632
10012cf8:	1885883a 	add	r2,r3,r2
10012cfc:	11000017 	ldw	r4,0(r2)
10012d00:	11400117 	ldw	r5,4(r2)
10012d04:	900d883a 	mov	r6,r18
10012d08:	980f883a 	mov	r7,r19
10012d0c:	001fc640 	call	1001fc64 <__gedf2>
10012d10:	0082a70e 	bge	zero,r2,100137b0 <_dtoa_r+0xd34>
10012d14:	d9000517 	ldw	r4,20(sp)
10012d18:	d8000c15 	stw	zero,48(sp)
10012d1c:	213fffc4 	addi	r4,r4,-1
10012d20:	d9000515 	stw	r4,20(sp)
10012d24:	a463c83a 	sub	r17,r20,r17
10012d28:	8dbfffc4 	addi	r22,r17,-1
10012d2c:	b0021916 	blt	r22,zero,10013594 <_dtoa_r+0xb18>
10012d30:	d8000815 	stw	zero,32(sp)
10012d34:	d8800517 	ldw	r2,20(sp)
10012d38:	10020e16 	blt	r2,zero,10013574 <_dtoa_r+0xaf8>
10012d3c:	b0ad883a 	add	r22,r22,r2
10012d40:	d8800a15 	stw	r2,40(sp)
10012d44:	d8000915 	stw	zero,36(sp)
10012d48:	d8c00317 	ldw	r3,12(sp)
10012d4c:	00800244 	movi	r2,9
10012d50:	10c11a36 	bltu	r2,r3,100131bc <_dtoa_r+0x740>
10012d54:	00800144 	movi	r2,5
10012d58:	10c4fc0e 	bge	r2,r3,1001414c <_dtoa_r+0x16d0>
10012d5c:	18ffff04 	addi	r3,r3,-4
10012d60:	d8c00315 	stw	r3,12(sp)
10012d64:	0029883a 	mov	r20,zero
10012d68:	d9800317 	ldw	r6,12(sp)
10012d6c:	008000c4 	movi	r2,3
10012d70:	3083bd26 	beq	r6,r2,10013c68 <_dtoa_r+0x11ec>
10012d74:	1183670e 	bge	r2,r6,10013b14 <_dtoa_r+0x1098>
10012d78:	d8c00317 	ldw	r3,12(sp)
10012d7c:	00800104 	movi	r2,4
10012d80:	1882e726 	beq	r3,r2,10013920 <_dtoa_r+0xea4>
10012d84:	00800144 	movi	r2,5
10012d88:	1884f21e 	bne	r3,r2,10014154 <_dtoa_r+0x16d8>
10012d8c:	00800044 	movi	r2,1
10012d90:	d8800b15 	stw	r2,44(sp)
10012d94:	d8c02217 	ldw	r3,136(sp)
10012d98:	d9000517 	ldw	r4,20(sp)
10012d9c:	1907883a 	add	r3,r3,r4
10012da0:	19800044 	addi	r6,r3,1
10012da4:	d8c00d15 	stw	r3,52(sp)
10012da8:	d9800615 	stw	r6,24(sp)
10012dac:	0183c30e 	bge	zero,r6,10013cbc <_dtoa_r+0x1240>
10012db0:	d9800617 	ldw	r6,24(sp)
10012db4:	3023883a 	mov	r17,r6
10012db8:	80001115 	stw	zero,68(r16)
10012dbc:	008005c4 	movi	r2,23
10012dc0:	1184f62e 	bgeu	r2,r6,1001419c <_dtoa_r+0x1720>
10012dc4:	00c00044 	movi	r3,1
10012dc8:	00800104 	movi	r2,4
10012dcc:	1085883a 	add	r2,r2,r2
10012dd0:	11000504 	addi	r4,r2,20
10012dd4:	180b883a 	mov	r5,r3
10012dd8:	18c00044 	addi	r3,r3,1
10012ddc:	313ffb2e 	bgeu	r6,r4,10012dcc <__alt_data_end+0xf0012dcc>
10012de0:	81401115 	stw	r5,68(r16)
10012de4:	8009883a 	mov	r4,r16
10012de8:	00163340 	call	10016334 <_Balloc>
10012dec:	d8800715 	stw	r2,28(sp)
10012df0:	80801015 	stw	r2,64(r16)
10012df4:	00800384 	movi	r2,14
10012df8:	1440fd36 	bltu	r2,r17,100131f0 <_dtoa_r+0x774>
10012dfc:	a000fc26 	beq	r20,zero,100131f0 <_dtoa_r+0x774>
10012e00:	d8800517 	ldw	r2,20(sp)
10012e04:	0083b90e 	bge	zero,r2,10013cec <_dtoa_r+0x1270>
10012e08:	d8c00517 	ldw	r3,20(sp)
10012e0c:	108003cc 	andi	r2,r2,15
10012e10:	100490fa 	slli	r2,r2,3
10012e14:	182fd13a 	srai	r23,r3,4
10012e18:	00c400b4 	movhi	r3,4098
10012e1c:	18d52004 	addi	r3,r3,21632
10012e20:	1885883a 	add	r2,r3,r2
10012e24:	b8c0040c 	andi	r3,r23,16
10012e28:	12c00017 	ldw	r11,0(r2)
10012e2c:	12800117 	ldw	r10,4(r2)
10012e30:	18039726 	beq	r3,zero,10013c90 <_dtoa_r+0x1214>
10012e34:	008400b4 	movhi	r2,4098
10012e38:	10951604 	addi	r2,r2,21592
10012e3c:	11800817 	ldw	r6,32(r2)
10012e40:	11c00917 	ldw	r7,36(r2)
10012e44:	9009883a 	mov	r4,r18
10012e48:	980b883a 	mov	r5,r19
10012e4c:	da801615 	stw	r10,88(sp)
10012e50:	dac01515 	stw	r11,84(sp)
10012e54:	001f3140 	call	1001f314 <__divdf3>
10012e58:	da801617 	ldw	r10,88(sp)
10012e5c:	dac01517 	ldw	r11,84(sp)
10012e60:	bdc003cc 	andi	r23,r23,15
10012e64:	044000c4 	movi	r17,3
10012e68:	d8800e15 	stw	r2,56(sp)
10012e6c:	182b883a 	mov	r21,r3
10012e70:	b8001126 	beq	r23,zero,10012eb8 <_dtoa_r+0x43c>
10012e74:	050400b4 	movhi	r20,4098
10012e78:	a5151604 	addi	r20,r20,21592
10012e7c:	5805883a 	mov	r2,r11
10012e80:	5007883a 	mov	r3,r10
10012e84:	b980004c 	andi	r6,r23,1
10012e88:	1009883a 	mov	r4,r2
10012e8c:	b82fd07a 	srai	r23,r23,1
10012e90:	180b883a 	mov	r5,r3
10012e94:	30000426 	beq	r6,zero,10012ea8 <_dtoa_r+0x42c>
10012e98:	a1800017 	ldw	r6,0(r20)
10012e9c:	a1c00117 	ldw	r7,4(r20)
10012ea0:	8c400044 	addi	r17,r17,1
10012ea4:	001fe240 	call	1001fe24 <__muldf3>
10012ea8:	a5000204 	addi	r20,r20,8
10012eac:	b83ff51e 	bne	r23,zero,10012e84 <__alt_data_end+0xf0012e84>
10012eb0:	1017883a 	mov	r11,r2
10012eb4:	1815883a 	mov	r10,r3
10012eb8:	d9000e17 	ldw	r4,56(sp)
10012ebc:	a80b883a 	mov	r5,r21
10012ec0:	580d883a 	mov	r6,r11
10012ec4:	500f883a 	mov	r7,r10
10012ec8:	001f3140 	call	1001f314 <__divdf3>
10012ecc:	1029883a 	mov	r20,r2
10012ed0:	182b883a 	mov	r21,r3
10012ed4:	d9800c17 	ldw	r6,48(sp)
10012ed8:	30000626 	beq	r6,zero,10012ef4 <_dtoa_r+0x478>
10012edc:	a009883a 	mov	r4,r20
10012ee0:	a80b883a 	mov	r5,r21
10012ee4:	000d883a 	mov	r6,zero
10012ee8:	01cffc34 	movhi	r7,16368
10012eec:	001fd440 	call	1001fd44 <__ledf2>
10012ef0:	10043216 	blt	r2,zero,10013fbc <_dtoa_r+0x1540>
10012ef4:	8809883a 	mov	r4,r17
10012ef8:	0020ea00 	call	10020ea0 <__floatsidf>
10012efc:	1009883a 	mov	r4,r2
10012f00:	180b883a 	mov	r5,r3
10012f04:	a00d883a 	mov	r6,r20
10012f08:	a80f883a 	mov	r7,r21
10012f0c:	001fe240 	call	1001fe24 <__muldf3>
10012f10:	000d883a 	mov	r6,zero
10012f14:	1009883a 	mov	r4,r2
10012f18:	180b883a 	mov	r5,r3
10012f1c:	01d00734 	movhi	r7,16412
10012f20:	001ea780 	call	1001ea78 <__adddf3>
10012f24:	1023883a 	mov	r17,r2
10012f28:	d9800617 	ldw	r6,24(sp)
10012f2c:	00bf3034 	movhi	r2,64704
10012f30:	1885883a 	add	r2,r3,r2
10012f34:	d8800e15 	stw	r2,56(sp)
10012f38:	30032e26 	beq	r6,zero,10013bf4 <_dtoa_r+0x1178>
10012f3c:	d8c00517 	ldw	r3,20(sp)
10012f40:	da800617 	ldw	r10,24(sp)
10012f44:	d8c01215 	stw	r3,72(sp)
10012f48:	d9000b17 	ldw	r4,44(sp)
10012f4c:	2003b026 	beq	r4,zero,10013e10 <_dtoa_r+0x1394>
10012f50:	50bfffc4 	addi	r2,r10,-1
10012f54:	100490fa 	slli	r2,r2,3
10012f58:	00c400b4 	movhi	r3,4098
10012f5c:	18d52004 	addi	r3,r3,21632
10012f60:	1885883a 	add	r2,r3,r2
10012f64:	11800017 	ldw	r6,0(r2)
10012f68:	11c00117 	ldw	r7,4(r2)
10012f6c:	d8800717 	ldw	r2,28(sp)
10012f70:	0009883a 	mov	r4,zero
10012f74:	014ff834 	movhi	r5,16352
10012f78:	da801615 	stw	r10,88(sp)
10012f7c:	15c00044 	addi	r23,r2,1
10012f80:	001f3140 	call	1001f314 <__divdf3>
10012f84:	d9c00e17 	ldw	r7,56(sp)
10012f88:	880d883a 	mov	r6,r17
10012f8c:	1009883a 	mov	r4,r2
10012f90:	180b883a 	mov	r5,r3
10012f94:	00205480 	call	10020548 <__subdf3>
10012f98:	a80b883a 	mov	r5,r21
10012f9c:	a009883a 	mov	r4,r20
10012fa0:	d8c01015 	stw	r3,64(sp)
10012fa4:	d8800e15 	stw	r2,56(sp)
10012fa8:	0020e180 	call	10020e18 <__fixdfsi>
10012fac:	1009883a 	mov	r4,r2
10012fb0:	d8801715 	stw	r2,92(sp)
10012fb4:	0020ea00 	call	10020ea0 <__floatsidf>
10012fb8:	a009883a 	mov	r4,r20
10012fbc:	a80b883a 	mov	r5,r21
10012fc0:	100d883a 	mov	r6,r2
10012fc4:	180f883a 	mov	r7,r3
10012fc8:	00205480 	call	10020548 <__subdf3>
10012fcc:	da001717 	ldw	r8,92(sp)
10012fd0:	1829883a 	mov	r20,r3
10012fd4:	d8c00717 	ldw	r3,28(sp)
10012fd8:	d9000e17 	ldw	r4,56(sp)
10012fdc:	d9401017 	ldw	r5,64(sp)
10012fe0:	42000c04 	addi	r8,r8,48
10012fe4:	1023883a 	mov	r17,r2
10012fe8:	1a000005 	stb	r8,0(r3)
10012fec:	880d883a 	mov	r6,r17
10012ff0:	a00f883a 	mov	r7,r20
10012ff4:	402b883a 	mov	r21,r8
10012ff8:	001fc640 	call	1001fc64 <__gedf2>
10012ffc:	00844516 	blt	zero,r2,10014114 <_dtoa_r+0x1698>
10013000:	0009883a 	mov	r4,zero
10013004:	014ffc34 	movhi	r5,16368
10013008:	880d883a 	mov	r6,r17
1001300c:	a00f883a 	mov	r7,r20
10013010:	00205480 	call	10020548 <__subdf3>
10013014:	d9000e17 	ldw	r4,56(sp)
10013018:	d9401017 	ldw	r5,64(sp)
1001301c:	100d883a 	mov	r6,r2
10013020:	180f883a 	mov	r7,r3
10013024:	001fc640 	call	1001fc64 <__gedf2>
10013028:	da801617 	ldw	r10,88(sp)
1001302c:	00843616 	blt	zero,r2,10014108 <_dtoa_r+0x168c>
10013030:	00800044 	movi	r2,1
10013034:	12806e0e 	bge	r2,r10,100131f0 <_dtoa_r+0x774>
10013038:	d9000717 	ldw	r4,28(sp)
1001303c:	dd801315 	stw	r22,76(sp)
10013040:	dc001115 	stw	r16,68(sp)
10013044:	2295883a 	add	r10,r4,r10
10013048:	dcc01415 	stw	r19,80(sp)
1001304c:	502d883a 	mov	r22,r10
10013050:	dcc01017 	ldw	r19,64(sp)
10013054:	b821883a 	mov	r16,r23
10013058:	dc801015 	stw	r18,64(sp)
1001305c:	dc800e17 	ldw	r18,56(sp)
10013060:	00000906 	br	10013088 <_dtoa_r+0x60c>
10013064:	00205480 	call	10020548 <__subdf3>
10013068:	1009883a 	mov	r4,r2
1001306c:	180b883a 	mov	r5,r3
10013070:	900d883a 	mov	r6,r18
10013074:	980f883a 	mov	r7,r19
10013078:	001fd440 	call	1001fd44 <__ledf2>
1001307c:	10040e16 	blt	r2,zero,100140b8 <_dtoa_r+0x163c>
10013080:	b821883a 	mov	r16,r23
10013084:	bd841026 	beq	r23,r22,100140c8 <_dtoa_r+0x164c>
10013088:	9009883a 	mov	r4,r18
1001308c:	980b883a 	mov	r5,r19
10013090:	000d883a 	mov	r6,zero
10013094:	01d00934 	movhi	r7,16420
10013098:	001fe240 	call	1001fe24 <__muldf3>
1001309c:	000d883a 	mov	r6,zero
100130a0:	01d00934 	movhi	r7,16420
100130a4:	8809883a 	mov	r4,r17
100130a8:	a00b883a 	mov	r5,r20
100130ac:	1025883a 	mov	r18,r2
100130b0:	1827883a 	mov	r19,r3
100130b4:	001fe240 	call	1001fe24 <__muldf3>
100130b8:	180b883a 	mov	r5,r3
100130bc:	1009883a 	mov	r4,r2
100130c0:	1823883a 	mov	r17,r3
100130c4:	1029883a 	mov	r20,r2
100130c8:	0020e180 	call	10020e18 <__fixdfsi>
100130cc:	1009883a 	mov	r4,r2
100130d0:	102b883a 	mov	r21,r2
100130d4:	0020ea00 	call	10020ea0 <__floatsidf>
100130d8:	a009883a 	mov	r4,r20
100130dc:	880b883a 	mov	r5,r17
100130e0:	100d883a 	mov	r6,r2
100130e4:	180f883a 	mov	r7,r3
100130e8:	00205480 	call	10020548 <__subdf3>
100130ec:	ad400c04 	addi	r21,r21,48
100130f0:	1009883a 	mov	r4,r2
100130f4:	180b883a 	mov	r5,r3
100130f8:	900d883a 	mov	r6,r18
100130fc:	980f883a 	mov	r7,r19
10013100:	85400005 	stb	r21,0(r16)
10013104:	1023883a 	mov	r17,r2
10013108:	1829883a 	mov	r20,r3
1001310c:	001fd440 	call	1001fd44 <__ledf2>
10013110:	bdc00044 	addi	r23,r23,1
10013114:	0009883a 	mov	r4,zero
10013118:	014ffc34 	movhi	r5,16368
1001311c:	880d883a 	mov	r6,r17
10013120:	a00f883a 	mov	r7,r20
10013124:	103fcf0e 	bge	r2,zero,10013064 <__alt_data_end+0xf0013064>
10013128:	d9801217 	ldw	r6,72(sp)
1001312c:	dc001117 	ldw	r16,68(sp)
10013130:	d9800515 	stw	r6,20(sp)
10013134:	8009883a 	mov	r4,r16
10013138:	e00b883a 	mov	r5,fp
1001313c:	00163dc0 	call	100163dc <_Bfree>
10013140:	d8c00517 	ldw	r3,20(sp)
10013144:	d9002317 	ldw	r4,140(sp)
10013148:	d9802517 	ldw	r6,148(sp)
1001314c:	b8000005 	stb	zero,0(r23)
10013150:	18800044 	addi	r2,r3,1
10013154:	20800015 	stw	r2,0(r4)
10013158:	30027226 	beq	r6,zero,10013b24 <_dtoa_r+0x10a8>
1001315c:	35c00015 	stw	r23,0(r6)
10013160:	d8800717 	ldw	r2,28(sp)
10013164:	003e7406 	br	10012b38 <__alt_data_end+0xf0012b38>
10013168:	00800434 	movhi	r2,16
1001316c:	10bfffc4 	addi	r2,r2,-1
10013170:	a8aa703a 	and	r21,r21,r2
10013174:	a83e801e 	bne	r21,zero,10012b78 <__alt_data_end+0xf0012b78>
10013178:	008400b4 	movhi	r2,4098
1001317c:	10950104 	addi	r2,r2,21508
10013180:	003e7f06 	br	10012b80 <__alt_data_end+0xf0012b80>
10013184:	10c00204 	addi	r3,r2,8
10013188:	003e8206 	br	10012b94 <__alt_data_end+0xf0012b94>
1001318c:	01400434 	movhi	r5,16
10013190:	297fffc4 	addi	r5,r5,-1
10013194:	994a703a 	and	r5,r19,r5
10013198:	9009883a 	mov	r4,r18
1001319c:	8c7f0044 	addi	r17,r17,-1023
100131a0:	294ffc34 	orhi	r5,r5,16368
100131a4:	dd000217 	ldw	r20,8(sp)
100131a8:	d8000f15 	stw	zero,60(sp)
100131ac:	003e9f06 	br	10012c2c <__alt_data_end+0xf0012c2c>
100131b0:	008400b4 	movhi	r2,4098
100131b4:	10944504 	addi	r2,r2,20756
100131b8:	003e5f06 	br	10012b38 <__alt_data_end+0xf0012b38>
100131bc:	80001115 	stw	zero,68(r16)
100131c0:	8009883a 	mov	r4,r16
100131c4:	000b883a 	mov	r5,zero
100131c8:	00163340 	call	10016334 <_Balloc>
100131cc:	01bfffc4 	movi	r6,-1
100131d0:	d8800715 	stw	r2,28(sp)
100131d4:	80801015 	stw	r2,64(r16)
100131d8:	00800044 	movi	r2,1
100131dc:	d9800615 	stw	r6,24(sp)
100131e0:	d8800b15 	stw	r2,44(sp)
100131e4:	d8002215 	stw	zero,136(sp)
100131e8:	d9800d15 	stw	r6,52(sp)
100131ec:	d8000315 	stw	zero,12(sp)
100131f0:	d8800117 	ldw	r2,4(sp)
100131f4:	10008e16 	blt	r2,zero,10013430 <_dtoa_r+0x9b4>
100131f8:	d9000517 	ldw	r4,20(sp)
100131fc:	00c00384 	movi	r3,14
10013200:	19008b16 	blt	r3,r4,10013430 <_dtoa_r+0x9b4>
10013204:	200490fa 	slli	r2,r4,3
10013208:	00c400b4 	movhi	r3,4098
1001320c:	d9802217 	ldw	r6,136(sp)
10013210:	18d52004 	addi	r3,r3,21632
10013214:	1885883a 	add	r2,r3,r2
10013218:	14400017 	ldw	r17,0(r2)
1001321c:	15000117 	ldw	r20,4(r2)
10013220:	3001c716 	blt	r6,zero,10013940 <_dtoa_r+0xec4>
10013224:	880d883a 	mov	r6,r17
10013228:	a00f883a 	mov	r7,r20
1001322c:	9009883a 	mov	r4,r18
10013230:	980b883a 	mov	r5,r19
10013234:	001f3140 	call	1001f314 <__divdf3>
10013238:	180b883a 	mov	r5,r3
1001323c:	1009883a 	mov	r4,r2
10013240:	0020e180 	call	10020e18 <__fixdfsi>
10013244:	1009883a 	mov	r4,r2
10013248:	102d883a 	mov	r22,r2
1001324c:	0020ea00 	call	10020ea0 <__floatsidf>
10013250:	1009883a 	mov	r4,r2
10013254:	180b883a 	mov	r5,r3
10013258:	880d883a 	mov	r6,r17
1001325c:	a00f883a 	mov	r7,r20
10013260:	001fe240 	call	1001fe24 <__muldf3>
10013264:	9009883a 	mov	r4,r18
10013268:	980b883a 	mov	r5,r19
1001326c:	100d883a 	mov	r6,r2
10013270:	180f883a 	mov	r7,r3
10013274:	00205480 	call	10020548 <__subdf3>
10013278:	d9000717 	ldw	r4,28(sp)
1001327c:	d9800617 	ldw	r6,24(sp)
10013280:	180b883a 	mov	r5,r3
10013284:	b0c00c04 	addi	r3,r22,48
10013288:	20c00005 	stb	r3,0(r4)
1001328c:	25c00044 	addi	r23,r4,1
10013290:	01000044 	movi	r4,1
10013294:	1011883a 	mov	r8,r2
10013298:	2807883a 	mov	r3,r5
1001329c:	31003d26 	beq	r6,r4,10013394 <_dtoa_r+0x918>
100132a0:	000d883a 	mov	r6,zero
100132a4:	01d00934 	movhi	r7,16420
100132a8:	1009883a 	mov	r4,r2
100132ac:	001fe240 	call	1001fe24 <__muldf3>
100132b0:	1009883a 	mov	r4,r2
100132b4:	180b883a 	mov	r5,r3
100132b8:	000d883a 	mov	r6,zero
100132bc:	000f883a 	mov	r7,zero
100132c0:	1027883a 	mov	r19,r2
100132c4:	182b883a 	mov	r21,r3
100132c8:	001fbe00 	call	1001fbe0 <__eqdf2>
100132cc:	103f9926 	beq	r2,zero,10013134 <__alt_data_end+0xf0013134>
100132d0:	d8c00617 	ldw	r3,24(sp)
100132d4:	d9000717 	ldw	r4,28(sp)
100132d8:	b825883a 	mov	r18,r23
100132dc:	18bfffc4 	addi	r2,r3,-1
100132e0:	20ad883a 	add	r22,r4,r2
100132e4:	dc000315 	stw	r16,12(sp)
100132e8:	00000a06 	br	10013314 <_dtoa_r+0x898>
100132ec:	001fe240 	call	1001fe24 <__muldf3>
100132f0:	1009883a 	mov	r4,r2
100132f4:	180b883a 	mov	r5,r3
100132f8:	000d883a 	mov	r6,zero
100132fc:	000f883a 	mov	r7,zero
10013300:	1027883a 	mov	r19,r2
10013304:	182b883a 	mov	r21,r3
10013308:	b825883a 	mov	r18,r23
1001330c:	001fbe00 	call	1001fbe0 <__eqdf2>
10013310:	10022626 	beq	r2,zero,10013bac <_dtoa_r+0x1130>
10013314:	880d883a 	mov	r6,r17
10013318:	a00f883a 	mov	r7,r20
1001331c:	9809883a 	mov	r4,r19
10013320:	a80b883a 	mov	r5,r21
10013324:	001f3140 	call	1001f314 <__divdf3>
10013328:	180b883a 	mov	r5,r3
1001332c:	1009883a 	mov	r4,r2
10013330:	0020e180 	call	10020e18 <__fixdfsi>
10013334:	1009883a 	mov	r4,r2
10013338:	1021883a 	mov	r16,r2
1001333c:	0020ea00 	call	10020ea0 <__floatsidf>
10013340:	1009883a 	mov	r4,r2
10013344:	180b883a 	mov	r5,r3
10013348:	880d883a 	mov	r6,r17
1001334c:	a00f883a 	mov	r7,r20
10013350:	001fe240 	call	1001fe24 <__muldf3>
10013354:	9809883a 	mov	r4,r19
10013358:	a80b883a 	mov	r5,r21
1001335c:	100d883a 	mov	r6,r2
10013360:	180f883a 	mov	r7,r3
10013364:	00205480 	call	10020548 <__subdf3>
10013368:	82000c04 	addi	r8,r16,48
1001336c:	92000005 	stb	r8,0(r18)
10013370:	1009883a 	mov	r4,r2
10013374:	180b883a 	mov	r5,r3
10013378:	000d883a 	mov	r6,zero
1001337c:	01d00934 	movhi	r7,16420
10013380:	1011883a 	mov	r8,r2
10013384:	bdc00044 	addi	r23,r23,1
10013388:	95bfd81e 	bne	r18,r22,100132ec <__alt_data_end+0xf00132ec>
1001338c:	802d883a 	mov	r22,r16
10013390:	dc000317 	ldw	r16,12(sp)
10013394:	4009883a 	mov	r4,r8
10013398:	180b883a 	mov	r5,r3
1001339c:	400d883a 	mov	r6,r8
100133a0:	180f883a 	mov	r7,r3
100133a4:	001ea780 	call	1001ea78 <__adddf3>
100133a8:	8809883a 	mov	r4,r17
100133ac:	a00b883a 	mov	r5,r20
100133b0:	100d883a 	mov	r6,r2
100133b4:	180f883a 	mov	r7,r3
100133b8:	1027883a 	mov	r19,r2
100133bc:	1825883a 	mov	r18,r3
100133c0:	001fd440 	call	1001fd44 <__ledf2>
100133c4:	10000816 	blt	r2,zero,100133e8 <_dtoa_r+0x96c>
100133c8:	8809883a 	mov	r4,r17
100133cc:	a00b883a 	mov	r5,r20
100133d0:	980d883a 	mov	r6,r19
100133d4:	900f883a 	mov	r7,r18
100133d8:	001fbe00 	call	1001fbe0 <__eqdf2>
100133dc:	103f551e 	bne	r2,zero,10013134 <__alt_data_end+0xf0013134>
100133e0:	b580004c 	andi	r22,r22,1
100133e4:	b03f5326 	beq	r22,zero,10013134 <__alt_data_end+0xf0013134>
100133e8:	bd7fffc3 	ldbu	r21,-1(r23)
100133ec:	b8bfffc4 	addi	r2,r23,-1
100133f0:	1007883a 	mov	r3,r2
100133f4:	01400e44 	movi	r5,57
100133f8:	d9800717 	ldw	r6,28(sp)
100133fc:	00000506 	br	10013414 <_dtoa_r+0x998>
10013400:	18ffffc4 	addi	r3,r3,-1
10013404:	30825e26 	beq	r6,r2,10013d80 <_dtoa_r+0x1304>
10013408:	1d400003 	ldbu	r21,0(r3)
1001340c:	102f883a 	mov	r23,r2
10013410:	10bfffc4 	addi	r2,r2,-1
10013414:	a9003fcc 	andi	r4,r21,255
10013418:	2100201c 	xori	r4,r4,128
1001341c:	213fe004 	addi	r4,r4,-128
10013420:	217ff726 	beq	r4,r5,10013400 <__alt_data_end+0xf0013400>
10013424:	aa000044 	addi	r8,r21,1
10013428:	12000005 	stb	r8,0(r2)
1001342c:	003f4106 	br	10013134 <__alt_data_end+0xf0013134>
10013430:	d8c00b17 	ldw	r3,44(sp)
10013434:	18006726 	beq	r3,zero,100135d4 <_dtoa_r+0xb58>
10013438:	d9000317 	ldw	r4,12(sp)
1001343c:	00c00044 	movi	r3,1
10013440:	19016a0e 	bge	r3,r4,100139ec <_dtoa_r+0xf70>
10013444:	d8800617 	ldw	r2,24(sp)
10013448:	d8c00917 	ldw	r3,36(sp)
1001344c:	157fffc4 	addi	r21,r2,-1
10013450:	1d420716 	blt	r3,r21,10013c70 <_dtoa_r+0x11f4>
10013454:	1d6bc83a 	sub	r21,r3,r21
10013458:	d8800617 	ldw	r2,24(sp)
1001345c:	1002c716 	blt	r2,zero,10013f7c <_dtoa_r+0x1500>
10013460:	dd000817 	ldw	r20,32(sp)
10013464:	d8800617 	ldw	r2,24(sp)
10013468:	d9800817 	ldw	r6,32(sp)
1001346c:	8009883a 	mov	r4,r16
10013470:	01400044 	movi	r5,1
10013474:	308d883a 	add	r6,r6,r2
10013478:	d9800815 	stw	r6,32(sp)
1001347c:	b0ad883a 	add	r22,r22,r2
10013480:	00167340 	call	10016734 <__i2b>
10013484:	1023883a 	mov	r17,r2
10013488:	a0000826 	beq	r20,zero,100134ac <_dtoa_r+0xa30>
1001348c:	0580070e 	bge	zero,r22,100134ac <_dtoa_r+0xa30>
10013490:	b005883a 	mov	r2,r22
10013494:	a5812016 	blt	r20,r22,10013918 <_dtoa_r+0xe9c>
10013498:	d8c00817 	ldw	r3,32(sp)
1001349c:	a0a9c83a 	sub	r20,r20,r2
100134a0:	b0adc83a 	sub	r22,r22,r2
100134a4:	1887c83a 	sub	r3,r3,r2
100134a8:	d8c00815 	stw	r3,32(sp)
100134ac:	d9000917 	ldw	r4,36(sp)
100134b0:	0100140e 	bge	zero,r4,10013504 <_dtoa_r+0xa88>
100134b4:	d9800b17 	ldw	r6,44(sp)
100134b8:	3001e526 	beq	r6,zero,10013c50 <_dtoa_r+0x11d4>
100134bc:	05400e0e 	bge	zero,r21,100134f8 <_dtoa_r+0xa7c>
100134c0:	880b883a 	mov	r5,r17
100134c4:	8009883a 	mov	r4,r16
100134c8:	a80d883a 	mov	r6,r21
100134cc:	001696c0 	call	1001696c <__pow5mult>
100134d0:	e00d883a 	mov	r6,fp
100134d4:	8009883a 	mov	r4,r16
100134d8:	100b883a 	mov	r5,r2
100134dc:	1023883a 	mov	r17,r2
100134e0:	00167700 	call	10016770 <__multiply>
100134e4:	102f883a 	mov	r23,r2
100134e8:	e00b883a 	mov	r5,fp
100134ec:	8009883a 	mov	r4,r16
100134f0:	00163dc0 	call	100163dc <_Bfree>
100134f4:	b839883a 	mov	fp,r23
100134f8:	d8800917 	ldw	r2,36(sp)
100134fc:	154dc83a 	sub	r6,r2,r21
10013500:	3001281e 	bne	r6,zero,100139a4 <_dtoa_r+0xf28>
10013504:	05c00044 	movi	r23,1
10013508:	8009883a 	mov	r4,r16
1001350c:	b80b883a 	mov	r5,r23
10013510:	00167340 	call	10016734 <__i2b>
10013514:	d8c00a17 	ldw	r3,40(sp)
10013518:	102b883a 	mov	r21,r2
1001351c:	00c0310e 	bge	zero,r3,100135e4 <_dtoa_r+0xb68>
10013520:	8009883a 	mov	r4,r16
10013524:	100b883a 	mov	r5,r2
10013528:	180d883a 	mov	r6,r3
1001352c:	001696c0 	call	1001696c <__pow5mult>
10013530:	d9000317 	ldw	r4,12(sp)
10013534:	102b883a 	mov	r21,r2
10013538:	b9011f0e 	bge	r23,r4,100139b8 <_dtoa_r+0xf3c>
1001353c:	0027883a 	mov	r19,zero
10013540:	a8800417 	ldw	r2,16(r21)
10013544:	10800104 	addi	r2,r2,4
10013548:	1085883a 	add	r2,r2,r2
1001354c:	1085883a 	add	r2,r2,r2
10013550:	a885883a 	add	r2,r21,r2
10013554:	11000017 	ldw	r4,0(r2)
10013558:	001661c0 	call	1001661c <__hi0bits>
1001355c:	00c00804 	movi	r3,32
10013560:	1885c83a 	sub	r2,r3,r2
10013564:	00002506 	br	100135fc <_dtoa_r+0xb80>
10013568:	01800044 	movi	r6,1
1001356c:	d9800c15 	stw	r6,48(sp)
10013570:	003dec06 	br	10012d24 <__alt_data_end+0xf0012d24>
10013574:	d8c00817 	ldw	r3,32(sp)
10013578:	d9000517 	ldw	r4,20(sp)
1001357c:	d8000a15 	stw	zero,40(sp)
10013580:	1907c83a 	sub	r3,r3,r4
10013584:	010dc83a 	sub	r6,zero,r4
10013588:	d8c00815 	stw	r3,32(sp)
1001358c:	d9800915 	stw	r6,36(sp)
10013590:	003ded06 	br	10012d48 <__alt_data_end+0xf0012d48>
10013594:	05adc83a 	sub	r22,zero,r22
10013598:	dd800815 	stw	r22,32(sp)
1001359c:	002d883a 	mov	r22,zero
100135a0:	003de406 	br	10012d34 <__alt_data_end+0xf0012d34>
100135a4:	d9000517 	ldw	r4,20(sp)
100135a8:	0020ea00 	call	10020ea0 <__floatsidf>
100135ac:	1009883a 	mov	r4,r2
100135b0:	180b883a 	mov	r5,r3
100135b4:	b00d883a 	mov	r6,r22
100135b8:	a80f883a 	mov	r7,r21
100135bc:	001fbe00 	call	1001fbe0 <__eqdf2>
100135c0:	103dc726 	beq	r2,zero,10012ce0 <__alt_data_end+0xf0012ce0>
100135c4:	d8800517 	ldw	r2,20(sp)
100135c8:	10bfffc4 	addi	r2,r2,-1
100135cc:	d8800515 	stw	r2,20(sp)
100135d0:	003dc306 	br	10012ce0 <__alt_data_end+0xf0012ce0>
100135d4:	dd400917 	ldw	r21,36(sp)
100135d8:	dd000817 	ldw	r20,32(sp)
100135dc:	0023883a 	mov	r17,zero
100135e0:	003fa906 	br	10013488 <__alt_data_end+0xf0013488>
100135e4:	d9800317 	ldw	r6,12(sp)
100135e8:	b981670e 	bge	r23,r6,10013b88 <_dtoa_r+0x110c>
100135ec:	0027883a 	mov	r19,zero
100135f0:	d8c00a17 	ldw	r3,40(sp)
100135f4:	183fd21e 	bne	r3,zero,10013540 <__alt_data_end+0xf0013540>
100135f8:	00800044 	movi	r2,1
100135fc:	1585883a 	add	r2,r2,r22
10013600:	108007cc 	andi	r2,r2,31
10013604:	10005f26 	beq	r2,zero,10013784 <_dtoa_r+0xd08>
10013608:	00c00804 	movi	r3,32
1001360c:	1887c83a 	sub	r3,r3,r2
10013610:	01000104 	movi	r4,4
10013614:	20c2dd0e 	bge	r4,r3,1001418c <_dtoa_r+0x1710>
10013618:	d9000817 	ldw	r4,32(sp)
1001361c:	00c00704 	movi	r3,28
10013620:	1885c83a 	sub	r2,r3,r2
10013624:	2089883a 	add	r4,r4,r2
10013628:	d9000815 	stw	r4,32(sp)
1001362c:	a0a9883a 	add	r20,r20,r2
10013630:	b0ad883a 	add	r22,r22,r2
10013634:	d8800817 	ldw	r2,32(sp)
10013638:	0080050e 	bge	zero,r2,10013650 <_dtoa_r+0xbd4>
1001363c:	e00b883a 	mov	r5,fp
10013640:	8009883a 	mov	r4,r16
10013644:	100d883a 	mov	r6,r2
10013648:	0016aac0 	call	10016aac <__lshift>
1001364c:	1039883a 	mov	fp,r2
10013650:	0580050e 	bge	zero,r22,10013668 <_dtoa_r+0xbec>
10013654:	a80b883a 	mov	r5,r21
10013658:	8009883a 	mov	r4,r16
1001365c:	b00d883a 	mov	r6,r22
10013660:	0016aac0 	call	10016aac <__lshift>
10013664:	102b883a 	mov	r21,r2
10013668:	d8c00c17 	ldw	r3,48(sp)
1001366c:	1801161e 	bne	r3,zero,10013ac8 <_dtoa_r+0x104c>
10013670:	d8c00617 	ldw	r3,24(sp)
10013674:	00c12d0e 	bge	zero,r3,10013b2c <_dtoa_r+0x10b0>
10013678:	d8c00b17 	ldw	r3,44(sp)
1001367c:	1800571e 	bne	r3,zero,100137dc <_dtoa_r+0xd60>
10013680:	dc800717 	ldw	r18,28(sp)
10013684:	dcc00617 	ldw	r19,24(sp)
10013688:	9029883a 	mov	r20,r18
1001368c:	00000206 	br	10013698 <_dtoa_r+0xc1c>
10013690:	00164040 	call	10016404 <__multadd>
10013694:	1039883a 	mov	fp,r2
10013698:	e009883a 	mov	r4,fp
1001369c:	a80b883a 	mov	r5,r21
100136a0:	001287c0 	call	1001287c <quorem>
100136a4:	10800c04 	addi	r2,r2,48
100136a8:	90800005 	stb	r2,0(r18)
100136ac:	94800044 	addi	r18,r18,1
100136b0:	9507c83a 	sub	r3,r18,r20
100136b4:	8009883a 	mov	r4,r16
100136b8:	e00b883a 	mov	r5,fp
100136bc:	01800284 	movi	r6,10
100136c0:	000f883a 	mov	r7,zero
100136c4:	1cfff216 	blt	r3,r19,10013690 <__alt_data_end+0xf0013690>
100136c8:	1011883a 	mov	r8,r2
100136cc:	d8800617 	ldw	r2,24(sp)
100136d0:	00822e0e 	bge	zero,r2,10013f8c <_dtoa_r+0x1510>
100136d4:	d9000717 	ldw	r4,28(sp)
100136d8:	0025883a 	mov	r18,zero
100136dc:	20af883a 	add	r23,r4,r2
100136e0:	e00b883a 	mov	r5,fp
100136e4:	01800044 	movi	r6,1
100136e8:	8009883a 	mov	r4,r16
100136ec:	da001715 	stw	r8,92(sp)
100136f0:	0016aac0 	call	10016aac <__lshift>
100136f4:	1009883a 	mov	r4,r2
100136f8:	a80b883a 	mov	r5,r21
100136fc:	1039883a 	mov	fp,r2
10013700:	0016bf40 	call	10016bf4 <__mcmp>
10013704:	da001717 	ldw	r8,92(sp)
10013708:	00816e0e 	bge	zero,r2,10013cc4 <_dtoa_r+0x1248>
1001370c:	b93fffc3 	ldbu	r4,-1(r23)
10013710:	b8bfffc4 	addi	r2,r23,-1
10013714:	1007883a 	mov	r3,r2
10013718:	01800e44 	movi	r6,57
1001371c:	d9c00717 	ldw	r7,28(sp)
10013720:	00000506 	br	10013738 <_dtoa_r+0xcbc>
10013724:	18ffffc4 	addi	r3,r3,-1
10013728:	38811926 	beq	r7,r2,10013b90 <_dtoa_r+0x1114>
1001372c:	19000003 	ldbu	r4,0(r3)
10013730:	102f883a 	mov	r23,r2
10013734:	10bfffc4 	addi	r2,r2,-1
10013738:	21403fcc 	andi	r5,r4,255
1001373c:	2940201c 	xori	r5,r5,128
10013740:	297fe004 	addi	r5,r5,-128
10013744:	29bff726 	beq	r5,r6,10013724 <__alt_data_end+0xf0013724>
10013748:	21000044 	addi	r4,r4,1
1001374c:	11000005 	stb	r4,0(r2)
10013750:	8009883a 	mov	r4,r16
10013754:	a80b883a 	mov	r5,r21
10013758:	00163dc0 	call	100163dc <_Bfree>
1001375c:	883e7526 	beq	r17,zero,10013134 <__alt_data_end+0xf0013134>
10013760:	90000426 	beq	r18,zero,10013774 <_dtoa_r+0xcf8>
10013764:	94400326 	beq	r18,r17,10013774 <_dtoa_r+0xcf8>
10013768:	8009883a 	mov	r4,r16
1001376c:	900b883a 	mov	r5,r18
10013770:	00163dc0 	call	100163dc <_Bfree>
10013774:	8009883a 	mov	r4,r16
10013778:	880b883a 	mov	r5,r17
1001377c:	00163dc0 	call	100163dc <_Bfree>
10013780:	003e6c06 	br	10013134 <__alt_data_end+0xf0013134>
10013784:	00800704 	movi	r2,28
10013788:	d9800817 	ldw	r6,32(sp)
1001378c:	a0a9883a 	add	r20,r20,r2
10013790:	b0ad883a 	add	r22,r22,r2
10013794:	308d883a 	add	r6,r6,r2
10013798:	d9800815 	stw	r6,32(sp)
1001379c:	003fa506 	br	10013634 <__alt_data_end+0xf0013634>
100137a0:	013efb84 	movi	r4,-1042
100137a4:	246bc83a 	sub	r21,r4,r17
100137a8:	9548983a 	sll	r4,r18,r21
100137ac:	003d1806 	br	10012c10 <__alt_data_end+0xf0012c10>
100137b0:	d8000c15 	stw	zero,48(sp)
100137b4:	003d5b06 	br	10012d24 <__alt_data_end+0xf0012d24>
100137b8:	880b883a 	mov	r5,r17
100137bc:	8009883a 	mov	r4,r16
100137c0:	01800284 	movi	r6,10
100137c4:	000f883a 	mov	r7,zero
100137c8:	00164040 	call	10016404 <__multadd>
100137cc:	1023883a 	mov	r17,r2
100137d0:	d8800d17 	ldw	r2,52(sp)
100137d4:	0082550e 	bge	zero,r2,1001412c <_dtoa_r+0x16b0>
100137d8:	d8800615 	stw	r2,24(sp)
100137dc:	0500050e 	bge	zero,r20,100137f4 <_dtoa_r+0xd78>
100137e0:	880b883a 	mov	r5,r17
100137e4:	8009883a 	mov	r4,r16
100137e8:	a00d883a 	mov	r6,r20
100137ec:	0016aac0 	call	10016aac <__lshift>
100137f0:	1023883a 	mov	r17,r2
100137f4:	98016a1e 	bne	r19,zero,10013da0 <_dtoa_r+0x1324>
100137f8:	8829883a 	mov	r20,r17
100137fc:	d9000617 	ldw	r4,24(sp)
10013800:	dcc00717 	ldw	r19,28(sp)
10013804:	9480004c 	andi	r18,r18,1
10013808:	20bfffc4 	addi	r2,r4,-1
1001380c:	9885883a 	add	r2,r19,r2
10013810:	d8800415 	stw	r2,16(sp)
10013814:	dc800615 	stw	r18,24(sp)
10013818:	e009883a 	mov	r4,fp
1001381c:	a80b883a 	mov	r5,r21
10013820:	001287c0 	call	1001287c <quorem>
10013824:	e009883a 	mov	r4,fp
10013828:	880b883a 	mov	r5,r17
1001382c:	102f883a 	mov	r23,r2
10013830:	0016bf40 	call	10016bf4 <__mcmp>
10013834:	8009883a 	mov	r4,r16
10013838:	a80b883a 	mov	r5,r21
1001383c:	a00d883a 	mov	r6,r20
10013840:	102d883a 	mov	r22,r2
10013844:	0016c540 	call	10016c54 <__mdiff>
10013848:	1007883a 	mov	r3,r2
1001384c:	10800317 	ldw	r2,12(r2)
10013850:	bc800c04 	addi	r18,r23,48
10013854:	1000971e 	bne	r2,zero,10013ab4 <_dtoa_r+0x1038>
10013858:	180b883a 	mov	r5,r3
1001385c:	e009883a 	mov	r4,fp
10013860:	d8c01515 	stw	r3,84(sp)
10013864:	0016bf40 	call	10016bf4 <__mcmp>
10013868:	d8c01517 	ldw	r3,84(sp)
1001386c:	8009883a 	mov	r4,r16
10013870:	d8801515 	stw	r2,84(sp)
10013874:	180b883a 	mov	r5,r3
10013878:	00163dc0 	call	100163dc <_Bfree>
1001387c:	d8801517 	ldw	r2,84(sp)
10013880:	1000041e 	bne	r2,zero,10013894 <_dtoa_r+0xe18>
10013884:	d9800317 	ldw	r6,12(sp)
10013888:	3000021e 	bne	r6,zero,10013894 <_dtoa_r+0xe18>
1001388c:	d8c00617 	ldw	r3,24(sp)
10013890:	18007626 	beq	r3,zero,10013a6c <_dtoa_r+0xff0>
10013894:	b0005b16 	blt	r22,zero,10013a04 <_dtoa_r+0xf88>
10013898:	b000041e 	bne	r22,zero,100138ac <_dtoa_r+0xe30>
1001389c:	d9000317 	ldw	r4,12(sp)
100138a0:	2000021e 	bne	r4,zero,100138ac <_dtoa_r+0xe30>
100138a4:	d8c00617 	ldw	r3,24(sp)
100138a8:	18005626 	beq	r3,zero,10013a04 <_dtoa_r+0xf88>
100138ac:	00814d16 	blt	zero,r2,10013de4 <_dtoa_r+0x1368>
100138b0:	d8c00417 	ldw	r3,16(sp)
100138b4:	9d800044 	addi	r22,r19,1
100138b8:	9c800005 	stb	r18,0(r19)
100138bc:	b02f883a 	mov	r23,r22
100138c0:	98c14c26 	beq	r19,r3,10013df4 <_dtoa_r+0x1378>
100138c4:	e00b883a 	mov	r5,fp
100138c8:	8009883a 	mov	r4,r16
100138cc:	01800284 	movi	r6,10
100138d0:	000f883a 	mov	r7,zero
100138d4:	00164040 	call	10016404 <__multadd>
100138d8:	1039883a 	mov	fp,r2
100138dc:	8d006d26 	beq	r17,r20,10013a94 <_dtoa_r+0x1018>
100138e0:	880b883a 	mov	r5,r17
100138e4:	01800284 	movi	r6,10
100138e8:	000f883a 	mov	r7,zero
100138ec:	8009883a 	mov	r4,r16
100138f0:	00164040 	call	10016404 <__multadd>
100138f4:	a00b883a 	mov	r5,r20
100138f8:	8009883a 	mov	r4,r16
100138fc:	01800284 	movi	r6,10
10013900:	000f883a 	mov	r7,zero
10013904:	1023883a 	mov	r17,r2
10013908:	00164040 	call	10016404 <__multadd>
1001390c:	1029883a 	mov	r20,r2
10013910:	b027883a 	mov	r19,r22
10013914:	003fc006 	br	10013818 <__alt_data_end+0xf0013818>
10013918:	a005883a 	mov	r2,r20
1001391c:	003ede06 	br	10013498 <__alt_data_end+0xf0013498>
10013920:	01000044 	movi	r4,1
10013924:	d9000b15 	stw	r4,44(sp)
10013928:	d9802217 	ldw	r6,136(sp)
1001392c:	0180dc0e 	bge	zero,r6,10013ca0 <_dtoa_r+0x1224>
10013930:	3023883a 	mov	r17,r6
10013934:	d9800d15 	stw	r6,52(sp)
10013938:	d9800615 	stw	r6,24(sp)
1001393c:	003d1e06 	br	10012db8 <__alt_data_end+0xf0012db8>
10013940:	d8800617 	ldw	r2,24(sp)
10013944:	00be3716 	blt	zero,r2,10013224 <__alt_data_end+0xf0013224>
10013948:	1000be1e 	bne	r2,zero,10013c44 <_dtoa_r+0x11c8>
1001394c:	8809883a 	mov	r4,r17
10013950:	a00b883a 	mov	r5,r20
10013954:	000d883a 	mov	r6,zero
10013958:	01d00534 	movhi	r7,16404
1001395c:	001fe240 	call	1001fe24 <__muldf3>
10013960:	1009883a 	mov	r4,r2
10013964:	180b883a 	mov	r5,r3
10013968:	900d883a 	mov	r6,r18
1001396c:	980f883a 	mov	r7,r19
10013970:	001fc640 	call	1001fc64 <__gedf2>
10013974:	002b883a 	mov	r21,zero
10013978:	0023883a 	mov	r17,zero
1001397c:	10007a16 	blt	r2,zero,10013b68 <_dtoa_r+0x10ec>
10013980:	d9002217 	ldw	r4,136(sp)
10013984:	ddc00717 	ldw	r23,28(sp)
10013988:	0108303a 	nor	r4,zero,r4
1001398c:	d9000515 	stw	r4,20(sp)
10013990:	8009883a 	mov	r4,r16
10013994:	a80b883a 	mov	r5,r21
10013998:	00163dc0 	call	100163dc <_Bfree>
1001399c:	883f751e 	bne	r17,zero,10013774 <__alt_data_end+0xf0013774>
100139a0:	003de406 	br	10013134 <__alt_data_end+0xf0013134>
100139a4:	e00b883a 	mov	r5,fp
100139a8:	8009883a 	mov	r4,r16
100139ac:	001696c0 	call	1001696c <__pow5mult>
100139b0:	1039883a 	mov	fp,r2
100139b4:	003ed306 	br	10013504 <__alt_data_end+0xf0013504>
100139b8:	903ee01e 	bne	r18,zero,1001353c <__alt_data_end+0xf001353c>
100139bc:	00800434 	movhi	r2,16
100139c0:	10bfffc4 	addi	r2,r2,-1
100139c4:	9884703a 	and	r2,r19,r2
100139c8:	103f081e 	bne	r2,zero,100135ec <__alt_data_end+0xf00135ec>
100139cc:	9cdffc2c 	andhi	r19,r19,32752
100139d0:	983f0626 	beq	r19,zero,100135ec <__alt_data_end+0xf00135ec>
100139d4:	d8800817 	ldw	r2,32(sp)
100139d8:	b5800044 	addi	r22,r22,1
100139dc:	04c00044 	movi	r19,1
100139e0:	10800044 	addi	r2,r2,1
100139e4:	d8800815 	stw	r2,32(sp)
100139e8:	003f0106 	br	100135f0 <__alt_data_end+0xf00135f0>
100139ec:	d9800f17 	ldw	r6,60(sp)
100139f0:	30016826 	beq	r6,zero,10013f94 <_dtoa_r+0x1518>
100139f4:	10810cc4 	addi	r2,r2,1075
100139f8:	dd400917 	ldw	r21,36(sp)
100139fc:	dd000817 	ldw	r20,32(sp)
10013a00:	003e9906 	br	10013468 <__alt_data_end+0xf0013468>
10013a04:	9011883a 	mov	r8,r18
10013a08:	4007883a 	mov	r3,r8
10013a0c:	e02d883a 	mov	r22,fp
10013a10:	0080100e 	bge	zero,r2,10013a54 <_dtoa_r+0xfd8>
10013a14:	01800044 	movi	r6,1
10013a18:	8009883a 	mov	r4,r16
10013a1c:	e00b883a 	mov	r5,fp
10013a20:	da001515 	stw	r8,84(sp)
10013a24:	da001715 	stw	r8,92(sp)
10013a28:	0016aac0 	call	10016aac <__lshift>
10013a2c:	1009883a 	mov	r4,r2
10013a30:	a80b883a 	mov	r5,r21
10013a34:	102d883a 	mov	r22,r2
10013a38:	0016bf40 	call	10016bf4 <__mcmp>
10013a3c:	d8c01517 	ldw	r3,84(sp)
10013a40:	da001717 	ldw	r8,92(sp)
10013a44:	0081a50e 	bge	zero,r2,100140dc <_dtoa_r+0x1660>
10013a48:	00800e44 	movi	r2,57
10013a4c:	40817b26 	beq	r8,r2,1001403c <_dtoa_r+0x15c0>
10013a50:	40c00044 	addi	r3,r8,1
10013a54:	8825883a 	mov	r18,r17
10013a58:	9dc00044 	addi	r23,r19,1
10013a5c:	98c00005 	stb	r3,0(r19)
10013a60:	a023883a 	mov	r17,r20
10013a64:	b039883a 	mov	fp,r22
10013a68:	003f3906 	br	10013750 <__alt_data_end+0xf0013750>
10013a6c:	00800e44 	movi	r2,57
10013a70:	9011883a 	mov	r8,r18
10013a74:	90817226 	beq	r18,r2,10014040 <_dtoa_r+0x15c4>
10013a78:	0580010e 	bge	zero,r22,10013a80 <_dtoa_r+0x1004>
10013a7c:	ba000c44 	addi	r8,r23,49
10013a80:	8825883a 	mov	r18,r17
10013a84:	9dc00044 	addi	r23,r19,1
10013a88:	9a000005 	stb	r8,0(r19)
10013a8c:	a023883a 	mov	r17,r20
10013a90:	003f2f06 	br	10013750 <__alt_data_end+0xf0013750>
10013a94:	880b883a 	mov	r5,r17
10013a98:	8009883a 	mov	r4,r16
10013a9c:	01800284 	movi	r6,10
10013aa0:	000f883a 	mov	r7,zero
10013aa4:	00164040 	call	10016404 <__multadd>
10013aa8:	1023883a 	mov	r17,r2
10013aac:	1029883a 	mov	r20,r2
10013ab0:	003f9706 	br	10013910 <__alt_data_end+0xf0013910>
10013ab4:	8009883a 	mov	r4,r16
10013ab8:	180b883a 	mov	r5,r3
10013abc:	00163dc0 	call	100163dc <_Bfree>
10013ac0:	00800044 	movi	r2,1
10013ac4:	003f7306 	br	10013894 <__alt_data_end+0xf0013894>
10013ac8:	e009883a 	mov	r4,fp
10013acc:	a80b883a 	mov	r5,r21
10013ad0:	0016bf40 	call	10016bf4 <__mcmp>
10013ad4:	103ee60e 	bge	r2,zero,10013670 <__alt_data_end+0xf0013670>
10013ad8:	8009883a 	mov	r4,r16
10013adc:	e00b883a 	mov	r5,fp
10013ae0:	01800284 	movi	r6,10
10013ae4:	000f883a 	mov	r7,zero
10013ae8:	00164040 	call	10016404 <__multadd>
10013aec:	d9000517 	ldw	r4,20(sp)
10013af0:	d9800b17 	ldw	r6,44(sp)
10013af4:	1039883a 	mov	fp,r2
10013af8:	213fffc4 	addi	r4,r4,-1
10013afc:	d9000515 	stw	r4,20(sp)
10013b00:	303f2d1e 	bne	r6,zero,100137b8 <__alt_data_end+0xf00137b8>
10013b04:	d9000d17 	ldw	r4,52(sp)
10013b08:	0101780e 	bge	zero,r4,100140ec <_dtoa_r+0x1670>
10013b0c:	d9000615 	stw	r4,24(sp)
10013b10:	003edb06 	br	10013680 <__alt_data_end+0xf0013680>
10013b14:	00800084 	movi	r2,2
10013b18:	30818e1e 	bne	r6,r2,10014154 <_dtoa_r+0x16d8>
10013b1c:	d8000b15 	stw	zero,44(sp)
10013b20:	003f8106 	br	10013928 <__alt_data_end+0xf0013928>
10013b24:	d8800717 	ldw	r2,28(sp)
10013b28:	003c0306 	br	10012b38 <__alt_data_end+0xf0012b38>
10013b2c:	d9000317 	ldw	r4,12(sp)
10013b30:	00800084 	movi	r2,2
10013b34:	113ed00e 	bge	r2,r4,10013678 <__alt_data_end+0xf0013678>
10013b38:	d8c00617 	ldw	r3,24(sp)
10013b3c:	183f901e 	bne	r3,zero,10013980 <__alt_data_end+0xf0013980>
10013b40:	a80b883a 	mov	r5,r21
10013b44:	8009883a 	mov	r4,r16
10013b48:	01800144 	movi	r6,5
10013b4c:	000f883a 	mov	r7,zero
10013b50:	00164040 	call	10016404 <__multadd>
10013b54:	e009883a 	mov	r4,fp
10013b58:	100b883a 	mov	r5,r2
10013b5c:	102b883a 	mov	r21,r2
10013b60:	0016bf40 	call	10016bf4 <__mcmp>
10013b64:	00bf860e 	bge	zero,r2,10013980 <__alt_data_end+0xf0013980>
10013b68:	d9800717 	ldw	r6,28(sp)
10013b6c:	00800c44 	movi	r2,49
10013b70:	30800005 	stb	r2,0(r6)
10013b74:	d8800517 	ldw	r2,20(sp)
10013b78:	35c00044 	addi	r23,r6,1
10013b7c:	10800044 	addi	r2,r2,1
10013b80:	d8800515 	stw	r2,20(sp)
10013b84:	003f8206 	br	10013990 <__alt_data_end+0xf0013990>
10013b88:	903e981e 	bne	r18,zero,100135ec <__alt_data_end+0xf00135ec>
10013b8c:	003f8b06 	br	100139bc <__alt_data_end+0xf00139bc>
10013b90:	d9800517 	ldw	r6,20(sp)
10013b94:	d8c00717 	ldw	r3,28(sp)
10013b98:	00800c44 	movi	r2,49
10013b9c:	31800044 	addi	r6,r6,1
10013ba0:	d9800515 	stw	r6,20(sp)
10013ba4:	18800005 	stb	r2,0(r3)
10013ba8:	003ee906 	br	10013750 <__alt_data_end+0xf0013750>
10013bac:	dc000317 	ldw	r16,12(sp)
10013bb0:	003d6006 	br	10013134 <__alt_data_end+0xf0013134>
10013bb4:	8809883a 	mov	r4,r17
10013bb8:	0020ea00 	call	10020ea0 <__floatsidf>
10013bbc:	a009883a 	mov	r4,r20
10013bc0:	a80b883a 	mov	r5,r21
10013bc4:	100d883a 	mov	r6,r2
10013bc8:	180f883a 	mov	r7,r3
10013bcc:	001fe240 	call	1001fe24 <__muldf3>
10013bd0:	1009883a 	mov	r4,r2
10013bd4:	180b883a 	mov	r5,r3
10013bd8:	000d883a 	mov	r6,zero
10013bdc:	01d00734 	movhi	r7,16412
10013be0:	001ea780 	call	1001ea78 <__adddf3>
10013be4:	1023883a 	mov	r17,r2
10013be8:	00bf3034 	movhi	r2,64704
10013bec:	1885883a 	add	r2,r3,r2
10013bf0:	d8800e15 	stw	r2,56(sp)
10013bf4:	a009883a 	mov	r4,r20
10013bf8:	a80b883a 	mov	r5,r21
10013bfc:	000d883a 	mov	r6,zero
10013c00:	01d00534 	movhi	r7,16404
10013c04:	00205480 	call	10020548 <__subdf3>
10013c08:	d9c00e17 	ldw	r7,56(sp)
10013c0c:	1009883a 	mov	r4,r2
10013c10:	180b883a 	mov	r5,r3
10013c14:	880d883a 	mov	r6,r17
10013c18:	102b883a 	mov	r21,r2
10013c1c:	1829883a 	mov	r20,r3
10013c20:	001fc640 	call	1001fc64 <__gedf2>
10013c24:	00807716 	blt	zero,r2,10013e04 <_dtoa_r+0x1388>
10013c28:	d8800e17 	ldw	r2,56(sp)
10013c2c:	a809883a 	mov	r4,r21
10013c30:	a00b883a 	mov	r5,r20
10013c34:	11e0003c 	xorhi	r7,r2,32768
10013c38:	880d883a 	mov	r6,r17
10013c3c:	001fd440 	call	1001fd44 <__ledf2>
10013c40:	103d6b0e 	bge	r2,zero,100131f0 <__alt_data_end+0xf00131f0>
10013c44:	002b883a 	mov	r21,zero
10013c48:	0023883a 	mov	r17,zero
10013c4c:	003f4c06 	br	10013980 <__alt_data_end+0xf0013980>
10013c50:	d9800917 	ldw	r6,36(sp)
10013c54:	e00b883a 	mov	r5,fp
10013c58:	8009883a 	mov	r4,r16
10013c5c:	001696c0 	call	1001696c <__pow5mult>
10013c60:	1039883a 	mov	fp,r2
10013c64:	003e2706 	br	10013504 <__alt_data_end+0xf0013504>
10013c68:	d8000b15 	stw	zero,44(sp)
10013c6c:	003c4906 	br	10012d94 <__alt_data_end+0xf0012d94>
10013c70:	d9000917 	ldw	r4,36(sp)
10013c74:	d9800a17 	ldw	r6,40(sp)
10013c78:	dd400915 	stw	r21,36(sp)
10013c7c:	a905c83a 	sub	r2,r21,r4
10013c80:	308d883a 	add	r6,r6,r2
10013c84:	d9800a15 	stw	r6,40(sp)
10013c88:	002b883a 	mov	r21,zero
10013c8c:	003df206 	br	10013458 <__alt_data_end+0xf0013458>
10013c90:	dc800e15 	stw	r18,56(sp)
10013c94:	982b883a 	mov	r21,r19
10013c98:	04400084 	movi	r17,2
10013c9c:	003c7406 	br	10012e70 <__alt_data_end+0xf0012e70>
10013ca0:	04400044 	movi	r17,1
10013ca4:	dc400d15 	stw	r17,52(sp)
10013ca8:	dc400615 	stw	r17,24(sp)
10013cac:	dc402215 	stw	r17,136(sp)
10013cb0:	80001115 	stw	zero,68(r16)
10013cb4:	000b883a 	mov	r5,zero
10013cb8:	003c4a06 	br	10012de4 <__alt_data_end+0xf0012de4>
10013cbc:	3023883a 	mov	r17,r6
10013cc0:	003ffb06 	br	10013cb0 <__alt_data_end+0xf0013cb0>
10013cc4:	1000021e 	bne	r2,zero,10013cd0 <_dtoa_r+0x1254>
10013cc8:	4200004c 	andi	r8,r8,1
10013ccc:	403e8f1e 	bne	r8,zero,1001370c <__alt_data_end+0xf001370c>
10013cd0:	01000c04 	movi	r4,48
10013cd4:	00000106 	br	10013cdc <_dtoa_r+0x1260>
10013cd8:	102f883a 	mov	r23,r2
10013cdc:	b8bfffc4 	addi	r2,r23,-1
10013ce0:	10c00007 	ldb	r3,0(r2)
10013ce4:	193ffc26 	beq	r3,r4,10013cd8 <__alt_data_end+0xf0013cd8>
10013ce8:	003e9906 	br	10013750 <__alt_data_end+0xf0013750>
10013cec:	d9000517 	ldw	r4,20(sp)
10013cf0:	012fc83a 	sub	r23,zero,r4
10013cf4:	b800ad26 	beq	r23,zero,10013fac <_dtoa_r+0x1530>
10013cf8:	b88003cc 	andi	r2,r23,15
10013cfc:	100490fa 	slli	r2,r2,3
10013d00:	00c400b4 	movhi	r3,4098
10013d04:	18d52004 	addi	r3,r3,21632
10013d08:	1885883a 	add	r2,r3,r2
10013d0c:	11800017 	ldw	r6,0(r2)
10013d10:	11c00117 	ldw	r7,4(r2)
10013d14:	b82fd13a 	srai	r23,r23,4
10013d18:	9009883a 	mov	r4,r18
10013d1c:	980b883a 	mov	r5,r19
10013d20:	001fe240 	call	1001fe24 <__muldf3>
10013d24:	1029883a 	mov	r20,r2
10013d28:	182b883a 	mov	r21,r3
10013d2c:	b800f426 	beq	r23,zero,10014100 <_dtoa_r+0x1684>
10013d30:	020400b4 	movhi	r8,4098
10013d34:	42151604 	addi	r8,r8,21592
10013d38:	8029883a 	mov	r20,r16
10013d3c:	04400084 	movi	r17,2
10013d40:	4021883a 	mov	r16,r8
10013d44:	b980004c 	andi	r6,r23,1
10013d48:	1009883a 	mov	r4,r2
10013d4c:	b82fd07a 	srai	r23,r23,1
10013d50:	180b883a 	mov	r5,r3
10013d54:	30000426 	beq	r6,zero,10013d68 <_dtoa_r+0x12ec>
10013d58:	81800017 	ldw	r6,0(r16)
10013d5c:	81c00117 	ldw	r7,4(r16)
10013d60:	8c400044 	addi	r17,r17,1
10013d64:	001fe240 	call	1001fe24 <__muldf3>
10013d68:	84000204 	addi	r16,r16,8
10013d6c:	b83ff51e 	bne	r23,zero,10013d44 <__alt_data_end+0xf0013d44>
10013d70:	a021883a 	mov	r16,r20
10013d74:	182b883a 	mov	r21,r3
10013d78:	1029883a 	mov	r20,r2
10013d7c:	003c5506 	br	10012ed4 <__alt_data_end+0xf0012ed4>
10013d80:	d9800517 	ldw	r6,20(sp)
10013d84:	d9000717 	ldw	r4,28(sp)
10013d88:	00c00c04 	movi	r3,48
10013d8c:	31800044 	addi	r6,r6,1
10013d90:	d9800515 	stw	r6,20(sp)
10013d94:	20c00005 	stb	r3,0(r4)
10013d98:	02000c44 	movi	r8,49
10013d9c:	003da206 	br	10013428 <__alt_data_end+0xf0013428>
10013da0:	89400117 	ldw	r5,4(r17)
10013da4:	8009883a 	mov	r4,r16
10013da8:	00163340 	call	10016334 <_Balloc>
10013dac:	89800417 	ldw	r6,16(r17)
10013db0:	11000304 	addi	r4,r2,12
10013db4:	89400304 	addi	r5,r17,12
10013db8:	31800084 	addi	r6,r6,2
10013dbc:	318d883a 	add	r6,r6,r6
10013dc0:	318d883a 	add	r6,r6,r6
10013dc4:	1027883a 	mov	r19,r2
10013dc8:	000c7840 	call	1000c784 <memcpy>
10013dcc:	8009883a 	mov	r4,r16
10013dd0:	980b883a 	mov	r5,r19
10013dd4:	01800044 	movi	r6,1
10013dd8:	0016aac0 	call	10016aac <__lshift>
10013ddc:	1029883a 	mov	r20,r2
10013de0:	003e8606 	br	100137fc <__alt_data_end+0xf00137fc>
10013de4:	00800e44 	movi	r2,57
10013de8:	90809526 	beq	r18,r2,10014040 <_dtoa_r+0x15c4>
10013dec:	92000044 	addi	r8,r18,1
10013df0:	003f2306 	br	10013a80 <__alt_data_end+0xf0013a80>
10013df4:	9011883a 	mov	r8,r18
10013df8:	8825883a 	mov	r18,r17
10013dfc:	a023883a 	mov	r17,r20
10013e00:	003e3706 	br	100136e0 <__alt_data_end+0xf00136e0>
10013e04:	002b883a 	mov	r21,zero
10013e08:	0023883a 	mov	r17,zero
10013e0c:	003f5606 	br	10013b68 <__alt_data_end+0xf0013b68>
10013e10:	51bfffc4 	addi	r6,r10,-1
10013e14:	300490fa 	slli	r2,r6,3
10013e18:	00c400b4 	movhi	r3,4098
10013e1c:	18d52004 	addi	r3,r3,21632
10013e20:	1885883a 	add	r2,r3,r2
10013e24:	d9c00e17 	ldw	r7,56(sp)
10013e28:	11000017 	ldw	r4,0(r2)
10013e2c:	11400117 	ldw	r5,4(r2)
10013e30:	d8800717 	ldw	r2,28(sp)
10013e34:	d9801015 	stw	r6,64(sp)
10013e38:	880d883a 	mov	r6,r17
10013e3c:	da801615 	stw	r10,88(sp)
10013e40:	15c00044 	addi	r23,r2,1
10013e44:	001fe240 	call	1001fe24 <__muldf3>
10013e48:	a80b883a 	mov	r5,r21
10013e4c:	a009883a 	mov	r4,r20
10013e50:	d8c01115 	stw	r3,68(sp)
10013e54:	d8800e15 	stw	r2,56(sp)
10013e58:	0020e180 	call	10020e18 <__fixdfsi>
10013e5c:	1009883a 	mov	r4,r2
10013e60:	1023883a 	mov	r17,r2
10013e64:	0020ea00 	call	10020ea0 <__floatsidf>
10013e68:	a009883a 	mov	r4,r20
10013e6c:	a80b883a 	mov	r5,r21
10013e70:	100d883a 	mov	r6,r2
10013e74:	180f883a 	mov	r7,r3
10013e78:	00205480 	call	10020548 <__subdf3>
10013e7c:	1813883a 	mov	r9,r3
10013e80:	d8c00717 	ldw	r3,28(sp)
10013e84:	8c400c04 	addi	r17,r17,48
10013e88:	1011883a 	mov	r8,r2
10013e8c:	1c400005 	stb	r17,0(r3)
10013e90:	da801617 	ldw	r10,88(sp)
10013e94:	00800044 	movi	r2,1
10013e98:	50802326 	beq	r10,r2,10013f28 <_dtoa_r+0x14ac>
10013e9c:	d8800717 	ldw	r2,28(sp)
10013ea0:	b82b883a 	mov	r21,r23
10013ea4:	dc001315 	stw	r16,76(sp)
10013ea8:	12a9883a 	add	r20,r2,r10
10013eac:	4807883a 	mov	r3,r9
10013eb0:	4005883a 	mov	r2,r8
10013eb4:	dc801415 	stw	r18,80(sp)
10013eb8:	000d883a 	mov	r6,zero
10013ebc:	01d00934 	movhi	r7,16420
10013ec0:	1009883a 	mov	r4,r2
10013ec4:	180b883a 	mov	r5,r3
10013ec8:	001fe240 	call	1001fe24 <__muldf3>
10013ecc:	180b883a 	mov	r5,r3
10013ed0:	1009883a 	mov	r4,r2
10013ed4:	1821883a 	mov	r16,r3
10013ed8:	1025883a 	mov	r18,r2
10013edc:	0020e180 	call	10020e18 <__fixdfsi>
10013ee0:	1009883a 	mov	r4,r2
10013ee4:	1023883a 	mov	r17,r2
10013ee8:	0020ea00 	call	10020ea0 <__floatsidf>
10013eec:	9009883a 	mov	r4,r18
10013ef0:	800b883a 	mov	r5,r16
10013ef4:	100d883a 	mov	r6,r2
10013ef8:	180f883a 	mov	r7,r3
10013efc:	8c400c04 	addi	r17,r17,48
10013f00:	00205480 	call	10020548 <__subdf3>
10013f04:	ad400044 	addi	r21,r21,1
10013f08:	ac7fffc5 	stb	r17,-1(r21)
10013f0c:	ad3fea1e 	bne	r21,r20,10013eb8 <__alt_data_end+0xf0013eb8>
10013f10:	1813883a 	mov	r9,r3
10013f14:	d8c01017 	ldw	r3,64(sp)
10013f18:	dc001317 	ldw	r16,76(sp)
10013f1c:	dc801417 	ldw	r18,80(sp)
10013f20:	1011883a 	mov	r8,r2
10013f24:	b8ef883a 	add	r23,r23,r3
10013f28:	d9000e17 	ldw	r4,56(sp)
10013f2c:	d9401117 	ldw	r5,68(sp)
10013f30:	000d883a 	mov	r6,zero
10013f34:	01cff834 	movhi	r7,16352
10013f38:	da001715 	stw	r8,92(sp)
10013f3c:	da401515 	stw	r9,84(sp)
10013f40:	001ea780 	call	1001ea78 <__adddf3>
10013f44:	da001717 	ldw	r8,92(sp)
10013f48:	da401517 	ldw	r9,84(sp)
10013f4c:	1009883a 	mov	r4,r2
10013f50:	400d883a 	mov	r6,r8
10013f54:	480f883a 	mov	r7,r9
10013f58:	180b883a 	mov	r5,r3
10013f5c:	001fd440 	call	1001fd44 <__ledf2>
10013f60:	da001717 	ldw	r8,92(sp)
10013f64:	da401517 	ldw	r9,84(sp)
10013f68:	10003b0e 	bge	r2,zero,10014058 <_dtoa_r+0x15dc>
10013f6c:	d9001217 	ldw	r4,72(sp)
10013f70:	bd7fffc3 	ldbu	r21,-1(r23)
10013f74:	d9000515 	stw	r4,20(sp)
10013f78:	003d1c06 	br	100133ec <__alt_data_end+0xf00133ec>
10013f7c:	d8c00817 	ldw	r3,32(sp)
10013f80:	18a9c83a 	sub	r20,r3,r2
10013f84:	0005883a 	mov	r2,zero
10013f88:	003d3706 	br	10013468 <__alt_data_end+0xf0013468>
10013f8c:	00800044 	movi	r2,1
10013f90:	003dd006 	br	100136d4 <__alt_data_end+0xf00136d4>
10013f94:	d8c00217 	ldw	r3,8(sp)
10013f98:	00800d84 	movi	r2,54
10013f9c:	dd400917 	ldw	r21,36(sp)
10013fa0:	10c5c83a 	sub	r2,r2,r3
10013fa4:	dd000817 	ldw	r20,32(sp)
10013fa8:	003d2f06 	br	10013468 <__alt_data_end+0xf0013468>
10013fac:	9029883a 	mov	r20,r18
10013fb0:	982b883a 	mov	r21,r19
10013fb4:	04400084 	movi	r17,2
10013fb8:	003bc606 	br	10012ed4 <__alt_data_end+0xf0012ed4>
10013fbc:	d8800617 	ldw	r2,24(sp)
10013fc0:	103efc26 	beq	r2,zero,10013bb4 <__alt_data_end+0xf0013bb4>
10013fc4:	d8c00d17 	ldw	r3,52(sp)
10013fc8:	00fc890e 	bge	zero,r3,100131f0 <__alt_data_end+0xf00131f0>
10013fcc:	a80b883a 	mov	r5,r21
10013fd0:	a009883a 	mov	r4,r20
10013fd4:	000d883a 	mov	r6,zero
10013fd8:	01d00934 	movhi	r7,16420
10013fdc:	001fe240 	call	1001fe24 <__muldf3>
10013fe0:	89000044 	addi	r4,r17,1
10013fe4:	1029883a 	mov	r20,r2
10013fe8:	182b883a 	mov	r21,r3
10013fec:	0020ea00 	call	10020ea0 <__floatsidf>
10013ff0:	a009883a 	mov	r4,r20
10013ff4:	a80b883a 	mov	r5,r21
10013ff8:	100d883a 	mov	r6,r2
10013ffc:	180f883a 	mov	r7,r3
10014000:	001fe240 	call	1001fe24 <__muldf3>
10014004:	1009883a 	mov	r4,r2
10014008:	180b883a 	mov	r5,r3
1001400c:	000d883a 	mov	r6,zero
10014010:	01d00734 	movhi	r7,16412
10014014:	001ea780 	call	1001ea78 <__adddf3>
10014018:	d9000517 	ldw	r4,20(sp)
1001401c:	1023883a 	mov	r17,r2
10014020:	00bf3034 	movhi	r2,64704
10014024:	213fffc4 	addi	r4,r4,-1
10014028:	1885883a 	add	r2,r3,r2
1001402c:	d9001215 	stw	r4,72(sp)
10014030:	d8800e15 	stw	r2,56(sp)
10014034:	da800d17 	ldw	r10,52(sp)
10014038:	003bc306 	br	10012f48 <__alt_data_end+0xf0012f48>
1001403c:	b039883a 	mov	fp,r22
10014040:	01000e44 	movi	r4,57
10014044:	8825883a 	mov	r18,r17
10014048:	9dc00044 	addi	r23,r19,1
1001404c:	99000005 	stb	r4,0(r19)
10014050:	a023883a 	mov	r17,r20
10014054:	003dae06 	br	10013710 <__alt_data_end+0xf0013710>
10014058:	d9800e17 	ldw	r6,56(sp)
1001405c:	d9c01117 	ldw	r7,68(sp)
10014060:	0009883a 	mov	r4,zero
10014064:	014ff834 	movhi	r5,16352
10014068:	da001715 	stw	r8,92(sp)
1001406c:	da401515 	stw	r9,84(sp)
10014070:	00205480 	call	10020548 <__subdf3>
10014074:	da001717 	ldw	r8,92(sp)
10014078:	da401517 	ldw	r9,84(sp)
1001407c:	1009883a 	mov	r4,r2
10014080:	180b883a 	mov	r5,r3
10014084:	400d883a 	mov	r6,r8
10014088:	480f883a 	mov	r7,r9
1001408c:	001fc640 	call	1001fc64 <__gedf2>
10014090:	00bc570e 	bge	zero,r2,100131f0 <__alt_data_end+0xf00131f0>
10014094:	01000c04 	movi	r4,48
10014098:	00000106 	br	100140a0 <_dtoa_r+0x1624>
1001409c:	102f883a 	mov	r23,r2
100140a0:	b8bfffc4 	addi	r2,r23,-1
100140a4:	10c00007 	ldb	r3,0(r2)
100140a8:	193ffc26 	beq	r3,r4,1001409c <__alt_data_end+0xf001409c>
100140ac:	d9801217 	ldw	r6,72(sp)
100140b0:	d9800515 	stw	r6,20(sp)
100140b4:	003c1f06 	br	10013134 <__alt_data_end+0xf0013134>
100140b8:	d8801217 	ldw	r2,72(sp)
100140bc:	dc001117 	ldw	r16,68(sp)
100140c0:	d8800515 	stw	r2,20(sp)
100140c4:	003cc906 	br	100133ec <__alt_data_end+0xf00133ec>
100140c8:	dd801317 	ldw	r22,76(sp)
100140cc:	dc001117 	ldw	r16,68(sp)
100140d0:	dcc01417 	ldw	r19,80(sp)
100140d4:	dc801017 	ldw	r18,64(sp)
100140d8:	003c4506 	br	100131f0 <__alt_data_end+0xf00131f0>
100140dc:	103e5d1e 	bne	r2,zero,10013a54 <__alt_data_end+0xf0013a54>
100140e0:	4080004c 	andi	r2,r8,1
100140e4:	103e5b26 	beq	r2,zero,10013a54 <__alt_data_end+0xf0013a54>
100140e8:	003e5706 	br	10013a48 <__alt_data_end+0xf0013a48>
100140ec:	d8c00317 	ldw	r3,12(sp)
100140f0:	00800084 	movi	r2,2
100140f4:	10c00a16 	blt	r2,r3,10014120 <_dtoa_r+0x16a4>
100140f8:	d9000d17 	ldw	r4,52(sp)
100140fc:	003e8306 	br	10013b0c <__alt_data_end+0xf0013b0c>
10014100:	04400084 	movi	r17,2
10014104:	003b7306 	br	10012ed4 <__alt_data_end+0xf0012ed4>
10014108:	d9801217 	ldw	r6,72(sp)
1001410c:	d9800515 	stw	r6,20(sp)
10014110:	003cb606 	br	100133ec <__alt_data_end+0xf00133ec>
10014114:	d9001217 	ldw	r4,72(sp)
10014118:	d9000515 	stw	r4,20(sp)
1001411c:	003c0506 	br	10013134 <__alt_data_end+0xf0013134>
10014120:	d9800d17 	ldw	r6,52(sp)
10014124:	d9800615 	stw	r6,24(sp)
10014128:	003e8306 	br	10013b38 <__alt_data_end+0xf0013b38>
1001412c:	d9800317 	ldw	r6,12(sp)
10014130:	00800084 	movi	r2,2
10014134:	11800216 	blt	r2,r6,10014140 <_dtoa_r+0x16c4>
10014138:	d8800d17 	ldw	r2,52(sp)
1001413c:	003da606 	br	100137d8 <__alt_data_end+0xf00137d8>
10014140:	d8800d17 	ldw	r2,52(sp)
10014144:	d8800615 	stw	r2,24(sp)
10014148:	003e7b06 	br	10013b38 <__alt_data_end+0xf0013b38>
1001414c:	05000044 	movi	r20,1
10014150:	003b0506 	br	10012d68 <__alt_data_end+0xf0012d68>
10014154:	8009883a 	mov	r4,r16
10014158:	80001115 	stw	zero,68(r16)
1001415c:	000b883a 	mov	r5,zero
10014160:	00163340 	call	10016334 <_Balloc>
10014164:	d8800715 	stw	r2,28(sp)
10014168:	d8c00717 	ldw	r3,28(sp)
1001416c:	00bfffc4 	movi	r2,-1
10014170:	01000044 	movi	r4,1
10014174:	d8800615 	stw	r2,24(sp)
10014178:	80c01015 	stw	r3,64(r16)
1001417c:	d9000b15 	stw	r4,44(sp)
10014180:	d8002215 	stw	zero,136(sp)
10014184:	d8800d15 	stw	r2,52(sp)
10014188:	003c1906 	br	100131f0 <__alt_data_end+0xf00131f0>
1001418c:	193d2926 	beq	r3,r4,10013634 <__alt_data_end+0xf0013634>
10014190:	00c00f04 	movi	r3,60
10014194:	1885c83a 	sub	r2,r3,r2
10014198:	003d7b06 	br	10013788 <__alt_data_end+0xf0013788>
1001419c:	000b883a 	mov	r5,zero
100141a0:	003b1006 	br	10012de4 <__alt_data_end+0xf0012de4>

100141a4 <_fflush_r>:
100141a4:	defffb04 	addi	sp,sp,-20
100141a8:	dcc00315 	stw	r19,12(sp)
100141ac:	dc000015 	stw	r16,0(sp)
100141b0:	dfc00415 	stw	ra,16(sp)
100141b4:	dc800215 	stw	r18,8(sp)
100141b8:	dc400115 	stw	r17,4(sp)
100141bc:	2027883a 	mov	r19,r4
100141c0:	2821883a 	mov	r16,r5
100141c4:	20000226 	beq	r4,zero,100141d0 <_fflush_r+0x2c>
100141c8:	20800e17 	ldw	r2,56(r4)
100141cc:	10005326 	beq	r2,zero,1001431c <_fflush_r+0x178>
100141d0:	8080030b 	ldhu	r2,12(r16)
100141d4:	10ffffcc 	andi	r3,r2,65535
100141d8:	18e0001c 	xori	r3,r3,32768
100141dc:	18e00004 	addi	r3,r3,-32768
100141e0:	18002c26 	beq	r3,zero,10014294 <_fflush_r+0xf0>
100141e4:	10c0020c 	andi	r3,r2,8
100141e8:	1800321e 	bne	r3,zero,100142b4 <_fflush_r+0x110>
100141ec:	80c00117 	ldw	r3,4(r16)
100141f0:	10820014 	ori	r2,r2,2048
100141f4:	8080030d 	sth	r2,12(r16)
100141f8:	00c0570e 	bge	zero,r3,10014358 <_fflush_r+0x1b4>
100141fc:	82000a17 	ldw	r8,40(r16)
10014200:	40002426 	beq	r8,zero,10014294 <_fflush_r+0xf0>
10014204:	9c400017 	ldw	r17,0(r19)
10014208:	10c4000c 	andi	r3,r2,4096
1001420c:	98000015 	stw	zero,0(r19)
10014210:	18004626 	beq	r3,zero,1001432c <_fflush_r+0x188>
10014214:	81801417 	ldw	r6,80(r16)
10014218:	10c0010c 	andi	r3,r2,4
1001421c:	18000626 	beq	r3,zero,10014238 <_fflush_r+0x94>
10014220:	80c00117 	ldw	r3,4(r16)
10014224:	80800c17 	ldw	r2,48(r16)
10014228:	30cdc83a 	sub	r6,r6,r3
1001422c:	10000226 	beq	r2,zero,10014238 <_fflush_r+0x94>
10014230:	80800f17 	ldw	r2,60(r16)
10014234:	308dc83a 	sub	r6,r6,r2
10014238:	81400717 	ldw	r5,28(r16)
1001423c:	9809883a 	mov	r4,r19
10014240:	000f883a 	mov	r7,zero
10014244:	403ee83a 	callr	r8
10014248:	00ffffc4 	movi	r3,-1
1001424c:	10c04526 	beq	r2,r3,10014364 <_fflush_r+0x1c0>
10014250:	80c0030b 	ldhu	r3,12(r16)
10014254:	81000417 	ldw	r4,16(r16)
10014258:	80000115 	stw	zero,4(r16)
1001425c:	197dffcc 	andi	r5,r3,63487
10014260:	8140030d 	sth	r5,12(r16)
10014264:	81000015 	stw	r4,0(r16)
10014268:	18c4000c 	andi	r3,r3,4096
1001426c:	18000126 	beq	r3,zero,10014274 <_fflush_r+0xd0>
10014270:	80801415 	stw	r2,80(r16)
10014274:	81400c17 	ldw	r5,48(r16)
10014278:	9c400015 	stw	r17,0(r19)
1001427c:	28000526 	beq	r5,zero,10014294 <_fflush_r+0xf0>
10014280:	80801004 	addi	r2,r16,64
10014284:	28800226 	beq	r5,r2,10014290 <_fflush_r+0xec>
10014288:	9809883a 	mov	r4,r19
1001428c:	0014b400 	call	10014b40 <_free_r>
10014290:	80000c15 	stw	zero,48(r16)
10014294:	0005883a 	mov	r2,zero
10014298:	dfc00417 	ldw	ra,16(sp)
1001429c:	dcc00317 	ldw	r19,12(sp)
100142a0:	dc800217 	ldw	r18,8(sp)
100142a4:	dc400117 	ldw	r17,4(sp)
100142a8:	dc000017 	ldw	r16,0(sp)
100142ac:	dec00504 	addi	sp,sp,20
100142b0:	f800283a 	ret
100142b4:	84800417 	ldw	r18,16(r16)
100142b8:	903ff626 	beq	r18,zero,10014294 <__alt_data_end+0xf0014294>
100142bc:	84400017 	ldw	r17,0(r16)
100142c0:	108000cc 	andi	r2,r2,3
100142c4:	84800015 	stw	r18,0(r16)
100142c8:	8ca3c83a 	sub	r17,r17,r18
100142cc:	10001526 	beq	r2,zero,10014324 <_fflush_r+0x180>
100142d0:	0005883a 	mov	r2,zero
100142d4:	80800215 	stw	r2,8(r16)
100142d8:	04400316 	blt	zero,r17,100142e8 <_fflush_r+0x144>
100142dc:	003fed06 	br	10014294 <__alt_data_end+0xf0014294>
100142e0:	90a5883a 	add	r18,r18,r2
100142e4:	047feb0e 	bge	zero,r17,10014294 <__alt_data_end+0xf0014294>
100142e8:	80800917 	ldw	r2,36(r16)
100142ec:	81400717 	ldw	r5,28(r16)
100142f0:	880f883a 	mov	r7,r17
100142f4:	900d883a 	mov	r6,r18
100142f8:	9809883a 	mov	r4,r19
100142fc:	103ee83a 	callr	r2
10014300:	88a3c83a 	sub	r17,r17,r2
10014304:	00bff616 	blt	zero,r2,100142e0 <__alt_data_end+0xf00142e0>
10014308:	80c0030b 	ldhu	r3,12(r16)
1001430c:	00bfffc4 	movi	r2,-1
10014310:	18c01014 	ori	r3,r3,64
10014314:	80c0030d 	sth	r3,12(r16)
10014318:	003fdf06 	br	10014298 <__alt_data_end+0xf0014298>
1001431c:	001474c0 	call	1001474c <__sinit>
10014320:	003fab06 	br	100141d0 <__alt_data_end+0xf00141d0>
10014324:	80800517 	ldw	r2,20(r16)
10014328:	003fea06 	br	100142d4 <__alt_data_end+0xf00142d4>
1001432c:	81400717 	ldw	r5,28(r16)
10014330:	000d883a 	mov	r6,zero
10014334:	9809883a 	mov	r4,r19
10014338:	01c00044 	movi	r7,1
1001433c:	403ee83a 	callr	r8
10014340:	100d883a 	mov	r6,r2
10014344:	00bfffc4 	movi	r2,-1
10014348:	30801326 	beq	r6,r2,10014398 <_fflush_r+0x1f4>
1001434c:	8080030b 	ldhu	r2,12(r16)
10014350:	82000a17 	ldw	r8,40(r16)
10014354:	003fb006 	br	10014218 <__alt_data_end+0xf0014218>
10014358:	80c00f17 	ldw	r3,60(r16)
1001435c:	00ffa716 	blt	zero,r3,100141fc <__alt_data_end+0xf00141fc>
10014360:	003fcc06 	br	10014294 <__alt_data_end+0xf0014294>
10014364:	98c00017 	ldw	r3,0(r19)
10014368:	183fb926 	beq	r3,zero,10014250 <__alt_data_end+0xf0014250>
1001436c:	01000744 	movi	r4,29
10014370:	19000226 	beq	r3,r4,1001437c <_fflush_r+0x1d8>
10014374:	01000584 	movi	r4,22
10014378:	1900101e 	bne	r3,r4,100143bc <_fflush_r+0x218>
1001437c:	8080030b 	ldhu	r2,12(r16)
10014380:	80c00417 	ldw	r3,16(r16)
10014384:	80000115 	stw	zero,4(r16)
10014388:	10bdffcc 	andi	r2,r2,63487
1001438c:	8080030d 	sth	r2,12(r16)
10014390:	80c00015 	stw	r3,0(r16)
10014394:	003fb706 	br	10014274 <__alt_data_end+0xf0014274>
10014398:	98800017 	ldw	r2,0(r19)
1001439c:	103feb26 	beq	r2,zero,1001434c <__alt_data_end+0xf001434c>
100143a0:	00c00744 	movi	r3,29
100143a4:	10c00226 	beq	r2,r3,100143b0 <_fflush_r+0x20c>
100143a8:	00c00584 	movi	r3,22
100143ac:	10ffd61e 	bne	r2,r3,10014308 <__alt_data_end+0xf0014308>
100143b0:	9c400015 	stw	r17,0(r19)
100143b4:	0005883a 	mov	r2,zero
100143b8:	003fb706 	br	10014298 <__alt_data_end+0xf0014298>
100143bc:	80c0030b 	ldhu	r3,12(r16)
100143c0:	18c01014 	ori	r3,r3,64
100143c4:	80c0030d 	sth	r3,12(r16)
100143c8:	003fb306 	br	10014298 <__alt_data_end+0xf0014298>

100143cc <fflush>:
100143cc:	20000526 	beq	r4,zero,100143e4 <fflush+0x18>
100143d0:	008400b4 	movhi	r2,4098
100143d4:	109d1004 	addi	r2,r2,29760
100143d8:	200b883a 	mov	r5,r4
100143dc:	11000017 	ldw	r4,0(r2)
100143e0:	00141a41 	jmpi	100141a4 <_fflush_r>
100143e4:	008400b4 	movhi	r2,4098
100143e8:	109d0f04 	addi	r2,r2,29756
100143ec:	11000017 	ldw	r4,0(r2)
100143f0:	01440074 	movhi	r5,4097
100143f4:	29506904 	addi	r5,r5,16804
100143f8:	001538c1 	jmpi	1001538c <_fwalk_reent>

100143fc <__fp_lock>:
100143fc:	0005883a 	mov	r2,zero
10014400:	f800283a 	ret

10014404 <__fp_unlock>:
10014404:	0005883a 	mov	r2,zero
10014408:	f800283a 	ret

1001440c <_cleanup_r>:
1001440c:	014400b4 	movhi	r5,4098
10014410:	29722e04 	addi	r5,r5,-14152
10014414:	00152d41 	jmpi	100152d4 <_fwalk>

10014418 <__sinit.part.1>:
10014418:	defff604 	addi	sp,sp,-40
1001441c:	00c40074 	movhi	r3,4097
10014420:	dfc00915 	stw	ra,36(sp)
10014424:	df000815 	stw	fp,32(sp)
10014428:	ddc00715 	stw	r23,28(sp)
1001442c:	dd800615 	stw	r22,24(sp)
10014430:	dd400515 	stw	r21,20(sp)
10014434:	dd000415 	stw	r20,16(sp)
10014438:	dcc00315 	stw	r19,12(sp)
1001443c:	dc800215 	stw	r18,8(sp)
10014440:	dc400115 	stw	r17,4(sp)
10014444:	dc000015 	stw	r16,0(sp)
10014448:	18d10304 	addi	r3,r3,17420
1001444c:	24000117 	ldw	r16,4(r4)
10014450:	20c00f15 	stw	r3,60(r4)
10014454:	07000044 	movi	fp,1
10014458:	00c000c4 	movi	r3,3
1001445c:	2080bb04 	addi	r2,r4,748
10014460:	20c0b915 	stw	r3,740(r4)
10014464:	27000e15 	stw	fp,56(r4)
10014468:	2080ba15 	stw	r2,744(r4)
1001446c:	2000b815 	stw	zero,736(r4)
10014470:	05c00204 	movi	r23,8
10014474:	00800104 	movi	r2,4
10014478:	2025883a 	mov	r18,r4
1001447c:	b80d883a 	mov	r6,r23
10014480:	81001704 	addi	r4,r16,92
10014484:	000b883a 	mov	r5,zero
10014488:	80000015 	stw	zero,0(r16)
1001448c:	80000115 	stw	zero,4(r16)
10014490:	80000215 	stw	zero,8(r16)
10014494:	8080030d 	sth	r2,12(r16)
10014498:	80001915 	stw	zero,100(r16)
1001449c:	8000038d 	sth	zero,14(r16)
100144a0:	80000415 	stw	zero,16(r16)
100144a4:	80000515 	stw	zero,20(r16)
100144a8:	80000615 	stw	zero,24(r16)
100144ac:	000c8bc0 	call	1000c8bc <memset>
100144b0:	05840074 	movhi	r22,4097
100144b4:	94400217 	ldw	r17,8(r18)
100144b8:	05440074 	movhi	r21,4097
100144bc:	05040074 	movhi	r20,4097
100144c0:	04c40074 	movhi	r19,4097
100144c4:	b59eed04 	addi	r22,r22,31668
100144c8:	ad5f0404 	addi	r21,r21,31760
100144cc:	a51f2304 	addi	r20,r20,31884
100144d0:	9cdf3a04 	addi	r19,r19,31976
100144d4:	85800815 	stw	r22,32(r16)
100144d8:	85400915 	stw	r21,36(r16)
100144dc:	85000a15 	stw	r20,40(r16)
100144e0:	84c00b15 	stw	r19,44(r16)
100144e4:	84000715 	stw	r16,28(r16)
100144e8:	00800284 	movi	r2,10
100144ec:	89001704 	addi	r4,r17,92
100144f0:	b80d883a 	mov	r6,r23
100144f4:	000b883a 	mov	r5,zero
100144f8:	88000015 	stw	zero,0(r17)
100144fc:	88000115 	stw	zero,4(r17)
10014500:	88000215 	stw	zero,8(r17)
10014504:	8880030d 	sth	r2,12(r17)
10014508:	88001915 	stw	zero,100(r17)
1001450c:	8f00038d 	sth	fp,14(r17)
10014510:	88000415 	stw	zero,16(r17)
10014514:	88000515 	stw	zero,20(r17)
10014518:	88000615 	stw	zero,24(r17)
1001451c:	000c8bc0 	call	1000c8bc <memset>
10014520:	94000317 	ldw	r16,12(r18)
10014524:	00800484 	movi	r2,18
10014528:	8c400715 	stw	r17,28(r17)
1001452c:	8d800815 	stw	r22,32(r17)
10014530:	8d400915 	stw	r21,36(r17)
10014534:	8d000a15 	stw	r20,40(r17)
10014538:	8cc00b15 	stw	r19,44(r17)
1001453c:	8080030d 	sth	r2,12(r16)
10014540:	00800084 	movi	r2,2
10014544:	80000015 	stw	zero,0(r16)
10014548:	80000115 	stw	zero,4(r16)
1001454c:	80000215 	stw	zero,8(r16)
10014550:	80001915 	stw	zero,100(r16)
10014554:	8080038d 	sth	r2,14(r16)
10014558:	80000415 	stw	zero,16(r16)
1001455c:	80000515 	stw	zero,20(r16)
10014560:	80000615 	stw	zero,24(r16)
10014564:	81001704 	addi	r4,r16,92
10014568:	000b883a 	mov	r5,zero
1001456c:	b80d883a 	mov	r6,r23
10014570:	000c8bc0 	call	1000c8bc <memset>
10014574:	84000715 	stw	r16,28(r16)
10014578:	85800815 	stw	r22,32(r16)
1001457c:	85400915 	stw	r21,36(r16)
10014580:	85000a15 	stw	r20,40(r16)
10014584:	84c00b15 	stw	r19,44(r16)
10014588:	dfc00917 	ldw	ra,36(sp)
1001458c:	df000817 	ldw	fp,32(sp)
10014590:	ddc00717 	ldw	r23,28(sp)
10014594:	dd800617 	ldw	r22,24(sp)
10014598:	dd400517 	ldw	r21,20(sp)
1001459c:	dd000417 	ldw	r20,16(sp)
100145a0:	dcc00317 	ldw	r19,12(sp)
100145a4:	dc800217 	ldw	r18,8(sp)
100145a8:	dc400117 	ldw	r17,4(sp)
100145ac:	dc000017 	ldw	r16,0(sp)
100145b0:	dec00a04 	addi	sp,sp,40
100145b4:	f800283a 	ret

100145b8 <__sfmoreglue>:
100145b8:	defffc04 	addi	sp,sp,-16
100145bc:	dc400115 	stw	r17,4(sp)
100145c0:	2c401a24 	muli	r17,r5,104
100145c4:	dc800215 	stw	r18,8(sp)
100145c8:	2825883a 	mov	r18,r5
100145cc:	89400304 	addi	r5,r17,12
100145d0:	dc000015 	stw	r16,0(sp)
100145d4:	dfc00315 	stw	ra,12(sp)
100145d8:	001570c0 	call	1001570c <_malloc_r>
100145dc:	1021883a 	mov	r16,r2
100145e0:	10000726 	beq	r2,zero,10014600 <__sfmoreglue+0x48>
100145e4:	11000304 	addi	r4,r2,12
100145e8:	10000015 	stw	zero,0(r2)
100145ec:	14800115 	stw	r18,4(r2)
100145f0:	11000215 	stw	r4,8(r2)
100145f4:	000b883a 	mov	r5,zero
100145f8:	880d883a 	mov	r6,r17
100145fc:	000c8bc0 	call	1000c8bc <memset>
10014600:	8005883a 	mov	r2,r16
10014604:	dfc00317 	ldw	ra,12(sp)
10014608:	dc800217 	ldw	r18,8(sp)
1001460c:	dc400117 	ldw	r17,4(sp)
10014610:	dc000017 	ldw	r16,0(sp)
10014614:	dec00404 	addi	sp,sp,16
10014618:	f800283a 	ret

1001461c <__sfp>:
1001461c:	008400b4 	movhi	r2,4098
10014620:	defffb04 	addi	sp,sp,-20
10014624:	109d0f04 	addi	r2,r2,29756
10014628:	dc800215 	stw	r18,8(sp)
1001462c:	14800017 	ldw	r18,0(r2)
10014630:	dcc00315 	stw	r19,12(sp)
10014634:	dfc00415 	stw	ra,16(sp)
10014638:	90800e17 	ldw	r2,56(r18)
1001463c:	dc400115 	stw	r17,4(sp)
10014640:	dc000015 	stw	r16,0(sp)
10014644:	2027883a 	mov	r19,r4
10014648:	1000021e 	bne	r2,zero,10014654 <__sfp+0x38>
1001464c:	9009883a 	mov	r4,r18
10014650:	00144180 	call	10014418 <__sinit.part.1>
10014654:	9480b804 	addi	r18,r18,736
10014658:	047fffc4 	movi	r17,-1
1001465c:	91400117 	ldw	r5,4(r18)
10014660:	94000217 	ldw	r16,8(r18)
10014664:	297fffc4 	addi	r5,r5,-1
10014668:	28000a16 	blt	r5,zero,10014694 <__sfp+0x78>
1001466c:	8080030f 	ldh	r2,12(r16)
10014670:	10000c26 	beq	r2,zero,100146a4 <__sfp+0x88>
10014674:	80c01d04 	addi	r3,r16,116
10014678:	00000206 	br	10014684 <__sfp+0x68>
1001467c:	18bfe60f 	ldh	r2,-104(r3)
10014680:	10000826 	beq	r2,zero,100146a4 <__sfp+0x88>
10014684:	297fffc4 	addi	r5,r5,-1
10014688:	1c3ffd04 	addi	r16,r3,-12
1001468c:	18c01a04 	addi	r3,r3,104
10014690:	2c7ffa1e 	bne	r5,r17,1001467c <__alt_data_end+0xf001467c>
10014694:	90800017 	ldw	r2,0(r18)
10014698:	10001d26 	beq	r2,zero,10014710 <__sfp+0xf4>
1001469c:	1025883a 	mov	r18,r2
100146a0:	003fee06 	br	1001465c <__alt_data_end+0xf001465c>
100146a4:	00bfffc4 	movi	r2,-1
100146a8:	8080038d 	sth	r2,14(r16)
100146ac:	00800044 	movi	r2,1
100146b0:	8080030d 	sth	r2,12(r16)
100146b4:	80001915 	stw	zero,100(r16)
100146b8:	80000015 	stw	zero,0(r16)
100146bc:	80000215 	stw	zero,8(r16)
100146c0:	80000115 	stw	zero,4(r16)
100146c4:	80000415 	stw	zero,16(r16)
100146c8:	80000515 	stw	zero,20(r16)
100146cc:	80000615 	stw	zero,24(r16)
100146d0:	81001704 	addi	r4,r16,92
100146d4:	000b883a 	mov	r5,zero
100146d8:	01800204 	movi	r6,8
100146dc:	000c8bc0 	call	1000c8bc <memset>
100146e0:	8005883a 	mov	r2,r16
100146e4:	80000c15 	stw	zero,48(r16)
100146e8:	80000d15 	stw	zero,52(r16)
100146ec:	80001115 	stw	zero,68(r16)
100146f0:	80001215 	stw	zero,72(r16)
100146f4:	dfc00417 	ldw	ra,16(sp)
100146f8:	dcc00317 	ldw	r19,12(sp)
100146fc:	dc800217 	ldw	r18,8(sp)
10014700:	dc400117 	ldw	r17,4(sp)
10014704:	dc000017 	ldw	r16,0(sp)
10014708:	dec00504 	addi	sp,sp,20
1001470c:	f800283a 	ret
10014710:	9809883a 	mov	r4,r19
10014714:	01400104 	movi	r5,4
10014718:	00145b80 	call	100145b8 <__sfmoreglue>
1001471c:	90800015 	stw	r2,0(r18)
10014720:	103fde1e 	bne	r2,zero,1001469c <__alt_data_end+0xf001469c>
10014724:	00800304 	movi	r2,12
10014728:	98800015 	stw	r2,0(r19)
1001472c:	0005883a 	mov	r2,zero
10014730:	003ff006 	br	100146f4 <__alt_data_end+0xf00146f4>

10014734 <_cleanup>:
10014734:	008400b4 	movhi	r2,4098
10014738:	109d0f04 	addi	r2,r2,29756
1001473c:	11000017 	ldw	r4,0(r2)
10014740:	014400b4 	movhi	r5,4098
10014744:	29722e04 	addi	r5,r5,-14152
10014748:	00152d41 	jmpi	100152d4 <_fwalk>

1001474c <__sinit>:
1001474c:	20800e17 	ldw	r2,56(r4)
10014750:	10000126 	beq	r2,zero,10014758 <__sinit+0xc>
10014754:	f800283a 	ret
10014758:	00144181 	jmpi	10014418 <__sinit.part.1>

1001475c <__sfp_lock_acquire>:
1001475c:	f800283a 	ret

10014760 <__sfp_lock_release>:
10014760:	f800283a 	ret

10014764 <__sinit_lock_acquire>:
10014764:	f800283a 	ret

10014768 <__sinit_lock_release>:
10014768:	f800283a 	ret

1001476c <__fp_lock_all>:
1001476c:	008400b4 	movhi	r2,4098
10014770:	109d1004 	addi	r2,r2,29760
10014774:	11000017 	ldw	r4,0(r2)
10014778:	01440074 	movhi	r5,4097
1001477c:	2950ff04 	addi	r5,r5,17404
10014780:	00152d41 	jmpi	100152d4 <_fwalk>

10014784 <__fp_unlock_all>:
10014784:	008400b4 	movhi	r2,4098
10014788:	109d1004 	addi	r2,r2,29760
1001478c:	11000017 	ldw	r4,0(r2)
10014790:	01440074 	movhi	r5,4097
10014794:	29510104 	addi	r5,r5,17412
10014798:	00152d41 	jmpi	100152d4 <_fwalk>

1001479c <_fread_r>:
1001479c:	defff504 	addi	sp,sp,-44
100147a0:	dd800715 	stw	r22,28(sp)
100147a4:	39ad383a 	mul	r22,r7,r6
100147a8:	ddc00815 	stw	r23,32(sp)
100147ac:	dd400615 	stw	r21,24(sp)
100147b0:	dc000115 	stw	r16,4(sp)
100147b4:	dfc00a15 	stw	ra,40(sp)
100147b8:	df000915 	stw	fp,36(sp)
100147bc:	dd000515 	stw	r20,20(sp)
100147c0:	dcc00415 	stw	r19,16(sp)
100147c4:	dc800315 	stw	r18,12(sp)
100147c8:	dc400215 	stw	r17,8(sp)
100147cc:	302f883a 	mov	r23,r6
100147d0:	382b883a 	mov	r21,r7
100147d4:	dc000b17 	ldw	r16,44(sp)
100147d8:	b0003b26 	beq	r22,zero,100148c8 <_fread_r+0x12c>
100147dc:	2029883a 	mov	r20,r4
100147e0:	2825883a 	mov	r18,r5
100147e4:	20000226 	beq	r4,zero,100147f0 <_fread_r+0x54>
100147e8:	20800e17 	ldw	r2,56(r4)
100147ec:	10007326 	beq	r2,zero,100149bc <_fread_r+0x220>
100147f0:	001475c0 	call	1001475c <__sfp_lock_acquire>
100147f4:	80c0030b 	ldhu	r3,12(r16)
100147f8:	1888000c 	andi	r2,r3,8192
100147fc:	1000061e 	bne	r2,zero,10014818 <_fread_r+0x7c>
10014800:	81001917 	ldw	r4,100(r16)
10014804:	00b7ffc4 	movi	r2,-8193
10014808:	18c80014 	ori	r3,r3,8192
1001480c:	2084703a 	and	r2,r4,r2
10014810:	80c0030d 	sth	r3,12(r16)
10014814:	80801915 	stw	r2,100(r16)
10014818:	84400117 	ldw	r17,4(r16)
1001481c:	88003116 	blt	r17,zero,100148e4 <_fread_r+0x148>
10014820:	18c0008c 	andi	r3,r3,2
10014824:	8805883a 	mov	r2,r17
10014828:	1800331e 	bne	r3,zero,100148f8 <_fread_r+0x15c>
1001482c:	b027883a 	mov	r19,r22
10014830:	00000b06 	br	10014860 <_fread_r+0xc4>
10014834:	000c7840 	call	1000c784 <memcpy>
10014838:	80800017 	ldw	r2,0(r16)
1001483c:	9465883a 	add	r18,r18,r17
10014840:	9c67c83a 	sub	r19,r19,r17
10014844:	1463883a 	add	r17,r2,r17
10014848:	a009883a 	mov	r4,r20
1001484c:	800b883a 	mov	r5,r16
10014850:	84400015 	stw	r17,0(r16)
10014854:	001787c0 	call	1001787c <__srefill_r>
10014858:	10001d1e 	bne	r2,zero,100148d0 <_fread_r+0x134>
1001485c:	84400117 	ldw	r17,4(r16)
10014860:	9009883a 	mov	r4,r18
10014864:	880d883a 	mov	r6,r17
10014868:	81400017 	ldw	r5,0(r16)
1001486c:	8cfff136 	bltu	r17,r19,10014834 <__alt_data_end+0xf0014834>
10014870:	980d883a 	mov	r6,r19
10014874:	000c7840 	call	1000c784 <memcpy>
10014878:	80800117 	ldw	r2,4(r16)
1001487c:	80c00017 	ldw	r3,0(r16)
10014880:	14c5c83a 	sub	r2,r2,r19
10014884:	1ce7883a 	add	r19,r3,r19
10014888:	80800115 	stw	r2,4(r16)
1001488c:	84c00015 	stw	r19,0(r16)
10014890:	00147600 	call	10014760 <__sfp_lock_release>
10014894:	a805883a 	mov	r2,r21
10014898:	dfc00a17 	ldw	ra,40(sp)
1001489c:	df000917 	ldw	fp,36(sp)
100148a0:	ddc00817 	ldw	r23,32(sp)
100148a4:	dd800717 	ldw	r22,28(sp)
100148a8:	dd400617 	ldw	r21,24(sp)
100148ac:	dd000517 	ldw	r20,20(sp)
100148b0:	dcc00417 	ldw	r19,16(sp)
100148b4:	dc800317 	ldw	r18,12(sp)
100148b8:	dc400217 	ldw	r17,8(sp)
100148bc:	dc000117 	ldw	r16,4(sp)
100148c0:	dec00b04 	addi	sp,sp,44
100148c4:	f800283a 	ret
100148c8:	0005883a 	mov	r2,zero
100148cc:	003ff206 	br	10014898 <__alt_data_end+0xf0014898>
100148d0:	00147600 	call	10014760 <__sfp_lock_release>
100148d4:	b4c9c83a 	sub	r4,r22,r19
100148d8:	b80b883a 	mov	r5,r23
100148dc:	000c6e00 	call	1000c6e0 <__udivsi3>
100148e0:	003fed06 	br	10014898 <__alt_data_end+0xf0014898>
100148e4:	80000115 	stw	zero,4(r16)
100148e8:	18c0008c 	andi	r3,r3,2
100148ec:	0005883a 	mov	r2,zero
100148f0:	0023883a 	mov	r17,zero
100148f4:	183fcd26 	beq	r3,zero,1001482c <__alt_data_end+0xf001482c>
100148f8:	1023883a 	mov	r17,r2
100148fc:	b080012e 	bgeu	r22,r2,10014904 <_fread_r+0x168>
10014900:	b023883a 	mov	r17,r22
10014904:	81400017 	ldw	r5,0(r16)
10014908:	9009883a 	mov	r4,r18
1001490c:	880d883a 	mov	r6,r17
10014910:	000c7840 	call	1000c784 <memcpy>
10014914:	80800117 	ldw	r2,4(r16)
10014918:	84c00017 	ldw	r19,0(r16)
1001491c:	81400c17 	ldw	r5,48(r16)
10014920:	1445c83a 	sub	r2,r2,r17
10014924:	9c67883a 	add	r19,r19,r17
10014928:	84c00015 	stw	r19,0(r16)
1001492c:	80800115 	stw	r2,4(r16)
10014930:	9465883a 	add	r18,r18,r17
10014934:	b463c83a 	sub	r17,r22,r17
10014938:	28002626 	beq	r5,zero,100149d4 <_fread_r+0x238>
1001493c:	883fd426 	beq	r17,zero,10014890 <__alt_data_end+0xf0014890>
10014940:	80801004 	addi	r2,r16,64
10014944:	28800326 	beq	r5,r2,10014954 <_fread_r+0x1b8>
10014948:	a009883a 	mov	r4,r20
1001494c:	0014b400 	call	10014b40 <_free_r>
10014950:	84c00017 	ldw	r19,0(r16)
10014954:	80000c15 	stw	zero,48(r16)
10014958:	80c00417 	ldw	r3,16(r16)
1001495c:	87000517 	ldw	fp,20(r16)
10014960:	d8c00015 	stw	r3,0(sp)
10014964:	00000106 	br	1001496c <_fread_r+0x1d0>
10014968:	883fc926 	beq	r17,zero,10014890 <__alt_data_end+0xf0014890>
1001496c:	84800415 	stw	r18,16(r16)
10014970:	84400515 	stw	r17,20(r16)
10014974:	84800015 	stw	r18,0(r16)
10014978:	a009883a 	mov	r4,r20
1001497c:	800b883a 	mov	r5,r16
10014980:	001787c0 	call	1001787c <__srefill_r>
10014984:	d8c00017 	ldw	r3,0(sp)
10014988:	81000117 	ldw	r4,4(r16)
1001498c:	87000515 	stw	fp,20(r16)
10014990:	80c00415 	stw	r3,16(r16)
10014994:	84c00015 	stw	r19,0(r16)
10014998:	80000115 	stw	zero,4(r16)
1001499c:	8923c83a 	sub	r17,r17,r4
100149a0:	9125883a 	add	r18,r18,r4
100149a4:	103ff026 	beq	r2,zero,10014968 <__alt_data_end+0xf0014968>
100149a8:	00147600 	call	10014760 <__sfp_lock_release>
100149ac:	b449c83a 	sub	r4,r22,r17
100149b0:	b80b883a 	mov	r5,r23
100149b4:	000c6e00 	call	1000c6e0 <__udivsi3>
100149b8:	003fb706 	br	10014898 <__alt_data_end+0xf0014898>
100149bc:	001474c0 	call	1001474c <__sinit>
100149c0:	001475c0 	call	1001475c <__sfp_lock_acquire>
100149c4:	80c0030b 	ldhu	r3,12(r16)
100149c8:	1888000c 	andi	r2,r3,8192
100149cc:	103f921e 	bne	r2,zero,10014818 <__alt_data_end+0xf0014818>
100149d0:	003f8b06 	br	10014800 <__alt_data_end+0xf0014800>
100149d4:	883fe01e 	bne	r17,zero,10014958 <__alt_data_end+0xf0014958>
100149d8:	003fad06 	br	10014890 <__alt_data_end+0xf0014890>

100149dc <fread>:
100149dc:	008400b4 	movhi	r2,4098
100149e0:	109d1004 	addi	r2,r2,29760
100149e4:	2011883a 	mov	r8,r4
100149e8:	11000017 	ldw	r4,0(r2)
100149ec:	defffe04 	addi	sp,sp,-8
100149f0:	2807883a 	mov	r3,r5
100149f4:	3005883a 	mov	r2,r6
100149f8:	d9c00015 	stw	r7,0(sp)
100149fc:	400b883a 	mov	r5,r8
10014a00:	180d883a 	mov	r6,r3
10014a04:	100f883a 	mov	r7,r2
10014a08:	dfc00115 	stw	ra,4(sp)
10014a0c:	001479c0 	call	1001479c <_fread_r>
10014a10:	dfc00117 	ldw	ra,4(sp)
10014a14:	dec00204 	addi	sp,sp,8
10014a18:	f800283a 	ret

10014a1c <_malloc_trim_r>:
10014a1c:	defffb04 	addi	sp,sp,-20
10014a20:	dcc00315 	stw	r19,12(sp)
10014a24:	04c400b4 	movhi	r19,4098
10014a28:	dc800215 	stw	r18,8(sp)
10014a2c:	dc400115 	stw	r17,4(sp)
10014a30:	dc000015 	stw	r16,0(sp)
10014a34:	dfc00415 	stw	ra,16(sp)
10014a38:	2821883a 	mov	r16,r5
10014a3c:	9cd70c04 	addi	r19,r19,23600
10014a40:	2025883a 	mov	r18,r4
10014a44:	0021aa00 	call	10021aa0 <__malloc_lock>
10014a48:	98800217 	ldw	r2,8(r19)
10014a4c:	14400117 	ldw	r17,4(r2)
10014a50:	00bfff04 	movi	r2,-4
10014a54:	88a2703a 	and	r17,r17,r2
10014a58:	8c21c83a 	sub	r16,r17,r16
10014a5c:	8403fbc4 	addi	r16,r16,4079
10014a60:	8020d33a 	srli	r16,r16,12
10014a64:	0083ffc4 	movi	r2,4095
10014a68:	843fffc4 	addi	r16,r16,-1
10014a6c:	8020933a 	slli	r16,r16,12
10014a70:	1400060e 	bge	r2,r16,10014a8c <_malloc_trim_r+0x70>
10014a74:	9009883a 	mov	r4,r18
10014a78:	000b883a 	mov	r5,zero
10014a7c:	0017a980 	call	10017a98 <_sbrk_r>
10014a80:	98c00217 	ldw	r3,8(r19)
10014a84:	1c47883a 	add	r3,r3,r17
10014a88:	10c00a26 	beq	r2,r3,10014ab4 <_malloc_trim_r+0x98>
10014a8c:	9009883a 	mov	r4,r18
10014a90:	0021ac00 	call	10021ac0 <__malloc_unlock>
10014a94:	0005883a 	mov	r2,zero
10014a98:	dfc00417 	ldw	ra,16(sp)
10014a9c:	dcc00317 	ldw	r19,12(sp)
10014aa0:	dc800217 	ldw	r18,8(sp)
10014aa4:	dc400117 	ldw	r17,4(sp)
10014aa8:	dc000017 	ldw	r16,0(sp)
10014aac:	dec00504 	addi	sp,sp,20
10014ab0:	f800283a 	ret
10014ab4:	9009883a 	mov	r4,r18
10014ab8:	040bc83a 	sub	r5,zero,r16
10014abc:	0017a980 	call	10017a98 <_sbrk_r>
10014ac0:	00ffffc4 	movi	r3,-1
10014ac4:	10c00d26 	beq	r2,r3,10014afc <_malloc_trim_r+0xe0>
10014ac8:	00c400f4 	movhi	r3,4099
10014acc:	18e49d04 	addi	r3,r3,-28044
10014ad0:	18800017 	ldw	r2,0(r3)
10014ad4:	99000217 	ldw	r4,8(r19)
10014ad8:	8c23c83a 	sub	r17,r17,r16
10014adc:	8c400054 	ori	r17,r17,1
10014ae0:	1421c83a 	sub	r16,r2,r16
10014ae4:	24400115 	stw	r17,4(r4)
10014ae8:	9009883a 	mov	r4,r18
10014aec:	1c000015 	stw	r16,0(r3)
10014af0:	0021ac00 	call	10021ac0 <__malloc_unlock>
10014af4:	00800044 	movi	r2,1
10014af8:	003fe706 	br	10014a98 <__alt_data_end+0xf0014a98>
10014afc:	9009883a 	mov	r4,r18
10014b00:	000b883a 	mov	r5,zero
10014b04:	0017a980 	call	10017a98 <_sbrk_r>
10014b08:	99000217 	ldw	r4,8(r19)
10014b0c:	014003c4 	movi	r5,15
10014b10:	1107c83a 	sub	r3,r2,r4
10014b14:	28ffdd0e 	bge	r5,r3,10014a8c <__alt_data_end+0xf0014a8c>
10014b18:	014400b4 	movhi	r5,4098
10014b1c:	295d1204 	addi	r5,r5,29768
10014b20:	29400017 	ldw	r5,0(r5)
10014b24:	18c00054 	ori	r3,r3,1
10014b28:	20c00115 	stw	r3,4(r4)
10014b2c:	00c400f4 	movhi	r3,4099
10014b30:	1145c83a 	sub	r2,r2,r5
10014b34:	18e49d04 	addi	r3,r3,-28044
10014b38:	18800015 	stw	r2,0(r3)
10014b3c:	003fd306 	br	10014a8c <__alt_data_end+0xf0014a8c>

10014b40 <_free_r>:
10014b40:	28004c26 	beq	r5,zero,10014c74 <_free_r+0x134>
10014b44:	defffd04 	addi	sp,sp,-12
10014b48:	dc400115 	stw	r17,4(sp)
10014b4c:	dc000015 	stw	r16,0(sp)
10014b50:	2023883a 	mov	r17,r4
10014b54:	2821883a 	mov	r16,r5
10014b58:	dfc00215 	stw	ra,8(sp)
10014b5c:	0021aa00 	call	10021aa0 <__malloc_lock>
10014b60:	813fff17 	ldw	r4,-4(r16)
10014b64:	00bfff84 	movi	r2,-2
10014b68:	024400b4 	movhi	r9,4098
10014b6c:	81bffe04 	addi	r6,r16,-8
10014b70:	2084703a 	and	r2,r4,r2
10014b74:	4a570c04 	addi	r9,r9,23600
10014b78:	308b883a 	add	r5,r6,r2
10014b7c:	2a000117 	ldw	r8,4(r5)
10014b80:	49c00217 	ldw	r7,8(r9)
10014b84:	00ffff04 	movi	r3,-4
10014b88:	40c6703a 	and	r3,r8,r3
10014b8c:	39405326 	beq	r7,r5,10014cdc <_free_r+0x19c>
10014b90:	28c00115 	stw	r3,4(r5)
10014b94:	2100004c 	andi	r4,r4,1
10014b98:	2000091e 	bne	r4,zero,10014bc0 <_free_r+0x80>
10014b9c:	81fffe17 	ldw	r7,-8(r16)
10014ba0:	4a000204 	addi	r8,r9,8
10014ba4:	31cdc83a 	sub	r6,r6,r7
10014ba8:	31000217 	ldw	r4,8(r6)
10014bac:	11c5883a 	add	r2,r2,r7
10014bb0:	22006126 	beq	r4,r8,10014d38 <_free_r+0x1f8>
10014bb4:	31c00317 	ldw	r7,12(r6)
10014bb8:	21c00315 	stw	r7,12(r4)
10014bbc:	39000215 	stw	r4,8(r7)
10014bc0:	28c9883a 	add	r4,r5,r3
10014bc4:	21c00117 	ldw	r7,4(r4)
10014bc8:	39c0004c 	andi	r7,r7,1
10014bcc:	38000d1e 	bne	r7,zero,10014c04 <_free_r+0xc4>
10014bd0:	29000217 	ldw	r4,8(r5)
10014bd4:	10c5883a 	add	r2,r2,r3
10014bd8:	00c400b4 	movhi	r3,4098
10014bdc:	18d70e04 	addi	r3,r3,23608
10014be0:	20c07526 	beq	r4,r3,10014db8 <_free_r+0x278>
10014be4:	29c00317 	ldw	r7,12(r5)
10014be8:	11400054 	ori	r5,r2,1
10014bec:	3087883a 	add	r3,r6,r2
10014bf0:	21c00315 	stw	r7,12(r4)
10014bf4:	39000215 	stw	r4,8(r7)
10014bf8:	31400115 	stw	r5,4(r6)
10014bfc:	18800015 	stw	r2,0(r3)
10014c00:	00000406 	br	10014c14 <_free_r+0xd4>
10014c04:	10c00054 	ori	r3,r2,1
10014c08:	30c00115 	stw	r3,4(r6)
10014c0c:	3087883a 	add	r3,r6,r2
10014c10:	18800015 	stw	r2,0(r3)
10014c14:	00c07fc4 	movi	r3,511
10014c18:	18801736 	bltu	r3,r2,10014c78 <_free_r+0x138>
10014c1c:	1004d0fa 	srli	r2,r2,3
10014c20:	01400044 	movi	r5,1
10014c24:	49000117 	ldw	r4,4(r9)
10014c28:	1087883a 	add	r3,r2,r2
10014c2c:	18c7883a 	add	r3,r3,r3
10014c30:	1005d0ba 	srai	r2,r2,2
10014c34:	18c7883a 	add	r3,r3,r3
10014c38:	1a47883a 	add	r3,r3,r9
10014c3c:	19c00217 	ldw	r7,8(r3)
10014c40:	2884983a 	sll	r2,r5,r2
10014c44:	30c00315 	stw	r3,12(r6)
10014c48:	31c00215 	stw	r7,8(r6)
10014c4c:	1104b03a 	or	r2,r2,r4
10014c50:	19800215 	stw	r6,8(r3)
10014c54:	48800115 	stw	r2,4(r9)
10014c58:	39800315 	stw	r6,12(r7)
10014c5c:	8809883a 	mov	r4,r17
10014c60:	dfc00217 	ldw	ra,8(sp)
10014c64:	dc400117 	ldw	r17,4(sp)
10014c68:	dc000017 	ldw	r16,0(sp)
10014c6c:	dec00304 	addi	sp,sp,12
10014c70:	0021ac01 	jmpi	10021ac0 <__malloc_unlock>
10014c74:	f800283a 	ret
10014c78:	1006d27a 	srli	r3,r2,9
10014c7c:	01000104 	movi	r4,4
10014c80:	20c04036 	bltu	r4,r3,10014d84 <_free_r+0x244>
10014c84:	1006d1ba 	srli	r3,r2,6
10014c88:	19400e04 	addi	r5,r3,56
10014c8c:	2947883a 	add	r3,r5,r5
10014c90:	18c7883a 	add	r3,r3,r3
10014c94:	18c7883a 	add	r3,r3,r3
10014c98:	1a49883a 	add	r4,r3,r9
10014c9c:	20c00217 	ldw	r3,8(r4)
10014ca0:	01c400b4 	movhi	r7,4098
10014ca4:	39d70c04 	addi	r7,r7,23600
10014ca8:	19003b26 	beq	r3,r4,10014d98 <_free_r+0x258>
10014cac:	01ffff04 	movi	r7,-4
10014cb0:	19400117 	ldw	r5,4(r3)
10014cb4:	29ca703a 	and	r5,r5,r7
10014cb8:	1140022e 	bgeu	r2,r5,10014cc4 <_free_r+0x184>
10014cbc:	18c00217 	ldw	r3,8(r3)
10014cc0:	20fffb1e 	bne	r4,r3,10014cb0 <__alt_data_end+0xf0014cb0>
10014cc4:	18800317 	ldw	r2,12(r3)
10014cc8:	30800315 	stw	r2,12(r6)
10014ccc:	30c00215 	stw	r3,8(r6)
10014cd0:	11800215 	stw	r6,8(r2)
10014cd4:	19800315 	stw	r6,12(r3)
10014cd8:	003fe006 	br	10014c5c <__alt_data_end+0xf0014c5c>
10014cdc:	2100004c 	andi	r4,r4,1
10014ce0:	1885883a 	add	r2,r3,r2
10014ce4:	2000071e 	bne	r4,zero,10014d04 <_free_r+0x1c4>
10014ce8:	817ffe17 	ldw	r5,-8(r16)
10014cec:	314dc83a 	sub	r6,r6,r5
10014cf0:	30c00317 	ldw	r3,12(r6)
10014cf4:	31000217 	ldw	r4,8(r6)
10014cf8:	1145883a 	add	r2,r2,r5
10014cfc:	20c00315 	stw	r3,12(r4)
10014d00:	19000215 	stw	r4,8(r3)
10014d04:	10c00054 	ori	r3,r2,1
10014d08:	30c00115 	stw	r3,4(r6)
10014d0c:	00c400b4 	movhi	r3,4098
10014d10:	18dd1304 	addi	r3,r3,29772
10014d14:	18c00017 	ldw	r3,0(r3)
10014d18:	49800215 	stw	r6,8(r9)
10014d1c:	10ffcf36 	bltu	r2,r3,10014c5c <__alt_data_end+0xf0014c5c>
10014d20:	008400f4 	movhi	r2,4099
10014d24:	10a48a04 	addi	r2,r2,-28120
10014d28:	11400017 	ldw	r5,0(r2)
10014d2c:	8809883a 	mov	r4,r17
10014d30:	0014a1c0 	call	10014a1c <_malloc_trim_r>
10014d34:	003fc906 	br	10014c5c <__alt_data_end+0xf0014c5c>
10014d38:	28c9883a 	add	r4,r5,r3
10014d3c:	21000117 	ldw	r4,4(r4)
10014d40:	2100004c 	andi	r4,r4,1
10014d44:	20000a1e 	bne	r4,zero,10014d70 <_free_r+0x230>
10014d48:	29000317 	ldw	r4,12(r5)
10014d4c:	29400217 	ldw	r5,8(r5)
10014d50:	10c5883a 	add	r2,r2,r3
10014d54:	10c00054 	ori	r3,r2,1
10014d58:	29000315 	stw	r4,12(r5)
10014d5c:	21400215 	stw	r5,8(r4)
10014d60:	30c00115 	stw	r3,4(r6)
10014d64:	308d883a 	add	r6,r6,r2
10014d68:	30800015 	stw	r2,0(r6)
10014d6c:	003fbb06 	br	10014c5c <__alt_data_end+0xf0014c5c>
10014d70:	10c00054 	ori	r3,r2,1
10014d74:	30c00115 	stw	r3,4(r6)
10014d78:	308d883a 	add	r6,r6,r2
10014d7c:	30800015 	stw	r2,0(r6)
10014d80:	003fb606 	br	10014c5c <__alt_data_end+0xf0014c5c>
10014d84:	01000504 	movi	r4,20
10014d88:	20c01436 	bltu	r4,r3,10014ddc <_free_r+0x29c>
10014d8c:	194016c4 	addi	r5,r3,91
10014d90:	2947883a 	add	r3,r5,r5
10014d94:	003fbe06 	br	10014c90 <__alt_data_end+0xf0014c90>
10014d98:	280bd0ba 	srai	r5,r5,2
10014d9c:	00800044 	movi	r2,1
10014da0:	39000117 	ldw	r4,4(r7)
10014da4:	114a983a 	sll	r5,r2,r5
10014da8:	1805883a 	mov	r2,r3
10014dac:	2908b03a 	or	r4,r5,r4
10014db0:	39000115 	stw	r4,4(r7)
10014db4:	003fc406 	br	10014cc8 <__alt_data_end+0xf0014cc8>
10014db8:	49800515 	stw	r6,20(r9)
10014dbc:	49800415 	stw	r6,16(r9)
10014dc0:	10c00054 	ori	r3,r2,1
10014dc4:	31000315 	stw	r4,12(r6)
10014dc8:	31000215 	stw	r4,8(r6)
10014dcc:	30c00115 	stw	r3,4(r6)
10014dd0:	308d883a 	add	r6,r6,r2
10014dd4:	30800015 	stw	r2,0(r6)
10014dd8:	003fa006 	br	10014c5c <__alt_data_end+0xf0014c5c>
10014ddc:	01001504 	movi	r4,84
10014de0:	20c00436 	bltu	r4,r3,10014df4 <_free_r+0x2b4>
10014de4:	1006d33a 	srli	r3,r2,12
10014de8:	19401b84 	addi	r5,r3,110
10014dec:	2947883a 	add	r3,r5,r5
10014df0:	003fa706 	br	10014c90 <__alt_data_end+0xf0014c90>
10014df4:	01005504 	movi	r4,340
10014df8:	20c00436 	bltu	r4,r3,10014e0c <_free_r+0x2cc>
10014dfc:	1006d3fa 	srli	r3,r2,15
10014e00:	19401dc4 	addi	r5,r3,119
10014e04:	2947883a 	add	r3,r5,r5
10014e08:	003fa106 	br	10014c90 <__alt_data_end+0xf0014c90>
10014e0c:	01015504 	movi	r4,1364
10014e10:	20c00436 	bltu	r4,r3,10014e24 <_free_r+0x2e4>
10014e14:	1006d4ba 	srli	r3,r2,18
10014e18:	19401f04 	addi	r5,r3,124
10014e1c:	2947883a 	add	r3,r5,r5
10014e20:	003f9b06 	br	10014c90 <__alt_data_end+0xf0014c90>
10014e24:	00c03f04 	movi	r3,252
10014e28:	01401f84 	movi	r5,126
10014e2c:	003f9806 	br	10014c90 <__alt_data_end+0xf0014c90>

10014e30 <__sfvwrite_r>:
10014e30:	30800217 	ldw	r2,8(r6)
10014e34:	10004526 	beq	r2,zero,10014f4c <__sfvwrite_r+0x11c>
10014e38:	28c0030b 	ldhu	r3,12(r5)
10014e3c:	defff404 	addi	sp,sp,-48
10014e40:	dd400715 	stw	r21,28(sp)
10014e44:	dcc00515 	stw	r19,20(sp)
10014e48:	dc000215 	stw	r16,8(sp)
10014e4c:	dfc00b15 	stw	ra,44(sp)
10014e50:	df000a15 	stw	fp,40(sp)
10014e54:	ddc00915 	stw	r23,36(sp)
10014e58:	dd800815 	stw	r22,32(sp)
10014e5c:	dd000615 	stw	r20,24(sp)
10014e60:	dc800415 	stw	r18,16(sp)
10014e64:	dc400315 	stw	r17,12(sp)
10014e68:	1880020c 	andi	r2,r3,8
10014e6c:	2821883a 	mov	r16,r5
10014e70:	202b883a 	mov	r21,r4
10014e74:	3027883a 	mov	r19,r6
10014e78:	10002526 	beq	r2,zero,10014f10 <__sfvwrite_r+0xe0>
10014e7c:	28800417 	ldw	r2,16(r5)
10014e80:	10002326 	beq	r2,zero,10014f10 <__sfvwrite_r+0xe0>
10014e84:	1880008c 	andi	r2,r3,2
10014e88:	9c400017 	ldw	r17,0(r19)
10014e8c:	10003126 	beq	r2,zero,10014f54 <__sfvwrite_r+0x124>
10014e90:	0029883a 	mov	r20,zero
10014e94:	0025883a 	mov	r18,zero
10014e98:	05810004 	movi	r22,1024
10014e9c:	a00d883a 	mov	r6,r20
10014ea0:	a809883a 	mov	r4,r21
10014ea4:	90002526 	beq	r18,zero,10014f3c <__sfvwrite_r+0x10c>
10014ea8:	900f883a 	mov	r7,r18
10014eac:	81400717 	ldw	r5,28(r16)
10014eb0:	b480012e 	bgeu	r22,r18,10014eb8 <__sfvwrite_r+0x88>
10014eb4:	01c10004 	movi	r7,1024
10014eb8:	80800917 	ldw	r2,36(r16)
10014ebc:	103ee83a 	callr	r2
10014ec0:	0080510e 	bge	zero,r2,10015008 <__sfvwrite_r+0x1d8>
10014ec4:	98c00217 	ldw	r3,8(r19)
10014ec8:	a0a9883a 	add	r20,r20,r2
10014ecc:	90a5c83a 	sub	r18,r18,r2
10014ed0:	1885c83a 	sub	r2,r3,r2
10014ed4:	98800215 	stw	r2,8(r19)
10014ed8:	103ff01e 	bne	r2,zero,10014e9c <__alt_data_end+0xf0014e9c>
10014edc:	0005883a 	mov	r2,zero
10014ee0:	dfc00b17 	ldw	ra,44(sp)
10014ee4:	df000a17 	ldw	fp,40(sp)
10014ee8:	ddc00917 	ldw	r23,36(sp)
10014eec:	dd800817 	ldw	r22,32(sp)
10014ef0:	dd400717 	ldw	r21,28(sp)
10014ef4:	dd000617 	ldw	r20,24(sp)
10014ef8:	dcc00517 	ldw	r19,20(sp)
10014efc:	dc800417 	ldw	r18,16(sp)
10014f00:	dc400317 	ldw	r17,12(sp)
10014f04:	dc000217 	ldw	r16,8(sp)
10014f08:	dec00c04 	addi	sp,sp,48
10014f0c:	f800283a 	ret
10014f10:	a809883a 	mov	r4,r21
10014f14:	800b883a 	mov	r5,r16
10014f18:	001274c0 	call	1001274c <__swsetup_r>
10014f1c:	80c0030b 	ldhu	r3,12(r16)
10014f20:	103fd826 	beq	r2,zero,10014e84 <__alt_data_end+0xf0014e84>
10014f24:	18c01014 	ori	r3,r3,64
10014f28:	80c0030d 	sth	r3,12(r16)
10014f2c:	00c00244 	movi	r3,9
10014f30:	00bfffc4 	movi	r2,-1
10014f34:	a8c00015 	stw	r3,0(r21)
10014f38:	003fe906 	br	10014ee0 <__alt_data_end+0xf0014ee0>
10014f3c:	8d000017 	ldw	r20,0(r17)
10014f40:	8c800117 	ldw	r18,4(r17)
10014f44:	8c400204 	addi	r17,r17,8
10014f48:	003fd406 	br	10014e9c <__alt_data_end+0xf0014e9c>
10014f4c:	0005883a 	mov	r2,zero
10014f50:	f800283a 	ret
10014f54:	1880004c 	andi	r2,r3,1
10014f58:	1000301e 	bne	r2,zero,1001501c <__sfvwrite_r+0x1ec>
10014f5c:	002f883a 	mov	r23,zero
10014f60:	0025883a 	mov	r18,zero
10014f64:	90001c26 	beq	r18,zero,10014fd8 <__sfvwrite_r+0x1a8>
10014f68:	1880800c 	andi	r2,r3,512
10014f6c:	85000217 	ldw	r20,8(r16)
10014f70:	10006c26 	beq	r2,zero,10015124 <__sfvwrite_r+0x2f4>
10014f74:	a02d883a 	mov	r22,r20
10014f78:	95008536 	bltu	r18,r20,10015190 <__sfvwrite_r+0x360>
10014f7c:	1881200c 	andi	r2,r3,1152
10014f80:	10009d1e 	bne	r2,zero,100151f8 <__sfvwrite_r+0x3c8>
10014f84:	81000017 	ldw	r4,0(r16)
10014f88:	a039883a 	mov	fp,r20
10014f8c:	9029883a 	mov	r20,r18
10014f90:	b80b883a 	mov	r5,r23
10014f94:	b00d883a 	mov	r6,r22
10014f98:	00161d80 	call	100161d8 <memmove>
10014f9c:	80c00217 	ldw	r3,8(r16)
10014fa0:	81000017 	ldw	r4,0(r16)
10014fa4:	9005883a 	mov	r2,r18
10014fa8:	1f39c83a 	sub	fp,r3,fp
10014fac:	258f883a 	add	r7,r4,r22
10014fb0:	87000215 	stw	fp,8(r16)
10014fb4:	81c00015 	stw	r7,0(r16)
10014fb8:	98c00217 	ldw	r3,8(r19)
10014fbc:	b8af883a 	add	r23,r23,r2
10014fc0:	90a5c83a 	sub	r18,r18,r2
10014fc4:	1d05c83a 	sub	r2,r3,r20
10014fc8:	98800215 	stw	r2,8(r19)
10014fcc:	103fc326 	beq	r2,zero,10014edc <__alt_data_end+0xf0014edc>
10014fd0:	80c0030b 	ldhu	r3,12(r16)
10014fd4:	903fe41e 	bne	r18,zero,10014f68 <__alt_data_end+0xf0014f68>
10014fd8:	8dc00017 	ldw	r23,0(r17)
10014fdc:	8c800117 	ldw	r18,4(r17)
10014fe0:	8c400204 	addi	r17,r17,8
10014fe4:	003fdf06 	br	10014f64 <__alt_data_end+0xf0014f64>
10014fe8:	00172c00 	call	100172c0 <_realloc_r>
10014fec:	102d883a 	mov	r22,r2
10014ff0:	1000a01e 	bne	r2,zero,10015274 <__sfvwrite_r+0x444>
10014ff4:	81400417 	ldw	r5,16(r16)
10014ff8:	a809883a 	mov	r4,r21
10014ffc:	0014b400 	call	10014b40 <_free_r>
10015000:	00800304 	movi	r2,12
10015004:	a8800015 	stw	r2,0(r21)
10015008:	80c0030b 	ldhu	r3,12(r16)
1001500c:	00bfffc4 	movi	r2,-1
10015010:	18c01014 	ori	r3,r3,64
10015014:	80c0030d 	sth	r3,12(r16)
10015018:	003fb106 	br	10014ee0 <__alt_data_end+0xf0014ee0>
1001501c:	0029883a 	mov	r20,zero
10015020:	0011883a 	mov	r8,zero
10015024:	0039883a 	mov	fp,zero
10015028:	0025883a 	mov	r18,zero
1001502c:	90001f26 	beq	r18,zero,100150ac <__sfvwrite_r+0x27c>
10015030:	40006826 	beq	r8,zero,100151d4 <__sfvwrite_r+0x3a4>
10015034:	a02f883a 	mov	r23,r20
10015038:	9500012e 	bgeu	r18,r20,10015040 <__sfvwrite_r+0x210>
1001503c:	902f883a 	mov	r23,r18
10015040:	81000017 	ldw	r4,0(r16)
10015044:	80800417 	ldw	r2,16(r16)
10015048:	b82d883a 	mov	r22,r23
1001504c:	81800217 	ldw	r6,8(r16)
10015050:	81c00517 	ldw	r7,20(r16)
10015054:	1100022e 	bgeu	r2,r4,10015060 <__sfvwrite_r+0x230>
10015058:	31c7883a 	add	r3,r6,r7
1001505c:	1dc01816 	blt	r3,r23,100150c0 <__sfvwrite_r+0x290>
10015060:	b9c03f16 	blt	r23,r7,10015160 <__sfvwrite_r+0x330>
10015064:	80800917 	ldw	r2,36(r16)
10015068:	81400717 	ldw	r5,28(r16)
1001506c:	a809883a 	mov	r4,r21
10015070:	da000115 	stw	r8,4(sp)
10015074:	e00d883a 	mov	r6,fp
10015078:	103ee83a 	callr	r2
1001507c:	102d883a 	mov	r22,r2
10015080:	da000117 	ldw	r8,4(sp)
10015084:	00bfe00e 	bge	zero,r2,10015008 <__alt_data_end+0xf0015008>
10015088:	a5a9c83a 	sub	r20,r20,r22
1001508c:	a0001f26 	beq	r20,zero,1001510c <__sfvwrite_r+0x2dc>
10015090:	98800217 	ldw	r2,8(r19)
10015094:	e5b9883a 	add	fp,fp,r22
10015098:	95a5c83a 	sub	r18,r18,r22
1001509c:	15adc83a 	sub	r22,r2,r22
100150a0:	9d800215 	stw	r22,8(r19)
100150a4:	b03f8d26 	beq	r22,zero,10014edc <__alt_data_end+0xf0014edc>
100150a8:	903fe11e 	bne	r18,zero,10015030 <__alt_data_end+0xf0015030>
100150ac:	8f000017 	ldw	fp,0(r17)
100150b0:	8c800117 	ldw	r18,4(r17)
100150b4:	0011883a 	mov	r8,zero
100150b8:	8c400204 	addi	r17,r17,8
100150bc:	003fdb06 	br	1001502c <__alt_data_end+0xf001502c>
100150c0:	180d883a 	mov	r6,r3
100150c4:	e00b883a 	mov	r5,fp
100150c8:	da000115 	stw	r8,4(sp)
100150cc:	d8c00015 	stw	r3,0(sp)
100150d0:	00161d80 	call	100161d8 <memmove>
100150d4:	d8c00017 	ldw	r3,0(sp)
100150d8:	80800017 	ldw	r2,0(r16)
100150dc:	a809883a 	mov	r4,r21
100150e0:	800b883a 	mov	r5,r16
100150e4:	10c5883a 	add	r2,r2,r3
100150e8:	80800015 	stw	r2,0(r16)
100150ec:	d8c00015 	stw	r3,0(sp)
100150f0:	00141a40 	call	100141a4 <_fflush_r>
100150f4:	d8c00017 	ldw	r3,0(sp)
100150f8:	da000117 	ldw	r8,4(sp)
100150fc:	103fc21e 	bne	r2,zero,10015008 <__alt_data_end+0xf0015008>
10015100:	182d883a 	mov	r22,r3
10015104:	a5a9c83a 	sub	r20,r20,r22
10015108:	a03fe11e 	bne	r20,zero,10015090 <__alt_data_end+0xf0015090>
1001510c:	a809883a 	mov	r4,r21
10015110:	800b883a 	mov	r5,r16
10015114:	00141a40 	call	100141a4 <_fflush_r>
10015118:	103fbb1e 	bne	r2,zero,10015008 <__alt_data_end+0xf0015008>
1001511c:	0011883a 	mov	r8,zero
10015120:	003fdb06 	br	10015090 <__alt_data_end+0xf0015090>
10015124:	81000017 	ldw	r4,0(r16)
10015128:	80800417 	ldw	r2,16(r16)
1001512c:	1100012e 	bgeu	r2,r4,10015134 <__sfvwrite_r+0x304>
10015130:	a4805a36 	bltu	r20,r18,1001529c <__sfvwrite_r+0x46c>
10015134:	81c00517 	ldw	r7,20(r16)
10015138:	91c01a36 	bltu	r18,r7,100151a4 <__sfvwrite_r+0x374>
1001513c:	80800917 	ldw	r2,36(r16)
10015140:	81400717 	ldw	r5,28(r16)
10015144:	a809883a 	mov	r4,r21
10015148:	b80d883a 	mov	r6,r23
1001514c:	103ee83a 	callr	r2
10015150:	1029883a 	mov	r20,r2
10015154:	00bfac0e 	bge	zero,r2,10015008 <__alt_data_end+0xf0015008>
10015158:	a005883a 	mov	r2,r20
1001515c:	003f9606 	br	10014fb8 <__alt_data_end+0xf0014fb8>
10015160:	b80d883a 	mov	r6,r23
10015164:	e00b883a 	mov	r5,fp
10015168:	da000115 	stw	r8,4(sp)
1001516c:	00161d80 	call	100161d8 <memmove>
10015170:	80800217 	ldw	r2,8(r16)
10015174:	80c00017 	ldw	r3,0(r16)
10015178:	da000117 	ldw	r8,4(sp)
1001517c:	15c5c83a 	sub	r2,r2,r23
10015180:	1def883a 	add	r23,r3,r23
10015184:	80800215 	stw	r2,8(r16)
10015188:	85c00015 	stw	r23,0(r16)
1001518c:	003fbe06 	br	10015088 <__alt_data_end+0xf0015088>
10015190:	81000017 	ldw	r4,0(r16)
10015194:	9039883a 	mov	fp,r18
10015198:	9029883a 	mov	r20,r18
1001519c:	902d883a 	mov	r22,r18
100151a0:	003f7b06 	br	10014f90 <__alt_data_end+0xf0014f90>
100151a4:	b80b883a 	mov	r5,r23
100151a8:	900d883a 	mov	r6,r18
100151ac:	00161d80 	call	100161d8 <memmove>
100151b0:	80c00217 	ldw	r3,8(r16)
100151b4:	80800017 	ldw	r2,0(r16)
100151b8:	9029883a 	mov	r20,r18
100151bc:	1c87c83a 	sub	r3,r3,r18
100151c0:	1485883a 	add	r2,r2,r18
100151c4:	80800015 	stw	r2,0(r16)
100151c8:	80c00215 	stw	r3,8(r16)
100151cc:	9005883a 	mov	r2,r18
100151d0:	003f7906 	br	10014fb8 <__alt_data_end+0xf0014fb8>
100151d4:	e009883a 	mov	r4,fp
100151d8:	01400284 	movi	r5,10
100151dc:	900d883a 	mov	r6,r18
100151e0:	00160f00 	call	100160f0 <memchr>
100151e4:	10003826 	beq	r2,zero,100152c8 <__sfvwrite_r+0x498>
100151e8:	10800044 	addi	r2,r2,1
100151ec:	1729c83a 	sub	r20,r2,fp
100151f0:	02000044 	movi	r8,1
100151f4:	003f8f06 	br	10015034 <__alt_data_end+0xf0015034>
100151f8:	80800517 	ldw	r2,20(r16)
100151fc:	81400417 	ldw	r5,16(r16)
10015200:	87000017 	ldw	fp,0(r16)
10015204:	10a9883a 	add	r20,r2,r2
10015208:	a085883a 	add	r2,r20,r2
1001520c:	1028d7fa 	srli	r20,r2,31
10015210:	e179c83a 	sub	fp,fp,r5
10015214:	e1000044 	addi	r4,fp,1
10015218:	a085883a 	add	r2,r20,r2
1001521c:	1029d07a 	srai	r20,r2,1
10015220:	2485883a 	add	r2,r4,r18
10015224:	a00d883a 	mov	r6,r20
10015228:	a080022e 	bgeu	r20,r2,10015234 <__sfvwrite_r+0x404>
1001522c:	1029883a 	mov	r20,r2
10015230:	100d883a 	mov	r6,r2
10015234:	18c1000c 	andi	r3,r3,1024
10015238:	a809883a 	mov	r4,r21
1001523c:	183f6a26 	beq	r3,zero,10014fe8 <__alt_data_end+0xf0014fe8>
10015240:	300b883a 	mov	r5,r6
10015244:	001570c0 	call	1001570c <_malloc_r>
10015248:	102d883a 	mov	r22,r2
1001524c:	103f6c26 	beq	r2,zero,10015000 <__alt_data_end+0xf0015000>
10015250:	81400417 	ldw	r5,16(r16)
10015254:	1009883a 	mov	r4,r2
10015258:	e00d883a 	mov	r6,fp
1001525c:	000c7840 	call	1000c784 <memcpy>
10015260:	8080030b 	ldhu	r2,12(r16)
10015264:	00fedfc4 	movi	r3,-1153
10015268:	10c4703a 	and	r2,r2,r3
1001526c:	10802014 	ori	r2,r2,128
10015270:	8080030d 	sth	r2,12(r16)
10015274:	b709883a 	add	r4,r22,fp
10015278:	a707c83a 	sub	r3,r20,fp
1001527c:	85800415 	stw	r22,16(r16)
10015280:	85000515 	stw	r20,20(r16)
10015284:	81000015 	stw	r4,0(r16)
10015288:	9039883a 	mov	fp,r18
1001528c:	80c00215 	stw	r3,8(r16)
10015290:	9029883a 	mov	r20,r18
10015294:	902d883a 	mov	r22,r18
10015298:	003f3d06 	br	10014f90 <__alt_data_end+0xf0014f90>
1001529c:	b80b883a 	mov	r5,r23
100152a0:	a00d883a 	mov	r6,r20
100152a4:	00161d80 	call	100161d8 <memmove>
100152a8:	80800017 	ldw	r2,0(r16)
100152ac:	a809883a 	mov	r4,r21
100152b0:	800b883a 	mov	r5,r16
100152b4:	1505883a 	add	r2,r2,r20
100152b8:	80800015 	stw	r2,0(r16)
100152bc:	00141a40 	call	100141a4 <_fflush_r>
100152c0:	103fa526 	beq	r2,zero,10015158 <__alt_data_end+0xf0015158>
100152c4:	003f5006 	br	10015008 <__alt_data_end+0xf0015008>
100152c8:	95000044 	addi	r20,r18,1
100152cc:	02000044 	movi	r8,1
100152d0:	003f5806 	br	10015034 <__alt_data_end+0xf0015034>

100152d4 <_fwalk>:
100152d4:	defff804 	addi	sp,sp,-32
100152d8:	dd400515 	stw	r21,20(sp)
100152dc:	2540b804 	addi	r21,r4,736
100152e0:	dd800615 	stw	r22,24(sp)
100152e4:	dd000415 	stw	r20,16(sp)
100152e8:	dfc00715 	stw	ra,28(sp)
100152ec:	dcc00315 	stw	r19,12(sp)
100152f0:	dc800215 	stw	r18,8(sp)
100152f4:	dc400115 	stw	r17,4(sp)
100152f8:	dc000015 	stw	r16,0(sp)
100152fc:	2829883a 	mov	r20,r5
10015300:	002d883a 	mov	r22,zero
10015304:	001475c0 	call	1001475c <__sfp_lock_acquire>
10015308:	a8001426 	beq	r21,zero,1001535c <_fwalk+0x88>
1001530c:	04ffffc4 	movi	r19,-1
10015310:	ac400117 	ldw	r17,4(r21)
10015314:	ac800217 	ldw	r18,8(r21)
10015318:	8c7fffc4 	addi	r17,r17,-1
1001531c:	88000d16 	blt	r17,zero,10015354 <_fwalk+0x80>
10015320:	94000304 	addi	r16,r18,12
10015324:	94800384 	addi	r18,r18,14
10015328:	80c0000f 	ldh	r3,0(r16)
1001532c:	8c7fffc4 	addi	r17,r17,-1
10015330:	813ffd04 	addi	r4,r16,-12
10015334:	18000426 	beq	r3,zero,10015348 <_fwalk+0x74>
10015338:	90c0000f 	ldh	r3,0(r18)
1001533c:	1cc00226 	beq	r3,r19,10015348 <_fwalk+0x74>
10015340:	a03ee83a 	callr	r20
10015344:	b0acb03a 	or	r22,r22,r2
10015348:	84001a04 	addi	r16,r16,104
1001534c:	94801a04 	addi	r18,r18,104
10015350:	8cfff51e 	bne	r17,r19,10015328 <__alt_data_end+0xf0015328>
10015354:	ad400017 	ldw	r21,0(r21)
10015358:	a83fed1e 	bne	r21,zero,10015310 <__alt_data_end+0xf0015310>
1001535c:	00147600 	call	10014760 <__sfp_lock_release>
10015360:	b005883a 	mov	r2,r22
10015364:	dfc00717 	ldw	ra,28(sp)
10015368:	dd800617 	ldw	r22,24(sp)
1001536c:	dd400517 	ldw	r21,20(sp)
10015370:	dd000417 	ldw	r20,16(sp)
10015374:	dcc00317 	ldw	r19,12(sp)
10015378:	dc800217 	ldw	r18,8(sp)
1001537c:	dc400117 	ldw	r17,4(sp)
10015380:	dc000017 	ldw	r16,0(sp)
10015384:	dec00804 	addi	sp,sp,32
10015388:	f800283a 	ret

1001538c <_fwalk_reent>:
1001538c:	defff804 	addi	sp,sp,-32
10015390:	dd400515 	stw	r21,20(sp)
10015394:	2540b804 	addi	r21,r4,736
10015398:	dd800615 	stw	r22,24(sp)
1001539c:	dd000415 	stw	r20,16(sp)
100153a0:	dcc00315 	stw	r19,12(sp)
100153a4:	dfc00715 	stw	ra,28(sp)
100153a8:	dc800215 	stw	r18,8(sp)
100153ac:	dc400115 	stw	r17,4(sp)
100153b0:	dc000015 	stw	r16,0(sp)
100153b4:	2027883a 	mov	r19,r4
100153b8:	2829883a 	mov	r20,r5
100153bc:	002d883a 	mov	r22,zero
100153c0:	001475c0 	call	1001475c <__sfp_lock_acquire>
100153c4:	a8001326 	beq	r21,zero,10015414 <_fwalk_reent+0x88>
100153c8:	04bfffc4 	movi	r18,-1
100153cc:	ac400117 	ldw	r17,4(r21)
100153d0:	ac000217 	ldw	r16,8(r21)
100153d4:	8c7fffc4 	addi	r17,r17,-1
100153d8:	88000c16 	blt	r17,zero,1001540c <_fwalk_reent+0x80>
100153dc:	84000304 	addi	r16,r16,12
100153e0:	80c0000f 	ldh	r3,0(r16)
100153e4:	8c7fffc4 	addi	r17,r17,-1
100153e8:	817ffd04 	addi	r5,r16,-12
100153ec:	18000526 	beq	r3,zero,10015404 <_fwalk_reent+0x78>
100153f0:	80c0008f 	ldh	r3,2(r16)
100153f4:	9809883a 	mov	r4,r19
100153f8:	1c800226 	beq	r3,r18,10015404 <_fwalk_reent+0x78>
100153fc:	a03ee83a 	callr	r20
10015400:	b0acb03a 	or	r22,r22,r2
10015404:	84001a04 	addi	r16,r16,104
10015408:	8cbff51e 	bne	r17,r18,100153e0 <__alt_data_end+0xf00153e0>
1001540c:	ad400017 	ldw	r21,0(r21)
10015410:	a83fee1e 	bne	r21,zero,100153cc <__alt_data_end+0xf00153cc>
10015414:	00147600 	call	10014760 <__sfp_lock_release>
10015418:	b005883a 	mov	r2,r22
1001541c:	dfc00717 	ldw	ra,28(sp)
10015420:	dd800617 	ldw	r22,24(sp)
10015424:	dd400517 	ldw	r21,20(sp)
10015428:	dd000417 	ldw	r20,16(sp)
1001542c:	dcc00317 	ldw	r19,12(sp)
10015430:	dc800217 	ldw	r18,8(sp)
10015434:	dc400117 	ldw	r17,4(sp)
10015438:	dc000017 	ldw	r16,0(sp)
1001543c:	dec00804 	addi	sp,sp,32
10015440:	f800283a 	ret

10015444 <iswspace>:
10015444:	00803fc4 	movi	r2,255
10015448:	11000836 	bltu	r2,r4,1001546c <iswspace+0x28>
1001544c:	008400b4 	movhi	r2,4098
10015450:	109d0e04 	addi	r2,r2,29752
10015454:	10800017 	ldw	r2,0(r2)
10015458:	1109883a 	add	r4,r2,r4
1001545c:	20800043 	ldbu	r2,1(r4)
10015460:	1080020c 	andi	r2,r2,8
10015464:	10803fcc 	andi	r2,r2,255
10015468:	f800283a 	ret
1001546c:	0005883a 	mov	r2,zero
10015470:	f800283a 	ret

10015474 <_setlocale_r>:
10015474:	30001b26 	beq	r6,zero,100154e4 <_setlocale_r+0x70>
10015478:	014400b4 	movhi	r5,4098
1001547c:	defffe04 	addi	sp,sp,-8
10015480:	29550604 	addi	r5,r5,21528
10015484:	3009883a 	mov	r4,r6
10015488:	dc000015 	stw	r16,0(sp)
1001548c:	dfc00115 	stw	ra,4(sp)
10015490:	3021883a 	mov	r16,r6
10015494:	0017cf00 	call	10017cf0 <strcmp>
10015498:	1000061e 	bne	r2,zero,100154b4 <_setlocale_r+0x40>
1001549c:	008400b4 	movhi	r2,4098
100154a0:	10950504 	addi	r2,r2,21524
100154a4:	dfc00117 	ldw	ra,4(sp)
100154a8:	dc000017 	ldw	r16,0(sp)
100154ac:	dec00204 	addi	sp,sp,8
100154b0:	f800283a 	ret
100154b4:	014400b4 	movhi	r5,4098
100154b8:	29550504 	addi	r5,r5,21524
100154bc:	8009883a 	mov	r4,r16
100154c0:	0017cf00 	call	10017cf0 <strcmp>
100154c4:	103ff526 	beq	r2,zero,1001549c <__alt_data_end+0xf001549c>
100154c8:	014400b4 	movhi	r5,4098
100154cc:	29543d04 	addi	r5,r5,20724
100154d0:	8009883a 	mov	r4,r16
100154d4:	0017cf00 	call	10017cf0 <strcmp>
100154d8:	103ff026 	beq	r2,zero,1001549c <__alt_data_end+0xf001549c>
100154dc:	0005883a 	mov	r2,zero
100154e0:	003ff006 	br	100154a4 <__alt_data_end+0xf00154a4>
100154e4:	008400b4 	movhi	r2,4098
100154e8:	10950504 	addi	r2,r2,21524
100154ec:	f800283a 	ret

100154f0 <__locale_charset>:
100154f0:	008400b4 	movhi	r2,4098
100154f4:	1096f604 	addi	r2,r2,23512
100154f8:	f800283a 	ret

100154fc <__locale_mb_cur_max>:
100154fc:	008400b4 	movhi	r2,4098
10015500:	109d1104 	addi	r2,r2,29764
10015504:	10800017 	ldw	r2,0(r2)
10015508:	f800283a 	ret

1001550c <__locale_msgcharset>:
1001550c:	008400b4 	movhi	r2,4098
10015510:	1096ee04 	addi	r2,r2,23480
10015514:	f800283a 	ret

10015518 <__locale_cjk_lang>:
10015518:	0005883a 	mov	r2,zero
1001551c:	f800283a 	ret

10015520 <_localeconv_r>:
10015520:	008400b4 	movhi	r2,4098
10015524:	1096fe04 	addi	r2,r2,23544
10015528:	f800283a 	ret

1001552c <setlocale>:
1001552c:	00c400b4 	movhi	r3,4098
10015530:	18dd1004 	addi	r3,r3,29760
10015534:	2005883a 	mov	r2,r4
10015538:	19000017 	ldw	r4,0(r3)
1001553c:	280d883a 	mov	r6,r5
10015540:	100b883a 	mov	r5,r2
10015544:	00154741 	jmpi	10015474 <_setlocale_r>

10015548 <localeconv>:
10015548:	008400b4 	movhi	r2,4098
1001554c:	1096fe04 	addi	r2,r2,23544
10015550:	f800283a 	ret

10015554 <__smakebuf_r>:
10015554:	2880030b 	ldhu	r2,12(r5)
10015558:	10c0008c 	andi	r3,r2,2
1001555c:	1800401e 	bne	r3,zero,10015660 <__smakebuf_r+0x10c>
10015560:	deffec04 	addi	sp,sp,-80
10015564:	dc000f15 	stw	r16,60(sp)
10015568:	2821883a 	mov	r16,r5
1001556c:	2940038f 	ldh	r5,14(r5)
10015570:	dc401015 	stw	r17,64(sp)
10015574:	dfc01315 	stw	ra,76(sp)
10015578:	dcc01215 	stw	r19,72(sp)
1001557c:	dc801115 	stw	r18,68(sp)
10015580:	2023883a 	mov	r17,r4
10015584:	28001b16 	blt	r5,zero,100155f4 <__smakebuf_r+0xa0>
10015588:	d80d883a 	mov	r6,sp
1001558c:	001caa80 	call	1001caa8 <_fstat_r>
10015590:	10001716 	blt	r2,zero,100155f0 <__smakebuf_r+0x9c>
10015594:	d8800117 	ldw	r2,4(sp)
10015598:	00e00014 	movui	r3,32768
1001559c:	10bc000c 	andi	r2,r2,61440
100155a0:	10c03726 	beq	r2,r3,10015680 <__smakebuf_r+0x12c>
100155a4:	80c0030b 	ldhu	r3,12(r16)
100155a8:	18c20014 	ori	r3,r3,2048
100155ac:	80c0030d 	sth	r3,12(r16)
100155b0:	00c80004 	movi	r3,8192
100155b4:	10c03c1e 	bne	r2,r3,100156a8 <__smakebuf_r+0x154>
100155b8:	8140038f 	ldh	r5,14(r16)
100155bc:	8809883a 	mov	r4,r17
100155c0:	001d7340 	call	1001d734 <_isatty_r>
100155c4:	10004e26 	beq	r2,zero,10015700 <__smakebuf_r+0x1ac>
100155c8:	8080030b 	ldhu	r2,12(r16)
100155cc:	04c00044 	movi	r19,1
100155d0:	80c010c4 	addi	r3,r16,67
100155d4:	14c4b03a 	or	r2,r2,r19
100155d8:	8080030d 	sth	r2,12(r16)
100155dc:	80c00015 	stw	r3,0(r16)
100155e0:	80c00415 	stw	r3,16(r16)
100155e4:	84c00515 	stw	r19,20(r16)
100155e8:	04810004 	movi	r18,1024
100155ec:	00000706 	br	1001560c <__smakebuf_r+0xb8>
100155f0:	8080030b 	ldhu	r2,12(r16)
100155f4:	10c0200c 	andi	r3,r2,128
100155f8:	18001f1e 	bne	r3,zero,10015678 <__smakebuf_r+0x124>
100155fc:	04810004 	movi	r18,1024
10015600:	10820014 	ori	r2,r2,2048
10015604:	8080030d 	sth	r2,12(r16)
10015608:	0027883a 	mov	r19,zero
1001560c:	8809883a 	mov	r4,r17
10015610:	900b883a 	mov	r5,r18
10015614:	001570c0 	call	1001570c <_malloc_r>
10015618:	10002e26 	beq	r2,zero,100156d4 <__smakebuf_r+0x180>
1001561c:	80c0030b 	ldhu	r3,12(r16)
10015620:	01040074 	movhi	r4,4097
10015624:	21110304 	addi	r4,r4,17420
10015628:	89000f15 	stw	r4,60(r17)
1001562c:	18c02014 	ori	r3,r3,128
10015630:	80c0030d 	sth	r3,12(r16)
10015634:	80800015 	stw	r2,0(r16)
10015638:	80800415 	stw	r2,16(r16)
1001563c:	84800515 	stw	r18,20(r16)
10015640:	98001c1e 	bne	r19,zero,100156b4 <__smakebuf_r+0x160>
10015644:	dfc01317 	ldw	ra,76(sp)
10015648:	dcc01217 	ldw	r19,72(sp)
1001564c:	dc801117 	ldw	r18,68(sp)
10015650:	dc401017 	ldw	r17,64(sp)
10015654:	dc000f17 	ldw	r16,60(sp)
10015658:	dec01404 	addi	sp,sp,80
1001565c:	f800283a 	ret
10015660:	288010c4 	addi	r2,r5,67
10015664:	28800015 	stw	r2,0(r5)
10015668:	28800415 	stw	r2,16(r5)
1001566c:	00800044 	movi	r2,1
10015670:	28800515 	stw	r2,20(r5)
10015674:	f800283a 	ret
10015678:	04801004 	movi	r18,64
1001567c:	003fe006 	br	10015600 <__alt_data_end+0xf0015600>
10015680:	81000a17 	ldw	r4,40(r16)
10015684:	00c40074 	movhi	r3,4097
10015688:	18df2304 	addi	r3,r3,31884
1001568c:	20ffc51e 	bne	r4,r3,100155a4 <__alt_data_end+0xf00155a4>
10015690:	80c0030b 	ldhu	r3,12(r16)
10015694:	01010004 	movi	r4,1024
10015698:	81001315 	stw	r4,76(r16)
1001569c:	1906b03a 	or	r3,r3,r4
100156a0:	80c0030d 	sth	r3,12(r16)
100156a4:	003fc206 	br	100155b0 <__alt_data_end+0xf00155b0>
100156a8:	0027883a 	mov	r19,zero
100156ac:	04810004 	movi	r18,1024
100156b0:	003fd606 	br	1001560c <__alt_data_end+0xf001560c>
100156b4:	8140038f 	ldh	r5,14(r16)
100156b8:	8809883a 	mov	r4,r17
100156bc:	001d7340 	call	1001d734 <_isatty_r>
100156c0:	103fe026 	beq	r2,zero,10015644 <__alt_data_end+0xf0015644>
100156c4:	8080030b 	ldhu	r2,12(r16)
100156c8:	10800054 	ori	r2,r2,1
100156cc:	8080030d 	sth	r2,12(r16)
100156d0:	003fdc06 	br	10015644 <__alt_data_end+0xf0015644>
100156d4:	8080030b 	ldhu	r2,12(r16)
100156d8:	10c0800c 	andi	r3,r2,512
100156dc:	183fd91e 	bne	r3,zero,10015644 <__alt_data_end+0xf0015644>
100156e0:	10800094 	ori	r2,r2,2
100156e4:	80c010c4 	addi	r3,r16,67
100156e8:	8080030d 	sth	r2,12(r16)
100156ec:	00800044 	movi	r2,1
100156f0:	80c00015 	stw	r3,0(r16)
100156f4:	80c00415 	stw	r3,16(r16)
100156f8:	80800515 	stw	r2,20(r16)
100156fc:	003fd106 	br	10015644 <__alt_data_end+0xf0015644>
10015700:	04c00044 	movi	r19,1
10015704:	04810004 	movi	r18,1024
10015708:	003fc006 	br	1001560c <__alt_data_end+0xf001560c>

1001570c <_malloc_r>:
1001570c:	defff504 	addi	sp,sp,-44
10015710:	dc800315 	stw	r18,12(sp)
10015714:	dfc00a15 	stw	ra,40(sp)
10015718:	df000915 	stw	fp,36(sp)
1001571c:	ddc00815 	stw	r23,32(sp)
10015720:	dd800715 	stw	r22,28(sp)
10015724:	dd400615 	stw	r21,24(sp)
10015728:	dd000515 	stw	r20,20(sp)
1001572c:	dcc00415 	stw	r19,16(sp)
10015730:	dc400215 	stw	r17,8(sp)
10015734:	dc000115 	stw	r16,4(sp)
10015738:	288002c4 	addi	r2,r5,11
1001573c:	00c00584 	movi	r3,22
10015740:	2025883a 	mov	r18,r4
10015744:	18802a2e 	bgeu	r3,r2,100157f0 <_malloc_r+0xe4>
10015748:	047ffe04 	movi	r17,-8
1001574c:	1462703a 	and	r17,r2,r17
10015750:	88009e16 	blt	r17,zero,100159cc <_malloc_r+0x2c0>
10015754:	89409d36 	bltu	r17,r5,100159cc <_malloc_r+0x2c0>
10015758:	0021aa00 	call	10021aa0 <__malloc_lock>
1001575c:	00807dc4 	movi	r2,503
10015760:	14402736 	bltu	r2,r17,10015800 <_malloc_r+0xf4>
10015764:	8806d0fa 	srli	r3,r17,3
10015768:	04c400b4 	movhi	r19,4098
1001576c:	9cd70c04 	addi	r19,r19,23600
10015770:	18c5883a 	add	r2,r3,r3
10015774:	1085883a 	add	r2,r2,r2
10015778:	1085883a 	add	r2,r2,r2
1001577c:	9885883a 	add	r2,r19,r2
10015780:	14000317 	ldw	r16,12(r2)
10015784:	80814a26 	beq	r16,r2,10015cb0 <_malloc_r+0x5a4>
10015788:	80c00117 	ldw	r3,4(r16)
1001578c:	81000317 	ldw	r4,12(r16)
10015790:	00bfff04 	movi	r2,-4
10015794:	1884703a 	and	r2,r3,r2
10015798:	81400217 	ldw	r5,8(r16)
1001579c:	8085883a 	add	r2,r16,r2
100157a0:	10c00117 	ldw	r3,4(r2)
100157a4:	29000315 	stw	r4,12(r5)
100157a8:	21400215 	stw	r5,8(r4)
100157ac:	18c00054 	ori	r3,r3,1
100157b0:	10c00115 	stw	r3,4(r2)
100157b4:	9009883a 	mov	r4,r18
100157b8:	0021ac00 	call	10021ac0 <__malloc_unlock>
100157bc:	80800204 	addi	r2,r16,8
100157c0:	dfc00a17 	ldw	ra,40(sp)
100157c4:	df000917 	ldw	fp,36(sp)
100157c8:	ddc00817 	ldw	r23,32(sp)
100157cc:	dd800717 	ldw	r22,28(sp)
100157d0:	dd400617 	ldw	r21,24(sp)
100157d4:	dd000517 	ldw	r20,20(sp)
100157d8:	dcc00417 	ldw	r19,16(sp)
100157dc:	dc800317 	ldw	r18,12(sp)
100157e0:	dc400217 	ldw	r17,8(sp)
100157e4:	dc000117 	ldw	r16,4(sp)
100157e8:	dec00b04 	addi	sp,sp,44
100157ec:	f800283a 	ret
100157f0:	04400404 	movi	r17,16
100157f4:	89407536 	bltu	r17,r5,100159cc <_malloc_r+0x2c0>
100157f8:	0021aa00 	call	10021aa0 <__malloc_lock>
100157fc:	003fd906 	br	10015764 <__alt_data_end+0xf0015764>
10015800:	8806d27a 	srli	r3,r17,9
10015804:	18007526 	beq	r3,zero,100159dc <_malloc_r+0x2d0>
10015808:	00800104 	movi	r2,4
1001580c:	10c0ef36 	bltu	r2,r3,10015bcc <_malloc_r+0x4c0>
10015810:	8806d1ba 	srli	r3,r17,6
10015814:	19c00e04 	addi	r7,r3,56
10015818:	39cb883a 	add	r5,r7,r7
1001581c:	04c400b4 	movhi	r19,4098
10015820:	294b883a 	add	r5,r5,r5
10015824:	9cd70c04 	addi	r19,r19,23600
10015828:	294b883a 	add	r5,r5,r5
1001582c:	994b883a 	add	r5,r19,r5
10015830:	2c000317 	ldw	r16,12(r5)
10015834:	2c000e26 	beq	r5,r16,10015870 <_malloc_r+0x164>
10015838:	80800117 	ldw	r2,4(r16)
1001583c:	01bfff04 	movi	r6,-4
10015840:	010003c4 	movi	r4,15
10015844:	1184703a 	and	r2,r2,r6
10015848:	1447c83a 	sub	r3,r2,r17
1001584c:	20c00716 	blt	r4,r3,1001586c <_malloc_r+0x160>
10015850:	1800650e 	bge	r3,zero,100159e8 <_malloc_r+0x2dc>
10015854:	84000317 	ldw	r16,12(r16)
10015858:	2c000526 	beq	r5,r16,10015870 <_malloc_r+0x164>
1001585c:	80800117 	ldw	r2,4(r16)
10015860:	1184703a 	and	r2,r2,r6
10015864:	1447c83a 	sub	r3,r2,r17
10015868:	20fff90e 	bge	r4,r3,10015850 <__alt_data_end+0xf0015850>
1001586c:	39ffffc4 	addi	r7,r7,-1
10015870:	38c00044 	addi	r3,r7,1
10015874:	018400b4 	movhi	r6,4098
10015878:	9c000417 	ldw	r16,16(r19)
1001587c:	31970c04 	addi	r6,r6,23600
10015880:	32400204 	addi	r9,r6,8
10015884:	82410326 	beq	r16,r9,10015c94 <_malloc_r+0x588>
10015888:	81000117 	ldw	r4,4(r16)
1001588c:	00bfff04 	movi	r2,-4
10015890:	208e703a 	and	r7,r4,r2
10015894:	3c45c83a 	sub	r2,r7,r17
10015898:	010003c4 	movi	r4,15
1001589c:	2080ee16 	blt	r4,r2,10015c58 <_malloc_r+0x54c>
100158a0:	32400515 	stw	r9,20(r6)
100158a4:	32400415 	stw	r9,16(r6)
100158a8:	1000510e 	bge	r2,zero,100159f0 <_malloc_r+0x2e4>
100158ac:	00807fc4 	movi	r2,511
100158b0:	11c0ce36 	bltu	r2,r7,10015bec <_malloc_r+0x4e0>
100158b4:	3808d0fa 	srli	r4,r7,3
100158b8:	01c00044 	movi	r7,1
100158bc:	30800117 	ldw	r2,4(r6)
100158c0:	210b883a 	add	r5,r4,r4
100158c4:	294b883a 	add	r5,r5,r5
100158c8:	2009d0ba 	srai	r4,r4,2
100158cc:	294b883a 	add	r5,r5,r5
100158d0:	298b883a 	add	r5,r5,r6
100158d4:	2a000217 	ldw	r8,8(r5)
100158d8:	3908983a 	sll	r4,r7,r4
100158dc:	81400315 	stw	r5,12(r16)
100158e0:	82000215 	stw	r8,8(r16)
100158e4:	2088b03a 	or	r4,r4,r2
100158e8:	2c000215 	stw	r16,8(r5)
100158ec:	31000115 	stw	r4,4(r6)
100158f0:	44000315 	stw	r16,12(r8)
100158f4:	1805d0ba 	srai	r2,r3,2
100158f8:	01400044 	movi	r5,1
100158fc:	288a983a 	sll	r5,r5,r2
10015900:	21404336 	bltu	r4,r5,10015a10 <_malloc_r+0x304>
10015904:	2144703a 	and	r2,r4,r5
10015908:	10000a1e 	bne	r2,zero,10015934 <_malloc_r+0x228>
1001590c:	00bfff04 	movi	r2,-4
10015910:	294b883a 	add	r5,r5,r5
10015914:	1886703a 	and	r3,r3,r2
10015918:	2144703a 	and	r2,r4,r5
1001591c:	18c00104 	addi	r3,r3,4
10015920:	1000041e 	bne	r2,zero,10015934 <_malloc_r+0x228>
10015924:	294b883a 	add	r5,r5,r5
10015928:	2144703a 	and	r2,r4,r5
1001592c:	18c00104 	addi	r3,r3,4
10015930:	103ffc26 	beq	r2,zero,10015924 <__alt_data_end+0xf0015924>
10015934:	023fff04 	movi	r8,-4
10015938:	01c003c4 	movi	r7,15
1001593c:	18c5883a 	add	r2,r3,r3
10015940:	1085883a 	add	r2,r2,r2
10015944:	1085883a 	add	r2,r2,r2
10015948:	9895883a 	add	r10,r19,r2
1001594c:	52c00304 	addi	r11,r10,12
10015950:	1819883a 	mov	r12,r3
10015954:	5c000017 	ldw	r16,0(r11)
10015958:	59bffd04 	addi	r6,r11,-12
1001595c:	8180041e 	bne	r16,r6,10015970 <_malloc_r+0x264>
10015960:	0000ce06 	br	10015c9c <_malloc_r+0x590>
10015964:	2000d70e 	bge	r4,zero,10015cc4 <_malloc_r+0x5b8>
10015968:	84000317 	ldw	r16,12(r16)
1001596c:	8180cb26 	beq	r16,r6,10015c9c <_malloc_r+0x590>
10015970:	80800117 	ldw	r2,4(r16)
10015974:	1204703a 	and	r2,r2,r8
10015978:	1449c83a 	sub	r4,r2,r17
1001597c:	393ff90e 	bge	r7,r4,10015964 <__alt_data_end+0xf0015964>
10015980:	80800317 	ldw	r2,12(r16)
10015984:	80c00217 	ldw	r3,8(r16)
10015988:	89400054 	ori	r5,r17,1
1001598c:	81400115 	stw	r5,4(r16)
10015990:	18800315 	stw	r2,12(r3)
10015994:	10c00215 	stw	r3,8(r2)
10015998:	8463883a 	add	r17,r16,r17
1001599c:	9c400515 	stw	r17,20(r19)
100159a0:	9c400415 	stw	r17,16(r19)
100159a4:	20800054 	ori	r2,r4,1
100159a8:	88800115 	stw	r2,4(r17)
100159ac:	8a400315 	stw	r9,12(r17)
100159b0:	8a400215 	stw	r9,8(r17)
100159b4:	8923883a 	add	r17,r17,r4
100159b8:	89000015 	stw	r4,0(r17)
100159bc:	9009883a 	mov	r4,r18
100159c0:	0021ac00 	call	10021ac0 <__malloc_unlock>
100159c4:	80800204 	addi	r2,r16,8
100159c8:	003f7d06 	br	100157c0 <__alt_data_end+0xf00157c0>
100159cc:	00800304 	movi	r2,12
100159d0:	90800015 	stw	r2,0(r18)
100159d4:	0005883a 	mov	r2,zero
100159d8:	003f7906 	br	100157c0 <__alt_data_end+0xf00157c0>
100159dc:	01401f84 	movi	r5,126
100159e0:	01c00fc4 	movi	r7,63
100159e4:	003f8d06 	br	1001581c <__alt_data_end+0xf001581c>
100159e8:	81000317 	ldw	r4,12(r16)
100159ec:	003f6a06 	br	10015798 <__alt_data_end+0xf0015798>
100159f0:	81c5883a 	add	r2,r16,r7
100159f4:	10c00117 	ldw	r3,4(r2)
100159f8:	9009883a 	mov	r4,r18
100159fc:	18c00054 	ori	r3,r3,1
10015a00:	10c00115 	stw	r3,4(r2)
10015a04:	0021ac00 	call	10021ac0 <__malloc_unlock>
10015a08:	80800204 	addi	r2,r16,8
10015a0c:	003f6c06 	br	100157c0 <__alt_data_end+0xf00157c0>
10015a10:	9c000217 	ldw	r16,8(r19)
10015a14:	00bfff04 	movi	r2,-4
10015a18:	85800117 	ldw	r22,4(r16)
10015a1c:	b0ac703a 	and	r22,r22,r2
10015a20:	b4400336 	bltu	r22,r17,10015a30 <_malloc_r+0x324>
10015a24:	b445c83a 	sub	r2,r22,r17
10015a28:	00c003c4 	movi	r3,15
10015a2c:	18805d16 	blt	r3,r2,10015ba4 <_malloc_r+0x498>
10015a30:	05c400b4 	movhi	r23,4098
10015a34:	008400f4 	movhi	r2,4099
10015a38:	bddd1204 	addi	r23,r23,29768
10015a3c:	10a48a04 	addi	r2,r2,-28120
10015a40:	15400017 	ldw	r21,0(r2)
10015a44:	b9000017 	ldw	r4,0(r23)
10015a48:	00ffffc4 	movi	r3,-1
10015a4c:	858d883a 	add	r6,r16,r22
10015a50:	8d6b883a 	add	r21,r17,r21
10015a54:	20c0e426 	beq	r4,r3,10015de8 <_malloc_r+0x6dc>
10015a58:	ad4403c4 	addi	r21,r21,4111
10015a5c:	00fc0004 	movi	r3,-4096
10015a60:	a8ea703a 	and	r21,r21,r3
10015a64:	9009883a 	mov	r4,r18
10015a68:	a80b883a 	mov	r5,r21
10015a6c:	d9800015 	stw	r6,0(sp)
10015a70:	0017a980 	call	10017a98 <_sbrk_r>
10015a74:	00ffffc4 	movi	r3,-1
10015a78:	1029883a 	mov	r20,r2
10015a7c:	d9800017 	ldw	r6,0(sp)
10015a80:	10c0a426 	beq	r2,r3,10015d14 <_malloc_r+0x608>
10015a84:	1180a236 	bltu	r2,r6,10015d10 <_malloc_r+0x604>
10015a88:	070400f4 	movhi	fp,4099
10015a8c:	e7249d04 	addi	fp,fp,-28044
10015a90:	e0c00017 	ldw	r3,0(fp)
10015a94:	a8c7883a 	add	r3,r21,r3
10015a98:	e0c00015 	stw	r3,0(fp)
10015a9c:	3500da26 	beq	r6,r20,10015e08 <_malloc_r+0x6fc>
10015aa0:	b9000017 	ldw	r4,0(r23)
10015aa4:	00bfffc4 	movi	r2,-1
10015aa8:	2080e426 	beq	r4,r2,10015e3c <_malloc_r+0x730>
10015aac:	a185c83a 	sub	r2,r20,r6
10015ab0:	1885883a 	add	r2,r3,r2
10015ab4:	e0800015 	stw	r2,0(fp)
10015ab8:	a0c001cc 	andi	r3,r20,7
10015abc:	1800b526 	beq	r3,zero,10015d94 <_malloc_r+0x688>
10015ac0:	a0e9c83a 	sub	r20,r20,r3
10015ac4:	00840204 	movi	r2,4104
10015ac8:	a5000204 	addi	r20,r20,8
10015acc:	10c7c83a 	sub	r3,r2,r3
10015ad0:	a545883a 	add	r2,r20,r21
10015ad4:	1083ffcc 	andi	r2,r2,4095
10015ad8:	18abc83a 	sub	r21,r3,r2
10015adc:	9009883a 	mov	r4,r18
10015ae0:	a80b883a 	mov	r5,r21
10015ae4:	0017a980 	call	10017a98 <_sbrk_r>
10015ae8:	00ffffc4 	movi	r3,-1
10015aec:	10c0d026 	beq	r2,r3,10015e30 <_malloc_r+0x724>
10015af0:	1507c83a 	sub	r3,r2,r20
10015af4:	a8c7883a 	add	r3,r21,r3
10015af8:	18c00054 	ori	r3,r3,1
10015afc:	e0800017 	ldw	r2,0(fp)
10015b00:	9d000215 	stw	r20,8(r19)
10015b04:	a0c00115 	stw	r3,4(r20)
10015b08:	a887883a 	add	r3,r21,r2
10015b0c:	e0c00015 	stw	r3,0(fp)
10015b10:	84c00e26 	beq	r16,r19,10015b4c <_malloc_r+0x440>
10015b14:	018003c4 	movi	r6,15
10015b18:	3580a02e 	bgeu	r6,r22,10015d9c <_malloc_r+0x690>
10015b1c:	81400117 	ldw	r5,4(r16)
10015b20:	013ffe04 	movi	r4,-8
10015b24:	b0bffd04 	addi	r2,r22,-12
10015b28:	1104703a 	and	r2,r2,r4
10015b2c:	2900004c 	andi	r4,r5,1
10015b30:	1108b03a 	or	r4,r2,r4
10015b34:	81000115 	stw	r4,4(r16)
10015b38:	01400144 	movi	r5,5
10015b3c:	8089883a 	add	r4,r16,r2
10015b40:	21400115 	stw	r5,4(r4)
10015b44:	21400215 	stw	r5,8(r4)
10015b48:	3080c036 	bltu	r6,r2,10015e4c <_malloc_r+0x740>
10015b4c:	008400f4 	movhi	r2,4099
10015b50:	10a48904 	addi	r2,r2,-28124
10015b54:	11000017 	ldw	r4,0(r2)
10015b58:	20c0012e 	bgeu	r4,r3,10015b60 <_malloc_r+0x454>
10015b5c:	10c00015 	stw	r3,0(r2)
10015b60:	008400f4 	movhi	r2,4099
10015b64:	10a48804 	addi	r2,r2,-28128
10015b68:	11000017 	ldw	r4,0(r2)
10015b6c:	9c000217 	ldw	r16,8(r19)
10015b70:	20c0012e 	bgeu	r4,r3,10015b78 <_malloc_r+0x46c>
10015b74:	10c00015 	stw	r3,0(r2)
10015b78:	80c00117 	ldw	r3,4(r16)
10015b7c:	00bfff04 	movi	r2,-4
10015b80:	1886703a 	and	r3,r3,r2
10015b84:	1c45c83a 	sub	r2,r3,r17
10015b88:	1c400236 	bltu	r3,r17,10015b94 <_malloc_r+0x488>
10015b8c:	00c003c4 	movi	r3,15
10015b90:	18800416 	blt	r3,r2,10015ba4 <_malloc_r+0x498>
10015b94:	9009883a 	mov	r4,r18
10015b98:	0021ac00 	call	10021ac0 <__malloc_unlock>
10015b9c:	0005883a 	mov	r2,zero
10015ba0:	003f0706 	br	100157c0 <__alt_data_end+0xf00157c0>
10015ba4:	88c00054 	ori	r3,r17,1
10015ba8:	80c00115 	stw	r3,4(r16)
10015bac:	8463883a 	add	r17,r16,r17
10015bb0:	10800054 	ori	r2,r2,1
10015bb4:	9c400215 	stw	r17,8(r19)
10015bb8:	88800115 	stw	r2,4(r17)
10015bbc:	9009883a 	mov	r4,r18
10015bc0:	0021ac00 	call	10021ac0 <__malloc_unlock>
10015bc4:	80800204 	addi	r2,r16,8
10015bc8:	003efd06 	br	100157c0 <__alt_data_end+0xf00157c0>
10015bcc:	00800504 	movi	r2,20
10015bd0:	10c0482e 	bgeu	r2,r3,10015cf4 <_malloc_r+0x5e8>
10015bd4:	00801504 	movi	r2,84
10015bd8:	10c06836 	bltu	r2,r3,10015d7c <_malloc_r+0x670>
10015bdc:	8806d33a 	srli	r3,r17,12
10015be0:	19c01b84 	addi	r7,r3,110
10015be4:	39cb883a 	add	r5,r7,r7
10015be8:	003f0c06 	br	1001581c <__alt_data_end+0xf001581c>
10015bec:	3804d27a 	srli	r2,r7,9
10015bf0:	01000104 	movi	r4,4
10015bf4:	2080422e 	bgeu	r4,r2,10015d00 <_malloc_r+0x5f4>
10015bf8:	01000504 	movi	r4,20
10015bfc:	20807c36 	bltu	r4,r2,10015df0 <_malloc_r+0x6e4>
10015c00:	110016c4 	addi	r4,r2,91
10015c04:	210b883a 	add	r5,r4,r4
10015c08:	294b883a 	add	r5,r5,r5
10015c0c:	294b883a 	add	r5,r5,r5
10015c10:	994b883a 	add	r5,r19,r5
10015c14:	28800217 	ldw	r2,8(r5)
10015c18:	020400b4 	movhi	r8,4098
10015c1c:	42170c04 	addi	r8,r8,23600
10015c20:	11406326 	beq	r2,r5,10015db0 <_malloc_r+0x6a4>
10015c24:	01bfff04 	movi	r6,-4
10015c28:	11000117 	ldw	r4,4(r2)
10015c2c:	2188703a 	and	r4,r4,r6
10015c30:	3900022e 	bgeu	r7,r4,10015c3c <_malloc_r+0x530>
10015c34:	10800217 	ldw	r2,8(r2)
10015c38:	28bffb1e 	bne	r5,r2,10015c28 <__alt_data_end+0xf0015c28>
10015c3c:	11800317 	ldw	r6,12(r2)
10015c40:	99000117 	ldw	r4,4(r19)
10015c44:	81800315 	stw	r6,12(r16)
10015c48:	80800215 	stw	r2,8(r16)
10015c4c:	34000215 	stw	r16,8(r6)
10015c50:	14000315 	stw	r16,12(r2)
10015c54:	003f2706 	br	100158f4 <__alt_data_end+0xf00158f4>
10015c58:	88c00054 	ori	r3,r17,1
10015c5c:	80c00115 	stw	r3,4(r16)
10015c60:	8463883a 	add	r17,r16,r17
10015c64:	34400515 	stw	r17,20(r6)
10015c68:	34400415 	stw	r17,16(r6)
10015c6c:	10c00054 	ori	r3,r2,1
10015c70:	8a400315 	stw	r9,12(r17)
10015c74:	8a400215 	stw	r9,8(r17)
10015c78:	88c00115 	stw	r3,4(r17)
10015c7c:	88a3883a 	add	r17,r17,r2
10015c80:	88800015 	stw	r2,0(r17)
10015c84:	9009883a 	mov	r4,r18
10015c88:	0021ac00 	call	10021ac0 <__malloc_unlock>
10015c8c:	80800204 	addi	r2,r16,8
10015c90:	003ecb06 	br	100157c0 <__alt_data_end+0xf00157c0>
10015c94:	31000117 	ldw	r4,4(r6)
10015c98:	003f1606 	br	100158f4 <__alt_data_end+0xf00158f4>
10015c9c:	63000044 	addi	r12,r12,1
10015ca0:	608000cc 	andi	r2,r12,3
10015ca4:	5ac00204 	addi	r11,r11,8
10015ca8:	103f2a1e 	bne	r2,zero,10015954 <__alt_data_end+0xf0015954>
10015cac:	00002106 	br	10015d34 <_malloc_r+0x628>
10015cb0:	80800204 	addi	r2,r16,8
10015cb4:	84000517 	ldw	r16,20(r16)
10015cb8:	143eb31e 	bne	r2,r16,10015788 <__alt_data_end+0xf0015788>
10015cbc:	18c00084 	addi	r3,r3,2
10015cc0:	003eec06 	br	10015874 <__alt_data_end+0xf0015874>
10015cc4:	8085883a 	add	r2,r16,r2
10015cc8:	10c00117 	ldw	r3,4(r2)
10015ccc:	81000317 	ldw	r4,12(r16)
10015cd0:	81400217 	ldw	r5,8(r16)
10015cd4:	18c00054 	ori	r3,r3,1
10015cd8:	10c00115 	stw	r3,4(r2)
10015cdc:	29000315 	stw	r4,12(r5)
10015ce0:	21400215 	stw	r5,8(r4)
10015ce4:	9009883a 	mov	r4,r18
10015ce8:	0021ac00 	call	10021ac0 <__malloc_unlock>
10015cec:	80800204 	addi	r2,r16,8
10015cf0:	003eb306 	br	100157c0 <__alt_data_end+0xf00157c0>
10015cf4:	19c016c4 	addi	r7,r3,91
10015cf8:	39cb883a 	add	r5,r7,r7
10015cfc:	003ec706 	br	1001581c <__alt_data_end+0xf001581c>
10015d00:	3804d1ba 	srli	r2,r7,6
10015d04:	11000e04 	addi	r4,r2,56
10015d08:	210b883a 	add	r5,r4,r4
10015d0c:	003fbe06 	br	10015c08 <__alt_data_end+0xf0015c08>
10015d10:	84ff5d26 	beq	r16,r19,10015a88 <__alt_data_end+0xf0015a88>
10015d14:	9c000217 	ldw	r16,8(r19)
10015d18:	00bfff04 	movi	r2,-4
10015d1c:	80c00117 	ldw	r3,4(r16)
10015d20:	1886703a 	and	r3,r3,r2
10015d24:	003f9706 	br	10015b84 <__alt_data_end+0xf0015b84>
10015d28:	52800017 	ldw	r10,0(r10)
10015d2c:	18ffffc4 	addi	r3,r3,-1
10015d30:	50805c1e 	bne	r10,r2,10015ea4 <_malloc_r+0x798>
10015d34:	190000cc 	andi	r4,r3,3
10015d38:	50bffe04 	addi	r2,r10,-8
10015d3c:	203ffa1e 	bne	r4,zero,10015d28 <__alt_data_end+0xf0015d28>
10015d40:	98800117 	ldw	r2,4(r19)
10015d44:	0146303a 	nor	r3,zero,r5
10015d48:	1884703a 	and	r2,r3,r2
10015d4c:	98800115 	stw	r2,4(r19)
10015d50:	294b883a 	add	r5,r5,r5
10015d54:	117f2e36 	bltu	r2,r5,10015a10 <__alt_data_end+0xf0015a10>
10015d58:	283f2d26 	beq	r5,zero,10015a10 <__alt_data_end+0xf0015a10>
10015d5c:	1146703a 	and	r3,r2,r5
10015d60:	1800521e 	bne	r3,zero,10015eac <_malloc_r+0x7a0>
10015d64:	6007883a 	mov	r3,r12
10015d68:	294b883a 	add	r5,r5,r5
10015d6c:	1148703a 	and	r4,r2,r5
10015d70:	18c00104 	addi	r3,r3,4
10015d74:	203ffc26 	beq	r4,zero,10015d68 <__alt_data_end+0xf0015d68>
10015d78:	003ef006 	br	1001593c <__alt_data_end+0xf001593c>
10015d7c:	00805504 	movi	r2,340
10015d80:	10c01336 	bltu	r2,r3,10015dd0 <_malloc_r+0x6c4>
10015d84:	8806d3fa 	srli	r3,r17,15
10015d88:	19c01dc4 	addi	r7,r3,119
10015d8c:	39cb883a 	add	r5,r7,r7
10015d90:	003ea206 	br	1001581c <__alt_data_end+0xf001581c>
10015d94:	00c40004 	movi	r3,4096
10015d98:	003f4d06 	br	10015ad0 <__alt_data_end+0xf0015ad0>
10015d9c:	00800044 	movi	r2,1
10015da0:	a0800115 	stw	r2,4(r20)
10015da4:	a021883a 	mov	r16,r20
10015da8:	0007883a 	mov	r3,zero
10015dac:	003f7506 	br	10015b84 <__alt_data_end+0xf0015b84>
10015db0:	200bd0ba 	srai	r5,r4,2
10015db4:	01800044 	movi	r6,1
10015db8:	41000117 	ldw	r4,4(r8)
10015dbc:	314a983a 	sll	r5,r6,r5
10015dc0:	100d883a 	mov	r6,r2
10015dc4:	2908b03a 	or	r4,r5,r4
10015dc8:	41000115 	stw	r4,4(r8)
10015dcc:	003f9d06 	br	10015c44 <__alt_data_end+0xf0015c44>
10015dd0:	00815504 	movi	r2,1364
10015dd4:	10c01336 	bltu	r2,r3,10015e24 <_malloc_r+0x718>
10015dd8:	8806d4ba 	srli	r3,r17,18
10015ddc:	19c01f04 	addi	r7,r3,124
10015de0:	39cb883a 	add	r5,r7,r7
10015de4:	003e8d06 	br	1001581c <__alt_data_end+0xf001581c>
10015de8:	ad400404 	addi	r21,r21,16
10015dec:	003f1d06 	br	10015a64 <__alt_data_end+0xf0015a64>
10015df0:	01001504 	movi	r4,84
10015df4:	20801c36 	bltu	r4,r2,10015e68 <_malloc_r+0x75c>
10015df8:	3804d33a 	srli	r2,r7,12
10015dfc:	11001b84 	addi	r4,r2,110
10015e00:	210b883a 	add	r5,r4,r4
10015e04:	003f8006 	br	10015c08 <__alt_data_end+0xf0015c08>
10015e08:	3083ffcc 	andi	r2,r6,4095
10015e0c:	103f241e 	bne	r2,zero,10015aa0 <__alt_data_end+0xf0015aa0>
10015e10:	99000217 	ldw	r4,8(r19)
10015e14:	ad85883a 	add	r2,r21,r22
10015e18:	10800054 	ori	r2,r2,1
10015e1c:	20800115 	stw	r2,4(r4)
10015e20:	003f4a06 	br	10015b4c <__alt_data_end+0xf0015b4c>
10015e24:	01403f04 	movi	r5,252
10015e28:	01c01f84 	movi	r7,126
10015e2c:	003e7b06 	br	1001581c <__alt_data_end+0xf001581c>
10015e30:	00c00044 	movi	r3,1
10015e34:	002b883a 	mov	r21,zero
10015e38:	003f3006 	br	10015afc <__alt_data_end+0xf0015afc>
10015e3c:	008400b4 	movhi	r2,4098
10015e40:	109d1204 	addi	r2,r2,29768
10015e44:	15000015 	stw	r20,0(r2)
10015e48:	003f1b06 	br	10015ab8 <__alt_data_end+0xf0015ab8>
10015e4c:	9009883a 	mov	r4,r18
10015e50:	81400204 	addi	r5,r16,8
10015e54:	0014b400 	call	10014b40 <_free_r>
10015e58:	008400f4 	movhi	r2,4099
10015e5c:	10a49d04 	addi	r2,r2,-28044
10015e60:	10c00017 	ldw	r3,0(r2)
10015e64:	003f3906 	br	10015b4c <__alt_data_end+0xf0015b4c>
10015e68:	01005504 	movi	r4,340
10015e6c:	20800436 	bltu	r4,r2,10015e80 <_malloc_r+0x774>
10015e70:	3804d3fa 	srli	r2,r7,15
10015e74:	11001dc4 	addi	r4,r2,119
10015e78:	210b883a 	add	r5,r4,r4
10015e7c:	003f6206 	br	10015c08 <__alt_data_end+0xf0015c08>
10015e80:	01015504 	movi	r4,1364
10015e84:	20800436 	bltu	r4,r2,10015e98 <_malloc_r+0x78c>
10015e88:	3804d4ba 	srli	r2,r7,18
10015e8c:	11001f04 	addi	r4,r2,124
10015e90:	210b883a 	add	r5,r4,r4
10015e94:	003f5c06 	br	10015c08 <__alt_data_end+0xf0015c08>
10015e98:	01403f04 	movi	r5,252
10015e9c:	01001f84 	movi	r4,126
10015ea0:	003f5906 	br	10015c08 <__alt_data_end+0xf0015c08>
10015ea4:	98800117 	ldw	r2,4(r19)
10015ea8:	003fa906 	br	10015d50 <__alt_data_end+0xf0015d50>
10015eac:	6007883a 	mov	r3,r12
10015eb0:	003ea206 	br	1001593c <__alt_data_end+0xf001593c>

10015eb4 <_mbrtowc_r>:
10015eb4:	defff704 	addi	sp,sp,-36
10015eb8:	008400b4 	movhi	r2,4098
10015ebc:	dc800715 	stw	r18,28(sp)
10015ec0:	dc400615 	stw	r17,24(sp)
10015ec4:	dc000515 	stw	r16,20(sp)
10015ec8:	109d1404 	addi	r2,r2,29776
10015ecc:	dfc00815 	stw	ra,32(sp)
10015ed0:	2021883a 	mov	r16,r4
10015ed4:	dc400917 	ldw	r17,36(sp)
10015ed8:	14800017 	ldw	r18,0(r2)
10015edc:	30001626 	beq	r6,zero,10015f38 <_mbrtowc_r+0x84>
10015ee0:	d9400215 	stw	r5,8(sp)
10015ee4:	d9800315 	stw	r6,12(sp)
10015ee8:	d9c00415 	stw	r7,16(sp)
10015eec:	00154f00 	call	100154f0 <__locale_charset>
10015ef0:	d9400217 	ldw	r5,8(sp)
10015ef4:	d9800317 	ldw	r6,12(sp)
10015ef8:	d9c00417 	ldw	r7,16(sp)
10015efc:	d8800015 	stw	r2,0(sp)
10015f00:	dc400115 	stw	r17,4(sp)
10015f04:	8009883a 	mov	r4,r16
10015f08:	903ee83a 	callr	r18
10015f0c:	00ffffc4 	movi	r3,-1
10015f10:	10c0031e 	bne	r2,r3,10015f20 <_mbrtowc_r+0x6c>
10015f14:	88000015 	stw	zero,0(r17)
10015f18:	00c02284 	movi	r3,138
10015f1c:	80c00015 	stw	r3,0(r16)
10015f20:	dfc00817 	ldw	ra,32(sp)
10015f24:	dc800717 	ldw	r18,28(sp)
10015f28:	dc400617 	ldw	r17,24(sp)
10015f2c:	dc000517 	ldw	r16,20(sp)
10015f30:	dec00904 	addi	sp,sp,36
10015f34:	f800283a 	ret
10015f38:	00154f00 	call	100154f0 <__locale_charset>
10015f3c:	018400b4 	movhi	r6,4098
10015f40:	31943d04 	addi	r6,r6,20724
10015f44:	d8800015 	stw	r2,0(sp)
10015f48:	dc400115 	stw	r17,4(sp)
10015f4c:	8009883a 	mov	r4,r16
10015f50:	000b883a 	mov	r5,zero
10015f54:	01c00044 	movi	r7,1
10015f58:	903ee83a 	callr	r18
10015f5c:	003feb06 	br	10015f0c <__alt_data_end+0xf0015f0c>

10015f60 <mbrtowc>:
10015f60:	defff604 	addi	sp,sp,-40
10015f64:	dc400315 	stw	r17,12(sp)
10015f68:	dc000215 	stw	r16,8(sp)
10015f6c:	dfc00915 	stw	ra,36(sp)
10015f70:	dd800815 	stw	r22,32(sp)
10015f74:	dd400715 	stw	r21,28(sp)
10015f78:	dd000615 	stw	r20,24(sp)
10015f7c:	dcc00515 	stw	r19,20(sp)
10015f80:	dc800415 	stw	r18,16(sp)
10015f84:	2821883a 	mov	r16,r5
10015f88:	3823883a 	mov	r17,r7
10015f8c:	28002026 	beq	r5,zero,10016010 <mbrtowc+0xb0>
10015f90:	048400b4 	movhi	r18,4098
10015f94:	949d1004 	addi	r18,r18,29760
10015f98:	008400b4 	movhi	r2,4098
10015f9c:	95800017 	ldw	r22,0(r18)
10015fa0:	109d1404 	addi	r2,r2,29776
10015fa4:	15400017 	ldw	r21,0(r2)
10015fa8:	2029883a 	mov	r20,r4
10015fac:	3027883a 	mov	r19,r6
10015fb0:	00154f00 	call	100154f0 <__locale_charset>
10015fb4:	d8800015 	stw	r2,0(sp)
10015fb8:	dc400115 	stw	r17,4(sp)
10015fbc:	b009883a 	mov	r4,r22
10015fc0:	a00b883a 	mov	r5,r20
10015fc4:	800d883a 	mov	r6,r16
10015fc8:	980f883a 	mov	r7,r19
10015fcc:	a83ee83a 	callr	r21
10015fd0:	00ffffc4 	movi	r3,-1
10015fd4:	10c0041e 	bne	r2,r3,10015fe8 <mbrtowc+0x88>
10015fd8:	90c00017 	ldw	r3,0(r18)
10015fdc:	01002284 	movi	r4,138
10015fe0:	88000015 	stw	zero,0(r17)
10015fe4:	19000015 	stw	r4,0(r3)
10015fe8:	dfc00917 	ldw	ra,36(sp)
10015fec:	dd800817 	ldw	r22,32(sp)
10015ff0:	dd400717 	ldw	r21,28(sp)
10015ff4:	dd000617 	ldw	r20,24(sp)
10015ff8:	dcc00517 	ldw	r19,20(sp)
10015ffc:	dc800417 	ldw	r18,16(sp)
10016000:	dc400317 	ldw	r17,12(sp)
10016004:	dc000217 	ldw	r16,8(sp)
10016008:	dec00a04 	addi	sp,sp,40
1001600c:	f800283a 	ret
10016010:	048400b4 	movhi	r18,4098
10016014:	949d1004 	addi	r18,r18,29760
10016018:	008400b4 	movhi	r2,4098
1001601c:	94c00017 	ldw	r19,0(r18)
10016020:	109d1404 	addi	r2,r2,29776
10016024:	14000017 	ldw	r16,0(r2)
10016028:	00154f00 	call	100154f0 <__locale_charset>
1001602c:	018400b4 	movhi	r6,4098
10016030:	31943d04 	addi	r6,r6,20724
10016034:	d8800015 	stw	r2,0(sp)
10016038:	dc400115 	stw	r17,4(sp)
1001603c:	9809883a 	mov	r4,r19
10016040:	000b883a 	mov	r5,zero
10016044:	01c00044 	movi	r7,1
10016048:	803ee83a 	callr	r16
1001604c:	003fe006 	br	10015fd0 <__alt_data_end+0xf0015fd0>

10016050 <__ascii_mbtowc>:
10016050:	deffff04 	addi	sp,sp,-4
10016054:	28000826 	beq	r5,zero,10016078 <__ascii_mbtowc+0x28>
10016058:	30000926 	beq	r6,zero,10016080 <__ascii_mbtowc+0x30>
1001605c:	38000b26 	beq	r7,zero,1001608c <__ascii_mbtowc+0x3c>
10016060:	30800003 	ldbu	r2,0(r6)
10016064:	28800015 	stw	r2,0(r5)
10016068:	30800003 	ldbu	r2,0(r6)
1001606c:	1004c03a 	cmpne	r2,r2,zero
10016070:	dec00104 	addi	sp,sp,4
10016074:	f800283a 	ret
10016078:	d80b883a 	mov	r5,sp
1001607c:	303ff71e 	bne	r6,zero,1001605c <__alt_data_end+0xf001605c>
10016080:	0005883a 	mov	r2,zero
10016084:	dec00104 	addi	sp,sp,4
10016088:	f800283a 	ret
1001608c:	00bfff84 	movi	r2,-2
10016090:	003ff706 	br	10016070 <__alt_data_end+0xf0016070>

10016094 <_mbtowc_r>:
10016094:	008400b4 	movhi	r2,4098
10016098:	defff804 	addi	sp,sp,-32
1001609c:	109d1404 	addi	r2,r2,29776
100160a0:	dfc00715 	stw	ra,28(sp)
100160a4:	dc000615 	stw	r16,24(sp)
100160a8:	14000017 	ldw	r16,0(r2)
100160ac:	d9000215 	stw	r4,8(sp)
100160b0:	d9400315 	stw	r5,12(sp)
100160b4:	d9800415 	stw	r6,16(sp)
100160b8:	d9c00515 	stw	r7,20(sp)
100160bc:	00154f00 	call	100154f0 <__locale_charset>
100160c0:	d8800015 	stw	r2,0(sp)
100160c4:	d8800817 	ldw	r2,32(sp)
100160c8:	d9000217 	ldw	r4,8(sp)
100160cc:	d9400317 	ldw	r5,12(sp)
100160d0:	d9800417 	ldw	r6,16(sp)
100160d4:	d9c00517 	ldw	r7,20(sp)
100160d8:	d8800115 	stw	r2,4(sp)
100160dc:	803ee83a 	callr	r16
100160e0:	dfc00717 	ldw	ra,28(sp)
100160e4:	dc000617 	ldw	r16,24(sp)
100160e8:	dec00804 	addi	sp,sp,32
100160ec:	f800283a 	ret

100160f0 <memchr>:
100160f0:	208000cc 	andi	r2,r4,3
100160f4:	280f883a 	mov	r7,r5
100160f8:	10003526 	beq	r2,zero,100161d0 <memchr+0xe0>
100160fc:	30bfffc4 	addi	r2,r6,-1
10016100:	30001b26 	beq	r6,zero,10016170 <memchr+0x80>
10016104:	21800003 	ldbu	r6,0(r4)
10016108:	28c03fcc 	andi	r3,r5,255
1001610c:	30c01a26 	beq	r6,r3,10016178 <memchr+0x88>
10016110:	180d883a 	mov	r6,r3
10016114:	00000406 	br	10016128 <memchr+0x38>
10016118:	10001526 	beq	r2,zero,10016170 <memchr+0x80>
1001611c:	20c00003 	ldbu	r3,0(r4)
10016120:	10bfffc4 	addi	r2,r2,-1
10016124:	19801426 	beq	r3,r6,10016178 <memchr+0x88>
10016128:	21000044 	addi	r4,r4,1
1001612c:	20c000cc 	andi	r3,r4,3
10016130:	183ff91e 	bne	r3,zero,10016118 <__alt_data_end+0xf0016118>
10016134:	024000c4 	movi	r9,3
10016138:	48801136 	bltu	r9,r2,10016180 <memchr+0x90>
1001613c:	10000c26 	beq	r2,zero,10016170 <memchr+0x80>
10016140:	20c00003 	ldbu	r3,0(r4)
10016144:	29403fcc 	andi	r5,r5,255
10016148:	19400b26 	beq	r3,r5,10016178 <memchr+0x88>
1001614c:	20c00044 	addi	r3,r4,1
10016150:	2085883a 	add	r2,r4,r2
10016154:	39803fcc 	andi	r6,r7,255
10016158:	00000306 	br	10016168 <memchr+0x78>
1001615c:	18c00044 	addi	r3,r3,1
10016160:	197fffc3 	ldbu	r5,-1(r3)
10016164:	29800426 	beq	r5,r6,10016178 <memchr+0x88>
10016168:	1809883a 	mov	r4,r3
1001616c:	18bffb1e 	bne	r3,r2,1001615c <__alt_data_end+0xf001615c>
10016170:	0005883a 	mov	r2,zero
10016174:	f800283a 	ret
10016178:	2005883a 	mov	r2,r4
1001617c:	f800283a 	ret
10016180:	28c03fcc 	andi	r3,r5,255
10016184:	1810923a 	slli	r8,r3,8
10016188:	02ffbff4 	movhi	r11,65279
1001618c:	02a02074 	movhi	r10,32897
10016190:	40c6b03a 	or	r3,r8,r3
10016194:	1810943a 	slli	r8,r3,16
10016198:	5affbfc4 	addi	r11,r11,-257
1001619c:	52a02004 	addi	r10,r10,-32640
100161a0:	40d0b03a 	or	r8,r8,r3
100161a4:	20c00017 	ldw	r3,0(r4)
100161a8:	40c6f03a 	xor	r3,r8,r3
100161ac:	1acd883a 	add	r6,r3,r11
100161b0:	00c6303a 	nor	r3,zero,r3
100161b4:	30c6703a 	and	r3,r6,r3
100161b8:	1a86703a 	and	r3,r3,r10
100161bc:	183fdf1e 	bne	r3,zero,1001613c <__alt_data_end+0xf001613c>
100161c0:	10bfff04 	addi	r2,r2,-4
100161c4:	21000104 	addi	r4,r4,4
100161c8:	48bff636 	bltu	r9,r2,100161a4 <__alt_data_end+0xf00161a4>
100161cc:	003fdb06 	br	1001613c <__alt_data_end+0xf001613c>
100161d0:	3005883a 	mov	r2,r6
100161d4:	003fd706 	br	10016134 <__alt_data_end+0xf0016134>

100161d8 <memmove>:
100161d8:	2005883a 	mov	r2,r4
100161dc:	29000b2e 	bgeu	r5,r4,1001620c <memmove+0x34>
100161e0:	298f883a 	add	r7,r5,r6
100161e4:	21c0092e 	bgeu	r4,r7,1001620c <memmove+0x34>
100161e8:	2187883a 	add	r3,r4,r6
100161ec:	198bc83a 	sub	r5,r3,r6
100161f0:	30004b26 	beq	r6,zero,10016320 <memmove+0x148>
100161f4:	39ffffc4 	addi	r7,r7,-1
100161f8:	39000003 	ldbu	r4,0(r7)
100161fc:	18ffffc4 	addi	r3,r3,-1
10016200:	19000005 	stb	r4,0(r3)
10016204:	197ffb1e 	bne	r3,r5,100161f4 <__alt_data_end+0xf00161f4>
10016208:	f800283a 	ret
1001620c:	00c003c4 	movi	r3,15
10016210:	1980412e 	bgeu	r3,r6,10016318 <memmove+0x140>
10016214:	1146b03a 	or	r3,r2,r5
10016218:	18c000cc 	andi	r3,r3,3
1001621c:	1800411e 	bne	r3,zero,10016324 <memmove+0x14c>
10016220:	33fffc04 	addi	r15,r6,-16
10016224:	781ed13a 	srli	r15,r15,4
10016228:	28c00104 	addi	r3,r5,4
1001622c:	13400104 	addi	r13,r2,4
10016230:	781c913a 	slli	r14,r15,4
10016234:	2b000204 	addi	r12,r5,8
10016238:	12c00204 	addi	r11,r2,8
1001623c:	73800504 	addi	r14,r14,20
10016240:	2a800304 	addi	r10,r5,12
10016244:	12400304 	addi	r9,r2,12
10016248:	2b9d883a 	add	r14,r5,r14
1001624c:	2811883a 	mov	r8,r5
10016250:	100f883a 	mov	r7,r2
10016254:	41000017 	ldw	r4,0(r8)
10016258:	39c00404 	addi	r7,r7,16
1001625c:	18c00404 	addi	r3,r3,16
10016260:	393ffc15 	stw	r4,-16(r7)
10016264:	193ffc17 	ldw	r4,-16(r3)
10016268:	6b400404 	addi	r13,r13,16
1001626c:	5ac00404 	addi	r11,r11,16
10016270:	693ffc15 	stw	r4,-16(r13)
10016274:	61000017 	ldw	r4,0(r12)
10016278:	4a400404 	addi	r9,r9,16
1001627c:	42000404 	addi	r8,r8,16
10016280:	593ffc15 	stw	r4,-16(r11)
10016284:	51000017 	ldw	r4,0(r10)
10016288:	63000404 	addi	r12,r12,16
1001628c:	52800404 	addi	r10,r10,16
10016290:	493ffc15 	stw	r4,-16(r9)
10016294:	1bbfef1e 	bne	r3,r14,10016254 <__alt_data_end+0xf0016254>
10016298:	79000044 	addi	r4,r15,1
1001629c:	2008913a 	slli	r4,r4,4
100162a0:	328003cc 	andi	r10,r6,15
100162a4:	02c000c4 	movi	r11,3
100162a8:	1107883a 	add	r3,r2,r4
100162ac:	290b883a 	add	r5,r5,r4
100162b0:	5a801e2e 	bgeu	r11,r10,1001632c <memmove+0x154>
100162b4:	1813883a 	mov	r9,r3
100162b8:	2811883a 	mov	r8,r5
100162bc:	500f883a 	mov	r7,r10
100162c0:	41000017 	ldw	r4,0(r8)
100162c4:	4a400104 	addi	r9,r9,4
100162c8:	39ffff04 	addi	r7,r7,-4
100162cc:	493fff15 	stw	r4,-4(r9)
100162d0:	42000104 	addi	r8,r8,4
100162d4:	59fffa36 	bltu	r11,r7,100162c0 <__alt_data_end+0xf00162c0>
100162d8:	513fff04 	addi	r4,r10,-4
100162dc:	2008d0ba 	srli	r4,r4,2
100162e0:	318000cc 	andi	r6,r6,3
100162e4:	21000044 	addi	r4,r4,1
100162e8:	2109883a 	add	r4,r4,r4
100162ec:	2109883a 	add	r4,r4,r4
100162f0:	1907883a 	add	r3,r3,r4
100162f4:	290b883a 	add	r5,r5,r4
100162f8:	30000926 	beq	r6,zero,10016320 <memmove+0x148>
100162fc:	198d883a 	add	r6,r3,r6
10016300:	29c00003 	ldbu	r7,0(r5)
10016304:	18c00044 	addi	r3,r3,1
10016308:	29400044 	addi	r5,r5,1
1001630c:	19ffffc5 	stb	r7,-1(r3)
10016310:	19bffb1e 	bne	r3,r6,10016300 <__alt_data_end+0xf0016300>
10016314:	f800283a 	ret
10016318:	1007883a 	mov	r3,r2
1001631c:	003ff606 	br	100162f8 <__alt_data_end+0xf00162f8>
10016320:	f800283a 	ret
10016324:	1007883a 	mov	r3,r2
10016328:	003ff406 	br	100162fc <__alt_data_end+0xf00162fc>
1001632c:	500d883a 	mov	r6,r10
10016330:	003ff106 	br	100162f8 <__alt_data_end+0xf00162f8>

10016334 <_Balloc>:
10016334:	20801317 	ldw	r2,76(r4)
10016338:	defffc04 	addi	sp,sp,-16
1001633c:	dc400115 	stw	r17,4(sp)
10016340:	dc000015 	stw	r16,0(sp)
10016344:	dfc00315 	stw	ra,12(sp)
10016348:	dc800215 	stw	r18,8(sp)
1001634c:	2023883a 	mov	r17,r4
10016350:	2821883a 	mov	r16,r5
10016354:	10000f26 	beq	r2,zero,10016394 <_Balloc+0x60>
10016358:	8407883a 	add	r3,r16,r16
1001635c:	18c7883a 	add	r3,r3,r3
10016360:	10c7883a 	add	r3,r2,r3
10016364:	18800017 	ldw	r2,0(r3)
10016368:	10001126 	beq	r2,zero,100163b0 <_Balloc+0x7c>
1001636c:	11000017 	ldw	r4,0(r2)
10016370:	19000015 	stw	r4,0(r3)
10016374:	10000415 	stw	zero,16(r2)
10016378:	10000315 	stw	zero,12(r2)
1001637c:	dfc00317 	ldw	ra,12(sp)
10016380:	dc800217 	ldw	r18,8(sp)
10016384:	dc400117 	ldw	r17,4(sp)
10016388:	dc000017 	ldw	r16,0(sp)
1001638c:	dec00404 	addi	sp,sp,16
10016390:	f800283a 	ret
10016394:	01400104 	movi	r5,4
10016398:	01800844 	movi	r6,33
1001639c:	001c6f40 	call	1001c6f4 <_calloc_r>
100163a0:	88801315 	stw	r2,76(r17)
100163a4:	103fec1e 	bne	r2,zero,10016358 <__alt_data_end+0xf0016358>
100163a8:	0005883a 	mov	r2,zero
100163ac:	003ff306 	br	1001637c <__alt_data_end+0xf001637c>
100163b0:	01400044 	movi	r5,1
100163b4:	2c24983a 	sll	r18,r5,r16
100163b8:	8809883a 	mov	r4,r17
100163bc:	91800144 	addi	r6,r18,5
100163c0:	318d883a 	add	r6,r6,r6
100163c4:	318d883a 	add	r6,r6,r6
100163c8:	001c6f40 	call	1001c6f4 <_calloc_r>
100163cc:	103ff626 	beq	r2,zero,100163a8 <__alt_data_end+0xf00163a8>
100163d0:	14000115 	stw	r16,4(r2)
100163d4:	14800215 	stw	r18,8(r2)
100163d8:	003fe606 	br	10016374 <__alt_data_end+0xf0016374>

100163dc <_Bfree>:
100163dc:	28000826 	beq	r5,zero,10016400 <_Bfree+0x24>
100163e0:	28c00117 	ldw	r3,4(r5)
100163e4:	20801317 	ldw	r2,76(r4)
100163e8:	18c7883a 	add	r3,r3,r3
100163ec:	18c7883a 	add	r3,r3,r3
100163f0:	10c5883a 	add	r2,r2,r3
100163f4:	10c00017 	ldw	r3,0(r2)
100163f8:	28c00015 	stw	r3,0(r5)
100163fc:	11400015 	stw	r5,0(r2)
10016400:	f800283a 	ret

10016404 <__multadd>:
10016404:	defffa04 	addi	sp,sp,-24
10016408:	dc000115 	stw	r16,4(sp)
1001640c:	2c000417 	ldw	r16,16(r5)
10016410:	dc800315 	stw	r18,12(sp)
10016414:	dc400215 	stw	r17,8(sp)
10016418:	dfc00515 	stw	ra,20(sp)
1001641c:	dcc00415 	stw	r19,16(sp)
10016420:	2823883a 	mov	r17,r5
10016424:	2025883a 	mov	r18,r4
10016428:	2a400504 	addi	r9,r5,20
1001642c:	0015883a 	mov	r10,zero
10016430:	4a000017 	ldw	r8,0(r9)
10016434:	4a400104 	addi	r9,r9,4
10016438:	52800044 	addi	r10,r10,1
1001643c:	40ffffcc 	andi	r3,r8,65535
10016440:	1987383a 	mul	r3,r3,r6
10016444:	4010d43a 	srli	r8,r8,16
10016448:	19cf883a 	add	r7,r3,r7
1001644c:	4191383a 	mul	r8,r8,r6
10016450:	3816d43a 	srli	r11,r7,16
10016454:	38ffffcc 	andi	r3,r7,65535
10016458:	5a0f883a 	add	r7,r11,r8
1001645c:	3810943a 	slli	r8,r7,16
10016460:	380ed43a 	srli	r7,r7,16
10016464:	40c7883a 	add	r3,r8,r3
10016468:	48ffff15 	stw	r3,-4(r9)
1001646c:	543ff016 	blt	r10,r16,10016430 <__alt_data_end+0xf0016430>
10016470:	38000926 	beq	r7,zero,10016498 <__multadd+0x94>
10016474:	88800217 	ldw	r2,8(r17)
10016478:	80800f0e 	bge	r16,r2,100164b8 <__multadd+0xb4>
1001647c:	80800144 	addi	r2,r16,5
10016480:	1085883a 	add	r2,r2,r2
10016484:	1085883a 	add	r2,r2,r2
10016488:	8885883a 	add	r2,r17,r2
1001648c:	11c00015 	stw	r7,0(r2)
10016490:	84000044 	addi	r16,r16,1
10016494:	8c000415 	stw	r16,16(r17)
10016498:	8805883a 	mov	r2,r17
1001649c:	dfc00517 	ldw	ra,20(sp)
100164a0:	dcc00417 	ldw	r19,16(sp)
100164a4:	dc800317 	ldw	r18,12(sp)
100164a8:	dc400217 	ldw	r17,8(sp)
100164ac:	dc000117 	ldw	r16,4(sp)
100164b0:	dec00604 	addi	sp,sp,24
100164b4:	f800283a 	ret
100164b8:	89400117 	ldw	r5,4(r17)
100164bc:	9009883a 	mov	r4,r18
100164c0:	d9c00015 	stw	r7,0(sp)
100164c4:	29400044 	addi	r5,r5,1
100164c8:	00163340 	call	10016334 <_Balloc>
100164cc:	89800417 	ldw	r6,16(r17)
100164d0:	89400304 	addi	r5,r17,12
100164d4:	11000304 	addi	r4,r2,12
100164d8:	31800084 	addi	r6,r6,2
100164dc:	318d883a 	add	r6,r6,r6
100164e0:	318d883a 	add	r6,r6,r6
100164e4:	1027883a 	mov	r19,r2
100164e8:	000c7840 	call	1000c784 <memcpy>
100164ec:	89000117 	ldw	r4,4(r17)
100164f0:	90c01317 	ldw	r3,76(r18)
100164f4:	d9c00017 	ldw	r7,0(sp)
100164f8:	2109883a 	add	r4,r4,r4
100164fc:	2109883a 	add	r4,r4,r4
10016500:	1907883a 	add	r3,r3,r4
10016504:	18800017 	ldw	r2,0(r3)
10016508:	88800015 	stw	r2,0(r17)
1001650c:	1c400015 	stw	r17,0(r3)
10016510:	9823883a 	mov	r17,r19
10016514:	003fd906 	br	1001647c <__alt_data_end+0xf001647c>

10016518 <__s2b>:
10016518:	defff904 	addi	sp,sp,-28
1001651c:	dc400115 	stw	r17,4(sp)
10016520:	dc000015 	stw	r16,0(sp)
10016524:	2023883a 	mov	r17,r4
10016528:	2821883a 	mov	r16,r5
1001652c:	39000204 	addi	r4,r7,8
10016530:	01400244 	movi	r5,9
10016534:	dcc00315 	stw	r19,12(sp)
10016538:	dc800215 	stw	r18,8(sp)
1001653c:	dfc00615 	stw	ra,24(sp)
10016540:	dd400515 	stw	r21,20(sp)
10016544:	dd000415 	stw	r20,16(sp)
10016548:	3825883a 	mov	r18,r7
1001654c:	3027883a 	mov	r19,r6
10016550:	000c6300 	call	1000c630 <__divsi3>
10016554:	00c00044 	movi	r3,1
10016558:	000b883a 	mov	r5,zero
1001655c:	1880030e 	bge	r3,r2,1001656c <__s2b+0x54>
10016560:	18c7883a 	add	r3,r3,r3
10016564:	29400044 	addi	r5,r5,1
10016568:	18bffd16 	blt	r3,r2,10016560 <__alt_data_end+0xf0016560>
1001656c:	8809883a 	mov	r4,r17
10016570:	00163340 	call	10016334 <_Balloc>
10016574:	d8c00717 	ldw	r3,28(sp)
10016578:	10c00515 	stw	r3,20(r2)
1001657c:	00c00044 	movi	r3,1
10016580:	10c00415 	stw	r3,16(r2)
10016584:	00c00244 	movi	r3,9
10016588:	1cc0210e 	bge	r3,r19,10016610 <__s2b+0xf8>
1001658c:	80eb883a 	add	r21,r16,r3
10016590:	a829883a 	mov	r20,r21
10016594:	84e1883a 	add	r16,r16,r19
10016598:	a1c00007 	ldb	r7,0(r20)
1001659c:	8809883a 	mov	r4,r17
100165a0:	a5000044 	addi	r20,r20,1
100165a4:	100b883a 	mov	r5,r2
100165a8:	01800284 	movi	r6,10
100165ac:	39fff404 	addi	r7,r7,-48
100165b0:	00164040 	call	10016404 <__multadd>
100165b4:	a43ff81e 	bne	r20,r16,10016598 <__alt_data_end+0xf0016598>
100165b8:	ace1883a 	add	r16,r21,r19
100165bc:	843ffe04 	addi	r16,r16,-8
100165c0:	9c800a0e 	bge	r19,r18,100165ec <__s2b+0xd4>
100165c4:	94e5c83a 	sub	r18,r18,r19
100165c8:	84a5883a 	add	r18,r16,r18
100165cc:	81c00007 	ldb	r7,0(r16)
100165d0:	8809883a 	mov	r4,r17
100165d4:	84000044 	addi	r16,r16,1
100165d8:	100b883a 	mov	r5,r2
100165dc:	01800284 	movi	r6,10
100165e0:	39fff404 	addi	r7,r7,-48
100165e4:	00164040 	call	10016404 <__multadd>
100165e8:	84bff81e 	bne	r16,r18,100165cc <__alt_data_end+0xf00165cc>
100165ec:	dfc00617 	ldw	ra,24(sp)
100165f0:	dd400517 	ldw	r21,20(sp)
100165f4:	dd000417 	ldw	r20,16(sp)
100165f8:	dcc00317 	ldw	r19,12(sp)
100165fc:	dc800217 	ldw	r18,8(sp)
10016600:	dc400117 	ldw	r17,4(sp)
10016604:	dc000017 	ldw	r16,0(sp)
10016608:	dec00704 	addi	sp,sp,28
1001660c:	f800283a 	ret
10016610:	84000284 	addi	r16,r16,10
10016614:	1827883a 	mov	r19,r3
10016618:	003fe906 	br	100165c0 <__alt_data_end+0xf00165c0>

1001661c <__hi0bits>:
1001661c:	20bfffec 	andhi	r2,r4,65535
10016620:	1000141e 	bne	r2,zero,10016674 <__hi0bits+0x58>
10016624:	2008943a 	slli	r4,r4,16
10016628:	00800404 	movi	r2,16
1001662c:	20ffc02c 	andhi	r3,r4,65280
10016630:	1800021e 	bne	r3,zero,1001663c <__hi0bits+0x20>
10016634:	2008923a 	slli	r4,r4,8
10016638:	10800204 	addi	r2,r2,8
1001663c:	20fc002c 	andhi	r3,r4,61440
10016640:	1800021e 	bne	r3,zero,1001664c <__hi0bits+0x30>
10016644:	2008913a 	slli	r4,r4,4
10016648:	10800104 	addi	r2,r2,4
1001664c:	20f0002c 	andhi	r3,r4,49152
10016650:	1800031e 	bne	r3,zero,10016660 <__hi0bits+0x44>
10016654:	2109883a 	add	r4,r4,r4
10016658:	10800084 	addi	r2,r2,2
1001665c:	2109883a 	add	r4,r4,r4
10016660:	20000316 	blt	r4,zero,10016670 <__hi0bits+0x54>
10016664:	2110002c 	andhi	r4,r4,16384
10016668:	2000041e 	bne	r4,zero,1001667c <__hi0bits+0x60>
1001666c:	00800804 	movi	r2,32
10016670:	f800283a 	ret
10016674:	0005883a 	mov	r2,zero
10016678:	003fec06 	br	1001662c <__alt_data_end+0xf001662c>
1001667c:	10800044 	addi	r2,r2,1
10016680:	f800283a 	ret

10016684 <__lo0bits>:
10016684:	20c00017 	ldw	r3,0(r4)
10016688:	188001cc 	andi	r2,r3,7
1001668c:	10000826 	beq	r2,zero,100166b0 <__lo0bits+0x2c>
10016690:	1880004c 	andi	r2,r3,1
10016694:	1000211e 	bne	r2,zero,1001671c <__lo0bits+0x98>
10016698:	1880008c 	andi	r2,r3,2
1001669c:	1000211e 	bne	r2,zero,10016724 <__lo0bits+0xa0>
100166a0:	1806d0ba 	srli	r3,r3,2
100166a4:	00800084 	movi	r2,2
100166a8:	20c00015 	stw	r3,0(r4)
100166ac:	f800283a 	ret
100166b0:	18bfffcc 	andi	r2,r3,65535
100166b4:	10001326 	beq	r2,zero,10016704 <__lo0bits+0x80>
100166b8:	0005883a 	mov	r2,zero
100166bc:	19403fcc 	andi	r5,r3,255
100166c0:	2800021e 	bne	r5,zero,100166cc <__lo0bits+0x48>
100166c4:	1806d23a 	srli	r3,r3,8
100166c8:	10800204 	addi	r2,r2,8
100166cc:	194003cc 	andi	r5,r3,15
100166d0:	2800021e 	bne	r5,zero,100166dc <__lo0bits+0x58>
100166d4:	1806d13a 	srli	r3,r3,4
100166d8:	10800104 	addi	r2,r2,4
100166dc:	194000cc 	andi	r5,r3,3
100166e0:	2800021e 	bne	r5,zero,100166ec <__lo0bits+0x68>
100166e4:	1806d0ba 	srli	r3,r3,2
100166e8:	10800084 	addi	r2,r2,2
100166ec:	1940004c 	andi	r5,r3,1
100166f0:	2800081e 	bne	r5,zero,10016714 <__lo0bits+0x90>
100166f4:	1806d07a 	srli	r3,r3,1
100166f8:	1800051e 	bne	r3,zero,10016710 <__lo0bits+0x8c>
100166fc:	00800804 	movi	r2,32
10016700:	f800283a 	ret
10016704:	1806d43a 	srli	r3,r3,16
10016708:	00800404 	movi	r2,16
1001670c:	003feb06 	br	100166bc <__alt_data_end+0xf00166bc>
10016710:	10800044 	addi	r2,r2,1
10016714:	20c00015 	stw	r3,0(r4)
10016718:	f800283a 	ret
1001671c:	0005883a 	mov	r2,zero
10016720:	f800283a 	ret
10016724:	1806d07a 	srli	r3,r3,1
10016728:	00800044 	movi	r2,1
1001672c:	20c00015 	stw	r3,0(r4)
10016730:	f800283a 	ret

10016734 <__i2b>:
10016734:	defffd04 	addi	sp,sp,-12
10016738:	dc000015 	stw	r16,0(sp)
1001673c:	04000044 	movi	r16,1
10016740:	dc400115 	stw	r17,4(sp)
10016744:	2823883a 	mov	r17,r5
10016748:	800b883a 	mov	r5,r16
1001674c:	dfc00215 	stw	ra,8(sp)
10016750:	00163340 	call	10016334 <_Balloc>
10016754:	14400515 	stw	r17,20(r2)
10016758:	14000415 	stw	r16,16(r2)
1001675c:	dfc00217 	ldw	ra,8(sp)
10016760:	dc400117 	ldw	r17,4(sp)
10016764:	dc000017 	ldw	r16,0(sp)
10016768:	dec00304 	addi	sp,sp,12
1001676c:	f800283a 	ret

10016770 <__multiply>:
10016770:	defffa04 	addi	sp,sp,-24
10016774:	dcc00315 	stw	r19,12(sp)
10016778:	dc800215 	stw	r18,8(sp)
1001677c:	2cc00417 	ldw	r19,16(r5)
10016780:	34800417 	ldw	r18,16(r6)
10016784:	dd000415 	stw	r20,16(sp)
10016788:	dc400115 	stw	r17,4(sp)
1001678c:	dfc00515 	stw	ra,20(sp)
10016790:	dc000015 	stw	r16,0(sp)
10016794:	2829883a 	mov	r20,r5
10016798:	3023883a 	mov	r17,r6
1001679c:	9c807016 	blt	r19,r18,10016960 <__multiply+0x1f0>
100167a0:	9005883a 	mov	r2,r18
100167a4:	9825883a 	mov	r18,r19
100167a8:	1027883a 	mov	r19,r2
100167ac:	a0800217 	ldw	r2,8(r20)
100167b0:	94e1883a 	add	r16,r18,r19
100167b4:	a1400117 	ldw	r5,4(r20)
100167b8:	1400010e 	bge	r2,r16,100167c0 <__multiply+0x50>
100167bc:	29400044 	addi	r5,r5,1
100167c0:	00163340 	call	10016334 <_Balloc>
100167c4:	8417883a 	add	r11,r16,r16
100167c8:	13000504 	addi	r12,r2,20
100167cc:	5ad7883a 	add	r11,r11,r11
100167d0:	62d7883a 	add	r11,r12,r11
100167d4:	6007883a 	mov	r3,r12
100167d8:	62c0032e 	bgeu	r12,r11,100167e8 <__multiply+0x78>
100167dc:	18000015 	stw	zero,0(r3)
100167e0:	18c00104 	addi	r3,r3,4
100167e4:	1afffd36 	bltu	r3,r11,100167dc <__alt_data_end+0xf00167dc>
100167e8:	9ce7883a 	add	r19,r19,r19
100167ec:	94a5883a 	add	r18,r18,r18
100167f0:	89800504 	addi	r6,r17,20
100167f4:	9ce7883a 	add	r19,r19,r19
100167f8:	a3800504 	addi	r14,r20,20
100167fc:	94a5883a 	add	r18,r18,r18
10016800:	34db883a 	add	r13,r6,r19
10016804:	7495883a 	add	r10,r14,r18
10016808:	3340422e 	bgeu	r6,r13,10016914 <__multiply+0x1a4>
1001680c:	34400017 	ldw	r17,0(r6)
10016810:	8cbfffcc 	andi	r18,r17,65535
10016814:	90001b26 	beq	r18,zero,10016884 <__multiply+0x114>
10016818:	6013883a 	mov	r9,r12
1001681c:	7023883a 	mov	r17,r14
10016820:	0011883a 	mov	r8,zero
10016824:	88c00017 	ldw	r3,0(r17)
10016828:	4bc00017 	ldw	r15,0(r9)
1001682c:	8c400104 	addi	r17,r17,4
10016830:	19ffffcc 	andi	r7,r3,65535
10016834:	3c8f383a 	mul	r7,r7,r18
10016838:	1808d43a 	srli	r4,r3,16
1001683c:	797fffcc 	andi	r5,r15,65535
10016840:	29cb883a 	add	r5,r5,r7
10016844:	2a0b883a 	add	r5,r5,r8
10016848:	2489383a 	mul	r4,r4,r18
1001684c:	7806d43a 	srli	r3,r15,16
10016850:	2810d43a 	srli	r8,r5,16
10016854:	297fffcc 	andi	r5,r5,65535
10016858:	1907883a 	add	r3,r3,r4
1001685c:	1a07883a 	add	r3,r3,r8
10016860:	1808943a 	slli	r4,r3,16
10016864:	480f883a 	mov	r7,r9
10016868:	1810d43a 	srli	r8,r3,16
1001686c:	214ab03a 	or	r5,r4,r5
10016870:	49400015 	stw	r5,0(r9)
10016874:	4a400104 	addi	r9,r9,4
10016878:	8abfea36 	bltu	r17,r10,10016824 <__alt_data_end+0xf0016824>
1001687c:	3a000115 	stw	r8,4(r7)
10016880:	34400017 	ldw	r17,0(r6)
10016884:	8822d43a 	srli	r17,r17,16
10016888:	88001f26 	beq	r17,zero,10016908 <__multiply+0x198>
1001688c:	60c00017 	ldw	r3,0(r12)
10016890:	7013883a 	mov	r9,r14
10016894:	601f883a 	mov	r15,r12
10016898:	1811883a 	mov	r8,r3
1001689c:	6027883a 	mov	r19,r12
100168a0:	000f883a 	mov	r7,zero
100168a4:	00000106 	br	100168ac <__multiply+0x13c>
100168a8:	9027883a 	mov	r19,r18
100168ac:	4940000b 	ldhu	r5,0(r9)
100168b0:	4010d43a 	srli	r8,r8,16
100168b4:	193fffcc 	andi	r4,r3,65535
100168b8:	2c4b383a 	mul	r5,r5,r17
100168bc:	7bc00104 	addi	r15,r15,4
100168c0:	4a400104 	addi	r9,r9,4
100168c4:	2a0b883a 	add	r5,r5,r8
100168c8:	29cb883a 	add	r5,r5,r7
100168cc:	2806943a 	slli	r3,r5,16
100168d0:	9c800104 	addi	r18,r19,4
100168d4:	280ad43a 	srli	r5,r5,16
100168d8:	1908b03a 	or	r4,r3,r4
100168dc:	793fff15 	stw	r4,-4(r15)
100168e0:	48ffff17 	ldw	r3,-4(r9)
100168e4:	92000017 	ldw	r8,0(r18)
100168e8:	1806d43a 	srli	r3,r3,16
100168ec:	413fffcc 	andi	r4,r8,65535
100168f0:	1c47383a 	mul	r3,r3,r17
100168f4:	1907883a 	add	r3,r3,r4
100168f8:	1947883a 	add	r3,r3,r5
100168fc:	180ed43a 	srli	r7,r3,16
10016900:	4abfe936 	bltu	r9,r10,100168a8 <__alt_data_end+0xf00168a8>
10016904:	98c00115 	stw	r3,4(r19)
10016908:	31800104 	addi	r6,r6,4
1001690c:	63000104 	addi	r12,r12,4
10016910:	337fbe36 	bltu	r6,r13,1001680c <__alt_data_end+0xf001680c>
10016914:	0400090e 	bge	zero,r16,1001693c <__multiply+0x1cc>
10016918:	58ffff17 	ldw	r3,-4(r11)
1001691c:	5affff04 	addi	r11,r11,-4
10016920:	18000326 	beq	r3,zero,10016930 <__multiply+0x1c0>
10016924:	00000506 	br	1001693c <__multiply+0x1cc>
10016928:	58c00017 	ldw	r3,0(r11)
1001692c:	1800031e 	bne	r3,zero,1001693c <__multiply+0x1cc>
10016930:	843fffc4 	addi	r16,r16,-1
10016934:	5affff04 	addi	r11,r11,-4
10016938:	803ffb1e 	bne	r16,zero,10016928 <__alt_data_end+0xf0016928>
1001693c:	14000415 	stw	r16,16(r2)
10016940:	dfc00517 	ldw	ra,20(sp)
10016944:	dd000417 	ldw	r20,16(sp)
10016948:	dcc00317 	ldw	r19,12(sp)
1001694c:	dc800217 	ldw	r18,8(sp)
10016950:	dc400117 	ldw	r17,4(sp)
10016954:	dc000017 	ldw	r16,0(sp)
10016958:	dec00604 	addi	sp,sp,24
1001695c:	f800283a 	ret
10016960:	3029883a 	mov	r20,r6
10016964:	2823883a 	mov	r17,r5
10016968:	003f9006 	br	100167ac <__alt_data_end+0xf00167ac>

1001696c <__pow5mult>:
1001696c:	defffa04 	addi	sp,sp,-24
10016970:	dcc00315 	stw	r19,12(sp)
10016974:	dc800215 	stw	r18,8(sp)
10016978:	dc000015 	stw	r16,0(sp)
1001697c:	dfc00515 	stw	ra,20(sp)
10016980:	dd000415 	stw	r20,16(sp)
10016984:	dc400115 	stw	r17,4(sp)
10016988:	308000cc 	andi	r2,r6,3
1001698c:	3021883a 	mov	r16,r6
10016990:	2027883a 	mov	r19,r4
10016994:	2825883a 	mov	r18,r5
10016998:	10002e1e 	bne	r2,zero,10016a54 <__pow5mult+0xe8>
1001699c:	8021d0ba 	srai	r16,r16,2
100169a0:	80001a26 	beq	r16,zero,10016a0c <__pow5mult+0xa0>
100169a4:	9c401217 	ldw	r17,72(r19)
100169a8:	8800061e 	bne	r17,zero,100169c4 <__pow5mult+0x58>
100169ac:	00003406 	br	10016a80 <__pow5mult+0x114>
100169b0:	8021d07a 	srai	r16,r16,1
100169b4:	80001526 	beq	r16,zero,10016a0c <__pow5mult+0xa0>
100169b8:	88800017 	ldw	r2,0(r17)
100169bc:	10001c26 	beq	r2,zero,10016a30 <__pow5mult+0xc4>
100169c0:	1023883a 	mov	r17,r2
100169c4:	80c0004c 	andi	r3,r16,1
100169c8:	183ff926 	beq	r3,zero,100169b0 <__alt_data_end+0xf00169b0>
100169cc:	900b883a 	mov	r5,r18
100169d0:	880d883a 	mov	r6,r17
100169d4:	9809883a 	mov	r4,r19
100169d8:	00167700 	call	10016770 <__multiply>
100169dc:	90001b26 	beq	r18,zero,10016a4c <__pow5mult+0xe0>
100169e0:	91c00117 	ldw	r7,4(r18)
100169e4:	98c01317 	ldw	r3,76(r19)
100169e8:	8021d07a 	srai	r16,r16,1
100169ec:	39cf883a 	add	r7,r7,r7
100169f0:	39cf883a 	add	r7,r7,r7
100169f4:	19c7883a 	add	r3,r3,r7
100169f8:	19000017 	ldw	r4,0(r3)
100169fc:	91000015 	stw	r4,0(r18)
10016a00:	1c800015 	stw	r18,0(r3)
10016a04:	1025883a 	mov	r18,r2
10016a08:	803feb1e 	bne	r16,zero,100169b8 <__alt_data_end+0xf00169b8>
10016a0c:	9005883a 	mov	r2,r18
10016a10:	dfc00517 	ldw	ra,20(sp)
10016a14:	dd000417 	ldw	r20,16(sp)
10016a18:	dcc00317 	ldw	r19,12(sp)
10016a1c:	dc800217 	ldw	r18,8(sp)
10016a20:	dc400117 	ldw	r17,4(sp)
10016a24:	dc000017 	ldw	r16,0(sp)
10016a28:	dec00604 	addi	sp,sp,24
10016a2c:	f800283a 	ret
10016a30:	9809883a 	mov	r4,r19
10016a34:	880b883a 	mov	r5,r17
10016a38:	880d883a 	mov	r6,r17
10016a3c:	00167700 	call	10016770 <__multiply>
10016a40:	88800015 	stw	r2,0(r17)
10016a44:	10000015 	stw	zero,0(r2)
10016a48:	003fdd06 	br	100169c0 <__alt_data_end+0xf00169c0>
10016a4c:	1025883a 	mov	r18,r2
10016a50:	003fd706 	br	100169b0 <__alt_data_end+0xf00169b0>
10016a54:	10bfffc4 	addi	r2,r2,-1
10016a58:	1085883a 	add	r2,r2,r2
10016a5c:	00c400b4 	movhi	r3,4098
10016a60:	18d50904 	addi	r3,r3,21540
10016a64:	1085883a 	add	r2,r2,r2
10016a68:	1885883a 	add	r2,r3,r2
10016a6c:	11800017 	ldw	r6,0(r2)
10016a70:	000f883a 	mov	r7,zero
10016a74:	00164040 	call	10016404 <__multadd>
10016a78:	1025883a 	mov	r18,r2
10016a7c:	003fc706 	br	1001699c <__alt_data_end+0xf001699c>
10016a80:	05000044 	movi	r20,1
10016a84:	9809883a 	mov	r4,r19
10016a88:	a00b883a 	mov	r5,r20
10016a8c:	00163340 	call	10016334 <_Balloc>
10016a90:	1023883a 	mov	r17,r2
10016a94:	00809c44 	movi	r2,625
10016a98:	88800515 	stw	r2,20(r17)
10016a9c:	8d000415 	stw	r20,16(r17)
10016aa0:	9c401215 	stw	r17,72(r19)
10016aa4:	88000015 	stw	zero,0(r17)
10016aa8:	003fc606 	br	100169c4 <__alt_data_end+0xf00169c4>

10016aac <__lshift>:
10016aac:	defff904 	addi	sp,sp,-28
10016ab0:	dd000415 	stw	r20,16(sp)
10016ab4:	dcc00315 	stw	r19,12(sp)
10016ab8:	3029d17a 	srai	r20,r6,5
10016abc:	2cc00417 	ldw	r19,16(r5)
10016ac0:	28800217 	ldw	r2,8(r5)
10016ac4:	dd400515 	stw	r21,20(sp)
10016ac8:	a4e7883a 	add	r19,r20,r19
10016acc:	dc800215 	stw	r18,8(sp)
10016ad0:	dc400115 	stw	r17,4(sp)
10016ad4:	dc000015 	stw	r16,0(sp)
10016ad8:	dfc00615 	stw	ra,24(sp)
10016adc:	9c000044 	addi	r16,r19,1
10016ae0:	2823883a 	mov	r17,r5
10016ae4:	302b883a 	mov	r21,r6
10016ae8:	2025883a 	mov	r18,r4
10016aec:	29400117 	ldw	r5,4(r5)
10016af0:	1400030e 	bge	r2,r16,10016b00 <__lshift+0x54>
10016af4:	1085883a 	add	r2,r2,r2
10016af8:	29400044 	addi	r5,r5,1
10016afc:	143ffd16 	blt	r2,r16,10016af4 <__alt_data_end+0xf0016af4>
10016b00:	9009883a 	mov	r4,r18
10016b04:	00163340 	call	10016334 <_Balloc>
10016b08:	11c00504 	addi	r7,r2,20
10016b0c:	0500090e 	bge	zero,r20,10016b34 <__lshift+0x88>
10016b10:	3811883a 	mov	r8,r7
10016b14:	0007883a 	mov	r3,zero
10016b18:	40000015 	stw	zero,0(r8)
10016b1c:	18c00044 	addi	r3,r3,1
10016b20:	42000104 	addi	r8,r8,4
10016b24:	1d3ffc1e 	bne	r3,r20,10016b18 <__alt_data_end+0xf0016b18>
10016b28:	18c7883a 	add	r3,r3,r3
10016b2c:	18c7883a 	add	r3,r3,r3
10016b30:	38cf883a 	add	r7,r7,r3
10016b34:	89000417 	ldw	r4,16(r17)
10016b38:	88c00504 	addi	r3,r17,20
10016b3c:	a98007cc 	andi	r6,r21,31
10016b40:	2109883a 	add	r4,r4,r4
10016b44:	2109883a 	add	r4,r4,r4
10016b48:	1909883a 	add	r4,r3,r4
10016b4c:	30002326 	beq	r6,zero,10016bdc <__lshift+0x130>
10016b50:	01400804 	movi	r5,32
10016b54:	298bc83a 	sub	r5,r5,r6
10016b58:	0013883a 	mov	r9,zero
10016b5c:	1a000017 	ldw	r8,0(r3)
10016b60:	3815883a 	mov	r10,r7
10016b64:	39c00104 	addi	r7,r7,4
10016b68:	4190983a 	sll	r8,r8,r6
10016b6c:	18c00104 	addi	r3,r3,4
10016b70:	4a10b03a 	or	r8,r9,r8
10016b74:	3a3fff15 	stw	r8,-4(r7)
10016b78:	1a3fff17 	ldw	r8,-4(r3)
10016b7c:	4152d83a 	srl	r9,r8,r5
10016b80:	193ff636 	bltu	r3,r4,10016b5c <__alt_data_end+0xf0016b5c>
10016b84:	52400115 	stw	r9,4(r10)
10016b88:	48000126 	beq	r9,zero,10016b90 <__lshift+0xe4>
10016b8c:	9c000084 	addi	r16,r19,2
10016b90:	89000117 	ldw	r4,4(r17)
10016b94:	90c01317 	ldw	r3,76(r18)
10016b98:	843fffc4 	addi	r16,r16,-1
10016b9c:	2109883a 	add	r4,r4,r4
10016ba0:	2109883a 	add	r4,r4,r4
10016ba4:	1907883a 	add	r3,r3,r4
10016ba8:	19000017 	ldw	r4,0(r3)
10016bac:	14000415 	stw	r16,16(r2)
10016bb0:	89000015 	stw	r4,0(r17)
10016bb4:	1c400015 	stw	r17,0(r3)
10016bb8:	dfc00617 	ldw	ra,24(sp)
10016bbc:	dd400517 	ldw	r21,20(sp)
10016bc0:	dd000417 	ldw	r20,16(sp)
10016bc4:	dcc00317 	ldw	r19,12(sp)
10016bc8:	dc800217 	ldw	r18,8(sp)
10016bcc:	dc400117 	ldw	r17,4(sp)
10016bd0:	dc000017 	ldw	r16,0(sp)
10016bd4:	dec00704 	addi	sp,sp,28
10016bd8:	f800283a 	ret
10016bdc:	19400017 	ldw	r5,0(r3)
10016be0:	39c00104 	addi	r7,r7,4
10016be4:	18c00104 	addi	r3,r3,4
10016be8:	397fff15 	stw	r5,-4(r7)
10016bec:	193ffb36 	bltu	r3,r4,10016bdc <__alt_data_end+0xf0016bdc>
10016bf0:	003fe706 	br	10016b90 <__alt_data_end+0xf0016b90>

10016bf4 <__mcmp>:
10016bf4:	20800417 	ldw	r2,16(r4)
10016bf8:	28c00417 	ldw	r3,16(r5)
10016bfc:	10c5c83a 	sub	r2,r2,r3
10016c00:	1000111e 	bne	r2,zero,10016c48 <__mcmp+0x54>
10016c04:	18c7883a 	add	r3,r3,r3
10016c08:	18c7883a 	add	r3,r3,r3
10016c0c:	21000504 	addi	r4,r4,20
10016c10:	29400504 	addi	r5,r5,20
10016c14:	20c5883a 	add	r2,r4,r3
10016c18:	28cb883a 	add	r5,r5,r3
10016c1c:	00000106 	br	10016c24 <__mcmp+0x30>
10016c20:	20800a2e 	bgeu	r4,r2,10016c4c <__mcmp+0x58>
10016c24:	10bfff04 	addi	r2,r2,-4
10016c28:	297fff04 	addi	r5,r5,-4
10016c2c:	11800017 	ldw	r6,0(r2)
10016c30:	28c00017 	ldw	r3,0(r5)
10016c34:	30fffa26 	beq	r6,r3,10016c20 <__alt_data_end+0xf0016c20>
10016c38:	30c00236 	bltu	r6,r3,10016c44 <__mcmp+0x50>
10016c3c:	00800044 	movi	r2,1
10016c40:	f800283a 	ret
10016c44:	00bfffc4 	movi	r2,-1
10016c48:	f800283a 	ret
10016c4c:	0005883a 	mov	r2,zero
10016c50:	f800283a 	ret

10016c54 <__mdiff>:
10016c54:	defffb04 	addi	sp,sp,-20
10016c58:	dc000015 	stw	r16,0(sp)
10016c5c:	2821883a 	mov	r16,r5
10016c60:	dcc00315 	stw	r19,12(sp)
10016c64:	300b883a 	mov	r5,r6
10016c68:	2027883a 	mov	r19,r4
10016c6c:	8009883a 	mov	r4,r16
10016c70:	dc800215 	stw	r18,8(sp)
10016c74:	dfc00415 	stw	ra,16(sp)
10016c78:	dc400115 	stw	r17,4(sp)
10016c7c:	3025883a 	mov	r18,r6
10016c80:	0016bf40 	call	10016bf4 <__mcmp>
10016c84:	10005226 	beq	r2,zero,10016dd0 <__mdiff+0x17c>
10016c88:	10004c16 	blt	r2,zero,10016dbc <__mdiff+0x168>
10016c8c:	0023883a 	mov	r17,zero
10016c90:	81400117 	ldw	r5,4(r16)
10016c94:	9809883a 	mov	r4,r19
10016c98:	00163340 	call	10016334 <_Balloc>
10016c9c:	83400417 	ldw	r13,16(r16)
10016ca0:	93800417 	ldw	r14,16(r18)
10016ca4:	81000504 	addi	r4,r16,20
10016ca8:	6b59883a 	add	r12,r13,r13
10016cac:	739d883a 	add	r14,r14,r14
10016cb0:	6319883a 	add	r12,r12,r12
10016cb4:	91800504 	addi	r6,r18,20
10016cb8:	739d883a 	add	r14,r14,r14
10016cbc:	14400315 	stw	r17,12(r2)
10016cc0:	2319883a 	add	r12,r4,r12
10016cc4:	339d883a 	add	r14,r6,r14
10016cc8:	12400504 	addi	r9,r2,20
10016ccc:	0007883a 	mov	r3,zero
10016cd0:	22000017 	ldw	r8,0(r4)
10016cd4:	32800017 	ldw	r10,0(r6)
10016cd8:	4ac00104 	addi	r11,r9,4
10016cdc:	41ffffcc 	andi	r7,r8,65535
10016ce0:	38c7883a 	add	r3,r7,r3
10016ce4:	51ffffcc 	andi	r7,r10,65535
10016ce8:	19cfc83a 	sub	r7,r3,r7
10016cec:	4010d43a 	srli	r8,r8,16
10016cf0:	5014d43a 	srli	r10,r10,16
10016cf4:	3807d43a 	srai	r3,r7,16
10016cf8:	39ffffcc 	andi	r7,r7,65535
10016cfc:	4291c83a 	sub	r8,r8,r10
10016d00:	40c7883a 	add	r3,r8,r3
10016d04:	1810943a 	slli	r8,r3,16
10016d08:	31800104 	addi	r6,r6,4
10016d0c:	21000104 	addi	r4,r4,4
10016d10:	41ceb03a 	or	r7,r8,r7
10016d14:	49c00015 	stw	r7,0(r9)
10016d18:	1807d43a 	srai	r3,r3,16
10016d1c:	580b883a 	mov	r5,r11
10016d20:	5813883a 	mov	r9,r11
10016d24:	33bfea36 	bltu	r6,r14,10016cd0 <__alt_data_end+0xf0016cd0>
10016d28:	2011883a 	mov	r8,r4
10016d2c:	2300152e 	bgeu	r4,r12,10016d84 <__mdiff+0x130>
10016d30:	21400017 	ldw	r5,0(r4)
10016d34:	4a400104 	addi	r9,r9,4
10016d38:	21000104 	addi	r4,r4,4
10016d3c:	29ffffcc 	andi	r7,r5,65535
10016d40:	38c7883a 	add	r3,r7,r3
10016d44:	280ad43a 	srli	r5,r5,16
10016d48:	180dd43a 	srai	r6,r3,16
10016d4c:	19ffffcc 	andi	r7,r3,65535
10016d50:	3147883a 	add	r3,r6,r5
10016d54:	180a943a 	slli	r5,r3,16
10016d58:	1807d43a 	srai	r3,r3,16
10016d5c:	29ceb03a 	or	r7,r5,r7
10016d60:	49ffff15 	stw	r7,-4(r9)
10016d64:	233ff236 	bltu	r4,r12,10016d30 <__alt_data_end+0xf0016d30>
10016d68:	0206303a 	nor	r3,zero,r8
10016d6c:	1b07883a 	add	r3,r3,r12
10016d70:	1806d0ba 	srli	r3,r3,2
10016d74:	18c00044 	addi	r3,r3,1
10016d78:	18c7883a 	add	r3,r3,r3
10016d7c:	18c7883a 	add	r3,r3,r3
10016d80:	58cb883a 	add	r5,r11,r3
10016d84:	28ffff04 	addi	r3,r5,-4
10016d88:	3800041e 	bne	r7,zero,10016d9c <__mdiff+0x148>
10016d8c:	18ffff04 	addi	r3,r3,-4
10016d90:	19000017 	ldw	r4,0(r3)
10016d94:	6b7fffc4 	addi	r13,r13,-1
10016d98:	203ffc26 	beq	r4,zero,10016d8c <__alt_data_end+0xf0016d8c>
10016d9c:	13400415 	stw	r13,16(r2)
10016da0:	dfc00417 	ldw	ra,16(sp)
10016da4:	dcc00317 	ldw	r19,12(sp)
10016da8:	dc800217 	ldw	r18,8(sp)
10016dac:	dc400117 	ldw	r17,4(sp)
10016db0:	dc000017 	ldw	r16,0(sp)
10016db4:	dec00504 	addi	sp,sp,20
10016db8:	f800283a 	ret
10016dbc:	8005883a 	mov	r2,r16
10016dc0:	04400044 	movi	r17,1
10016dc4:	9021883a 	mov	r16,r18
10016dc8:	1025883a 	mov	r18,r2
10016dcc:	003fb006 	br	10016c90 <__alt_data_end+0xf0016c90>
10016dd0:	9809883a 	mov	r4,r19
10016dd4:	000b883a 	mov	r5,zero
10016dd8:	00163340 	call	10016334 <_Balloc>
10016ddc:	00c00044 	movi	r3,1
10016de0:	10c00415 	stw	r3,16(r2)
10016de4:	10000515 	stw	zero,20(r2)
10016de8:	003fed06 	br	10016da0 <__alt_data_end+0xf0016da0>

10016dec <__ulp>:
10016dec:	295ffc2c 	andhi	r5,r5,32752
10016df0:	00bf3034 	movhi	r2,64704
10016df4:	2887883a 	add	r3,r5,r2
10016df8:	00c0020e 	bge	zero,r3,10016e04 <__ulp+0x18>
10016dfc:	0005883a 	mov	r2,zero
10016e00:	f800283a 	ret
10016e04:	00c7c83a 	sub	r3,zero,r3
10016e08:	180bd53a 	srai	r5,r3,20
10016e0c:	008004c4 	movi	r2,19
10016e10:	11400a0e 	bge	r2,r5,10016e3c <__ulp+0x50>
10016e14:	00800c84 	movi	r2,50
10016e18:	0007883a 	mov	r3,zero
10016e1c:	11400516 	blt	r2,r5,10016e34 <__ulp+0x48>
10016e20:	00800cc4 	movi	r2,51
10016e24:	114bc83a 	sub	r5,r2,r5
10016e28:	00800044 	movi	r2,1
10016e2c:	1144983a 	sll	r2,r2,r5
10016e30:	f800283a 	ret
10016e34:	00800044 	movi	r2,1
10016e38:	f800283a 	ret
10016e3c:	00800234 	movhi	r2,8
10016e40:	1147d83a 	sra	r3,r2,r5
10016e44:	0005883a 	mov	r2,zero
10016e48:	f800283a 	ret

10016e4c <__b2d>:
10016e4c:	defffa04 	addi	sp,sp,-24
10016e50:	dc000015 	stw	r16,0(sp)
10016e54:	24000417 	ldw	r16,16(r4)
10016e58:	dc400115 	stw	r17,4(sp)
10016e5c:	24400504 	addi	r17,r4,20
10016e60:	8421883a 	add	r16,r16,r16
10016e64:	8421883a 	add	r16,r16,r16
10016e68:	8c21883a 	add	r16,r17,r16
10016e6c:	dc800215 	stw	r18,8(sp)
10016e70:	84bfff17 	ldw	r18,-4(r16)
10016e74:	dd000415 	stw	r20,16(sp)
10016e78:	dcc00315 	stw	r19,12(sp)
10016e7c:	9009883a 	mov	r4,r18
10016e80:	2829883a 	mov	r20,r5
10016e84:	dfc00515 	stw	ra,20(sp)
10016e88:	001661c0 	call	1001661c <__hi0bits>
10016e8c:	00c00804 	movi	r3,32
10016e90:	1887c83a 	sub	r3,r3,r2
10016e94:	a0c00015 	stw	r3,0(r20)
10016e98:	00c00284 	movi	r3,10
10016e9c:	84ffff04 	addi	r19,r16,-4
10016ea0:	18801216 	blt	r3,r2,10016eec <__b2d+0xa0>
10016ea4:	014002c4 	movi	r5,11
10016ea8:	2889c83a 	sub	r4,r5,r2
10016eac:	9106d83a 	srl	r3,r18,r4
10016eb0:	18cffc34 	orhi	r3,r3,16368
10016eb4:	8cc0282e 	bgeu	r17,r19,10016f58 <__b2d+0x10c>
10016eb8:	817ffe17 	ldw	r5,-8(r16)
10016ebc:	290ad83a 	srl	r5,r5,r4
10016ec0:	10800544 	addi	r2,r2,21
10016ec4:	9084983a 	sll	r2,r18,r2
10016ec8:	2884b03a 	or	r2,r5,r2
10016ecc:	dfc00517 	ldw	ra,20(sp)
10016ed0:	dd000417 	ldw	r20,16(sp)
10016ed4:	dcc00317 	ldw	r19,12(sp)
10016ed8:	dc800217 	ldw	r18,8(sp)
10016edc:	dc400117 	ldw	r17,4(sp)
10016ee0:	dc000017 	ldw	r16,0(sp)
10016ee4:	dec00604 	addi	sp,sp,24
10016ee8:	f800283a 	ret
10016eec:	113ffd44 	addi	r4,r2,-11
10016ef0:	8cc00f2e 	bgeu	r17,r19,10016f30 <__b2d+0xe4>
10016ef4:	81bffe04 	addi	r6,r16,-8
10016ef8:	817ffe17 	ldw	r5,-8(r16)
10016efc:	20001326 	beq	r4,zero,10016f4c <__b2d+0x100>
10016f00:	00c00ac4 	movi	r3,43
10016f04:	1885c83a 	sub	r2,r3,r2
10016f08:	2886d83a 	srl	r3,r5,r2
10016f0c:	9124983a 	sll	r18,r18,r4
10016f10:	90e4b03a 	or	r18,r18,r3
10016f14:	90cffc34 	orhi	r3,r18,16368
10016f18:	8980112e 	bgeu	r17,r6,10016f60 <__b2d+0x114>
10016f1c:	81bffd17 	ldw	r6,-12(r16)
10016f20:	308cd83a 	srl	r6,r6,r2
10016f24:	2904983a 	sll	r2,r5,r4
10016f28:	1184b03a 	or	r2,r2,r6
10016f2c:	003fe706 	br	10016ecc <__alt_data_end+0xf0016ecc>
10016f30:	20000526 	beq	r4,zero,10016f48 <__b2d+0xfc>
10016f34:	9124983a 	sll	r18,r18,r4
10016f38:	000d883a 	mov	r6,zero
10016f3c:	000b883a 	mov	r5,zero
10016f40:	90cffc34 	orhi	r3,r18,16368
10016f44:	003ff706 	br	10016f24 <__alt_data_end+0xf0016f24>
10016f48:	000b883a 	mov	r5,zero
10016f4c:	90cffc34 	orhi	r3,r18,16368
10016f50:	2805883a 	mov	r2,r5
10016f54:	003fdd06 	br	10016ecc <__alt_data_end+0xf0016ecc>
10016f58:	000b883a 	mov	r5,zero
10016f5c:	003fd806 	br	10016ec0 <__alt_data_end+0xf0016ec0>
10016f60:	000d883a 	mov	r6,zero
10016f64:	003fef06 	br	10016f24 <__alt_data_end+0xf0016f24>

10016f68 <__d2b>:
10016f68:	defff704 	addi	sp,sp,-36
10016f6c:	dc000215 	stw	r16,8(sp)
10016f70:	3021883a 	mov	r16,r6
10016f74:	dc400315 	stw	r17,12(sp)
10016f78:	8022907a 	slli	r17,r16,1
10016f7c:	dd400715 	stw	r21,28(sp)
10016f80:	282b883a 	mov	r21,r5
10016f84:	01400044 	movi	r5,1
10016f88:	dd000615 	stw	r20,24(sp)
10016f8c:	dcc00515 	stw	r19,20(sp)
10016f90:	dc800415 	stw	r18,16(sp)
10016f94:	dfc00815 	stw	ra,32(sp)
10016f98:	3829883a 	mov	r20,r7
10016f9c:	dc800917 	ldw	r18,36(sp)
10016fa0:	8822d57a 	srli	r17,r17,21
10016fa4:	00163340 	call	10016334 <_Balloc>
10016fa8:	1027883a 	mov	r19,r2
10016fac:	00800434 	movhi	r2,16
10016fb0:	10bfffc4 	addi	r2,r2,-1
10016fb4:	808c703a 	and	r6,r16,r2
10016fb8:	88000126 	beq	r17,zero,10016fc0 <__d2b+0x58>
10016fbc:	31800434 	orhi	r6,r6,16
10016fc0:	d9800015 	stw	r6,0(sp)
10016fc4:	a8001f26 	beq	r21,zero,10017044 <__d2b+0xdc>
10016fc8:	d9000104 	addi	r4,sp,4
10016fcc:	dd400115 	stw	r21,4(sp)
10016fd0:	00166840 	call	10016684 <__lo0bits>
10016fd4:	d8c00017 	ldw	r3,0(sp)
10016fd8:	1000291e 	bne	r2,zero,10017080 <__d2b+0x118>
10016fdc:	d9000117 	ldw	r4,4(sp)
10016fe0:	99000515 	stw	r4,20(r19)
10016fe4:	1820c03a 	cmpne	r16,r3,zero
10016fe8:	84000044 	addi	r16,r16,1
10016fec:	98c00615 	stw	r3,24(r19)
10016ff0:	9c000415 	stw	r16,16(r19)
10016ff4:	88001b1e 	bne	r17,zero,10017064 <__d2b+0xfc>
10016ff8:	800690ba 	slli	r3,r16,2
10016ffc:	10bef384 	addi	r2,r2,-1074
10017000:	a0800015 	stw	r2,0(r20)
10017004:	98c5883a 	add	r2,r19,r3
10017008:	11000417 	ldw	r4,16(r2)
1001700c:	8020917a 	slli	r16,r16,5
10017010:	001661c0 	call	1001661c <__hi0bits>
10017014:	8085c83a 	sub	r2,r16,r2
10017018:	90800015 	stw	r2,0(r18)
1001701c:	9805883a 	mov	r2,r19
10017020:	dfc00817 	ldw	ra,32(sp)
10017024:	dd400717 	ldw	r21,28(sp)
10017028:	dd000617 	ldw	r20,24(sp)
1001702c:	dcc00517 	ldw	r19,20(sp)
10017030:	dc800417 	ldw	r18,16(sp)
10017034:	dc400317 	ldw	r17,12(sp)
10017038:	dc000217 	ldw	r16,8(sp)
1001703c:	dec00904 	addi	sp,sp,36
10017040:	f800283a 	ret
10017044:	d809883a 	mov	r4,sp
10017048:	00166840 	call	10016684 <__lo0bits>
1001704c:	d8c00017 	ldw	r3,0(sp)
10017050:	04000044 	movi	r16,1
10017054:	9c000415 	stw	r16,16(r19)
10017058:	98c00515 	stw	r3,20(r19)
1001705c:	10800804 	addi	r2,r2,32
10017060:	883fe526 	beq	r17,zero,10016ff8 <__alt_data_end+0xf0016ff8>
10017064:	8c7ef344 	addi	r17,r17,-1075
10017068:	88a3883a 	add	r17,r17,r2
1001706c:	00c00d44 	movi	r3,53
10017070:	a4400015 	stw	r17,0(r20)
10017074:	1885c83a 	sub	r2,r3,r2
10017078:	90800015 	stw	r2,0(r18)
1001707c:	003fe706 	br	1001701c <__alt_data_end+0xf001701c>
10017080:	01000804 	movi	r4,32
10017084:	2089c83a 	sub	r4,r4,r2
10017088:	1908983a 	sll	r4,r3,r4
1001708c:	d9400117 	ldw	r5,4(sp)
10017090:	1886d83a 	srl	r3,r3,r2
10017094:	2148b03a 	or	r4,r4,r5
10017098:	99000515 	stw	r4,20(r19)
1001709c:	d8c00015 	stw	r3,0(sp)
100170a0:	003fd006 	br	10016fe4 <__alt_data_end+0xf0016fe4>

100170a4 <__ratio>:
100170a4:	defff904 	addi	sp,sp,-28
100170a8:	dc400315 	stw	r17,12(sp)
100170ac:	2823883a 	mov	r17,r5
100170b0:	d9400104 	addi	r5,sp,4
100170b4:	dfc00615 	stw	ra,24(sp)
100170b8:	dcc00515 	stw	r19,20(sp)
100170bc:	dc800415 	stw	r18,16(sp)
100170c0:	2027883a 	mov	r19,r4
100170c4:	dc000215 	stw	r16,8(sp)
100170c8:	0016e4c0 	call	10016e4c <__b2d>
100170cc:	8809883a 	mov	r4,r17
100170d0:	d80b883a 	mov	r5,sp
100170d4:	1025883a 	mov	r18,r2
100170d8:	1821883a 	mov	r16,r3
100170dc:	0016e4c0 	call	10016e4c <__b2d>
100170e0:	8a400417 	ldw	r9,16(r17)
100170e4:	9a000417 	ldw	r8,16(r19)
100170e8:	100d883a 	mov	r6,r2
100170ec:	d8800017 	ldw	r2,0(sp)
100170f0:	4251c83a 	sub	r8,r8,r9
100170f4:	4012917a 	slli	r9,r8,5
100170f8:	da000117 	ldw	r8,4(sp)
100170fc:	4091c83a 	sub	r8,r8,r2
10017100:	4251883a 	add	r8,r8,r9
10017104:	02000d0e 	bge	zero,r8,1001713c <__ratio+0x98>
10017108:	4010953a 	slli	r8,r8,20
1001710c:	4421883a 	add	r16,r8,r16
10017110:	9009883a 	mov	r4,r18
10017114:	800b883a 	mov	r5,r16
10017118:	180f883a 	mov	r7,r3
1001711c:	001f3140 	call	1001f314 <__divdf3>
10017120:	dfc00617 	ldw	ra,24(sp)
10017124:	dcc00517 	ldw	r19,20(sp)
10017128:	dc800417 	ldw	r18,16(sp)
1001712c:	dc400317 	ldw	r17,12(sp)
10017130:	dc000217 	ldw	r16,8(sp)
10017134:	dec00704 	addi	sp,sp,28
10017138:	f800283a 	ret
1001713c:	4010953a 	slli	r8,r8,20
10017140:	1a07c83a 	sub	r3,r3,r8
10017144:	003ff206 	br	10017110 <__alt_data_end+0xf0017110>

10017148 <_mprec_log10>:
10017148:	defffe04 	addi	sp,sp,-8
1001714c:	dc000015 	stw	r16,0(sp)
10017150:	dfc00115 	stw	ra,4(sp)
10017154:	008005c4 	movi	r2,23
10017158:	2021883a 	mov	r16,r4
1001715c:	11000d0e 	bge	r2,r4,10017194 <_mprec_log10+0x4c>
10017160:	0005883a 	mov	r2,zero
10017164:	00cffc34 	movhi	r3,16368
10017168:	843fffc4 	addi	r16,r16,-1
1001716c:	1009883a 	mov	r4,r2
10017170:	180b883a 	mov	r5,r3
10017174:	000d883a 	mov	r6,zero
10017178:	01d00934 	movhi	r7,16420
1001717c:	001fe240 	call	1001fe24 <__muldf3>
10017180:	803ff91e 	bne	r16,zero,10017168 <__alt_data_end+0xf0017168>
10017184:	dfc00117 	ldw	ra,4(sp)
10017188:	dc000017 	ldw	r16,0(sp)
1001718c:	dec00204 	addi	sp,sp,8
10017190:	f800283a 	ret
10017194:	202090fa 	slli	r16,r4,3
10017198:	008400b4 	movhi	r2,4098
1001719c:	10952004 	addi	r2,r2,21632
100171a0:	1421883a 	add	r16,r2,r16
100171a4:	80800017 	ldw	r2,0(r16)
100171a8:	80c00117 	ldw	r3,4(r16)
100171ac:	dfc00117 	ldw	ra,4(sp)
100171b0:	dc000017 	ldw	r16,0(sp)
100171b4:	dec00204 	addi	sp,sp,8
100171b8:	f800283a 	ret

100171bc <__copybits>:
100171bc:	297fffc4 	addi	r5,r5,-1
100171c0:	280fd17a 	srai	r7,r5,5
100171c4:	30c00417 	ldw	r3,16(r6)
100171c8:	30800504 	addi	r2,r6,20
100171cc:	39c00044 	addi	r7,r7,1
100171d0:	18c7883a 	add	r3,r3,r3
100171d4:	39cf883a 	add	r7,r7,r7
100171d8:	18c7883a 	add	r3,r3,r3
100171dc:	39cf883a 	add	r7,r7,r7
100171e0:	10c7883a 	add	r3,r2,r3
100171e4:	21cf883a 	add	r7,r4,r7
100171e8:	10c00d2e 	bgeu	r2,r3,10017220 <__copybits+0x64>
100171ec:	200b883a 	mov	r5,r4
100171f0:	12000017 	ldw	r8,0(r2)
100171f4:	29400104 	addi	r5,r5,4
100171f8:	10800104 	addi	r2,r2,4
100171fc:	2a3fff15 	stw	r8,-4(r5)
10017200:	10fffb36 	bltu	r2,r3,100171f0 <__alt_data_end+0xf00171f0>
10017204:	1985c83a 	sub	r2,r3,r6
10017208:	10bffac4 	addi	r2,r2,-21
1001720c:	1004d0ba 	srli	r2,r2,2
10017210:	10800044 	addi	r2,r2,1
10017214:	1085883a 	add	r2,r2,r2
10017218:	1085883a 	add	r2,r2,r2
1001721c:	2089883a 	add	r4,r4,r2
10017220:	21c0032e 	bgeu	r4,r7,10017230 <__copybits+0x74>
10017224:	20000015 	stw	zero,0(r4)
10017228:	21000104 	addi	r4,r4,4
1001722c:	21fffd36 	bltu	r4,r7,10017224 <__alt_data_end+0xf0017224>
10017230:	f800283a 	ret

10017234 <__any_on>:
10017234:	20c00417 	ldw	r3,16(r4)
10017238:	2805d17a 	srai	r2,r5,5
1001723c:	21000504 	addi	r4,r4,20
10017240:	18800d0e 	bge	r3,r2,10017278 <__any_on+0x44>
10017244:	18c7883a 	add	r3,r3,r3
10017248:	18c7883a 	add	r3,r3,r3
1001724c:	20c7883a 	add	r3,r4,r3
10017250:	20c0192e 	bgeu	r4,r3,100172b8 <__any_on+0x84>
10017254:	18bfff17 	ldw	r2,-4(r3)
10017258:	18ffff04 	addi	r3,r3,-4
1001725c:	1000041e 	bne	r2,zero,10017270 <__any_on+0x3c>
10017260:	20c0142e 	bgeu	r4,r3,100172b4 <__any_on+0x80>
10017264:	18ffff04 	addi	r3,r3,-4
10017268:	19400017 	ldw	r5,0(r3)
1001726c:	283ffc26 	beq	r5,zero,10017260 <__alt_data_end+0xf0017260>
10017270:	00800044 	movi	r2,1
10017274:	f800283a 	ret
10017278:	10c00a0e 	bge	r2,r3,100172a4 <__any_on+0x70>
1001727c:	1085883a 	add	r2,r2,r2
10017280:	1085883a 	add	r2,r2,r2
10017284:	294007cc 	andi	r5,r5,31
10017288:	2087883a 	add	r3,r4,r2
1001728c:	283ff026 	beq	r5,zero,10017250 <__alt_data_end+0xf0017250>
10017290:	19800017 	ldw	r6,0(r3)
10017294:	3144d83a 	srl	r2,r6,r5
10017298:	114a983a 	sll	r5,r2,r5
1001729c:	29bff41e 	bne	r5,r6,10017270 <__alt_data_end+0xf0017270>
100172a0:	003feb06 	br	10017250 <__alt_data_end+0xf0017250>
100172a4:	1085883a 	add	r2,r2,r2
100172a8:	1085883a 	add	r2,r2,r2
100172ac:	2087883a 	add	r3,r4,r2
100172b0:	003fe706 	br	10017250 <__alt_data_end+0xf0017250>
100172b4:	f800283a 	ret
100172b8:	0005883a 	mov	r2,zero
100172bc:	f800283a 	ret

100172c0 <_realloc_r>:
100172c0:	defff604 	addi	sp,sp,-40
100172c4:	dcc00315 	stw	r19,12(sp)
100172c8:	dc400115 	stw	r17,4(sp)
100172cc:	dfc00915 	stw	ra,36(sp)
100172d0:	df000815 	stw	fp,32(sp)
100172d4:	ddc00715 	stw	r23,28(sp)
100172d8:	dd800615 	stw	r22,24(sp)
100172dc:	dd400515 	stw	r21,20(sp)
100172e0:	dd000415 	stw	r20,16(sp)
100172e4:	dc800215 	stw	r18,8(sp)
100172e8:	dc000015 	stw	r16,0(sp)
100172ec:	2827883a 	mov	r19,r5
100172f0:	3023883a 	mov	r17,r6
100172f4:	2800bf26 	beq	r5,zero,100175f4 <_realloc_r+0x334>
100172f8:	2025883a 	mov	r18,r4
100172fc:	0021aa00 	call	10021aa0 <__malloc_lock>
10017300:	98ffff17 	ldw	r3,-4(r19)
10017304:	01bfff04 	movi	r6,-4
10017308:	890002c4 	addi	r4,r17,11
1001730c:	01c00584 	movi	r7,22
10017310:	9d7ffe04 	addi	r21,r19,-8
10017314:	19a0703a 	and	r16,r3,r6
10017318:	39003f2e 	bgeu	r7,r4,10017418 <_realloc_r+0x158>
1001731c:	053ffe04 	movi	r20,-8
10017320:	2528703a 	and	r20,r4,r20
10017324:	a00f883a 	mov	r7,r20
10017328:	a0008216 	blt	r20,zero,10017534 <_realloc_r+0x274>
1001732c:	a4408136 	bltu	r20,r17,10017534 <_realloc_r+0x274>
10017330:	81c03c0e 	bge	r16,r7,10017424 <_realloc_r+0x164>
10017334:	070400b4 	movhi	fp,4098
10017338:	e7170c04 	addi	fp,fp,23600
1001733c:	e1000217 	ldw	r4,8(fp)
10017340:	ac05883a 	add	r2,r21,r16
10017344:	2080bf26 	beq	r4,r2,10017644 <_realloc_r+0x384>
10017348:	11000117 	ldw	r4,4(r2)
1001734c:	023fff84 	movi	r8,-2
10017350:	2210703a 	and	r8,r4,r8
10017354:	1211883a 	add	r8,r2,r8
10017358:	41400117 	ldw	r5,4(r8)
1001735c:	2940004c 	andi	r5,r5,1
10017360:	28004a1e 	bne	r5,zero,1001748c <_realloc_r+0x1cc>
10017364:	017fff04 	movi	r5,-4
10017368:	2148703a 	and	r4,r4,r5
1001736c:	2409883a 	add	r4,r4,r16
10017370:	21c0ad0e 	bge	r4,r7,10017628 <_realloc_r+0x368>
10017374:	18c0004c 	andi	r3,r3,1
10017378:	18007f1e 	bne	r3,zero,10017578 <_realloc_r+0x2b8>
1001737c:	9dfffe17 	ldw	r23,-8(r19)
10017380:	adefc83a 	sub	r23,r21,r23
10017384:	bd800117 	ldw	r22,4(r23)
10017388:	b14a703a 	and	r5,r22,r5
1001738c:	216d883a 	add	r22,r4,r5
10017390:	b1c04516 	blt	r22,r7,100174a8 <_realloc_r+0x1e8>
10017394:	10c00317 	ldw	r3,12(r2)
10017398:	10800217 	ldw	r2,8(r2)
1001739c:	81bfff04 	addi	r6,r16,-4
100173a0:	bc400204 	addi	r17,r23,8
100173a4:	10c00315 	stw	r3,12(r2)
100173a8:	18800215 	stw	r2,8(r3)
100173ac:	b9400217 	ldw	r5,8(r23)
100173b0:	b8c00317 	ldw	r3,12(r23)
100173b4:	00800904 	movi	r2,36
100173b8:	28c00315 	stw	r3,12(r5)
100173bc:	19400215 	stw	r5,8(r3)
100173c0:	1180ef36 	bltu	r2,r6,10017780 <_realloc_r+0x4c0>
100173c4:	008004c4 	movi	r2,19
100173c8:	1180da2e 	bgeu	r2,r6,10017734 <_realloc_r+0x474>
100173cc:	98800017 	ldw	r2,0(r19)
100173d0:	b8800215 	stw	r2,8(r23)
100173d4:	98800117 	ldw	r2,4(r19)
100173d8:	b8800315 	stw	r2,12(r23)
100173dc:	008006c4 	movi	r2,27
100173e0:	1180fc2e 	bgeu	r2,r6,100177d4 <_realloc_r+0x514>
100173e4:	98800217 	ldw	r2,8(r19)
100173e8:	b8800415 	stw	r2,16(r23)
100173ec:	98800317 	ldw	r2,12(r19)
100173f0:	b8800515 	stw	r2,20(r23)
100173f4:	00800904 	movi	r2,36
100173f8:	3080421e 	bne	r6,r2,10017504 <_realloc_r+0x244>
100173fc:	98800417 	ldw	r2,16(r19)
10017400:	9cc00604 	addi	r19,r19,24
10017404:	b8c00804 	addi	r3,r23,32
10017408:	b8800615 	stw	r2,24(r23)
1001740c:	98bfff17 	ldw	r2,-4(r19)
10017410:	b8800715 	stw	r2,28(r23)
10017414:	00003d06 	br	1001750c <_realloc_r+0x24c>
10017418:	01c00404 	movi	r7,16
1001741c:	3829883a 	mov	r20,r7
10017420:	003fc206 	br	1001732c <__alt_data_end+0xf001732c>
10017424:	9823883a 	mov	r17,r19
10017428:	850fc83a 	sub	r7,r16,r20
1001742c:	008003c4 	movi	r2,15
10017430:	18c0004c 	andi	r3,r3,1
10017434:	11c04336 	bltu	r2,r7,10017544 <_realloc_r+0x284>
10017438:	1c06b03a 	or	r3,r3,r16
1001743c:	a8c00115 	stw	r3,4(r21)
10017440:	ac21883a 	add	r16,r21,r16
10017444:	80c00117 	ldw	r3,4(r16)
10017448:	18c00054 	ori	r3,r3,1
1001744c:	80c00115 	stw	r3,4(r16)
10017450:	9009883a 	mov	r4,r18
10017454:	0021ac00 	call	10021ac0 <__malloc_unlock>
10017458:	8805883a 	mov	r2,r17
1001745c:	dfc00917 	ldw	ra,36(sp)
10017460:	df000817 	ldw	fp,32(sp)
10017464:	ddc00717 	ldw	r23,28(sp)
10017468:	dd800617 	ldw	r22,24(sp)
1001746c:	dd400517 	ldw	r21,20(sp)
10017470:	dd000417 	ldw	r20,16(sp)
10017474:	dcc00317 	ldw	r19,12(sp)
10017478:	dc800217 	ldw	r18,8(sp)
1001747c:	dc400117 	ldw	r17,4(sp)
10017480:	dc000017 	ldw	r16,0(sp)
10017484:	dec00a04 	addi	sp,sp,40
10017488:	f800283a 	ret
1001748c:	18c0004c 	andi	r3,r3,1
10017490:	1800391e 	bne	r3,zero,10017578 <_realloc_r+0x2b8>
10017494:	9dfffe17 	ldw	r23,-8(r19)
10017498:	00bfff04 	movi	r2,-4
1001749c:	adefc83a 	sub	r23,r21,r23
100174a0:	b9400117 	ldw	r5,4(r23)
100174a4:	288a703a 	and	r5,r5,r2
100174a8:	2c2d883a 	add	r22,r5,r16
100174ac:	b1c03216 	blt	r22,r7,10017578 <_realloc_r+0x2b8>
100174b0:	b8800317 	ldw	r2,12(r23)
100174b4:	b8c00217 	ldw	r3,8(r23)
100174b8:	81bfff04 	addi	r6,r16,-4
100174bc:	01000904 	movi	r4,36
100174c0:	18800315 	stw	r2,12(r3)
100174c4:	10c00215 	stw	r3,8(r2)
100174c8:	bc400204 	addi	r17,r23,8
100174cc:	2180ac36 	bltu	r4,r6,10017780 <_realloc_r+0x4c0>
100174d0:	008004c4 	movi	r2,19
100174d4:	1180972e 	bgeu	r2,r6,10017734 <_realloc_r+0x474>
100174d8:	98800017 	ldw	r2,0(r19)
100174dc:	b8800215 	stw	r2,8(r23)
100174e0:	98800117 	ldw	r2,4(r19)
100174e4:	b8800315 	stw	r2,12(r23)
100174e8:	008006c4 	movi	r2,27
100174ec:	1180b92e 	bgeu	r2,r6,100177d4 <_realloc_r+0x514>
100174f0:	98800217 	ldw	r2,8(r19)
100174f4:	b8800415 	stw	r2,16(r23)
100174f8:	98800317 	ldw	r2,12(r19)
100174fc:	b8800515 	stw	r2,20(r23)
10017500:	313fbe26 	beq	r6,r4,100173fc <__alt_data_end+0xf00173fc>
10017504:	b8c00604 	addi	r3,r23,24
10017508:	9cc00404 	addi	r19,r19,16
1001750c:	98800017 	ldw	r2,0(r19)
10017510:	b021883a 	mov	r16,r22
10017514:	b82b883a 	mov	r21,r23
10017518:	18800015 	stw	r2,0(r3)
1001751c:	98800117 	ldw	r2,4(r19)
10017520:	18800115 	stw	r2,4(r3)
10017524:	98800217 	ldw	r2,8(r19)
10017528:	18800215 	stw	r2,8(r3)
1001752c:	b8c00117 	ldw	r3,4(r23)
10017530:	003fbd06 	br	10017428 <__alt_data_end+0xf0017428>
10017534:	00800304 	movi	r2,12
10017538:	90800015 	stw	r2,0(r18)
1001753c:	0005883a 	mov	r2,zero
10017540:	003fc606 	br	1001745c <__alt_data_end+0xf001745c>
10017544:	1d06b03a 	or	r3,r3,r20
10017548:	ad0b883a 	add	r5,r21,r20
1001754c:	a8c00115 	stw	r3,4(r21)
10017550:	38800054 	ori	r2,r7,1
10017554:	28800115 	stw	r2,4(r5)
10017558:	29cf883a 	add	r7,r5,r7
1001755c:	38800117 	ldw	r2,4(r7)
10017560:	9009883a 	mov	r4,r18
10017564:	29400204 	addi	r5,r5,8
10017568:	10800054 	ori	r2,r2,1
1001756c:	38800115 	stw	r2,4(r7)
10017570:	0014b400 	call	10014b40 <_free_r>
10017574:	003fb606 	br	10017450 <__alt_data_end+0xf0017450>
10017578:	880b883a 	mov	r5,r17
1001757c:	9009883a 	mov	r4,r18
10017580:	001570c0 	call	1001570c <_malloc_r>
10017584:	1023883a 	mov	r17,r2
10017588:	1000aa26 	beq	r2,zero,10017834 <_realloc_r+0x574>
1001758c:	98ffff17 	ldw	r3,-4(r19)
10017590:	113ffe04 	addi	r4,r2,-8
10017594:	00bfff84 	movi	r2,-2
10017598:	1884703a 	and	r2,r3,r2
1001759c:	a885883a 	add	r2,r21,r2
100175a0:	20808626 	beq	r4,r2,100177bc <_realloc_r+0x4fc>
100175a4:	81bfff04 	addi	r6,r16,-4
100175a8:	00800904 	movi	r2,36
100175ac:	11807036 	bltu	r2,r6,10017770 <_realloc_r+0x4b0>
100175b0:	00c004c4 	movi	r3,19
100175b4:	19805636 	bltu	r3,r6,10017710 <_realloc_r+0x450>
100175b8:	8805883a 	mov	r2,r17
100175bc:	9807883a 	mov	r3,r19
100175c0:	19000017 	ldw	r4,0(r3)
100175c4:	11000015 	stw	r4,0(r2)
100175c8:	19000117 	ldw	r4,4(r3)
100175cc:	11000115 	stw	r4,4(r2)
100175d0:	18c00217 	ldw	r3,8(r3)
100175d4:	10c00215 	stw	r3,8(r2)
100175d8:	980b883a 	mov	r5,r19
100175dc:	9009883a 	mov	r4,r18
100175e0:	0014b400 	call	10014b40 <_free_r>
100175e4:	9009883a 	mov	r4,r18
100175e8:	0021ac00 	call	10021ac0 <__malloc_unlock>
100175ec:	8805883a 	mov	r2,r17
100175f0:	003f9a06 	br	1001745c <__alt_data_end+0xf001745c>
100175f4:	300b883a 	mov	r5,r6
100175f8:	dfc00917 	ldw	ra,36(sp)
100175fc:	df000817 	ldw	fp,32(sp)
10017600:	ddc00717 	ldw	r23,28(sp)
10017604:	dd800617 	ldw	r22,24(sp)
10017608:	dd400517 	ldw	r21,20(sp)
1001760c:	dd000417 	ldw	r20,16(sp)
10017610:	dcc00317 	ldw	r19,12(sp)
10017614:	dc800217 	ldw	r18,8(sp)
10017618:	dc400117 	ldw	r17,4(sp)
1001761c:	dc000017 	ldw	r16,0(sp)
10017620:	dec00a04 	addi	sp,sp,40
10017624:	001570c1 	jmpi	1001570c <_malloc_r>
10017628:	11400317 	ldw	r5,12(r2)
1001762c:	10800217 	ldw	r2,8(r2)
10017630:	9823883a 	mov	r17,r19
10017634:	2021883a 	mov	r16,r4
10017638:	11400315 	stw	r5,12(r2)
1001763c:	28800215 	stw	r2,8(r5)
10017640:	003f7906 	br	10017428 <__alt_data_end+0xf0017428>
10017644:	21000117 	ldw	r4,4(r4)
10017648:	00bfff04 	movi	r2,-4
1001764c:	a1800404 	addi	r6,r20,16
10017650:	2088703a 	and	r4,r4,r2
10017654:	2409883a 	add	r4,r4,r16
10017658:	2180380e 	bge	r4,r6,1001773c <_realloc_r+0x47c>
1001765c:	18c0004c 	andi	r3,r3,1
10017660:	183fc51e 	bne	r3,zero,10017578 <__alt_data_end+0xf0017578>
10017664:	9dfffe17 	ldw	r23,-8(r19)
10017668:	adefc83a 	sub	r23,r21,r23
1001766c:	b9400117 	ldw	r5,4(r23)
10017670:	288a703a 	and	r5,r5,r2
10017674:	216d883a 	add	r22,r4,r5
10017678:	b1bf8b16 	blt	r22,r6,100174a8 <__alt_data_end+0xf00174a8>
1001767c:	b8800317 	ldw	r2,12(r23)
10017680:	b8c00217 	ldw	r3,8(r23)
10017684:	81bfff04 	addi	r6,r16,-4
10017688:	01000904 	movi	r4,36
1001768c:	18800315 	stw	r2,12(r3)
10017690:	10c00215 	stw	r3,8(r2)
10017694:	bc400204 	addi	r17,r23,8
10017698:	21805a36 	bltu	r4,r6,10017804 <_realloc_r+0x544>
1001769c:	008004c4 	movi	r2,19
100176a0:	1180562e 	bgeu	r2,r6,100177fc <_realloc_r+0x53c>
100176a4:	98800017 	ldw	r2,0(r19)
100176a8:	b8800215 	stw	r2,8(r23)
100176ac:	98800117 	ldw	r2,4(r19)
100176b0:	b8800315 	stw	r2,12(r23)
100176b4:	008006c4 	movi	r2,27
100176b8:	11805636 	bltu	r2,r6,10017814 <_realloc_r+0x554>
100176bc:	b8800404 	addi	r2,r23,16
100176c0:	9cc00204 	addi	r19,r19,8
100176c4:	98c00017 	ldw	r3,0(r19)
100176c8:	10c00015 	stw	r3,0(r2)
100176cc:	98c00117 	ldw	r3,4(r19)
100176d0:	10c00115 	stw	r3,4(r2)
100176d4:	98c00217 	ldw	r3,8(r19)
100176d8:	10c00215 	stw	r3,8(r2)
100176dc:	bd07883a 	add	r3,r23,r20
100176e0:	b505c83a 	sub	r2,r22,r20
100176e4:	e0c00215 	stw	r3,8(fp)
100176e8:	10800054 	ori	r2,r2,1
100176ec:	18800115 	stw	r2,4(r3)
100176f0:	b8800117 	ldw	r2,4(r23)
100176f4:	9009883a 	mov	r4,r18
100176f8:	1080004c 	andi	r2,r2,1
100176fc:	a0a8b03a 	or	r20,r20,r2
10017700:	bd000115 	stw	r20,4(r23)
10017704:	0021ac00 	call	10021ac0 <__malloc_unlock>
10017708:	8805883a 	mov	r2,r17
1001770c:	003f5306 	br	1001745c <__alt_data_end+0xf001745c>
10017710:	98c00017 	ldw	r3,0(r19)
10017714:	88c00015 	stw	r3,0(r17)
10017718:	98c00117 	ldw	r3,4(r19)
1001771c:	88c00115 	stw	r3,4(r17)
10017720:	00c006c4 	movi	r3,27
10017724:	19801d36 	bltu	r3,r6,1001779c <_realloc_r+0x4dc>
10017728:	88800204 	addi	r2,r17,8
1001772c:	98c00204 	addi	r3,r19,8
10017730:	003fa306 	br	100175c0 <__alt_data_end+0xf00175c0>
10017734:	8807883a 	mov	r3,r17
10017738:	003f7406 	br	1001750c <__alt_data_end+0xf001750c>
1001773c:	ad2b883a 	add	r21,r21,r20
10017740:	2505c83a 	sub	r2,r4,r20
10017744:	e5400215 	stw	r21,8(fp)
10017748:	10800054 	ori	r2,r2,1
1001774c:	a8800115 	stw	r2,4(r21)
10017750:	98bfff17 	ldw	r2,-4(r19)
10017754:	9009883a 	mov	r4,r18
10017758:	1080004c 	andi	r2,r2,1
1001775c:	a0a8b03a 	or	r20,r20,r2
10017760:	9d3fff15 	stw	r20,-4(r19)
10017764:	0021ac00 	call	10021ac0 <__malloc_unlock>
10017768:	9805883a 	mov	r2,r19
1001776c:	003f3b06 	br	1001745c <__alt_data_end+0xf001745c>
10017770:	8809883a 	mov	r4,r17
10017774:	980b883a 	mov	r5,r19
10017778:	00161d80 	call	100161d8 <memmove>
1001777c:	003f9606 	br	100175d8 <__alt_data_end+0xf00175d8>
10017780:	8809883a 	mov	r4,r17
10017784:	980b883a 	mov	r5,r19
10017788:	00161d80 	call	100161d8 <memmove>
1001778c:	b8c00117 	ldw	r3,4(r23)
10017790:	b021883a 	mov	r16,r22
10017794:	b82b883a 	mov	r21,r23
10017798:	003f2306 	br	10017428 <__alt_data_end+0xf0017428>
1001779c:	98c00217 	ldw	r3,8(r19)
100177a0:	88c00215 	stw	r3,8(r17)
100177a4:	98c00317 	ldw	r3,12(r19)
100177a8:	88c00315 	stw	r3,12(r17)
100177ac:	30800c26 	beq	r6,r2,100177e0 <_realloc_r+0x520>
100177b0:	88800404 	addi	r2,r17,16
100177b4:	98c00404 	addi	r3,r19,16
100177b8:	003f8106 	br	100175c0 <__alt_data_end+0xf00175c0>
100177bc:	893fff17 	ldw	r4,-4(r17)
100177c0:	00bfff04 	movi	r2,-4
100177c4:	9823883a 	mov	r17,r19
100177c8:	2084703a 	and	r2,r4,r2
100177cc:	80a1883a 	add	r16,r16,r2
100177d0:	003f1506 	br	10017428 <__alt_data_end+0xf0017428>
100177d4:	b8c00404 	addi	r3,r23,16
100177d8:	9cc00204 	addi	r19,r19,8
100177dc:	003f4b06 	br	1001750c <__alt_data_end+0xf001750c>
100177e0:	99000417 	ldw	r4,16(r19)
100177e4:	88800604 	addi	r2,r17,24
100177e8:	98c00604 	addi	r3,r19,24
100177ec:	89000415 	stw	r4,16(r17)
100177f0:	99000517 	ldw	r4,20(r19)
100177f4:	89000515 	stw	r4,20(r17)
100177f8:	003f7106 	br	100175c0 <__alt_data_end+0xf00175c0>
100177fc:	8805883a 	mov	r2,r17
10017800:	003fb006 	br	100176c4 <__alt_data_end+0xf00176c4>
10017804:	8809883a 	mov	r4,r17
10017808:	980b883a 	mov	r5,r19
1001780c:	00161d80 	call	100161d8 <memmove>
10017810:	003fb206 	br	100176dc <__alt_data_end+0xf00176dc>
10017814:	98800217 	ldw	r2,8(r19)
10017818:	b8800415 	stw	r2,16(r23)
1001781c:	98800317 	ldw	r2,12(r19)
10017820:	b8800515 	stw	r2,20(r23)
10017824:	31000726 	beq	r6,r4,10017844 <_realloc_r+0x584>
10017828:	b8800604 	addi	r2,r23,24
1001782c:	9cc00404 	addi	r19,r19,16
10017830:	003fa406 	br	100176c4 <__alt_data_end+0xf00176c4>
10017834:	9009883a 	mov	r4,r18
10017838:	0021ac00 	call	10021ac0 <__malloc_unlock>
1001783c:	0005883a 	mov	r2,zero
10017840:	003f0606 	br	1001745c <__alt_data_end+0xf001745c>
10017844:	98c00417 	ldw	r3,16(r19)
10017848:	9cc00604 	addi	r19,r19,24
1001784c:	b8800804 	addi	r2,r23,32
10017850:	b8c00615 	stw	r3,24(r23)
10017854:	98ffff17 	ldw	r3,-4(r19)
10017858:	b8c00715 	stw	r3,28(r23)
1001785c:	003f9906 	br	100176c4 <__alt_data_end+0xf00176c4>

10017860 <lflush>:
10017860:	2080030b 	ldhu	r2,12(r4)
10017864:	00c00244 	movi	r3,9
10017868:	1080024c 	andi	r2,r2,9
1001786c:	10c00226 	beq	r2,r3,10017878 <lflush+0x18>
10017870:	0005883a 	mov	r2,zero
10017874:	f800283a 	ret
10017878:	00143cc1 	jmpi	100143cc <fflush>

1001787c <__srefill_r>:
1001787c:	defffd04 	addi	sp,sp,-12
10017880:	dc400115 	stw	r17,4(sp)
10017884:	dc000015 	stw	r16,0(sp)
10017888:	dfc00215 	stw	ra,8(sp)
1001788c:	2023883a 	mov	r17,r4
10017890:	2821883a 	mov	r16,r5
10017894:	20000226 	beq	r4,zero,100178a0 <__srefill_r+0x24>
10017898:	20800e17 	ldw	r2,56(r4)
1001789c:	10003b26 	beq	r2,zero,1001798c <__srefill_r+0x110>
100178a0:	80c0030b 	ldhu	r3,12(r16)
100178a4:	1908000c 	andi	r4,r3,8192
100178a8:	1805883a 	mov	r2,r3
100178ac:	2000071e 	bne	r4,zero,100178cc <__srefill_r+0x50>
100178b0:	81001917 	ldw	r4,100(r16)
100178b4:	18880014 	ori	r2,r3,8192
100178b8:	00f7ffc4 	movi	r3,-8193
100178bc:	20c8703a 	and	r4,r4,r3
100178c0:	8080030d 	sth	r2,12(r16)
100178c4:	1007883a 	mov	r3,r2
100178c8:	81001915 	stw	r4,100(r16)
100178cc:	80000115 	stw	zero,4(r16)
100178d0:	1100080c 	andi	r4,r2,32
100178d4:	20004d1e 	bne	r4,zero,10017a0c <__srefill_r+0x190>
100178d8:	1100010c 	andi	r4,r2,4
100178dc:	20001e26 	beq	r4,zero,10017958 <__srefill_r+0xdc>
100178e0:	81400c17 	ldw	r5,48(r16)
100178e4:	28000826 	beq	r5,zero,10017908 <__srefill_r+0x8c>
100178e8:	80801004 	addi	r2,r16,64
100178ec:	28800226 	beq	r5,r2,100178f8 <__srefill_r+0x7c>
100178f0:	8809883a 	mov	r4,r17
100178f4:	0014b400 	call	10014b40 <_free_r>
100178f8:	80800f17 	ldw	r2,60(r16)
100178fc:	80000c15 	stw	zero,48(r16)
10017900:	80800115 	stw	r2,4(r16)
10017904:	10002f1e 	bne	r2,zero,100179c4 <__srefill_r+0x148>
10017908:	80800417 	ldw	r2,16(r16)
1001790c:	10004126 	beq	r2,zero,10017a14 <__srefill_r+0x198>
10017910:	8080030b 	ldhu	r2,12(r16)
10017914:	108000cc 	andi	r2,r2,3
10017918:	10001e1e 	bne	r2,zero,10017994 <__srefill_r+0x118>
1001791c:	81800417 	ldw	r6,16(r16)
10017920:	80800817 	ldw	r2,32(r16)
10017924:	81400717 	ldw	r5,28(r16)
10017928:	81c00517 	ldw	r7,20(r16)
1001792c:	81800015 	stw	r6,0(r16)
10017930:	8809883a 	mov	r4,r17
10017934:	103ee83a 	callr	r2
10017938:	80800115 	stw	r2,4(r16)
1001793c:	00800d0e 	bge	zero,r2,10017974 <__srefill_r+0xf8>
10017940:	0005883a 	mov	r2,zero
10017944:	dfc00217 	ldw	ra,8(sp)
10017948:	dc400117 	ldw	r17,4(sp)
1001794c:	dc000017 	ldw	r16,0(sp)
10017950:	dec00304 	addi	sp,sp,12
10017954:	f800283a 	ret
10017958:	1100040c 	andi	r4,r2,16
1001795c:	20002726 	beq	r4,zero,100179fc <__srefill_r+0x180>
10017960:	1080020c 	andi	r2,r2,8
10017964:	10001b1e 	bne	r2,zero,100179d4 <__srefill_r+0x158>
10017968:	18c00114 	ori	r3,r3,4
1001796c:	80c0030d 	sth	r3,12(r16)
10017970:	003fe506 	br	10017908 <__alt_data_end+0xf0017908>
10017974:	80c0030b 	ldhu	r3,12(r16)
10017978:	10000d1e 	bne	r2,zero,100179b0 <__srefill_r+0x134>
1001797c:	18c00814 	ori	r3,r3,32
10017980:	00bfffc4 	movi	r2,-1
10017984:	80c0030d 	sth	r3,12(r16)
10017988:	003fee06 	br	10017944 <__alt_data_end+0xf0017944>
1001798c:	001474c0 	call	1001474c <__sinit>
10017990:	003fc306 	br	100178a0 <__alt_data_end+0xf00178a0>
10017994:	008400b4 	movhi	r2,4098
10017998:	109d0f04 	addi	r2,r2,29756
1001799c:	11000017 	ldw	r4,0(r2)
100179a0:	01440074 	movhi	r5,4097
100179a4:	295e1804 	addi	r5,r5,30816
100179a8:	00152d40 	call	100152d4 <_fwalk>
100179ac:	003fdb06 	br	1001791c <__alt_data_end+0xf001791c>
100179b0:	18c01014 	ori	r3,r3,64
100179b4:	80000115 	stw	zero,4(r16)
100179b8:	00bfffc4 	movi	r2,-1
100179bc:	80c0030d 	sth	r3,12(r16)
100179c0:	003fe006 	br	10017944 <__alt_data_end+0xf0017944>
100179c4:	80c00e17 	ldw	r3,56(r16)
100179c8:	0005883a 	mov	r2,zero
100179cc:	80c00015 	stw	r3,0(r16)
100179d0:	003fdc06 	br	10017944 <__alt_data_end+0xf0017944>
100179d4:	8809883a 	mov	r4,r17
100179d8:	800b883a 	mov	r5,r16
100179dc:	00141a40 	call	100141a4 <_fflush_r>
100179e0:	10000a1e 	bne	r2,zero,10017a0c <__srefill_r+0x190>
100179e4:	8080030b 	ldhu	r2,12(r16)
100179e8:	00fffdc4 	movi	r3,-9
100179ec:	80000215 	stw	zero,8(r16)
100179f0:	1886703a 	and	r3,r3,r2
100179f4:	80000615 	stw	zero,24(r16)
100179f8:	003fdb06 	br	10017968 <__alt_data_end+0xf0017968>
100179fc:	00800244 	movi	r2,9
10017a00:	88800015 	stw	r2,0(r17)
10017a04:	18c01014 	ori	r3,r3,64
10017a08:	80c0030d 	sth	r3,12(r16)
10017a0c:	00bfffc4 	movi	r2,-1
10017a10:	003fcc06 	br	10017944 <__alt_data_end+0xf0017944>
10017a14:	8809883a 	mov	r4,r17
10017a18:	800b883a 	mov	r5,r16
10017a1c:	00155540 	call	10015554 <__smakebuf_r>
10017a20:	003fbb06 	br	10017910 <__alt_data_end+0xf0017910>

10017a24 <__fpclassifyd>:
10017a24:	00a00034 	movhi	r2,32768
10017a28:	10bfffc4 	addi	r2,r2,-1
10017a2c:	2884703a 	and	r2,r5,r2
10017a30:	10000726 	beq	r2,zero,10017a50 <__fpclassifyd+0x2c>
10017a34:	00fffc34 	movhi	r3,65520
10017a38:	019ff834 	movhi	r6,32736
10017a3c:	28c7883a 	add	r3,r5,r3
10017a40:	31bfffc4 	addi	r6,r6,-1
10017a44:	30c00536 	bltu	r6,r3,10017a5c <__fpclassifyd+0x38>
10017a48:	00800104 	movi	r2,4
10017a4c:	f800283a 	ret
10017a50:	2000021e 	bne	r4,zero,10017a5c <__fpclassifyd+0x38>
10017a54:	00800084 	movi	r2,2
10017a58:	f800283a 	ret
10017a5c:	00dffc34 	movhi	r3,32752
10017a60:	019ff834 	movhi	r6,32736
10017a64:	28cb883a 	add	r5,r5,r3
10017a68:	31bfffc4 	addi	r6,r6,-1
10017a6c:	317ff62e 	bgeu	r6,r5,10017a48 <__alt_data_end+0xf0017a48>
10017a70:	01400434 	movhi	r5,16
10017a74:	297fffc4 	addi	r5,r5,-1
10017a78:	28800236 	bltu	r5,r2,10017a84 <__fpclassifyd+0x60>
10017a7c:	008000c4 	movi	r2,3
10017a80:	f800283a 	ret
10017a84:	10c00226 	beq	r2,r3,10017a90 <__fpclassifyd+0x6c>
10017a88:	0005883a 	mov	r2,zero
10017a8c:	f800283a 	ret
10017a90:	2005003a 	cmpeq	r2,r4,zero
10017a94:	f800283a 	ret

10017a98 <_sbrk_r>:
10017a98:	defffd04 	addi	sp,sp,-12
10017a9c:	dc000015 	stw	r16,0(sp)
10017aa0:	040400f4 	movhi	r16,4099
10017aa4:	dc400115 	stw	r17,4(sp)
10017aa8:	84248b04 	addi	r16,r16,-28116
10017aac:	2023883a 	mov	r17,r4
10017ab0:	2809883a 	mov	r4,r5
10017ab4:	dfc00215 	stw	ra,8(sp)
10017ab8:	80000015 	stw	zero,0(r16)
10017abc:	0021c8c0 	call	10021c8c <sbrk>
10017ac0:	00ffffc4 	movi	r3,-1
10017ac4:	10c00526 	beq	r2,r3,10017adc <_sbrk_r+0x44>
10017ac8:	dfc00217 	ldw	ra,8(sp)
10017acc:	dc400117 	ldw	r17,4(sp)
10017ad0:	dc000017 	ldw	r16,0(sp)
10017ad4:	dec00304 	addi	sp,sp,12
10017ad8:	f800283a 	ret
10017adc:	80c00017 	ldw	r3,0(r16)
10017ae0:	183ff926 	beq	r3,zero,10017ac8 <__alt_data_end+0xf0017ac8>
10017ae4:	88c00015 	stw	r3,0(r17)
10017ae8:	003ff706 	br	10017ac8 <__alt_data_end+0xf0017ac8>

10017aec <__sccl>:
10017aec:	2a000003 	ldbu	r8,0(r5)
10017af0:	00801784 	movi	r2,94
10017af4:	40802526 	beq	r8,r2,10017b8c <__sccl+0xa0>
10017af8:	29400044 	addi	r5,r5,1
10017afc:	000f883a 	mov	r7,zero
10017b00:	0013883a 	mov	r9,zero
10017b04:	2007883a 	mov	r3,r4
10017b08:	21804004 	addi	r6,r4,256
10017b0c:	19c00005 	stb	r7,0(r3)
10017b10:	18c00044 	addi	r3,r3,1
10017b14:	19bffd1e 	bne	r3,r6,10017b0c <__alt_data_end+0xf0017b0c>
10017b18:	40001026 	beq	r8,zero,10017b5c <__sccl+0x70>
10017b1c:	00800044 	movi	r2,1
10017b20:	124dc83a 	sub	r6,r2,r9
10017b24:	02801744 	movi	r10,93
10017b28:	02400b44 	movi	r9,45
10017b2c:	2205883a 	add	r2,r4,r8
10017b30:	11800005 	stb	r6,0(r2)
10017b34:	28800044 	addi	r2,r5,1
10017b38:	28c00003 	ldbu	r3,0(r5)
10017b3c:	1a400926 	beq	r3,r9,10017b64 <__sccl+0x78>
10017b40:	1a800526 	beq	r3,r10,10017b58 <__sccl+0x6c>
10017b44:	18000326 	beq	r3,zero,10017b54 <__sccl+0x68>
10017b48:	1811883a 	mov	r8,r3
10017b4c:	100b883a 	mov	r5,r2
10017b50:	003ff606 	br	10017b2c <__alt_data_end+0xf0017b2c>
10017b54:	2805883a 	mov	r2,r5
10017b58:	f800283a 	ret
10017b5c:	28bfffc4 	addi	r2,r5,-1
10017b60:	f800283a 	ret
10017b64:	11c00003 	ldbu	r7,0(r2)
10017b68:	3a800d26 	beq	r7,r10,10017ba0 <__sccl+0xb4>
10017b6c:	3a000c16 	blt	r7,r8,10017ba0 <__sccl+0xb4>
10017b70:	29400084 	addi	r5,r5,2
10017b74:	42000044 	addi	r8,r8,1
10017b78:	2207883a 	add	r3,r4,r8
10017b7c:	19800005 	stb	r6,0(r3)
10017b80:	41fffc16 	blt	r8,r7,10017b74 <__alt_data_end+0xf0017b74>
10017b84:	10800084 	addi	r2,r2,2
10017b88:	003feb06 	br	10017b38 <__alt_data_end+0xf0017b38>
10017b8c:	2a000043 	ldbu	r8,1(r5)
10017b90:	01c00044 	movi	r7,1
10017b94:	29400084 	addi	r5,r5,2
10017b98:	02400044 	movi	r9,1
10017b9c:	003fd906 	br	10017b04 <__alt_data_end+0xf0017b04>
10017ba0:	100b883a 	mov	r5,r2
10017ba4:	4811883a 	mov	r8,r9
10017ba8:	003fe006 	br	10017b2c <__alt_data_end+0xf0017b2c>

10017bac <nanf>:
10017bac:	009ff034 	movhi	r2,32704
10017bb0:	f800283a 	ret

10017bb4 <__sread>:
10017bb4:	defffe04 	addi	sp,sp,-8
10017bb8:	dc000015 	stw	r16,0(sp)
10017bbc:	2821883a 	mov	r16,r5
10017bc0:	2940038f 	ldh	r5,14(r5)
10017bc4:	dfc00115 	stw	ra,4(sp)
10017bc8:	001d7e40 	call	1001d7e4 <_read_r>
10017bcc:	10000716 	blt	r2,zero,10017bec <__sread+0x38>
10017bd0:	80c01417 	ldw	r3,80(r16)
10017bd4:	1887883a 	add	r3,r3,r2
10017bd8:	80c01415 	stw	r3,80(r16)
10017bdc:	dfc00117 	ldw	ra,4(sp)
10017be0:	dc000017 	ldw	r16,0(sp)
10017be4:	dec00204 	addi	sp,sp,8
10017be8:	f800283a 	ret
10017bec:	80c0030b 	ldhu	r3,12(r16)
10017bf0:	18fbffcc 	andi	r3,r3,61439
10017bf4:	80c0030d 	sth	r3,12(r16)
10017bf8:	dfc00117 	ldw	ra,4(sp)
10017bfc:	dc000017 	ldw	r16,0(sp)
10017c00:	dec00204 	addi	sp,sp,8
10017c04:	f800283a 	ret

10017c08 <__seofread>:
10017c08:	0005883a 	mov	r2,zero
10017c0c:	f800283a 	ret

10017c10 <__swrite>:
10017c10:	2880030b 	ldhu	r2,12(r5)
10017c14:	defffb04 	addi	sp,sp,-20
10017c18:	dcc00315 	stw	r19,12(sp)
10017c1c:	dc800215 	stw	r18,8(sp)
10017c20:	dc400115 	stw	r17,4(sp)
10017c24:	dc000015 	stw	r16,0(sp)
10017c28:	dfc00415 	stw	ra,16(sp)
10017c2c:	10c0400c 	andi	r3,r2,256
10017c30:	2821883a 	mov	r16,r5
10017c34:	2027883a 	mov	r19,r4
10017c38:	3025883a 	mov	r18,r6
10017c3c:	3823883a 	mov	r17,r7
10017c40:	18000526 	beq	r3,zero,10017c58 <__swrite+0x48>
10017c44:	2940038f 	ldh	r5,14(r5)
10017c48:	000d883a 	mov	r6,zero
10017c4c:	01c00084 	movi	r7,2
10017c50:	001d7880 	call	1001d788 <_lseek_r>
10017c54:	8080030b 	ldhu	r2,12(r16)
10017c58:	8140038f 	ldh	r5,14(r16)
10017c5c:	10bbffcc 	andi	r2,r2,61439
10017c60:	9809883a 	mov	r4,r19
10017c64:	900d883a 	mov	r6,r18
10017c68:	880f883a 	mov	r7,r17
10017c6c:	8080030d 	sth	r2,12(r16)
10017c70:	dfc00417 	ldw	ra,16(sp)
10017c74:	dcc00317 	ldw	r19,12(sp)
10017c78:	dc800217 	ldw	r18,8(sp)
10017c7c:	dc400117 	ldw	r17,4(sp)
10017c80:	dc000017 	ldw	r16,0(sp)
10017c84:	dec00504 	addi	sp,sp,20
10017c88:	001c6441 	jmpi	1001c644 <_write_r>

10017c8c <__sseek>:
10017c8c:	defffe04 	addi	sp,sp,-8
10017c90:	dc000015 	stw	r16,0(sp)
10017c94:	2821883a 	mov	r16,r5
10017c98:	2940038f 	ldh	r5,14(r5)
10017c9c:	dfc00115 	stw	ra,4(sp)
10017ca0:	001d7880 	call	1001d788 <_lseek_r>
10017ca4:	00ffffc4 	movi	r3,-1
10017ca8:	10c00826 	beq	r2,r3,10017ccc <__sseek+0x40>
10017cac:	80c0030b 	ldhu	r3,12(r16)
10017cb0:	80801415 	stw	r2,80(r16)
10017cb4:	18c40014 	ori	r3,r3,4096
10017cb8:	80c0030d 	sth	r3,12(r16)
10017cbc:	dfc00117 	ldw	ra,4(sp)
10017cc0:	dc000017 	ldw	r16,0(sp)
10017cc4:	dec00204 	addi	sp,sp,8
10017cc8:	f800283a 	ret
10017ccc:	80c0030b 	ldhu	r3,12(r16)
10017cd0:	18fbffcc 	andi	r3,r3,61439
10017cd4:	80c0030d 	sth	r3,12(r16)
10017cd8:	dfc00117 	ldw	ra,4(sp)
10017cdc:	dc000017 	ldw	r16,0(sp)
10017ce0:	dec00204 	addi	sp,sp,8
10017ce4:	f800283a 	ret

10017ce8 <__sclose>:
10017ce8:	2940038f 	ldh	r5,14(r5)
10017cec:	001c6a01 	jmpi	1001c6a0 <_close_r>

10017cf0 <strcmp>:
10017cf0:	2144b03a 	or	r2,r4,r5
10017cf4:	108000cc 	andi	r2,r2,3
10017cf8:	1000171e 	bne	r2,zero,10017d58 <strcmp+0x68>
10017cfc:	20800017 	ldw	r2,0(r4)
10017d00:	28c00017 	ldw	r3,0(r5)
10017d04:	10c0141e 	bne	r2,r3,10017d58 <strcmp+0x68>
10017d08:	027fbff4 	movhi	r9,65279
10017d0c:	4a7fbfc4 	addi	r9,r9,-257
10017d10:	0086303a 	nor	r3,zero,r2
10017d14:	02202074 	movhi	r8,32897
10017d18:	1245883a 	add	r2,r2,r9
10017d1c:	42202004 	addi	r8,r8,-32640
10017d20:	10c4703a 	and	r2,r2,r3
10017d24:	1204703a 	and	r2,r2,r8
10017d28:	10000226 	beq	r2,zero,10017d34 <strcmp+0x44>
10017d2c:	00001706 	br	10017d8c <strcmp+0x9c>
10017d30:	1000161e 	bne	r2,zero,10017d8c <strcmp+0x9c>
10017d34:	21000104 	addi	r4,r4,4
10017d38:	20c00017 	ldw	r3,0(r4)
10017d3c:	29400104 	addi	r5,r5,4
10017d40:	29800017 	ldw	r6,0(r5)
10017d44:	1a4f883a 	add	r7,r3,r9
10017d48:	00c4303a 	nor	r2,zero,r3
10017d4c:	3884703a 	and	r2,r7,r2
10017d50:	1204703a 	and	r2,r2,r8
10017d54:	19bff626 	beq	r3,r6,10017d30 <__alt_data_end+0xf0017d30>
10017d58:	20800007 	ldb	r2,0(r4)
10017d5c:	1000051e 	bne	r2,zero,10017d74 <strcmp+0x84>
10017d60:	00000606 	br	10017d7c <strcmp+0x8c>
10017d64:	21000044 	addi	r4,r4,1
10017d68:	20800007 	ldb	r2,0(r4)
10017d6c:	29400044 	addi	r5,r5,1
10017d70:	10000226 	beq	r2,zero,10017d7c <strcmp+0x8c>
10017d74:	28c00007 	ldb	r3,0(r5)
10017d78:	10fffa26 	beq	r2,r3,10017d64 <__alt_data_end+0xf0017d64>
10017d7c:	20800003 	ldbu	r2,0(r4)
10017d80:	28c00003 	ldbu	r3,0(r5)
10017d84:	10c5c83a 	sub	r2,r2,r3
10017d88:	f800283a 	ret
10017d8c:	0005883a 	mov	r2,zero
10017d90:	f800283a 	ret

10017d94 <_strtod_r>:
10017d94:	deffe104 	addi	sp,sp,-124
10017d98:	dd801b15 	stw	r22,108(sp)
10017d9c:	dc001515 	stw	r16,84(sp)
10017da0:	d9400615 	stw	r5,24(sp)
10017da4:	dfc01e15 	stw	ra,120(sp)
10017da8:	df001d15 	stw	fp,116(sp)
10017dac:	ddc01c15 	stw	r23,112(sp)
10017db0:	dd401a15 	stw	r21,104(sp)
10017db4:	dd001915 	stw	r20,100(sp)
10017db8:	dcc01815 	stw	r19,96(sp)
10017dbc:	dc801715 	stw	r18,92(sp)
10017dc0:	dc401615 	stw	r17,88(sp)
10017dc4:	2021883a 	mov	r16,r4
10017dc8:	2809883a 	mov	r4,r5
10017dcc:	20800003 	ldbu	r2,0(r4)
10017dd0:	01c40074 	movhi	r7,4097
10017dd4:	282d883a 	mov	r22,r5
10017dd8:	d9800c15 	stw	r6,48(sp)
10017ddc:	d8000815 	stw	zero,32(sp)
10017de0:	d8000715 	stw	zero,28(sp)
10017de4:	01400b44 	movi	r5,45
10017de8:	10c03fcc 	andi	r3,r2,255
10017dec:	39df8104 	addi	r7,r7,32260
10017df0:	28c0bc36 	bltu	r5,r3,100180e4 <_strtod_r+0x350>
10017df4:	180690ba 	slli	r3,r3,2
10017df8:	19c7883a 	add	r3,r3,r7
10017dfc:	18c00017 	ldw	r3,0(r3)
10017e00:	1800683a 	jmp	r3
10017e04:	10017ec4 	addi	zero,r2,1531
10017e08:	100180e4 	muli	zero,r2,1539
10017e0c:	100180e4 	muli	zero,r2,1539
10017e10:	100180e4 	muli	zero,r2,1539
10017e14:	100180e4 	muli	zero,r2,1539
10017e18:	100180e4 	muli	zero,r2,1539
10017e1c:	100180e4 	muli	zero,r2,1539
10017e20:	100180e4 	muli	zero,r2,1539
10017e24:	100180e4 	muli	zero,r2,1539
10017e28:	100180d0 	cmplti	zero,r2,1539
10017e2c:	100180d0 	cmplti	zero,r2,1539
10017e30:	100180d0 	cmplti	zero,r2,1539
10017e34:	100180d0 	cmplti	zero,r2,1539
10017e38:	100180d0 	cmplti	zero,r2,1539
10017e3c:	100180e4 	muli	zero,r2,1539
10017e40:	100180e4 	muli	zero,r2,1539
10017e44:	100180e4 	muli	zero,r2,1539
10017e48:	100180e4 	muli	zero,r2,1539
10017e4c:	100180e4 	muli	zero,r2,1539
10017e50:	100180e4 	muli	zero,r2,1539
10017e54:	100180e4 	muli	zero,r2,1539
10017e58:	100180e4 	muli	zero,r2,1539
10017e5c:	100180e4 	muli	zero,r2,1539
10017e60:	100180e4 	muli	zero,r2,1539
10017e64:	100180e4 	muli	zero,r2,1539
10017e68:	100180e4 	muli	zero,r2,1539
10017e6c:	100180e4 	muli	zero,r2,1539
10017e70:	100180e4 	muli	zero,r2,1539
10017e74:	100180e4 	muli	zero,r2,1539
10017e78:	100180e4 	muli	zero,r2,1539
10017e7c:	100180e4 	muli	zero,r2,1539
10017e80:	100180e4 	muli	zero,r2,1539
10017e84:	100180d0 	cmplti	zero,r2,1539
10017e88:	100180e4 	muli	zero,r2,1539
10017e8c:	100180e4 	muli	zero,r2,1539
10017e90:	100180e4 	muli	zero,r2,1539
10017e94:	100180e4 	muli	zero,r2,1539
10017e98:	100180e4 	muli	zero,r2,1539
10017e9c:	100180e4 	muli	zero,r2,1539
10017ea0:	100180e4 	muli	zero,r2,1539
10017ea4:	100180e4 	muli	zero,r2,1539
10017ea8:	100180e4 	muli	zero,r2,1539
10017eac:	100180e4 	muli	zero,r2,1539
10017eb0:	10017f24 	muli	zero,r2,1532
10017eb4:	100180e4 	muli	zero,r2,1539
10017eb8:	100180c4 	addi	zero,r2,1539
10017ebc:	00801244 	movi	r2,73
10017ec0:	98849c26 	beq	r19,r2,10019134 <_strtod_r+0x13a0>
10017ec4:	002b883a 	mov	r21,zero
10017ec8:	0023883a 	mov	r17,zero
10017ecc:	d8800c17 	ldw	r2,48(sp)
10017ed0:	10000626 	beq	r2,zero,10017eec <_strtod_r+0x158>
10017ed4:	d8001015 	stw	zero,64(sp)
10017ed8:	d8800c17 	ldw	r2,48(sp)
10017edc:	15800015 	stw	r22,0(r2)
10017ee0:	d8c01017 	ldw	r3,64(sp)
10017ee4:	18000126 	beq	r3,zero,10017eec <_strtod_r+0x158>
10017ee8:	8c60003c 	xorhi	r17,r17,32768
10017eec:	a805883a 	mov	r2,r21
10017ef0:	8807883a 	mov	r3,r17
10017ef4:	dfc01e17 	ldw	ra,120(sp)
10017ef8:	df001d17 	ldw	fp,116(sp)
10017efc:	ddc01c17 	ldw	r23,112(sp)
10017f00:	dd801b17 	ldw	r22,108(sp)
10017f04:	dd401a17 	ldw	r21,104(sp)
10017f08:	dd001917 	ldw	r20,100(sp)
10017f0c:	dcc01817 	ldw	r19,96(sp)
10017f10:	dc801717 	ldw	r18,92(sp)
10017f14:	dc401617 	ldw	r17,88(sp)
10017f18:	dc001517 	ldw	r16,84(sp)
10017f1c:	dec01f04 	addi	sp,sp,124
10017f20:	f800283a 	ret
10017f24:	d8001015 	stw	zero,64(sp)
10017f28:	24800044 	addi	r18,r4,1
10017f2c:	dc800615 	stw	r18,24(sp)
10017f30:	20800043 	ldbu	r2,1(r4)
10017f34:	10c03fcc 	andi	r3,r2,255
10017f38:	18c0201c 	xori	r3,r3,128
10017f3c:	18ffe004 	addi	r3,r3,-128
10017f40:	183fe026 	beq	r3,zero,10017ec4 <__alt_data_end+0xf0017ec4>
10017f44:	11403fcc 	andi	r5,r2,255
10017f48:	2940201c 	xori	r5,r5,128
10017f4c:	297fe004 	addi	r5,r5,-128
10017f50:	00c00c04 	movi	r3,48
10017f54:	28c0f226 	beq	r5,r3,10018320 <_strtod_r+0x58c>
10017f58:	0023883a 	mov	r17,zero
10017f5c:	10fff404 	addi	r3,r2,-48
10017f60:	18c03fcc 	andi	r3,r3,255
10017f64:	01800244 	movi	r6,9
10017f68:	30c3d336 	bltu	r6,r3,10018eb8 <_strtod_r+0x1124>
10017f6c:	91000044 	addi	r4,r18,1
10017f70:	002b883a 	mov	r21,zero
10017f74:	002f883a 	mov	r23,zero
10017f78:	0029883a 	mov	r20,zero
10017f7c:	02000204 	movi	r8,8
10017f80:	024003c4 	movi	r9,15
10017f84:	45005a16 	blt	r8,r20,100180f0 <_strtod_r+0x35c>
10017f88:	bdc002a4 	muli	r23,r23,10
10017f8c:	10803fcc 	andi	r2,r2,255
10017f90:	1080201c 	xori	r2,r2,128
10017f94:	10bfe004 	addi	r2,r2,-128
10017f98:	b885883a 	add	r2,r23,r2
10017f9c:	15fff404 	addi	r23,r2,-48
10017fa0:	d9000615 	stw	r4,24(sp)
10017fa4:	20800003 	ldbu	r2,0(r4)
10017fa8:	2039883a 	mov	fp,r4
10017fac:	a5000044 	addi	r20,r20,1
10017fb0:	10fff404 	addi	r3,r2,-48
10017fb4:	18c03fcc 	andi	r3,r3,255
10017fb8:	21000044 	addi	r4,r4,1
10017fbc:	30fff12e 	bgeu	r6,r3,10017f84 <__alt_data_end+0xf0017f84>
10017fc0:	14c03fcc 	andi	r19,r2,255
10017fc4:	9cc0201c 	xori	r19,r19,128
10017fc8:	9cffe004 	addi	r19,r19,-128
10017fcc:	8009883a 	mov	r4,r16
10017fd0:	00155200 	call	10015520 <_localeconv_r>
10017fd4:	11400017 	ldw	r5,0(r2)
10017fd8:	8009883a 	mov	r4,r16
10017fdc:	d9401315 	stw	r5,76(sp)
10017fe0:	00155200 	call	10015520 <_localeconv_r>
10017fe4:	11000017 	ldw	r4,0(r2)
10017fe8:	000cc400 	call	1000cc40 <strlen>
10017fec:	d9401317 	ldw	r5,76(sp)
10017ff0:	e009883a 	mov	r4,fp
10017ff4:	100d883a 	mov	r6,r2
10017ff8:	001d8400 	call	1001d840 <strncmp>
10017ffc:	1000d926 	beq	r2,zero,10018364 <_strtod_r+0x5d0>
10018000:	a039883a 	mov	fp,r20
10018004:	000b883a 	mov	r5,zero
10018008:	0011883a 	mov	r8,zero
1001800c:	0013883a 	mov	r9,zero
10018010:	00801944 	movi	r2,101
10018014:	98804426 	beq	r19,r2,10018128 <_strtod_r+0x394>
10018018:	00801144 	movi	r2,69
1001801c:	98804226 	beq	r19,r2,10018128 <_strtod_r+0x394>
10018020:	000f883a 	mov	r7,zero
10018024:	e0007f1e 	bne	fp,zero,10018224 <_strtod_r+0x490>
10018028:	2800391e 	bne	r5,zero,10018110 <_strtod_r+0x37c>
1001802c:	8800381e 	bne	r17,zero,10018110 <_strtod_r+0x37c>
10018030:	4800b71e 	bne	r9,zero,10018310 <_strtod_r+0x57c>
10018034:	00801384 	movi	r2,78
10018038:	98800526 	beq	r19,r2,10018050 <_strtod_r+0x2bc>
1001803c:	14ff9f0e 	bge	r2,r19,10017ebc <__alt_data_end+0xf0017ebc>
10018040:	00801a44 	movi	r2,105
10018044:	98843b26 	beq	r19,r2,10019134 <_strtod_r+0x13a0>
10018048:	00801b84 	movi	r2,110
1001804c:	98bf9d1e 	bne	r19,r2,10017ec4 <__alt_data_end+0xf0017ec4>
10018050:	014400b4 	movhi	r5,4098
10018054:	d9000617 	ldw	r4,24(sp)
10018058:	29555504 	addi	r5,r5,21844
1001805c:	01c00644 	movi	r7,25
10018060:	00000b06 	br	10018090 <_strtod_r+0x2fc>
10018064:	21000044 	addi	r4,r4,1
10018068:	20800003 	ldbu	r2,0(r4)
1001806c:	10ffefc4 	addi	r3,r2,-65
10018070:	10803fcc 	andi	r2,r2,255
10018074:	1080201c 	xori	r2,r2,128
10018078:	18c03fcc 	andi	r3,r3,255
1001807c:	10bfe004 	addi	r2,r2,-128
10018080:	38c00136 	bltu	r7,r3,10018088 <_strtod_r+0x2f4>
10018084:	10800804 	addi	r2,r2,32
10018088:	29400044 	addi	r5,r5,1
1001808c:	11bf8d1e 	bne	r2,r6,10017ec4 <__alt_data_end+0xf0017ec4>
10018090:	29800007 	ldb	r6,0(r5)
10018094:	303ff31e 	bne	r6,zero,10018064 <__alt_data_end+0xf0018064>
10018098:	20800044 	addi	r2,r4,1
1001809c:	d8800615 	stw	r2,24(sp)
100180a0:	20c00047 	ldb	r3,1(r4)
100180a4:	00800a04 	movi	r2,40
100180a8:	18846d26 	beq	r3,r2,10019260 <_strtod_r+0x14cc>
100180ac:	013ffe34 	movhi	r4,65528
100180b0:	d9000715 	stw	r4,28(sp)
100180b4:	d8000815 	stw	zero,32(sp)
100180b8:	dd400817 	ldw	r21,32(sp)
100180bc:	dc400717 	ldw	r17,28(sp)
100180c0:	00001506 	br	10018118 <_strtod_r+0x384>
100180c4:	00800044 	movi	r2,1
100180c8:	d8801015 	stw	r2,64(sp)
100180cc:	003f9606 	br	10017f28 <__alt_data_end+0xf0017f28>
100180d0:	21000044 	addi	r4,r4,1
100180d4:	d9000615 	stw	r4,24(sp)
100180d8:	20800003 	ldbu	r2,0(r4)
100180dc:	10c03fcc 	andi	r3,r2,255
100180e0:	28ff442e 	bgeu	r5,r3,10017df4 <__alt_data_end+0xf0017df4>
100180e4:	2025883a 	mov	r18,r4
100180e8:	d8001015 	stw	zero,64(sp)
100180ec:	003f9506 	br	10017f44 <__alt_data_end+0xf0017f44>
100180f0:	4d3fab16 	blt	r9,r20,10017fa0 <__alt_data_end+0xf0017fa0>
100180f4:	ad4002a4 	muli	r21,r21,10
100180f8:	10c03fcc 	andi	r3,r2,255
100180fc:	18c0201c 	xori	r3,r3,128
10018100:	18ffe004 	addi	r3,r3,-128
10018104:	a8eb883a 	add	r21,r21,r3
10018108:	ad7ff404 	addi	r21,r21,-48
1001810c:	003fa406 	br	10017fa0 <__alt_data_end+0xf0017fa0>
10018110:	002b883a 	mov	r21,zero
10018114:	0023883a 	mov	r17,zero
10018118:	d9000c17 	ldw	r4,48(sp)
1001811c:	203f7026 	beq	r4,zero,10017ee0 <__alt_data_end+0xf0017ee0>
10018120:	dd800617 	ldw	r22,24(sp)
10018124:	003f6c06 	br	10017ed8 <__alt_data_end+0xf0017ed8>
10018128:	e0007726 	beq	fp,zero,10018308 <_strtod_r+0x574>
1001812c:	dd800617 	ldw	r22,24(sp)
10018130:	00c00ac4 	movi	r3,43
10018134:	b0800044 	addi	r2,r22,1
10018138:	d8800615 	stw	r2,24(sp)
1001813c:	b0800047 	ldb	r2,1(r22)
10018140:	10c25726 	beq	r2,r3,10018aa0 <_strtod_r+0xd0c>
10018144:	00c00b44 	movi	r3,45
10018148:	10c25026 	beq	r2,r3,10018a8c <_strtod_r+0xcf8>
1001814c:	1027883a 	mov	r19,r2
10018150:	000f883a 	mov	r7,zero
10018154:	98fff404 	addi	r3,r19,-48
10018158:	01000244 	movi	r4,9
1001815c:	9805883a 	mov	r2,r19
10018160:	20c23836 	bltu	r4,r3,10018a44 <_strtod_r+0xcb0>
10018164:	00c00c04 	movi	r3,48
10018168:	98c0071e 	bne	r19,r3,10018188 <_strtod_r+0x3f4>
1001816c:	d8c00617 	ldw	r3,24(sp)
10018170:	18c00044 	addi	r3,r3,1
10018174:	d8c00615 	stw	r3,24(sp)
10018178:	18800007 	ldb	r2,0(r3)
1001817c:	18c00044 	addi	r3,r3,1
10018180:	14fffc26 	beq	r2,r19,10018174 <__alt_data_end+0xf0018174>
10018184:	1027883a 	mov	r19,r2
10018188:	10bff3c4 	addi	r2,r2,-49
1001818c:	00c00204 	movi	r3,8
10018190:	18bfa336 	bltu	r3,r2,10018020 <__alt_data_end+0xf0018020>
10018194:	db000617 	ldw	r12,24(sp)
10018198:	98bff404 	addi	r2,r19,-48
1001819c:	02c00244 	movi	r11,9
100181a0:	62800044 	addi	r10,r12,1
100181a4:	da800615 	stw	r10,24(sp)
100181a8:	64c00043 	ldbu	r19,1(r12)
100181ac:	98fff404 	addi	r3,r19,-48
100181b0:	9cc03fcc 	andi	r19,r19,255
100181b4:	9cc0201c 	xori	r19,r19,128
100181b8:	18c03fcc 	andi	r3,r3,255
100181bc:	9cffe004 	addi	r19,r19,-128
100181c0:	58c00e36 	bltu	r11,r3,100181fc <_strtod_r+0x468>
100181c4:	61000084 	addi	r4,r12,2
100181c8:	d9000615 	stw	r4,24(sp)
100181cc:	108002a4 	muli	r2,r2,10
100181d0:	21800003 	ldbu	r6,0(r4)
100181d4:	2015883a 	mov	r10,r4
100181d8:	14e7883a 	add	r19,r2,r19
100181dc:	30fff404 	addi	r3,r6,-48
100181e0:	98bff404 	addi	r2,r19,-48
100181e4:	34c03fcc 	andi	r19,r6,255
100181e8:	9cc0201c 	xori	r19,r19,128
100181ec:	18c03fcc 	andi	r3,r3,255
100181f0:	9cffe004 	addi	r19,r19,-128
100181f4:	21000044 	addi	r4,r4,1
100181f8:	58fff32e 	bgeu	r11,r3,100181c8 <__alt_data_end+0xf00181c8>
100181fc:	5315c83a 	sub	r10,r10,r12
10018200:	00c00204 	movi	r3,8
10018204:	1a832a16 	blt	r3,r10,10018eb0 <_strtod_r+0x111c>
10018208:	00d387c4 	movi	r3,19999
1001820c:	1880010e 	bge	r3,r2,10018214 <_strtod_r+0x480>
10018210:	1805883a 	mov	r2,r3
10018214:	01c7c83a 	sub	r3,zero,r7
10018218:	10c4f03a 	xor	r2,r2,r3
1001821c:	11cf883a 	add	r7,r2,r7
10018220:	e03f8126 	beq	fp,zero,10018028 <__alt_data_end+0xf0018028>
10018224:	3a11c83a 	sub	r8,r7,r8
10018228:	da000e15 	stw	r8,56(sp)
1001822c:	a000011e 	bne	r20,zero,10018234 <_strtod_r+0x4a0>
10018230:	e029883a 	mov	r20,fp
10018234:	00800404 	movi	r2,16
10018238:	e023883a 	mov	r17,fp
1001823c:	1700010e 	bge	r2,fp,10018244 <_strtod_r+0x4b0>
10018240:	1023883a 	mov	r17,r2
10018244:	b809883a 	mov	r4,r23
10018248:	0020f700 	call	10020f70 <__floatunsidf>
1001824c:	d8800815 	stw	r2,32(sp)
10018250:	d8c00715 	stw	r3,28(sp)
10018254:	00800244 	movi	r2,9
10018258:	1440150e 	bge	r2,r17,100182b0 <_strtod_r+0x51c>
1001825c:	88bffdc4 	addi	r2,r17,-9
10018260:	100490fa 	slli	r2,r2,3
10018264:	180b883a 	mov	r5,r3
10018268:	00c400b4 	movhi	r3,4098
1001826c:	18d52004 	addi	r3,r3,21632
10018270:	1885883a 	add	r2,r3,r2
10018274:	d9000817 	ldw	r4,32(sp)
10018278:	11800017 	ldw	r6,0(r2)
1001827c:	11c00117 	ldw	r7,4(r2)
10018280:	001fe240 	call	1001fe24 <__muldf3>
10018284:	a809883a 	mov	r4,r21
10018288:	102d883a 	mov	r22,r2
1001828c:	1827883a 	mov	r19,r3
10018290:	0020f700 	call	10020f70 <__floatunsidf>
10018294:	b009883a 	mov	r4,r22
10018298:	980b883a 	mov	r5,r19
1001829c:	100d883a 	mov	r6,r2
100182a0:	180f883a 	mov	r7,r3
100182a4:	001ea780 	call	1001ea78 <__adddf3>
100182a8:	d8800815 	stw	r2,32(sp)
100182ac:	d8c00715 	stw	r3,28(sp)
100182b0:	008003c4 	movi	r2,15
100182b4:	17004916 	blt	r2,fp,100183dc <_strtod_r+0x648>
100182b8:	d8c00e17 	ldw	r3,56(sp)
100182bc:	183f7e26 	beq	r3,zero,100180b8 <__alt_data_end+0xf00180b8>
100182c0:	d9000e17 	ldw	r4,56(sp)
100182c4:	0103730e 	bge	zero,r4,10019094 <_strtod_r+0x1300>
100182c8:	00c00584 	movi	r3,22
100182cc:	19030216 	blt	r3,r4,10018ed8 <_strtod_r+0x1144>
100182d0:	200490fa 	slli	r2,r4,3
100182d4:	00c400b4 	movhi	r3,4098
100182d8:	18d52004 	addi	r3,r3,21632
100182dc:	1885883a 	add	r2,r3,r2
100182e0:	d9800817 	ldw	r6,32(sp)
100182e4:	d9c00717 	ldw	r7,28(sp)
100182e8:	11000017 	ldw	r4,0(r2)
100182ec:	11400117 	ldw	r5,4(r2)
100182f0:	001fe240 	call	1001fe24 <__muldf3>
100182f4:	102b883a 	mov	r21,r2
100182f8:	1823883a 	mov	r17,r3
100182fc:	003f8606 	br	10018118 <__alt_data_end+0xf0018118>
10018300:	0011883a 	mov	r8,zero
10018304:	02400044 	movi	r9,1
10018308:	2800031e 	bne	r5,zero,10018318 <_strtod_r+0x584>
1001830c:	8800021e 	bne	r17,zero,10018318 <_strtod_r+0x584>
10018310:	002b883a 	mov	r21,zero
10018314:	003eed06 	br	10017ecc <__alt_data_end+0xf0017ecc>
10018318:	0039883a 	mov	fp,zero
1001831c:	003f8306 	br	1001812c <__alt_data_end+0xf001812c>
10018320:	90800047 	ldb	r2,1(r18)
10018324:	00c01604 	movi	r3,88
10018328:	10c21d26 	beq	r2,r3,10018ba0 <_strtod_r+0xe0c>
1001832c:	00c01e04 	movi	r3,120
10018330:	10c21b26 	beq	r2,r3,10018ba0 <_strtod_r+0xe0c>
10018334:	90c00044 	addi	r3,r18,1
10018338:	1825883a 	mov	r18,r3
1001833c:	d8c00615 	stw	r3,24(sp)
10018340:	18c00044 	addi	r3,r3,1
10018344:	18bfffc3 	ldbu	r2,-1(r3)
10018348:	11003fcc 	andi	r4,r2,255
1001834c:	2100201c 	xori	r4,r4,128
10018350:	213fe004 	addi	r4,r4,-128
10018354:	217ff826 	beq	r4,r5,10018338 <__alt_data_end+0xf0018338>
10018358:	203f6d26 	beq	r4,zero,10018110 <__alt_data_end+0xf0018110>
1001835c:	04400044 	movi	r17,1
10018360:	003efe06 	br	10017f5c <__alt_data_end+0xf0017f5c>
10018364:	8009883a 	mov	r4,r16
10018368:	00155200 	call	10015520 <_localeconv_r>
1001836c:	11000017 	ldw	r4,0(r2)
10018370:	000cc400 	call	1000cc40 <strlen>
10018374:	d9000617 	ldw	r4,24(sp)
10018378:	2085883a 	add	r2,r4,r2
1001837c:	d8800615 	stw	r2,24(sp)
10018380:	14c00007 	ldb	r19,0(r2)
10018384:	a001b21e 	bne	r20,zero,10018a50 <_strtod_r+0xcbc>
10018388:	00c00c04 	movi	r3,48
1001838c:	98c3931e 	bne	r19,r3,100191dc <_strtod_r+0x1448>
10018390:	10c00044 	addi	r3,r2,1
10018394:	9809883a 	mov	r4,r19
10018398:	d8c00615 	stw	r3,24(sp)
1001839c:	1cc00007 	ldb	r19,0(r3)
100183a0:	188bc83a 	sub	r5,r3,r2
100183a4:	18c00044 	addi	r3,r3,1
100183a8:	993ffb26 	beq	r19,r4,10018398 <__alt_data_end+0xf0018398>
100183ac:	98bff3c4 	addi	r2,r19,-49
100183b0:	00c00204 	movi	r3,8
100183b4:	1881ee36 	bltu	r3,r2,10018b70 <_strtod_r+0xddc>
100183b8:	dc800617 	ldw	r18,24(sp)
100183bc:	9cfff404 	addi	r19,r19,-48
100183c0:	2a000044 	addi	r8,r5,1
100183c4:	9009883a 	mov	r4,r18
100183c8:	07000044 	movi	fp,1
100183cc:	b88002a4 	muli	r2,r23,10
100183d0:	000b883a 	mov	r5,zero
100183d4:	98af883a 	add	r23,r19,r2
100183d8:	0001a806 	br	10018a7c <_strtod_r+0xce8>
100183dc:	d9000e17 	ldw	r4,56(sp)
100183e0:	e463c83a 	sub	r17,fp,r17
100183e4:	2463883a 	add	r17,r4,r17
100183e8:	0442670e 	bge	zero,r17,10018d88 <_strtod_r+0xff4>
100183ec:	888003cc 	andi	r2,r17,15
100183f0:	10000b26 	beq	r2,zero,10018420 <_strtod_r+0x68c>
100183f4:	100490fa 	slli	r2,r2,3
100183f8:	00c400b4 	movhi	r3,4098
100183fc:	18d52004 	addi	r3,r3,21632
10018400:	1885883a 	add	r2,r3,r2
10018404:	d9800817 	ldw	r6,32(sp)
10018408:	d9c00717 	ldw	r7,28(sp)
1001840c:	11000017 	ldw	r4,0(r2)
10018410:	11400117 	ldw	r5,4(r2)
10018414:	001fe240 	call	1001fe24 <__muldf3>
10018418:	d8800815 	stw	r2,32(sp)
1001841c:	d8c00715 	stw	r3,28(sp)
10018420:	04fffc04 	movi	r19,-16
10018424:	8ce2703a 	and	r17,r17,r19
10018428:	8801a11e 	bne	r17,zero,10018ab0 <_strtod_r+0xd1c>
1001842c:	dd400817 	ldw	r21,32(sp)
10018430:	dc400717 	ldw	r17,28(sp)
10018434:	d8001215 	stw	zero,72(sp)
10018438:	8009883a 	mov	r4,r16
1001843c:	ddc00015 	stw	r23,0(sp)
10018440:	900b883a 	mov	r5,r18
10018444:	a00d883a 	mov	r6,r20
10018448:	e00f883a 	mov	r7,fp
1001844c:	00165180 	call	10016518 <__s2b>
10018450:	d8800d15 	stw	r2,52(sp)
10018454:	d8800e17 	ldw	r2,56(sp)
10018458:	d9000d17 	ldw	r4,52(sp)
1001845c:	dd801217 	ldw	r22,72(sp)
10018460:	1007d7fa 	srai	r3,r2,31
10018464:	0085c83a 	sub	r2,zero,r2
10018468:	21000304 	addi	r4,r4,12
1001846c:	1886703a 	and	r3,r3,r2
10018470:	d9001115 	stw	r4,68(sp)
10018474:	d8c00915 	stw	r3,36(sp)
10018478:	d8800d17 	ldw	r2,52(sp)
1001847c:	8009883a 	mov	r4,r16
10018480:	0029883a 	mov	r20,zero
10018484:	11400117 	ldw	r5,4(r2)
10018488:	00163340 	call	10016334 <_Balloc>
1001848c:	d8c00d17 	ldw	r3,52(sp)
10018490:	d9401117 	ldw	r5,68(sp)
10018494:	11000304 	addi	r4,r2,12
10018498:	19800417 	ldw	r6,16(r3)
1001849c:	1027883a 	mov	r19,r2
100184a0:	31800084 	addi	r6,r6,2
100184a4:	318d883a 	add	r6,r6,r6
100184a8:	318d883a 	add	r6,r6,r6
100184ac:	000c7840 	call	1000c784 <memcpy>
100184b0:	d8800204 	addi	r2,sp,8
100184b4:	8009883a 	mov	r4,r16
100184b8:	a80b883a 	mov	r5,r21
100184bc:	880d883a 	mov	r6,r17
100184c0:	d9c00404 	addi	r7,sp,16
100184c4:	d8800015 	stw	r2,0(sp)
100184c8:	0016f680 	call	10016f68 <__d2b>
100184cc:	8009883a 	mov	r4,r16
100184d0:	01400044 	movi	r5,1
100184d4:	d8800515 	stw	r2,20(sp)
100184d8:	00167340 	call	10016734 <__i2b>
100184dc:	d8c00e17 	ldw	r3,56(sp)
100184e0:	1025883a 	mov	r18,r2
100184e4:	00c0010e 	bge	zero,r3,100184ec <_strtod_r+0x758>
100184e8:	1829883a 	mov	r20,r3
100184ec:	d8800417 	ldw	r2,16(sp)
100184f0:	1000dc16 	blt	r2,zero,10018864 <_strtod_r+0xad0>
100184f4:	d9000917 	ldw	r4,36(sp)
100184f8:	a02f883a 	mov	r23,r20
100184fc:	20b9883a 	add	fp,r4,r2
10018500:	d9000217 	ldw	r4,8(sp)
10018504:	1585c83a 	sub	r2,r2,r22
10018508:	00ff00c4 	movi	r3,-1021
1001850c:	110b883a 	add	r5,r2,r4
10018510:	28c09e0e 	bge	r5,r3,1001878c <_strtod_r+0x9f8>
10018514:	10810cc4 	addi	r2,r2,1075
10018518:	e087883a 	add	r3,fp,r2
1001851c:	b885883a 	add	r2,r23,r2
10018520:	15af883a 	add	r23,r2,r22
10018524:	1805883a 	mov	r2,r3
10018528:	e0c0010e 	bge	fp,r3,10018530 <_strtod_r+0x79c>
1001852c:	e005883a 	mov	r2,fp
10018530:	b880010e 	bge	r23,r2,10018538 <_strtod_r+0x7a4>
10018534:	b805883a 	mov	r2,r23
10018538:	0080030e 	bge	zero,r2,10018548 <_strtod_r+0x7b4>
1001853c:	1887c83a 	sub	r3,r3,r2
10018540:	b8afc83a 	sub	r23,r23,r2
10018544:	e0b9c83a 	sub	fp,fp,r2
10018548:	d8800917 	ldw	r2,36(sp)
1001854c:	10001126 	beq	r2,zero,10018594 <_strtod_r+0x800>
10018550:	900b883a 	mov	r5,r18
10018554:	100d883a 	mov	r6,r2
10018558:	8009883a 	mov	r4,r16
1001855c:	d8c01415 	stw	r3,80(sp)
10018560:	001696c0 	call	1001696c <__pow5mult>
10018564:	d9800517 	ldw	r6,20(sp)
10018568:	8009883a 	mov	r4,r16
1001856c:	100b883a 	mov	r5,r2
10018570:	1025883a 	mov	r18,r2
10018574:	00167700 	call	10016770 <__multiply>
10018578:	d9400517 	ldw	r5,20(sp)
1001857c:	8009883a 	mov	r4,r16
10018580:	d8801315 	stw	r2,76(sp)
10018584:	00163dc0 	call	100163dc <_Bfree>
10018588:	d8801317 	ldw	r2,76(sp)
1001858c:	d8c01417 	ldw	r3,80(sp)
10018590:	d8800515 	stw	r2,20(sp)
10018594:	00c0050e 	bge	zero,r3,100185ac <_strtod_r+0x818>
10018598:	d9400517 	ldw	r5,20(sp)
1001859c:	8009883a 	mov	r4,r16
100185a0:	180d883a 	mov	r6,r3
100185a4:	0016aac0 	call	10016aac <__lshift>
100185a8:	d8800515 	stw	r2,20(sp)
100185ac:	a0000526 	beq	r20,zero,100185c4 <_strtod_r+0x830>
100185b0:	980b883a 	mov	r5,r19
100185b4:	8009883a 	mov	r4,r16
100185b8:	a00d883a 	mov	r6,r20
100185bc:	001696c0 	call	1001696c <__pow5mult>
100185c0:	1027883a 	mov	r19,r2
100185c4:	05c0050e 	bge	zero,r23,100185dc <_strtod_r+0x848>
100185c8:	980b883a 	mov	r5,r19
100185cc:	8009883a 	mov	r4,r16
100185d0:	b80d883a 	mov	r6,r23
100185d4:	0016aac0 	call	10016aac <__lshift>
100185d8:	1027883a 	mov	r19,r2
100185dc:	0700050e 	bge	zero,fp,100185f4 <_strtod_r+0x860>
100185e0:	900b883a 	mov	r5,r18
100185e4:	8009883a 	mov	r4,r16
100185e8:	e00d883a 	mov	r6,fp
100185ec:	0016aac0 	call	10016aac <__lshift>
100185f0:	1025883a 	mov	r18,r2
100185f4:	d9400517 	ldw	r5,20(sp)
100185f8:	8009883a 	mov	r4,r16
100185fc:	980d883a 	mov	r6,r19
10018600:	0016c540 	call	10016c54 <__mdiff>
10018604:	10c00317 	ldw	r3,12(r2)
10018608:	1009883a 	mov	r4,r2
1001860c:	10000315 	stw	zero,12(r2)
10018610:	900b883a 	mov	r5,r18
10018614:	1029883a 	mov	r20,r2
10018618:	d8c00b15 	stw	r3,44(sp)
1001861c:	0016bf40 	call	10016bf4 <__mcmp>
10018620:	10017316 	blt	r2,zero,10018bf0 <_strtod_r+0xe5c>
10018624:	1001b526 	beq	r2,zero,10018cfc <_strtod_r+0xf68>
10018628:	a009883a 	mov	r4,r20
1001862c:	900b883a 	mov	r5,r18
10018630:	00170a40 	call	100170a4 <__ratio>
10018634:	1009883a 	mov	r4,r2
10018638:	180b883a 	mov	r5,r3
1001863c:	000d883a 	mov	r6,zero
10018640:	01d00034 	movhi	r7,16384
10018644:	182f883a 	mov	r23,r3
10018648:	d8801315 	stw	r2,76(sp)
1001864c:	001fd440 	call	1001fd44 <__ledf2>
10018650:	da001317 	ldw	r8,76(sp)
10018654:	00805016 	blt	zero,r2,10018798 <_strtod_r+0xa04>
10018658:	d9000b17 	ldw	r4,44(sp)
1001865c:	20008426 	beq	r4,zero,10018870 <_strtod_r+0xadc>
10018660:	05cffc34 	movhi	r23,16368
10018664:	0039883a 	mov	fp,zero
10018668:	d8000f15 	stw	zero,60(sp)
1001866c:	ddc00a15 	stw	r23,40(sp)
10018670:	d8800717 	ldw	r2,28(sp)
10018674:	125ffc2c 	andhi	r9,r2,32752
10018678:	009ff834 	movhi	r2,32736
1001867c:	48805626 	beq	r9,r2,100187d8 <_strtod_r+0xa44>
10018680:	b0001e26 	beq	r22,zero,100186fc <_strtod_r+0x968>
10018684:	0081a834 	movhi	r2,1696
10018688:	12401c36 	bltu	r2,r9,100186fc <_strtod_r+0x968>
1001868c:	d9000f17 	ldw	r4,60(sp)
10018690:	d9400a17 	ldw	r5,40(sp)
10018694:	01d07834 	movhi	r7,16864
10018698:	39ffffc4 	addi	r7,r7,-1
1001869c:	01bff034 	movhi	r6,65472
100186a0:	da401315 	stw	r9,76(sp)
100186a4:	001fd440 	call	1001fd44 <__ledf2>
100186a8:	da401317 	ldw	r9,76(sp)
100186ac:	00801016 	blt	zero,r2,100186f0 <_strtod_r+0x95c>
100186b0:	d9000f17 	ldw	r4,60(sp)
100186b4:	d9400a17 	ldw	r5,40(sp)
100186b8:	001dcd00 	call	1001dcd0 <__fixunsdfsi>
100186bc:	da401317 	ldw	r9,76(sp)
100186c0:	1000dc26 	beq	r2,zero,10018a34 <_strtod_r+0xca0>
100186c4:	1009883a 	mov	r4,r2
100186c8:	0020f700 	call	10020f70 <__floatunsidf>
100186cc:	da401317 	ldw	r9,76(sp)
100186d0:	d8800f15 	stw	r2,60(sp)
100186d4:	d8c00a15 	stw	r3,40(sp)
100186d8:	d8c00b17 	ldw	r3,44(sp)
100186dc:	1800d31e 	bne	r3,zero,10018a2c <_strtod_r+0xc98>
100186e0:	d9000a17 	ldw	r4,40(sp)
100186e4:	2220003c 	xorhi	r8,r4,32768
100186e8:	df000f17 	ldw	fp,60(sp)
100186ec:	402f883a 	mov	r23,r8
100186f0:	0081ac34 	movhi	r2,1712
100186f4:	b891883a 	add	r8,r23,r2
100186f8:	426fc83a 	sub	r23,r8,r9
100186fc:	a809883a 	mov	r4,r21
10018700:	880b883a 	mov	r5,r17
10018704:	da401315 	stw	r9,76(sp)
10018708:	0016dec0 	call	10016dec <__ulp>
1001870c:	b80b883a 	mov	r5,r23
10018710:	e009883a 	mov	r4,fp
10018714:	100d883a 	mov	r6,r2
10018718:	180f883a 	mov	r7,r3
1001871c:	001fe240 	call	1001fe24 <__muldf3>
10018720:	a809883a 	mov	r4,r21
10018724:	880b883a 	mov	r5,r17
10018728:	100d883a 	mov	r6,r2
1001872c:	180f883a 	mov	r7,r3
10018730:	001ea780 	call	1001ea78 <__adddf3>
10018734:	da401317 	ldw	r9,76(sp)
10018738:	102b883a 	mov	r21,r2
1001873c:	1823883a 	mov	r17,r3
10018740:	d8800815 	stw	r2,32(sp)
10018744:	d8c00715 	stw	r3,28(sp)
10018748:	182f883a 	mov	r23,r3
1001874c:	b000021e 	bne	r22,zero,10018758 <_strtod_r+0x9c4>
10018750:	b89ffc2c 	andhi	r2,r23,32752
10018754:	48806e26 	beq	r9,r2,10018910 <_strtod_r+0xb7c>
10018758:	d9400517 	ldw	r5,20(sp)
1001875c:	8009883a 	mov	r4,r16
10018760:	00163dc0 	call	100163dc <_Bfree>
10018764:	8009883a 	mov	r4,r16
10018768:	980b883a 	mov	r5,r19
1001876c:	00163dc0 	call	100163dc <_Bfree>
10018770:	8009883a 	mov	r4,r16
10018774:	900b883a 	mov	r5,r18
10018778:	00163dc0 	call	100163dc <_Bfree>
1001877c:	8009883a 	mov	r4,r16
10018780:	a00b883a 	mov	r5,r20
10018784:	00163dc0 	call	100163dc <_Bfree>
10018788:	003f3b06 	br	10018478 <__alt_data_end+0xf0018478>
1001878c:	00c00d84 	movi	r3,54
10018790:	1905c83a 	sub	r2,r3,r4
10018794:	003f6006 	br	10018518 <__alt_data_end+0xf0018518>
10018798:	4009883a 	mov	r4,r8
1001879c:	b80b883a 	mov	r5,r23
100187a0:	000d883a 	mov	r6,zero
100187a4:	01cff834 	movhi	r7,16352
100187a8:	001fe240 	call	1001fe24 <__muldf3>
100187ac:	d9000b17 	ldw	r4,44(sp)
100187b0:	d8800f15 	stw	r2,60(sp)
100187b4:	d8c00a15 	stw	r3,40(sp)
100187b8:	2000481e 	bne	r4,zero,100188dc <_strtod_r+0xb48>
100187bc:	1a20003c 	xorhi	r8,r3,32768
100187c0:	1039883a 	mov	fp,r2
100187c4:	d8800717 	ldw	r2,28(sp)
100187c8:	402f883a 	mov	r23,r8
100187cc:	125ffc2c 	andhi	r9,r2,32752
100187d0:	009ff834 	movhi	r2,32736
100187d4:	48bfaa1e 	bne	r9,r2,10018680 <__alt_data_end+0xf0018680>
100187d8:	d8c00717 	ldw	r3,28(sp)
100187dc:	00bf2c34 	movhi	r2,64688
100187e0:	d9000817 	ldw	r4,32(sp)
100187e4:	1887883a 	add	r3,r3,r2
100187e8:	180b883a 	mov	r5,r3
100187ec:	da401315 	stw	r9,76(sp)
100187f0:	d8c00715 	stw	r3,28(sp)
100187f4:	0016dec0 	call	10016dec <__ulp>
100187f8:	e009883a 	mov	r4,fp
100187fc:	b80b883a 	mov	r5,r23
10018800:	100d883a 	mov	r6,r2
10018804:	180f883a 	mov	r7,r3
10018808:	001fe240 	call	1001fe24 <__muldf3>
1001880c:	d9000817 	ldw	r4,32(sp)
10018810:	d9400717 	ldw	r5,28(sp)
10018814:	100d883a 	mov	r6,r2
10018818:	180f883a 	mov	r7,r3
1001881c:	001ea780 	call	1001ea78 <__adddf3>
10018820:	011f2834 	movhi	r4,31904
10018824:	d8800815 	stw	r2,32(sp)
10018828:	213fffc4 	addi	r4,r4,-1
1001882c:	189ffc2c 	andhi	r2,r3,32752
10018830:	da401317 	ldw	r9,76(sp)
10018834:	2080762e 	bgeu	r4,r2,10018a10 <_strtod_r+0xc7c>
10018838:	009ffc34 	movhi	r2,32752
1001883c:	10bfffc4 	addi	r2,r2,-1
10018840:	88814426 	beq	r17,r2,10018d54 <_strtod_r+0xfc0>
10018844:	00dffc34 	movhi	r3,32752
10018848:	18ffffc4 	addi	r3,r3,-1
1001884c:	013fffc4 	movi	r4,-1
10018850:	d8c00715 	stw	r3,28(sp)
10018854:	d9000815 	stw	r4,32(sp)
10018858:	202b883a 	mov	r21,r4
1001885c:	1823883a 	mov	r17,r3
10018860:	003fbd06 	br	10018758 <__alt_data_end+0xf0018758>
10018864:	a0afc83a 	sub	r23,r20,r2
10018868:	df000917 	ldw	fp,36(sp)
1001886c:	003f2406 	br	10018500 <__alt_data_end+0xf0018500>
10018870:	d8800817 	ldw	r2,32(sp)
10018874:	10001b1e 	bne	r2,zero,100188e4 <_strtod_r+0xb50>
10018878:	d8c00717 	ldw	r3,28(sp)
1001887c:	01000434 	movhi	r4,16
10018880:	213fffc4 	addi	r4,r4,-1
10018884:	1904703a 	and	r2,r3,r4
10018888:	10001b1e 	bne	r2,zero,100188f8 <_strtod_r+0xb64>
1001888c:	4009883a 	mov	r4,r8
10018890:	b80b883a 	mov	r5,r23
10018894:	000d883a 	mov	r6,zero
10018898:	01cffc34 	movhi	r7,16368
1001889c:	da001315 	stw	r8,76(sp)
100188a0:	001fd440 	call	1001fd44 <__ledf2>
100188a4:	da001317 	ldw	r8,76(sp)
100188a8:	10017b16 	blt	r2,zero,10018e98 <_strtod_r+0x1104>
100188ac:	4009883a 	mov	r4,r8
100188b0:	b80b883a 	mov	r5,r23
100188b4:	000d883a 	mov	r6,zero
100188b8:	01cff834 	movhi	r7,16352
100188bc:	001fe240 	call	1001fe24 <__muldf3>
100188c0:	d8800f15 	stw	r2,60(sp)
100188c4:	d8c00a15 	stw	r3,40(sp)
100188c8:	102f883a 	mov	r23,r2
100188cc:	1a20003c 	xorhi	r8,r3,32768
100188d0:	b839883a 	mov	fp,r23
100188d4:	402f883a 	mov	r23,r8
100188d8:	003f6506 	br	10018670 <__alt_data_end+0xf0018670>
100188dc:	da000a17 	ldw	r8,40(sp)
100188e0:	003fb706 	br	100187c0 <__alt_data_end+0xf00187c0>
100188e4:	d8c00817 	ldw	r3,32(sp)
100188e8:	00800044 	movi	r2,1
100188ec:	1880021e 	bne	r3,r2,100188f8 <_strtod_r+0xb64>
100188f0:	d9000717 	ldw	r4,28(sp)
100188f4:	2000a426 	beq	r4,zero,10018b88 <_strtod_r+0xdf4>
100188f8:	008ffc34 	movhi	r2,16368
100188fc:	0039883a 	mov	fp,zero
10018900:	05effc34 	movhi	r23,49136
10018904:	d8000f15 	stw	zero,60(sp)
10018908:	d8800a15 	stw	r2,40(sp)
1001890c:	003f5806 	br	10018670 <__alt_data_end+0xf0018670>
10018910:	d9400a17 	ldw	r5,40(sp)
10018914:	d9000f17 	ldw	r4,60(sp)
10018918:	0020e180 	call	10020e18 <__fixdfsi>
1001891c:	1009883a 	mov	r4,r2
10018920:	0020ea00 	call	10020ea0 <__floatsidf>
10018924:	d9000f17 	ldw	r4,60(sp)
10018928:	d9400a17 	ldw	r5,40(sp)
1001892c:	100d883a 	mov	r6,r2
10018930:	180f883a 	mov	r7,r3
10018934:	00205480 	call	10020548 <__subdf3>
10018938:	1011883a 	mov	r8,r2
1001893c:	d8800b17 	ldw	r2,44(sp)
10018940:	10001f1e 	bne	r2,zero,100189c0 <_strtod_r+0xc2c>
10018944:	d9000817 	ldw	r4,32(sp)
10018948:	20001d1e 	bne	r4,zero,100189c0 <_strtod_r+0xc2c>
1001894c:	00800434 	movhi	r2,16
10018950:	10bfffc4 	addi	r2,r2,-1
10018954:	b8ae703a 	and	r23,r23,r2
10018958:	b800191e 	bne	r23,zero,100189c0 <_strtod_r+0xc2c>
1001895c:	01a52834 	movhi	r6,38048
10018960:	01cff434 	movhi	r7,16336
10018964:	318d6544 	addi	r6,r6,13717
10018968:	39ffffc4 	addi	r7,r7,-1
1001896c:	4009883a 	mov	r4,r8
10018970:	180b883a 	mov	r5,r3
10018974:	001fd440 	call	1001fd44 <__ledf2>
10018978:	103f770e 	bge	r2,zero,10018758 <__alt_data_end+0xf0018758>
1001897c:	a02d883a 	mov	r22,r20
10018980:	d9400517 	ldw	r5,20(sp)
10018984:	8009883a 	mov	r4,r16
10018988:	00163dc0 	call	100163dc <_Bfree>
1001898c:	8009883a 	mov	r4,r16
10018990:	980b883a 	mov	r5,r19
10018994:	00163dc0 	call	100163dc <_Bfree>
10018998:	8009883a 	mov	r4,r16
1001899c:	900b883a 	mov	r5,r18
100189a0:	00163dc0 	call	100163dc <_Bfree>
100189a4:	d9400d17 	ldw	r5,52(sp)
100189a8:	8009883a 	mov	r4,r16
100189ac:	00163dc0 	call	100163dc <_Bfree>
100189b0:	8009883a 	mov	r4,r16
100189b4:	b00b883a 	mov	r5,r22
100189b8:	00163dc0 	call	100163dc <_Bfree>
100189bc:	003dd606 	br	10018118 <__alt_data_end+0xf0018118>
100189c0:	01a52834 	movhi	r6,38048
100189c4:	01cff834 	movhi	r7,16352
100189c8:	4009883a 	mov	r4,r8
100189cc:	180b883a 	mov	r5,r3
100189d0:	318d6544 	addi	r6,r6,13717
100189d4:	39ffffc4 	addi	r7,r7,-1
100189d8:	d8c01415 	stw	r3,80(sp)
100189dc:	da001315 	stw	r8,76(sp)
100189e0:	001fd440 	call	1001fd44 <__ledf2>
100189e4:	d8c01417 	ldw	r3,80(sp)
100189e8:	da001317 	ldw	r8,76(sp)
100189ec:	103fe316 	blt	r2,zero,1001897c <__alt_data_end+0xf001897c>
100189f0:	018d6c34 	movhi	r6,13744
100189f4:	31b94d44 	addi	r6,r6,-6859
100189f8:	4009883a 	mov	r4,r8
100189fc:	180b883a 	mov	r5,r3
10018a00:	01cff834 	movhi	r7,16352
10018a04:	001fc640 	call	1001fc64 <__gedf2>
10018a08:	00bf530e 	bge	zero,r2,10018758 <__alt_data_end+0xf0018758>
10018a0c:	003fdb06 	br	1001897c <__alt_data_end+0xf001897c>
10018a10:	0080d434 	movhi	r2,848
10018a14:	1887883a 	add	r3,r3,r2
10018a18:	d8c00715 	stw	r3,28(sp)
10018a1c:	182f883a 	mov	r23,r3
10018a20:	dd400817 	ldw	r21,32(sp)
10018a24:	1823883a 	mov	r17,r3
10018a28:	003f4806 	br	1001874c <__alt_data_end+0xf001874c>
10018a2c:	da000a17 	ldw	r8,40(sp)
10018a30:	003f2d06 	br	100186e8 <__alt_data_end+0xf00186e8>
10018a34:	008ffc34 	movhi	r2,16368
10018a38:	d8000f15 	stw	zero,60(sp)
10018a3c:	d8800a15 	stw	r2,40(sp)
10018a40:	003f2506 	br	100186d8 <__alt_data_end+0xf00186d8>
10018a44:	dd800615 	stw	r22,24(sp)
10018a48:	000f883a 	mov	r7,zero
10018a4c:	003d7506 	br	10018024 <__alt_data_end+0xf0018024>
10018a50:	a039883a 	mov	fp,r20
10018a54:	000b883a 	mov	r5,zero
10018a58:	0011883a 	mov	r8,zero
10018a5c:	99bff404 	addi	r6,r19,-48
10018a60:	00800244 	movi	r2,9
10018a64:	11801036 	bltu	r2,r6,10018aa8 <_strtod_r+0xd14>
10018a68:	28c00044 	addi	r3,r5,1
10018a6c:	3027883a 	mov	r19,r6
10018a70:	3001331e 	bne	r6,zero,10018f40 <_strtod_r+0x11ac>
10018a74:	d9000617 	ldw	r4,24(sp)
10018a78:	180b883a 	mov	r5,r3
10018a7c:	20800044 	addi	r2,r4,1
10018a80:	d8800615 	stw	r2,24(sp)
10018a84:	24c00047 	ldb	r19,1(r4)
10018a88:	003ff406 	br	10018a5c <__alt_data_end+0xf0018a5c>
10018a8c:	01c00044 	movi	r7,1
10018a90:	b0800084 	addi	r2,r22,2
10018a94:	d8800615 	stw	r2,24(sp)
10018a98:	b4c00087 	ldb	r19,2(r22)
10018a9c:	003dad06 	br	10018154 <__alt_data_end+0xf0018154>
10018aa0:	000f883a 	mov	r7,zero
10018aa4:	003ffa06 	br	10018a90 <__alt_data_end+0xf0018a90>
10018aa8:	02400044 	movi	r9,1
10018aac:	003d5806 	br	10018010 <__alt_data_end+0xf0018010>
10018ab0:	00804d04 	movi	r2,308
10018ab4:	1440af16 	blt	r2,r17,10018d74 <_strtod_r+0xfe0>
10018ab8:	8827d13a 	srai	r19,r17,4
10018abc:	05800044 	movi	r22,1
10018ac0:	044400b4 	movhi	r17,4098
10018ac4:	8c551604 	addi	r17,r17,21592
10018ac8:	b4c1db0e 	bge	r22,r19,10019238 <_strtod_r+0x14a4>
10018acc:	d8800817 	ldw	r2,32(sp)
10018ad0:	d8c00717 	ldw	r3,28(sp)
10018ad4:	002b883a 	mov	r21,zero
10018ad8:	9980004c 	andi	r6,r19,1
10018adc:	30000726 	beq	r6,zero,10018afc <_strtod_r+0xd68>
10018ae0:	a80c90fa 	slli	r6,r21,3
10018ae4:	1009883a 	mov	r4,r2
10018ae8:	180b883a 	mov	r5,r3
10018aec:	8985883a 	add	r2,r17,r6
10018af0:	11800017 	ldw	r6,0(r2)
10018af4:	11c00117 	ldw	r7,4(r2)
10018af8:	001fe240 	call	1001fe24 <__muldf3>
10018afc:	9827d07a 	srai	r19,r19,1
10018b00:	ad400044 	addi	r21,r21,1
10018b04:	9dbff41e 	bne	r19,r22,10018ad8 <__alt_data_end+0xf0018ad8>
10018b08:	d8800815 	stw	r2,32(sp)
10018b0c:	d8c00715 	stw	r3,28(sp)
10018b10:	a82a90fa 	slli	r21,r21,3
10018b14:	d8800717 	ldw	r2,28(sp)
10018b18:	d9800817 	ldw	r6,32(sp)
10018b1c:	8d63883a 	add	r17,r17,r21
10018b20:	89000017 	ldw	r4,0(r17)
10018b24:	89400117 	ldw	r5,4(r17)
10018b28:	01ff2c34 	movhi	r7,64688
10018b2c:	11cf883a 	add	r7,r2,r7
10018b30:	001fe240 	call	1001fe24 <__muldf3>
10018b34:	d8800815 	stw	r2,32(sp)
10018b38:	011f2834 	movhi	r4,31904
10018b3c:	189ffc2c 	andhi	r2,r3,32752
10018b40:	20808c36 	bltu	r4,r2,10018d74 <_strtod_r+0xfe0>
10018b44:	011f2434 	movhi	r4,31888
10018b48:	2081a62e 	bgeu	r4,r2,100191e4 <_strtod_r+0x1450>
10018b4c:	00dffc34 	movhi	r3,32752
10018b50:	18ffffc4 	addi	r3,r3,-1
10018b54:	013fffc4 	movi	r4,-1
10018b58:	d8c00715 	stw	r3,28(sp)
10018b5c:	d9000815 	stw	r4,32(sp)
10018b60:	202b883a 	mov	r21,r4
10018b64:	1823883a 	mov	r17,r3
10018b68:	d8001215 	stw	zero,72(sp)
10018b6c:	003e3206 	br	10018438 <__alt_data_end+0xf0018438>
10018b70:	00801944 	movi	r2,101
10018b74:	98bde226 	beq	r19,r2,10018300 <__alt_data_end+0xf0018300>
10018b78:	0039883a 	mov	fp,zero
10018b7c:	0011883a 	mov	r8,zero
10018b80:	02400044 	movi	r9,1
10018b84:	003d2406 	br	10018018 <__alt_data_end+0xf0018018>
10018b88:	a02d883a 	mov	r22,r20
10018b8c:	00800884 	movi	r2,34
10018b90:	80800015 	stw	r2,0(r16)
10018b94:	002b883a 	mov	r21,zero
10018b98:	0023883a 	mov	r17,zero
10018b9c:	003f7806 	br	10018980 <__alt_data_end+0xf0018980>
10018ba0:	d8c01017 	ldw	r3,64(sp)
10018ba4:	04c400b4 	movhi	r19,4098
10018ba8:	d8800504 	addi	r2,sp,20
10018bac:	9cd81304 	addi	r19,r19,24652
10018bb0:	d8800015 	stw	r2,0(sp)
10018bb4:	d8c00115 	stw	r3,4(sp)
10018bb8:	8009883a 	mov	r4,r16
10018bbc:	d9400604 	addi	r5,sp,24
10018bc0:	980d883a 	mov	r6,r19
10018bc4:	d9c00404 	addi	r7,sp,16
10018bc8:	001cc840 	call	1001cc84 <__gethex>
10018bcc:	144001cc 	andi	r17,r2,7
10018bd0:	883d4f26 	beq	r17,zero,10018110 <__alt_data_end+0xf0018110>
10018bd4:	00c00184 	movi	r3,6
10018bd8:	88c0f21e 	bne	r17,r3,10018fa4 <_strtod_r+0x1210>
10018bdc:	94800044 	addi	r18,r18,1
10018be0:	dc800615 	stw	r18,24(sp)
10018be4:	002b883a 	mov	r21,zero
10018be8:	0023883a 	mov	r17,zero
10018bec:	003d4a06 	br	10018118 <__alt_data_end+0xf0018118>
10018bf0:	df000b17 	ldw	fp,44(sp)
10018bf4:	a02d883a 	mov	r22,r20
10018bf8:	e0003d1e 	bne	fp,zero,10018cf0 <_strtod_r+0xf5c>
10018bfc:	d9000817 	ldw	r4,32(sp)
10018c00:	20003b1e 	bne	r4,zero,10018cf0 <_strtod_r+0xf5c>
10018c04:	d8c00717 	ldw	r3,28(sp)
10018c08:	00800434 	movhi	r2,16
10018c0c:	10bfffc4 	addi	r2,r2,-1
10018c10:	1884703a 	and	r2,r3,r2
10018c14:	1000361e 	bne	r2,zero,10018cf0 <_strtod_r+0xf5c>
10018c18:	18dffc2c 	andhi	r3,r3,32752
10018c1c:	0081ac34 	movhi	r2,1712
10018c20:	10c0332e 	bgeu	r2,r3,10018cf0 <_strtod_r+0xf5c>
10018c24:	a0800517 	ldw	r2,20(r20)
10018c28:	1000031e 	bne	r2,zero,10018c38 <_strtod_r+0xea4>
10018c2c:	a0800417 	ldw	r2,16(r20)
10018c30:	01000044 	movi	r4,1
10018c34:	20802e0e 	bge	r4,r2,10018cf0 <_strtod_r+0xf5c>
10018c38:	8009883a 	mov	r4,r16
10018c3c:	a00b883a 	mov	r5,r20
10018c40:	01800044 	movi	r6,1
10018c44:	d8c01415 	stw	r3,80(sp)
10018c48:	0016aac0 	call	10016aac <__lshift>
10018c4c:	1009883a 	mov	r4,r2
10018c50:	900b883a 	mov	r5,r18
10018c54:	102d883a 	mov	r22,r2
10018c58:	0016bf40 	call	10016bf4 <__mcmp>
10018c5c:	d8c01417 	ldw	r3,80(sp)
10018c60:	0080230e 	bge	zero,r2,10018cf0 <_strtod_r+0xf5c>
10018c64:	d8801217 	ldw	r2,72(sp)
10018c68:	10016a26 	beq	r2,zero,10019214 <_strtod_r+0x1480>
10018c6c:	0081ac34 	movhi	r2,1712
10018c70:	10c16816 	blt	r2,r3,10019214 <_strtod_r+0x1480>
10018c74:	0080dc34 	movhi	r2,880
10018c78:	10ffc40e 	bge	r2,r3,10018b8c <__alt_data_end+0xf0018b8c>
10018c7c:	a809883a 	mov	r4,r21
10018c80:	880b883a 	mov	r5,r17
10018c84:	000d883a 	mov	r6,zero
10018c88:	01ce5434 	movhi	r7,14672
10018c8c:	001fe240 	call	1001fe24 <__muldf3>
10018c90:	102b883a 	mov	r21,r2
10018c94:	1823883a 	mov	r17,r3
10018c98:	183f391e 	bne	r3,zero,10018980 <__alt_data_end+0xf0018980>
10018c9c:	103f381e 	bne	r2,zero,10018980 <__alt_data_end+0xf0018980>
10018ca0:	00800884 	movi	r2,34
10018ca4:	80800015 	stw	r2,0(r16)
10018ca8:	003f3506 	br	10018980 <__alt_data_end+0xf0018980>
10018cac:	d8801217 	ldw	r2,72(sp)
10018cb0:	10015f26 	beq	r2,zero,10019230 <_strtod_r+0x149c>
10018cb4:	209ffc2c 	andhi	r2,r4,32752
10018cb8:	00c1a834 	movhi	r3,1696
10018cbc:	18815c36 	bltu	r3,r2,10019230 <_strtod_r+0x149c>
10018cc0:	1004d53a 	srli	r2,r2,20
10018cc4:	00c01ac4 	movi	r3,107
10018cc8:	1887c83a 	sub	r3,r3,r2
10018ccc:	00bfffc4 	movi	r2,-1
10018cd0:	10c4983a 	sll	r2,r2,r3
10018cd4:	d8c00817 	ldw	r3,32(sp)
10018cd8:	1880101e 	bne	r3,r2,10018d1c <_strtod_r+0xf88>
10018cdc:	d9000717 	ldw	r4,28(sp)
10018ce0:	00800434 	movhi	r2,16
10018ce4:	002b883a 	mov	r21,zero
10018ce8:	245ffc2c 	andhi	r17,r4,32752
10018cec:	88a3883a 	add	r17,r17,r2
10018cf0:	d8c01217 	ldw	r3,72(sp)
10018cf4:	183fe11e 	bne	r3,zero,10018c7c <__alt_data_end+0xf0018c7c>
10018cf8:	003f2106 	br	10018980 <__alt_data_end+0xf0018980>
10018cfc:	df000b17 	ldw	fp,44(sp)
10018d00:	00800434 	movhi	r2,16
10018d04:	a02d883a 	mov	r22,r20
10018d08:	10bfffc4 	addi	r2,r2,-1
10018d0c:	e0009e26 	beq	fp,zero,10018f88 <_strtod_r+0x11f4>
10018d10:	d9000717 	ldw	r4,28(sp)
10018d14:	2086703a 	and	r3,r4,r2
10018d18:	18bfe426 	beq	r3,r2,10018cac <__alt_data_end+0xf0018cac>
10018d1c:	d8c00817 	ldw	r3,32(sp)
10018d20:	1880004c 	andi	r2,r3,1
10018d24:	103ff226 	beq	r2,zero,10018cf0 <__alt_data_end+0xf0018cf0>
10018d28:	a809883a 	mov	r4,r21
10018d2c:	880b883a 	mov	r5,r17
10018d30:	0016dec0 	call	10016dec <__ulp>
10018d34:	a809883a 	mov	r4,r21
10018d38:	880b883a 	mov	r5,r17
10018d3c:	100d883a 	mov	r6,r2
10018d40:	180f883a 	mov	r7,r3
10018d44:	001ea780 	call	1001ea78 <__adddf3>
10018d48:	102b883a 	mov	r21,r2
10018d4c:	1823883a 	mov	r17,r3
10018d50:	003fe706 	br	10018cf0 <__alt_data_end+0xf0018cf0>
10018d54:	00bfffc4 	movi	r2,-1
10018d58:	a8beba1e 	bne	r21,r2,10018844 <__alt_data_end+0xf0018844>
10018d5c:	00800884 	movi	r2,34
10018d60:	80800015 	stw	r2,0(r16)
10018d64:	002b883a 	mov	r21,zero
10018d68:	045ffc34 	movhi	r17,32752
10018d6c:	a02d883a 	mov	r22,r20
10018d70:	003f0306 	br	10018980 <__alt_data_end+0xf0018980>
10018d74:	00800884 	movi	r2,34
10018d78:	80800015 	stw	r2,0(r16)
10018d7c:	002b883a 	mov	r21,zero
10018d80:	045ffc34 	movhi	r17,32752
10018d84:	003ce406 	br	10018118 <__alt_data_end+0xf0018118>
10018d88:	883da826 	beq	r17,zero,1001842c <__alt_data_end+0xf001842c>
10018d8c:	0463c83a 	sub	r17,zero,r17
10018d90:	888003cc 	andi	r2,r17,15
10018d94:	10000b26 	beq	r2,zero,10018dc4 <_strtod_r+0x1030>
10018d98:	100490fa 	slli	r2,r2,3
10018d9c:	00c400b4 	movhi	r3,4098
10018da0:	18d52004 	addi	r3,r3,21632
10018da4:	1885883a 	add	r2,r3,r2
10018da8:	d9000817 	ldw	r4,32(sp)
10018dac:	d9400717 	ldw	r5,28(sp)
10018db0:	11800017 	ldw	r6,0(r2)
10018db4:	11c00117 	ldw	r7,4(r2)
10018db8:	001f3140 	call	1001f314 <__divdf3>
10018dbc:	d8800815 	stw	r2,32(sp)
10018dc0:	d8c00715 	stw	r3,28(sp)
10018dc4:	8823d13a 	srai	r17,r17,4
10018dc8:	883d9826 	beq	r17,zero,1001842c <__alt_data_end+0xf001842c>
10018dcc:	008007c4 	movi	r2,31
10018dd0:	14402c16 	blt	r2,r17,10018e84 <_strtod_r+0x10f0>
10018dd4:	8880040c 	andi	r2,r17,16
10018dd8:	10011e26 	beq	r2,zero,10019254 <_strtod_r+0x14c0>
10018ddc:	0441330e 	bge	zero,r17,100192ac <_strtod_r+0x1518>
10018de0:	00801a84 	movi	r2,106
10018de4:	d8801215 	stw	r2,72(sp)
10018de8:	d8800817 	ldw	r2,32(sp)
10018dec:	d8c00717 	ldw	r3,28(sp)
10018df0:	04c400b4 	movhi	r19,4098
10018df4:	9cd55604 	addi	r19,r19,21848
10018df8:	8980004c 	andi	r6,r17,1
10018dfc:	30000526 	beq	r6,zero,10018e14 <_strtod_r+0x1080>
10018e00:	99800017 	ldw	r6,0(r19)
10018e04:	99c00117 	ldw	r7,4(r19)
10018e08:	1009883a 	mov	r4,r2
10018e0c:	180b883a 	mov	r5,r3
10018e10:	001fe240 	call	1001fe24 <__muldf3>
10018e14:	8823d07a 	srai	r17,r17,1
10018e18:	9cc00204 	addi	r19,r19,8
10018e1c:	047ff616 	blt	zero,r17,10018df8 <__alt_data_end+0xf0018df8>
10018e20:	d8c00715 	stw	r3,28(sp)
10018e24:	d8c01217 	ldw	r3,72(sp)
10018e28:	d8800815 	stw	r2,32(sp)
10018e2c:	18000d26 	beq	r3,zero,10018e64 <_strtod_r+0x10d0>
10018e30:	d9000717 	ldw	r4,28(sp)
10018e34:	00801ac4 	movi	r2,107
10018e38:	20dffc2c 	andhi	r3,r4,32752
10018e3c:	1806d53a 	srli	r3,r3,20
10018e40:	10c5c83a 	sub	r2,r2,r3
10018e44:	0080070e 	bge	zero,r2,10018e64 <_strtod_r+0x10d0>
10018e48:	00c007c4 	movi	r3,31
10018e4c:	1881110e 	bge	r3,r2,10019294 <_strtod_r+0x1500>
10018e50:	d8000815 	stw	zero,32(sp)
10018e54:	00c00d04 	movi	r3,52
10018e58:	1881170e 	bge	r3,r2,100192b8 <_strtod_r+0x1524>
10018e5c:	0080dc34 	movhi	r2,880
10018e60:	d8800715 	stw	r2,28(sp)
10018e64:	d9000817 	ldw	r4,32(sp)
10018e68:	d9400717 	ldw	r5,28(sp)
10018e6c:	000d883a 	mov	r6,zero
10018e70:	000f883a 	mov	r7,zero
10018e74:	202b883a 	mov	r21,r4
10018e78:	2823883a 	mov	r17,r5
10018e7c:	001fbe00 	call	1001fbe0 <__eqdf2>
10018e80:	103d6d1e 	bne	r2,zero,10018438 <__alt_data_end+0xf0018438>
10018e84:	00800884 	movi	r2,34
10018e88:	80800015 	stw	r2,0(r16)
10018e8c:	002b883a 	mov	r21,zero
10018e90:	0023883a 	mov	r17,zero
10018e94:	003ca006 	br	10018118 <__alt_data_end+0xf0018118>
10018e98:	00cff834 	movhi	r3,16352
10018e9c:	002f883a 	mov	r23,zero
10018ea0:	022ff834 	movhi	r8,49120
10018ea4:	d8000f15 	stw	zero,60(sp)
10018ea8:	d8c00a15 	stw	r3,40(sp)
10018eac:	003e8806 	br	100188d0 <__alt_data_end+0xf00188d0>
10018eb0:	009387c4 	movi	r2,19999
10018eb4:	003cd706 	br	10018214 <__alt_data_end+0xf0018214>
10018eb8:	14c03fcc 	andi	r19,r2,255
10018ebc:	9cc0201c 	xori	r19,r19,128
10018ec0:	9cffe004 	addi	r19,r19,-128
10018ec4:	9039883a 	mov	fp,r18
10018ec8:	002b883a 	mov	r21,zero
10018ecc:	002f883a 	mov	r23,zero
10018ed0:	0029883a 	mov	r20,zero
10018ed4:	003c3d06 	br	10017fcc <__alt_data_end+0xf0017fcc>
10018ed8:	d9000e17 	ldw	r4,56(sp)
10018edc:	00c00944 	movi	r3,37
10018ee0:	1f07c83a 	sub	r3,r3,fp
10018ee4:	193d3d16 	blt	r3,r4,100183dc <__alt_data_end+0xf00183dc>
10018ee8:	1739c83a 	sub	fp,r2,fp
10018eec:	e00690fa 	slli	r3,fp,3
10018ef0:	040400b4 	movhi	r16,4098
10018ef4:	84152004 	addi	r16,r16,21632
10018ef8:	80c7883a 	add	r3,r16,r3
10018efc:	d9800817 	ldw	r6,32(sp)
10018f00:	d9c00717 	ldw	r7,28(sp)
10018f04:	19000017 	ldw	r4,0(r3)
10018f08:	19400117 	ldw	r5,4(r3)
10018f0c:	001fe240 	call	1001fe24 <__muldf3>
10018f10:	d9000e17 	ldw	r4,56(sp)
10018f14:	180b883a 	mov	r5,r3
10018f18:	2739c83a 	sub	fp,r4,fp
10018f1c:	e00c90fa 	slli	r6,fp,3
10018f20:	1009883a 	mov	r4,r2
10018f24:	8185883a 	add	r2,r16,r6
10018f28:	11800017 	ldw	r6,0(r2)
10018f2c:	11c00117 	ldw	r7,4(r2)
10018f30:	001fe240 	call	1001fe24 <__muldf3>
10018f34:	102b883a 	mov	r21,r2
10018f38:	1823883a 	mov	r17,r3
10018f3c:	003c7606 	br	10018118 <__alt_data_end+0xf0018118>
10018f40:	40d1883a 	add	r8,r8,r3
10018f44:	2800c126 	beq	r5,zero,1001924c <_strtod_r+0x14b8>
10018f48:	2f0b883a 	add	r5,r5,fp
10018f4c:	01000204 	movi	r4,8
10018f50:	01c00404 	movi	r7,16
10018f54:	e7000044 	addi	fp,fp,1
10018f58:	e0bfffc4 	addi	r2,fp,-1
10018f5c:	20800716 	blt	r4,r2,10018f7c <_strtod_r+0x11e8>
10018f60:	bdc002a4 	muli	r23,r23,10
10018f64:	e17ffb1e 	bne	fp,r5,10018f54 <__alt_data_end+0xf0018f54>
10018f68:	00800204 	movi	r2,8
10018f6c:	2f000044 	addi	fp,r5,1
10018f70:	11406b16 	blt	r2,r5,10019120 <_strtod_r+0x138c>
10018f74:	d9000617 	ldw	r4,24(sp)
10018f78:	003d1406 	br	100183cc <__alt_data_end+0xf00183cc>
10018f7c:	3f3ff916 	blt	r7,fp,10018f64 <__alt_data_end+0xf0018f64>
10018f80:	ad4002a4 	muli	r21,r21,10
10018f84:	003ff706 	br	10018f64 <__alt_data_end+0xf0018f64>
10018f88:	d8c00717 	ldw	r3,28(sp)
10018f8c:	1884703a 	and	r2,r3,r2
10018f90:	10004f1e 	bne	r2,zero,100190d0 <_strtod_r+0x133c>
10018f94:	d9000817 	ldw	r4,32(sp)
10018f98:	20004d1e 	bne	r4,zero,100190d0 <_strtod_r+0x133c>
10018f9c:	18dffc2c 	andhi	r3,r3,32752
10018fa0:	003f3006 	br	10018c64 <__alt_data_end+0xf0018c64>
10018fa4:	d9800517 	ldw	r6,20(sp)
10018fa8:	30000826 	beq	r6,zero,10018fcc <_strtod_r+0x1238>
10018fac:	99400017 	ldw	r5,0(r19)
10018fb0:	d9000204 	addi	r4,sp,8
10018fb4:	d8801315 	stw	r2,76(sp)
10018fb8:	00171bc0 	call	100171bc <__copybits>
10018fbc:	d9400517 	ldw	r5,20(sp)
10018fc0:	8009883a 	mov	r4,r16
10018fc4:	00163dc0 	call	100163dc <_Bfree>
10018fc8:	d8801317 	ldw	r2,76(sp)
10018fcc:	00c00184 	movi	r3,6
10018fd0:	d9000417 	ldw	r4,16(sp)
10018fd4:	1c401036 	bltu	r3,r17,10019018 <_strtod_r+0x1284>
10018fd8:	882290ba 	slli	r17,r17,2
10018fdc:	00c400b4 	movhi	r3,4098
10018fe0:	18e3fc04 	addi	r3,r3,-28688
10018fe4:	88e3883a 	add	r17,r17,r3
10018fe8:	88c00017 	ldw	r3,0(r17)
10018fec:	1800683a 	jmp	r3
10018ff0:	10019030 	cmpltui	zero,r2,1600
10018ff4:	10019068 	cmpgeui	zero,r2,1601
10018ff8:	10019054 	ori	zero,r2,1601
10018ffc:	1001900c 	andi	zero,r2,1600
10019000:	1001903c 	xorhi	zero,r2,1600
10019004:	10019068 	cmpgeui	zero,r2,1601
10019008:	10019030 	cmpltui	zero,r2,1600
1001900c:	00dffc34 	movhi	r3,32752
10019010:	d8c00715 	stw	r3,28(sp)
10019014:	d8000815 	stw	zero,32(sp)
10019018:	1080020c 	andi	r2,r2,8
1001901c:	dd400817 	ldw	r21,32(sp)
10019020:	103c2626 	beq	r2,zero,100180bc <__alt_data_end+0xf00180bc>
10019024:	d9000717 	ldw	r4,28(sp)
10019028:	24600034 	orhi	r17,r4,32768
1001902c:	003c3a06 	br	10018118 <__alt_data_end+0xf0018118>
10019030:	d8000715 	stw	zero,28(sp)
10019034:	d8000815 	stw	zero,32(sp)
10019038:	003ff706 	br	10019018 <__alt_data_end+0xf0019018>
1001903c:	01200034 	movhi	r4,32768
10019040:	213fffc4 	addi	r4,r4,-1
10019044:	00ffffc4 	movi	r3,-1
10019048:	d9000715 	stw	r4,28(sp)
1001904c:	d8c00815 	stw	r3,32(sp)
10019050:	003ff106 	br	10019018 <__alt_data_end+0xf0019018>
10019054:	d9000217 	ldw	r4,8(sp)
10019058:	d8c00317 	ldw	r3,12(sp)
1001905c:	d9000815 	stw	r4,32(sp)
10019060:	d8c00715 	stw	r3,28(sp)
10019064:	003fec06 	br	10019018 <__alt_data_end+0xf0019018>
10019068:	20c10cc4 	addi	r3,r4,1075
1001906c:	d9000217 	ldw	r4,8(sp)
10019070:	d9400317 	ldw	r5,12(sp)
10019074:	1806953a 	slli	r3,r3,20
10019078:	d9000815 	stw	r4,32(sp)
1001907c:	013ffc34 	movhi	r4,65520
10019080:	213fffc4 	addi	r4,r4,-1
10019084:	2908703a 	and	r4,r5,r4
10019088:	1908b03a 	or	r4,r3,r4
1001908c:	d9000715 	stw	r4,28(sp)
10019090:	003fe106 	br	10019018 <__alt_data_end+0xf0019018>
10019094:	d8c00e17 	ldw	r3,56(sp)
10019098:	00bffa84 	movi	r2,-22
1001909c:	18bccf16 	blt	r3,r2,100183dc <__alt_data_end+0xf00183dc>
100190a0:	180690fa 	slli	r3,r3,3
100190a4:	008400b4 	movhi	r2,4098
100190a8:	10952004 	addi	r2,r2,21632
100190ac:	10c5c83a 	sub	r2,r2,r3
100190b0:	d9000817 	ldw	r4,32(sp)
100190b4:	d9400717 	ldw	r5,28(sp)
100190b8:	11800017 	ldw	r6,0(r2)
100190bc:	11c00117 	ldw	r7,4(r2)
100190c0:	001f3140 	call	1001f314 <__divdf3>
100190c4:	102b883a 	mov	r21,r2
100190c8:	1823883a 	mov	r17,r3
100190cc:	003c1206 	br	10018118 <__alt_data_end+0xf0018118>
100190d0:	d8c00817 	ldw	r3,32(sp)
100190d4:	1880004c 	andi	r2,r3,1
100190d8:	103f0526 	beq	r2,zero,10018cf0 <__alt_data_end+0xf0018cf0>
100190dc:	a809883a 	mov	r4,r21
100190e0:	880b883a 	mov	r5,r17
100190e4:	0016dec0 	call	10016dec <__ulp>
100190e8:	a809883a 	mov	r4,r21
100190ec:	880b883a 	mov	r5,r17
100190f0:	100d883a 	mov	r6,r2
100190f4:	180f883a 	mov	r7,r3
100190f8:	00205480 	call	10020548 <__subdf3>
100190fc:	1009883a 	mov	r4,r2
10019100:	180b883a 	mov	r5,r3
10019104:	000d883a 	mov	r6,zero
10019108:	000f883a 	mov	r7,zero
1001910c:	102b883a 	mov	r21,r2
10019110:	1823883a 	mov	r17,r3
10019114:	001fbe00 	call	1001fbe0 <__eqdf2>
10019118:	103e9c26 	beq	r2,zero,10018b8c <__alt_data_end+0xf0018b8c>
1001911c:	003ef406 	br	10018cf0 <__alt_data_end+0xf0018cf0>
10019120:	00800404 	movi	r2,16
10019124:	1700360e 	bge	r2,fp,10019200 <_strtod_r+0x146c>
10019128:	d9000617 	ldw	r4,24(sp)
1001912c:	000b883a 	mov	r5,zero
10019130:	003e5206 	br	10018a7c <__alt_data_end+0xf0018a7c>
10019134:	014400b4 	movhi	r5,4098
10019138:	d9000617 	ldw	r4,24(sp)
1001913c:	29555204 	addi	r5,r5,21832
10019140:	01c00644 	movi	r7,25
10019144:	00000b06 	br	10019174 <_strtod_r+0x13e0>
10019148:	21000044 	addi	r4,r4,1
1001914c:	20800003 	ldbu	r2,0(r4)
10019150:	10ffefc4 	addi	r3,r2,-65
10019154:	10803fcc 	andi	r2,r2,255
10019158:	1080201c 	xori	r2,r2,128
1001915c:	18c03fcc 	andi	r3,r3,255
10019160:	10bfe004 	addi	r2,r2,-128
10019164:	38c00136 	bltu	r7,r3,1001916c <_strtod_r+0x13d8>
10019168:	10800804 	addi	r2,r2,32
1001916c:	29400044 	addi	r5,r5,1
10019170:	11bb541e 	bne	r2,r6,10017ec4 <__alt_data_end+0xf0017ec4>
10019174:	29800007 	ldb	r6,0(r5)
10019178:	303ff31e 	bne	r6,zero,10019148 <__alt_data_end+0xf0019148>
1001917c:	018400b4 	movhi	r6,4098
10019180:	200b883a 	mov	r5,r4
10019184:	d9000615 	stw	r4,24(sp)
10019188:	31955304 	addi	r6,r6,21836
1001918c:	02000644 	movi	r8,25
10019190:	00000a06 	br	100191bc <_strtod_r+0x1428>
10019194:	28800003 	ldbu	r2,0(r5)
10019198:	10ffefc4 	addi	r3,r2,-65
1001919c:	10803fcc 	andi	r2,r2,255
100191a0:	1080201c 	xori	r2,r2,128
100191a4:	18c03fcc 	andi	r3,r3,255
100191a8:	10bfe004 	addi	r2,r2,-128
100191ac:	40c00136 	bltu	r8,r3,100191b4 <_strtod_r+0x1420>
100191b0:	10800804 	addi	r2,r2,32
100191b4:	31800044 	addi	r6,r6,1
100191b8:	11c0211e 	bne	r2,r7,10019240 <_strtod_r+0x14ac>
100191bc:	31c00007 	ldb	r7,0(r6)
100191c0:	29400044 	addi	r5,r5,1
100191c4:	383ff31e 	bne	r7,zero,10019194 <__alt_data_end+0xf0019194>
100191c8:	d9400615 	stw	r5,24(sp)
100191cc:	009ffc34 	movhi	r2,32752
100191d0:	d8800715 	stw	r2,28(sp)
100191d4:	d8000815 	stw	zero,32(sp)
100191d8:	003bb706 	br	100180b8 <__alt_data_end+0xf00180b8>
100191dc:	000b883a 	mov	r5,zero
100191e0:	003c7206 	br	100183ac <__alt_data_end+0xf00183ac>
100191e4:	0080d434 	movhi	r2,848
100191e8:	1887883a 	add	r3,r3,r2
100191ec:	d8c00715 	stw	r3,28(sp)
100191f0:	dd400817 	ldw	r21,32(sp)
100191f4:	1823883a 	mov	r17,r3
100191f8:	d8001215 	stw	zero,72(sp)
100191fc:	003c8e06 	br	10018438 <__alt_data_end+0xf0018438>
10019200:	a9c002a4 	muli	r7,r21,10
10019204:	d9000617 	ldw	r4,24(sp)
10019208:	000b883a 	mov	r5,zero
1001920c:	31eb883a 	add	r21,r6,r7
10019210:	003e1a06 	br	10018a7c <__alt_data_end+0xf0018a7c>
10019214:	047ffc34 	movhi	r17,65520
10019218:	1c47883a 	add	r3,r3,r17
1001921c:	057fffc4 	movi	r21,-1
10019220:	04400434 	movhi	r17,16
10019224:	8d63883a 	add	r17,r17,r21
10019228:	1c62b03a 	or	r17,r3,r17
1001922c:	003eb006 	br	10018cf0 <__alt_data_end+0xf0018cf0>
10019230:	00bfffc4 	movi	r2,-1
10019234:	003ea706 	br	10018cd4 <__alt_data_end+0xf0018cd4>
10019238:	002b883a 	mov	r21,zero
1001923c:	003e3406 	br	10018b10 <__alt_data_end+0xf0018b10>
10019240:	21000044 	addi	r4,r4,1
10019244:	d9000615 	stw	r4,24(sp)
10019248:	003fe006 	br	100191cc <__alt_data_end+0xf00191cc>
1001924c:	e00b883a 	mov	r5,fp
10019250:	003f4506 	br	10018f68 <__alt_data_end+0xf0018f68>
10019254:	d8001215 	stw	zero,72(sp)
10019258:	047ee316 	blt	zero,r17,10018de8 <__alt_data_end+0xf0018de8>
1001925c:	003f0106 	br	10018e64 <__alt_data_end+0xf0018e64>
10019260:	014400b4 	movhi	r5,4098
10019264:	29580e04 	addi	r5,r5,24632
10019268:	d9000604 	addi	r4,sp,24
1001926c:	d9800204 	addi	r6,sp,8
10019270:	001d4a00 	call	1001d4a0 <__hexnan>
10019274:	00c00144 	movi	r3,5
10019278:	10fb8c1e 	bne	r2,r3,100180ac <__alt_data_end+0xf00180ac>
1001927c:	d8800317 	ldw	r2,12(sp)
10019280:	d8c00217 	ldw	r3,8(sp)
10019284:	109ffc34 	orhi	r2,r2,32752
10019288:	d8c00815 	stw	r3,32(sp)
1001928c:	d8800715 	stw	r2,28(sp)
10019290:	003b8906 	br	100180b8 <__alt_data_end+0xf00180b8>
10019294:	00ffffc4 	movi	r3,-1
10019298:	d9000817 	ldw	r4,32(sp)
1001929c:	1884983a 	sll	r2,r3,r2
100192a0:	1108703a 	and	r4,r2,r4
100192a4:	d9000815 	stw	r4,32(sp)
100192a8:	003eee06 	br	10018e64 <__alt_data_end+0xf0018e64>
100192ac:	01001a84 	movi	r4,106
100192b0:	d9001215 	stw	r4,72(sp)
100192b4:	003ede06 	br	10018e30 <__alt_data_end+0xf0018e30>
100192b8:	00ffffc4 	movi	r3,-1
100192bc:	10bff804 	addi	r2,r2,-32
100192c0:	1884983a 	sll	r2,r3,r2
100192c4:	d8c00717 	ldw	r3,28(sp)
100192c8:	10c6703a 	and	r3,r2,r3
100192cc:	d8c00715 	stw	r3,28(sp)
100192d0:	003ee406 	br	10018e64 <__alt_data_end+0xf0018e64>

100192d4 <strtod>:
100192d4:	00c400b4 	movhi	r3,4098
100192d8:	18dd1004 	addi	r3,r3,29760
100192dc:	2005883a 	mov	r2,r4
100192e0:	19000017 	ldw	r4,0(r3)
100192e4:	280d883a 	mov	r6,r5
100192e8:	100b883a 	mov	r5,r2
100192ec:	0017d941 	jmpi	10017d94 <_strtod_r>

100192f0 <strtof>:
100192f0:	defffb04 	addi	sp,sp,-20
100192f4:	dcc00315 	stw	r19,12(sp)
100192f8:	04c400b4 	movhi	r19,4098
100192fc:	9cdd1004 	addi	r19,r19,29760
10019300:	2005883a 	mov	r2,r4
10019304:	99000017 	ldw	r4,0(r19)
10019308:	280d883a 	mov	r6,r5
1001930c:	100b883a 	mov	r5,r2
10019310:	dfc00415 	stw	ra,16(sp)
10019314:	dc800215 	stw	r18,8(sp)
10019318:	dc400115 	stw	r17,4(sp)
1001931c:	dc000015 	stw	r16,0(sp)
10019320:	0017d940 	call	10017d94 <_strtod_r>
10019324:	1009883a 	mov	r4,r2
10019328:	180b883a 	mov	r5,r3
1001932c:	1025883a 	mov	r18,r2
10019330:	1823883a 	mov	r17,r3
10019334:	00210140 	call	10021014 <__truncdfsf2>
10019338:	1009883a 	mov	r4,r2
1001933c:	000b883a 	mov	r5,zero
10019340:	1021883a 	mov	r16,r2
10019344:	001e8940 	call	1001e894 <__eqsf2>
10019348:	1000111e 	bne	r2,zero,10019390 <strtof+0xa0>
1001934c:	9009883a 	mov	r4,r18
10019350:	880b883a 	mov	r5,r17
10019354:	000d883a 	mov	r6,zero
10019358:	000f883a 	mov	r7,zero
1001935c:	001fbe00 	call	1001fbe0 <__eqdf2>
10019360:	10000b26 	beq	r2,zero,10019390 <strtof+0xa0>
10019364:	98800017 	ldw	r2,0(r19)
10019368:	00c00884 	movi	r3,34
1001936c:	10c00015 	stw	r3,0(r2)
10019370:	8005883a 	mov	r2,r16
10019374:	dfc00417 	ldw	ra,16(sp)
10019378:	dcc00317 	ldw	r19,12(sp)
1001937c:	dc800217 	ldw	r18,8(sp)
10019380:	dc400117 	ldw	r17,4(sp)
10019384:	dc000017 	ldw	r16,0(sp)
10019388:	dec00504 	addi	sp,sp,20
1001938c:	f800283a 	ret
10019390:	015fe034 	movhi	r5,32640
10019394:	297fffc4 	addi	r5,r5,-1
10019398:	8009883a 	mov	r4,r16
1001939c:	001e9080 	call	1001e908 <__gesf2>
100193a0:	0080070e 	bge	zero,r2,100193c0 <strtof+0xd0>
100193a4:	01dffc34 	movhi	r7,32752
100193a8:	39ffffc4 	addi	r7,r7,-1
100193ac:	9009883a 	mov	r4,r18
100193b0:	880b883a 	mov	r5,r17
100193b4:	01bfffc4 	movi	r6,-1
100193b8:	001fc640 	call	1001fc64 <__gedf2>
100193bc:	00bfe90e 	bge	zero,r2,10019364 <__alt_data_end+0xf0019364>
100193c0:	017fe034 	movhi	r5,65408
100193c4:	297fffc4 	addi	r5,r5,-1
100193c8:	8009883a 	mov	r4,r16
100193cc:	001e9c00 	call	1001e9c0 <__lesf2>
100193d0:	103fe70e 	bge	r2,zero,10019370 <__alt_data_end+0xf0019370>
100193d4:	01fffc34 	movhi	r7,65520
100193d8:	39ffffc4 	addi	r7,r7,-1
100193dc:	9009883a 	mov	r4,r18
100193e0:	880b883a 	mov	r5,r17
100193e4:	01bfffc4 	movi	r6,-1
100193e8:	001fd440 	call	1001fd44 <__ledf2>
100193ec:	103fdd0e 	bge	r2,zero,10019364 <__alt_data_end+0xf0019364>
100193f0:	003fdf06 	br	10019370 <__alt_data_end+0xf0019370>

100193f4 <_strtoll_r>:
100193f4:	008400b4 	movhi	r2,4098
100193f8:	deffef04 	addi	sp,sp,-68
100193fc:	109d0e04 	addi	r2,r2,29752
10019400:	dd800d15 	stw	r22,52(sp)
10019404:	15800017 	ldw	r22,0(r2)
10019408:	df000f15 	stw	fp,60(sp)
1001940c:	dfc01015 	stw	ra,64(sp)
10019410:	ddc00e15 	stw	r23,56(sp)
10019414:	dd400c15 	stw	r21,48(sp)
10019418:	dd000b15 	stw	r20,44(sp)
1001941c:	dcc00a15 	stw	r19,40(sp)
10019420:	dc800915 	stw	r18,36(sp)
10019424:	dc400815 	stw	r17,32(sp)
10019428:	dc000715 	stw	r16,28(sp)
1001942c:	d9400415 	stw	r5,16(sp)
10019430:	d9000515 	stw	r4,20(sp)
10019434:	d9800215 	stw	r6,8(sp)
10019438:	3839883a 	mov	fp,r7
1001943c:	2811883a 	mov	r8,r5
10019440:	42400007 	ldb	r9,0(r8)
10019444:	4007883a 	mov	r3,r8
10019448:	42000044 	addi	r8,r8,1
1001944c:	b245883a 	add	r2,r22,r9
10019450:	10800043 	ldbu	r2,1(r2)
10019454:	1080020c 	andi	r2,r2,8
10019458:	103ff91e 	bne	r2,zero,10019440 <__alt_data_end+0xf0019440>
1001945c:	00800b44 	movi	r2,45
10019460:	4025883a 	mov	r18,r8
10019464:	48807d26 	beq	r9,r2,1001965c <_strtoll_r+0x268>
10019468:	00800ac4 	movi	r2,43
1001946c:	48808026 	beq	r9,r2,10019670 <_strtoll_r+0x27c>
10019470:	d8000115 	stw	zero,4(sp)
10019474:	e0000a26 	beq	fp,zero,100194a0 <_strtoll_r+0xac>
10019478:	00800404 	movi	r2,16
1001947c:	e0808c26 	beq	fp,r2,100196b0 <_strtoll_r+0x2bc>
10019480:	e005d7fa 	srai	r2,fp,31
10019484:	d8c00117 	ldw	r3,4(sp)
10019488:	e027883a 	mov	r19,fp
1001948c:	d8800015 	stw	r2,0(sp)
10019490:	18000a26 	beq	r3,zero,100194bc <_strtoll_r+0xc8>
10019494:	0023883a 	mov	r17,zero
10019498:	04200034 	movhi	r16,32768
1001949c:	00000a06 	br	100194c8 <_strtoll_r+0xd4>
100194a0:	00800c04 	movi	r2,48
100194a4:	48807626 	beq	r9,r2,10019680 <_strtoll_r+0x28c>
100194a8:	04c00284 	movi	r19,10
100194ac:	d8000015 	stw	zero,0(sp)
100194b0:	9839883a 	mov	fp,r19
100194b4:	d8c00117 	ldw	r3,4(sp)
100194b8:	183ff61e 	bne	r3,zero,10019494 <__alt_data_end+0xf0019494>
100194bc:	047fffc4 	movi	r17,-1
100194c0:	04200034 	movhi	r16,32768
100194c4:	8461883a 	add	r16,r16,r17
100194c8:	d9c00017 	ldw	r7,0(sp)
100194cc:	8809883a 	mov	r4,r17
100194d0:	800b883a 	mov	r5,r16
100194d4:	980d883a 	mov	r6,r19
100194d8:	da400615 	stw	r9,24(sp)
100194dc:	001e3040 	call	1001e304 <__umoddi3>
100194e0:	d9c00017 	ldw	r7,0(sp)
100194e4:	8809883a 	mov	r4,r17
100194e8:	800b883a 	mov	r5,r16
100194ec:	980d883a 	mov	r6,r19
100194f0:	d8800315 	stw	r2,12(sp)
100194f4:	001dd440 	call	1001dd44 <__udivdi3>
100194f8:	da400617 	ldw	r9,24(sp)
100194fc:	1823883a 	mov	r17,r3
10019500:	902f883a 	mov	r23,r18
10019504:	b247883a 	add	r3,r22,r9
10019508:	19800043 	ldbu	r6,1(r3)
1001950c:	1021883a 	mov	r16,r2
10019510:	000f883a 	mov	r7,zero
10019514:	30c0010c 	andi	r3,r6,4
10019518:	0009883a 	mov	r4,zero
1001951c:	000b883a 	mov	r5,zero
10019520:	04800044 	movi	r18,1
10019524:	057fffc4 	movi	r21,-1
10019528:	18000d26 	beq	r3,zero,10019560 <_strtoll_r+0x16c>
1001952c:	4d3ff404 	addi	r20,r9,-48
10019530:	a700110e 	bge	r20,fp,10019578 <_strtoll_r+0x184>
10019534:	3d400426 	beq	r7,r21,10019548 <_strtoll_r+0x154>
10019538:	89400236 	bltu	r17,r5,10019544 <_strtoll_r+0x150>
1001953c:	2c40291e 	bne	r5,r17,100195e4 <_strtoll_r+0x1f0>
10019540:	8100282e 	bgeu	r16,r4,100195e4 <_strtoll_r+0x1f0>
10019544:	01ffffc4 	movi	r7,-1
10019548:	ba400007 	ldb	r9,0(r23)
1001954c:	bdc00044 	addi	r23,r23,1
10019550:	b247883a 	add	r3,r22,r9
10019554:	19800043 	ldbu	r6,1(r3)
10019558:	30c0010c 	andi	r3,r6,4
1001955c:	183ff31e 	bne	r3,zero,1001952c <__alt_data_end+0xf001952c>
10019560:	318000cc 	andi	r6,r6,3
10019564:	30000426 	beq	r6,zero,10019578 <_strtoll_r+0x184>
10019568:	34802a26 	beq	r6,r18,10019614 <_strtoll_r+0x220>
1001956c:	00c015c4 	movi	r3,87
10019570:	48e9c83a 	sub	r20,r9,r3
10019574:	a73fef16 	blt	r20,fp,10019534 <__alt_data_end+0xf0019534>
10019578:	00bfffc4 	movi	r2,-1
1001957c:	38802b26 	beq	r7,r2,1001962c <_strtoll_r+0x238>
10019580:	d8800117 	ldw	r2,4(sp)
10019584:	0093c83a 	sub	r9,zero,r2
10019588:	2248f03a 	xor	r4,r4,r9
1001958c:	2085883a 	add	r2,r4,r2
10019590:	1109803a 	cmpltu	r4,r2,r4
10019594:	2a46f03a 	xor	r3,r5,r9
10019598:	20c7883a 	add	r3,r4,r3
1001959c:	d9000217 	ldw	r4,8(sp)
100195a0:	20000426 	beq	r4,zero,100195b4 <_strtoll_r+0x1c0>
100195a4:	38002b1e 	bne	r7,zero,10019654 <_strtoll_r+0x260>
100195a8:	dd800417 	ldw	r22,16(sp)
100195ac:	d9400217 	ldw	r5,8(sp)
100195b0:	2d800015 	stw	r22,0(r5)
100195b4:	dfc01017 	ldw	ra,64(sp)
100195b8:	df000f17 	ldw	fp,60(sp)
100195bc:	ddc00e17 	ldw	r23,56(sp)
100195c0:	dd800d17 	ldw	r22,52(sp)
100195c4:	dd400c17 	ldw	r21,48(sp)
100195c8:	dd000b17 	ldw	r20,44(sp)
100195cc:	dcc00a17 	ldw	r19,40(sp)
100195d0:	dc800917 	ldw	r18,36(sp)
100195d4:	dc400817 	ldw	r17,32(sp)
100195d8:	dc000717 	ldw	r16,28(sp)
100195dc:	dec01104 	addi	sp,sp,68
100195e0:	f800283a 	ret
100195e4:	24000d26 	beq	r4,r16,1001961c <_strtoll_r+0x228>
100195e8:	d9c00017 	ldw	r7,0(sp)
100195ec:	980d883a 	mov	r6,r19
100195f0:	001dc700 	call	1001dc70 <__muldi3>
100195f4:	a00bd7fa 	srai	r5,r20,31
100195f8:	a085883a 	add	r2,r20,r2
100195fc:	1513803a 	cmpltu	r9,r2,r20
10019600:	28c7883a 	add	r3,r5,r3
10019604:	1009883a 	mov	r4,r2
10019608:	48cb883a 	add	r5,r9,r3
1001960c:	01c00044 	movi	r7,1
10019610:	003fcd06 	br	10019548 <__alt_data_end+0xf0019548>
10019614:	00c00dc4 	movi	r3,55
10019618:	003fd506 	br	10019570 <__alt_data_end+0xf0019570>
1001961c:	2c7ff21e 	bne	r5,r17,100195e8 <__alt_data_end+0xf00195e8>
10019620:	d8800317 	ldw	r2,12(sp)
10019624:	153fc716 	blt	r2,r20,10019544 <__alt_data_end+0xf0019544>
10019628:	003fef06 	br	100195e8 <__alt_data_end+0xf00195e8>
1001962c:	d8c00117 	ldw	r3,4(sp)
10019630:	1800241e 	bne	r3,zero,100196c4 <_strtoll_r+0x2d0>
10019634:	00e00034 	movhi	r3,32768
10019638:	3805883a 	mov	r2,r7
1001963c:	18ffffc4 	addi	r3,r3,-1
10019640:	d9400517 	ldw	r5,20(sp)
10019644:	01000884 	movi	r4,34
10019648:	29000015 	stw	r4,0(r5)
1001964c:	d9000217 	ldw	r4,8(sp)
10019650:	203fd826 	beq	r4,zero,100195b4 <__alt_data_end+0xf00195b4>
10019654:	bdbfffc4 	addi	r22,r23,-1
10019658:	003fd406 	br	100195ac <__alt_data_end+0xf00195ac>
1001965c:	00800044 	movi	r2,1
10019660:	1c800084 	addi	r18,r3,2
10019664:	1a400047 	ldb	r9,1(r3)
10019668:	d8800115 	stw	r2,4(sp)
1001966c:	003f8106 	br	10019474 <__alt_data_end+0xf0019474>
10019670:	1c800084 	addi	r18,r3,2
10019674:	1a400047 	ldb	r9,1(r3)
10019678:	d8000115 	stw	zero,4(sp)
1001967c:	003f7d06 	br	10019474 <__alt_data_end+0xf0019474>
10019680:	90c00003 	ldbu	r3,0(r18)
10019684:	00bff7c4 	movi	r2,-33
10019688:	1884703a 	and	r2,r3,r2
1001968c:	10803fcc 	andi	r2,r2,255
10019690:	1080201c 	xori	r2,r2,128
10019694:	10bfe004 	addi	r2,r2,-128
10019698:	00c01604 	movi	r3,88
1001969c:	10c01426 	beq	r2,r3,100196f0 <_strtoll_r+0x2fc>
100196a0:	04c00204 	movi	r19,8
100196a4:	d8000015 	stw	zero,0(sp)
100196a8:	9839883a 	mov	fp,r19
100196ac:	003f8106 	br	100194b4 <__alt_data_end+0xf00194b4>
100196b0:	00800c04 	movi	r2,48
100196b4:	48800626 	beq	r9,r2,100196d0 <_strtoll_r+0x2dc>
100196b8:	e027883a 	mov	r19,fp
100196bc:	d8000015 	stw	zero,0(sp)
100196c0:	003f7c06 	br	100194b4 <__alt_data_end+0xf00194b4>
100196c4:	0005883a 	mov	r2,zero
100196c8:	00e00034 	movhi	r3,32768
100196cc:	003fdc06 	br	10019640 <__alt_data_end+0xf0019640>
100196d0:	90c00003 	ldbu	r3,0(r18)
100196d4:	00bff7c4 	movi	r2,-33
100196d8:	1884703a 	and	r2,r3,r2
100196dc:	10803fcc 	andi	r2,r2,255
100196e0:	1080201c 	xori	r2,r2,128
100196e4:	10bfe004 	addi	r2,r2,-128
100196e8:	00c01604 	movi	r3,88
100196ec:	10fff21e 	bne	r2,r3,100196b8 <__alt_data_end+0xf00196b8>
100196f0:	04c00404 	movi	r19,16
100196f4:	92400047 	ldb	r9,1(r18)
100196f8:	d8000015 	stw	zero,0(sp)
100196fc:	94800084 	addi	r18,r18,2
10019700:	9839883a 	mov	fp,r19
10019704:	003f6b06 	br	100194b4 <__alt_data_end+0xf00194b4>

10019708 <_strtoul_r>:
10019708:	008400b4 	movhi	r2,4098
1001970c:	defff604 	addi	sp,sp,-40
10019710:	109d0e04 	addi	r2,r2,29752
10019714:	dc800315 	stw	r18,12(sp)
10019718:	14800017 	ldw	r18,0(r2)
1001971c:	dd400615 	stw	r21,24(sp)
10019720:	dd000515 	stw	r20,20(sp)
10019724:	dcc00415 	stw	r19,16(sp)
10019728:	dfc00915 	stw	ra,36(sp)
1001972c:	ddc00815 	stw	r23,32(sp)
10019730:	dd800715 	stw	r22,28(sp)
10019734:	dc400215 	stw	r17,8(sp)
10019738:	dc000115 	stw	r16,4(sp)
1001973c:	2827883a 	mov	r19,r5
10019740:	2029883a 	mov	r20,r4
10019744:	382b883a 	mov	r21,r7
10019748:	2813883a 	mov	r9,r5
1001974c:	4a000007 	ldb	r8,0(r9)
10019750:	4807883a 	mov	r3,r9
10019754:	4a400044 	addi	r9,r9,1
10019758:	9205883a 	add	r2,r18,r8
1001975c:	10800043 	ldbu	r2,1(r2)
10019760:	1080020c 	andi	r2,r2,8
10019764:	103ff91e 	bne	r2,zero,1001974c <__alt_data_end+0xf001974c>
10019768:	00800b44 	movi	r2,45
1001976c:	4023883a 	mov	r17,r8
10019770:	4821883a 	mov	r16,r9
10019774:	40805426 	beq	r8,r2,100198c8 <_strtoul_r+0x1c0>
10019778:	00800ac4 	movi	r2,43
1001977c:	40805626 	beq	r8,r2,100198d8 <_strtoul_r+0x1d0>
10019780:	002f883a 	mov	r23,zero
10019784:	a8000e26 	beq	r21,zero,100197c0 <_strtoul_r+0xb8>
10019788:	00800404 	movi	r2,16
1001978c:	a8805626 	beq	r21,r2,100198e8 <_strtoul_r+0x1e0>
10019790:	013fffc4 	movi	r4,-1
10019794:	a80b883a 	mov	r5,r21
10019798:	d9800015 	stw	r6,0(sp)
1001979c:	000c6e00 	call	1000c6e0 <__udivsi3>
100197a0:	013fffc4 	movi	r4,-1
100197a4:	a80b883a 	mov	r5,r21
100197a8:	102d883a 	mov	r22,r2
100197ac:	000c6e80 	call	1000c6e8 <__umodsi3>
100197b0:	d9800017 	ldw	r6,0(sp)
100197b4:	a819883a 	mov	r12,r21
100197b8:	b00b883a 	mov	r5,r22
100197bc:	00000706 	br	100197dc <_strtoul_r+0xd4>
100197c0:	00800c04 	movi	r2,48
100197c4:	88804f26 	beq	r17,r2,10019904 <_strtoul_r+0x1fc>
100197c8:	05400284 	movi	r21,10
100197cc:	014666b4 	movhi	r5,6554
100197d0:	00800144 	movi	r2,5
100197d4:	29666644 	addi	r5,r5,-26215
100197d8:	a819883a 	mov	r12,r21
100197dc:	9451883a 	add	r8,r18,r17
100197e0:	42000043 	ldbu	r8,1(r8)
100197e4:	8007883a 	mov	r3,r16
100197e8:	0009883a 	mov	r4,zero
100197ec:	4240010c 	andi	r9,r8,4
100197f0:	0015883a 	mov	r10,zero
100197f4:	02c00044 	movi	r11,1
100197f8:	01ffffc4 	movi	r7,-1
100197fc:	48000e26 	beq	r9,zero,10019838 <_strtoul_r+0x130>
10019800:	8a3ff404 	addi	r8,r17,-48
10019804:	4540120e 	bge	r8,r21,10019850 <_strtoul_r+0x148>
10019808:	21c00526 	beq	r4,r7,10019820 <_strtoul_r+0x118>
1001980c:	2a802436 	bltu	r5,r10,100198a0 <_strtoul_r+0x198>
10019810:	51402226 	beq	r10,r5,1001989c <_strtoul_r+0x194>
10019814:	5315383a 	mul	r10,r10,r12
10019818:	01000044 	movi	r4,1
1001981c:	4295883a 	add	r10,r8,r10
10019820:	1c400007 	ldb	r17,0(r3)
10019824:	18c00044 	addi	r3,r3,1
10019828:	9451883a 	add	r8,r18,r17
1001982c:	42000043 	ldbu	r8,1(r8)
10019830:	4240010c 	andi	r9,r8,4
10019834:	483ff21e 	bne	r9,zero,10019800 <__alt_data_end+0xf0019800>
10019838:	420000cc 	andi	r8,r8,3
1001983c:	40000426 	beq	r8,zero,10019850 <_strtoul_r+0x148>
10019840:	42c01926 	beq	r8,r11,100198a8 <_strtoul_r+0x1a0>
10019844:	024015c4 	movi	r9,87
10019848:	8a51c83a 	sub	r8,r17,r9
1001984c:	457fee16 	blt	r8,r21,10019808 <__alt_data_end+0xf0019808>
10019850:	20001916 	blt	r4,zero,100198b8 <_strtoul_r+0x1b0>
10019854:	05c5c83a 	sub	r2,zero,r23
10019858:	5084f03a 	xor	r2,r10,r2
1001985c:	15c5883a 	add	r2,r2,r23
10019860:	30000326 	beq	r6,zero,10019870 <_strtoul_r+0x168>
10019864:	20001226 	beq	r4,zero,100198b0 <_strtoul_r+0x1a8>
10019868:	197fffc4 	addi	r5,r3,-1
1001986c:	31400015 	stw	r5,0(r6)
10019870:	dfc00917 	ldw	ra,36(sp)
10019874:	ddc00817 	ldw	r23,32(sp)
10019878:	dd800717 	ldw	r22,28(sp)
1001987c:	dd400617 	ldw	r21,24(sp)
10019880:	dd000517 	ldw	r20,20(sp)
10019884:	dcc00417 	ldw	r19,16(sp)
10019888:	dc800317 	ldw	r18,12(sp)
1001988c:	dc400217 	ldw	r17,8(sp)
10019890:	dc000117 	ldw	r16,4(sp)
10019894:	dec00a04 	addi	sp,sp,40
10019898:	f800283a 	ret
1001989c:	123fdd0e 	bge	r2,r8,10019814 <__alt_data_end+0xf0019814>
100198a0:	013fffc4 	movi	r4,-1
100198a4:	003fde06 	br	10019820 <__alt_data_end+0xf0019820>
100198a8:	02400dc4 	movi	r9,55
100198ac:	003fe606 	br	10019848 <__alt_data_end+0xf0019848>
100198b0:	980b883a 	mov	r5,r19
100198b4:	003fed06 	br	1001986c <__alt_data_end+0xf001986c>
100198b8:	00800884 	movi	r2,34
100198bc:	a0800015 	stw	r2,0(r20)
100198c0:	00bfffc4 	movi	r2,-1
100198c4:	003fe606 	br	10019860 <__alt_data_end+0xf0019860>
100198c8:	1c000084 	addi	r16,r3,2
100198cc:	1c400047 	ldb	r17,1(r3)
100198d0:	05c00044 	movi	r23,1
100198d4:	003fab06 	br	10019784 <__alt_data_end+0xf0019784>
100198d8:	1c000084 	addi	r16,r3,2
100198dc:	1c400047 	ldb	r17,1(r3)
100198e0:	002f883a 	mov	r23,zero
100198e4:	003fa706 	br	10019784 <__alt_data_end+0xf0019784>
100198e8:	00800c04 	movi	r2,48
100198ec:	88801b26 	beq	r17,r2,1001995c <_strtoul_r+0x254>
100198f0:	01440034 	movhi	r5,4096
100198f4:	297fffc4 	addi	r5,r5,-1
100198f8:	008003c4 	movi	r2,15
100198fc:	a819883a 	mov	r12,r21
10019900:	003fb606 	br	100197dc <__alt_data_end+0xf00197dc>
10019904:	80c00003 	ldbu	r3,0(r16)
10019908:	00bff7c4 	movi	r2,-33
1001990c:	1884703a 	and	r2,r3,r2
10019910:	10803fcc 	andi	r2,r2,255
10019914:	1080201c 	xori	r2,r2,128
10019918:	10bfe004 	addi	r2,r2,-128
1001991c:	00c01604 	movi	r3,88
10019920:	10c00626 	beq	r2,r3,1001993c <_strtoul_r+0x234>
10019924:	05400204 	movi	r21,8
10019928:	01480034 	movhi	r5,8192
1001992c:	008001c4 	movi	r2,7
10019930:	297fffc4 	addi	r5,r5,-1
10019934:	a819883a 	mov	r12,r21
10019938:	003fa806 	br	100197dc <__alt_data_end+0xf00197dc>
1001993c:	03000404 	movi	r12,16
10019940:	05840034 	movhi	r22,4096
10019944:	84400047 	ldb	r17,1(r16)
10019948:	008003c4 	movi	r2,15
1001994c:	84000084 	addi	r16,r16,2
10019950:	b5bfffc4 	addi	r22,r22,-1
10019954:	602b883a 	mov	r21,r12
10019958:	003f9706 	br	100197b8 <__alt_data_end+0xf00197b8>
1001995c:	80c00003 	ldbu	r3,0(r16)
10019960:	00bff7c4 	movi	r2,-33
10019964:	1884703a 	and	r2,r3,r2
10019968:	10803fcc 	andi	r2,r2,255
1001996c:	1080201c 	xori	r2,r2,128
10019970:	10bfe004 	addi	r2,r2,-128
10019974:	00c01604 	movi	r3,88
10019978:	10fff026 	beq	r2,r3,1001993c <__alt_data_end+0xf001993c>
1001997c:	01440034 	movhi	r5,4096
10019980:	008003c4 	movi	r2,15
10019984:	297fffc4 	addi	r5,r5,-1
10019988:	a819883a 	mov	r12,r21
1001998c:	003f9306 	br	100197dc <__alt_data_end+0xf00197dc>

10019990 <strtoul>:
10019990:	2007883a 	mov	r3,r4
10019994:	010400b4 	movhi	r4,4098
10019998:	211d1004 	addi	r4,r4,29760
1001999c:	21000017 	ldw	r4,0(r4)
100199a0:	2805883a 	mov	r2,r5
100199a4:	300f883a 	mov	r7,r6
100199a8:	180b883a 	mov	r5,r3
100199ac:	100d883a 	mov	r6,r2
100199b0:	00197081 	jmpi	10019708 <_strtoul_r>

100199b4 <_strtoull_r>:
100199b4:	008400b4 	movhi	r2,4098
100199b8:	deffee04 	addi	sp,sp,-72
100199bc:	109d0e04 	addi	r2,r2,29752
100199c0:	ddc00f15 	stw	r23,60(sp)
100199c4:	15c00017 	ldw	r23,0(r2)
100199c8:	df001015 	stw	fp,64(sp)
100199cc:	dfc01115 	stw	ra,68(sp)
100199d0:	dd800e15 	stw	r22,56(sp)
100199d4:	dd400d15 	stw	r21,52(sp)
100199d8:	dd000c15 	stw	r20,48(sp)
100199dc:	dcc00b15 	stw	r19,44(sp)
100199e0:	dc800a15 	stw	r18,40(sp)
100199e4:	dc400915 	stw	r17,36(sp)
100199e8:	dc000815 	stw	r16,32(sp)
100199ec:	d9400215 	stw	r5,8(sp)
100199f0:	d9000515 	stw	r4,20(sp)
100199f4:	d9800115 	stw	r6,4(sp)
100199f8:	3839883a 	mov	fp,r7
100199fc:	2811883a 	mov	r8,r5
10019a00:	42400007 	ldb	r9,0(r8)
10019a04:	4007883a 	mov	r3,r8
10019a08:	42000044 	addi	r8,r8,1
10019a0c:	ba45883a 	add	r2,r23,r9
10019a10:	10800043 	ldbu	r2,1(r2)
10019a14:	1080020c 	andi	r2,r2,8
10019a18:	103ff91e 	bne	r2,zero,10019a00 <__alt_data_end+0xf0019a00>
10019a1c:	00800b44 	movi	r2,45
10019a20:	48807826 	beq	r9,r2,10019c04 <_strtoull_r+0x250>
10019a24:	00800ac4 	movi	r2,43
10019a28:	48807b26 	beq	r9,r2,10019c18 <_strtoull_r+0x264>
10019a2c:	d8000415 	stw	zero,16(sp)
10019a30:	e0001726 	beq	fp,zero,10019a90 <_strtoull_r+0xdc>
10019a34:	00800404 	movi	r2,16
10019a38:	e0808d26 	beq	fp,r2,10019c70 <_strtoull_r+0x2bc>
10019a3c:	e027d7fa 	srai	r19,fp,31
10019a40:	013fffc4 	movi	r4,-1
10019a44:	200b883a 	mov	r5,r4
10019a48:	e00d883a 	mov	r6,fp
10019a4c:	980f883a 	mov	r7,r19
10019a50:	da000615 	stw	r8,24(sp)
10019a54:	da400715 	stw	r9,28(sp)
10019a58:	001dd440 	call	1001dd44 <__udivdi3>
10019a5c:	013fffc4 	movi	r4,-1
10019a60:	200b883a 	mov	r5,r4
10019a64:	e00d883a 	mov	r6,fp
10019a68:	980f883a 	mov	r7,r19
10019a6c:	1021883a 	mov	r16,r2
10019a70:	1823883a 	mov	r17,r3
10019a74:	001e3040 	call	1001e304 <__umoddi3>
10019a78:	da400717 	ldw	r9,28(sp)
10019a7c:	da000617 	ldw	r8,24(sp)
10019a80:	d8800315 	stw	r2,12(sp)
10019a84:	df000015 	stw	fp,0(sp)
10019a88:	8825883a 	mov	r18,r17
10019a8c:	00000c06 	br	10019ac0 <_strtoull_r+0x10c>
10019a90:	00800c04 	movi	r2,48
10019a94:	48806426 	beq	r9,r2,10019c28 <_strtoull_r+0x274>
10019a98:	00800284 	movi	r2,10
10019a9c:	01000144 	movi	r4,5
10019aa0:	042666b4 	movhi	r16,39322
10019aa4:	048666b4 	movhi	r18,6554
10019aa8:	d8800015 	stw	r2,0(sp)
10019aac:	d9000315 	stw	r4,12(sp)
10019ab0:	84266644 	addi	r16,r16,-26215
10019ab4:	94a66644 	addi	r18,r18,-26215
10019ab8:	0027883a 	mov	r19,zero
10019abc:	1039883a 	mov	fp,r2
10019ac0:	ba45883a 	add	r2,r23,r9
10019ac4:	12800043 	ldbu	r10,1(r2)
10019ac8:	402d883a 	mov	r22,r8
10019acc:	000d883a 	mov	r6,zero
10019ad0:	5080010c 	andi	r2,r10,4
10019ad4:	0009883a 	mov	r4,zero
10019ad8:	000b883a 	mov	r5,zero
10019adc:	04400044 	movi	r17,1
10019ae0:	057fffc4 	movi	r21,-1
10019ae4:	10000d26 	beq	r2,zero,10019b1c <_strtoull_r+0x168>
10019ae8:	4d3ff404 	addi	r20,r9,-48
10019aec:	a700110e 	bge	r20,fp,10019b34 <_strtoull_r+0x180>
10019af0:	35400426 	beq	r6,r21,10019b04 <_strtoull_r+0x150>
10019af4:	91400236 	bltu	r18,r5,10019b00 <_strtoull_r+0x14c>
10019af8:	2c80281e 	bne	r5,r18,10019b9c <_strtoull_r+0x1e8>
10019afc:	8100272e 	bgeu	r16,r4,10019b9c <_strtoull_r+0x1e8>
10019b00:	01bfffc4 	movi	r6,-1
10019b04:	b2400007 	ldb	r9,0(r22)
10019b08:	b5800044 	addi	r22,r22,1
10019b0c:	ba45883a 	add	r2,r23,r9
10019b10:	12800043 	ldbu	r10,1(r2)
10019b14:	5080010c 	andi	r2,r10,4
10019b18:	103ff31e 	bne	r2,zero,10019ae8 <__alt_data_end+0xf0019ae8>
10019b1c:	528000cc 	andi	r10,r10,3
10019b20:	50000426 	beq	r10,zero,10019b34 <_strtoull_r+0x180>
10019b24:	54402926 	beq	r10,r17,10019bcc <_strtoull_r+0x218>
10019b28:	00c015c4 	movi	r3,87
10019b2c:	48e9c83a 	sub	r20,r9,r3
10019b30:	a73fef16 	blt	r20,fp,10019af0 <__alt_data_end+0xf0019af0>
10019b34:	30002d16 	blt	r6,zero,10019bec <_strtoull_r+0x238>
10019b38:	d9c00417 	ldw	r7,16(sp)
10019b3c:	01c7c83a 	sub	r3,zero,r7
10019b40:	20c8f03a 	xor	r4,r4,r3
10019b44:	21c5883a 	add	r2,r4,r7
10019b48:	1109803a 	cmpltu	r4,r2,r4
10019b4c:	28c6f03a 	xor	r3,r5,r3
10019b50:	20c7883a 	add	r3,r4,r3
10019b54:	d9000117 	ldw	r4,4(sp)
10019b58:	20000426 	beq	r4,zero,10019b6c <_strtoull_r+0x1b8>
10019b5c:	30002126 	beq	r6,zero,10019be4 <_strtoull_r+0x230>
10019b60:	b5bfffc4 	addi	r22,r22,-1
10019b64:	d9c00117 	ldw	r7,4(sp)
10019b68:	3d800015 	stw	r22,0(r7)
10019b6c:	dfc01117 	ldw	ra,68(sp)
10019b70:	df001017 	ldw	fp,64(sp)
10019b74:	ddc00f17 	ldw	r23,60(sp)
10019b78:	dd800e17 	ldw	r22,56(sp)
10019b7c:	dd400d17 	ldw	r21,52(sp)
10019b80:	dd000c17 	ldw	r20,48(sp)
10019b84:	dcc00b17 	ldw	r19,44(sp)
10019b88:	dc800a17 	ldw	r18,40(sp)
10019b8c:	dc400917 	ldw	r17,36(sp)
10019b90:	dc000817 	ldw	r16,32(sp)
10019b94:	dec01204 	addi	sp,sp,72
10019b98:	f800283a 	ret
10019b9c:	24000d26 	beq	r4,r16,10019bd4 <_strtoull_r+0x220>
10019ba0:	d9800017 	ldw	r6,0(sp)
10019ba4:	980f883a 	mov	r7,r19
10019ba8:	001dc700 	call	1001dc70 <__muldi3>
10019bac:	a00bd7fa 	srai	r5,r20,31
10019bb0:	a085883a 	add	r2,r20,r2
10019bb4:	1513803a 	cmpltu	r9,r2,r20
10019bb8:	28c7883a 	add	r3,r5,r3
10019bbc:	1009883a 	mov	r4,r2
10019bc0:	48cb883a 	add	r5,r9,r3
10019bc4:	01800044 	movi	r6,1
10019bc8:	003fce06 	br	10019b04 <__alt_data_end+0xf0019b04>
10019bcc:	00c00dc4 	movi	r3,55
10019bd0:	003fd606 	br	10019b2c <__alt_data_end+0xf0019b2c>
10019bd4:	2cbff21e 	bne	r5,r18,10019ba0 <__alt_data_end+0xf0019ba0>
10019bd8:	d9c00317 	ldw	r7,12(sp)
10019bdc:	3d3fc816 	blt	r7,r20,10019b00 <__alt_data_end+0xf0019b00>
10019be0:	003fef06 	br	10019ba0 <__alt_data_end+0xf0019ba0>
10019be4:	dd800217 	ldw	r22,8(sp)
10019be8:	003fde06 	br	10019b64 <__alt_data_end+0xf0019b64>
10019bec:	d9000517 	ldw	r4,20(sp)
10019bf0:	00c00884 	movi	r3,34
10019bf4:	00bfffc4 	movi	r2,-1
10019bf8:	20c00015 	stw	r3,0(r4)
10019bfc:	1007883a 	mov	r3,r2
10019c00:	003fd406 	br	10019b54 <__alt_data_end+0xf0019b54>
10019c04:	00800044 	movi	r2,1
10019c08:	1a000084 	addi	r8,r3,2
10019c0c:	1a400047 	ldb	r9,1(r3)
10019c10:	d8800415 	stw	r2,16(sp)
10019c14:	003f8606 	br	10019a30 <__alt_data_end+0xf0019a30>
10019c18:	1a000084 	addi	r8,r3,2
10019c1c:	1a400047 	ldb	r9,1(r3)
10019c20:	d8000415 	stw	zero,16(sp)
10019c24:	003f8206 	br	10019a30 <__alt_data_end+0xf0019a30>
10019c28:	40c00003 	ldbu	r3,0(r8)
10019c2c:	00bff7c4 	movi	r2,-33
10019c30:	1884703a 	and	r2,r3,r2
10019c34:	10803fcc 	andi	r2,r2,255
10019c38:	1080201c 	xori	r2,r2,128
10019c3c:	10bfe004 	addi	r2,r2,-128
10019c40:	00c01604 	movi	r3,88
10019c44:	10c01426 	beq	r2,r3,10019c98 <_strtoull_r+0x2e4>
10019c48:	00800204 	movi	r2,8
10019c4c:	010001c4 	movi	r4,7
10019c50:	043fffc4 	movi	r16,-1
10019c54:	04880034 	movhi	r18,8192
10019c58:	d8800015 	stw	r2,0(sp)
10019c5c:	d9000315 	stw	r4,12(sp)
10019c60:	9425883a 	add	r18,r18,r16
10019c64:	0027883a 	mov	r19,zero
10019c68:	1039883a 	mov	fp,r2
10019c6c:	003f9406 	br	10019ac0 <__alt_data_end+0xf0019ac0>
10019c70:	00800c04 	movi	r2,48
10019c74:	48801426 	beq	r9,r2,10019cc8 <_strtoull_r+0x314>
10019c78:	04840034 	movhi	r18,4096
10019c7c:	008003c4 	movi	r2,15
10019c80:	94bfffc4 	addi	r18,r18,-1
10019c84:	d8800315 	stw	r2,12(sp)
10019c88:	043fffc4 	movi	r16,-1
10019c8c:	df000015 	stw	fp,0(sp)
10019c90:	0027883a 	mov	r19,zero
10019c94:	003f8a06 	br	10019ac0 <__alt_data_end+0xf0019ac0>
10019c98:	01000404 	movi	r4,16
10019c9c:	01c003c4 	movi	r7,15
10019ca0:	043fffc4 	movi	r16,-1
10019ca4:	04440034 	movhi	r17,4096
10019ca8:	42400047 	ldb	r9,1(r8)
10019cac:	d9000015 	stw	r4,0(sp)
10019cb0:	d9c00315 	stw	r7,12(sp)
10019cb4:	42000084 	addi	r8,r8,2
10019cb8:	8c23883a 	add	r17,r17,r16
10019cbc:	0027883a 	mov	r19,zero
10019cc0:	2039883a 	mov	fp,r4
10019cc4:	003f7006 	br	10019a88 <__alt_data_end+0xf0019a88>
10019cc8:	40c00003 	ldbu	r3,0(r8)
10019ccc:	00bff7c4 	movi	r2,-33
10019cd0:	1884703a 	and	r2,r3,r2
10019cd4:	10803fcc 	andi	r2,r2,255
10019cd8:	1080201c 	xori	r2,r2,128
10019cdc:	10bfe004 	addi	r2,r2,-128
10019ce0:	00c01604 	movi	r3,88
10019ce4:	10ffec26 	beq	r2,r3,10019c98 <__alt_data_end+0xf0019c98>
10019ce8:	01c003c4 	movi	r7,15
10019cec:	043fffc4 	movi	r16,-1
10019cf0:	04840034 	movhi	r18,4096
10019cf4:	d9c00315 	stw	r7,12(sp)
10019cf8:	9425883a 	add	r18,r18,r16
10019cfc:	df000015 	stw	fp,0(sp)
10019d00:	0027883a 	mov	r19,zero
10019d04:	003f6e06 	br	10019ac0 <__alt_data_end+0xf0019ac0>

10019d08 <__ssprint_r>:
10019d08:	30800217 	ldw	r2,8(r6)
10019d0c:	defff604 	addi	sp,sp,-40
10019d10:	ddc00715 	stw	r23,28(sp)
10019d14:	dcc00315 	stw	r19,12(sp)
10019d18:	dfc00915 	stw	ra,36(sp)
10019d1c:	df000815 	stw	fp,32(sp)
10019d20:	dd800615 	stw	r22,24(sp)
10019d24:	dd400515 	stw	r21,20(sp)
10019d28:	dd000415 	stw	r20,16(sp)
10019d2c:	dc800215 	stw	r18,8(sp)
10019d30:	dc400115 	stw	r17,4(sp)
10019d34:	dc000015 	stw	r16,0(sp)
10019d38:	3027883a 	mov	r19,r6
10019d3c:	35c00017 	ldw	r23,0(r6)
10019d40:	10005526 	beq	r2,zero,10019e98 <__ssprint_r+0x190>
10019d44:	2029883a 	mov	r20,r4
10019d48:	29000017 	ldw	r4,0(r5)
10019d4c:	2821883a 	mov	r16,r5
10019d50:	0039883a 	mov	fp,zero
10019d54:	0023883a 	mov	r17,zero
10019d58:	88003926 	beq	r17,zero,10019e40 <__ssprint_r+0x138>
10019d5c:	84800217 	ldw	r18,8(r16)
10019d60:	902d883a 	mov	r22,r18
10019d64:	8c803a36 	bltu	r17,r18,10019e50 <__ssprint_r+0x148>
10019d68:	80c0030b 	ldhu	r3,12(r16)
10019d6c:	1881200c 	andi	r2,r3,1152
10019d70:	10002626 	beq	r2,zero,10019e0c <__ssprint_r+0x104>
10019d74:	80800517 	ldw	r2,20(r16)
10019d78:	81400417 	ldw	r5,16(r16)
10019d7c:	89c00044 	addi	r7,r17,1
10019d80:	108d883a 	add	r6,r2,r2
10019d84:	3085883a 	add	r2,r6,r2
10019d88:	100cd7fa 	srli	r6,r2,31
10019d8c:	216dc83a 	sub	r22,r4,r5
10019d90:	3d89883a 	add	r4,r7,r22
10019d94:	3085883a 	add	r2,r6,r2
10019d98:	1025d07a 	srai	r18,r2,1
10019d9c:	900d883a 	mov	r6,r18
10019da0:	9100022e 	bgeu	r18,r4,10019dac <__ssprint_r+0xa4>
10019da4:	2025883a 	mov	r18,r4
10019da8:	200d883a 	mov	r6,r4
10019dac:	18c1000c 	andi	r3,r3,1024
10019db0:	a009883a 	mov	r4,r20
10019db4:	18002926 	beq	r3,zero,10019e5c <__ssprint_r+0x154>
10019db8:	300b883a 	mov	r5,r6
10019dbc:	001570c0 	call	1001570c <_malloc_r>
10019dc0:	102b883a 	mov	r21,r2
10019dc4:	10002b26 	beq	r2,zero,10019e74 <__ssprint_r+0x16c>
10019dc8:	81400417 	ldw	r5,16(r16)
10019dcc:	1009883a 	mov	r4,r2
10019dd0:	b00d883a 	mov	r6,r22
10019dd4:	000c7840 	call	1000c784 <memcpy>
10019dd8:	8080030b 	ldhu	r2,12(r16)
10019ddc:	00fedfc4 	movi	r3,-1153
10019de0:	10c4703a 	and	r2,r2,r3
10019de4:	10802014 	ori	r2,r2,128
10019de8:	8080030d 	sth	r2,12(r16)
10019dec:	ad89883a 	add	r4,r21,r22
10019df0:	95adc83a 	sub	r22,r18,r22
10019df4:	84800515 	stw	r18,20(r16)
10019df8:	85800215 	stw	r22,8(r16)
10019dfc:	85400415 	stw	r21,16(r16)
10019e00:	81000015 	stw	r4,0(r16)
10019e04:	8825883a 	mov	r18,r17
10019e08:	882d883a 	mov	r22,r17
10019e0c:	e00b883a 	mov	r5,fp
10019e10:	b00d883a 	mov	r6,r22
10019e14:	00161d80 	call	100161d8 <memmove>
10019e18:	80c00217 	ldw	r3,8(r16)
10019e1c:	81000017 	ldw	r4,0(r16)
10019e20:	98800217 	ldw	r2,8(r19)
10019e24:	1ca5c83a 	sub	r18,r3,r18
10019e28:	2589883a 	add	r4,r4,r22
10019e2c:	84800215 	stw	r18,8(r16)
10019e30:	81000015 	stw	r4,0(r16)
10019e34:	1463c83a 	sub	r17,r2,r17
10019e38:	9c400215 	stw	r17,8(r19)
10019e3c:	88001626 	beq	r17,zero,10019e98 <__ssprint_r+0x190>
10019e40:	bf000017 	ldw	fp,0(r23)
10019e44:	bc400117 	ldw	r17,4(r23)
10019e48:	bdc00204 	addi	r23,r23,8
10019e4c:	003fc206 	br	10019d58 <__alt_data_end+0xf0019d58>
10019e50:	8825883a 	mov	r18,r17
10019e54:	882d883a 	mov	r22,r17
10019e58:	003fec06 	br	10019e0c <__alt_data_end+0xf0019e0c>
10019e5c:	00172c00 	call	100172c0 <_realloc_r>
10019e60:	102b883a 	mov	r21,r2
10019e64:	103fe11e 	bne	r2,zero,10019dec <__alt_data_end+0xf0019dec>
10019e68:	81400417 	ldw	r5,16(r16)
10019e6c:	a009883a 	mov	r4,r20
10019e70:	0014b400 	call	10014b40 <_free_r>
10019e74:	80c0030b 	ldhu	r3,12(r16)
10019e78:	00800304 	movi	r2,12
10019e7c:	a0800015 	stw	r2,0(r20)
10019e80:	18c01014 	ori	r3,r3,64
10019e84:	80c0030d 	sth	r3,12(r16)
10019e88:	00bfffc4 	movi	r2,-1
10019e8c:	98000215 	stw	zero,8(r19)
10019e90:	98000115 	stw	zero,4(r19)
10019e94:	00000206 	br	10019ea0 <__ssprint_r+0x198>
10019e98:	98000115 	stw	zero,4(r19)
10019e9c:	0005883a 	mov	r2,zero
10019ea0:	dfc00917 	ldw	ra,36(sp)
10019ea4:	df000817 	ldw	fp,32(sp)
10019ea8:	ddc00717 	ldw	r23,28(sp)
10019eac:	dd800617 	ldw	r22,24(sp)
10019eb0:	dd400517 	ldw	r21,20(sp)
10019eb4:	dd000417 	ldw	r20,16(sp)
10019eb8:	dcc00317 	ldw	r19,12(sp)
10019ebc:	dc800217 	ldw	r18,8(sp)
10019ec0:	dc400117 	ldw	r17,4(sp)
10019ec4:	dc000017 	ldw	r16,0(sp)
10019ec8:	dec00a04 	addi	sp,sp,40
10019ecc:	f800283a 	ret

10019ed0 <___svfiprintf_internal_r>:
10019ed0:	2880030b 	ldhu	r2,12(r5)
10019ed4:	deffc904 	addi	sp,sp,-220
10019ed8:	dd403215 	stw	r21,200(sp)
10019edc:	dfc03615 	stw	ra,216(sp)
10019ee0:	df003515 	stw	fp,212(sp)
10019ee4:	ddc03415 	stw	r23,208(sp)
10019ee8:	dd803315 	stw	r22,204(sp)
10019eec:	dd003115 	stw	r20,196(sp)
10019ef0:	dcc03015 	stw	r19,192(sp)
10019ef4:	dc802f15 	stw	r18,188(sp)
10019ef8:	dc402e15 	stw	r17,184(sp)
10019efc:	dc002d15 	stw	r16,180(sp)
10019f00:	d9402715 	stw	r5,156(sp)
10019f04:	d9002915 	stw	r4,164(sp)
10019f08:	1080200c 	andi	r2,r2,128
10019f0c:	d9c02315 	stw	r7,140(sp)
10019f10:	302b883a 	mov	r21,r6
10019f14:	10000226 	beq	r2,zero,10019f20 <___svfiprintf_internal_r+0x50>
10019f18:	28800417 	ldw	r2,16(r5)
10019f1c:	1003ce26 	beq	r2,zero,1001ae58 <___svfiprintf_internal_r+0xf88>
10019f20:	dac01a04 	addi	r11,sp,104
10019f24:	da8019c4 	addi	r10,sp,103
10019f28:	dc802917 	ldw	r18,164(sp)
10019f2c:	dd002717 	ldw	r20,156(sp)
10019f30:	04c400b4 	movhi	r19,4098
10019f34:	dac01e15 	stw	r11,120(sp)
10019f38:	5a97c83a 	sub	r11,r11,r10
10019f3c:	9cd56004 	addi	r19,r19,21888
10019f40:	da801f15 	stw	r10,124(sp)
10019f44:	dec01a15 	stw	sp,104(sp)
10019f48:	d8001c15 	stw	zero,112(sp)
10019f4c:	d8001b15 	stw	zero,108(sp)
10019f50:	d8002a15 	stw	zero,168(sp)
10019f54:	d8002415 	stw	zero,144(sp)
10019f58:	d811883a 	mov	r8,sp
10019f5c:	dac02b15 	stw	r11,172(sp)
10019f60:	a8800007 	ldb	r2,0(r21)
10019f64:	10026826 	beq	r2,zero,1001a908 <___svfiprintf_internal_r+0xa38>
10019f68:	01000944 	movi	r4,37
10019f6c:	11026626 	beq	r2,r4,1001a908 <___svfiprintf_internal_r+0xa38>
10019f70:	a805883a 	mov	r2,r21
10019f74:	00000106 	br	10019f7c <___svfiprintf_internal_r+0xac>
10019f78:	19000326 	beq	r3,r4,10019f88 <___svfiprintf_internal_r+0xb8>
10019f7c:	10800044 	addi	r2,r2,1
10019f80:	10c00007 	ldb	r3,0(r2)
10019f84:	183ffc1e 	bne	r3,zero,10019f78 <__alt_data_end+0xf0019f78>
10019f88:	1561c83a 	sub	r16,r2,r21
10019f8c:	102d883a 	mov	r22,r2
10019f90:	80000e26 	beq	r16,zero,10019fcc <___svfiprintf_internal_r+0xfc>
10019f94:	d8c01c17 	ldw	r3,112(sp)
10019f98:	d8801b17 	ldw	r2,108(sp)
10019f9c:	45400015 	stw	r21,0(r8)
10019fa0:	1c07883a 	add	r3,r3,r16
10019fa4:	10800044 	addi	r2,r2,1
10019fa8:	d8c01c15 	stw	r3,112(sp)
10019fac:	44000115 	stw	r16,4(r8)
10019fb0:	d8801b15 	stw	r2,108(sp)
10019fb4:	00c001c4 	movi	r3,7
10019fb8:	1882d616 	blt	r3,r2,1001ab14 <___svfiprintf_internal_r+0xc44>
10019fbc:	42000204 	addi	r8,r8,8
10019fc0:	da802417 	ldw	r10,144(sp)
10019fc4:	5415883a 	add	r10,r10,r16
10019fc8:	da802415 	stw	r10,144(sp)
10019fcc:	b0800007 	ldb	r2,0(r22)
10019fd0:	10027326 	beq	r2,zero,1001a9a0 <___svfiprintf_internal_r+0xad0>
10019fd4:	b1000047 	ldb	r4,1(r22)
10019fd8:	b5400044 	addi	r21,r22,1
10019fdc:	d8001d85 	stb	zero,118(sp)
10019fe0:	000d883a 	mov	r6,zero
10019fe4:	043fffc4 	movi	r16,-1
10019fe8:	d8002115 	stw	zero,132(sp)
10019fec:	0023883a 	mov	r17,zero
10019ff0:	00c01604 	movi	r3,88
10019ff4:	01400244 	movi	r5,9
10019ff8:	02400a84 	movi	r9,42
10019ffc:	01c01b04 	movi	r7,108
1001a000:	ad400044 	addi	r21,r21,1
1001a004:	20bff804 	addi	r2,r4,-32
1001a008:	18819536 	bltu	r3,r2,1001a660 <___svfiprintf_internal_r+0x790>
1001a00c:	100490ba 	slli	r2,r2,2
1001a010:	02c400b4 	movhi	r11,4098
1001a014:	5ae80904 	addi	r11,r11,-24540
1001a018:	12c5883a 	add	r2,r2,r11
1001a01c:	10800017 	ldw	r2,0(r2)
1001a020:	1000683a 	jmp	r2
1001a024:	1001a560 	cmpeqi	zero,r2,1685
1001a028:	1001a660 	cmpeqi	zero,r2,1689
1001a02c:	1001a660 	cmpeqi	zero,r2,1689
1001a030:	1001a554 	ori	zero,r2,1685
1001a034:	1001a660 	cmpeqi	zero,r2,1689
1001a038:	1001a660 	cmpeqi	zero,r2,1689
1001a03c:	1001a660 	cmpeqi	zero,r2,1689
1001a040:	1001a660 	cmpeqi	zero,r2,1689
1001a044:	1001a660 	cmpeqi	zero,r2,1689
1001a048:	1001a660 	cmpeqi	zero,r2,1689
1001a04c:	1001a284 	addi	zero,r2,1674
1001a050:	1001a694 	ori	zero,r2,1690
1001a054:	1001a660 	cmpeqi	zero,r2,1689
1001a058:	1001a2ac 	andhi	zero,r2,1674
1001a05c:	1001a6a0 	cmpeqi	zero,r2,1690
1001a060:	1001a660 	cmpeqi	zero,r2,1689
1001a064:	1001a688 	cmpgei	zero,r2,1690
1001a068:	1001a628 	cmpgeui	zero,r2,1688
1001a06c:	1001a628 	cmpgeui	zero,r2,1688
1001a070:	1001a628 	cmpgeui	zero,r2,1688
1001a074:	1001a628 	cmpgeui	zero,r2,1688
1001a078:	1001a628 	cmpgeui	zero,r2,1688
1001a07c:	1001a628 	cmpgeui	zero,r2,1688
1001a080:	1001a628 	cmpgeui	zero,r2,1688
1001a084:	1001a628 	cmpgeui	zero,r2,1688
1001a088:	1001a628 	cmpgeui	zero,r2,1688
1001a08c:	1001a660 	cmpeqi	zero,r2,1689
1001a090:	1001a660 	cmpeqi	zero,r2,1689
1001a094:	1001a660 	cmpeqi	zero,r2,1689
1001a098:	1001a660 	cmpeqi	zero,r2,1689
1001a09c:	1001a660 	cmpeqi	zero,r2,1689
1001a0a0:	1001a660 	cmpeqi	zero,r2,1689
1001a0a4:	1001a660 	cmpeqi	zero,r2,1689
1001a0a8:	1001a660 	cmpeqi	zero,r2,1689
1001a0ac:	1001a660 	cmpeqi	zero,r2,1689
1001a0b0:	1001a660 	cmpeqi	zero,r2,1689
1001a0b4:	1001a5c0 	call	11001a5c <_gp+0xfd26f4>
1001a0b8:	1001a660 	cmpeqi	zero,r2,1689
1001a0bc:	1001a660 	cmpeqi	zero,r2,1689
1001a0c0:	1001a660 	cmpeqi	zero,r2,1689
1001a0c4:	1001a660 	cmpeqi	zero,r2,1689
1001a0c8:	1001a660 	cmpeqi	zero,r2,1689
1001a0cc:	1001a660 	cmpeqi	zero,r2,1689
1001a0d0:	1001a660 	cmpeqi	zero,r2,1689
1001a0d4:	1001a660 	cmpeqi	zero,r2,1689
1001a0d8:	1001a660 	cmpeqi	zero,r2,1689
1001a0dc:	1001a660 	cmpeqi	zero,r2,1689
1001a0e0:	1001a254 	ori	zero,r2,1673
1001a0e4:	1001a660 	cmpeqi	zero,r2,1689
1001a0e8:	1001a660 	cmpeqi	zero,r2,1689
1001a0ec:	1001a660 	cmpeqi	zero,r2,1689
1001a0f0:	1001a660 	cmpeqi	zero,r2,1689
1001a0f4:	1001a660 	cmpeqi	zero,r2,1689
1001a0f8:	1001a188 	cmpgei	zero,r2,1670
1001a0fc:	1001a660 	cmpeqi	zero,r2,1689
1001a100:	1001a660 	cmpeqi	zero,r2,1689
1001a104:	1001a4b4 	orhi	zero,r2,1682
1001a108:	1001a660 	cmpeqi	zero,r2,1689
1001a10c:	1001a660 	cmpeqi	zero,r2,1689
1001a110:	1001a660 	cmpeqi	zero,r2,1689
1001a114:	1001a660 	cmpeqi	zero,r2,1689
1001a118:	1001a660 	cmpeqi	zero,r2,1689
1001a11c:	1001a660 	cmpeqi	zero,r2,1689
1001a120:	1001a660 	cmpeqi	zero,r2,1689
1001a124:	1001a660 	cmpeqi	zero,r2,1689
1001a128:	1001a660 	cmpeqi	zero,r2,1689
1001a12c:	1001a660 	cmpeqi	zero,r2,1689
1001a130:	1001a3a0 	cmpeqi	zero,r2,1678
1001a134:	1001a360 	cmpeqi	zero,r2,1677
1001a138:	1001a660 	cmpeqi	zero,r2,1689
1001a13c:	1001a660 	cmpeqi	zero,r2,1689
1001a140:	1001a660 	cmpeqi	zero,r2,1689
1001a144:	1001a510 	cmplti	zero,r2,1684
1001a148:	1001a360 	cmpeqi	zero,r2,1677
1001a14c:	1001a660 	cmpeqi	zero,r2,1689
1001a150:	1001a660 	cmpeqi	zero,r2,1689
1001a154:	1001a4fc 	xorhi	zero,r2,1683
1001a158:	1001a660 	cmpeqi	zero,r2,1689
1001a15c:	1001a51c 	xori	zero,r2,1684
1001a160:	1001a258 	cmpnei	zero,r2,1673
1001a164:	1001a320 	cmpeqi	zero,r2,1676
1001a168:	1001a314 	ori	zero,r2,1676
1001a16c:	1001a660 	cmpeqi	zero,r2,1689
1001a170:	1001a2b8 	rdprs	zero,r2,1674
1001a174:	1001a660 	cmpeqi	zero,r2,1689
1001a178:	1001a18c 	andi	zero,r2,1670
1001a17c:	1001a660 	cmpeqi	zero,r2,1689
1001a180:	1001a660 	cmpeqi	zero,r2,1689
1001a184:	1001a57c 	xorhi	zero,r2,1685
1001a188:	8c400414 	ori	r17,r17,16
1001a18c:	88c0080c 	andi	r3,r17,32
1001a190:	d8802317 	ldw	r2,140(sp)
1001a194:	18029626 	beq	r3,zero,1001abf0 <___svfiprintf_internal_r+0xd20>
1001a198:	dac02317 	ldw	r11,140(sp)
1001a19c:	12400017 	ldw	r9,0(r2)
1001a1a0:	12800117 	ldw	r10,4(r2)
1001a1a4:	5ac00204 	addi	r11,r11,8
1001a1a8:	dac02315 	stw	r11,140(sp)
1001a1ac:	00800044 	movi	r2,1
1001a1b0:	4a86b03a 	or	r3,r9,r10
1001a1b4:	d8001d85 	stb	zero,118(sp)
1001a1b8:	8039883a 	mov	fp,r16
1001a1bc:	0017883a 	mov	r11,zero
1001a1c0:	80000216 	blt	r16,zero,1001a1cc <___svfiprintf_internal_r+0x2fc>
1001a1c4:	013fdfc4 	movi	r4,-129
1001a1c8:	8922703a 	and	r17,r17,r4
1001a1cc:	1801d01e 	bne	r3,zero,1001a910 <___svfiprintf_internal_r+0xa40>
1001a1d0:	80024426 	beq	r16,zero,1001aae4 <___svfiprintf_internal_r+0xc14>
1001a1d4:	10803fcc 	andi	r2,r2,255
1001a1d8:	00c00044 	movi	r3,1
1001a1dc:	10c2b326 	beq	r2,r3,1001acac <___svfiprintf_internal_r+0xddc>
1001a1e0:	00c00084 	movi	r3,2
1001a1e4:	10c25b26 	beq	r2,r3,1001ab54 <___svfiprintf_internal_r+0xc84>
1001a1e8:	d8c01a04 	addi	r3,sp,104
1001a1ec:	4808d0fa 	srli	r4,r9,3
1001a1f0:	500a977a 	slli	r5,r10,29
1001a1f4:	5014d0fa 	srli	r10,r10,3
1001a1f8:	4a4001cc 	andi	r9,r9,7
1001a1fc:	48800c04 	addi	r2,r9,48
1001a200:	18ffffc4 	addi	r3,r3,-1
1001a204:	2912b03a 	or	r9,r5,r4
1001a208:	18800005 	stb	r2,0(r3)
1001a20c:	4a88b03a 	or	r4,r9,r10
1001a210:	203ff61e 	bne	r4,zero,1001a1ec <__alt_data_end+0xf001a1ec>
1001a214:	8900004c 	andi	r4,r17,1
1001a218:	d8c02615 	stw	r3,152(sp)
1001a21c:	2002951e 	bne	r4,zero,1001ac74 <___svfiprintf_internal_r+0xda4>
1001a220:	da801e17 	ldw	r10,120(sp)
1001a224:	50f9c83a 	sub	fp,r10,r3
1001a228:	df002015 	stw	fp,128(sp)
1001a22c:	e400010e 	bge	fp,r16,1001a234 <___svfiprintf_internal_r+0x364>
1001a230:	dc002015 	stw	r16,128(sp)
1001a234:	5ac03fcc 	andi	r11,r11,255
1001a238:	5ac0201c 	xori	r11,r11,128
1001a23c:	5affe004 	addi	r11,r11,-128
1001a240:	58006326 	beq	r11,zero,1001a3d0 <___svfiprintf_internal_r+0x500>
1001a244:	d8c02017 	ldw	r3,128(sp)
1001a248:	18c00044 	addi	r3,r3,1
1001a24c:	d8c02015 	stw	r3,128(sp)
1001a250:	00005f06 	br	1001a3d0 <___svfiprintf_internal_r+0x500>
1001a254:	8c400414 	ori	r17,r17,16
1001a258:	88c0080c 	andi	r3,r17,32
1001a25c:	d8802317 	ldw	r2,140(sp)
1001a260:	18027826 	beq	r3,zero,1001ac44 <___svfiprintf_internal_r+0xd74>
1001a264:	dac02317 	ldw	r11,140(sp)
1001a268:	12400017 	ldw	r9,0(r2)
1001a26c:	12800117 	ldw	r10,4(r2)
1001a270:	5ac00204 	addi	r11,r11,8
1001a274:	dac02315 	stw	r11,140(sp)
1001a278:	0005883a 	mov	r2,zero
1001a27c:	4a86b03a 	or	r3,r9,r10
1001a280:	003fcc06 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001a284:	da802317 	ldw	r10,140(sp)
1001a288:	dac02317 	ldw	r11,140(sp)
1001a28c:	52800017 	ldw	r10,0(r10)
1001a290:	58800104 	addi	r2,r11,4
1001a294:	da802115 	stw	r10,132(sp)
1001a298:	50028a0e 	bge	r10,zero,1001acc4 <___svfiprintf_internal_r+0xdf4>
1001a29c:	da802117 	ldw	r10,132(sp)
1001a2a0:	d8802315 	stw	r2,140(sp)
1001a2a4:	0295c83a 	sub	r10,zero,r10
1001a2a8:	da802115 	stw	r10,132(sp)
1001a2ac:	8c400114 	ori	r17,r17,4
1001a2b0:	a9000007 	ldb	r4,0(r21)
1001a2b4:	003f5206 	br	1001a000 <__alt_data_end+0xf001a000>
1001a2b8:	da802317 	ldw	r10,140(sp)
1001a2bc:	dac02317 	ldw	r11,140(sp)
1001a2c0:	d8001d85 	stb	zero,118(sp)
1001a2c4:	52800017 	ldw	r10,0(r10)
1001a2c8:	5dc00104 	addi	r23,r11,4
1001a2cc:	da802615 	stw	r10,152(sp)
1001a2d0:	5002eb26 	beq	r10,zero,1001ae80 <___svfiprintf_internal_r+0xfb0>
1001a2d4:	d9002617 	ldw	r4,152(sp)
1001a2d8:	8002d716 	blt	r16,zero,1001ae38 <___svfiprintf_internal_r+0xf68>
1001a2dc:	000b883a 	mov	r5,zero
1001a2e0:	800d883a 	mov	r6,r16
1001a2e4:	da002c15 	stw	r8,176(sp)
1001a2e8:	00160f00 	call	100160f0 <memchr>
1001a2ec:	da002c17 	ldw	r8,176(sp)
1001a2f0:	1002fb26 	beq	r2,zero,1001aee0 <___svfiprintf_internal_r+0x1010>
1001a2f4:	d8c02617 	ldw	r3,152(sp)
1001a2f8:	10f9c83a 	sub	fp,r2,r3
1001a2fc:	8700010e 	bge	r16,fp,1001a304 <___svfiprintf_internal_r+0x434>
1001a300:	8039883a 	mov	fp,r16
1001a304:	dac01d83 	ldbu	r11,118(sp)
1001a308:	ddc02315 	stw	r23,140(sp)
1001a30c:	0021883a 	mov	r16,zero
1001a310:	003fc506 	br	1001a228 <__alt_data_end+0xf001a228>
1001a314:	8c400814 	ori	r17,r17,32
1001a318:	a9000007 	ldb	r4,0(r21)
1001a31c:	003f3806 	br	1001a000 <__alt_data_end+0xf001a000>
1001a320:	dac02317 	ldw	r11,140(sp)
1001a324:	00800c04 	movi	r2,48
1001a328:	d8801d05 	stb	r2,116(sp)
1001a32c:	5a400017 	ldw	r9,0(r11)
1001a330:	00801e04 	movi	r2,120
1001a334:	d8801d45 	stb	r2,117(sp)
1001a338:	008400b4 	movhi	r2,4098
1001a33c:	10943e04 	addi	r2,r2,20728
1001a340:	5ac00104 	addi	r11,r11,4
1001a344:	d8802a15 	stw	r2,168(sp)
1001a348:	0015883a 	mov	r10,zero
1001a34c:	8c400094 	ori	r17,r17,2
1001a350:	dac02315 	stw	r11,140(sp)
1001a354:	00800084 	movi	r2,2
1001a358:	4807883a 	mov	r3,r9
1001a35c:	003f9506 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001a360:	d9801d85 	stb	r6,118(sp)
1001a364:	8880080c 	andi	r2,r17,32
1001a368:	d8c02317 	ldw	r3,140(sp)
1001a36c:	10009926 	beq	r2,zero,1001a5d4 <___svfiprintf_internal_r+0x704>
1001a370:	dac02317 	ldw	r11,140(sp)
1001a374:	18800117 	ldw	r2,4(r3)
1001a378:	1a400017 	ldw	r9,0(r3)
1001a37c:	5ac00204 	addi	r11,r11,8
1001a380:	dac02315 	stw	r11,140(sp)
1001a384:	1015883a 	mov	r10,r2
1001a388:	10009d16 	blt	r2,zero,1001a600 <___svfiprintf_internal_r+0x730>
1001a38c:	dac01d83 	ldbu	r11,118(sp)
1001a390:	8039883a 	mov	fp,r16
1001a394:	00800044 	movi	r2,1
1001a398:	4a86b03a 	or	r3,r9,r10
1001a39c:	003f8806 	br	1001a1c0 <__alt_data_end+0xf001a1c0>
1001a3a0:	dac02317 	ldw	r11,140(sp)
1001a3a4:	00c00044 	movi	r3,1
1001a3a8:	da801004 	addi	r10,sp,64
1001a3ac:	58800017 	ldw	r2,0(r11)
1001a3b0:	5ac00104 	addi	r11,r11,4
1001a3b4:	d8c02015 	stw	r3,128(sp)
1001a3b8:	d8001d85 	stb	zero,118(sp)
1001a3bc:	d8801005 	stb	r2,64(sp)
1001a3c0:	dac02315 	stw	r11,140(sp)
1001a3c4:	1839883a 	mov	fp,r3
1001a3c8:	da802615 	stw	r10,152(sp)
1001a3cc:	0021883a 	mov	r16,zero
1001a3d0:	8a80008c 	andi	r10,r17,2
1001a3d4:	da802215 	stw	r10,136(sp)
1001a3d8:	50000326 	beq	r10,zero,1001a3e8 <___svfiprintf_internal_r+0x518>
1001a3dc:	dac02017 	ldw	r11,128(sp)
1001a3e0:	5ac00084 	addi	r11,r11,2
1001a3e4:	dac02015 	stw	r11,128(sp)
1001a3e8:	88c0210c 	andi	r3,r17,132
1001a3ec:	d8c02515 	stw	r3,148(sp)
1001a3f0:	1800bb1e 	bne	r3,zero,1001a6e0 <___svfiprintf_internal_r+0x810>
1001a3f4:	da802117 	ldw	r10,132(sp)
1001a3f8:	dac02017 	ldw	r11,128(sp)
1001a3fc:	52edc83a 	sub	r22,r10,r11
1001a400:	0580b70e 	bge	zero,r22,1001a6e0 <___svfiprintf_internal_r+0x810>
1001a404:	02400404 	movi	r9,16
1001a408:	d8c01c17 	ldw	r3,112(sp)
1001a40c:	d8801b17 	ldw	r2,108(sp)
1001a410:	4d82a70e 	bge	r9,r22,1001aeb0 <___svfiprintf_internal_r+0xfe0>
1001a414:	014400b4 	movhi	r5,4098
1001a418:	29556404 	addi	r5,r5,21904
1001a41c:	d9402815 	stw	r5,160(sp)
1001a420:	05c001c4 	movi	r23,7
1001a424:	00000306 	br	1001a434 <___svfiprintf_internal_r+0x564>
1001a428:	b5bffc04 	addi	r22,r22,-16
1001a42c:	42000204 	addi	r8,r8,8
1001a430:	4d80150e 	bge	r9,r22,1001a488 <___svfiprintf_internal_r+0x5b8>
1001a434:	028400b4 	movhi	r10,4098
1001a438:	18c00404 	addi	r3,r3,16
1001a43c:	10800044 	addi	r2,r2,1
1001a440:	52956404 	addi	r10,r10,21904
1001a444:	42800015 	stw	r10,0(r8)
1001a448:	42400115 	stw	r9,4(r8)
1001a44c:	d8c01c15 	stw	r3,112(sp)
1001a450:	d8801b15 	stw	r2,108(sp)
1001a454:	b8bff40e 	bge	r23,r2,1001a428 <__alt_data_end+0xf001a428>
1001a458:	9009883a 	mov	r4,r18
1001a45c:	a00b883a 	mov	r5,r20
1001a460:	d9801a04 	addi	r6,sp,104
1001a464:	da402c15 	stw	r9,176(sp)
1001a468:	0019d080 	call	10019d08 <__ssprint_r>
1001a46c:	da402c17 	ldw	r9,176(sp)
1001a470:	1001511e 	bne	r2,zero,1001a9b8 <___svfiprintf_internal_r+0xae8>
1001a474:	b5bffc04 	addi	r22,r22,-16
1001a478:	d8c01c17 	ldw	r3,112(sp)
1001a47c:	d8801b17 	ldw	r2,108(sp)
1001a480:	d811883a 	mov	r8,sp
1001a484:	4dbfeb16 	blt	r9,r22,1001a434 <__alt_data_end+0xf001a434>
1001a488:	dac02817 	ldw	r11,160(sp)
1001a48c:	b0c7883a 	add	r3,r22,r3
1001a490:	10800044 	addi	r2,r2,1
1001a494:	42c00015 	stw	r11,0(r8)
1001a498:	45800115 	stw	r22,4(r8)
1001a49c:	d8c01c15 	stw	r3,112(sp)
1001a4a0:	d8801b15 	stw	r2,108(sp)
1001a4a4:	010001c4 	movi	r4,7
1001a4a8:	2081dd16 	blt	r4,r2,1001ac20 <___svfiprintf_internal_r+0xd50>
1001a4ac:	42000204 	addi	r8,r8,8
1001a4b0:	00008d06 	br	1001a6e8 <___svfiprintf_internal_r+0x818>
1001a4b4:	00c400b4 	movhi	r3,4098
1001a4b8:	18d43904 	addi	r3,r3,20708
1001a4bc:	d8c02a15 	stw	r3,168(sp)
1001a4c0:	d9801d85 	stb	r6,118(sp)
1001a4c4:	88c0080c 	andi	r3,r17,32
1001a4c8:	d8802317 	ldw	r2,140(sp)
1001a4cc:	18003226 	beq	r3,zero,1001a598 <___svfiprintf_internal_r+0x6c8>
1001a4d0:	da802317 	ldw	r10,140(sp)
1001a4d4:	12400017 	ldw	r9,0(r2)
1001a4d8:	52800204 	addi	r10,r10,8
1001a4dc:	da802315 	stw	r10,140(sp)
1001a4e0:	12800117 	ldw	r10,4(r2)
1001a4e4:	8880004c 	andi	r2,r17,1
1001a4e8:	1001be26 	beq	r2,zero,1001abe4 <___svfiprintf_internal_r+0xd14>
1001a4ec:	4a86b03a 	or	r3,r9,r10
1001a4f0:	1802291e 	bne	r3,zero,1001ad98 <___svfiprintf_internal_r+0xec8>
1001a4f4:	00800084 	movi	r2,2
1001a4f8:	003f2e06 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001a4fc:	a9000007 	ldb	r4,0(r21)
1001a500:	a805883a 	mov	r2,r21
1001a504:	21c22a26 	beq	r4,r7,1001adb0 <___svfiprintf_internal_r+0xee0>
1001a508:	8c400414 	ori	r17,r17,16
1001a50c:	003ebc06 	br	1001a000 <__alt_data_end+0xf001a000>
1001a510:	8c401014 	ori	r17,r17,64
1001a514:	a9000007 	ldb	r4,0(r21)
1001a518:	003eb906 	br	1001a000 <__alt_data_end+0xf001a000>
1001a51c:	d9801d85 	stb	r6,118(sp)
1001a520:	8880080c 	andi	r2,r17,32
1001a524:	1002131e 	bne	r2,zero,1001ad74 <___svfiprintf_internal_r+0xea4>
1001a528:	8880040c 	andi	r2,r17,16
1001a52c:	1002241e 	bne	r2,zero,1001adc0 <___svfiprintf_internal_r+0xef0>
1001a530:	8c40100c 	andi	r17,r17,64
1001a534:	88022226 	beq	r17,zero,1001adc0 <___svfiprintf_internal_r+0xef0>
1001a538:	dac02317 	ldw	r11,140(sp)
1001a53c:	da802417 	ldw	r10,144(sp)
1001a540:	58800017 	ldw	r2,0(r11)
1001a544:	5ac00104 	addi	r11,r11,4
1001a548:	dac02315 	stw	r11,140(sp)
1001a54c:	1280000d 	sth	r10,0(r2)
1001a550:	003e8306 	br	10019f60 <__alt_data_end+0xf0019f60>
1001a554:	8c400054 	ori	r17,r17,1
1001a558:	a9000007 	ldb	r4,0(r21)
1001a55c:	003ea806 	br	1001a000 <__alt_data_end+0xf001a000>
1001a560:	30803fcc 	andi	r2,r6,255
1001a564:	1080201c 	xori	r2,r2,128
1001a568:	10bfe004 	addi	r2,r2,-128
1001a56c:	1001ff1e 	bne	r2,zero,1001ad6c <___svfiprintf_internal_r+0xe9c>
1001a570:	01800804 	movi	r6,32
1001a574:	a9000007 	ldb	r4,0(r21)
1001a578:	003ea106 	br	1001a000 <__alt_data_end+0xf001a000>
1001a57c:	02c400b4 	movhi	r11,4098
1001a580:	5ad43e04 	addi	r11,r11,20728
1001a584:	dac02a15 	stw	r11,168(sp)
1001a588:	d9801d85 	stb	r6,118(sp)
1001a58c:	88c0080c 	andi	r3,r17,32
1001a590:	d8802317 	ldw	r2,140(sp)
1001a594:	183fce1e 	bne	r3,zero,1001a4d0 <__alt_data_end+0xf001a4d0>
1001a598:	88c0040c 	andi	r3,r17,16
1001a59c:	1801ed1e 	bne	r3,zero,1001ad54 <___svfiprintf_internal_r+0xe84>
1001a5a0:	88c0100c 	andi	r3,r17,64
1001a5a4:	18021a26 	beq	r3,zero,1001ae10 <___svfiprintf_internal_r+0xf40>
1001a5a8:	da802317 	ldw	r10,140(sp)
1001a5ac:	1240000b 	ldhu	r9,0(r2)
1001a5b0:	52800104 	addi	r10,r10,4
1001a5b4:	da802315 	stw	r10,140(sp)
1001a5b8:	0015883a 	mov	r10,zero
1001a5bc:	003fc906 	br	1001a4e4 <__alt_data_end+0xf001a4e4>
1001a5c0:	8c400414 	ori	r17,r17,16
1001a5c4:	d9801d85 	stb	r6,118(sp)
1001a5c8:	8880080c 	andi	r2,r17,32
1001a5cc:	d8c02317 	ldw	r3,140(sp)
1001a5d0:	103f671e 	bne	r2,zero,1001a370 <__alt_data_end+0xf001a370>
1001a5d4:	8880040c 	andi	r2,r17,16
1001a5d8:	1001c71e 	bne	r2,zero,1001acf8 <___svfiprintf_internal_r+0xe28>
1001a5dc:	8880100c 	andi	r2,r17,64
1001a5e0:	1001c526 	beq	r2,zero,1001acf8 <___svfiprintf_internal_r+0xe28>
1001a5e4:	1a40000f 	ldh	r9,0(r3)
1001a5e8:	dac02317 	ldw	r11,140(sp)
1001a5ec:	4815d7fa 	srai	r10,r9,31
1001a5f0:	5ac00104 	addi	r11,r11,4
1001a5f4:	dac02315 	stw	r11,140(sp)
1001a5f8:	5005883a 	mov	r2,r10
1001a5fc:	103f630e 	bge	r2,zero,1001a38c <__alt_data_end+0xf001a38c>
1001a600:	0253c83a 	sub	r9,zero,r9
1001a604:	4804c03a 	cmpne	r2,r9,zero
1001a608:	0295c83a 	sub	r10,zero,r10
1001a60c:	5095c83a 	sub	r10,r10,r2
1001a610:	02c00b44 	movi	r11,45
1001a614:	dac01d85 	stb	r11,118(sp)
1001a618:	8039883a 	mov	fp,r16
1001a61c:	00800044 	movi	r2,1
1001a620:	4a86b03a 	or	r3,r9,r10
1001a624:	003ee606 	br	1001a1c0 <__alt_data_end+0xf001a1c0>
1001a628:	a815883a 	mov	r10,r21
1001a62c:	d8002115 	stw	zero,132(sp)
1001a630:	20bff404 	addi	r2,r4,-48
1001a634:	51000007 	ldb	r4,0(r10)
1001a638:	da802117 	ldw	r10,132(sp)
1001a63c:	ad400044 	addi	r21,r21,1
1001a640:	52c002a4 	muli	r11,r10,10
1001a644:	a815883a 	mov	r10,r21
1001a648:	5885883a 	add	r2,r11,r2
1001a64c:	d8802115 	stw	r2,132(sp)
1001a650:	20bff404 	addi	r2,r4,-48
1001a654:	28bff72e 	bgeu	r5,r2,1001a634 <__alt_data_end+0xf001a634>
1001a658:	20bff804 	addi	r2,r4,-32
1001a65c:	18be6b2e 	bgeu	r3,r2,1001a00c <__alt_data_end+0xf001a00c>
1001a660:	d9801d85 	stb	r6,118(sp)
1001a664:	2000ce26 	beq	r4,zero,1001a9a0 <___svfiprintf_internal_r+0xad0>
1001a668:	02800044 	movi	r10,1
1001a66c:	dac01004 	addi	r11,sp,64
1001a670:	da802015 	stw	r10,128(sp)
1001a674:	d9001005 	stb	r4,64(sp)
1001a678:	d8001d85 	stb	zero,118(sp)
1001a67c:	5039883a 	mov	fp,r10
1001a680:	dac02615 	stw	r11,152(sp)
1001a684:	003f5106 	br	1001a3cc <__alt_data_end+0xf001a3cc>
1001a688:	8c402014 	ori	r17,r17,128
1001a68c:	a9000007 	ldb	r4,0(r21)
1001a690:	003e5b06 	br	1001a000 <__alt_data_end+0xf001a000>
1001a694:	01800ac4 	movi	r6,43
1001a698:	a9000007 	ldb	r4,0(r21)
1001a69c:	003e5806 	br	1001a000 <__alt_data_end+0xf001a000>
1001a6a0:	a9000007 	ldb	r4,0(r21)
1001a6a4:	aa800044 	addi	r10,r21,1
1001a6a8:	22421426 	beq	r4,r9,1001aefc <___svfiprintf_internal_r+0x102c>
1001a6ac:	20bff404 	addi	r2,r4,-48
1001a6b0:	502b883a 	mov	r21,r10
1001a6b4:	0021883a 	mov	r16,zero
1001a6b8:	28be5236 	bltu	r5,r2,1001a004 <__alt_data_end+0xf001a004>
1001a6bc:	a9000007 	ldb	r4,0(r21)
1001a6c0:	840002a4 	muli	r16,r16,10
1001a6c4:	ad400044 	addi	r21,r21,1
1001a6c8:	1421883a 	add	r16,r2,r16
1001a6cc:	20bff404 	addi	r2,r4,-48
1001a6d0:	28bffa2e 	bgeu	r5,r2,1001a6bc <__alt_data_end+0xf001a6bc>
1001a6d4:	803e4b0e 	bge	r16,zero,1001a004 <__alt_data_end+0xf001a004>
1001a6d8:	043fffc4 	movi	r16,-1
1001a6dc:	003e4906 	br	1001a004 <__alt_data_end+0xf001a004>
1001a6e0:	d8c01c17 	ldw	r3,112(sp)
1001a6e4:	d8801b17 	ldw	r2,108(sp)
1001a6e8:	d9001d87 	ldb	r4,118(sp)
1001a6ec:	20000b26 	beq	r4,zero,1001a71c <___svfiprintf_internal_r+0x84c>
1001a6f0:	d9001d84 	addi	r4,sp,118
1001a6f4:	18c00044 	addi	r3,r3,1
1001a6f8:	10800044 	addi	r2,r2,1
1001a6fc:	41000015 	stw	r4,0(r8)
1001a700:	01000044 	movi	r4,1
1001a704:	41000115 	stw	r4,4(r8)
1001a708:	d8c01c15 	stw	r3,112(sp)
1001a70c:	d8801b15 	stw	r2,108(sp)
1001a710:	010001c4 	movi	r4,7
1001a714:	20811e16 	blt	r4,r2,1001ab90 <___svfiprintf_internal_r+0xcc0>
1001a718:	42000204 	addi	r8,r8,8
1001a71c:	da802217 	ldw	r10,136(sp)
1001a720:	50000b26 	beq	r10,zero,1001a750 <___svfiprintf_internal_r+0x880>
1001a724:	d9001d04 	addi	r4,sp,116
1001a728:	18c00084 	addi	r3,r3,2
1001a72c:	10800044 	addi	r2,r2,1
1001a730:	41000015 	stw	r4,0(r8)
1001a734:	01000084 	movi	r4,2
1001a738:	41000115 	stw	r4,4(r8)
1001a73c:	d8c01c15 	stw	r3,112(sp)
1001a740:	d8801b15 	stw	r2,108(sp)
1001a744:	010001c4 	movi	r4,7
1001a748:	20811a16 	blt	r4,r2,1001abb4 <___svfiprintf_internal_r+0xce4>
1001a74c:	42000204 	addi	r8,r8,8
1001a750:	dac02517 	ldw	r11,148(sp)
1001a754:	01002004 	movi	r4,128
1001a758:	5900a826 	beq	r11,r4,1001a9fc <___svfiprintf_internal_r+0xb2c>
1001a75c:	8721c83a 	sub	r16,r16,fp
1001a760:	0400260e 	bge	zero,r16,1001a7fc <___svfiprintf_internal_r+0x92c>
1001a764:	01c00404 	movi	r7,16
1001a768:	3c01a50e 	bge	r7,r16,1001ae00 <___svfiprintf_internal_r+0xf30>
1001a76c:	010400b4 	movhi	r4,4098
1001a770:	21156004 	addi	r4,r4,21888
1001a774:	d9002215 	stw	r4,136(sp)
1001a778:	382f883a 	mov	r23,r7
1001a77c:	058001c4 	movi	r22,7
1001a780:	00000306 	br	1001a790 <___svfiprintf_internal_r+0x8c0>
1001a784:	843ffc04 	addi	r16,r16,-16
1001a788:	42000204 	addi	r8,r8,8
1001a78c:	bc00110e 	bge	r23,r16,1001a7d4 <___svfiprintf_internal_r+0x904>
1001a790:	18c00404 	addi	r3,r3,16
1001a794:	10800044 	addi	r2,r2,1
1001a798:	44c00015 	stw	r19,0(r8)
1001a79c:	45c00115 	stw	r23,4(r8)
1001a7a0:	d8c01c15 	stw	r3,112(sp)
1001a7a4:	d8801b15 	stw	r2,108(sp)
1001a7a8:	b0bff60e 	bge	r22,r2,1001a784 <__alt_data_end+0xf001a784>
1001a7ac:	9009883a 	mov	r4,r18
1001a7b0:	a00b883a 	mov	r5,r20
1001a7b4:	d9801a04 	addi	r6,sp,104
1001a7b8:	0019d080 	call	10019d08 <__ssprint_r>
1001a7bc:	10007e1e 	bne	r2,zero,1001a9b8 <___svfiprintf_internal_r+0xae8>
1001a7c0:	843ffc04 	addi	r16,r16,-16
1001a7c4:	d8c01c17 	ldw	r3,112(sp)
1001a7c8:	d8801b17 	ldw	r2,108(sp)
1001a7cc:	d811883a 	mov	r8,sp
1001a7d0:	bc3fef16 	blt	r23,r16,1001a790 <__alt_data_end+0xf001a790>
1001a7d4:	da802217 	ldw	r10,136(sp)
1001a7d8:	1c07883a 	add	r3,r3,r16
1001a7dc:	10800044 	addi	r2,r2,1
1001a7e0:	42800015 	stw	r10,0(r8)
1001a7e4:	44000115 	stw	r16,4(r8)
1001a7e8:	d8c01c15 	stw	r3,112(sp)
1001a7ec:	d8801b15 	stw	r2,108(sp)
1001a7f0:	010001c4 	movi	r4,7
1001a7f4:	2080ce16 	blt	r4,r2,1001ab30 <___svfiprintf_internal_r+0xc60>
1001a7f8:	42000204 	addi	r8,r8,8
1001a7fc:	dac02617 	ldw	r11,152(sp)
1001a800:	e0c7883a 	add	r3,fp,r3
1001a804:	10800044 	addi	r2,r2,1
1001a808:	42c00015 	stw	r11,0(r8)
1001a80c:	47000115 	stw	fp,4(r8)
1001a810:	d8c01c15 	stw	r3,112(sp)
1001a814:	d8801b15 	stw	r2,108(sp)
1001a818:	010001c4 	movi	r4,7
1001a81c:	2080a316 	blt	r4,r2,1001aaac <___svfiprintf_internal_r+0xbdc>
1001a820:	42000204 	addi	r8,r8,8
1001a824:	8c40010c 	andi	r17,r17,4
1001a828:	88002b26 	beq	r17,zero,1001a8d8 <___svfiprintf_internal_r+0xa08>
1001a82c:	da802117 	ldw	r10,132(sp)
1001a830:	dac02017 	ldw	r11,128(sp)
1001a834:	52e1c83a 	sub	r16,r10,r11
1001a838:	0400270e 	bge	zero,r16,1001a8d8 <___svfiprintf_internal_r+0xa08>
1001a83c:	04400404 	movi	r17,16
1001a840:	d8801b17 	ldw	r2,108(sp)
1001a844:	8c019e0e 	bge	r17,r16,1001aec0 <___svfiprintf_internal_r+0xff0>
1001a848:	014400b4 	movhi	r5,4098
1001a84c:	29556404 	addi	r5,r5,21904
1001a850:	d9402815 	stw	r5,160(sp)
1001a854:	070001c4 	movi	fp,7
1001a858:	00000306 	br	1001a868 <___svfiprintf_internal_r+0x998>
1001a85c:	843ffc04 	addi	r16,r16,-16
1001a860:	42000204 	addi	r8,r8,8
1001a864:	8c00130e 	bge	r17,r16,1001a8b4 <___svfiprintf_internal_r+0x9e4>
1001a868:	028400b4 	movhi	r10,4098
1001a86c:	18c00404 	addi	r3,r3,16
1001a870:	10800044 	addi	r2,r2,1
1001a874:	52956404 	addi	r10,r10,21904
1001a878:	42800015 	stw	r10,0(r8)
1001a87c:	44400115 	stw	r17,4(r8)
1001a880:	d8c01c15 	stw	r3,112(sp)
1001a884:	d8801b15 	stw	r2,108(sp)
1001a888:	e0bff40e 	bge	fp,r2,1001a85c <__alt_data_end+0xf001a85c>
1001a88c:	9009883a 	mov	r4,r18
1001a890:	a00b883a 	mov	r5,r20
1001a894:	d9801a04 	addi	r6,sp,104
1001a898:	0019d080 	call	10019d08 <__ssprint_r>
1001a89c:	1000461e 	bne	r2,zero,1001a9b8 <___svfiprintf_internal_r+0xae8>
1001a8a0:	843ffc04 	addi	r16,r16,-16
1001a8a4:	d8c01c17 	ldw	r3,112(sp)
1001a8a8:	d8801b17 	ldw	r2,108(sp)
1001a8ac:	d811883a 	mov	r8,sp
1001a8b0:	8c3fed16 	blt	r17,r16,1001a868 <__alt_data_end+0xf001a868>
1001a8b4:	dac02817 	ldw	r11,160(sp)
1001a8b8:	1c07883a 	add	r3,r3,r16
1001a8bc:	10800044 	addi	r2,r2,1
1001a8c0:	42c00015 	stw	r11,0(r8)
1001a8c4:	44000115 	stw	r16,4(r8)
1001a8c8:	d8c01c15 	stw	r3,112(sp)
1001a8cc:	d8801b15 	stw	r2,108(sp)
1001a8d0:	010001c4 	movi	r4,7
1001a8d4:	2080fe16 	blt	r4,r2,1001acd0 <___svfiprintf_internal_r+0xe00>
1001a8d8:	dd802017 	ldw	r22,128(sp)
1001a8dc:	da802117 	ldw	r10,132(sp)
1001a8e0:	b280010e 	bge	r22,r10,1001a8e8 <___svfiprintf_internal_r+0xa18>
1001a8e4:	502d883a 	mov	r22,r10
1001a8e8:	dac02417 	ldw	r11,144(sp)
1001a8ec:	5d97883a 	add	r11,r11,r22
1001a8f0:	dac02415 	stw	r11,144(sp)
1001a8f4:	1800751e 	bne	r3,zero,1001aacc <___svfiprintf_internal_r+0xbfc>
1001a8f8:	a8800007 	ldb	r2,0(r21)
1001a8fc:	d8001b15 	stw	zero,108(sp)
1001a900:	d811883a 	mov	r8,sp
1001a904:	103d981e 	bne	r2,zero,10019f68 <__alt_data_end+0xf0019f68>
1001a908:	a82d883a 	mov	r22,r21
1001a90c:	003daf06 	br	10019fcc <__alt_data_end+0xf0019fcc>
1001a910:	10803fcc 	andi	r2,r2,255
1001a914:	00c00044 	movi	r3,1
1001a918:	10fe311e 	bne	r2,r3,1001a1e0 <__alt_data_end+0xf001a1e0>
1001a91c:	5000e126 	beq	r10,zero,1001aca4 <___svfiprintf_internal_r+0xdd4>
1001a920:	dc402015 	stw	r17,128(sp)
1001a924:	dc002215 	stw	r16,136(sp)
1001a928:	dd801a04 	addi	r22,sp,104
1001a92c:	402f883a 	mov	r23,r8
1001a930:	5839883a 	mov	fp,r11
1001a934:	4821883a 	mov	r16,r9
1001a938:	5023883a 	mov	r17,r10
1001a93c:	8009883a 	mov	r4,r16
1001a940:	880b883a 	mov	r5,r17
1001a944:	01800284 	movi	r6,10
1001a948:	000f883a 	mov	r7,zero
1001a94c:	001e3040 	call	1001e304 <__umoddi3>
1001a950:	10800c04 	addi	r2,r2,48
1001a954:	b5bfffc4 	addi	r22,r22,-1
1001a958:	8009883a 	mov	r4,r16
1001a95c:	880b883a 	mov	r5,r17
1001a960:	01800284 	movi	r6,10
1001a964:	000f883a 	mov	r7,zero
1001a968:	b0800005 	stb	r2,0(r22)
1001a96c:	001dd440 	call	1001dd44 <__udivdi3>
1001a970:	1021883a 	mov	r16,r2
1001a974:	10c4b03a 	or	r2,r2,r3
1001a978:	1823883a 	mov	r17,r3
1001a97c:	103fef1e 	bne	r2,zero,1001a93c <__alt_data_end+0xf001a93c>
1001a980:	da801e17 	ldw	r10,120(sp)
1001a984:	e017883a 	mov	r11,fp
1001a988:	b811883a 	mov	r8,r23
1001a98c:	dc402017 	ldw	r17,128(sp)
1001a990:	dc002217 	ldw	r16,136(sp)
1001a994:	dd802615 	stw	r22,152(sp)
1001a998:	55b9c83a 	sub	fp,r10,r22
1001a99c:	003e2206 	br	1001a228 <__alt_data_end+0xf001a228>
1001a9a0:	d8801c17 	ldw	r2,112(sp)
1001a9a4:	10000426 	beq	r2,zero,1001a9b8 <___svfiprintf_internal_r+0xae8>
1001a9a8:	d9002917 	ldw	r4,164(sp)
1001a9ac:	d9402717 	ldw	r5,156(sp)
1001a9b0:	d9801a04 	addi	r6,sp,104
1001a9b4:	0019d080 	call	10019d08 <__ssprint_r>
1001a9b8:	da802717 	ldw	r10,156(sp)
1001a9bc:	5080030b 	ldhu	r2,12(r10)
1001a9c0:	1080100c 	andi	r2,r2,64
1001a9c4:	1000511e 	bne	r2,zero,1001ab0c <___svfiprintf_internal_r+0xc3c>
1001a9c8:	d8802417 	ldw	r2,144(sp)
1001a9cc:	dfc03617 	ldw	ra,216(sp)
1001a9d0:	df003517 	ldw	fp,212(sp)
1001a9d4:	ddc03417 	ldw	r23,208(sp)
1001a9d8:	dd803317 	ldw	r22,204(sp)
1001a9dc:	dd403217 	ldw	r21,200(sp)
1001a9e0:	dd003117 	ldw	r20,196(sp)
1001a9e4:	dcc03017 	ldw	r19,192(sp)
1001a9e8:	dc802f17 	ldw	r18,188(sp)
1001a9ec:	dc402e17 	ldw	r17,184(sp)
1001a9f0:	dc002d17 	ldw	r16,180(sp)
1001a9f4:	dec03704 	addi	sp,sp,220
1001a9f8:	f800283a 	ret
1001a9fc:	da802117 	ldw	r10,132(sp)
1001aa00:	dac02017 	ldw	r11,128(sp)
1001aa04:	52edc83a 	sub	r22,r10,r11
1001aa08:	05bf540e 	bge	zero,r22,1001a75c <__alt_data_end+0xf001a75c>
1001aa0c:	02400404 	movi	r9,16
1001aa10:	4d812f0e 	bge	r9,r22,1001aed0 <___svfiprintf_internal_r+0x1000>
1001aa14:	014400b4 	movhi	r5,4098
1001aa18:	29556004 	addi	r5,r5,21888
1001aa1c:	d9402215 	stw	r5,136(sp)
1001aa20:	05c001c4 	movi	r23,7
1001aa24:	00000306 	br	1001aa34 <___svfiprintf_internal_r+0xb64>
1001aa28:	b5bffc04 	addi	r22,r22,-16
1001aa2c:	42000204 	addi	r8,r8,8
1001aa30:	4d80130e 	bge	r9,r22,1001aa80 <___svfiprintf_internal_r+0xbb0>
1001aa34:	18c00404 	addi	r3,r3,16
1001aa38:	10800044 	addi	r2,r2,1
1001aa3c:	44c00015 	stw	r19,0(r8)
1001aa40:	42400115 	stw	r9,4(r8)
1001aa44:	d8c01c15 	stw	r3,112(sp)
1001aa48:	d8801b15 	stw	r2,108(sp)
1001aa4c:	b8bff60e 	bge	r23,r2,1001aa28 <__alt_data_end+0xf001aa28>
1001aa50:	9009883a 	mov	r4,r18
1001aa54:	a00b883a 	mov	r5,r20
1001aa58:	d9801a04 	addi	r6,sp,104
1001aa5c:	da402c15 	stw	r9,176(sp)
1001aa60:	0019d080 	call	10019d08 <__ssprint_r>
1001aa64:	da402c17 	ldw	r9,176(sp)
1001aa68:	103fd31e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001aa6c:	b5bffc04 	addi	r22,r22,-16
1001aa70:	d8c01c17 	ldw	r3,112(sp)
1001aa74:	d8801b17 	ldw	r2,108(sp)
1001aa78:	d811883a 	mov	r8,sp
1001aa7c:	4dbfed16 	blt	r9,r22,1001aa34 <__alt_data_end+0xf001aa34>
1001aa80:	da802217 	ldw	r10,136(sp)
1001aa84:	1d87883a 	add	r3,r3,r22
1001aa88:	10800044 	addi	r2,r2,1
1001aa8c:	42800015 	stw	r10,0(r8)
1001aa90:	45800115 	stw	r22,4(r8)
1001aa94:	d8c01c15 	stw	r3,112(sp)
1001aa98:	d8801b15 	stw	r2,108(sp)
1001aa9c:	010001c4 	movi	r4,7
1001aaa0:	2080ce16 	blt	r4,r2,1001addc <___svfiprintf_internal_r+0xf0c>
1001aaa4:	42000204 	addi	r8,r8,8
1001aaa8:	003f2c06 	br	1001a75c <__alt_data_end+0xf001a75c>
1001aaac:	9009883a 	mov	r4,r18
1001aab0:	a00b883a 	mov	r5,r20
1001aab4:	d9801a04 	addi	r6,sp,104
1001aab8:	0019d080 	call	10019d08 <__ssprint_r>
1001aabc:	103fbe1e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001aac0:	d8c01c17 	ldw	r3,112(sp)
1001aac4:	d811883a 	mov	r8,sp
1001aac8:	003f5606 	br	1001a824 <__alt_data_end+0xf001a824>
1001aacc:	9009883a 	mov	r4,r18
1001aad0:	a00b883a 	mov	r5,r20
1001aad4:	d9801a04 	addi	r6,sp,104
1001aad8:	0019d080 	call	10019d08 <__ssprint_r>
1001aadc:	103f8626 	beq	r2,zero,1001a8f8 <__alt_data_end+0xf001a8f8>
1001aae0:	003fb506 	br	1001a9b8 <__alt_data_end+0xf001a9b8>
1001aae4:	10803fcc 	andi	r2,r2,255
1001aae8:	10003b1e 	bne	r2,zero,1001abd8 <___svfiprintf_internal_r+0xd08>
1001aaec:	8880004c 	andi	r2,r17,1
1001aaf0:	10007e26 	beq	r2,zero,1001acec <___svfiprintf_internal_r+0xe1c>
1001aaf4:	00800c04 	movi	r2,48
1001aaf8:	d8c019c4 	addi	r3,sp,103
1001aafc:	d88019c5 	stb	r2,103(sp)
1001ab00:	df002b17 	ldw	fp,172(sp)
1001ab04:	d8c02615 	stw	r3,152(sp)
1001ab08:	003dc706 	br	1001a228 <__alt_data_end+0xf001a228>
1001ab0c:	00bfffc4 	movi	r2,-1
1001ab10:	003fae06 	br	1001a9cc <__alt_data_end+0xf001a9cc>
1001ab14:	9009883a 	mov	r4,r18
1001ab18:	a00b883a 	mov	r5,r20
1001ab1c:	d9801a04 	addi	r6,sp,104
1001ab20:	0019d080 	call	10019d08 <__ssprint_r>
1001ab24:	103fa41e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001ab28:	d811883a 	mov	r8,sp
1001ab2c:	003d2406 	br	10019fc0 <__alt_data_end+0xf0019fc0>
1001ab30:	9009883a 	mov	r4,r18
1001ab34:	a00b883a 	mov	r5,r20
1001ab38:	d9801a04 	addi	r6,sp,104
1001ab3c:	0019d080 	call	10019d08 <__ssprint_r>
1001ab40:	103f9d1e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001ab44:	d8c01c17 	ldw	r3,112(sp)
1001ab48:	d8801b17 	ldw	r2,108(sp)
1001ab4c:	d811883a 	mov	r8,sp
1001ab50:	003f2a06 	br	1001a7fc <__alt_data_end+0xf001a7fc>
1001ab54:	d9402a17 	ldw	r5,168(sp)
1001ab58:	d8c01a04 	addi	r3,sp,104
1001ab5c:	488003cc 	andi	r2,r9,15
1001ab60:	5008973a 	slli	r4,r10,28
1001ab64:	2885883a 	add	r2,r5,r2
1001ab68:	4812d13a 	srli	r9,r9,4
1001ab6c:	10800003 	ldbu	r2,0(r2)
1001ab70:	5014d13a 	srli	r10,r10,4
1001ab74:	18ffffc4 	addi	r3,r3,-1
1001ab78:	2252b03a 	or	r9,r4,r9
1001ab7c:	18800005 	stb	r2,0(r3)
1001ab80:	4a84b03a 	or	r2,r9,r10
1001ab84:	103ff51e 	bne	r2,zero,1001ab5c <__alt_data_end+0xf001ab5c>
1001ab88:	d8c02615 	stw	r3,152(sp)
1001ab8c:	003da406 	br	1001a220 <__alt_data_end+0xf001a220>
1001ab90:	9009883a 	mov	r4,r18
1001ab94:	a00b883a 	mov	r5,r20
1001ab98:	d9801a04 	addi	r6,sp,104
1001ab9c:	0019d080 	call	10019d08 <__ssprint_r>
1001aba0:	103f851e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001aba4:	d8c01c17 	ldw	r3,112(sp)
1001aba8:	d8801b17 	ldw	r2,108(sp)
1001abac:	d811883a 	mov	r8,sp
1001abb0:	003eda06 	br	1001a71c <__alt_data_end+0xf001a71c>
1001abb4:	9009883a 	mov	r4,r18
1001abb8:	a00b883a 	mov	r5,r20
1001abbc:	d9801a04 	addi	r6,sp,104
1001abc0:	0019d080 	call	10019d08 <__ssprint_r>
1001abc4:	103f7c1e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001abc8:	d8c01c17 	ldw	r3,112(sp)
1001abcc:	d8801b17 	ldw	r2,108(sp)
1001abd0:	d811883a 	mov	r8,sp
1001abd4:	003ede06 	br	1001a750 <__alt_data_end+0xf001a750>
1001abd8:	da801a04 	addi	r10,sp,104
1001abdc:	da802615 	stw	r10,152(sp)
1001abe0:	003d9106 	br	1001a228 <__alt_data_end+0xf001a228>
1001abe4:	00800084 	movi	r2,2
1001abe8:	4a86b03a 	or	r3,r9,r10
1001abec:	003d7106 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001abf0:	88c0040c 	andi	r3,r17,16
1001abf4:	18004f1e 	bne	r3,zero,1001ad34 <___svfiprintf_internal_r+0xe64>
1001abf8:	88c0100c 	andi	r3,r17,64
1001abfc:	18004d26 	beq	r3,zero,1001ad34 <___svfiprintf_internal_r+0xe64>
1001ac00:	dac02317 	ldw	r11,140(sp)
1001ac04:	1240000b 	ldhu	r9,0(r2)
1001ac08:	0015883a 	mov	r10,zero
1001ac0c:	5ac00104 	addi	r11,r11,4
1001ac10:	dac02315 	stw	r11,140(sp)
1001ac14:	00800044 	movi	r2,1
1001ac18:	4807883a 	mov	r3,r9
1001ac1c:	003d6506 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001ac20:	9009883a 	mov	r4,r18
1001ac24:	a00b883a 	mov	r5,r20
1001ac28:	d9801a04 	addi	r6,sp,104
1001ac2c:	0019d080 	call	10019d08 <__ssprint_r>
1001ac30:	103f611e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001ac34:	d8c01c17 	ldw	r3,112(sp)
1001ac38:	d8801b17 	ldw	r2,108(sp)
1001ac3c:	d811883a 	mov	r8,sp
1001ac40:	003ea906 	br	1001a6e8 <__alt_data_end+0xf001a6e8>
1001ac44:	88c0040c 	andi	r3,r17,16
1001ac48:	1800321e 	bne	r3,zero,1001ad14 <___svfiprintf_internal_r+0xe44>
1001ac4c:	88c0100c 	andi	r3,r17,64
1001ac50:	18003026 	beq	r3,zero,1001ad14 <___svfiprintf_internal_r+0xe44>
1001ac54:	dac02317 	ldw	r11,140(sp)
1001ac58:	1240000b 	ldhu	r9,0(r2)
1001ac5c:	0015883a 	mov	r10,zero
1001ac60:	5ac00104 	addi	r11,r11,4
1001ac64:	dac02315 	stw	r11,140(sp)
1001ac68:	0005883a 	mov	r2,zero
1001ac6c:	4807883a 	mov	r3,r9
1001ac70:	003d5006 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001ac74:	10803fcc 	andi	r2,r2,255
1001ac78:	1080201c 	xori	r2,r2,128
1001ac7c:	10bfe004 	addi	r2,r2,-128
1001ac80:	01000c04 	movi	r4,48
1001ac84:	11006826 	beq	r2,r4,1001ae28 <___svfiprintf_internal_r+0xf58>
1001ac88:	da802617 	ldw	r10,152(sp)
1001ac8c:	d8801e17 	ldw	r2,120(sp)
1001ac90:	193fffc5 	stb	r4,-1(r3)
1001ac94:	52bfffc4 	addi	r10,r10,-1
1001ac98:	da802615 	stw	r10,152(sp)
1001ac9c:	12b9c83a 	sub	fp,r2,r10
1001aca0:	003d6106 	br	1001a228 <__alt_data_end+0xf001a228>
1001aca4:	00800244 	movi	r2,9
1001aca8:	127f1d36 	bltu	r2,r9,1001a920 <__alt_data_end+0xf001a920>
1001acac:	4a400c04 	addi	r9,r9,48
1001acb0:	d8c019c4 	addi	r3,sp,103
1001acb4:	da4019c5 	stb	r9,103(sp)
1001acb8:	df002b17 	ldw	fp,172(sp)
1001acbc:	d8c02615 	stw	r3,152(sp)
1001acc0:	003d5906 	br	1001a228 <__alt_data_end+0xf001a228>
1001acc4:	d8802315 	stw	r2,140(sp)
1001acc8:	a9000007 	ldb	r4,0(r21)
1001accc:	003ccc06 	br	1001a000 <__alt_data_end+0xf001a000>
1001acd0:	9009883a 	mov	r4,r18
1001acd4:	a00b883a 	mov	r5,r20
1001acd8:	d9801a04 	addi	r6,sp,104
1001acdc:	0019d080 	call	10019d08 <__ssprint_r>
1001ace0:	103f351e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001ace4:	d8c01c17 	ldw	r3,112(sp)
1001ace8:	003efb06 	br	1001a8d8 <__alt_data_end+0xf001a8d8>
1001acec:	d8c01a04 	addi	r3,sp,104
1001acf0:	d8c02615 	stw	r3,152(sp)
1001acf4:	003d4c06 	br	1001a228 <__alt_data_end+0xf001a228>
1001acf8:	da802317 	ldw	r10,140(sp)
1001acfc:	1a400017 	ldw	r9,0(r3)
1001ad00:	52800104 	addi	r10,r10,4
1001ad04:	da802315 	stw	r10,140(sp)
1001ad08:	4815d7fa 	srai	r10,r9,31
1001ad0c:	5005883a 	mov	r2,r10
1001ad10:	003d9d06 	br	1001a388 <__alt_data_end+0xf001a388>
1001ad14:	da802317 	ldw	r10,140(sp)
1001ad18:	12400017 	ldw	r9,0(r2)
1001ad1c:	0005883a 	mov	r2,zero
1001ad20:	52800104 	addi	r10,r10,4
1001ad24:	da802315 	stw	r10,140(sp)
1001ad28:	4807883a 	mov	r3,r9
1001ad2c:	0015883a 	mov	r10,zero
1001ad30:	003d2006 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001ad34:	da802317 	ldw	r10,140(sp)
1001ad38:	12400017 	ldw	r9,0(r2)
1001ad3c:	00800044 	movi	r2,1
1001ad40:	52800104 	addi	r10,r10,4
1001ad44:	da802315 	stw	r10,140(sp)
1001ad48:	4807883a 	mov	r3,r9
1001ad4c:	0015883a 	mov	r10,zero
1001ad50:	003d1806 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001ad54:	dac02317 	ldw	r11,140(sp)
1001ad58:	12400017 	ldw	r9,0(r2)
1001ad5c:	0015883a 	mov	r10,zero
1001ad60:	5ac00104 	addi	r11,r11,4
1001ad64:	dac02315 	stw	r11,140(sp)
1001ad68:	003dde06 	br	1001a4e4 <__alt_data_end+0xf001a4e4>
1001ad6c:	a9000007 	ldb	r4,0(r21)
1001ad70:	003ca306 	br	1001a000 <__alt_data_end+0xf001a000>
1001ad74:	dac02317 	ldw	r11,140(sp)
1001ad78:	da802417 	ldw	r10,144(sp)
1001ad7c:	58800017 	ldw	r2,0(r11)
1001ad80:	5007d7fa 	srai	r3,r10,31
1001ad84:	5ac00104 	addi	r11,r11,4
1001ad88:	dac02315 	stw	r11,140(sp)
1001ad8c:	12800015 	stw	r10,0(r2)
1001ad90:	10c00115 	stw	r3,4(r2)
1001ad94:	003c7206 	br	10019f60 <__alt_data_end+0xf0019f60>
1001ad98:	00800c04 	movi	r2,48
1001ad9c:	d8801d05 	stb	r2,116(sp)
1001ada0:	d9001d45 	stb	r4,117(sp)
1001ada4:	8c400094 	ori	r17,r17,2
1001ada8:	00800084 	movi	r2,2
1001adac:	003d0106 	br	1001a1b4 <__alt_data_end+0xf001a1b4>
1001adb0:	ad400044 	addi	r21,r21,1
1001adb4:	8c400814 	ori	r17,r17,32
1001adb8:	11000047 	ldb	r4,1(r2)
1001adbc:	003c9006 	br	1001a000 <__alt_data_end+0xf001a000>
1001adc0:	dac02317 	ldw	r11,140(sp)
1001adc4:	da802417 	ldw	r10,144(sp)
1001adc8:	58800017 	ldw	r2,0(r11)
1001adcc:	5ac00104 	addi	r11,r11,4
1001add0:	dac02315 	stw	r11,140(sp)
1001add4:	12800015 	stw	r10,0(r2)
1001add8:	003c6106 	br	10019f60 <__alt_data_end+0xf0019f60>
1001addc:	9009883a 	mov	r4,r18
1001ade0:	a00b883a 	mov	r5,r20
1001ade4:	d9801a04 	addi	r6,sp,104
1001ade8:	0019d080 	call	10019d08 <__ssprint_r>
1001adec:	103ef21e 	bne	r2,zero,1001a9b8 <__alt_data_end+0xf001a9b8>
1001adf0:	d8c01c17 	ldw	r3,112(sp)
1001adf4:	d8801b17 	ldw	r2,108(sp)
1001adf8:	d811883a 	mov	r8,sp
1001adfc:	003e5706 	br	1001a75c <__alt_data_end+0xf001a75c>
1001ae00:	02c400b4 	movhi	r11,4098
1001ae04:	5ad56004 	addi	r11,r11,21888
1001ae08:	dac02215 	stw	r11,136(sp)
1001ae0c:	003e7106 	br	1001a7d4 <__alt_data_end+0xf001a7d4>
1001ae10:	dac02317 	ldw	r11,140(sp)
1001ae14:	12400017 	ldw	r9,0(r2)
1001ae18:	0015883a 	mov	r10,zero
1001ae1c:	5ac00104 	addi	r11,r11,4
1001ae20:	dac02315 	stw	r11,140(sp)
1001ae24:	003daf06 	br	1001a4e4 <__alt_data_end+0xf001a4e4>
1001ae28:	da801e17 	ldw	r10,120(sp)
1001ae2c:	d8c02617 	ldw	r3,152(sp)
1001ae30:	50f9c83a 	sub	fp,r10,r3
1001ae34:	003cfc06 	br	1001a228 <__alt_data_end+0xf001a228>
1001ae38:	da002c15 	stw	r8,176(sp)
1001ae3c:	000cc400 	call	1000cc40 <strlen>
1001ae40:	1039883a 	mov	fp,r2
1001ae44:	dac01d83 	ldbu	r11,118(sp)
1001ae48:	ddc02315 	stw	r23,140(sp)
1001ae4c:	0021883a 	mov	r16,zero
1001ae50:	da002c17 	ldw	r8,176(sp)
1001ae54:	003cf406 	br	1001a228 <__alt_data_end+0xf001a228>
1001ae58:	04001004 	movi	r16,64
1001ae5c:	800b883a 	mov	r5,r16
1001ae60:	001570c0 	call	1001570c <_malloc_r>
1001ae64:	da802717 	ldw	r10,156(sp)
1001ae68:	50800015 	stw	r2,0(r10)
1001ae6c:	50800415 	stw	r2,16(r10)
1001ae70:	10002c26 	beq	r2,zero,1001af24 <___svfiprintf_internal_r+0x1054>
1001ae74:	da802717 	ldw	r10,156(sp)
1001ae78:	54000515 	stw	r16,20(r10)
1001ae7c:	003c2806 	br	10019f20 <__alt_data_end+0xf0019f20>
1001ae80:	00800184 	movi	r2,6
1001ae84:	1400012e 	bgeu	r2,r16,1001ae8c <___svfiprintf_internal_r+0xfbc>
1001ae88:	1021883a 	mov	r16,r2
1001ae8c:	8039883a 	mov	fp,r16
1001ae90:	802d883a 	mov	r22,r16
1001ae94:	80001716 	blt	r16,zero,1001aef4 <___svfiprintf_internal_r+0x1024>
1001ae98:	008400b4 	movhi	r2,4098
1001ae9c:	10944304 	addi	r2,r2,20748
1001aea0:	dd802015 	stw	r22,128(sp)
1001aea4:	ddc02315 	stw	r23,140(sp)
1001aea8:	d8802615 	stw	r2,152(sp)
1001aeac:	003d4706 	br	1001a3cc <__alt_data_end+0xf001a3cc>
1001aeb0:	010400b4 	movhi	r4,4098
1001aeb4:	21156404 	addi	r4,r4,21904
1001aeb8:	d9002815 	stw	r4,160(sp)
1001aebc:	003d7206 	br	1001a488 <__alt_data_end+0xf001a488>
1001aec0:	010400b4 	movhi	r4,4098
1001aec4:	21156404 	addi	r4,r4,21904
1001aec8:	d9002815 	stw	r4,160(sp)
1001aecc:	003e7906 	br	1001a8b4 <__alt_data_end+0xf001a8b4>
1001aed0:	010400b4 	movhi	r4,4098
1001aed4:	21156004 	addi	r4,r4,21888
1001aed8:	d9002215 	stw	r4,136(sp)
1001aedc:	003ee806 	br	1001aa80 <__alt_data_end+0xf001aa80>
1001aee0:	8039883a 	mov	fp,r16
1001aee4:	dac01d83 	ldbu	r11,118(sp)
1001aee8:	ddc02315 	stw	r23,140(sp)
1001aeec:	0021883a 	mov	r16,zero
1001aef0:	003ccd06 	br	1001a228 <__alt_data_end+0xf001a228>
1001aef4:	002d883a 	mov	r22,zero
1001aef8:	003fe706 	br	1001ae98 <__alt_data_end+0xf001ae98>
1001aefc:	dac02317 	ldw	r11,140(sp)
1001af00:	a805883a 	mov	r2,r21
1001af04:	502b883a 	mov	r21,r10
1001af08:	5c000017 	ldw	r16,0(r11)
1001af0c:	59000104 	addi	r4,r11,4
1001af10:	d9002315 	stw	r4,140(sp)
1001af14:	803fa80e 	bge	r16,zero,1001adb8 <__alt_data_end+0xf001adb8>
1001af18:	043fffc4 	movi	r16,-1
1001af1c:	11000047 	ldb	r4,1(r2)
1001af20:	003c3706 	br	1001a000 <__alt_data_end+0xf001a000>
1001af24:	dac02917 	ldw	r11,164(sp)
1001af28:	00800304 	movi	r2,12
1001af2c:	58800015 	stw	r2,0(r11)
1001af30:	00bfffc4 	movi	r2,-1
1001af34:	003ea506 	br	1001a9cc <__alt_data_end+0xf001a9cc>

1001af38 <__submore>:
1001af38:	defffa04 	addi	sp,sp,-24
1001af3c:	dc000015 	stw	r16,0(sp)
1001af40:	2821883a 	mov	r16,r5
1001af44:	29400c17 	ldw	r5,48(r5)
1001af48:	dfc00515 	stw	ra,20(sp)
1001af4c:	dd000415 	stw	r20,16(sp)
1001af50:	dcc00315 	stw	r19,12(sp)
1001af54:	dc800215 	stw	r18,8(sp)
1001af58:	dc400115 	stw	r17,4(sp)
1001af5c:	80801004 	addi	r2,r16,64
1001af60:	28801726 	beq	r5,r2,1001afc0 <__submore+0x88>
1001af64:	84400d17 	ldw	r17,52(r16)
1001af68:	8c67883a 	add	r19,r17,r17
1001af6c:	980d883a 	mov	r6,r19
1001af70:	00172c00 	call	100172c0 <_realloc_r>
1001af74:	1025883a 	mov	r18,r2
1001af78:	10002226 	beq	r2,zero,1001b004 <__submore+0xcc>
1001af7c:	1469883a 	add	r20,r2,r17
1001af80:	a009883a 	mov	r4,r20
1001af84:	100b883a 	mov	r5,r2
1001af88:	880d883a 	mov	r6,r17
1001af8c:	000c7840 	call	1000c784 <memcpy>
1001af90:	0005883a 	mov	r2,zero
1001af94:	85000015 	stw	r20,0(r16)
1001af98:	84800c15 	stw	r18,48(r16)
1001af9c:	84c00d15 	stw	r19,52(r16)
1001afa0:	dfc00517 	ldw	ra,20(sp)
1001afa4:	dd000417 	ldw	r20,16(sp)
1001afa8:	dcc00317 	ldw	r19,12(sp)
1001afac:	dc800217 	ldw	r18,8(sp)
1001afb0:	dc400117 	ldw	r17,4(sp)
1001afb4:	dc000017 	ldw	r16,0(sp)
1001afb8:	dec00604 	addi	sp,sp,24
1001afbc:	f800283a 	ret
1001afc0:	04410004 	movi	r17,1024
1001afc4:	880b883a 	mov	r5,r17
1001afc8:	001570c0 	call	1001570c <_malloc_r>
1001afcc:	1007883a 	mov	r3,r2
1001afd0:	10000c26 	beq	r2,zero,1001b004 <__submore+0xcc>
1001afd4:	80801083 	ldbu	r2,66(r16)
1001afd8:	80c00c15 	stw	r3,48(r16)
1001afdc:	84400d15 	stw	r17,52(r16)
1001afe0:	1880ffc5 	stb	r2,1023(r3)
1001afe4:	81401043 	ldbu	r5,65(r16)
1001afe8:	1900ff44 	addi	r4,r3,1021
1001afec:	0005883a 	mov	r2,zero
1001aff0:	1940ff85 	stb	r5,1022(r3)
1001aff4:	81401003 	ldbu	r5,64(r16)
1001aff8:	1940ff45 	stb	r5,1021(r3)
1001affc:	81000015 	stw	r4,0(r16)
1001b000:	003fe706 	br	1001afa0 <__alt_data_end+0xf001afa0>
1001b004:	00bfffc4 	movi	r2,-1
1001b008:	003fe506 	br	1001afa0 <__alt_data_end+0xf001afa0>

1001b00c <_ungetc_r>:
1001b00c:	00bfffc4 	movi	r2,-1
1001b010:	28805e26 	beq	r5,r2,1001b18c <_ungetc_r+0x180>
1001b014:	defffc04 	addi	sp,sp,-16
1001b018:	dc800215 	stw	r18,8(sp)
1001b01c:	dc400115 	stw	r17,4(sp)
1001b020:	dc000015 	stw	r16,0(sp)
1001b024:	dfc00315 	stw	ra,12(sp)
1001b028:	2025883a 	mov	r18,r4
1001b02c:	3021883a 	mov	r16,r6
1001b030:	2823883a 	mov	r17,r5
1001b034:	20000226 	beq	r4,zero,1001b040 <_ungetc_r+0x34>
1001b038:	20800e17 	ldw	r2,56(r4)
1001b03c:	10002d26 	beq	r2,zero,1001b0f4 <_ungetc_r+0xe8>
1001b040:	80c0030b 	ldhu	r3,12(r16)
1001b044:	1888000c 	andi	r2,r3,8192
1001b048:	1000051e 	bne	r2,zero,1001b060 <_ungetc_r+0x54>
1001b04c:	81001917 	ldw	r4,100(r16)
1001b050:	00b7ffc4 	movi	r2,-8193
1001b054:	18c80014 	ori	r3,r3,8192
1001b058:	2084703a 	and	r2,r4,r2
1001b05c:	80801915 	stw	r2,100(r16)
1001b060:	00bff7c4 	movi	r2,-33
1001b064:	1884703a 	and	r2,r3,r2
1001b068:	8080030d 	sth	r2,12(r16)
1001b06c:	1900010c 	andi	r4,r3,4
1001b070:	2000061e 	bne	r4,zero,1001b08c <_ungetc_r+0x80>
1001b074:	1900040c 	andi	r4,r3,16
1001b078:	20001c26 	beq	r4,zero,1001b0ec <_ungetc_r+0xe0>
1001b07c:	18c0020c 	andi	r3,r3,8
1001b080:	1800321e 	bne	r3,zero,1001b14c <_ungetc_r+0x140>
1001b084:	10800114 	ori	r2,r2,4
1001b088:	8080030d 	sth	r2,12(r16)
1001b08c:	80800c17 	ldw	r2,48(r16)
1001b090:	8c403fcc 	andi	r17,r17,255
1001b094:	10001926 	beq	r2,zero,1001b0fc <_ungetc_r+0xf0>
1001b098:	80c00117 	ldw	r3,4(r16)
1001b09c:	80800d17 	ldw	r2,52(r16)
1001b0a0:	18800e0e 	bge	r3,r2,1001b0dc <_ungetc_r+0xd0>
1001b0a4:	80c00017 	ldw	r3,0(r16)
1001b0a8:	8805883a 	mov	r2,r17
1001b0ac:	193fffc4 	addi	r4,r3,-1
1001b0b0:	81000015 	stw	r4,0(r16)
1001b0b4:	1c7fffc5 	stb	r17,-1(r3)
1001b0b8:	80c00117 	ldw	r3,4(r16)
1001b0bc:	18c00044 	addi	r3,r3,1
1001b0c0:	80c00115 	stw	r3,4(r16)
1001b0c4:	dfc00317 	ldw	ra,12(sp)
1001b0c8:	dc800217 	ldw	r18,8(sp)
1001b0cc:	dc400117 	ldw	r17,4(sp)
1001b0d0:	dc000017 	ldw	r16,0(sp)
1001b0d4:	dec00404 	addi	sp,sp,16
1001b0d8:	f800283a 	ret
1001b0dc:	9009883a 	mov	r4,r18
1001b0e0:	800b883a 	mov	r5,r16
1001b0e4:	001af380 	call	1001af38 <__submore>
1001b0e8:	103fee26 	beq	r2,zero,1001b0a4 <__alt_data_end+0xf001b0a4>
1001b0ec:	00bfffc4 	movi	r2,-1
1001b0f0:	003ff406 	br	1001b0c4 <__alt_data_end+0xf001b0c4>
1001b0f4:	001474c0 	call	1001474c <__sinit>
1001b0f8:	003fd106 	br	1001b040 <__alt_data_end+0xf001b040>
1001b0fc:	80800417 	ldw	r2,16(r16)
1001b100:	80c00017 	ldw	r3,0(r16)
1001b104:	10000326 	beq	r2,zero,1001b114 <_ungetc_r+0x108>
1001b108:	10c0022e 	bgeu	r2,r3,1001b114 <_ungetc_r+0x108>
1001b10c:	18bfffc3 	ldbu	r2,-1(r3)
1001b110:	14401826 	beq	r2,r17,1001b174 <_ungetc_r+0x168>
1001b114:	81400117 	ldw	r5,4(r16)
1001b118:	80801084 	addi	r2,r16,66
1001b11c:	81001004 	addi	r4,r16,64
1001b120:	80c00e15 	stw	r3,56(r16)
1001b124:	80800015 	stw	r2,0(r16)
1001b128:	00c000c4 	movi	r3,3
1001b12c:	00800044 	movi	r2,1
1001b130:	80800115 	stw	r2,4(r16)
1001b134:	81400f15 	stw	r5,60(r16)
1001b138:	81000c15 	stw	r4,48(r16)
1001b13c:	80c00d15 	stw	r3,52(r16)
1001b140:	84401085 	stb	r17,66(r16)
1001b144:	8805883a 	mov	r2,r17
1001b148:	003fde06 	br	1001b0c4 <__alt_data_end+0xf001b0c4>
1001b14c:	9009883a 	mov	r4,r18
1001b150:	800b883a 	mov	r5,r16
1001b154:	00141a40 	call	100141a4 <_fflush_r>
1001b158:	103fe41e 	bne	r2,zero,1001b0ec <__alt_data_end+0xf001b0ec>
1001b15c:	8080030b 	ldhu	r2,12(r16)
1001b160:	00fffdc4 	movi	r3,-9
1001b164:	80000215 	stw	zero,8(r16)
1001b168:	1884703a 	and	r2,r3,r2
1001b16c:	80000615 	stw	zero,24(r16)
1001b170:	003fc406 	br	1001b084 <__alt_data_end+0xf001b084>
1001b174:	81000117 	ldw	r4,4(r16)
1001b178:	18ffffc4 	addi	r3,r3,-1
1001b17c:	80c00015 	stw	r3,0(r16)
1001b180:	20c00044 	addi	r3,r4,1
1001b184:	80c00115 	stw	r3,4(r16)
1001b188:	003fce06 	br	1001b0c4 <__alt_data_end+0xf001b0c4>
1001b18c:	00bfffc4 	movi	r2,-1
1001b190:	f800283a 	ret

1001b194 <ungetc>:
1001b194:	00c400b4 	movhi	r3,4098
1001b198:	18dd1004 	addi	r3,r3,29760
1001b19c:	2005883a 	mov	r2,r4
1001b1a0:	19000017 	ldw	r4,0(r3)
1001b1a4:	280d883a 	mov	r6,r5
1001b1a8:	100b883a 	mov	r5,r2
1001b1ac:	001b00c1 	jmpi	1001b00c <_ungetc_r>

1001b1b0 <__sprint_r.part.0>:
1001b1b0:	28801917 	ldw	r2,100(r5)
1001b1b4:	defff604 	addi	sp,sp,-40
1001b1b8:	dd400515 	stw	r21,20(sp)
1001b1bc:	dcc00315 	stw	r19,12(sp)
1001b1c0:	dfc00915 	stw	ra,36(sp)
1001b1c4:	df000815 	stw	fp,32(sp)
1001b1c8:	ddc00715 	stw	r23,28(sp)
1001b1cc:	dd800615 	stw	r22,24(sp)
1001b1d0:	dd000415 	stw	r20,16(sp)
1001b1d4:	dc800215 	stw	r18,8(sp)
1001b1d8:	dc400115 	stw	r17,4(sp)
1001b1dc:	dc000015 	stw	r16,0(sp)
1001b1e0:	1088000c 	andi	r2,r2,8192
1001b1e4:	2827883a 	mov	r19,r5
1001b1e8:	302b883a 	mov	r21,r6
1001b1ec:	10002d26 	beq	r2,zero,1001b2a4 <__sprint_r.part.0+0xf4>
1001b1f0:	30800217 	ldw	r2,8(r6)
1001b1f4:	35800017 	ldw	r22,0(r6)
1001b1f8:	10002826 	beq	r2,zero,1001b29c <__sprint_r.part.0+0xec>
1001b1fc:	2029883a 	mov	r20,r4
1001b200:	b5c00104 	addi	r23,r22,4
1001b204:	04bfffc4 	movi	r18,-1
1001b208:	bc400017 	ldw	r17,0(r23)
1001b20c:	b4000017 	ldw	r16,0(r22)
1001b210:	0039883a 	mov	fp,zero
1001b214:	8822d0ba 	srli	r17,r17,2
1001b218:	04400316 	blt	zero,r17,1001b228 <__sprint_r.part.0+0x78>
1001b21c:	00001706 	br	1001b27c <__sprint_r.part.0+0xcc>
1001b220:	84000104 	addi	r16,r16,4
1001b224:	8f001526 	beq	r17,fp,1001b27c <__sprint_r.part.0+0xcc>
1001b228:	81400017 	ldw	r5,0(r16)
1001b22c:	a009883a 	mov	r4,r20
1001b230:	980d883a 	mov	r6,r19
1001b234:	001c8cc0 	call	1001c8cc <_fputwc_r>
1001b238:	e7000044 	addi	fp,fp,1
1001b23c:	14bff81e 	bne	r2,r18,1001b220 <__alt_data_end+0xf001b220>
1001b240:	9005883a 	mov	r2,r18
1001b244:	a8000215 	stw	zero,8(r21)
1001b248:	a8000115 	stw	zero,4(r21)
1001b24c:	dfc00917 	ldw	ra,36(sp)
1001b250:	df000817 	ldw	fp,32(sp)
1001b254:	ddc00717 	ldw	r23,28(sp)
1001b258:	dd800617 	ldw	r22,24(sp)
1001b25c:	dd400517 	ldw	r21,20(sp)
1001b260:	dd000417 	ldw	r20,16(sp)
1001b264:	dcc00317 	ldw	r19,12(sp)
1001b268:	dc800217 	ldw	r18,8(sp)
1001b26c:	dc400117 	ldw	r17,4(sp)
1001b270:	dc000017 	ldw	r16,0(sp)
1001b274:	dec00a04 	addi	sp,sp,40
1001b278:	f800283a 	ret
1001b27c:	a8c00217 	ldw	r3,8(r21)
1001b280:	8c63883a 	add	r17,r17,r17
1001b284:	8c63883a 	add	r17,r17,r17
1001b288:	1c45c83a 	sub	r2,r3,r17
1001b28c:	a8800215 	stw	r2,8(r21)
1001b290:	b5800204 	addi	r22,r22,8
1001b294:	bdc00204 	addi	r23,r23,8
1001b298:	103fdb1e 	bne	r2,zero,1001b208 <__alt_data_end+0xf001b208>
1001b29c:	0005883a 	mov	r2,zero
1001b2a0:	003fe806 	br	1001b244 <__alt_data_end+0xf001b244>
1001b2a4:	0014e300 	call	10014e30 <__sfvwrite_r>
1001b2a8:	003fe606 	br	1001b244 <__alt_data_end+0xf001b244>

1001b2ac <__sprint_r>:
1001b2ac:	30c00217 	ldw	r3,8(r6)
1001b2b0:	18000126 	beq	r3,zero,1001b2b8 <__sprint_r+0xc>
1001b2b4:	001b1b01 	jmpi	1001b1b0 <__sprint_r.part.0>
1001b2b8:	30000115 	stw	zero,4(r6)
1001b2bc:	0005883a 	mov	r2,zero
1001b2c0:	f800283a 	ret

1001b2c4 <___vfiprintf_internal_r>:
1001b2c4:	defeca04 	addi	sp,sp,-1240
1001b2c8:	dd813215 	stw	r22,1224(sp)
1001b2cc:	dd013015 	stw	r20,1216(sp)
1001b2d0:	dfc13515 	stw	ra,1236(sp)
1001b2d4:	df013415 	stw	fp,1232(sp)
1001b2d8:	ddc13315 	stw	r23,1228(sp)
1001b2dc:	dd413115 	stw	r21,1220(sp)
1001b2e0:	dcc12f15 	stw	r19,1212(sp)
1001b2e4:	dc812e15 	stw	r18,1208(sp)
1001b2e8:	dc412d15 	stw	r17,1204(sp)
1001b2ec:	dc012c15 	stw	r16,1200(sp)
1001b2f0:	d9012015 	stw	r4,1152(sp)
1001b2f4:	d9c12115 	stw	r7,1156(sp)
1001b2f8:	2829883a 	mov	r20,r5
1001b2fc:	302d883a 	mov	r22,r6
1001b300:	20000226 	beq	r4,zero,1001b30c <___vfiprintf_internal_r+0x48>
1001b304:	20800e17 	ldw	r2,56(r4)
1001b308:	1001d326 	beq	r2,zero,1001ba58 <___vfiprintf_internal_r+0x794>
1001b30c:	a0c0030b 	ldhu	r3,12(r20)
1001b310:	1908000c 	andi	r4,r3,8192
1001b314:	1805883a 	mov	r2,r3
1001b318:	2000071e 	bne	r4,zero,1001b338 <___vfiprintf_internal_r+0x74>
1001b31c:	a1001917 	ldw	r4,100(r20)
1001b320:	18880014 	ori	r2,r3,8192
1001b324:	00f7ffc4 	movi	r3,-8193
1001b328:	20c8703a 	and	r4,r4,r3
1001b32c:	a080030d 	sth	r2,12(r20)
1001b330:	1007883a 	mov	r3,r2
1001b334:	a1001915 	stw	r4,100(r20)
1001b338:	1100020c 	andi	r4,r2,8
1001b33c:	20018926 	beq	r4,zero,1001b964 <___vfiprintf_internal_r+0x6a0>
1001b340:	a1000417 	ldw	r4,16(r20)
1001b344:	20018726 	beq	r4,zero,1001b964 <___vfiprintf_internal_r+0x6a0>
1001b348:	1080068c 	andi	r2,r2,26
1001b34c:	01000284 	movi	r4,10
1001b350:	11018d26 	beq	r2,r4,1001b988 <___vfiprintf_internal_r+0x6c4>
1001b354:	da810a04 	addi	r10,sp,1064
1001b358:	dac109c4 	addi	r11,sp,1063
1001b35c:	070400b4 	movhi	fp,4098
1001b360:	05c400b4 	movhi	r23,4098
1001b364:	da811e15 	stw	r10,1144(sp)
1001b368:	52d5c83a 	sub	r10,r10,r11
1001b36c:	e7156c04 	addi	fp,fp,21936
1001b370:	bdd56804 	addi	r23,r23,21920
1001b374:	dac11f15 	stw	r11,1148(sp)
1001b378:	dec11a15 	stw	sp,1128(sp)
1001b37c:	d8011c15 	stw	zero,1136(sp)
1001b380:	d8011b15 	stw	zero,1132(sp)
1001b384:	d8012615 	stw	zero,1176(sp)
1001b388:	d8012215 	stw	zero,1160(sp)
1001b38c:	da812715 	stw	r10,1180(sp)
1001b390:	d811883a 	mov	r8,sp
1001b394:	b021883a 	mov	r16,r22
1001b398:	80800007 	ldb	r2,0(r16)
1001b39c:	10039c26 	beq	r2,zero,1001c210 <___vfiprintf_internal_r+0xf4c>
1001b3a0:	01000944 	movi	r4,37
1001b3a4:	11039a26 	beq	r2,r4,1001c210 <___vfiprintf_internal_r+0xf4c>
1001b3a8:	8005883a 	mov	r2,r16
1001b3ac:	00000106 	br	1001b3b4 <___vfiprintf_internal_r+0xf0>
1001b3b0:	19000326 	beq	r3,r4,1001b3c0 <___vfiprintf_internal_r+0xfc>
1001b3b4:	10800044 	addi	r2,r2,1
1001b3b8:	10c00007 	ldb	r3,0(r2)
1001b3bc:	183ffc1e 	bne	r3,zero,1001b3b0 <__alt_data_end+0xf001b3b0>
1001b3c0:	1425c83a 	sub	r18,r2,r16
1001b3c4:	1023883a 	mov	r17,r2
1001b3c8:	90001026 	beq	r18,zero,1001b40c <___vfiprintf_internal_r+0x148>
1001b3cc:	d8c11c17 	ldw	r3,1136(sp)
1001b3d0:	d8811b17 	ldw	r2,1132(sp)
1001b3d4:	44000015 	stw	r16,0(r8)
1001b3d8:	90c7883a 	add	r3,r18,r3
1001b3dc:	10800044 	addi	r2,r2,1
1001b3e0:	44800115 	stw	r18,4(r8)
1001b3e4:	d8c11c15 	stw	r3,1136(sp)
1001b3e8:	d8811b15 	stw	r2,1132(sp)
1001b3ec:	010001c4 	movi	r4,7
1001b3f0:	2080750e 	bge	r4,r2,1001b5c8 <___vfiprintf_internal_r+0x304>
1001b3f4:	18039d1e 	bne	r3,zero,1001c26c <___vfiprintf_internal_r+0xfa8>
1001b3f8:	dac12217 	ldw	r11,1160(sp)
1001b3fc:	d8011b15 	stw	zero,1132(sp)
1001b400:	d811883a 	mov	r8,sp
1001b404:	5c97883a 	add	r11,r11,r18
1001b408:	dac12215 	stw	r11,1160(sp)
1001b40c:	88800007 	ldb	r2,0(r17)
1001b410:	1002e026 	beq	r2,zero,1001bf94 <___vfiprintf_internal_r+0xcd0>
1001b414:	88c00047 	ldb	r3,1(r17)
1001b418:	8c000044 	addi	r16,r17,1
1001b41c:	d8011d85 	stb	zero,1142(sp)
1001b420:	000d883a 	mov	r6,zero
1001b424:	027fffc4 	movi	r9,-1
1001b428:	0027883a 	mov	r19,zero
1001b42c:	002b883a 	mov	r21,zero
1001b430:	01001604 	movi	r4,88
1001b434:	01400244 	movi	r5,9
1001b438:	03000a84 	movi	r12,42
1001b43c:	01c01b04 	movi	r7,108
1001b440:	84000044 	addi	r16,r16,1
1001b444:	18bff804 	addi	r2,r3,-32
1001b448:	20825f36 	bltu	r4,r2,1001bdc8 <___vfiprintf_internal_r+0xb04>
1001b44c:	100490ba 	slli	r2,r2,2
1001b450:	028400b4 	movhi	r10,4098
1001b454:	52ad1904 	addi	r10,r10,-19356
1001b458:	1285883a 	add	r2,r2,r10
1001b45c:	10800017 	ldw	r2,0(r2)
1001b460:	1000683a 	jmp	r2
1001b464:	1001bc38 	rdprs	zero,r2,1776
1001b468:	1001bdc8 	cmpgei	zero,r2,1783
1001b46c:	1001bdc8 	cmpgei	zero,r2,1783
1001b470:	1001bdbc 	xorhi	zero,r2,1782
1001b474:	1001bdc8 	cmpgei	zero,r2,1783
1001b478:	1001bdc8 	cmpgei	zero,r2,1783
1001b47c:	1001bdc8 	cmpgei	zero,r2,1783
1001b480:	1001bdc8 	cmpgei	zero,r2,1783
1001b484:	1001bdc8 	cmpgei	zero,r2,1783
1001b488:	1001bdc8 	cmpgei	zero,r2,1783
1001b48c:	1001bd94 	ori	zero,r2,1782
1001b490:	1001bdb0 	cmpltui	zero,r2,1782
1001b494:	1001bdc8 	cmpgei	zero,r2,1783
1001b498:	1001ba68 	cmpgeui	zero,r2,1769
1001b49c:	1001bbc8 	cmpgei	zero,r2,1775
1001b4a0:	1001bdc8 	cmpgei	zero,r2,1783
1001b4a4:	1001bb4c 	andi	zero,r2,1773
1001b4a8:	1001bb58 	cmpnei	zero,r2,1773
1001b4ac:	1001bb58 	cmpnei	zero,r2,1773
1001b4b0:	1001bb58 	cmpnei	zero,r2,1773
1001b4b4:	1001bb58 	cmpnei	zero,r2,1773
1001b4b8:	1001bb58 	cmpnei	zero,r2,1773
1001b4bc:	1001bb58 	cmpnei	zero,r2,1773
1001b4c0:	1001bb58 	cmpnei	zero,r2,1773
1001b4c4:	1001bb58 	cmpnei	zero,r2,1773
1001b4c8:	1001bb58 	cmpnei	zero,r2,1773
1001b4cc:	1001bdc8 	cmpgei	zero,r2,1783
1001b4d0:	1001bdc8 	cmpgei	zero,r2,1783
1001b4d4:	1001bdc8 	cmpgei	zero,r2,1783
1001b4d8:	1001bdc8 	cmpgei	zero,r2,1783
1001b4dc:	1001bdc8 	cmpgei	zero,r2,1783
1001b4e0:	1001bdc8 	cmpgei	zero,r2,1783
1001b4e4:	1001bdc8 	cmpgei	zero,r2,1783
1001b4e8:	1001bdc8 	cmpgei	zero,r2,1783
1001b4ec:	1001bdc8 	cmpgei	zero,r2,1783
1001b4f0:	1001bdc8 	cmpgei	zero,r2,1783
1001b4f4:	1001bb84 	addi	zero,r2,1774
1001b4f8:	1001bdc8 	cmpgei	zero,r2,1783
1001b4fc:	1001bdc8 	cmpgei	zero,r2,1783
1001b500:	1001bdc8 	cmpgei	zero,r2,1783
1001b504:	1001bdc8 	cmpgei	zero,r2,1783
1001b508:	1001bdc8 	cmpgei	zero,r2,1783
1001b50c:	1001bdc8 	cmpgei	zero,r2,1783
1001b510:	1001bdc8 	cmpgei	zero,r2,1783
1001b514:	1001bdc8 	cmpgei	zero,r2,1783
1001b518:	1001bdc8 	cmpgei	zero,r2,1783
1001b51c:	1001bdc8 	cmpgei	zero,r2,1783
1001b520:	1001b618 	cmpnei	zero,r2,1752
1001b524:	1001bdc8 	cmpgei	zero,r2,1783
1001b528:	1001bdc8 	cmpgei	zero,r2,1783
1001b52c:	1001bdc8 	cmpgei	zero,r2,1783
1001b530:	1001bdc8 	cmpgei	zero,r2,1783
1001b534:	1001bdc8 	cmpgei	zero,r2,1783
1001b538:	1001b5dc 	xori	zero,r2,1751
1001b53c:	1001bdc8 	cmpgei	zero,r2,1783
1001b540:	1001bdc8 	cmpgei	zero,r2,1783
1001b544:	1001bac4 	addi	zero,r2,1771
1001b548:	1001bdc8 	cmpgei	zero,r2,1783
1001b54c:	1001bdc8 	cmpgei	zero,r2,1783
1001b550:	1001bdc8 	cmpgei	zero,r2,1783
1001b554:	1001bdc8 	cmpgei	zero,r2,1783
1001b558:	1001bdc8 	cmpgei	zero,r2,1783
1001b55c:	1001bdc8 	cmpgei	zero,r2,1783
1001b560:	1001bdc8 	cmpgei	zero,r2,1783
1001b564:	1001bdc8 	cmpgei	zero,r2,1783
1001b568:	1001bdc8 	cmpgei	zero,r2,1783
1001b56c:	1001bdc8 	cmpgei	zero,r2,1783
1001b570:	1001bb1c 	xori	zero,r2,1772
1001b574:	1001bcb4 	orhi	zero,r2,1778
1001b578:	1001bdc8 	cmpgei	zero,r2,1783
1001b57c:	1001bdc8 	cmpgei	zero,r2,1783
1001b580:	1001bdc8 	cmpgei	zero,r2,1783
1001b584:	1001bd3c 	xorhi	zero,r2,1780
1001b588:	1001bcb4 	orhi	zero,r2,1778
1001b58c:	1001bdc8 	cmpgei	zero,r2,1783
1001b590:	1001bdc8 	cmpgei	zero,r2,1783
1001b594:	1001bd48 	cmpgei	zero,r2,1781
1001b598:	1001bdc8 	cmpgei	zero,r2,1783
1001b59c:	1001bc08 	cmpgei	zero,r2,1776
1001b5a0:	1001b61c 	xori	zero,r2,1752
1001b5a4:	1001bcf0 	cmpltui	zero,r2,1779
1001b5a8:	1001bd30 	cmpltui	zero,r2,1780
1001b5ac:	1001bdc8 	cmpgei	zero,r2,1783
1001b5b0:	1001bc54 	ori	zero,r2,1777
1001b5b4:	1001bdc8 	cmpgei	zero,r2,1783
1001b5b8:	1001b5e0 	cmpeqi	zero,r2,1751
1001b5bc:	1001bdc8 	cmpgei	zero,r2,1783
1001b5c0:	1001bdc8 	cmpgei	zero,r2,1783
1001b5c4:	1001bd58 	cmpnei	zero,r2,1781
1001b5c8:	42000204 	addi	r8,r8,8
1001b5cc:	dac12217 	ldw	r11,1160(sp)
1001b5d0:	5c97883a 	add	r11,r11,r18
1001b5d4:	dac12215 	stw	r11,1160(sp)
1001b5d8:	003f8c06 	br	1001b40c <__alt_data_end+0xf001b40c>
1001b5dc:	ad400414 	ori	r21,r21,16
1001b5e0:	a880080c 	andi	r2,r21,32
1001b5e4:	10012f1e 	bne	r2,zero,1001baa4 <___vfiprintf_internal_r+0x7e0>
1001b5e8:	a880040c 	andi	r2,r21,16
1001b5ec:	1001ff1e 	bne	r2,zero,1001bdec <___vfiprintf_internal_r+0xb28>
1001b5f0:	a880100c 	andi	r2,r21,64
1001b5f4:	1001fd26 	beq	r2,zero,1001bdec <___vfiprintf_internal_r+0xb28>
1001b5f8:	da812117 	ldw	r10,1156(sp)
1001b5fc:	002d883a 	mov	r22,zero
1001b600:	00800044 	movi	r2,1
1001b604:	5480000b 	ldhu	r18,0(r10)
1001b608:	52800104 	addi	r10,r10,4
1001b60c:	da812115 	stw	r10,1156(sp)
1001b610:	9009883a 	mov	r4,r18
1001b614:	00000a06 	br	1001b640 <___vfiprintf_internal_r+0x37c>
1001b618:	ad400414 	ori	r21,r21,16
1001b61c:	a880080c 	andi	r2,r21,32
1001b620:	10011426 	beq	r2,zero,1001ba74 <___vfiprintf_internal_r+0x7b0>
1001b624:	da812117 	ldw	r10,1156(sp)
1001b628:	0005883a 	mov	r2,zero
1001b62c:	54800017 	ldw	r18,0(r10)
1001b630:	55800117 	ldw	r22,4(r10)
1001b634:	52800204 	addi	r10,r10,8
1001b638:	da812115 	stw	r10,1156(sp)
1001b63c:	9588b03a 	or	r4,r18,r22
1001b640:	d8011d85 	stb	zero,1142(sp)
1001b644:	4823883a 	mov	r17,r9
1001b648:	0019883a 	mov	r12,zero
1001b64c:	48000216 	blt	r9,zero,1001b658 <___vfiprintf_internal_r+0x394>
1001b650:	00ffdfc4 	movi	r3,-129
1001b654:	a8ea703a 	and	r21,r21,r3
1001b658:	2002221e 	bne	r4,zero,1001bee4 <___vfiprintf_internal_r+0xc20>
1001b65c:	4802c726 	beq	r9,zero,1001c17c <___vfiprintf_internal_r+0xeb8>
1001b660:	10803fcc 	andi	r2,r2,255
1001b664:	00c00044 	movi	r3,1
1001b668:	10c24426 	beq	r2,r3,1001bf7c <___vfiprintf_internal_r+0xcb8>
1001b66c:	00c00084 	movi	r3,2
1001b670:	10c2cc26 	beq	r2,r3,1001c1a4 <___vfiprintf_internal_r+0xee0>
1001b674:	d8c10a04 	addi	r3,sp,1064
1001b678:	9008d0fa 	srli	r4,r18,3
1001b67c:	b00a977a 	slli	r5,r22,29
1001b680:	b02cd0fa 	srli	r22,r22,3
1001b684:	948001cc 	andi	r18,r18,7
1001b688:	90800c04 	addi	r2,r18,48
1001b68c:	18ffffc4 	addi	r3,r3,-1
1001b690:	2924b03a 	or	r18,r5,r4
1001b694:	18800005 	stb	r2,0(r3)
1001b698:	9588b03a 	or	r4,r18,r22
1001b69c:	203ff61e 	bne	r4,zero,1001b678 <__alt_data_end+0xf001b678>
1001b6a0:	a900004c 	andi	r4,r21,1
1001b6a4:	d8c12415 	stw	r3,1168(sp)
1001b6a8:	2002fb1e 	bne	r4,zero,1001c298 <___vfiprintf_internal_r+0xfd4>
1001b6ac:	da811e17 	ldw	r10,1144(sp)
1001b6b0:	50e3c83a 	sub	r17,r10,r3
1001b6b4:	8825883a 	mov	r18,r17
1001b6b8:	8a40010e 	bge	r17,r9,1001b6c0 <___vfiprintf_internal_r+0x3fc>
1001b6bc:	4825883a 	mov	r18,r9
1001b6c0:	63003fcc 	andi	r12,r12,255
1001b6c4:	6300201c 	xori	r12,r12,128
1001b6c8:	633fe004 	addi	r12,r12,-128
1001b6cc:	60000126 	beq	r12,zero,1001b6d4 <___vfiprintf_internal_r+0x410>
1001b6d0:	94800044 	addi	r18,r18,1
1001b6d4:	ab80008c 	andi	r14,r21,2
1001b6d8:	70000126 	beq	r14,zero,1001b6e0 <___vfiprintf_internal_r+0x41c>
1001b6dc:	94800084 	addi	r18,r18,2
1001b6e0:	ad80210c 	andi	r22,r21,132
1001b6e4:	b001df1e 	bne	r22,zero,1001be64 <___vfiprintf_internal_r+0xba0>
1001b6e8:	9c8fc83a 	sub	r7,r19,r18
1001b6ec:	01c1dd0e 	bge	zero,r7,1001be64 <___vfiprintf_internal_r+0xba0>
1001b6f0:	03000404 	movi	r12,16
1001b6f4:	d8811c17 	ldw	r2,1136(sp)
1001b6f8:	61c3920e 	bge	r12,r7,1001c544 <___vfiprintf_internal_r+0x1280>
1001b6fc:	028400b4 	movhi	r10,4098
1001b700:	52956c04 	addi	r10,r10,21936
1001b704:	dc012915 	stw	r16,1188(sp)
1001b708:	d9811b17 	ldw	r6,1132(sp)
1001b70c:	da812315 	stw	r10,1164(sp)
1001b710:	00c001c4 	movi	r3,7
1001b714:	da412515 	stw	r9,1172(sp)
1001b718:	db812815 	stw	r14,1184(sp)
1001b71c:	3821883a 	mov	r16,r7
1001b720:	00000506 	br	1001b738 <___vfiprintf_internal_r+0x474>
1001b724:	31400084 	addi	r5,r6,2
1001b728:	42000204 	addi	r8,r8,8
1001b72c:	200d883a 	mov	r6,r4
1001b730:	843ffc04 	addi	r16,r16,-16
1001b734:	64000d0e 	bge	r12,r16,1001b76c <___vfiprintf_internal_r+0x4a8>
1001b738:	10800404 	addi	r2,r2,16
1001b73c:	31000044 	addi	r4,r6,1
1001b740:	47000015 	stw	fp,0(r8)
1001b744:	43000115 	stw	r12,4(r8)
1001b748:	d8811c15 	stw	r2,1136(sp)
1001b74c:	d9011b15 	stw	r4,1132(sp)
1001b750:	193ff40e 	bge	r3,r4,1001b724 <__alt_data_end+0xf001b724>
1001b754:	1001b51e 	bne	r2,zero,1001be2c <___vfiprintf_internal_r+0xb68>
1001b758:	843ffc04 	addi	r16,r16,-16
1001b75c:	000d883a 	mov	r6,zero
1001b760:	01400044 	movi	r5,1
1001b764:	d811883a 	mov	r8,sp
1001b768:	643ff316 	blt	r12,r16,1001b738 <__alt_data_end+0xf001b738>
1001b76c:	800f883a 	mov	r7,r16
1001b770:	da412517 	ldw	r9,1172(sp)
1001b774:	db812817 	ldw	r14,1184(sp)
1001b778:	dc012917 	ldw	r16,1188(sp)
1001b77c:	dac12317 	ldw	r11,1164(sp)
1001b780:	3887883a 	add	r3,r7,r2
1001b784:	41c00115 	stw	r7,4(r8)
1001b788:	42c00015 	stw	r11,0(r8)
1001b78c:	d8c11c15 	stw	r3,1136(sp)
1001b790:	d9411b15 	stw	r5,1132(sp)
1001b794:	008001c4 	movi	r2,7
1001b798:	11429316 	blt	r2,r5,1001c1e8 <___vfiprintf_internal_r+0xf24>
1001b79c:	d9011d87 	ldb	r4,1142(sp)
1001b7a0:	42000204 	addi	r8,r8,8
1001b7a4:	28800044 	addi	r2,r5,1
1001b7a8:	2001b31e 	bne	r4,zero,1001be78 <___vfiprintf_internal_r+0xbb4>
1001b7ac:	70000c26 	beq	r14,zero,1001b7e0 <___vfiprintf_internal_r+0x51c>
1001b7b0:	d9011d04 	addi	r4,sp,1140
1001b7b4:	18c00084 	addi	r3,r3,2
1001b7b8:	41000015 	stw	r4,0(r8)
1001b7bc:	01000084 	movi	r4,2
1001b7c0:	41000115 	stw	r4,4(r8)
1001b7c4:	d8c11c15 	stw	r3,1136(sp)
1001b7c8:	d8811b15 	stw	r2,1132(sp)
1001b7cc:	010001c4 	movi	r4,7
1001b7d0:	20826516 	blt	r4,r2,1001c168 <___vfiprintf_internal_r+0xea4>
1001b7d4:	100b883a 	mov	r5,r2
1001b7d8:	42000204 	addi	r8,r8,8
1001b7dc:	10800044 	addi	r2,r2,1
1001b7e0:	01002004 	movi	r4,128
1001b7e4:	b1021a26 	beq	r22,r4,1001c050 <___vfiprintf_internal_r+0xd8c>
1001b7e8:	4c6dc83a 	sub	r22,r9,r17
1001b7ec:	0580230e 	bge	zero,r22,1001b87c <___vfiprintf_internal_r+0x5b8>
1001b7f0:	01c00404 	movi	r7,16
1001b7f4:	3d83300e 	bge	r7,r22,1001c4b8 <___vfiprintf_internal_r+0x11f4>
1001b7f8:	008400b4 	movhi	r2,4098
1001b7fc:	10956804 	addi	r2,r2,21920
1001b800:	d8812315 	stw	r2,1164(sp)
1001b804:	030001c4 	movi	r12,7
1001b808:	00000506 	br	1001b820 <___vfiprintf_internal_r+0x55c>
1001b80c:	28800084 	addi	r2,r5,2
1001b810:	42000204 	addi	r8,r8,8
1001b814:	200b883a 	mov	r5,r4
1001b818:	b5bffc04 	addi	r22,r22,-16
1001b81c:	3d800d0e 	bge	r7,r22,1001b854 <___vfiprintf_internal_r+0x590>
1001b820:	18c00404 	addi	r3,r3,16
1001b824:	29000044 	addi	r4,r5,1
1001b828:	45c00015 	stw	r23,0(r8)
1001b82c:	41c00115 	stw	r7,4(r8)
1001b830:	d8c11c15 	stw	r3,1136(sp)
1001b834:	d9011b15 	stw	r4,1132(sp)
1001b838:	613ff40e 	bge	r12,r4,1001b80c <__alt_data_end+0xf001b80c>
1001b83c:	18019b1e 	bne	r3,zero,1001beac <___vfiprintf_internal_r+0xbe8>
1001b840:	b5bffc04 	addi	r22,r22,-16
1001b844:	000b883a 	mov	r5,zero
1001b848:	00800044 	movi	r2,1
1001b84c:	d811883a 	mov	r8,sp
1001b850:	3dbff316 	blt	r7,r22,1001b820 <__alt_data_end+0xf001b820>
1001b854:	da812317 	ldw	r10,1164(sp)
1001b858:	1d87883a 	add	r3,r3,r22
1001b85c:	45800115 	stw	r22,4(r8)
1001b860:	42800015 	stw	r10,0(r8)
1001b864:	d8c11c15 	stw	r3,1136(sp)
1001b868:	d8811b15 	stw	r2,1132(sp)
1001b86c:	010001c4 	movi	r4,7
1001b870:	2081dd16 	blt	r4,r2,1001bfe8 <___vfiprintf_internal_r+0xd24>
1001b874:	42000204 	addi	r8,r8,8
1001b878:	10800044 	addi	r2,r2,1
1001b87c:	da812417 	ldw	r10,1168(sp)
1001b880:	1c47883a 	add	r3,r3,r17
1001b884:	44400115 	stw	r17,4(r8)
1001b888:	42800015 	stw	r10,0(r8)
1001b88c:	d8c11c15 	stw	r3,1136(sp)
1001b890:	d8811b15 	stw	r2,1132(sp)
1001b894:	010001c4 	movi	r4,7
1001b898:	2081dc0e 	bge	r4,r2,1001c00c <___vfiprintf_internal_r+0xd48>
1001b89c:	1802611e 	bne	r3,zero,1001c224 <___vfiprintf_internal_r+0xf60>
1001b8a0:	d8011b15 	stw	zero,1132(sp)
1001b8a4:	aac0010c 	andi	r11,r21,4
1001b8a8:	58002726 	beq	r11,zero,1001b948 <___vfiprintf_internal_r+0x684>
1001b8ac:	9ca3c83a 	sub	r17,r19,r18
1001b8b0:	d811883a 	mov	r8,sp
1001b8b4:	0443510e 	bge	zero,r17,1001c5fc <___vfiprintf_internal_r+0x1338>
1001b8b8:	01c00404 	movi	r7,16
1001b8bc:	3c43320e 	bge	r7,r17,1001c588 <___vfiprintf_internal_r+0x12c4>
1001b8c0:	008400b4 	movhi	r2,4098
1001b8c4:	10956c04 	addi	r2,r2,21936
1001b8c8:	d9011b17 	ldw	r4,1132(sp)
1001b8cc:	d8812315 	stw	r2,1164(sp)
1001b8d0:	382d883a 	mov	r22,r7
1001b8d4:	054001c4 	movi	r21,7
1001b8d8:	00000506 	br	1001b8f0 <___vfiprintf_internal_r+0x62c>
1001b8dc:	21400084 	addi	r5,r4,2
1001b8e0:	42000204 	addi	r8,r8,8
1001b8e4:	1009883a 	mov	r4,r2
1001b8e8:	8c7ffc04 	addi	r17,r17,-16
1001b8ec:	b4400d0e 	bge	r22,r17,1001b924 <___vfiprintf_internal_r+0x660>
1001b8f0:	18c00404 	addi	r3,r3,16
1001b8f4:	20800044 	addi	r2,r4,1
1001b8f8:	47000015 	stw	fp,0(r8)
1001b8fc:	45800115 	stw	r22,4(r8)
1001b900:	d8c11c15 	stw	r3,1136(sp)
1001b904:	d8811b15 	stw	r2,1132(sp)
1001b908:	a8bff40e 	bge	r21,r2,1001b8dc <__alt_data_end+0xf001b8dc>
1001b90c:	1801ac1e 	bne	r3,zero,1001bfc0 <___vfiprintf_internal_r+0xcfc>
1001b910:	8c7ffc04 	addi	r17,r17,-16
1001b914:	0009883a 	mov	r4,zero
1001b918:	01400044 	movi	r5,1
1001b91c:	d811883a 	mov	r8,sp
1001b920:	b47ff316 	blt	r22,r17,1001b8f0 <__alt_data_end+0xf001b8f0>
1001b924:	da812317 	ldw	r10,1164(sp)
1001b928:	1c47883a 	add	r3,r3,r17
1001b92c:	44400115 	stw	r17,4(r8)
1001b930:	42800015 	stw	r10,0(r8)
1001b934:	d8c11c15 	stw	r3,1136(sp)
1001b938:	d9411b15 	stw	r5,1132(sp)
1001b93c:	008001c4 	movi	r2,7
1001b940:	1141b70e 	bge	r2,r5,1001c020 <___vfiprintf_internal_r+0xd5c>
1001b944:	1802cf1e 	bne	r3,zero,1001c484 <___vfiprintf_internal_r+0x11c0>
1001b948:	94c2ca16 	blt	r18,r19,1001c474 <___vfiprintf_internal_r+0x11b0>
1001b94c:	dac12217 	ldw	r11,1160(sp)
1001b950:	5c97883a 	add	r11,r11,r18
1001b954:	dac12215 	stw	r11,1160(sp)
1001b958:	d8011b15 	stw	zero,1132(sp)
1001b95c:	d811883a 	mov	r8,sp
1001b960:	003e8d06 	br	1001b398 <__alt_data_end+0xf001b398>
1001b964:	d9012017 	ldw	r4,1152(sp)
1001b968:	a00b883a 	mov	r5,r20
1001b96c:	001274c0 	call	1001274c <__swsetup_r>
1001b970:	10002c1e 	bne	r2,zero,1001ba24 <___vfiprintf_internal_r+0x760>
1001b974:	a0c0030b 	ldhu	r3,12(r20)
1001b978:	01000284 	movi	r4,10
1001b97c:	1805883a 	mov	r2,r3
1001b980:	1080068c 	andi	r2,r2,26
1001b984:	113e731e 	bne	r2,r4,1001b354 <__alt_data_end+0xf001b354>
1001b988:	a080038b 	ldhu	r2,14(r20)
1001b98c:	113fffcc 	andi	r4,r2,65535
1001b990:	2120001c 	xori	r4,r4,32768
1001b994:	21200004 	addi	r4,r4,-32768
1001b998:	203e6e16 	blt	r4,zero,1001b354 <__alt_data_end+0xf001b354>
1001b99c:	a3001917 	ldw	r12,100(r20)
1001b9a0:	a2c00717 	ldw	r11,28(r20)
1001b9a4:	a2800917 	ldw	r10,36(r20)
1001b9a8:	d9012017 	ldw	r4,1152(sp)
1001b9ac:	d9c12117 	ldw	r7,1156(sp)
1001b9b0:	02410004 	movi	r9,1024
1001b9b4:	18ffff4c 	andi	r3,r3,65533
1001b9b8:	da4b883a 	add	r5,sp,r9
1001b9bc:	b00d883a 	mov	r6,r22
1001b9c0:	d8c1030d 	sth	r3,1036(sp)
1001b9c4:	db011915 	stw	r12,1124(sp)
1001b9c8:	d881038d 	sth	r2,1038(sp)
1001b9cc:	dac10715 	stw	r11,1052(sp)
1001b9d0:	da810915 	stw	r10,1060(sp)
1001b9d4:	dec10015 	stw	sp,1024(sp)
1001b9d8:	dec10415 	stw	sp,1040(sp)
1001b9dc:	da410215 	stw	r9,1032(sp)
1001b9e0:	da410515 	stw	r9,1044(sp)
1001b9e4:	d8010615 	stw	zero,1048(sp)
1001b9e8:	001b2c40 	call	1001b2c4 <___vfiprintf_internal_r>
1001b9ec:	1021883a 	mov	r16,r2
1001b9f0:	10000416 	blt	r2,zero,1001ba04 <___vfiprintf_internal_r+0x740>
1001b9f4:	d9012017 	ldw	r4,1152(sp)
1001b9f8:	d9410004 	addi	r5,sp,1024
1001b9fc:	00141a40 	call	100141a4 <_fflush_r>
1001ba00:	1002fc1e 	bne	r2,zero,1001c5f4 <___vfiprintf_internal_r+0x1330>
1001ba04:	d881030b 	ldhu	r2,1036(sp)
1001ba08:	1080100c 	andi	r2,r2,64
1001ba0c:	10000326 	beq	r2,zero,1001ba1c <___vfiprintf_internal_r+0x758>
1001ba10:	a080030b 	ldhu	r2,12(r20)
1001ba14:	10801014 	ori	r2,r2,64
1001ba18:	a080030d 	sth	r2,12(r20)
1001ba1c:	8005883a 	mov	r2,r16
1001ba20:	00000106 	br	1001ba28 <___vfiprintf_internal_r+0x764>
1001ba24:	00bfffc4 	movi	r2,-1
1001ba28:	dfc13517 	ldw	ra,1236(sp)
1001ba2c:	df013417 	ldw	fp,1232(sp)
1001ba30:	ddc13317 	ldw	r23,1228(sp)
1001ba34:	dd813217 	ldw	r22,1224(sp)
1001ba38:	dd413117 	ldw	r21,1220(sp)
1001ba3c:	dd013017 	ldw	r20,1216(sp)
1001ba40:	dcc12f17 	ldw	r19,1212(sp)
1001ba44:	dc812e17 	ldw	r18,1208(sp)
1001ba48:	dc412d17 	ldw	r17,1204(sp)
1001ba4c:	dc012c17 	ldw	r16,1200(sp)
1001ba50:	dec13604 	addi	sp,sp,1240
1001ba54:	f800283a 	ret
1001ba58:	001474c0 	call	1001474c <__sinit>
1001ba5c:	003e2b06 	br	1001b30c <__alt_data_end+0xf001b30c>
1001ba60:	04e7c83a 	sub	r19,zero,r19
1001ba64:	d8812115 	stw	r2,1156(sp)
1001ba68:	ad400114 	ori	r21,r21,4
1001ba6c:	80c00007 	ldb	r3,0(r16)
1001ba70:	003e7306 	br	1001b440 <__alt_data_end+0xf001b440>
1001ba74:	a880040c 	andi	r2,r21,16
1001ba78:	1000e41e 	bne	r2,zero,1001be0c <___vfiprintf_internal_r+0xb48>
1001ba7c:	a880100c 	andi	r2,r21,64
1001ba80:	1000e226 	beq	r2,zero,1001be0c <___vfiprintf_internal_r+0xb48>
1001ba84:	da812117 	ldw	r10,1156(sp)
1001ba88:	002d883a 	mov	r22,zero
1001ba8c:	0005883a 	mov	r2,zero
1001ba90:	5480000b 	ldhu	r18,0(r10)
1001ba94:	52800104 	addi	r10,r10,4
1001ba98:	da812115 	stw	r10,1156(sp)
1001ba9c:	9009883a 	mov	r4,r18
1001baa0:	003ee706 	br	1001b640 <__alt_data_end+0xf001b640>
1001baa4:	da812117 	ldw	r10,1156(sp)
1001baa8:	00800044 	movi	r2,1
1001baac:	54800017 	ldw	r18,0(r10)
1001bab0:	55800117 	ldw	r22,4(r10)
1001bab4:	52800204 	addi	r10,r10,8
1001bab8:	da812115 	stw	r10,1156(sp)
1001babc:	9588b03a 	or	r4,r18,r22
1001bac0:	003edf06 	br	1001b640 <__alt_data_end+0xf001b640>
1001bac4:	02c400b4 	movhi	r11,4098
1001bac8:	5ad43904 	addi	r11,r11,20708
1001bacc:	d9811d85 	stb	r6,1142(sp)
1001bad0:	dac12615 	stw	r11,1176(sp)
1001bad4:	a900080c 	andi	r4,r21,32
1001bad8:	d8812117 	ldw	r2,1156(sp)
1001badc:	2000a526 	beq	r4,zero,1001bd74 <___vfiprintf_internal_r+0xab0>
1001bae0:	da812117 	ldw	r10,1156(sp)
1001bae4:	14800017 	ldw	r18,0(r2)
1001bae8:	15800117 	ldw	r22,4(r2)
1001baec:	52800204 	addi	r10,r10,8
1001baf0:	da812115 	stw	r10,1156(sp)
1001baf4:	a880004c 	andi	r2,r21,1
1001baf8:	1001d926 	beq	r2,zero,1001c260 <___vfiprintf_internal_r+0xf9c>
1001bafc:	9588b03a 	or	r4,r18,r22
1001bb00:	20024426 	beq	r4,zero,1001c414 <___vfiprintf_internal_r+0x1150>
1001bb04:	00800c04 	movi	r2,48
1001bb08:	d8811d05 	stb	r2,1140(sp)
1001bb0c:	d8c11d45 	stb	r3,1141(sp)
1001bb10:	ad400094 	ori	r21,r21,2
1001bb14:	00800084 	movi	r2,2
1001bb18:	003ec906 	br	1001b640 <__alt_data_end+0xf001b640>
1001bb1c:	da812117 	ldw	r10,1156(sp)
1001bb20:	04800044 	movi	r18,1
1001bb24:	dac10004 	addi	r11,sp,1024
1001bb28:	50800017 	ldw	r2,0(r10)
1001bb2c:	52800104 	addi	r10,r10,4
1001bb30:	d8011d85 	stb	zero,1142(sp)
1001bb34:	d8810005 	stb	r2,1024(sp)
1001bb38:	da812115 	stw	r10,1156(sp)
1001bb3c:	9023883a 	mov	r17,r18
1001bb40:	dac12415 	stw	r11,1168(sp)
1001bb44:	0013883a 	mov	r9,zero
1001bb48:	003ee206 	br	1001b6d4 <__alt_data_end+0xf001b6d4>
1001bb4c:	ad402014 	ori	r21,r21,128
1001bb50:	80c00007 	ldb	r3,0(r16)
1001bb54:	003e3a06 	br	1001b440 <__alt_data_end+0xf001b440>
1001bb58:	8015883a 	mov	r10,r16
1001bb5c:	0027883a 	mov	r19,zero
1001bb60:	18bff404 	addi	r2,r3,-48
1001bb64:	50c00007 	ldb	r3,0(r10)
1001bb68:	9cc002a4 	muli	r19,r19,10
1001bb6c:	84000044 	addi	r16,r16,1
1001bb70:	8015883a 	mov	r10,r16
1001bb74:	98a7883a 	add	r19,r19,r2
1001bb78:	18bff404 	addi	r2,r3,-48
1001bb7c:	28bff92e 	bgeu	r5,r2,1001bb64 <__alt_data_end+0xf001bb64>
1001bb80:	003e3006 	br	1001b444 <__alt_data_end+0xf001b444>
1001bb84:	ad400414 	ori	r21,r21,16
1001bb88:	d9811d85 	stb	r6,1142(sp)
1001bb8c:	a880080c 	andi	r2,r21,32
1001bb90:	d8c12117 	ldw	r3,1156(sp)
1001bb94:	10004b26 	beq	r2,zero,1001bcc4 <___vfiprintf_internal_r+0xa00>
1001bb98:	da812117 	ldw	r10,1156(sp)
1001bb9c:	18800117 	ldw	r2,4(r3)
1001bba0:	1c800017 	ldw	r18,0(r3)
1001bba4:	52800204 	addi	r10,r10,8
1001bba8:	da812115 	stw	r10,1156(sp)
1001bbac:	102d883a 	mov	r22,r2
1001bbb0:	1001f116 	blt	r2,zero,1001c378 <___vfiprintf_internal_r+0x10b4>
1001bbb4:	db011d83 	ldbu	r12,1142(sp)
1001bbb8:	4823883a 	mov	r17,r9
1001bbbc:	00800044 	movi	r2,1
1001bbc0:	9588b03a 	or	r4,r18,r22
1001bbc4:	003ea106 	br	1001b64c <__alt_data_end+0xf001b64c>
1001bbc8:	80c00007 	ldb	r3,0(r16)
1001bbcc:	82800044 	addi	r10,r16,1
1001bbd0:	1b027f26 	beq	r3,r12,1001c5d0 <___vfiprintf_internal_r+0x130c>
1001bbd4:	18bff404 	addi	r2,r3,-48
1001bbd8:	5021883a 	mov	r16,r10
1001bbdc:	0013883a 	mov	r9,zero
1001bbe0:	28be1836 	bltu	r5,r2,1001b444 <__alt_data_end+0xf001b444>
1001bbe4:	80c00007 	ldb	r3,0(r16)
1001bbe8:	4a4002a4 	muli	r9,r9,10
1001bbec:	84000044 	addi	r16,r16,1
1001bbf0:	1253883a 	add	r9,r2,r9
1001bbf4:	18bff404 	addi	r2,r3,-48
1001bbf8:	28bffa2e 	bgeu	r5,r2,1001bbe4 <__alt_data_end+0xf001bbe4>
1001bbfc:	483e110e 	bge	r9,zero,1001b444 <__alt_data_end+0xf001b444>
1001bc00:	027fffc4 	movi	r9,-1
1001bc04:	003e0f06 	br	1001b444 <__alt_data_end+0xf001b444>
1001bc08:	d9811d85 	stb	r6,1142(sp)
1001bc0c:	a880080c 	andi	r2,r21,32
1001bc10:	1001ee26 	beq	r2,zero,1001c3cc <___vfiprintf_internal_r+0x1108>
1001bc14:	da812117 	ldw	r10,1156(sp)
1001bc18:	dac12217 	ldw	r11,1160(sp)
1001bc1c:	50800017 	ldw	r2,0(r10)
1001bc20:	5807d7fa 	srai	r3,r11,31
1001bc24:	52800104 	addi	r10,r10,4
1001bc28:	da812115 	stw	r10,1156(sp)
1001bc2c:	12c00015 	stw	r11,0(r2)
1001bc30:	10c00115 	stw	r3,4(r2)
1001bc34:	003dd806 	br	1001b398 <__alt_data_end+0xf001b398>
1001bc38:	30803fcc 	andi	r2,r6,255
1001bc3c:	1080201c 	xori	r2,r2,128
1001bc40:	10bfe004 	addi	r2,r2,-128
1001bc44:	1001df1e 	bne	r2,zero,1001c3c4 <___vfiprintf_internal_r+0x1100>
1001bc48:	01800804 	movi	r6,32
1001bc4c:	80c00007 	ldb	r3,0(r16)
1001bc50:	003dfb06 	br	1001b440 <__alt_data_end+0xf001b440>
1001bc54:	da812117 	ldw	r10,1156(sp)
1001bc58:	dac12117 	ldw	r11,1156(sp)
1001bc5c:	d8011d85 	stb	zero,1142(sp)
1001bc60:	52800017 	ldw	r10,0(r10)
1001bc64:	5d800104 	addi	r22,r11,4
1001bc68:	da812415 	stw	r10,1168(sp)
1001bc6c:	50023b26 	beq	r10,zero,1001c55c <___vfiprintf_internal_r+0x1298>
1001bc70:	d9012417 	ldw	r4,1168(sp)
1001bc74:	48021f16 	blt	r9,zero,1001c4f4 <___vfiprintf_internal_r+0x1230>
1001bc78:	480d883a 	mov	r6,r9
1001bc7c:	000b883a 	mov	r5,zero
1001bc80:	da012a15 	stw	r8,1192(sp)
1001bc84:	da412b15 	stw	r9,1196(sp)
1001bc88:	00160f00 	call	100160f0 <memchr>
1001bc8c:	da012a17 	ldw	r8,1192(sp)
1001bc90:	da412b17 	ldw	r9,1196(sp)
1001bc94:	10024726 	beq	r2,zero,1001c5b4 <___vfiprintf_internal_r+0x12f0>
1001bc98:	d8c12417 	ldw	r3,1168(sp)
1001bc9c:	10e3c83a 	sub	r17,r2,r3
1001bca0:	4c41f616 	blt	r9,r17,1001c47c <___vfiprintf_internal_r+0x11b8>
1001bca4:	db011d83 	ldbu	r12,1142(sp)
1001bca8:	dd812115 	stw	r22,1156(sp)
1001bcac:	0013883a 	mov	r9,zero
1001bcb0:	003e8006 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001bcb4:	d9811d85 	stb	r6,1142(sp)
1001bcb8:	a880080c 	andi	r2,r21,32
1001bcbc:	d8c12117 	ldw	r3,1156(sp)
1001bcc0:	103fb51e 	bne	r2,zero,1001bb98 <__alt_data_end+0xf001bb98>
1001bcc4:	a880040c 	andi	r2,r21,16
1001bcc8:	10015e1e 	bne	r2,zero,1001c244 <___vfiprintf_internal_r+0xf80>
1001bccc:	a880100c 	andi	r2,r21,64
1001bcd0:	10015c26 	beq	r2,zero,1001c244 <___vfiprintf_internal_r+0xf80>
1001bcd4:	1c80000f 	ldh	r18,0(r3)
1001bcd8:	da812117 	ldw	r10,1156(sp)
1001bcdc:	902dd7fa 	srai	r22,r18,31
1001bce0:	52800104 	addi	r10,r10,4
1001bce4:	da812115 	stw	r10,1156(sp)
1001bce8:	b005883a 	mov	r2,r22
1001bcec:	003fb006 	br	1001bbb0 <__alt_data_end+0xf001bbb0>
1001bcf0:	da812117 	ldw	r10,1156(sp)
1001bcf4:	00800c04 	movi	r2,48
1001bcf8:	02c400b4 	movhi	r11,4098
1001bcfc:	54800017 	ldw	r18,0(r10)
1001bd00:	d8811d05 	stb	r2,1140(sp)
1001bd04:	52800104 	addi	r10,r10,4
1001bd08:	00801e04 	movi	r2,120
1001bd0c:	5ad43e04 	addi	r11,r11,20728
1001bd10:	d8811d45 	stb	r2,1141(sp)
1001bd14:	002d883a 	mov	r22,zero
1001bd18:	ad400094 	ori	r21,r21,2
1001bd1c:	da812115 	stw	r10,1156(sp)
1001bd20:	dac12615 	stw	r11,1176(sp)
1001bd24:	00800084 	movi	r2,2
1001bd28:	9009883a 	mov	r4,r18
1001bd2c:	003e4406 	br	1001b640 <__alt_data_end+0xf001b640>
1001bd30:	ad400814 	ori	r21,r21,32
1001bd34:	80c00007 	ldb	r3,0(r16)
1001bd38:	003dc106 	br	1001b440 <__alt_data_end+0xf001b440>
1001bd3c:	ad401014 	ori	r21,r21,64
1001bd40:	80c00007 	ldb	r3,0(r16)
1001bd44:	003dbe06 	br	1001b440 <__alt_data_end+0xf001b440>
1001bd48:	80c00007 	ldb	r3,0(r16)
1001bd4c:	19c1de26 	beq	r3,r7,1001c4c8 <___vfiprintf_internal_r+0x1204>
1001bd50:	ad400414 	ori	r21,r21,16
1001bd54:	003dba06 	br	1001b440 <__alt_data_end+0xf001b440>
1001bd58:	008400b4 	movhi	r2,4098
1001bd5c:	10943e04 	addi	r2,r2,20728
1001bd60:	d8812615 	stw	r2,1176(sp)
1001bd64:	d9811d85 	stb	r6,1142(sp)
1001bd68:	a900080c 	andi	r4,r21,32
1001bd6c:	d8812117 	ldw	r2,1156(sp)
1001bd70:	203f5b1e 	bne	r4,zero,1001bae0 <__alt_data_end+0xf001bae0>
1001bd74:	a900040c 	andi	r4,r21,16
1001bd78:	2001a826 	beq	r4,zero,1001c41c <___vfiprintf_internal_r+0x1158>
1001bd7c:	dac12117 	ldw	r11,1156(sp)
1001bd80:	14800017 	ldw	r18,0(r2)
1001bd84:	002d883a 	mov	r22,zero
1001bd88:	5ac00104 	addi	r11,r11,4
1001bd8c:	dac12115 	stw	r11,1156(sp)
1001bd90:	003f5806 	br	1001baf4 <__alt_data_end+0xf001baf4>
1001bd94:	da812117 	ldw	r10,1156(sp)
1001bd98:	54c00017 	ldw	r19,0(r10)
1001bd9c:	50800104 	addi	r2,r10,4
1001bda0:	983f2f16 	blt	r19,zero,1001ba60 <__alt_data_end+0xf001ba60>
1001bda4:	d8812115 	stw	r2,1156(sp)
1001bda8:	80c00007 	ldb	r3,0(r16)
1001bdac:	003da406 	br	1001b440 <__alt_data_end+0xf001b440>
1001bdb0:	01800ac4 	movi	r6,43
1001bdb4:	80c00007 	ldb	r3,0(r16)
1001bdb8:	003da106 	br	1001b440 <__alt_data_end+0xf001b440>
1001bdbc:	ad400054 	ori	r21,r21,1
1001bdc0:	80c00007 	ldb	r3,0(r16)
1001bdc4:	003d9e06 	br	1001b440 <__alt_data_end+0xf001b440>
1001bdc8:	d9811d85 	stb	r6,1142(sp)
1001bdcc:	18007126 	beq	r3,zero,1001bf94 <___vfiprintf_internal_r+0xcd0>
1001bdd0:	04800044 	movi	r18,1
1001bdd4:	d8c10005 	stb	r3,1024(sp)
1001bdd8:	d8c10004 	addi	r3,sp,1024
1001bddc:	d8011d85 	stb	zero,1142(sp)
1001bde0:	9023883a 	mov	r17,r18
1001bde4:	d8c12415 	stw	r3,1168(sp)
1001bde8:	003f5606 	br	1001bb44 <__alt_data_end+0xf001bb44>
1001bdec:	dac12117 	ldw	r11,1156(sp)
1001bdf0:	002d883a 	mov	r22,zero
1001bdf4:	00800044 	movi	r2,1
1001bdf8:	5c800017 	ldw	r18,0(r11)
1001bdfc:	5ac00104 	addi	r11,r11,4
1001be00:	dac12115 	stw	r11,1156(sp)
1001be04:	9009883a 	mov	r4,r18
1001be08:	003e0d06 	br	1001b640 <__alt_data_end+0xf001b640>
1001be0c:	dac12117 	ldw	r11,1156(sp)
1001be10:	002d883a 	mov	r22,zero
1001be14:	0005883a 	mov	r2,zero
1001be18:	5c800017 	ldw	r18,0(r11)
1001be1c:	5ac00104 	addi	r11,r11,4
1001be20:	dac12115 	stw	r11,1156(sp)
1001be24:	9009883a 	mov	r4,r18
1001be28:	003e0506 	br	1001b640 <__alt_data_end+0xf001b640>
1001be2c:	d9012017 	ldw	r4,1152(sp)
1001be30:	a00b883a 	mov	r5,r20
1001be34:	d9811a04 	addi	r6,sp,1128
1001be38:	d8c12a15 	stw	r3,1192(sp)
1001be3c:	db012b15 	stw	r12,1196(sp)
1001be40:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001be44:	d8c12a17 	ldw	r3,1192(sp)
1001be48:	db012b17 	ldw	r12,1196(sp)
1001be4c:	1000571e 	bne	r2,zero,1001bfac <___vfiprintf_internal_r+0xce8>
1001be50:	d9811b17 	ldw	r6,1132(sp)
1001be54:	d8811c17 	ldw	r2,1136(sp)
1001be58:	d811883a 	mov	r8,sp
1001be5c:	31400044 	addi	r5,r6,1
1001be60:	003e3306 	br	1001b730 <__alt_data_end+0xf001b730>
1001be64:	d9411b17 	ldw	r5,1132(sp)
1001be68:	d8c11c17 	ldw	r3,1136(sp)
1001be6c:	28800044 	addi	r2,r5,1
1001be70:	d9011d87 	ldb	r4,1142(sp)
1001be74:	203e4d26 	beq	r4,zero,1001b7ac <__alt_data_end+0xf001b7ac>
1001be78:	01000044 	movi	r4,1
1001be7c:	d9411d84 	addi	r5,sp,1142
1001be80:	1907883a 	add	r3,r3,r4
1001be84:	41400015 	stw	r5,0(r8)
1001be88:	41000115 	stw	r4,4(r8)
1001be8c:	d8c11c15 	stw	r3,1136(sp)
1001be90:	d8811b15 	stw	r2,1132(sp)
1001be94:	014001c4 	movi	r5,7
1001be98:	2880aa16 	blt	r5,r2,1001c144 <___vfiprintf_internal_r+0xe80>
1001be9c:	100b883a 	mov	r5,r2
1001bea0:	42000204 	addi	r8,r8,8
1001bea4:	10800044 	addi	r2,r2,1
1001bea8:	003e4006 	br	1001b7ac <__alt_data_end+0xf001b7ac>
1001beac:	d9012017 	ldw	r4,1152(sp)
1001beb0:	a00b883a 	mov	r5,r20
1001beb4:	d9811a04 	addi	r6,sp,1128
1001beb8:	d9c12a15 	stw	r7,1192(sp)
1001bebc:	db012b15 	stw	r12,1196(sp)
1001bec0:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001bec4:	d9c12a17 	ldw	r7,1192(sp)
1001bec8:	db012b17 	ldw	r12,1196(sp)
1001becc:	1000371e 	bne	r2,zero,1001bfac <___vfiprintf_internal_r+0xce8>
1001bed0:	d9411b17 	ldw	r5,1132(sp)
1001bed4:	d8c11c17 	ldw	r3,1136(sp)
1001bed8:	d811883a 	mov	r8,sp
1001bedc:	28800044 	addi	r2,r5,1
1001bee0:	003e4d06 	br	1001b818 <__alt_data_end+0xf001b818>
1001bee4:	10803fcc 	andi	r2,r2,255
1001bee8:	00c00044 	movi	r3,1
1001beec:	10fddf1e 	bne	r2,r3,1001b66c <__alt_data_end+0xf001b66c>
1001bef0:	b000021e 	bne	r22,zero,1001befc <___vfiprintf_internal_r+0xc38>
1001bef4:	00800244 	movi	r2,9
1001bef8:	1480202e 	bgeu	r2,r18,1001bf7c <___vfiprintf_internal_r+0xcb8>
1001befc:	dc012515 	stw	r16,1172(sp)
1001bf00:	dc410a04 	addi	r17,sp,1064
1001bf04:	9021883a 	mov	r16,r18
1001bf08:	da012415 	stw	r8,1168(sp)
1001bf0c:	b025883a 	mov	r18,r22
1001bf10:	da412315 	stw	r9,1164(sp)
1001bf14:	602d883a 	mov	r22,r12
1001bf18:	8009883a 	mov	r4,r16
1001bf1c:	900b883a 	mov	r5,r18
1001bf20:	01800284 	movi	r6,10
1001bf24:	000f883a 	mov	r7,zero
1001bf28:	001e3040 	call	1001e304 <__umoddi3>
1001bf2c:	10800c04 	addi	r2,r2,48
1001bf30:	8c7fffc4 	addi	r17,r17,-1
1001bf34:	8009883a 	mov	r4,r16
1001bf38:	900b883a 	mov	r5,r18
1001bf3c:	01800284 	movi	r6,10
1001bf40:	000f883a 	mov	r7,zero
1001bf44:	88800005 	stb	r2,0(r17)
1001bf48:	001dd440 	call	1001dd44 <__udivdi3>
1001bf4c:	1021883a 	mov	r16,r2
1001bf50:	10c4b03a 	or	r2,r2,r3
1001bf54:	1825883a 	mov	r18,r3
1001bf58:	103fef1e 	bne	r2,zero,1001bf18 <__alt_data_end+0xf001bf18>
1001bf5c:	da811e17 	ldw	r10,1144(sp)
1001bf60:	da012417 	ldw	r8,1168(sp)
1001bf64:	da412317 	ldw	r9,1164(sp)
1001bf68:	dc412415 	stw	r17,1168(sp)
1001bf6c:	b019883a 	mov	r12,r22
1001bf70:	dc012517 	ldw	r16,1172(sp)
1001bf74:	5463c83a 	sub	r17,r10,r17
1001bf78:	003dce06 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001bf7c:	94800c04 	addi	r18,r18,48
1001bf80:	d8c109c4 	addi	r3,sp,1063
1001bf84:	dc8109c5 	stb	r18,1063(sp)
1001bf88:	dc412717 	ldw	r17,1180(sp)
1001bf8c:	d8c12415 	stw	r3,1168(sp)
1001bf90:	003dc806 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001bf94:	d8811c17 	ldw	r2,1136(sp)
1001bf98:	10000426 	beq	r2,zero,1001bfac <___vfiprintf_internal_r+0xce8>
1001bf9c:	d9012017 	ldw	r4,1152(sp)
1001bfa0:	a00b883a 	mov	r5,r20
1001bfa4:	d9811a04 	addi	r6,sp,1128
1001bfa8:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001bfac:	a080030b 	ldhu	r2,12(r20)
1001bfb0:	1080100c 	andi	r2,r2,64
1001bfb4:	103e9b1e 	bne	r2,zero,1001ba24 <__alt_data_end+0xf001ba24>
1001bfb8:	d8812217 	ldw	r2,1160(sp)
1001bfbc:	003e9a06 	br	1001ba28 <__alt_data_end+0xf001ba28>
1001bfc0:	d9012017 	ldw	r4,1152(sp)
1001bfc4:	a00b883a 	mov	r5,r20
1001bfc8:	d9811a04 	addi	r6,sp,1128
1001bfcc:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001bfd0:	103ff61e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001bfd4:	d9011b17 	ldw	r4,1132(sp)
1001bfd8:	d8c11c17 	ldw	r3,1136(sp)
1001bfdc:	d811883a 	mov	r8,sp
1001bfe0:	21400044 	addi	r5,r4,1
1001bfe4:	003e4006 	br	1001b8e8 <__alt_data_end+0xf001b8e8>
1001bfe8:	1800d61e 	bne	r3,zero,1001c344 <___vfiprintf_internal_r+0x1080>
1001bfec:	dac12417 	ldw	r11,1168(sp)
1001bff0:	00800044 	movi	r2,1
1001bff4:	dc400115 	stw	r17,4(sp)
1001bff8:	dac00015 	stw	r11,0(sp)
1001bffc:	dc411c15 	stw	r17,1136(sp)
1001c000:	d8811b15 	stw	r2,1132(sp)
1001c004:	8807883a 	mov	r3,r17
1001c008:	d811883a 	mov	r8,sp
1001c00c:	42000204 	addi	r8,r8,8
1001c010:	aac0010c 	andi	r11,r21,4
1001c014:	58000226 	beq	r11,zero,1001c020 <___vfiprintf_internal_r+0xd5c>
1001c018:	9ca3c83a 	sub	r17,r19,r18
1001c01c:	047e2616 	blt	zero,r17,1001b8b8 <__alt_data_end+0xf001b8b8>
1001c020:	94c0010e 	bge	r18,r19,1001c028 <___vfiprintf_internal_r+0xd64>
1001c024:	9825883a 	mov	r18,r19
1001c028:	da812217 	ldw	r10,1160(sp)
1001c02c:	5495883a 	add	r10,r10,r18
1001c030:	da812215 	stw	r10,1160(sp)
1001c034:	183e4826 	beq	r3,zero,1001b958 <__alt_data_end+0xf001b958>
1001c038:	d9012017 	ldw	r4,1152(sp)
1001c03c:	a00b883a 	mov	r5,r20
1001c040:	d9811a04 	addi	r6,sp,1128
1001c044:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c048:	103e4326 	beq	r2,zero,1001b958 <__alt_data_end+0xf001b958>
1001c04c:	003fd706 	br	1001bfac <__alt_data_end+0xf001bfac>
1001c050:	9cadc83a 	sub	r22,r19,r18
1001c054:	05bde40e 	bge	zero,r22,1001b7e8 <__alt_data_end+0xf001b7e8>
1001c058:	03000404 	movi	r12,16
1001c05c:	6581500e 	bge	r12,r22,1001c5a0 <___vfiprintf_internal_r+0x12dc>
1001c060:	008400b4 	movhi	r2,4098
1001c064:	10956804 	addi	r2,r2,21920
1001c068:	d8812315 	stw	r2,1164(sp)
1001c06c:	8005883a 	mov	r2,r16
1001c070:	038001c4 	movi	r14,7
1001c074:	b021883a 	mov	r16,r22
1001c078:	da412515 	stw	r9,1172(sp)
1001c07c:	102d883a 	mov	r22,r2
1001c080:	00000506 	br	1001c098 <___vfiprintf_internal_r+0xdd4>
1001c084:	29000084 	addi	r4,r5,2
1001c088:	42000204 	addi	r8,r8,8
1001c08c:	100b883a 	mov	r5,r2
1001c090:	843ffc04 	addi	r16,r16,-16
1001c094:	64000d0e 	bge	r12,r16,1001c0cc <___vfiprintf_internal_r+0xe08>
1001c098:	18c00404 	addi	r3,r3,16
1001c09c:	28800044 	addi	r2,r5,1
1001c0a0:	45c00015 	stw	r23,0(r8)
1001c0a4:	43000115 	stw	r12,4(r8)
1001c0a8:	d8c11c15 	stw	r3,1136(sp)
1001c0ac:	d8811b15 	stw	r2,1132(sp)
1001c0b0:	70bff40e 	bge	r14,r2,1001c084 <__alt_data_end+0xf001c084>
1001c0b4:	1800151e 	bne	r3,zero,1001c10c <___vfiprintf_internal_r+0xe48>
1001c0b8:	843ffc04 	addi	r16,r16,-16
1001c0bc:	000b883a 	mov	r5,zero
1001c0c0:	01000044 	movi	r4,1
1001c0c4:	d811883a 	mov	r8,sp
1001c0c8:	643ff316 	blt	r12,r16,1001c098 <__alt_data_end+0xf001c098>
1001c0cc:	da412517 	ldw	r9,1172(sp)
1001c0d0:	b005883a 	mov	r2,r22
1001c0d4:	802d883a 	mov	r22,r16
1001c0d8:	1021883a 	mov	r16,r2
1001c0dc:	da812317 	ldw	r10,1164(sp)
1001c0e0:	1d87883a 	add	r3,r3,r22
1001c0e4:	45800115 	stw	r22,4(r8)
1001c0e8:	42800015 	stw	r10,0(r8)
1001c0ec:	d8c11c15 	stw	r3,1136(sp)
1001c0f0:	d9011b15 	stw	r4,1132(sp)
1001c0f4:	008001c4 	movi	r2,7
1001c0f8:	11008d16 	blt	r2,r4,1001c330 <___vfiprintf_internal_r+0x106c>
1001c0fc:	42000204 	addi	r8,r8,8
1001c100:	20800044 	addi	r2,r4,1
1001c104:	200b883a 	mov	r5,r4
1001c108:	003db706 	br	1001b7e8 <__alt_data_end+0xf001b7e8>
1001c10c:	d9012017 	ldw	r4,1152(sp)
1001c110:	a00b883a 	mov	r5,r20
1001c114:	d9811a04 	addi	r6,sp,1128
1001c118:	db012b15 	stw	r12,1196(sp)
1001c11c:	db812a15 	stw	r14,1192(sp)
1001c120:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c124:	db012b17 	ldw	r12,1196(sp)
1001c128:	db812a17 	ldw	r14,1192(sp)
1001c12c:	103f9f1e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c130:	d9411b17 	ldw	r5,1132(sp)
1001c134:	d8c11c17 	ldw	r3,1136(sp)
1001c138:	d811883a 	mov	r8,sp
1001c13c:	29000044 	addi	r4,r5,1
1001c140:	003fd306 	br	1001c090 <__alt_data_end+0xf001c090>
1001c144:	18006c1e 	bne	r3,zero,1001c2f8 <___vfiprintf_internal_r+0x1034>
1001c148:	70004f26 	beq	r14,zero,1001c288 <___vfiprintf_internal_r+0xfc4>
1001c14c:	d8811d04 	addi	r2,sp,1140
1001c150:	00c00084 	movi	r3,2
1001c154:	d8800015 	stw	r2,0(sp)
1001c158:	d8c00115 	stw	r3,4(sp)
1001c15c:	2005883a 	mov	r2,r4
1001c160:	d811883a 	mov	r8,sp
1001c164:	003d9b06 	br	1001b7d4 <__alt_data_end+0xf001b7d4>
1001c168:	1800571e 	bne	r3,zero,1001c2c8 <___vfiprintf_internal_r+0x1004>
1001c16c:	000b883a 	mov	r5,zero
1001c170:	00800044 	movi	r2,1
1001c174:	d811883a 	mov	r8,sp
1001c178:	003d9906 	br	1001b7e0 <__alt_data_end+0xf001b7e0>
1001c17c:	10803fcc 	andi	r2,r2,255
1001c180:	1000251e 	bne	r2,zero,1001c218 <___vfiprintf_internal_r+0xf54>
1001c184:	a880004c 	andi	r2,r21,1
1001c188:	10007826 	beq	r2,zero,1001c36c <___vfiprintf_internal_r+0x10a8>
1001c18c:	00800c04 	movi	r2,48
1001c190:	d8c109c4 	addi	r3,sp,1063
1001c194:	d88109c5 	stb	r2,1063(sp)
1001c198:	dc412717 	ldw	r17,1180(sp)
1001c19c:	d8c12415 	stw	r3,1168(sp)
1001c1a0:	003d4406 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c1a4:	d9012617 	ldw	r4,1176(sp)
1001c1a8:	dc410a04 	addi	r17,sp,1064
1001c1ac:	908003cc 	andi	r2,r18,15
1001c1b0:	b006973a 	slli	r3,r22,28
1001c1b4:	2085883a 	add	r2,r4,r2
1001c1b8:	9024d13a 	srli	r18,r18,4
1001c1bc:	10800003 	ldbu	r2,0(r2)
1001c1c0:	b02cd13a 	srli	r22,r22,4
1001c1c4:	8c7fffc4 	addi	r17,r17,-1
1001c1c8:	1ca4b03a 	or	r18,r3,r18
1001c1cc:	88800005 	stb	r2,0(r17)
1001c1d0:	9584b03a 	or	r2,r18,r22
1001c1d4:	103ff51e 	bne	r2,zero,1001c1ac <__alt_data_end+0xf001c1ac>
1001c1d8:	dac11e17 	ldw	r11,1144(sp)
1001c1dc:	dc412415 	stw	r17,1168(sp)
1001c1e0:	5c63c83a 	sub	r17,r11,r17
1001c1e4:	003d3306 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c1e8:	1800941e 	bne	r3,zero,1001c43c <___vfiprintf_internal_r+0x1178>
1001c1ec:	d8811d87 	ldb	r2,1142(sp)
1001c1f0:	10006b26 	beq	r2,zero,1001c3a0 <___vfiprintf_internal_r+0x10dc>
1001c1f4:	00c00044 	movi	r3,1
1001c1f8:	d9011d84 	addi	r4,sp,1142
1001c1fc:	1805883a 	mov	r2,r3
1001c200:	d9000015 	stw	r4,0(sp)
1001c204:	d8c00115 	stw	r3,4(sp)
1001c208:	d811883a 	mov	r8,sp
1001c20c:	003f2306 	br	1001be9c <__alt_data_end+0xf001be9c>
1001c210:	8023883a 	mov	r17,r16
1001c214:	003c7d06 	br	1001b40c <__alt_data_end+0xf001b40c>
1001c218:	da810a04 	addi	r10,sp,1064
1001c21c:	da812415 	stw	r10,1168(sp)
1001c220:	003d2406 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c224:	d9012017 	ldw	r4,1152(sp)
1001c228:	a00b883a 	mov	r5,r20
1001c22c:	d9811a04 	addi	r6,sp,1128
1001c230:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c234:	103f5d1e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c238:	d8c11c17 	ldw	r3,1136(sp)
1001c23c:	d811883a 	mov	r8,sp
1001c240:	003f7306 	br	1001c010 <__alt_data_end+0xf001c010>
1001c244:	1c800017 	ldw	r18,0(r3)
1001c248:	dac12117 	ldw	r11,1156(sp)
1001c24c:	902dd7fa 	srai	r22,r18,31
1001c250:	5ac00104 	addi	r11,r11,4
1001c254:	dac12115 	stw	r11,1156(sp)
1001c258:	b005883a 	mov	r2,r22
1001c25c:	003e5406 	br	1001bbb0 <__alt_data_end+0xf001bbb0>
1001c260:	00800084 	movi	r2,2
1001c264:	9588b03a 	or	r4,r18,r22
1001c268:	003cf506 	br	1001b640 <__alt_data_end+0xf001b640>
1001c26c:	d9012017 	ldw	r4,1152(sp)
1001c270:	a00b883a 	mov	r5,r20
1001c274:	d9811a04 	addi	r6,sp,1128
1001c278:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c27c:	103f4b1e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c280:	d811883a 	mov	r8,sp
1001c284:	003cd106 	br	1001b5cc <__alt_data_end+0xf001b5cc>
1001c288:	000b883a 	mov	r5,zero
1001c28c:	2005883a 	mov	r2,r4
1001c290:	d811883a 	mov	r8,sp
1001c294:	003d5206 	br	1001b7e0 <__alt_data_end+0xf001b7e0>
1001c298:	10803fcc 	andi	r2,r2,255
1001c29c:	1080201c 	xori	r2,r2,128
1001c2a0:	10bfe004 	addi	r2,r2,-128
1001c2a4:	01000c04 	movi	r4,48
1001c2a8:	11008e26 	beq	r2,r4,1001c4e4 <___vfiprintf_internal_r+0x1220>
1001c2ac:	da812417 	ldw	r10,1168(sp)
1001c2b0:	dac11e17 	ldw	r11,1144(sp)
1001c2b4:	193fffc5 	stb	r4,-1(r3)
1001c2b8:	52bfffc4 	addi	r10,r10,-1
1001c2bc:	da812415 	stw	r10,1168(sp)
1001c2c0:	5aa3c83a 	sub	r17,r11,r10
1001c2c4:	003cfb06 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c2c8:	d9012017 	ldw	r4,1152(sp)
1001c2cc:	a00b883a 	mov	r5,r20
1001c2d0:	d9811a04 	addi	r6,sp,1128
1001c2d4:	da412b15 	stw	r9,1196(sp)
1001c2d8:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c2dc:	da412b17 	ldw	r9,1196(sp)
1001c2e0:	103f321e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c2e4:	d9411b17 	ldw	r5,1132(sp)
1001c2e8:	d8c11c17 	ldw	r3,1136(sp)
1001c2ec:	d811883a 	mov	r8,sp
1001c2f0:	28800044 	addi	r2,r5,1
1001c2f4:	003d3a06 	br	1001b7e0 <__alt_data_end+0xf001b7e0>
1001c2f8:	d9012017 	ldw	r4,1152(sp)
1001c2fc:	a00b883a 	mov	r5,r20
1001c300:	d9811a04 	addi	r6,sp,1128
1001c304:	da412b15 	stw	r9,1196(sp)
1001c308:	db812a15 	stw	r14,1192(sp)
1001c30c:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c310:	da412b17 	ldw	r9,1196(sp)
1001c314:	db812a17 	ldw	r14,1192(sp)
1001c318:	103f241e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c31c:	d9411b17 	ldw	r5,1132(sp)
1001c320:	d8c11c17 	ldw	r3,1136(sp)
1001c324:	d811883a 	mov	r8,sp
1001c328:	28800044 	addi	r2,r5,1
1001c32c:	003d1f06 	br	1001b7ac <__alt_data_end+0xf001b7ac>
1001c330:	1800781e 	bne	r3,zero,1001c514 <___vfiprintf_internal_r+0x1250>
1001c334:	000b883a 	mov	r5,zero
1001c338:	00800044 	movi	r2,1
1001c33c:	d811883a 	mov	r8,sp
1001c340:	003d2906 	br	1001b7e8 <__alt_data_end+0xf001b7e8>
1001c344:	d9012017 	ldw	r4,1152(sp)
1001c348:	a00b883a 	mov	r5,r20
1001c34c:	d9811a04 	addi	r6,sp,1128
1001c350:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c354:	103f151e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c358:	d8811b17 	ldw	r2,1132(sp)
1001c35c:	d8c11c17 	ldw	r3,1136(sp)
1001c360:	d811883a 	mov	r8,sp
1001c364:	10800044 	addi	r2,r2,1
1001c368:	003d4406 	br	1001b87c <__alt_data_end+0xf001b87c>
1001c36c:	dac10a04 	addi	r11,sp,1064
1001c370:	dac12415 	stw	r11,1168(sp)
1001c374:	003ccf06 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c378:	04a5c83a 	sub	r18,zero,r18
1001c37c:	9004c03a 	cmpne	r2,r18,zero
1001c380:	05adc83a 	sub	r22,zero,r22
1001c384:	b0adc83a 	sub	r22,r22,r2
1001c388:	03000b44 	movi	r12,45
1001c38c:	db011d85 	stb	r12,1142(sp)
1001c390:	4823883a 	mov	r17,r9
1001c394:	00800044 	movi	r2,1
1001c398:	9588b03a 	or	r4,r18,r22
1001c39c:	003cab06 	br	1001b64c <__alt_data_end+0xf001b64c>
1001c3a0:	000b883a 	mov	r5,zero
1001c3a4:	00800044 	movi	r2,1
1001c3a8:	d811883a 	mov	r8,sp
1001c3ac:	703d0c26 	beq	r14,zero,1001b7e0 <__alt_data_end+0xf001b7e0>
1001c3b0:	00c00084 	movi	r3,2
1001c3b4:	d9011d04 	addi	r4,sp,1140
1001c3b8:	d9000015 	stw	r4,0(sp)
1001c3bc:	d8c00115 	stw	r3,4(sp)
1001c3c0:	003d0406 	br	1001b7d4 <__alt_data_end+0xf001b7d4>
1001c3c4:	80c00007 	ldb	r3,0(r16)
1001c3c8:	003c1d06 	br	1001b440 <__alt_data_end+0xf001b440>
1001c3cc:	a880040c 	andi	r2,r21,16
1001c3d0:	1000091e 	bne	r2,zero,1001c3f8 <___vfiprintf_internal_r+0x1134>
1001c3d4:	aac0100c 	andi	r11,r21,64
1001c3d8:	58000726 	beq	r11,zero,1001c3f8 <___vfiprintf_internal_r+0x1134>
1001c3dc:	da812117 	ldw	r10,1156(sp)
1001c3e0:	dac12217 	ldw	r11,1160(sp)
1001c3e4:	50800017 	ldw	r2,0(r10)
1001c3e8:	52800104 	addi	r10,r10,4
1001c3ec:	da812115 	stw	r10,1156(sp)
1001c3f0:	12c0000d 	sth	r11,0(r2)
1001c3f4:	003be806 	br	1001b398 <__alt_data_end+0xf001b398>
1001c3f8:	da812117 	ldw	r10,1156(sp)
1001c3fc:	dac12217 	ldw	r11,1160(sp)
1001c400:	50800017 	ldw	r2,0(r10)
1001c404:	52800104 	addi	r10,r10,4
1001c408:	da812115 	stw	r10,1156(sp)
1001c40c:	12c00015 	stw	r11,0(r2)
1001c410:	003be106 	br	1001b398 <__alt_data_end+0xf001b398>
1001c414:	00800084 	movi	r2,2
1001c418:	003c8906 	br	1001b640 <__alt_data_end+0xf001b640>
1001c41c:	a900100c 	andi	r4,r21,64
1001c420:	20001f26 	beq	r4,zero,1001c4a0 <___vfiprintf_internal_r+0x11dc>
1001c424:	da812117 	ldw	r10,1156(sp)
1001c428:	1480000b 	ldhu	r18,0(r2)
1001c42c:	002d883a 	mov	r22,zero
1001c430:	52800104 	addi	r10,r10,4
1001c434:	da812115 	stw	r10,1156(sp)
1001c438:	003dae06 	br	1001baf4 <__alt_data_end+0xf001baf4>
1001c43c:	d9012017 	ldw	r4,1152(sp)
1001c440:	a00b883a 	mov	r5,r20
1001c444:	d9811a04 	addi	r6,sp,1128
1001c448:	da412b15 	stw	r9,1196(sp)
1001c44c:	db812a15 	stw	r14,1192(sp)
1001c450:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c454:	da412b17 	ldw	r9,1196(sp)
1001c458:	db812a17 	ldw	r14,1192(sp)
1001c45c:	103ed31e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c460:	d9411b17 	ldw	r5,1132(sp)
1001c464:	d8c11c17 	ldw	r3,1136(sp)
1001c468:	d811883a 	mov	r8,sp
1001c46c:	28800044 	addi	r2,r5,1
1001c470:	003e7f06 	br	1001be70 <__alt_data_end+0xf001be70>
1001c474:	9825883a 	mov	r18,r19
1001c478:	003d3406 	br	1001b94c <__alt_data_end+0xf001b94c>
1001c47c:	4823883a 	mov	r17,r9
1001c480:	003e0806 	br	1001bca4 <__alt_data_end+0xf001bca4>
1001c484:	d9012017 	ldw	r4,1152(sp)
1001c488:	a00b883a 	mov	r5,r20
1001c48c:	d9811a04 	addi	r6,sp,1128
1001c490:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c494:	103ec51e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c498:	d8c11c17 	ldw	r3,1136(sp)
1001c49c:	003ee006 	br	1001c020 <__alt_data_end+0xf001c020>
1001c4a0:	dac12117 	ldw	r11,1156(sp)
1001c4a4:	14800017 	ldw	r18,0(r2)
1001c4a8:	002d883a 	mov	r22,zero
1001c4ac:	5ac00104 	addi	r11,r11,4
1001c4b0:	dac12115 	stw	r11,1156(sp)
1001c4b4:	003d8f06 	br	1001baf4 <__alt_data_end+0xf001baf4>
1001c4b8:	02c400b4 	movhi	r11,4098
1001c4bc:	5ad56804 	addi	r11,r11,21920
1001c4c0:	dac12315 	stw	r11,1164(sp)
1001c4c4:	003ce306 	br	1001b854 <__alt_data_end+0xf001b854>
1001c4c8:	80c00043 	ldbu	r3,1(r16)
1001c4cc:	ad400814 	ori	r21,r21,32
1001c4d0:	84000044 	addi	r16,r16,1
1001c4d4:	18c03fcc 	andi	r3,r3,255
1001c4d8:	18c0201c 	xori	r3,r3,128
1001c4dc:	18ffe004 	addi	r3,r3,-128
1001c4e0:	003bd706 	br	1001b440 <__alt_data_end+0xf001b440>
1001c4e4:	dac11e17 	ldw	r11,1144(sp)
1001c4e8:	d8c12417 	ldw	r3,1168(sp)
1001c4ec:	58e3c83a 	sub	r17,r11,r3
1001c4f0:	003c7006 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c4f4:	da012a15 	stw	r8,1192(sp)
1001c4f8:	000cc400 	call	1000cc40 <strlen>
1001c4fc:	1023883a 	mov	r17,r2
1001c500:	db011d83 	ldbu	r12,1142(sp)
1001c504:	dd812115 	stw	r22,1156(sp)
1001c508:	0013883a 	mov	r9,zero
1001c50c:	da012a17 	ldw	r8,1192(sp)
1001c510:	003c6806 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c514:	d9012017 	ldw	r4,1152(sp)
1001c518:	a00b883a 	mov	r5,r20
1001c51c:	d9811a04 	addi	r6,sp,1128
1001c520:	da412b15 	stw	r9,1196(sp)
1001c524:	001b1b00 	call	1001b1b0 <__sprint_r.part.0>
1001c528:	da412b17 	ldw	r9,1196(sp)
1001c52c:	103e9f1e 	bne	r2,zero,1001bfac <__alt_data_end+0xf001bfac>
1001c530:	d9411b17 	ldw	r5,1132(sp)
1001c534:	d8c11c17 	ldw	r3,1136(sp)
1001c538:	d811883a 	mov	r8,sp
1001c53c:	28800044 	addi	r2,r5,1
1001c540:	003ca906 	br	1001b7e8 <__alt_data_end+0xf001b7e8>
1001c544:	d9411b17 	ldw	r5,1132(sp)
1001c548:	010400b4 	movhi	r4,4098
1001c54c:	21156c04 	addi	r4,r4,21936
1001c550:	d9012315 	stw	r4,1164(sp)
1001c554:	29400044 	addi	r5,r5,1
1001c558:	003c8806 	br	1001b77c <__alt_data_end+0xf001b77c>
1001c55c:	00800184 	movi	r2,6
1001c560:	1240012e 	bgeu	r2,r9,1001c568 <___vfiprintf_internal_r+0x12a4>
1001c564:	1013883a 	mov	r9,r2
1001c568:	4823883a 	mov	r17,r9
1001c56c:	4825883a 	mov	r18,r9
1001c570:	48001516 	blt	r9,zero,1001c5c8 <___vfiprintf_internal_r+0x1304>
1001c574:	008400b4 	movhi	r2,4098
1001c578:	10944304 	addi	r2,r2,20748
1001c57c:	dd812115 	stw	r22,1156(sp)
1001c580:	d8812415 	stw	r2,1168(sp)
1001c584:	003d6f06 	br	1001bb44 <__alt_data_end+0xf001bb44>
1001c588:	d9411b17 	ldw	r5,1132(sp)
1001c58c:	02c400b4 	movhi	r11,4098
1001c590:	5ad56c04 	addi	r11,r11,21936
1001c594:	dac12315 	stw	r11,1164(sp)
1001c598:	29400044 	addi	r5,r5,1
1001c59c:	003ce106 	br	1001b924 <__alt_data_end+0xf001b924>
1001c5a0:	010400b4 	movhi	r4,4098
1001c5a4:	21156804 	addi	r4,r4,21920
1001c5a8:	d9012315 	stw	r4,1164(sp)
1001c5ac:	1009883a 	mov	r4,r2
1001c5b0:	003eca06 	br	1001c0dc <__alt_data_end+0xf001c0dc>
1001c5b4:	4823883a 	mov	r17,r9
1001c5b8:	db011d83 	ldbu	r12,1142(sp)
1001c5bc:	dd812115 	stw	r22,1156(sp)
1001c5c0:	0013883a 	mov	r9,zero
1001c5c4:	003c3b06 	br	1001b6b4 <__alt_data_end+0xf001b6b4>
1001c5c8:	0025883a 	mov	r18,zero
1001c5cc:	003fe906 	br	1001c574 <__alt_data_end+0xf001c574>
1001c5d0:	dac12117 	ldw	r11,1156(sp)
1001c5d4:	8005883a 	mov	r2,r16
1001c5d8:	5021883a 	mov	r16,r10
1001c5dc:	5a400017 	ldw	r9,0(r11)
1001c5e0:	58c00104 	addi	r3,r11,4
1001c5e4:	d8c12115 	stw	r3,1156(sp)
1001c5e8:	48000a16 	blt	r9,zero,1001c614 <___vfiprintf_internal_r+0x1350>
1001c5ec:	10c00047 	ldb	r3,1(r2)
1001c5f0:	003b9306 	br	1001b440 <__alt_data_end+0xf001b440>
1001c5f4:	043fffc4 	movi	r16,-1
1001c5f8:	003d0206 	br	1001ba04 <__alt_data_end+0xf001ba04>
1001c5fc:	94c0010e 	bge	r18,r19,1001c604 <___vfiprintf_internal_r+0x1340>
1001c600:	9825883a 	mov	r18,r19
1001c604:	da812217 	ldw	r10,1160(sp)
1001c608:	5495883a 	add	r10,r10,r18
1001c60c:	da812215 	stw	r10,1160(sp)
1001c610:	003cd106 	br	1001b958 <__alt_data_end+0xf001b958>
1001c614:	027fffc4 	movi	r9,-1
1001c618:	10c00047 	ldb	r3,1(r2)
1001c61c:	003b8806 	br	1001b440 <__alt_data_end+0xf001b440>

1001c620 <__vfiprintf_internal>:
1001c620:	2007883a 	mov	r3,r4
1001c624:	010400b4 	movhi	r4,4098
1001c628:	211d1004 	addi	r4,r4,29760
1001c62c:	21000017 	ldw	r4,0(r4)
1001c630:	2805883a 	mov	r2,r5
1001c634:	300f883a 	mov	r7,r6
1001c638:	180b883a 	mov	r5,r3
1001c63c:	100d883a 	mov	r6,r2
1001c640:	001b2c41 	jmpi	1001b2c4 <___vfiprintf_internal_r>

1001c644 <_write_r>:
1001c644:	defffd04 	addi	sp,sp,-12
1001c648:	dc000015 	stw	r16,0(sp)
1001c64c:	040400f4 	movhi	r16,4099
1001c650:	dc400115 	stw	r17,4(sp)
1001c654:	84248b04 	addi	r16,r16,-28116
1001c658:	2023883a 	mov	r17,r4
1001c65c:	2809883a 	mov	r4,r5
1001c660:	300b883a 	mov	r5,r6
1001c664:	380d883a 	mov	r6,r7
1001c668:	dfc00215 	stw	ra,8(sp)
1001c66c:	80000015 	stw	zero,0(r16)
1001c670:	0021dbc0 	call	10021dbc <write>
1001c674:	00ffffc4 	movi	r3,-1
1001c678:	10c00526 	beq	r2,r3,1001c690 <_write_r+0x4c>
1001c67c:	dfc00217 	ldw	ra,8(sp)
1001c680:	dc400117 	ldw	r17,4(sp)
1001c684:	dc000017 	ldw	r16,0(sp)
1001c688:	dec00304 	addi	sp,sp,12
1001c68c:	f800283a 	ret
1001c690:	80c00017 	ldw	r3,0(r16)
1001c694:	183ff926 	beq	r3,zero,1001c67c <__alt_data_end+0xf001c67c>
1001c698:	88c00015 	stw	r3,0(r17)
1001c69c:	003ff706 	br	1001c67c <__alt_data_end+0xf001c67c>

1001c6a0 <_close_r>:
1001c6a0:	defffd04 	addi	sp,sp,-12
1001c6a4:	dc000015 	stw	r16,0(sp)
1001c6a8:	040400f4 	movhi	r16,4099
1001c6ac:	dc400115 	stw	r17,4(sp)
1001c6b0:	84248b04 	addi	r16,r16,-28116
1001c6b4:	2023883a 	mov	r17,r4
1001c6b8:	2809883a 	mov	r4,r5
1001c6bc:	dfc00215 	stw	ra,8(sp)
1001c6c0:	80000015 	stw	zero,0(r16)
1001c6c4:	00212600 	call	10021260 <close>
1001c6c8:	00ffffc4 	movi	r3,-1
1001c6cc:	10c00526 	beq	r2,r3,1001c6e4 <_close_r+0x44>
1001c6d0:	dfc00217 	ldw	ra,8(sp)
1001c6d4:	dc400117 	ldw	r17,4(sp)
1001c6d8:	dc000017 	ldw	r16,0(sp)
1001c6dc:	dec00304 	addi	sp,sp,12
1001c6e0:	f800283a 	ret
1001c6e4:	80c00017 	ldw	r3,0(r16)
1001c6e8:	183ff926 	beq	r3,zero,1001c6d0 <__alt_data_end+0xf001c6d0>
1001c6ec:	88c00015 	stw	r3,0(r17)
1001c6f0:	003ff706 	br	1001c6d0 <__alt_data_end+0xf001c6d0>

1001c6f4 <_calloc_r>:
1001c6f4:	298b383a 	mul	r5,r5,r6
1001c6f8:	defffe04 	addi	sp,sp,-8
1001c6fc:	dc000015 	stw	r16,0(sp)
1001c700:	dfc00115 	stw	ra,4(sp)
1001c704:	001570c0 	call	1001570c <_malloc_r>
1001c708:	1021883a 	mov	r16,r2
1001c70c:	10002826 	beq	r2,zero,1001c7b0 <_calloc_r+0xbc>
1001c710:	11bfff17 	ldw	r6,-4(r2)
1001c714:	00bfff04 	movi	r2,-4
1001c718:	00c00904 	movi	r3,36
1001c71c:	308c703a 	and	r6,r6,r2
1001c720:	308d883a 	add	r6,r6,r2
1001c724:	19801436 	bltu	r3,r6,1001c778 <_calloc_r+0x84>
1001c728:	008004c4 	movi	r2,19
1001c72c:	11800936 	bltu	r2,r6,1001c754 <_calloc_r+0x60>
1001c730:	8005883a 	mov	r2,r16
1001c734:	10000015 	stw	zero,0(r2)
1001c738:	10000115 	stw	zero,4(r2)
1001c73c:	10000215 	stw	zero,8(r2)
1001c740:	8005883a 	mov	r2,r16
1001c744:	dfc00117 	ldw	ra,4(sp)
1001c748:	dc000017 	ldw	r16,0(sp)
1001c74c:	dec00204 	addi	sp,sp,8
1001c750:	f800283a 	ret
1001c754:	80000015 	stw	zero,0(r16)
1001c758:	80000115 	stw	zero,4(r16)
1001c75c:	008006c4 	movi	r2,27
1001c760:	11800d2e 	bgeu	r2,r6,1001c798 <_calloc_r+0xa4>
1001c764:	80000215 	stw	zero,8(r16)
1001c768:	80000315 	stw	zero,12(r16)
1001c76c:	30c00c26 	beq	r6,r3,1001c7a0 <_calloc_r+0xac>
1001c770:	80800404 	addi	r2,r16,16
1001c774:	003fef06 	br	1001c734 <__alt_data_end+0xf001c734>
1001c778:	8009883a 	mov	r4,r16
1001c77c:	000b883a 	mov	r5,zero
1001c780:	000c8bc0 	call	1000c8bc <memset>
1001c784:	8005883a 	mov	r2,r16
1001c788:	dfc00117 	ldw	ra,4(sp)
1001c78c:	dc000017 	ldw	r16,0(sp)
1001c790:	dec00204 	addi	sp,sp,8
1001c794:	f800283a 	ret
1001c798:	80800204 	addi	r2,r16,8
1001c79c:	003fe506 	br	1001c734 <__alt_data_end+0xf001c734>
1001c7a0:	80000415 	stw	zero,16(r16)
1001c7a4:	80800604 	addi	r2,r16,24
1001c7a8:	80000515 	stw	zero,20(r16)
1001c7ac:	003fe106 	br	1001c734 <__alt_data_end+0xf001c734>
1001c7b0:	0005883a 	mov	r2,zero
1001c7b4:	003fe306 	br	1001c744 <__alt_data_end+0xf001c744>

1001c7b8 <_fclose_r>:
1001c7b8:	28003226 	beq	r5,zero,1001c884 <_fclose_r+0xcc>
1001c7bc:	defffc04 	addi	sp,sp,-16
1001c7c0:	dc400115 	stw	r17,4(sp)
1001c7c4:	2023883a 	mov	r17,r4
1001c7c8:	dc000015 	stw	r16,0(sp)
1001c7cc:	dfc00315 	stw	ra,12(sp)
1001c7d0:	dc800215 	stw	r18,8(sp)
1001c7d4:	2821883a 	mov	r16,r5
1001c7d8:	001475c0 	call	1001475c <__sfp_lock_acquire>
1001c7dc:	88000226 	beq	r17,zero,1001c7e8 <_fclose_r+0x30>
1001c7e0:	88800e17 	ldw	r2,56(r17)
1001c7e4:	10002926 	beq	r2,zero,1001c88c <_fclose_r+0xd4>
1001c7e8:	8080030f 	ldh	r2,12(r16)
1001c7ec:	10002226 	beq	r2,zero,1001c878 <_fclose_r+0xc0>
1001c7f0:	8809883a 	mov	r4,r17
1001c7f4:	800b883a 	mov	r5,r16
1001c7f8:	00141a40 	call	100141a4 <_fflush_r>
1001c7fc:	1025883a 	mov	r18,r2
1001c800:	80800b17 	ldw	r2,44(r16)
1001c804:	10000426 	beq	r2,zero,1001c818 <_fclose_r+0x60>
1001c808:	81400717 	ldw	r5,28(r16)
1001c80c:	8809883a 	mov	r4,r17
1001c810:	103ee83a 	callr	r2
1001c814:	10002616 	blt	r2,zero,1001c8b0 <_fclose_r+0xf8>
1001c818:	8080030b 	ldhu	r2,12(r16)
1001c81c:	1080200c 	andi	r2,r2,128
1001c820:	10001f1e 	bne	r2,zero,1001c8a0 <_fclose_r+0xe8>
1001c824:	81400c17 	ldw	r5,48(r16)
1001c828:	28000526 	beq	r5,zero,1001c840 <_fclose_r+0x88>
1001c82c:	80801004 	addi	r2,r16,64
1001c830:	28800226 	beq	r5,r2,1001c83c <_fclose_r+0x84>
1001c834:	8809883a 	mov	r4,r17
1001c838:	0014b400 	call	10014b40 <_free_r>
1001c83c:	80000c15 	stw	zero,48(r16)
1001c840:	81401117 	ldw	r5,68(r16)
1001c844:	28000326 	beq	r5,zero,1001c854 <_fclose_r+0x9c>
1001c848:	8809883a 	mov	r4,r17
1001c84c:	0014b400 	call	10014b40 <_free_r>
1001c850:	80001115 	stw	zero,68(r16)
1001c854:	8000030d 	sth	zero,12(r16)
1001c858:	00147600 	call	10014760 <__sfp_lock_release>
1001c85c:	9005883a 	mov	r2,r18
1001c860:	dfc00317 	ldw	ra,12(sp)
1001c864:	dc800217 	ldw	r18,8(sp)
1001c868:	dc400117 	ldw	r17,4(sp)
1001c86c:	dc000017 	ldw	r16,0(sp)
1001c870:	dec00404 	addi	sp,sp,16
1001c874:	f800283a 	ret
1001c878:	00147600 	call	10014760 <__sfp_lock_release>
1001c87c:	0005883a 	mov	r2,zero
1001c880:	003ff706 	br	1001c860 <__alt_data_end+0xf001c860>
1001c884:	0005883a 	mov	r2,zero
1001c888:	f800283a 	ret
1001c88c:	8809883a 	mov	r4,r17
1001c890:	001474c0 	call	1001474c <__sinit>
1001c894:	8080030f 	ldh	r2,12(r16)
1001c898:	103fd51e 	bne	r2,zero,1001c7f0 <__alt_data_end+0xf001c7f0>
1001c89c:	003ff606 	br	1001c878 <__alt_data_end+0xf001c878>
1001c8a0:	81400417 	ldw	r5,16(r16)
1001c8a4:	8809883a 	mov	r4,r17
1001c8a8:	0014b400 	call	10014b40 <_free_r>
1001c8ac:	003fdd06 	br	1001c824 <__alt_data_end+0xf001c824>
1001c8b0:	04bfffc4 	movi	r18,-1
1001c8b4:	003fd806 	br	1001c818 <__alt_data_end+0xf001c818>

1001c8b8 <fclose>:
1001c8b8:	008400b4 	movhi	r2,4098
1001c8bc:	109d1004 	addi	r2,r2,29760
1001c8c0:	200b883a 	mov	r5,r4
1001c8c4:	11000017 	ldw	r4,0(r2)
1001c8c8:	001c7b81 	jmpi	1001c7b8 <_fclose_r>

1001c8cc <_fputwc_r>:
1001c8cc:	3080030b 	ldhu	r2,12(r6)
1001c8d0:	defff804 	addi	sp,sp,-32
1001c8d4:	dcc00415 	stw	r19,16(sp)
1001c8d8:	dc800315 	stw	r18,12(sp)
1001c8dc:	dc000115 	stw	r16,4(sp)
1001c8e0:	dfc00715 	stw	ra,28(sp)
1001c8e4:	dd400615 	stw	r21,24(sp)
1001c8e8:	dd000515 	stw	r20,20(sp)
1001c8ec:	dc400215 	stw	r17,8(sp)
1001c8f0:	10c8000c 	andi	r3,r2,8192
1001c8f4:	3021883a 	mov	r16,r6
1001c8f8:	2027883a 	mov	r19,r4
1001c8fc:	2825883a 	mov	r18,r5
1001c900:	1800051e 	bne	r3,zero,1001c918 <_fputwc_r+0x4c>
1001c904:	30c01917 	ldw	r3,100(r6)
1001c908:	10880014 	ori	r2,r2,8192
1001c90c:	3080030d 	sth	r2,12(r6)
1001c910:	18880014 	ori	r2,r3,8192
1001c914:	30801915 	stw	r2,100(r6)
1001c918:	00154fc0 	call	100154fc <__locale_mb_cur_max>
1001c91c:	00c00044 	movi	r3,1
1001c920:	10c03e26 	beq	r2,r3,1001ca1c <_fputwc_r+0x150>
1001c924:	9809883a 	mov	r4,r19
1001c928:	d80b883a 	mov	r5,sp
1001c92c:	900d883a 	mov	r6,r18
1001c930:	81c01704 	addi	r7,r16,92
1001c934:	001da700 	call	1001da70 <_wcrtomb_r>
1001c938:	1029883a 	mov	r20,r2
1001c93c:	00bfffc4 	movi	r2,-1
1001c940:	a0802026 	beq	r20,r2,1001c9c4 <_fputwc_r+0xf8>
1001c944:	d9400003 	ldbu	r5,0(sp)
1001c948:	a0001c26 	beq	r20,zero,1001c9bc <_fputwc_r+0xf0>
1001c94c:	0023883a 	mov	r17,zero
1001c950:	05400284 	movi	r21,10
1001c954:	00000906 	br	1001c97c <_fputwc_r+0xb0>
1001c958:	80800017 	ldw	r2,0(r16)
1001c95c:	11400005 	stb	r5,0(r2)
1001c960:	80c00017 	ldw	r3,0(r16)
1001c964:	18c00044 	addi	r3,r3,1
1001c968:	80c00015 	stw	r3,0(r16)
1001c96c:	8c400044 	addi	r17,r17,1
1001c970:	dc45883a 	add	r2,sp,r17
1001c974:	8d00112e 	bgeu	r17,r20,1001c9bc <_fputwc_r+0xf0>
1001c978:	11400003 	ldbu	r5,0(r2)
1001c97c:	80c00217 	ldw	r3,8(r16)
1001c980:	18ffffc4 	addi	r3,r3,-1
1001c984:	80c00215 	stw	r3,8(r16)
1001c988:	183ff30e 	bge	r3,zero,1001c958 <__alt_data_end+0xf001c958>
1001c98c:	80800617 	ldw	r2,24(r16)
1001c990:	18801916 	blt	r3,r2,1001c9f8 <_fputwc_r+0x12c>
1001c994:	80800017 	ldw	r2,0(r16)
1001c998:	11400005 	stb	r5,0(r2)
1001c99c:	80800017 	ldw	r2,0(r16)
1001c9a0:	10c00003 	ldbu	r3,0(r2)
1001c9a4:	10800044 	addi	r2,r2,1
1001c9a8:	1d402326 	beq	r3,r21,1001ca38 <_fputwc_r+0x16c>
1001c9ac:	80800015 	stw	r2,0(r16)
1001c9b0:	8c400044 	addi	r17,r17,1
1001c9b4:	dc45883a 	add	r2,sp,r17
1001c9b8:	8d3fef36 	bltu	r17,r20,1001c978 <__alt_data_end+0xf001c978>
1001c9bc:	9005883a 	mov	r2,r18
1001c9c0:	00000406 	br	1001c9d4 <_fputwc_r+0x108>
1001c9c4:	80c0030b 	ldhu	r3,12(r16)
1001c9c8:	a005883a 	mov	r2,r20
1001c9cc:	18c01014 	ori	r3,r3,64
1001c9d0:	80c0030d 	sth	r3,12(r16)
1001c9d4:	dfc00717 	ldw	ra,28(sp)
1001c9d8:	dd400617 	ldw	r21,24(sp)
1001c9dc:	dd000517 	ldw	r20,20(sp)
1001c9e0:	dcc00417 	ldw	r19,16(sp)
1001c9e4:	dc800317 	ldw	r18,12(sp)
1001c9e8:	dc400217 	ldw	r17,8(sp)
1001c9ec:	dc000117 	ldw	r16,4(sp)
1001c9f0:	dec00804 	addi	sp,sp,32
1001c9f4:	f800283a 	ret
1001c9f8:	9809883a 	mov	r4,r19
1001c9fc:	29403fcc 	andi	r5,r5,255
1001ca00:	800d883a 	mov	r6,r16
1001ca04:	001d9000 	call	1001d900 <__swbuf_r>
1001ca08:	10bfffe0 	cmpeqi	r2,r2,-1
1001ca0c:	10803fcc 	andi	r2,r2,255
1001ca10:	103fd626 	beq	r2,zero,1001c96c <__alt_data_end+0xf001c96c>
1001ca14:	00bfffc4 	movi	r2,-1
1001ca18:	003fee06 	br	1001c9d4 <__alt_data_end+0xf001c9d4>
1001ca1c:	90ffffc4 	addi	r3,r18,-1
1001ca20:	01003f84 	movi	r4,254
1001ca24:	20ffbf36 	bltu	r4,r3,1001c924 <__alt_data_end+0xf001c924>
1001ca28:	900b883a 	mov	r5,r18
1001ca2c:	dc800005 	stb	r18,0(sp)
1001ca30:	1029883a 	mov	r20,r2
1001ca34:	003fc506 	br	1001c94c <__alt_data_end+0xf001c94c>
1001ca38:	9809883a 	mov	r4,r19
1001ca3c:	a80b883a 	mov	r5,r21
1001ca40:	800d883a 	mov	r6,r16
1001ca44:	001d9000 	call	1001d900 <__swbuf_r>
1001ca48:	10bfffe0 	cmpeqi	r2,r2,-1
1001ca4c:	003fef06 	br	1001ca0c <__alt_data_end+0xf001ca0c>

1001ca50 <fputwc>:
1001ca50:	defffc04 	addi	sp,sp,-16
1001ca54:	dc000115 	stw	r16,4(sp)
1001ca58:	040400b4 	movhi	r16,4098
1001ca5c:	841d1004 	addi	r16,r16,29760
1001ca60:	dc400215 	stw	r17,8(sp)
1001ca64:	2023883a 	mov	r17,r4
1001ca68:	81000017 	ldw	r4,0(r16)
1001ca6c:	dfc00315 	stw	ra,12(sp)
1001ca70:	280d883a 	mov	r6,r5
1001ca74:	20000626 	beq	r4,zero,1001ca90 <fputwc+0x40>
1001ca78:	20800e17 	ldw	r2,56(r4)
1001ca7c:	1000041e 	bne	r2,zero,1001ca90 <fputwc+0x40>
1001ca80:	d9400015 	stw	r5,0(sp)
1001ca84:	001474c0 	call	1001474c <__sinit>
1001ca88:	81000017 	ldw	r4,0(r16)
1001ca8c:	d9800017 	ldw	r6,0(sp)
1001ca90:	880b883a 	mov	r5,r17
1001ca94:	dfc00317 	ldw	ra,12(sp)
1001ca98:	dc400217 	ldw	r17,8(sp)
1001ca9c:	dc000117 	ldw	r16,4(sp)
1001caa0:	dec00404 	addi	sp,sp,16
1001caa4:	001c8cc1 	jmpi	1001c8cc <_fputwc_r>

1001caa8 <_fstat_r>:
1001caa8:	defffd04 	addi	sp,sp,-12
1001caac:	dc000015 	stw	r16,0(sp)
1001cab0:	040400f4 	movhi	r16,4099
1001cab4:	dc400115 	stw	r17,4(sp)
1001cab8:	84248b04 	addi	r16,r16,-28116
1001cabc:	2023883a 	mov	r17,r4
1001cac0:	2809883a 	mov	r4,r5
1001cac4:	300b883a 	mov	r5,r6
1001cac8:	dfc00215 	stw	ra,8(sp)
1001cacc:	80000015 	stw	zero,0(r16)
1001cad0:	00213ac0 	call	100213ac <fstat>
1001cad4:	00ffffc4 	movi	r3,-1
1001cad8:	10c00526 	beq	r2,r3,1001caf0 <_fstat_r+0x48>
1001cadc:	dfc00217 	ldw	ra,8(sp)
1001cae0:	dc400117 	ldw	r17,4(sp)
1001cae4:	dc000017 	ldw	r16,0(sp)
1001cae8:	dec00304 	addi	sp,sp,12
1001caec:	f800283a 	ret
1001caf0:	80c00017 	ldw	r3,0(r16)
1001caf4:	183ff926 	beq	r3,zero,1001cadc <__alt_data_end+0xf001cadc>
1001caf8:	88c00015 	stw	r3,0(r17)
1001cafc:	003ff706 	br	1001cadc <__alt_data_end+0xf001cadc>

1001cb00 <rshift>:
1001cb00:	2807d17a 	srai	r3,r5,5
1001cb04:	20800417 	ldw	r2,16(r4)
1001cb08:	22400504 	addi	r9,r4,20
1001cb0c:	1880250e 	bge	r3,r2,1001cba4 <rshift+0xa4>
1001cb10:	1085883a 	add	r2,r2,r2
1001cb14:	18c7883a 	add	r3,r3,r3
1001cb18:	1085883a 	add	r2,r2,r2
1001cb1c:	18c7883a 	add	r3,r3,r3
1001cb20:	294007cc 	andi	r5,r5,31
1001cb24:	4885883a 	add	r2,r9,r2
1001cb28:	48c7883a 	add	r3,r9,r3
1001cb2c:	28002026 	beq	r5,zero,1001cbb0 <rshift+0xb0>
1001cb30:	19800017 	ldw	r6,0(r3)
1001cb34:	02c00804 	movi	r11,32
1001cb38:	19c00104 	addi	r7,r3,4
1001cb3c:	5957c83a 	sub	r11,r11,r5
1001cb40:	3150d83a 	srl	r8,r6,r5
1001cb44:	38802c2e 	bgeu	r7,r2,1001cbf8 <rshift+0xf8>
1001cb48:	4815883a 	mov	r10,r9
1001cb4c:	39800017 	ldw	r6,0(r7)
1001cb50:	52800104 	addi	r10,r10,4
1001cb54:	39c00104 	addi	r7,r7,4
1001cb58:	32cc983a 	sll	r6,r6,r11
1001cb5c:	418cb03a 	or	r6,r8,r6
1001cb60:	51bfff15 	stw	r6,-4(r10)
1001cb64:	39bfff17 	ldw	r6,-4(r7)
1001cb68:	3150d83a 	srl	r8,r6,r5
1001cb6c:	38bff736 	bltu	r7,r2,1001cb4c <__alt_data_end+0xf001cb4c>
1001cb70:	10c7c83a 	sub	r3,r2,r3
1001cb74:	18fffec4 	addi	r3,r3,-5
1001cb78:	1806d0ba 	srli	r3,r3,2
1001cb7c:	18c00044 	addi	r3,r3,1
1001cb80:	18c7883a 	add	r3,r3,r3
1001cb84:	18c7883a 	add	r3,r3,r3
1001cb88:	48c7883a 	add	r3,r9,r3
1001cb8c:	1a000015 	stw	r8,0(r3)
1001cb90:	40000126 	beq	r8,zero,1001cb98 <rshift+0x98>
1001cb94:	18c00104 	addi	r3,r3,4
1001cb98:	1a45c83a 	sub	r2,r3,r9
1001cb9c:	1005d0ba 	srai	r2,r2,2
1001cba0:	00001206 	br	1001cbec <rshift+0xec>
1001cba4:	20000415 	stw	zero,16(r4)
1001cba8:	20000515 	stw	zero,20(r4)
1001cbac:	f800283a 	ret
1001cbb0:	18bffc2e 	bgeu	r3,r2,1001cba4 <__alt_data_end+0xf001cba4>
1001cbb4:	180d883a 	mov	r6,r3
1001cbb8:	480b883a 	mov	r5,r9
1001cbbc:	31c00017 	ldw	r7,0(r6)
1001cbc0:	29400104 	addi	r5,r5,4
1001cbc4:	31800104 	addi	r6,r6,4
1001cbc8:	29ffff15 	stw	r7,-4(r5)
1001cbcc:	30bffb36 	bltu	r6,r2,1001cbbc <__alt_data_end+0xf001cbbc>
1001cbd0:	00c6303a 	nor	r3,zero,r3
1001cbd4:	1885883a 	add	r2,r3,r2
1001cbd8:	1004d0ba 	srli	r2,r2,2
1001cbdc:	10800044 	addi	r2,r2,1
1001cbe0:	1085883a 	add	r2,r2,r2
1001cbe4:	1085883a 	add	r2,r2,r2
1001cbe8:	1005d0ba 	srai	r2,r2,2
1001cbec:	20800415 	stw	r2,16(r4)
1001cbf0:	103fed26 	beq	r2,zero,1001cba8 <__alt_data_end+0xf001cba8>
1001cbf4:	f800283a 	ret
1001cbf8:	4807883a 	mov	r3,r9
1001cbfc:	003fe306 	br	1001cb8c <__alt_data_end+0xf001cb8c>

1001cc00 <__hexdig_init>:
1001cc00:	014400b4 	movhi	r5,4098
1001cc04:	00c400f4 	movhi	r3,4099
1001cc08:	29557444 	addi	r5,r5,21969
1001cc0c:	18e52404 	addi	r3,r3,-27504
1001cc10:	01000404 	movi	r4,16
1001cc14:	00800c04 	movi	r2,48
1001cc18:	10c5883a 	add	r2,r2,r3
1001cc1c:	11000005 	stb	r4,0(r2)
1001cc20:	28800003 	ldbu	r2,0(r5)
1001cc24:	21000044 	addi	r4,r4,1
1001cc28:	29400044 	addi	r5,r5,1
1001cc2c:	103ffa1e 	bne	r2,zero,1001cc18 <__alt_data_end+0xf001cc18>
1001cc30:	014400b4 	movhi	r5,4098
1001cc34:	29557244 	addi	r5,r5,21961
1001cc38:	01000684 	movi	r4,26
1001cc3c:	00801844 	movi	r2,97
1001cc40:	10c5883a 	add	r2,r2,r3
1001cc44:	11000005 	stb	r4,0(r2)
1001cc48:	28800003 	ldbu	r2,0(r5)
1001cc4c:	21000044 	addi	r4,r4,1
1001cc50:	29400044 	addi	r5,r5,1
1001cc54:	103ffa1e 	bne	r2,zero,1001cc40 <__alt_data_end+0xf001cc40>
1001cc58:	014400b4 	movhi	r5,4098
1001cc5c:	29557044 	addi	r5,r5,21953
1001cc60:	01000684 	movi	r4,26
1001cc64:	00801044 	movi	r2,65
1001cc68:	10c5883a 	add	r2,r2,r3
1001cc6c:	11000005 	stb	r4,0(r2)
1001cc70:	28800003 	ldbu	r2,0(r5)
1001cc74:	21000044 	addi	r4,r4,1
1001cc78:	29400044 	addi	r5,r5,1
1001cc7c:	103ffa1e 	bne	r2,zero,1001cc68 <__alt_data_end+0xf001cc68>
1001cc80:	f800283a 	ret

1001cc84 <__gethex>:
1001cc84:	deffeb04 	addi	sp,sp,-84
1001cc88:	dfc01415 	stw	ra,80(sp)
1001cc8c:	dd401015 	stw	r21,64(sp)
1001cc90:	dd000f15 	stw	r20,60(sp)
1001cc94:	dcc00e15 	stw	r19,56(sp)
1001cc98:	dc800d15 	stw	r18,52(sp)
1001cc9c:	d9000115 	stw	r4,4(sp)
1001cca0:	2829883a 	mov	r20,r5
1001cca4:	d9800015 	stw	r6,0(sp)
1001cca8:	d9c00315 	stw	r7,12(sp)
1001ccac:	df001315 	stw	fp,76(sp)
1001ccb0:	ddc01215 	stw	r23,72(sp)
1001ccb4:	dd801115 	stw	r22,68(sp)
1001ccb8:	dc400c15 	stw	r17,48(sp)
1001ccbc:	dc000b15 	stw	r16,44(sp)
1001ccc0:	00155200 	call	10015520 <_localeconv_r>
1001ccc4:	14800017 	ldw	r18,0(r2)
1001ccc8:	054400f4 	movhi	r21,4099
1001cccc:	ad652404 	addi	r21,r21,-27504
1001ccd0:	9009883a 	mov	r4,r18
1001ccd4:	000cc400 	call	1000cc40 <strlen>
1001ccd8:	1027883a 	mov	r19,r2
1001ccdc:	94c7883a 	add	r3,r18,r19
1001cce0:	18ffffc3 	ldbu	r3,-1(r3)
1001cce4:	a8800c03 	ldbu	r2,48(r21)
1001cce8:	d8c00205 	stb	r3,8(sp)
1001ccec:	1000d726 	beq	r2,zero,1001d04c <__gethex+0x3c8>
1001ccf0:	a2000017 	ldw	r8,0(r20)
1001ccf4:	00c00c04 	movi	r3,48
1001ccf8:	40800083 	ldbu	r2,2(r8)
1001ccfc:	10c14a1e 	bne	r2,r3,1001d228 <__gethex+0x5a4>
1001cd00:	013fff84 	movi	r4,-2
1001cd04:	40c000c4 	addi	r3,r8,3
1001cd08:	2209c83a 	sub	r4,r4,r8
1001cd0c:	100b883a 	mov	r5,r2
1001cd10:	20ef883a 	add	r23,r4,r3
1001cd14:	182d883a 	mov	r22,r3
1001cd18:	18c00044 	addi	r3,r3,1
1001cd1c:	18bfffc3 	ldbu	r2,-1(r3)
1001cd20:	117ffb26 	beq	r2,r5,1001cd10 <__alt_data_end+0xf001cd10>
1001cd24:	a885883a 	add	r2,r21,r2
1001cd28:	10800003 	ldbu	r2,0(r2)
1001cd2c:	01c400f4 	movhi	r7,4099
1001cd30:	39e52404 	addi	r7,r7,-27504
1001cd34:	1000c726 	beq	r2,zero,1001d054 <__gethex+0x3d0>
1001cd38:	b0800003 	ldbu	r2,0(r22)
1001cd3c:	0023883a 	mov	r17,zero
1001cd40:	0039883a 	mov	fp,zero
1001cd44:	3885883a 	add	r2,r7,r2
1001cd48:	10800003 	ldbu	r2,0(r2)
1001cd4c:	b021883a 	mov	r16,r22
1001cd50:	10000526 	beq	r2,zero,1001cd68 <__gethex+0xe4>
1001cd54:	84000044 	addi	r16,r16,1
1001cd58:	80800003 	ldbu	r2,0(r16)
1001cd5c:	a885883a 	add	r2,r21,r2
1001cd60:	10800003 	ldbu	r2,0(r2)
1001cd64:	103ffb1e 	bne	r2,zero,1001cd54 <__alt_data_end+0xf001cd54>
1001cd68:	8009883a 	mov	r4,r16
1001cd6c:	900b883a 	mov	r5,r18
1001cd70:	980d883a 	mov	r6,r19
1001cd74:	001d8400 	call	1001d840 <strncmp>
1001cd78:	10007c26 	beq	r2,zero,1001cf6c <__gethex+0x2e8>
1001cd7c:	80800003 	ldbu	r2,0(r16)
1001cd80:	e0000426 	beq	fp,zero,1001cd94 <__gethex+0x110>
1001cd84:	8739c83a 	sub	fp,r16,fp
1001cd88:	e739883a 	add	fp,fp,fp
1001cd8c:	e739883a 	add	fp,fp,fp
1001cd90:	0739c83a 	sub	fp,zero,fp
1001cd94:	10803fcc 	andi	r2,r2,255
1001cd98:	01001404 	movi	r4,80
1001cd9c:	11007e26 	beq	r2,r4,1001cf98 <__gethex+0x314>
1001cda0:	01001c04 	movi	r4,112
1001cda4:	11007c26 	beq	r2,r4,1001cf98 <__gethex+0x314>
1001cda8:	800f883a 	mov	r7,r16
1001cdac:	a4000015 	stw	r16,0(r20)
1001cdb0:	88000e26 	beq	r17,zero,1001cdec <__gethex+0x168>
1001cdb4:	b800b71e 	bne	r23,zero,1001d094 <__gethex+0x410>
1001cdb8:	00800184 	movi	r2,6
1001cdbc:	dfc01417 	ldw	ra,80(sp)
1001cdc0:	df001317 	ldw	fp,76(sp)
1001cdc4:	ddc01217 	ldw	r23,72(sp)
1001cdc8:	dd801117 	ldw	r22,68(sp)
1001cdcc:	dd401017 	ldw	r21,64(sp)
1001cdd0:	dd000f17 	ldw	r20,60(sp)
1001cdd4:	dcc00e17 	ldw	r19,56(sp)
1001cdd8:	dc800d17 	ldw	r18,52(sp)
1001cddc:	dc400c17 	ldw	r17,48(sp)
1001cde0:	dc000b17 	ldw	r16,44(sp)
1001cde4:	dec01504 	addi	sp,sp,84
1001cde8:	f800283a 	ret
1001cdec:	3d85c83a 	sub	r2,r7,r22
1001cdf0:	10bfffc4 	addi	r2,r2,-1
1001cdf4:	00c001c4 	movi	r3,7
1001cdf8:	000b883a 	mov	r5,zero
1001cdfc:	1880030e 	bge	r3,r2,1001ce0c <__gethex+0x188>
1001ce00:	1005d07a 	srai	r2,r2,1
1001ce04:	29400044 	addi	r5,r5,1
1001ce08:	18bffd16 	blt	r3,r2,1001ce00 <__alt_data_end+0xf001ce00>
1001ce0c:	d9000117 	ldw	r4,4(sp)
1001ce10:	d9c00a15 	stw	r7,40(sp)
1001ce14:	00163340 	call	10016334 <_Balloc>
1001ce18:	d9c00a17 	ldw	r7,40(sp)
1001ce1c:	14000504 	addi	r16,r2,20
1001ce20:	102f883a 	mov	r23,r2
1001ce24:	8017883a 	mov	r11,r16
1001ce28:	0015883a 	mov	r10,zero
1001ce2c:	b1c0132e 	bgeu	r22,r7,1001ce7c <__gethex+0x1f8>
1001ce30:	dc400203 	ldbu	r17,8(sp)
1001ce34:	03800044 	movi	r14,1
1001ce38:	0029883a 	mov	r20,zero
1001ce3c:	74ddc83a 	sub	r14,r14,r19
1001ce40:	03000804 	movi	r12,32
1001ce44:	38bfffc3 	ldbu	r2,-1(r7)
1001ce48:	3bffffc4 	addi	r15,r7,-1
1001ce4c:	14402f26 	beq	r2,r17,1001cf0c <__gethex+0x288>
1001ce50:	a3004926 	beq	r20,r12,1001cf78 <__gethex+0x2f4>
1001ce54:	a009883a 	mov	r4,r20
1001ce58:	a5000104 	addi	r20,r20,4
1001ce5c:	38bfffc3 	ldbu	r2,-1(r7)
1001ce60:	780f883a 	mov	r7,r15
1001ce64:	a885883a 	add	r2,r21,r2
1001ce68:	10c00003 	ldbu	r3,0(r2)
1001ce6c:	18c003cc 	andi	r3,r3,15
1001ce70:	1906983a 	sll	r3,r3,r4
1001ce74:	50d4b03a 	or	r10,r10,r3
1001ce78:	b1fff236 	bltu	r22,r7,1001ce44 <__alt_data_end+0xf001ce44>
1001ce7c:	58800104 	addi	r2,r11,4
1001ce80:	1405c83a 	sub	r2,r2,r16
1001ce84:	1005d0ba 	srai	r2,r2,2
1001ce88:	5a800015 	stw	r10,0(r11)
1001ce8c:	5009883a 	mov	r4,r10
1001ce90:	b8800415 	stw	r2,16(r23)
1001ce94:	1022917a 	slli	r17,r2,5
1001ce98:	001661c0 	call	1001661c <__hi0bits>
1001ce9c:	d8c00017 	ldw	r3,0(sp)
1001cea0:	8885c83a 	sub	r2,r17,r2
1001cea4:	1c800017 	ldw	r18,0(r3)
1001cea8:	9080ba16 	blt	r18,r2,1001d194 <__gethex+0x510>
1001ceac:	1480d416 	blt	r2,r18,1001d200 <__gethex+0x57c>
1001ceb0:	0027883a 	mov	r19,zero
1001ceb4:	d8c00017 	ldw	r3,0(sp)
1001ceb8:	18800217 	ldw	r2,8(r3)
1001cebc:	17008416 	blt	r2,fp,1001d0d0 <__gethex+0x44c>
1001cec0:	d8c00017 	ldw	r3,0(sp)
1001cec4:	18800117 	ldw	r2,4(r3)
1001cec8:	e0809f0e 	bge	fp,r2,1001d148 <__gethex+0x4c4>
1001cecc:	1739c83a 	sub	fp,r2,fp
1001ced0:	e480dc16 	blt	fp,r18,1001d244 <__gethex+0x5c0>
1001ced4:	18c00317 	ldw	r3,12(r3)
1001ced8:	01000084 	movi	r4,2
1001cedc:	19013c26 	beq	r3,r4,1001d3d0 <__gethex+0x74c>
1001cee0:	010000c4 	movi	r4,3
1001cee4:	19011d26 	beq	r3,r4,1001d35c <__gethex+0x6d8>
1001cee8:	01000044 	movi	r4,1
1001ceec:	19012f26 	beq	r3,r4,1001d3ac <__gethex+0x728>
1001cef0:	d9000117 	ldw	r4,4(sp)
1001cef4:	b80b883a 	mov	r5,r23
1001cef8:	00163dc0 	call	100163dc <_Bfree>
1001cefc:	d8801517 	ldw	r2,84(sp)
1001cf00:	10000015 	stw	zero,0(r2)
1001cf04:	00801404 	movi	r2,80
1001cf08:	003fac06 	br	1001cdbc <__alt_data_end+0xf001cdbc>
1001cf0c:	7b87883a 	add	r3,r15,r14
1001cf10:	1dbfcf36 	bltu	r3,r22,1001ce50 <__alt_data_end+0xf001ce50>
1001cf14:	1809883a 	mov	r4,r3
1001cf18:	900b883a 	mov	r5,r18
1001cf1c:	980d883a 	mov	r6,r19
1001cf20:	d8c00515 	stw	r3,20(sp)
1001cf24:	d9c00a15 	stw	r7,40(sp)
1001cf28:	da800615 	stw	r10,24(sp)
1001cf2c:	dac00715 	stw	r11,28(sp)
1001cf30:	db000915 	stw	r12,36(sp)
1001cf34:	db800815 	stw	r14,32(sp)
1001cf38:	dbc00415 	stw	r15,16(sp)
1001cf3c:	001d8400 	call	1001d840 <strncmp>
1001cf40:	d8c00517 	ldw	r3,20(sp)
1001cf44:	d9c00a17 	ldw	r7,40(sp)
1001cf48:	da800617 	ldw	r10,24(sp)
1001cf4c:	dac00717 	ldw	r11,28(sp)
1001cf50:	db000917 	ldw	r12,36(sp)
1001cf54:	db800817 	ldw	r14,32(sp)
1001cf58:	dbc00417 	ldw	r15,16(sp)
1001cf5c:	103fbc1e 	bne	r2,zero,1001ce50 <__alt_data_end+0xf001ce50>
1001cf60:	180f883a 	mov	r7,r3
1001cf64:	b1ffb736 	bltu	r22,r7,1001ce44 <__alt_data_end+0xf001ce44>
1001cf68:	003fc406 	br	1001ce7c <__alt_data_end+0xf001ce7c>
1001cf6c:	e000cf26 	beq	fp,zero,1001d2ac <__gethex+0x628>
1001cf70:	80800003 	ldbu	r2,0(r16)
1001cf74:	003f8306 	br	1001cd84 <__alt_data_end+0xf001cd84>
1001cf78:	05000104 	movi	r20,4
1001cf7c:	5a800015 	stw	r10,0(r11)
1001cf80:	0009883a 	mov	r4,zero
1001cf84:	5d17883a 	add	r11,r11,r20
1001cf88:	0015883a 	mov	r10,zero
1001cf8c:	003fb306 	br	1001ce5c <__alt_data_end+0xf001ce5c>
1001cf90:	0039883a 	mov	fp,zero
1001cf94:	04400044 	movi	r17,1
1001cf98:	80800043 	ldbu	r2,1(r16)
1001cf9c:	01400ac4 	movi	r5,43
1001cfa0:	11003fcc 	andi	r4,r2,255
1001cfa4:	21407926 	beq	r4,r5,1001d18c <__gethex+0x508>
1001cfa8:	01400b44 	movi	r5,45
1001cfac:	21404f26 	beq	r4,r5,1001d0ec <__gethex+0x468>
1001cfb0:	81400044 	addi	r5,r16,1
1001cfb4:	000d883a 	mov	r6,zero
1001cfb8:	10803fcc 	andi	r2,r2,255
1001cfbc:	a885883a 	add	r2,r21,r2
1001cfc0:	11000003 	ldbu	r4,0(r2)
1001cfc4:	02c00604 	movi	r11,24
1001cfc8:	20bfffc4 	addi	r2,r4,-1
1001cfcc:	10803fcc 	andi	r2,r2,255
1001cfd0:	58bf7536 	bltu	r11,r2,1001cda8 <__alt_data_end+0xf001cda8>
1001cfd4:	29c00043 	ldbu	r7,1(r5)
1001cfd8:	20803fcc 	andi	r2,r4,255
1001cfdc:	010400f4 	movhi	r4,4099
1001cfe0:	21252404 	addi	r4,r4,-27504
1001cfe4:	21c9883a 	add	r4,r4,r7
1001cfe8:	23000003 	ldbu	r12,0(r4)
1001cfec:	10bffc04 	addi	r2,r2,-16
1001cff0:	29400044 	addi	r5,r5,1
1001cff4:	613fffc4 	addi	r4,r12,-1
1001cff8:	21003fcc 	andi	r4,r4,255
1001cffc:	63003fcc 	andi	r12,r12,255
1001d000:	59000b36 	bltu	r11,r4,1001d030 <__gethex+0x3ac>
1001d004:	29400044 	addi	r5,r5,1
1001d008:	29000003 	ldbu	r4,0(r5)
1001d00c:	108002a4 	muli	r2,r2,10
1001d010:	a909883a 	add	r4,r21,r4
1001d014:	21c00003 	ldbu	r7,0(r4)
1001d018:	1305883a 	add	r2,r2,r12
1001d01c:	10bffc04 	addi	r2,r2,-16
1001d020:	393fffc4 	addi	r4,r7,-1
1001d024:	21003fcc 	andi	r4,r4,255
1001d028:	3b003fcc 	andi	r12,r7,255
1001d02c:	593ff52e 	bgeu	r11,r4,1001d004 <__alt_data_end+0xf001d004>
1001d030:	0189c83a 	sub	r4,zero,r6
1001d034:	1104f03a 	xor	r2,r2,r4
1001d038:	118d883a 	add	r6,r2,r6
1001d03c:	800f883a 	mov	r7,r16
1001d040:	e1b9883a 	add	fp,fp,r6
1001d044:	2821883a 	mov	r16,r5
1001d048:	003f5806 	br	1001cdac <__alt_data_end+0xf001cdac>
1001d04c:	001cc000 	call	1001cc00 <__hexdig_init>
1001d050:	003f2706 	br	1001ccf0 <__alt_data_end+0xf001ccf0>
1001d054:	b009883a 	mov	r4,r22
1001d058:	900b883a 	mov	r5,r18
1001d05c:	980d883a 	mov	r6,r19
1001d060:	d9c00a15 	stw	r7,40(sp)
1001d064:	001d8400 	call	1001d840 <strncmp>
1001d068:	d9c00a17 	ldw	r7,40(sp)
1001d06c:	10002326 	beq	r2,zero,1001d0fc <__gethex+0x478>
1001d070:	b0800003 	ldbu	r2,0(r22)
1001d074:	b021883a 	mov	r16,r22
1001d078:	10803fcc 	andi	r2,r2,255
1001d07c:	00c01404 	movi	r3,80
1001d080:	10ffc326 	beq	r2,r3,1001cf90 <__alt_data_end+0xf001cf90>
1001d084:	00c01c04 	movi	r3,112
1001d088:	10ffc126 	beq	r2,r3,1001cf90 <__alt_data_end+0xf001cf90>
1001d08c:	a4000015 	stw	r16,0(r20)
1001d090:	b83f4926 	beq	r23,zero,1001cdb8 <__alt_data_end+0xf001cdb8>
1001d094:	0005883a 	mov	r2,zero
1001d098:	003f4806 	br	1001cdbc <__alt_data_end+0xf001cdbc>
1001d09c:	84e7883a 	add	r19,r16,r19
1001d0a0:	993fff17 	ldw	r4,-4(r19)
1001d0a4:	001661c0 	call	1001661c <__hi0bits>
1001d0a8:	00c00804 	movi	r3,32
1001d0ac:	1c63c83a 	sub	r17,r3,r17
1001d0b0:	1440a60e 	bge	r2,r17,1001d34c <__gethex+0x6c8>
1001d0b4:	b809883a 	mov	r4,r23
1001d0b8:	01400044 	movi	r5,1
1001d0bc:	001cb000 	call	1001cb00 <rshift>
1001d0c0:	d8c00017 	ldw	r3,0(sp)
1001d0c4:	e7000044 	addi	fp,fp,1
1001d0c8:	18800217 	ldw	r2,8(r3)
1001d0cc:	17009f0e 	bge	r2,fp,1001d34c <__gethex+0x6c8>
1001d0d0:	d9000117 	ldw	r4,4(sp)
1001d0d4:	b80b883a 	mov	r5,r23
1001d0d8:	00163dc0 	call	100163dc <_Bfree>
1001d0dc:	d9001517 	ldw	r4,84(sp)
1001d0e0:	008028c4 	movi	r2,163
1001d0e4:	20000015 	stw	zero,0(r4)
1001d0e8:	003f3406 	br	1001cdbc <__alt_data_end+0xf001cdbc>
1001d0ec:	01800044 	movi	r6,1
1001d0f0:	80800083 	ldbu	r2,2(r16)
1001d0f4:	81400084 	addi	r5,r16,2
1001d0f8:	003faf06 	br	1001cfb8 <__alt_data_end+0xf001cfb8>
1001d0fc:	b4e1883a 	add	r16,r22,r19
1001d100:	80c00003 	ldbu	r3,0(r16)
1001d104:	19003fcc 	andi	r4,r3,255
1001d108:	3905883a 	add	r2,r7,r4
1001d10c:	10800003 	ldbu	r2,0(r2)
1001d110:	10004826 	beq	r2,zero,1001d234 <__gethex+0x5b0>
1001d114:	00c00c04 	movi	r3,48
1001d118:	802d883a 	mov	r22,r16
1001d11c:	20c0061e 	bne	r4,r3,1001d138 <__gethex+0x4b4>
1001d120:	2007883a 	mov	r3,r4
1001d124:	b5800044 	addi	r22,r22,1
1001d128:	b0800003 	ldbu	r2,0(r22)
1001d12c:	10fffd26 	beq	r2,r3,1001d124 <__alt_data_end+0xf001d124>
1001d130:	a885883a 	add	r2,r21,r2
1001d134:	10800003 	ldbu	r2,0(r2)
1001d138:	1023003a 	cmpeq	r17,r2,zero
1001d13c:	8039883a 	mov	fp,r16
1001d140:	05c00044 	movi	r23,1
1001d144:	003f0106 	br	1001cd4c <__alt_data_end+0xf001cd4c>
1001d148:	04400044 	movi	r17,1
1001d14c:	98000926 	beq	r19,zero,1001d174 <__gethex+0x4f0>
1001d150:	d8c00017 	ldw	r3,0(sp)
1001d154:	18800317 	ldw	r2,12(r3)
1001d158:	00c00084 	movi	r3,2
1001d15c:	10c06126 	beq	r2,r3,1001d2e4 <__gethex+0x660>
1001d160:	00c000c4 	movi	r3,3
1001d164:	10c06326 	beq	r2,r3,1001d2f4 <__gethex+0x670>
1001d168:	00c00044 	movi	r3,1
1001d16c:	10c08626 	beq	r2,r3,1001d388 <__gethex+0x704>
1001d170:	8c400414 	ori	r17,r17,16
1001d174:	d9001517 	ldw	r4,84(sp)
1001d178:	d8c00317 	ldw	r3,12(sp)
1001d17c:	8805883a 	mov	r2,r17
1001d180:	25c00015 	stw	r23,0(r4)
1001d184:	1f000015 	stw	fp,0(r3)
1001d188:	003f0c06 	br	1001cdbc <__alt_data_end+0xf001cdbc>
1001d18c:	000d883a 	mov	r6,zero
1001d190:	003fd706 	br	1001d0f0 <__alt_data_end+0xf001d0f0>
1001d194:	14a3c83a 	sub	r17,r2,r18
1001d198:	b809883a 	mov	r4,r23
1001d19c:	880b883a 	mov	r5,r17
1001d1a0:	00172340 	call	10017234 <__any_on>
1001d1a4:	10002526 	beq	r2,zero,1001d23c <__gethex+0x5b8>
1001d1a8:	897fffc4 	addi	r5,r17,-1
1001d1ac:	2807d17a 	srai	r3,r5,5
1001d1b0:	290007cc 	andi	r4,r5,31
1001d1b4:	04c00044 	movi	r19,1
1001d1b8:	18c7883a 	add	r3,r3,r3
1001d1bc:	18c7883a 	add	r3,r3,r3
1001d1c0:	80c7883a 	add	r3,r16,r3
1001d1c4:	9908983a 	sll	r4,r19,r4
1001d1c8:	18c00017 	ldw	r3,0(r3)
1001d1cc:	20c6703a 	and	r3,r4,r3
1001d1d0:	18000626 	beq	r3,zero,1001d1ec <__gethex+0x568>
1001d1d4:	9940730e 	bge	r19,r5,1001d3a4 <__gethex+0x720>
1001d1d8:	b809883a 	mov	r4,r23
1001d1dc:	897fff84 	addi	r5,r17,-2
1001d1e0:	00172340 	call	10017234 <__any_on>
1001d1e4:	10006f26 	beq	r2,zero,1001d3a4 <__gethex+0x720>
1001d1e8:	04c000c4 	movi	r19,3
1001d1ec:	b809883a 	mov	r4,r23
1001d1f0:	880b883a 	mov	r5,r17
1001d1f4:	001cb000 	call	1001cb00 <rshift>
1001d1f8:	e479883a 	add	fp,fp,r17
1001d1fc:	003f2d06 	br	1001ceb4 <__alt_data_end+0xf001ceb4>
1001d200:	d9000117 	ldw	r4,4(sp)
1001d204:	90a1c83a 	sub	r16,r18,r2
1001d208:	b80b883a 	mov	r5,r23
1001d20c:	800d883a 	mov	r6,r16
1001d210:	0016aac0 	call	10016aac <__lshift>
1001d214:	e439c83a 	sub	fp,fp,r16
1001d218:	102f883a 	mov	r23,r2
1001d21c:	14000504 	addi	r16,r2,20
1001d220:	0027883a 	mov	r19,zero
1001d224:	003f2306 	br	1001ceb4 <__alt_data_end+0xf001ceb4>
1001d228:	45800084 	addi	r22,r8,2
1001d22c:	002f883a 	mov	r23,zero
1001d230:	003ebc06 	br	1001cd24 <__alt_data_end+0xf001cd24>
1001d234:	1805883a 	mov	r2,r3
1001d238:	003f8f06 	br	1001d078 <__alt_data_end+0xf001d078>
1001d23c:	0027883a 	mov	r19,zero
1001d240:	003fea06 	br	1001d1ec <__alt_data_end+0xf001d1ec>
1001d244:	e47fffc4 	addi	r17,fp,-1
1001d248:	9800421e 	bne	r19,zero,1001d354 <__gethex+0x6d0>
1001d24c:	0440040e 	bge	zero,r17,1001d260 <__gethex+0x5dc>
1001d250:	b809883a 	mov	r4,r23
1001d254:	880b883a 	mov	r5,r17
1001d258:	00172340 	call	10017234 <__any_on>
1001d25c:	1027883a 	mov	r19,r2
1001d260:	8805d17a 	srai	r2,r17,5
1001d264:	00c00044 	movi	r3,1
1001d268:	8c4007cc 	andi	r17,r17,31
1001d26c:	1085883a 	add	r2,r2,r2
1001d270:	1085883a 	add	r2,r2,r2
1001d274:	8085883a 	add	r2,r16,r2
1001d278:	1c62983a 	sll	r17,r3,r17
1001d27c:	10800017 	ldw	r2,0(r2)
1001d280:	8884703a 	and	r2,r17,r2
1001d284:	10000126 	beq	r2,zero,1001d28c <__gethex+0x608>
1001d288:	9cc00094 	ori	r19,r19,2
1001d28c:	e00b883a 	mov	r5,fp
1001d290:	b809883a 	mov	r4,r23
1001d294:	001cb000 	call	1001cb00 <rshift>
1001d298:	d8c00017 	ldw	r3,0(sp)
1001d29c:	9725c83a 	sub	r18,r18,fp
1001d2a0:	04400084 	movi	r17,2
1001d2a4:	1f000117 	ldw	fp,4(r3)
1001d2a8:	003fa806 	br	1001d14c <__alt_data_end+0xf001d14c>
1001d2ac:	84f9883a 	add	fp,r16,r19
1001d2b0:	e0800003 	ldbu	r2,0(fp)
1001d2b4:	e021883a 	mov	r16,fp
1001d2b8:	11003fcc 	andi	r4,r2,255
1001d2bc:	a909883a 	add	r4,r21,r4
1001d2c0:	21000003 	ldbu	r4,0(r4)
1001d2c4:	203eaf26 	beq	r4,zero,1001cd84 <__alt_data_end+0xf001cd84>
1001d2c8:	84000044 	addi	r16,r16,1
1001d2cc:	80800003 	ldbu	r2,0(r16)
1001d2d0:	11003fcc 	andi	r4,r2,255
1001d2d4:	a909883a 	add	r4,r21,r4
1001d2d8:	21000003 	ldbu	r4,0(r4)
1001d2dc:	203ffa1e 	bne	r4,zero,1001d2c8 <__alt_data_end+0xf001d2c8>
1001d2e0:	003ea806 	br	1001cd84 <__alt_data_end+0xf001cd84>
1001d2e4:	d9001617 	ldw	r4,88(sp)
1001d2e8:	00800044 	movi	r2,1
1001d2ec:	1109c83a 	sub	r4,r2,r4
1001d2f0:	d9001615 	stw	r4,88(sp)
1001d2f4:	d8801617 	ldw	r2,88(sp)
1001d2f8:	103f9d26 	beq	r2,zero,1001d170 <__alt_data_end+0xf001d170>
1001d2fc:	bd000417 	ldw	r20,16(r23)
1001d300:	8005883a 	mov	r2,r16
1001d304:	013fffc4 	movi	r4,-1
1001d308:	a527883a 	add	r19,r20,r20
1001d30c:	9ce7883a 	add	r19,r19,r19
1001d310:	84cb883a 	add	r5,r16,r19
1001d314:	00000306 	br	1001d324 <__gethex+0x6a0>
1001d318:	10000015 	stw	zero,0(r2)
1001d31c:	10800104 	addi	r2,r2,4
1001d320:	11402e2e 	bgeu	r2,r5,1001d3dc <__gethex+0x758>
1001d324:	10c00017 	ldw	r3,0(r2)
1001d328:	193ffb26 	beq	r3,r4,1001d318 <__alt_data_end+0xf001d318>
1001d32c:	18c00044 	addi	r3,r3,1
1001d330:	10c00015 	stw	r3,0(r2)
1001d334:	00800084 	movi	r2,2
1001d338:	88803426 	beq	r17,r2,1001d40c <__gethex+0x788>
1001d33c:	b8800417 	ldw	r2,16(r23)
1001d340:	a0bf5c16 	blt	r20,r2,1001d0b4 <__alt_data_end+0xf001d0b4>
1001d344:	944007cc 	andi	r17,r18,31
1001d348:	883f541e 	bne	r17,zero,1001d09c <__alt_data_end+0xf001d09c>
1001d34c:	04400844 	movi	r17,33
1001d350:	003f8806 	br	1001d174 <__alt_data_end+0xf001d174>
1001d354:	04c00044 	movi	r19,1
1001d358:	003fc106 	br	1001d260 <__alt_data_end+0xf001d260>
1001d35c:	d8c01617 	ldw	r3,88(sp)
1001d360:	183ee326 	beq	r3,zero,1001cef0 <__alt_data_end+0xf001cef0>
1001d364:	d8c00317 	ldw	r3,12(sp)
1001d368:	d9001517 	ldw	r4,84(sp)
1001d36c:	18800015 	stw	r2,0(r3)
1001d370:	00800044 	movi	r2,1
1001d374:	b8800415 	stw	r2,16(r23)
1001d378:	80800015 	stw	r2,0(r16)
1001d37c:	25c00015 	stw	r23,0(r4)
1001d380:	00801884 	movi	r2,98
1001d384:	003e8d06 	br	1001cdbc <__alt_data_end+0xf001cdbc>
1001d388:	9880008c 	andi	r2,r19,2
1001d38c:	103f7826 	beq	r2,zero,1001d170 <__alt_data_end+0xf001d170>
1001d390:	80800017 	ldw	r2,0(r16)
1001d394:	9884b03a 	or	r2,r19,r2
1001d398:	10c4703a 	and	r2,r2,r3
1001d39c:	103fd71e 	bne	r2,zero,1001d2fc <__alt_data_end+0xf001d2fc>
1001d3a0:	003f7306 	br	1001d170 <__alt_data_end+0xf001d170>
1001d3a4:	04c00084 	movi	r19,2
1001d3a8:	003f9006 	br	1001d1ec <__alt_data_end+0xf001d1ec>
1001d3ac:	e4bed01e 	bne	fp,r18,1001cef0 <__alt_data_end+0xf001cef0>
1001d3b0:	1cbfec0e 	bge	r3,r18,1001d364 <__alt_data_end+0xf001d364>
1001d3b4:	b809883a 	mov	r4,r23
1001d3b8:	917fffc4 	addi	r5,r18,-1
1001d3bc:	00172340 	call	10017234 <__any_on>
1001d3c0:	103ecb26 	beq	r2,zero,1001cef0 <__alt_data_end+0xf001cef0>
1001d3c4:	d8c00017 	ldw	r3,0(sp)
1001d3c8:	18800117 	ldw	r2,4(r3)
1001d3cc:	003fe506 	br	1001d364 <__alt_data_end+0xf001d364>
1001d3d0:	d9001617 	ldw	r4,88(sp)
1001d3d4:	203fe326 	beq	r4,zero,1001d364 <__alt_data_end+0xf001d364>
1001d3d8:	003ec506 	br	1001cef0 <__alt_data_end+0xf001cef0>
1001d3dc:	b8800217 	ldw	r2,8(r23)
1001d3e0:	a080100e 	bge	r20,r2,1001d424 <__gethex+0x7a0>
1001d3e4:	a009883a 	mov	r4,r20
1001d3e8:	20c00144 	addi	r3,r4,5
1001d3ec:	18c7883a 	add	r3,r3,r3
1001d3f0:	21000044 	addi	r4,r4,1
1001d3f4:	18c7883a 	add	r3,r3,r3
1001d3f8:	b9000415 	stw	r4,16(r23)
1001d3fc:	b8c7883a 	add	r3,r23,r3
1001d400:	00800044 	movi	r2,1
1001d404:	18800015 	stw	r2,0(r3)
1001d408:	003fca06 	br	1001d334 <__alt_data_end+0xf001d334>
1001d40c:	d8c00017 	ldw	r3,0(sp)
1001d410:	18800017 	ldw	r2,0(r3)
1001d414:	10bfffc4 	addi	r2,r2,-1
1001d418:	14801526 	beq	r2,r18,1001d470 <__gethex+0x7ec>
1001d41c:	04400884 	movi	r17,34
1001d420:	003f5406 	br	1001d174 <__alt_data_end+0xf001d174>
1001d424:	b9400117 	ldw	r5,4(r23)
1001d428:	d9000117 	ldw	r4,4(sp)
1001d42c:	29400044 	addi	r5,r5,1
1001d430:	00163340 	call	10016334 <_Balloc>
1001d434:	b9800417 	ldw	r6,16(r23)
1001d438:	b9400304 	addi	r5,r23,12
1001d43c:	11000304 	addi	r4,r2,12
1001d440:	31800084 	addi	r6,r6,2
1001d444:	318d883a 	add	r6,r6,r6
1001d448:	318d883a 	add	r6,r6,r6
1001d44c:	1021883a 	mov	r16,r2
1001d450:	000c7840 	call	1000c784 <memcpy>
1001d454:	d9000117 	ldw	r4,4(sp)
1001d458:	b80b883a 	mov	r5,r23
1001d45c:	802f883a 	mov	r23,r16
1001d460:	00163dc0 	call	100163dc <_Bfree>
1001d464:	81000417 	ldw	r4,16(r16)
1001d468:	84000504 	addi	r16,r16,20
1001d46c:	003fde06 	br	1001d3e8 <__alt_data_end+0xf001d3e8>
1001d470:	9005d17a 	srai	r2,r18,5
1001d474:	944007cc 	andi	r17,r18,31
1001d478:	00c00044 	movi	r3,1
1001d47c:	1085883a 	add	r2,r2,r2
1001d480:	1085883a 	add	r2,r2,r2
1001d484:	8085883a 	add	r2,r16,r2
1001d488:	1c62983a 	sll	r17,r3,r17
1001d48c:	10800017 	ldw	r2,0(r2)
1001d490:	8884703a 	and	r2,r17,r2
1001d494:	1023003a 	cmpeq	r17,r2,zero
1001d498:	8c400844 	addi	r17,r17,33
1001d49c:	003f3506 	br	1001d174 <__alt_data_end+0xf001d174>

1001d4a0 <__hexnan>:
1001d4a0:	defff504 	addi	sp,sp,-44
1001d4a4:	dc000315 	stw	r16,12(sp)
1001d4a8:	040400f4 	movhi	r16,4099
1001d4ac:	84252404 	addi	r16,r16,-27504
1001d4b0:	80800c03 	ldbu	r2,48(r16)
1001d4b4:	dfc00a15 	stw	ra,40(sp)
1001d4b8:	dd800915 	stw	r22,36(sp)
1001d4bc:	dd400815 	stw	r21,32(sp)
1001d4c0:	dd000715 	stw	r20,28(sp)
1001d4c4:	dcc00615 	stw	r19,24(sp)
1001d4c8:	dc800515 	stw	r18,20(sp)
1001d4cc:	dc400415 	stw	r17,16(sp)
1001d4d0:	10006c26 	beq	r2,zero,1001d684 <__hexnan+0x1e4>
1001d4d4:	2cc00017 	ldw	r19,0(r5)
1001d4d8:	981dd17a 	srai	r14,r19,5
1001d4dc:	9cc007cc 	andi	r19,r19,31
1001d4e0:	739d883a 	add	r14,r14,r14
1001d4e4:	739d883a 	add	r14,r14,r14
1001d4e8:	339d883a 	add	r14,r6,r14
1001d4ec:	98000126 	beq	r19,zero,1001d4f4 <__hexnan+0x54>
1001d4f0:	73800104 	addi	r14,r14,4
1001d4f4:	22000017 	ldw	r8,0(r4)
1001d4f8:	72ffff04 	addi	r11,r14,-4
1001d4fc:	703fff15 	stw	zero,-4(r14)
1001d500:	581b883a 	mov	r13,r11
1001d504:	580f883a 	mov	r7,r11
1001d508:	000b883a 	mov	r5,zero
1001d50c:	001f883a 	mov	r15,zero
1001d510:	0019883a 	mov	r12,zero
1001d514:	04800204 	movi	r18,8
1001d518:	04400804 	movi	r17,32
1001d51c:	050001c4 	movi	r20,7
1001d520:	42000044 	addi	r8,r8,1
1001d524:	40c00003 	ldbu	r3,0(r8)
1001d528:	18001d26 	beq	r3,zero,1001d5a0 <__hexnan+0x100>
1001d52c:	80c5883a 	add	r2,r16,r3
1001d530:	10800003 	ldbu	r2,0(r2)
1001d534:	12403fcc 	andi	r9,r2,255
1001d538:	4800301e 	bne	r9,zero,1001d5fc <__hexnan+0x15c>
1001d53c:	88c04436 	bltu	r17,r3,1001d650 <__hexnan+0x1b0>
1001d540:	7b3ff70e 	bge	r15,r12,1001d520 <__alt_data_end+0xf001d520>
1001d544:	3b40112e 	bgeu	r7,r13,1001d58c <__hexnan+0xec>
1001d548:	a1401016 	blt	r20,r5,1001d58c <__hexnan+0xec>
1001d54c:	914bc83a 	sub	r5,r18,r5
1001d550:	294b883a 	add	r5,r5,r5
1001d554:	3a800017 	ldw	r10,0(r7)
1001d558:	294b883a 	add	r5,r5,r5
1001d55c:	896dc83a 	sub	r22,r17,r5
1001d560:	38c00104 	addi	r3,r7,4
1001d564:	3805883a 	mov	r2,r7
1001d568:	1d400017 	ldw	r21,0(r3)
1001d56c:	10800104 	addi	r2,r2,4
1001d570:	18c00104 	addi	r3,r3,4
1001d574:	ad92983a 	sll	r9,r21,r22
1001d578:	5252b03a 	or	r9,r10,r9
1001d57c:	a954d83a 	srl	r10,r21,r5
1001d580:	127fff15 	stw	r9,-4(r2)
1001d584:	1abfff15 	stw	r10,-4(r3)
1001d588:	137ff736 	bltu	r2,r13,1001d568 <__alt_data_end+0xf001d568>
1001d58c:	31c02a36 	bltu	r6,r7,1001d638 <__hexnan+0x198>
1001d590:	42000044 	addi	r8,r8,1
1001d594:	40c00003 	ldbu	r3,0(r8)
1001d598:	01400204 	movi	r5,8
1001d59c:	183fe31e 	bne	r3,zero,1001d52c <__alt_data_end+0xf001d52c>
1001d5a0:	3805883a 	mov	r2,r7
1001d5a4:	60002c26 	beq	r12,zero,1001d658 <__hexnan+0x1b8>
1001d5a8:	3b40022e 	bgeu	r7,r13,1001d5b4 <__hexnan+0x114>
1001d5ac:	00c001c4 	movi	r3,7
1001d5b0:	19404e0e 	bge	r3,r5,1001d6ec <__hexnan+0x24c>
1001d5b4:	31c03b2e 	bgeu	r6,r7,1001d6a4 <__hexnan+0x204>
1001d5b8:	3005883a 	mov	r2,r6
1001d5bc:	38c00017 	ldw	r3,0(r7)
1001d5c0:	10800104 	addi	r2,r2,4
1001d5c4:	39c00104 	addi	r7,r7,4
1001d5c8:	10ffff15 	stw	r3,-4(r2)
1001d5cc:	59fffb2e 	bgeu	r11,r7,1001d5bc <__alt_data_end+0xf001d5bc>
1001d5d0:	10000015 	stw	zero,0(r2)
1001d5d4:	10800104 	addi	r2,r2,4
1001d5d8:	58bffd2e 	bgeu	r11,r2,1001d5d0 <__alt_data_end+0xf001d5d0>
1001d5dc:	70bfff17 	ldw	r2,-4(r14)
1001d5e0:	1000041e 	bne	r2,zero,1001d5f4 <__hexnan+0x154>
1001d5e4:	32c03826 	beq	r6,r11,1001d6c8 <__hexnan+0x228>
1001d5e8:	5affff04 	addi	r11,r11,-4
1001d5ec:	58800017 	ldw	r2,0(r11)
1001d5f0:	103ffc26 	beq	r2,zero,1001d5e4 <__alt_data_end+0xf001d5e4>
1001d5f4:	00800144 	movi	r2,5
1001d5f8:	00001806 	br	1001d65c <__hexnan+0x1bc>
1001d5fc:	29400044 	addi	r5,r5,1
1001d600:	63000044 	addi	r12,r12,1
1001d604:	91400616 	blt	r18,r5,1001d620 <__hexnan+0x180>
1001d608:	38c00017 	ldw	r3,0(r7)
1001d60c:	1806913a 	slli	r3,r3,4
1001d610:	108003cc 	andi	r2,r2,15
1001d614:	1884b03a 	or	r2,r3,r2
1001d618:	38800015 	stw	r2,0(r7)
1001d61c:	003fc006 	br	1001d520 <__alt_data_end+0xf001d520>
1001d620:	31ffbf2e 	bgeu	r6,r7,1001d520 <__alt_data_end+0xf001d520>
1001d624:	383fff15 	stw	zero,-4(r7)
1001d628:	0007883a 	mov	r3,zero
1001d62c:	39ffff04 	addi	r7,r7,-4
1001d630:	01400044 	movi	r5,1
1001d634:	003ff606 	br	1001d610 <__alt_data_end+0xf001d610>
1001d638:	3b7fff04 	addi	r13,r7,-4
1001d63c:	383fff15 	stw	zero,-4(r7)
1001d640:	601f883a 	mov	r15,r12
1001d644:	680f883a 	mov	r7,r13
1001d648:	000b883a 	mov	r5,zero
1001d64c:	003fb406 	br	1001d520 <__alt_data_end+0xf001d520>
1001d650:	00800a44 	movi	r2,41
1001d654:	18802026 	beq	r3,r2,1001d6d8 <__hexnan+0x238>
1001d658:	00800104 	movi	r2,4
1001d65c:	dfc00a17 	ldw	ra,40(sp)
1001d660:	dd800917 	ldw	r22,36(sp)
1001d664:	dd400817 	ldw	r21,32(sp)
1001d668:	dd000717 	ldw	r20,28(sp)
1001d66c:	dcc00617 	ldw	r19,24(sp)
1001d670:	dc800517 	ldw	r18,20(sp)
1001d674:	dc400417 	ldw	r17,16(sp)
1001d678:	dc000317 	ldw	r16,12(sp)
1001d67c:	dec00b04 	addi	sp,sp,44
1001d680:	f800283a 	ret
1001d684:	d9000015 	stw	r4,0(sp)
1001d688:	d9400115 	stw	r5,4(sp)
1001d68c:	d9800215 	stw	r6,8(sp)
1001d690:	001cc000 	call	1001cc00 <__hexdig_init>
1001d694:	d9800217 	ldw	r6,8(sp)
1001d698:	d9400117 	ldw	r5,4(sp)
1001d69c:	d9000017 	ldw	r4,0(sp)
1001d6a0:	003f8c06 	br	1001d4d4 <__alt_data_end+0xf001d4d4>
1001d6a4:	983fcd26 	beq	r19,zero,1001d5dc <__alt_data_end+0xf001d5dc>
1001d6a8:	00c00804 	movi	r3,32
1001d6ac:	1ce7c83a 	sub	r19,r3,r19
1001d6b0:	00ffffc4 	movi	r3,-1
1001d6b4:	70bfff17 	ldw	r2,-4(r14)
1001d6b8:	1cc6d83a 	srl	r3,r3,r19
1001d6bc:	1884703a 	and	r2,r3,r2
1001d6c0:	70bfff15 	stw	r2,-4(r14)
1001d6c4:	003fc606 	br	1001d5e0 <__alt_data_end+0xf001d5e0>
1001d6c8:	00800044 	movi	r2,1
1001d6cc:	58800015 	stw	r2,0(r11)
1001d6d0:	00800144 	movi	r2,5
1001d6d4:	003fe106 	br	1001d65c <__alt_data_end+0xf001d65c>
1001d6d8:	42000044 	addi	r8,r8,1
1001d6dc:	22000015 	stw	r8,0(r4)
1001d6e0:	3805883a 	mov	r2,r7
1001d6e4:	603fb01e 	bne	r12,zero,1001d5a8 <__alt_data_end+0xf001d5a8>
1001d6e8:	003fdb06 	br	1001d658 <__alt_data_end+0xf001d658>
1001d6ec:	02400204 	movi	r9,8
1001d6f0:	4953c83a 	sub	r9,r9,r5
1001d6f4:	4a53883a 	add	r9,r9,r9
1001d6f8:	3a000017 	ldw	r8,0(r7)
1001d6fc:	4a53883a 	add	r9,r9,r9
1001d700:	02800804 	movi	r10,32
1001d704:	5255c83a 	sub	r10,r10,r9
1001d708:	38c00104 	addi	r3,r7,4
1001d70c:	19400017 	ldw	r5,0(r3)
1001d710:	10800104 	addi	r2,r2,4
1001d714:	18c00104 	addi	r3,r3,4
1001d718:	2a88983a 	sll	r4,r5,r10
1001d71c:	4108b03a 	or	r4,r8,r4
1001d720:	2a50d83a 	srl	r8,r5,r9
1001d724:	113fff15 	stw	r4,-4(r2)
1001d728:	1a3fff15 	stw	r8,-4(r3)
1001d72c:	137ff736 	bltu	r2,r13,1001d70c <__alt_data_end+0xf001d70c>
1001d730:	003fa006 	br	1001d5b4 <__alt_data_end+0xf001d5b4>

1001d734 <_isatty_r>:
1001d734:	defffd04 	addi	sp,sp,-12
1001d738:	dc000015 	stw	r16,0(sp)
1001d73c:	040400f4 	movhi	r16,4099
1001d740:	dc400115 	stw	r17,4(sp)
1001d744:	84248b04 	addi	r16,r16,-28116
1001d748:	2023883a 	mov	r17,r4
1001d74c:	2809883a 	mov	r4,r5
1001d750:	dfc00215 	stw	ra,8(sp)
1001d754:	80000015 	stw	zero,0(r16)
1001d758:	002177c0 	call	1002177c <isatty>
1001d75c:	00ffffc4 	movi	r3,-1
1001d760:	10c00526 	beq	r2,r3,1001d778 <_isatty_r+0x44>
1001d764:	dfc00217 	ldw	ra,8(sp)
1001d768:	dc400117 	ldw	r17,4(sp)
1001d76c:	dc000017 	ldw	r16,0(sp)
1001d770:	dec00304 	addi	sp,sp,12
1001d774:	f800283a 	ret
1001d778:	80c00017 	ldw	r3,0(r16)
1001d77c:	183ff926 	beq	r3,zero,1001d764 <__alt_data_end+0xf001d764>
1001d780:	88c00015 	stw	r3,0(r17)
1001d784:	003ff706 	br	1001d764 <__alt_data_end+0xf001d764>

1001d788 <_lseek_r>:
1001d788:	defffd04 	addi	sp,sp,-12
1001d78c:	dc000015 	stw	r16,0(sp)
1001d790:	040400f4 	movhi	r16,4099
1001d794:	dc400115 	stw	r17,4(sp)
1001d798:	84248b04 	addi	r16,r16,-28116
1001d79c:	2023883a 	mov	r17,r4
1001d7a0:	2809883a 	mov	r4,r5
1001d7a4:	300b883a 	mov	r5,r6
1001d7a8:	380d883a 	mov	r6,r7
1001d7ac:	dfc00215 	stw	ra,8(sp)
1001d7b0:	80000015 	stw	zero,0(r16)
1001d7b4:	00219540 	call	10021954 <lseek>
1001d7b8:	00ffffc4 	movi	r3,-1
1001d7bc:	10c00526 	beq	r2,r3,1001d7d4 <_lseek_r+0x4c>
1001d7c0:	dfc00217 	ldw	ra,8(sp)
1001d7c4:	dc400117 	ldw	r17,4(sp)
1001d7c8:	dc000017 	ldw	r16,0(sp)
1001d7cc:	dec00304 	addi	sp,sp,12
1001d7d0:	f800283a 	ret
1001d7d4:	80c00017 	ldw	r3,0(r16)
1001d7d8:	183ff926 	beq	r3,zero,1001d7c0 <__alt_data_end+0xf001d7c0>
1001d7dc:	88c00015 	stw	r3,0(r17)
1001d7e0:	003ff706 	br	1001d7c0 <__alt_data_end+0xf001d7c0>

1001d7e4 <_read_r>:
1001d7e4:	defffd04 	addi	sp,sp,-12
1001d7e8:	dc000015 	stw	r16,0(sp)
1001d7ec:	040400f4 	movhi	r16,4099
1001d7f0:	dc400115 	stw	r17,4(sp)
1001d7f4:	84248b04 	addi	r16,r16,-28116
1001d7f8:	2023883a 	mov	r17,r4
1001d7fc:	2809883a 	mov	r4,r5
1001d800:	300b883a 	mov	r5,r6
1001d804:	380d883a 	mov	r6,r7
1001d808:	dfc00215 	stw	ra,8(sp)
1001d80c:	80000015 	stw	zero,0(r16)
1001d810:	0021b300 	call	10021b30 <read>
1001d814:	00ffffc4 	movi	r3,-1
1001d818:	10c00526 	beq	r2,r3,1001d830 <_read_r+0x4c>
1001d81c:	dfc00217 	ldw	ra,8(sp)
1001d820:	dc400117 	ldw	r17,4(sp)
1001d824:	dc000017 	ldw	r16,0(sp)
1001d828:	dec00304 	addi	sp,sp,12
1001d82c:	f800283a 	ret
1001d830:	80c00017 	ldw	r3,0(r16)
1001d834:	183ff926 	beq	r3,zero,1001d81c <__alt_data_end+0xf001d81c>
1001d838:	88c00015 	stw	r3,0(r17)
1001d83c:	003ff706 	br	1001d81c <__alt_data_end+0xf001d81c>

1001d840 <strncmp>:
1001d840:	30002126 	beq	r6,zero,1001d8c8 <strncmp+0x88>
1001d844:	2144b03a 	or	r2,r4,r5
1001d848:	108000cc 	andi	r2,r2,3
1001d84c:	1000241e 	bne	r2,zero,1001d8e0 <strncmp+0xa0>
1001d850:	024000c4 	movi	r9,3
1001d854:	4980222e 	bgeu	r9,r6,1001d8e0 <strncmp+0xa0>
1001d858:	20800017 	ldw	r2,0(r4)
1001d85c:	28c00017 	ldw	r3,0(r5)
1001d860:	10c01f1e 	bne	r2,r3,1001d8e0 <strncmp+0xa0>
1001d864:	31bfff04 	addi	r6,r6,-4
1001d868:	30001726 	beq	r6,zero,1001d8c8 <strncmp+0x88>
1001d86c:	02ffbff4 	movhi	r11,65279
1001d870:	5affbfc4 	addi	r11,r11,-257
1001d874:	0086303a 	nor	r3,zero,r2
1001d878:	02a02074 	movhi	r10,32897
1001d87c:	12c5883a 	add	r2,r2,r11
1001d880:	52a02004 	addi	r10,r10,-32640
1001d884:	10c4703a 	and	r2,r2,r3
1001d888:	1284703a 	and	r2,r2,r10
1001d88c:	10000226 	beq	r2,zero,1001d898 <strncmp+0x58>
1001d890:	00000d06 	br	1001d8c8 <strncmp+0x88>
1001d894:	10000c1e 	bne	r2,zero,1001d8c8 <strncmp+0x88>
1001d898:	21000104 	addi	r4,r4,4
1001d89c:	29400104 	addi	r5,r5,4
1001d8a0:	49800f2e 	bgeu	r9,r6,1001d8e0 <strncmp+0xa0>
1001d8a4:	20c00017 	ldw	r3,0(r4)
1001d8a8:	29c00017 	ldw	r7,0(r5)
1001d8ac:	1ad1883a 	add	r8,r3,r11
1001d8b0:	00c4303a 	nor	r2,zero,r3
1001d8b4:	4084703a 	and	r2,r8,r2
1001d8b8:	1284703a 	and	r2,r2,r10
1001d8bc:	19c0081e 	bne	r3,r7,1001d8e0 <strncmp+0xa0>
1001d8c0:	31bfff04 	addi	r6,r6,-4
1001d8c4:	303ff31e 	bne	r6,zero,1001d894 <__alt_data_end+0xf001d894>
1001d8c8:	0005883a 	mov	r2,zero
1001d8cc:	f800283a 	ret
1001d8d0:	303ffd26 	beq	r6,zero,1001d8c8 <__alt_data_end+0xf001d8c8>
1001d8d4:	103ffc26 	beq	r2,zero,1001d8c8 <__alt_data_end+0xf001d8c8>
1001d8d8:	21000044 	addi	r4,r4,1
1001d8dc:	29400044 	addi	r5,r5,1
1001d8e0:	20800007 	ldb	r2,0(r4)
1001d8e4:	28c00007 	ldb	r3,0(r5)
1001d8e8:	31bfffc4 	addi	r6,r6,-1
1001d8ec:	10fff826 	beq	r2,r3,1001d8d0 <__alt_data_end+0xf001d8d0>
1001d8f0:	20800003 	ldbu	r2,0(r4)
1001d8f4:	28c00003 	ldbu	r3,0(r5)
1001d8f8:	10c5c83a 	sub	r2,r2,r3
1001d8fc:	f800283a 	ret

1001d900 <__swbuf_r>:
1001d900:	defffc04 	addi	sp,sp,-16
1001d904:	dc800215 	stw	r18,8(sp)
1001d908:	dc400115 	stw	r17,4(sp)
1001d90c:	dc000015 	stw	r16,0(sp)
1001d910:	dfc00315 	stw	ra,12(sp)
1001d914:	2025883a 	mov	r18,r4
1001d918:	2823883a 	mov	r17,r5
1001d91c:	3021883a 	mov	r16,r6
1001d920:	20000226 	beq	r4,zero,1001d92c <__swbuf_r+0x2c>
1001d924:	20800e17 	ldw	r2,56(r4)
1001d928:	10004126 	beq	r2,zero,1001da30 <__swbuf_r+0x130>
1001d92c:	80c00617 	ldw	r3,24(r16)
1001d930:	8180030b 	ldhu	r6,12(r16)
1001d934:	80c00215 	stw	r3,8(r16)
1001d938:	30c0020c 	andi	r3,r6,8
1001d93c:	18003526 	beq	r3,zero,1001da14 <__swbuf_r+0x114>
1001d940:	80c00417 	ldw	r3,16(r16)
1001d944:	18003326 	beq	r3,zero,1001da14 <__swbuf_r+0x114>
1001d948:	3088000c 	andi	r2,r6,8192
1001d94c:	8c403fcc 	andi	r17,r17,255
1001d950:	10001726 	beq	r2,zero,1001d9b0 <__swbuf_r+0xb0>
1001d954:	80800017 	ldw	r2,0(r16)
1001d958:	81000517 	ldw	r4,20(r16)
1001d95c:	10c7c83a 	sub	r3,r2,r3
1001d960:	19001d0e 	bge	r3,r4,1001d9d8 <__swbuf_r+0xd8>
1001d964:	18c00044 	addi	r3,r3,1
1001d968:	81400217 	ldw	r5,8(r16)
1001d96c:	11000044 	addi	r4,r2,1
1001d970:	81000015 	stw	r4,0(r16)
1001d974:	297fffc4 	addi	r5,r5,-1
1001d978:	81400215 	stw	r5,8(r16)
1001d97c:	14400005 	stb	r17,0(r2)
1001d980:	80800517 	ldw	r2,20(r16)
1001d984:	10c01d26 	beq	r2,r3,1001d9fc <__swbuf_r+0xfc>
1001d988:	8080030b 	ldhu	r2,12(r16)
1001d98c:	1080004c 	andi	r2,r2,1
1001d990:	1000181e 	bne	r2,zero,1001d9f4 <__swbuf_r+0xf4>
1001d994:	8805883a 	mov	r2,r17
1001d998:	dfc00317 	ldw	ra,12(sp)
1001d99c:	dc800217 	ldw	r18,8(sp)
1001d9a0:	dc400117 	ldw	r17,4(sp)
1001d9a4:	dc000017 	ldw	r16,0(sp)
1001d9a8:	dec00404 	addi	sp,sp,16
1001d9ac:	f800283a 	ret
1001d9b0:	81001917 	ldw	r4,100(r16)
1001d9b4:	00b7ffc4 	movi	r2,-8193
1001d9b8:	31880014 	ori	r6,r6,8192
1001d9bc:	2084703a 	and	r2,r4,r2
1001d9c0:	80801915 	stw	r2,100(r16)
1001d9c4:	80800017 	ldw	r2,0(r16)
1001d9c8:	81000517 	ldw	r4,20(r16)
1001d9cc:	8180030d 	sth	r6,12(r16)
1001d9d0:	10c7c83a 	sub	r3,r2,r3
1001d9d4:	193fe316 	blt	r3,r4,1001d964 <__alt_data_end+0xf001d964>
1001d9d8:	9009883a 	mov	r4,r18
1001d9dc:	800b883a 	mov	r5,r16
1001d9e0:	00141a40 	call	100141a4 <_fflush_r>
1001d9e4:	1000091e 	bne	r2,zero,1001da0c <__swbuf_r+0x10c>
1001d9e8:	80800017 	ldw	r2,0(r16)
1001d9ec:	00c00044 	movi	r3,1
1001d9f0:	003fdd06 	br	1001d968 <__alt_data_end+0xf001d968>
1001d9f4:	00800284 	movi	r2,10
1001d9f8:	88bfe61e 	bne	r17,r2,1001d994 <__alt_data_end+0xf001d994>
1001d9fc:	9009883a 	mov	r4,r18
1001da00:	800b883a 	mov	r5,r16
1001da04:	00141a40 	call	100141a4 <_fflush_r>
1001da08:	103fe226 	beq	r2,zero,1001d994 <__alt_data_end+0xf001d994>
1001da0c:	00bfffc4 	movi	r2,-1
1001da10:	003fe106 	br	1001d998 <__alt_data_end+0xf001d998>
1001da14:	9009883a 	mov	r4,r18
1001da18:	800b883a 	mov	r5,r16
1001da1c:	001274c0 	call	1001274c <__swsetup_r>
1001da20:	1000051e 	bne	r2,zero,1001da38 <__swbuf_r+0x138>
1001da24:	8180030b 	ldhu	r6,12(r16)
1001da28:	80c00417 	ldw	r3,16(r16)
1001da2c:	003fc606 	br	1001d948 <__alt_data_end+0xf001d948>
1001da30:	001474c0 	call	1001474c <__sinit>
1001da34:	003fbd06 	br	1001d92c <__alt_data_end+0xf001d92c>
1001da38:	80c0030b 	ldhu	r3,12(r16)
1001da3c:	00bfffc4 	movi	r2,-1
1001da40:	18c01014 	ori	r3,r3,64
1001da44:	80c0030d 	sth	r3,12(r16)
1001da48:	00c00244 	movi	r3,9
1001da4c:	90c00015 	stw	r3,0(r18)
1001da50:	003fd106 	br	1001d998 <__alt_data_end+0xf001d998>

1001da54 <__swbuf>:
1001da54:	00c400b4 	movhi	r3,4098
1001da58:	18dd1004 	addi	r3,r3,29760
1001da5c:	2005883a 	mov	r2,r4
1001da60:	19000017 	ldw	r4,0(r3)
1001da64:	280d883a 	mov	r6,r5
1001da68:	100b883a 	mov	r5,r2
1001da6c:	001d9001 	jmpi	1001d900 <__swbuf_r>

1001da70 <_wcrtomb_r>:
1001da70:	defff604 	addi	sp,sp,-40
1001da74:	008400b4 	movhi	r2,4098
1001da78:	dc800815 	stw	r18,32(sp)
1001da7c:	dc400715 	stw	r17,28(sp)
1001da80:	dc000615 	stw	r16,24(sp)
1001da84:	109d1504 	addi	r2,r2,29780
1001da88:	dfc00915 	stw	ra,36(sp)
1001da8c:	2021883a 	mov	r16,r4
1001da90:	3823883a 	mov	r17,r7
1001da94:	14800017 	ldw	r18,0(r2)
1001da98:	28001426 	beq	r5,zero,1001daec <_wcrtomb_r+0x7c>
1001da9c:	d9400415 	stw	r5,16(sp)
1001daa0:	d9800515 	stw	r6,20(sp)
1001daa4:	00154f00 	call	100154f0 <__locale_charset>
1001daa8:	d9400417 	ldw	r5,16(sp)
1001daac:	d9800517 	ldw	r6,20(sp)
1001dab0:	8009883a 	mov	r4,r16
1001dab4:	dc400015 	stw	r17,0(sp)
1001dab8:	100f883a 	mov	r7,r2
1001dabc:	903ee83a 	callr	r18
1001dac0:	00ffffc4 	movi	r3,-1
1001dac4:	10c0031e 	bne	r2,r3,1001dad4 <_wcrtomb_r+0x64>
1001dac8:	88000015 	stw	zero,0(r17)
1001dacc:	00c02284 	movi	r3,138
1001dad0:	80c00015 	stw	r3,0(r16)
1001dad4:	dfc00917 	ldw	ra,36(sp)
1001dad8:	dc800817 	ldw	r18,32(sp)
1001dadc:	dc400717 	ldw	r17,28(sp)
1001dae0:	dc000617 	ldw	r16,24(sp)
1001dae4:	dec00a04 	addi	sp,sp,40
1001dae8:	f800283a 	ret
1001daec:	00154f00 	call	100154f0 <__locale_charset>
1001daf0:	8009883a 	mov	r4,r16
1001daf4:	dc400015 	stw	r17,0(sp)
1001daf8:	d9400104 	addi	r5,sp,4
1001dafc:	000d883a 	mov	r6,zero
1001db00:	100f883a 	mov	r7,r2
1001db04:	903ee83a 	callr	r18
1001db08:	003fed06 	br	1001dac0 <__alt_data_end+0xf001dac0>

1001db0c <wcrtomb>:
1001db0c:	defff504 	addi	sp,sp,-44
1001db10:	dc400515 	stw	r17,20(sp)
1001db14:	dc000415 	stw	r16,16(sp)
1001db18:	dfc00a15 	stw	ra,40(sp)
1001db1c:	dd400915 	stw	r21,36(sp)
1001db20:	dd000815 	stw	r20,32(sp)
1001db24:	dcc00715 	stw	r19,28(sp)
1001db28:	dc800615 	stw	r18,24(sp)
1001db2c:	2021883a 	mov	r16,r4
1001db30:	3023883a 	mov	r17,r6
1001db34:	20001d26 	beq	r4,zero,1001dbac <wcrtomb+0xa0>
1001db38:	048400b4 	movhi	r18,4098
1001db3c:	949d1004 	addi	r18,r18,29760
1001db40:	008400b4 	movhi	r2,4098
1001db44:	95400017 	ldw	r21,0(r18)
1001db48:	109d1504 	addi	r2,r2,29780
1001db4c:	15000017 	ldw	r20,0(r2)
1001db50:	2827883a 	mov	r19,r5
1001db54:	00154f00 	call	100154f0 <__locale_charset>
1001db58:	a809883a 	mov	r4,r21
1001db5c:	dc400015 	stw	r17,0(sp)
1001db60:	800b883a 	mov	r5,r16
1001db64:	980d883a 	mov	r6,r19
1001db68:	100f883a 	mov	r7,r2
1001db6c:	a03ee83a 	callr	r20
1001db70:	00ffffc4 	movi	r3,-1
1001db74:	10c0041e 	bne	r2,r3,1001db88 <wcrtomb+0x7c>
1001db78:	90c00017 	ldw	r3,0(r18)
1001db7c:	01002284 	movi	r4,138
1001db80:	88000015 	stw	zero,0(r17)
1001db84:	19000015 	stw	r4,0(r3)
1001db88:	dfc00a17 	ldw	ra,40(sp)
1001db8c:	dd400917 	ldw	r21,36(sp)
1001db90:	dd000817 	ldw	r20,32(sp)
1001db94:	dcc00717 	ldw	r19,28(sp)
1001db98:	dc800617 	ldw	r18,24(sp)
1001db9c:	dc400517 	ldw	r17,20(sp)
1001dba0:	dc000417 	ldw	r16,16(sp)
1001dba4:	dec00b04 	addi	sp,sp,44
1001dba8:	f800283a 	ret
1001dbac:	048400b4 	movhi	r18,4098
1001dbb0:	949d1004 	addi	r18,r18,29760
1001dbb4:	008400b4 	movhi	r2,4098
1001dbb8:	94c00017 	ldw	r19,0(r18)
1001dbbc:	109d1504 	addi	r2,r2,29780
1001dbc0:	14000017 	ldw	r16,0(r2)
1001dbc4:	00154f00 	call	100154f0 <__locale_charset>
1001dbc8:	9809883a 	mov	r4,r19
1001dbcc:	dc400015 	stw	r17,0(sp)
1001dbd0:	d9400104 	addi	r5,sp,4
1001dbd4:	000d883a 	mov	r6,zero
1001dbd8:	100f883a 	mov	r7,r2
1001dbdc:	803ee83a 	callr	r16
1001dbe0:	003fe306 	br	1001db70 <__alt_data_end+0xf001db70>

1001dbe4 <__ascii_wctomb>:
1001dbe4:	28000526 	beq	r5,zero,1001dbfc <__ascii_wctomb+0x18>
1001dbe8:	00803fc4 	movi	r2,255
1001dbec:	11800536 	bltu	r2,r6,1001dc04 <__ascii_wctomb+0x20>
1001dbf0:	29800005 	stb	r6,0(r5)
1001dbf4:	00800044 	movi	r2,1
1001dbf8:	f800283a 	ret
1001dbfc:	0005883a 	mov	r2,zero
1001dc00:	f800283a 	ret
1001dc04:	00802284 	movi	r2,138
1001dc08:	20800015 	stw	r2,0(r4)
1001dc0c:	00bfffc4 	movi	r2,-1
1001dc10:	f800283a 	ret

1001dc14 <_wctomb_r>:
1001dc14:	008400b4 	movhi	r2,4098
1001dc18:	defff904 	addi	sp,sp,-28
1001dc1c:	109d1504 	addi	r2,r2,29780
1001dc20:	dfc00615 	stw	ra,24(sp)
1001dc24:	dc400515 	stw	r17,20(sp)
1001dc28:	dc000415 	stw	r16,16(sp)
1001dc2c:	3823883a 	mov	r17,r7
1001dc30:	14000017 	ldw	r16,0(r2)
1001dc34:	d9000115 	stw	r4,4(sp)
1001dc38:	d9400215 	stw	r5,8(sp)
1001dc3c:	d9800315 	stw	r6,12(sp)
1001dc40:	00154f00 	call	100154f0 <__locale_charset>
1001dc44:	d9000117 	ldw	r4,4(sp)
1001dc48:	d9400217 	ldw	r5,8(sp)
1001dc4c:	d9800317 	ldw	r6,12(sp)
1001dc50:	dc400015 	stw	r17,0(sp)
1001dc54:	100f883a 	mov	r7,r2
1001dc58:	803ee83a 	callr	r16
1001dc5c:	dfc00617 	ldw	ra,24(sp)
1001dc60:	dc400517 	ldw	r17,20(sp)
1001dc64:	dc000417 	ldw	r16,16(sp)
1001dc68:	dec00704 	addi	sp,sp,28
1001dc6c:	f800283a 	ret

1001dc70 <__muldi3>:
1001dc70:	223fffcc 	andi	r8,r4,65535
1001dc74:	2012d43a 	srli	r9,r4,16
1001dc78:	32bfffcc 	andi	r10,r6,65535
1001dc7c:	3006d43a 	srli	r3,r6,16
1001dc80:	5217383a 	mul	r11,r10,r8
1001dc84:	5255383a 	mul	r10,r10,r9
1001dc88:	1a05383a 	mul	r2,r3,r8
1001dc8c:	5810d43a 	srli	r8,r11,16
1001dc90:	5085883a 	add	r2,r10,r2
1001dc94:	1205883a 	add	r2,r2,r8
1001dc98:	1a51383a 	mul	r8,r3,r9
1001dc9c:	1280022e 	bgeu	r2,r10,1001dca8 <__muldi3+0x38>
1001dca0:	00c00074 	movhi	r3,1
1001dca4:	40d1883a 	add	r8,r8,r3
1001dca8:	1006d43a 	srli	r3,r2,16
1001dcac:	21cf383a 	mul	r7,r4,r7
1001dcb0:	314b383a 	mul	r5,r6,r5
1001dcb4:	1004943a 	slli	r2,r2,16
1001dcb8:	40c7883a 	add	r3,r8,r3
1001dcbc:	5affffcc 	andi	r11,r11,65535
1001dcc0:	3949883a 	add	r4,r7,r5
1001dcc4:	12c5883a 	add	r2,r2,r11
1001dcc8:	20c7883a 	add	r3,r4,r3
1001dccc:	f800283a 	ret

1001dcd0 <__fixunsdfsi>:
1001dcd0:	defffd04 	addi	sp,sp,-12
1001dcd4:	000d883a 	mov	r6,zero
1001dcd8:	01d07834 	movhi	r7,16864
1001dcdc:	dc400115 	stw	r17,4(sp)
1001dce0:	dc000015 	stw	r16,0(sp)
1001dce4:	dfc00215 	stw	ra,8(sp)
1001dce8:	2023883a 	mov	r17,r4
1001dcec:	2821883a 	mov	r16,r5
1001dcf0:	001fc640 	call	1001fc64 <__gedf2>
1001dcf4:	1000080e 	bge	r2,zero,1001dd18 <__fixunsdfsi+0x48>
1001dcf8:	8809883a 	mov	r4,r17
1001dcfc:	800b883a 	mov	r5,r16
1001dd00:	0020e180 	call	10020e18 <__fixdfsi>
1001dd04:	dfc00217 	ldw	ra,8(sp)
1001dd08:	dc400117 	ldw	r17,4(sp)
1001dd0c:	dc000017 	ldw	r16,0(sp)
1001dd10:	dec00304 	addi	sp,sp,12
1001dd14:	f800283a 	ret
1001dd18:	000d883a 	mov	r6,zero
1001dd1c:	01d07834 	movhi	r7,16864
1001dd20:	8809883a 	mov	r4,r17
1001dd24:	800b883a 	mov	r5,r16
1001dd28:	00205480 	call	10020548 <__subdf3>
1001dd2c:	180b883a 	mov	r5,r3
1001dd30:	1009883a 	mov	r4,r2
1001dd34:	0020e180 	call	10020e18 <__fixdfsi>
1001dd38:	00e00034 	movhi	r3,32768
1001dd3c:	10c5883a 	add	r2,r2,r3
1001dd40:	003ff006 	br	1001dd04 <__alt_data_end+0xf001dd04>

1001dd44 <__udivdi3>:
1001dd44:	defff504 	addi	sp,sp,-44
1001dd48:	dcc00415 	stw	r19,16(sp)
1001dd4c:	dc000115 	stw	r16,4(sp)
1001dd50:	dfc00a15 	stw	ra,40(sp)
1001dd54:	df000915 	stw	fp,36(sp)
1001dd58:	ddc00815 	stw	r23,32(sp)
1001dd5c:	dd800715 	stw	r22,28(sp)
1001dd60:	dd400615 	stw	r21,24(sp)
1001dd64:	dd000515 	stw	r20,20(sp)
1001dd68:	dc800315 	stw	r18,12(sp)
1001dd6c:	dc400215 	stw	r17,8(sp)
1001dd70:	2027883a 	mov	r19,r4
1001dd74:	2821883a 	mov	r16,r5
1001dd78:	3800421e 	bne	r7,zero,1001de84 <__udivdi3+0x140>
1001dd7c:	3025883a 	mov	r18,r6
1001dd80:	2023883a 	mov	r17,r4
1001dd84:	2980542e 	bgeu	r5,r6,1001ded8 <__udivdi3+0x194>
1001dd88:	00bfffd4 	movui	r2,65535
1001dd8c:	282d883a 	mov	r22,r5
1001dd90:	1180a836 	bltu	r2,r6,1001e034 <__udivdi3+0x2f0>
1001dd94:	00803fc4 	movi	r2,255
1001dd98:	1181422e 	bgeu	r2,r6,1001e2a4 <__udivdi3+0x560>
1001dd9c:	00800204 	movi	r2,8
1001dda0:	1007883a 	mov	r3,r2
1001dda4:	3084d83a 	srl	r2,r6,r2
1001dda8:	010400b4 	movhi	r4,4098
1001ddac:	21157704 	addi	r4,r4,21980
1001ddb0:	2085883a 	add	r2,r4,r2
1001ddb4:	10800003 	ldbu	r2,0(r2)
1001ddb8:	10c7883a 	add	r3,r2,r3
1001ddbc:	00800804 	movi	r2,32
1001ddc0:	10c5c83a 	sub	r2,r2,r3
1001ddc4:	10000526 	beq	r2,zero,1001dddc <__udivdi3+0x98>
1001ddc8:	80a0983a 	sll	r16,r16,r2
1001ddcc:	98c6d83a 	srl	r3,r19,r3
1001ddd0:	30a4983a 	sll	r18,r6,r2
1001ddd4:	98a2983a 	sll	r17,r19,r2
1001ddd8:	80ecb03a 	or	r22,r16,r3
1001dddc:	902ad43a 	srli	r21,r18,16
1001dde0:	b009883a 	mov	r4,r22
1001dde4:	953fffcc 	andi	r20,r18,65535
1001dde8:	a80b883a 	mov	r5,r21
1001ddec:	000c6e80 	call	1000c6e8 <__umodsi3>
1001ddf0:	b009883a 	mov	r4,r22
1001ddf4:	a80b883a 	mov	r5,r21
1001ddf8:	1027883a 	mov	r19,r2
1001ddfc:	000c6e00 	call	1000c6e0 <__udivsi3>
1001de00:	1021883a 	mov	r16,r2
1001de04:	8806d43a 	srli	r3,r17,16
1001de08:	9804943a 	slli	r2,r19,16
1001de0c:	8527383a 	mul	r19,r16,r20
1001de10:	10c4b03a 	or	r2,r2,r3
1001de14:	14c0052e 	bgeu	r2,r19,1001de2c <__udivdi3+0xe8>
1001de18:	1485883a 	add	r2,r2,r18
1001de1c:	80ffffc4 	addi	r3,r16,-1
1001de20:	14800136 	bltu	r2,r18,1001de28 <__udivdi3+0xe4>
1001de24:	14c13436 	bltu	r2,r19,1001e2f8 <__udivdi3+0x5b4>
1001de28:	1821883a 	mov	r16,r3
1001de2c:	14e7c83a 	sub	r19,r2,r19
1001de30:	9809883a 	mov	r4,r19
1001de34:	a80b883a 	mov	r5,r21
1001de38:	000c6e80 	call	1000c6e8 <__umodsi3>
1001de3c:	102d883a 	mov	r22,r2
1001de40:	9809883a 	mov	r4,r19
1001de44:	a80b883a 	mov	r5,r21
1001de48:	000c6e00 	call	1000c6e0 <__udivsi3>
1001de4c:	b02c943a 	slli	r22,r22,16
1001de50:	1529383a 	mul	r20,r2,r20
1001de54:	8c7fffcc 	andi	r17,r17,65535
1001de58:	b462b03a 	or	r17,r22,r17
1001de5c:	8d00052e 	bgeu	r17,r20,1001de74 <__udivdi3+0x130>
1001de60:	8ca3883a 	add	r17,r17,r18
1001de64:	10ffffc4 	addi	r3,r2,-1
1001de68:	8c80f636 	bltu	r17,r18,1001e244 <__udivdi3+0x500>
1001de6c:	8d00f52e 	bgeu	r17,r20,1001e244 <__udivdi3+0x500>
1001de70:	10bfff84 	addi	r2,r2,-2
1001de74:	8020943a 	slli	r16,r16,16
1001de78:	0007883a 	mov	r3,zero
1001de7c:	1404b03a 	or	r2,r2,r16
1001de80:	00005b06 	br	1001dff0 <__udivdi3+0x2ac>
1001de84:	29c05836 	bltu	r5,r7,1001dfe8 <__udivdi3+0x2a4>
1001de88:	00bfffd4 	movui	r2,65535
1001de8c:	11c0642e 	bgeu	r2,r7,1001e020 <__udivdi3+0x2dc>
1001de90:	00804034 	movhi	r2,256
1001de94:	10bfffc4 	addi	r2,r2,-1
1001de98:	11c0f32e 	bgeu	r2,r7,1001e268 <__udivdi3+0x524>
1001de9c:	00c00604 	movi	r3,24
1001dea0:	180b883a 	mov	r5,r3
1001dea4:	38c6d83a 	srl	r3,r7,r3
1001dea8:	008400b4 	movhi	r2,4098
1001deac:	10957704 	addi	r2,r2,21980
1001deb0:	10c7883a 	add	r3,r2,r3
1001deb4:	18c00003 	ldbu	r3,0(r3)
1001deb8:	01000804 	movi	r4,32
1001debc:	1947883a 	add	r3,r3,r5
1001dec0:	20e5c83a 	sub	r18,r4,r3
1001dec4:	9000661e 	bne	r18,zero,1001e060 <__udivdi3+0x31c>
1001dec8:	3c00f936 	bltu	r7,r16,1001e2b0 <__udivdi3+0x56c>
1001decc:	9985403a 	cmpgeu	r2,r19,r6
1001ded0:	0007883a 	mov	r3,zero
1001ded4:	00004606 	br	1001dff0 <__udivdi3+0x2ac>
1001ded8:	3000041e 	bne	r6,zero,1001deec <__udivdi3+0x1a8>
1001dedc:	01000044 	movi	r4,1
1001dee0:	000b883a 	mov	r5,zero
1001dee4:	000c6e00 	call	1000c6e0 <__udivsi3>
1001dee8:	1025883a 	mov	r18,r2
1001deec:	00bfffd4 	movui	r2,65535
1001def0:	1480562e 	bgeu	r2,r18,1001e04c <__udivdi3+0x308>
1001def4:	00804034 	movhi	r2,256
1001def8:	10bfffc4 	addi	r2,r2,-1
1001defc:	1480e32e 	bgeu	r2,r18,1001e28c <__udivdi3+0x548>
1001df00:	00800604 	movi	r2,24
1001df04:	1007883a 	mov	r3,r2
1001df08:	9084d83a 	srl	r2,r18,r2
1001df0c:	010400b4 	movhi	r4,4098
1001df10:	21157704 	addi	r4,r4,21980
1001df14:	2085883a 	add	r2,r4,r2
1001df18:	10800003 	ldbu	r2,0(r2)
1001df1c:	10c5883a 	add	r2,r2,r3
1001df20:	00c00804 	movi	r3,32
1001df24:	1887c83a 	sub	r3,r3,r2
1001df28:	1800911e 	bne	r3,zero,1001e170 <__udivdi3+0x42c>
1001df2c:	9028d43a 	srli	r20,r18,16
1001df30:	84a1c83a 	sub	r16,r16,r18
1001df34:	957fffcc 	andi	r21,r18,65535
1001df38:	00c00044 	movi	r3,1
1001df3c:	8009883a 	mov	r4,r16
1001df40:	a00b883a 	mov	r5,r20
1001df44:	d8c00015 	stw	r3,0(sp)
1001df48:	000c6e80 	call	1000c6e8 <__umodsi3>
1001df4c:	8009883a 	mov	r4,r16
1001df50:	a00b883a 	mov	r5,r20
1001df54:	1027883a 	mov	r19,r2
1001df58:	000c6e00 	call	1000c6e0 <__udivsi3>
1001df5c:	1021883a 	mov	r16,r2
1001df60:	880cd43a 	srli	r6,r17,16
1001df64:	9804943a 	slli	r2,r19,16
1001df68:	8567383a 	mul	r19,r16,r21
1001df6c:	d8c00017 	ldw	r3,0(sp)
1001df70:	1188b03a 	or	r4,r2,r6
1001df74:	24c0052e 	bgeu	r4,r19,1001df8c <__udivdi3+0x248>
1001df78:	2489883a 	add	r4,r4,r18
1001df7c:	80bfffc4 	addi	r2,r16,-1
1001df80:	24800136 	bltu	r4,r18,1001df88 <__udivdi3+0x244>
1001df84:	24c0d936 	bltu	r4,r19,1001e2ec <__udivdi3+0x5a8>
1001df88:	1021883a 	mov	r16,r2
1001df8c:	24e7c83a 	sub	r19,r4,r19
1001df90:	9809883a 	mov	r4,r19
1001df94:	a00b883a 	mov	r5,r20
1001df98:	d8c00015 	stw	r3,0(sp)
1001df9c:	000c6e80 	call	1000c6e8 <__umodsi3>
1001dfa0:	102d883a 	mov	r22,r2
1001dfa4:	9809883a 	mov	r4,r19
1001dfa8:	a00b883a 	mov	r5,r20
1001dfac:	000c6e00 	call	1000c6e0 <__udivsi3>
1001dfb0:	b02c943a 	slli	r22,r22,16
1001dfb4:	156b383a 	mul	r21,r2,r21
1001dfb8:	8c7fffcc 	andi	r17,r17,65535
1001dfbc:	b462b03a 	or	r17,r22,r17
1001dfc0:	d8c00017 	ldw	r3,0(sp)
1001dfc4:	8d40052e 	bgeu	r17,r21,1001dfdc <__udivdi3+0x298>
1001dfc8:	8ca3883a 	add	r17,r17,r18
1001dfcc:	113fffc4 	addi	r4,r2,-1
1001dfd0:	8c809a36 	bltu	r17,r18,1001e23c <__udivdi3+0x4f8>
1001dfd4:	8d40992e 	bgeu	r17,r21,1001e23c <__udivdi3+0x4f8>
1001dfd8:	10bfff84 	addi	r2,r2,-2
1001dfdc:	8020943a 	slli	r16,r16,16
1001dfe0:	1404b03a 	or	r2,r2,r16
1001dfe4:	00000206 	br	1001dff0 <__udivdi3+0x2ac>
1001dfe8:	0007883a 	mov	r3,zero
1001dfec:	0005883a 	mov	r2,zero
1001dff0:	dfc00a17 	ldw	ra,40(sp)
1001dff4:	df000917 	ldw	fp,36(sp)
1001dff8:	ddc00817 	ldw	r23,32(sp)
1001dffc:	dd800717 	ldw	r22,28(sp)
1001e000:	dd400617 	ldw	r21,24(sp)
1001e004:	dd000517 	ldw	r20,20(sp)
1001e008:	dcc00417 	ldw	r19,16(sp)
1001e00c:	dc800317 	ldw	r18,12(sp)
1001e010:	dc400217 	ldw	r17,8(sp)
1001e014:	dc000117 	ldw	r16,4(sp)
1001e018:	dec00b04 	addi	sp,sp,44
1001e01c:	f800283a 	ret
1001e020:	00803fc4 	movi	r2,255
1001e024:	11c0932e 	bgeu	r2,r7,1001e274 <__udivdi3+0x530>
1001e028:	00c00204 	movi	r3,8
1001e02c:	180b883a 	mov	r5,r3
1001e030:	003f9c06 	br	1001dea4 <__alt_data_end+0xf001dea4>
1001e034:	00804034 	movhi	r2,256
1001e038:	10bfffc4 	addi	r2,r2,-1
1001e03c:	1180902e 	bgeu	r2,r6,1001e280 <__udivdi3+0x53c>
1001e040:	00800604 	movi	r2,24
1001e044:	1007883a 	mov	r3,r2
1001e048:	003f5606 	br	1001dda4 <__alt_data_end+0xf001dda4>
1001e04c:	00803fc4 	movi	r2,255
1001e050:	1480912e 	bgeu	r2,r18,1001e298 <__udivdi3+0x554>
1001e054:	00800204 	movi	r2,8
1001e058:	1007883a 	mov	r3,r2
1001e05c:	003faa06 	br	1001df08 <__alt_data_end+0xf001df08>
1001e060:	30eed83a 	srl	r23,r6,r3
1001e064:	3c8e983a 	sll	r7,r7,r18
1001e068:	80f8d83a 	srl	fp,r16,r3
1001e06c:	98c6d83a 	srl	r3,r19,r3
1001e070:	3deeb03a 	or	r23,r7,r23
1001e074:	b828d43a 	srli	r20,r23,16
1001e078:	84a0983a 	sll	r16,r16,r18
1001e07c:	e009883a 	mov	r4,fp
1001e080:	a00b883a 	mov	r5,r20
1001e084:	80e2b03a 	or	r17,r16,r3
1001e088:	34aa983a 	sll	r21,r6,r18
1001e08c:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e090:	e009883a 	mov	r4,fp
1001e094:	a00b883a 	mov	r5,r20
1001e098:	102d883a 	mov	r22,r2
1001e09c:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e0a0:	1021883a 	mov	r16,r2
1001e0a4:	bf3fffcc 	andi	fp,r23,65535
1001e0a8:	b004943a 	slli	r2,r22,16
1001e0ac:	8808d43a 	srli	r4,r17,16
1001e0b0:	872d383a 	mul	r22,r16,fp
1001e0b4:	1104b03a 	or	r2,r2,r4
1001e0b8:	1580042e 	bgeu	r2,r22,1001e0cc <__udivdi3+0x388>
1001e0bc:	15c5883a 	add	r2,r2,r23
1001e0c0:	80ffffc4 	addi	r3,r16,-1
1001e0c4:	15c0812e 	bgeu	r2,r23,1001e2cc <__udivdi3+0x588>
1001e0c8:	1821883a 	mov	r16,r3
1001e0cc:	15adc83a 	sub	r22,r2,r22
1001e0d0:	b009883a 	mov	r4,r22
1001e0d4:	a00b883a 	mov	r5,r20
1001e0d8:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e0dc:	a00b883a 	mov	r5,r20
1001e0e0:	b009883a 	mov	r4,r22
1001e0e4:	d8800015 	stw	r2,0(sp)
1001e0e8:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e0ec:	d8c00017 	ldw	r3,0(sp)
1001e0f0:	170b383a 	mul	r5,r2,fp
1001e0f4:	8c7fffcc 	andi	r17,r17,65535
1001e0f8:	1806943a 	slli	r3,r3,16
1001e0fc:	1c46b03a 	or	r3,r3,r17
1001e100:	1940042e 	bgeu	r3,r5,1001e114 <__udivdi3+0x3d0>
1001e104:	1dc7883a 	add	r3,r3,r23
1001e108:	113fffc4 	addi	r4,r2,-1
1001e10c:	1dc06b2e 	bgeu	r3,r23,1001e2bc <__udivdi3+0x578>
1001e110:	2005883a 	mov	r2,r4
1001e114:	8020943a 	slli	r16,r16,16
1001e118:	a9ffffcc 	andi	r7,r21,65535
1001e11c:	a82ad43a 	srli	r21,r21,16
1001e120:	1404b03a 	or	r2,r2,r16
1001e124:	113fffcc 	andi	r4,r2,65535
1001e128:	100cd43a 	srli	r6,r2,16
1001e12c:	21d3383a 	mul	r9,r4,r7
1001e130:	2549383a 	mul	r4,r4,r21
1001e134:	31cf383a 	mul	r7,r6,r7
1001e138:	4810d43a 	srli	r8,r9,16
1001e13c:	1947c83a 	sub	r3,r3,r5
1001e140:	3909883a 	add	r4,r7,r4
1001e144:	2209883a 	add	r4,r4,r8
1001e148:	354d383a 	mul	r6,r6,r21
1001e14c:	21c0022e 	bgeu	r4,r7,1001e158 <__udivdi3+0x414>
1001e150:	01400074 	movhi	r5,1
1001e154:	314d883a 	add	r6,r6,r5
1001e158:	202ad43a 	srli	r21,r4,16
1001e15c:	354d883a 	add	r6,r6,r21
1001e160:	19803f36 	bltu	r3,r6,1001e260 <__udivdi3+0x51c>
1001e164:	19803926 	beq	r3,r6,1001e24c <__udivdi3+0x508>
1001e168:	0007883a 	mov	r3,zero
1001e16c:	003fa006 	br	1001dff0 <__alt_data_end+0xf001dff0>
1001e170:	90e4983a 	sll	r18,r18,r3
1001e174:	80aad83a 	srl	r21,r16,r2
1001e178:	80e0983a 	sll	r16,r16,r3
1001e17c:	9028d43a 	srli	r20,r18,16
1001e180:	9884d83a 	srl	r2,r19,r2
1001e184:	a809883a 	mov	r4,r21
1001e188:	a00b883a 	mov	r5,r20
1001e18c:	80acb03a 	or	r22,r16,r2
1001e190:	98e2983a 	sll	r17,r19,r3
1001e194:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e198:	a809883a 	mov	r4,r21
1001e19c:	a00b883a 	mov	r5,r20
1001e1a0:	1021883a 	mov	r16,r2
1001e1a4:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e1a8:	957fffcc 	andi	r21,r18,65535
1001e1ac:	8020943a 	slli	r16,r16,16
1001e1b0:	b00ad43a 	srli	r5,r22,16
1001e1b4:	1567383a 	mul	r19,r2,r21
1001e1b8:	102f883a 	mov	r23,r2
1001e1bc:	8148b03a 	or	r4,r16,r5
1001e1c0:	24c0062e 	bgeu	r4,r19,1001e1dc <__udivdi3+0x498>
1001e1c4:	2489883a 	add	r4,r4,r18
1001e1c8:	10bfffc4 	addi	r2,r2,-1
1001e1cc:	24804536 	bltu	r4,r18,1001e2e4 <__udivdi3+0x5a0>
1001e1d0:	24c0442e 	bgeu	r4,r19,1001e2e4 <__udivdi3+0x5a0>
1001e1d4:	bdffff84 	addi	r23,r23,-2
1001e1d8:	2489883a 	add	r4,r4,r18
1001e1dc:	24e7c83a 	sub	r19,r4,r19
1001e1e0:	9809883a 	mov	r4,r19
1001e1e4:	a00b883a 	mov	r5,r20
1001e1e8:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e1ec:	1021883a 	mov	r16,r2
1001e1f0:	9809883a 	mov	r4,r19
1001e1f4:	a00b883a 	mov	r5,r20
1001e1f8:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e1fc:	8020943a 	slli	r16,r16,16
1001e200:	1007883a 	mov	r3,r2
1001e204:	1545383a 	mul	r2,r2,r21
1001e208:	b13fffcc 	andi	r4,r22,65535
1001e20c:	8108b03a 	or	r4,r16,r4
1001e210:	2080062e 	bgeu	r4,r2,1001e22c <__udivdi3+0x4e8>
1001e214:	2489883a 	add	r4,r4,r18
1001e218:	197fffc4 	addi	r5,r3,-1
1001e21c:	24802f36 	bltu	r4,r18,1001e2dc <__udivdi3+0x598>
1001e220:	20802e2e 	bgeu	r4,r2,1001e2dc <__udivdi3+0x598>
1001e224:	18ffff84 	addi	r3,r3,-2
1001e228:	2489883a 	add	r4,r4,r18
1001e22c:	b82e943a 	slli	r23,r23,16
1001e230:	20a1c83a 	sub	r16,r4,r2
1001e234:	1dc6b03a 	or	r3,r3,r23
1001e238:	003f4006 	br	1001df3c <__alt_data_end+0xf001df3c>
1001e23c:	2005883a 	mov	r2,r4
1001e240:	003f6606 	br	1001dfdc <__alt_data_end+0xf001dfdc>
1001e244:	1805883a 	mov	r2,r3
1001e248:	003f0a06 	br	1001de74 <__alt_data_end+0xf001de74>
1001e24c:	2006943a 	slli	r3,r4,16
1001e250:	9c88983a 	sll	r4,r19,r18
1001e254:	4a7fffcc 	andi	r9,r9,65535
1001e258:	1a47883a 	add	r3,r3,r9
1001e25c:	20ffc22e 	bgeu	r4,r3,1001e168 <__alt_data_end+0xf001e168>
1001e260:	10bfffc4 	addi	r2,r2,-1
1001e264:	003fc006 	br	1001e168 <__alt_data_end+0xf001e168>
1001e268:	00c00404 	movi	r3,16
1001e26c:	180b883a 	mov	r5,r3
1001e270:	003f0c06 	br	1001dea4 <__alt_data_end+0xf001dea4>
1001e274:	0007883a 	mov	r3,zero
1001e278:	000b883a 	mov	r5,zero
1001e27c:	003f0906 	br	1001dea4 <__alt_data_end+0xf001dea4>
1001e280:	00800404 	movi	r2,16
1001e284:	1007883a 	mov	r3,r2
1001e288:	003ec606 	br	1001dda4 <__alt_data_end+0xf001dda4>
1001e28c:	00800404 	movi	r2,16
1001e290:	1007883a 	mov	r3,r2
1001e294:	003f1c06 	br	1001df08 <__alt_data_end+0xf001df08>
1001e298:	0005883a 	mov	r2,zero
1001e29c:	0007883a 	mov	r3,zero
1001e2a0:	003f1906 	br	1001df08 <__alt_data_end+0xf001df08>
1001e2a4:	0005883a 	mov	r2,zero
1001e2a8:	0007883a 	mov	r3,zero
1001e2ac:	003ebd06 	br	1001dda4 <__alt_data_end+0xf001dda4>
1001e2b0:	0007883a 	mov	r3,zero
1001e2b4:	00800044 	movi	r2,1
1001e2b8:	003f4d06 	br	1001dff0 <__alt_data_end+0xf001dff0>
1001e2bc:	197f942e 	bgeu	r3,r5,1001e110 <__alt_data_end+0xf001e110>
1001e2c0:	10bfff84 	addi	r2,r2,-2
1001e2c4:	1dc7883a 	add	r3,r3,r23
1001e2c8:	003f9206 	br	1001e114 <__alt_data_end+0xf001e114>
1001e2cc:	15bf7e2e 	bgeu	r2,r22,1001e0c8 <__alt_data_end+0xf001e0c8>
1001e2d0:	843fff84 	addi	r16,r16,-2
1001e2d4:	15c5883a 	add	r2,r2,r23
1001e2d8:	003f7c06 	br	1001e0cc <__alt_data_end+0xf001e0cc>
1001e2dc:	2807883a 	mov	r3,r5
1001e2e0:	003fd206 	br	1001e22c <__alt_data_end+0xf001e22c>
1001e2e4:	102f883a 	mov	r23,r2
1001e2e8:	003fbc06 	br	1001e1dc <__alt_data_end+0xf001e1dc>
1001e2ec:	843fff84 	addi	r16,r16,-2
1001e2f0:	2489883a 	add	r4,r4,r18
1001e2f4:	003f2506 	br	1001df8c <__alt_data_end+0xf001df8c>
1001e2f8:	843fff84 	addi	r16,r16,-2
1001e2fc:	1485883a 	add	r2,r2,r18
1001e300:	003eca06 	br	1001de2c <__alt_data_end+0xf001de2c>

1001e304 <__umoddi3>:
1001e304:	defff404 	addi	sp,sp,-48
1001e308:	ddc00915 	stw	r23,36(sp)
1001e30c:	dc400315 	stw	r17,12(sp)
1001e310:	dc000215 	stw	r16,8(sp)
1001e314:	dfc00b15 	stw	ra,44(sp)
1001e318:	df000a15 	stw	fp,40(sp)
1001e31c:	dd800815 	stw	r22,32(sp)
1001e320:	dd400715 	stw	r21,28(sp)
1001e324:	dd000615 	stw	r20,24(sp)
1001e328:	dcc00515 	stw	r19,20(sp)
1001e32c:	dc800415 	stw	r18,16(sp)
1001e330:	2021883a 	mov	r16,r4
1001e334:	2823883a 	mov	r17,r5
1001e338:	282f883a 	mov	r23,r5
1001e33c:	3800381e 	bne	r7,zero,1001e420 <__umoddi3+0x11c>
1001e340:	3027883a 	mov	r19,r6
1001e344:	2029883a 	mov	r20,r4
1001e348:	29804e2e 	bgeu	r5,r6,1001e484 <__umoddi3+0x180>
1001e34c:	00bfffd4 	movui	r2,65535
1001e350:	11809c36 	bltu	r2,r6,1001e5c4 <__umoddi3+0x2c0>
1001e354:	00803fc4 	movi	r2,255
1001e358:	11813b2e 	bgeu	r2,r6,1001e848 <__umoddi3+0x544>
1001e35c:	01400204 	movi	r5,8
1001e360:	2805883a 	mov	r2,r5
1001e364:	314ad83a 	srl	r5,r6,r5
1001e368:	00c400b4 	movhi	r3,4098
1001e36c:	18d57704 	addi	r3,r3,21980
1001e370:	194b883a 	add	r5,r3,r5
1001e374:	29000003 	ldbu	r4,0(r5)
1001e378:	2089883a 	add	r4,r4,r2
1001e37c:	00800804 	movi	r2,32
1001e380:	1105c83a 	sub	r2,r2,r4
1001e384:	1000ec26 	beq	r2,zero,1001e738 <__umoddi3+0x434>
1001e388:	88a2983a 	sll	r17,r17,r2
1001e38c:	8108d83a 	srl	r4,r16,r4
1001e390:	30a6983a 	sll	r19,r6,r2
1001e394:	80a8983a 	sll	r20,r16,r2
1001e398:	1025883a 	mov	r18,r2
1001e39c:	892eb03a 	or	r23,r17,r4
1001e3a0:	982cd43a 	srli	r22,r19,16
1001e3a4:	b809883a 	mov	r4,r23
1001e3a8:	9d7fffcc 	andi	r21,r19,65535
1001e3ac:	b00b883a 	mov	r5,r22
1001e3b0:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e3b4:	b809883a 	mov	r4,r23
1001e3b8:	b00b883a 	mov	r5,r22
1001e3bc:	1021883a 	mov	r16,r2
1001e3c0:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e3c4:	8020943a 	slli	r16,r16,16
1001e3c8:	a00cd43a 	srli	r6,r20,16
1001e3cc:	1545383a 	mul	r2,r2,r21
1001e3d0:	8188b03a 	or	r4,r16,r6
1001e3d4:	2080042e 	bgeu	r4,r2,1001e3e8 <__umoddi3+0xe4>
1001e3d8:	24c9883a 	add	r4,r4,r19
1001e3dc:	24c00236 	bltu	r4,r19,1001e3e8 <__umoddi3+0xe4>
1001e3e0:	2080012e 	bgeu	r4,r2,1001e3e8 <__umoddi3+0xe4>
1001e3e4:	24c9883a 	add	r4,r4,r19
1001e3e8:	20a3c83a 	sub	r17,r4,r2
1001e3ec:	8809883a 	mov	r4,r17
1001e3f0:	b00b883a 	mov	r5,r22
1001e3f4:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e3f8:	8809883a 	mov	r4,r17
1001e3fc:	b00b883a 	mov	r5,r22
1001e400:	1021883a 	mov	r16,r2
1001e404:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e408:	8006943a 	slli	r3,r16,16
1001e40c:	1545383a 	mul	r2,r2,r21
1001e410:	a13fffcc 	andi	r4,r20,65535
1001e414:	1906b03a 	or	r3,r3,r4
1001e418:	1880532e 	bgeu	r3,r2,1001e568 <__umoddi3+0x264>
1001e41c:	00004e06 	br	1001e558 <__umoddi3+0x254>
1001e420:	29c05536 	bltu	r5,r7,1001e578 <__umoddi3+0x274>
1001e424:	00bfffd4 	movui	r2,65535
1001e428:	11c0612e 	bgeu	r2,r7,1001e5b0 <__umoddi3+0x2ac>
1001e42c:	00804034 	movhi	r2,256
1001e430:	10bfffc4 	addi	r2,r2,-1
1001e434:	11c0f82e 	bgeu	r2,r7,1001e818 <__umoddi3+0x514>
1001e438:	01400604 	movi	r5,24
1001e43c:	282b883a 	mov	r21,r5
1001e440:	394ad83a 	srl	r5,r7,r5
1001e444:	00c400b4 	movhi	r3,4098
1001e448:	18d57704 	addi	r3,r3,21980
1001e44c:	194b883a 	add	r5,r3,r5
1001e450:	28800003 	ldbu	r2,0(r5)
1001e454:	00c00804 	movi	r3,32
1001e458:	156b883a 	add	r21,r2,r21
1001e45c:	1d69c83a 	sub	r20,r3,r21
1001e460:	a000631e 	bne	r20,zero,1001e5f0 <__umoddi3+0x2ec>
1001e464:	3c400136 	bltu	r7,r17,1001e46c <__umoddi3+0x168>
1001e468:	81810436 	bltu	r16,r6,1001e87c <__umoddi3+0x578>
1001e46c:	8185c83a 	sub	r2,r16,r6
1001e470:	89e3c83a 	sub	r17,r17,r7
1001e474:	8087803a 	cmpltu	r3,r16,r2
1001e478:	88efc83a 	sub	r23,r17,r3
1001e47c:	b807883a 	mov	r3,r23
1001e480:	00003f06 	br	1001e580 <__umoddi3+0x27c>
1001e484:	3000041e 	bne	r6,zero,1001e498 <__umoddi3+0x194>
1001e488:	01000044 	movi	r4,1
1001e48c:	000b883a 	mov	r5,zero
1001e490:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e494:	1027883a 	mov	r19,r2
1001e498:	00bfffd4 	movui	r2,65535
1001e49c:	14c04f2e 	bgeu	r2,r19,1001e5dc <__umoddi3+0x2d8>
1001e4a0:	00804034 	movhi	r2,256
1001e4a4:	10bfffc4 	addi	r2,r2,-1
1001e4a8:	14c0e42e 	bgeu	r2,r19,1001e83c <__umoddi3+0x538>
1001e4ac:	00800604 	movi	r2,24
1001e4b0:	1007883a 	mov	r3,r2
1001e4b4:	9884d83a 	srl	r2,r19,r2
1001e4b8:	010400b4 	movhi	r4,4098
1001e4bc:	21157704 	addi	r4,r4,21980
1001e4c0:	2085883a 	add	r2,r4,r2
1001e4c4:	11000003 	ldbu	r4,0(r2)
1001e4c8:	00800804 	movi	r2,32
1001e4cc:	20c7883a 	add	r3,r4,r3
1001e4d0:	10c5c83a 	sub	r2,r2,r3
1001e4d4:	10009a1e 	bne	r2,zero,1001e740 <__umoddi3+0x43c>
1001e4d8:	982cd43a 	srli	r22,r19,16
1001e4dc:	8ce3c83a 	sub	r17,r17,r19
1001e4e0:	9c3fffcc 	andi	r16,r19,65535
1001e4e4:	0025883a 	mov	r18,zero
1001e4e8:	8809883a 	mov	r4,r17
1001e4ec:	b00b883a 	mov	r5,r22
1001e4f0:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e4f4:	8809883a 	mov	r4,r17
1001e4f8:	b00b883a 	mov	r5,r22
1001e4fc:	102b883a 	mov	r21,r2
1001e500:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e504:	a806943a 	slli	r3,r21,16
1001e508:	a008d43a 	srli	r4,r20,16
1001e50c:	1405383a 	mul	r2,r2,r16
1001e510:	190cb03a 	or	r6,r3,r4
1001e514:	3080032e 	bgeu	r6,r2,1001e524 <__umoddi3+0x220>
1001e518:	34cd883a 	add	r6,r6,r19
1001e51c:	34c00136 	bltu	r6,r19,1001e524 <__umoddi3+0x220>
1001e520:	3080d436 	bltu	r6,r2,1001e874 <__umoddi3+0x570>
1001e524:	30abc83a 	sub	r21,r6,r2
1001e528:	a809883a 	mov	r4,r21
1001e52c:	b00b883a 	mov	r5,r22
1001e530:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e534:	1023883a 	mov	r17,r2
1001e538:	a809883a 	mov	r4,r21
1001e53c:	b00b883a 	mov	r5,r22
1001e540:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e544:	8822943a 	slli	r17,r17,16
1001e548:	1405383a 	mul	r2,r2,r16
1001e54c:	a13fffcc 	andi	r4,r20,65535
1001e550:	8906b03a 	or	r3,r17,r4
1001e554:	1880042e 	bgeu	r3,r2,1001e568 <__umoddi3+0x264>
1001e558:	1cc7883a 	add	r3,r3,r19
1001e55c:	1cc00236 	bltu	r3,r19,1001e568 <__umoddi3+0x264>
1001e560:	1880012e 	bgeu	r3,r2,1001e568 <__umoddi3+0x264>
1001e564:	1cc7883a 	add	r3,r3,r19
1001e568:	1887c83a 	sub	r3,r3,r2
1001e56c:	1c84d83a 	srl	r2,r3,r18
1001e570:	0007883a 	mov	r3,zero
1001e574:	00000206 	br	1001e580 <__umoddi3+0x27c>
1001e578:	2005883a 	mov	r2,r4
1001e57c:	2807883a 	mov	r3,r5
1001e580:	dfc00b17 	ldw	ra,44(sp)
1001e584:	df000a17 	ldw	fp,40(sp)
1001e588:	ddc00917 	ldw	r23,36(sp)
1001e58c:	dd800817 	ldw	r22,32(sp)
1001e590:	dd400717 	ldw	r21,28(sp)
1001e594:	dd000617 	ldw	r20,24(sp)
1001e598:	dcc00517 	ldw	r19,20(sp)
1001e59c:	dc800417 	ldw	r18,16(sp)
1001e5a0:	dc400317 	ldw	r17,12(sp)
1001e5a4:	dc000217 	ldw	r16,8(sp)
1001e5a8:	dec00c04 	addi	sp,sp,48
1001e5ac:	f800283a 	ret
1001e5b0:	00803fc4 	movi	r2,255
1001e5b4:	11c0952e 	bgeu	r2,r7,1001e80c <__umoddi3+0x508>
1001e5b8:	01400204 	movi	r5,8
1001e5bc:	282b883a 	mov	r21,r5
1001e5c0:	003f9f06 	br	1001e440 <__alt_data_end+0xf001e440>
1001e5c4:	00804034 	movhi	r2,256
1001e5c8:	10bfffc4 	addi	r2,r2,-1
1001e5cc:	1180952e 	bgeu	r2,r6,1001e824 <__umoddi3+0x520>
1001e5d0:	01400604 	movi	r5,24
1001e5d4:	2805883a 	mov	r2,r5
1001e5d8:	003f6206 	br	1001e364 <__alt_data_end+0xf001e364>
1001e5dc:	00803fc4 	movi	r2,255
1001e5e0:	14c0932e 	bgeu	r2,r19,1001e830 <__umoddi3+0x52c>
1001e5e4:	00800204 	movi	r2,8
1001e5e8:	1007883a 	mov	r3,r2
1001e5ec:	003fb106 	br	1001e4b4 <__alt_data_end+0xf001e4b4>
1001e5f0:	3548d83a 	srl	r4,r6,r21
1001e5f4:	3d0e983a 	sll	r7,r7,r20
1001e5f8:	8d10983a 	sll	r8,r17,r20
1001e5fc:	8d6cd83a 	srl	r22,r17,r21
1001e600:	3922b03a 	or	r17,r7,r4
1001e604:	882ed43a 	srli	r23,r17,16
1001e608:	8564d83a 	srl	r18,r16,r21
1001e60c:	b009883a 	mov	r4,r22
1001e610:	b80b883a 	mov	r5,r23
1001e614:	44a4b03a 	or	r18,r8,r18
1001e618:	3526983a 	sll	r19,r6,r20
1001e61c:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e620:	b009883a 	mov	r4,r22
1001e624:	b80b883a 	mov	r5,r23
1001e628:	1039883a 	mov	fp,r2
1001e62c:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e630:	102d883a 	mov	r22,r2
1001e634:	8a3fffcc 	andi	r8,r17,65535
1001e638:	e004943a 	slli	r2,fp,16
1001e63c:	900cd43a 	srli	r6,r18,16
1001e640:	b239383a 	mul	fp,r22,r8
1001e644:	8520983a 	sll	r16,r16,r20
1001e648:	118ab03a 	or	r5,r2,r6
1001e64c:	2f00042e 	bgeu	r5,fp,1001e660 <__umoddi3+0x35c>
1001e650:	2c4b883a 	add	r5,r5,r17
1001e654:	b0bfffc4 	addi	r2,r22,-1
1001e658:	2c40822e 	bgeu	r5,r17,1001e864 <__umoddi3+0x560>
1001e65c:	102d883a 	mov	r22,r2
1001e660:	2f39c83a 	sub	fp,r5,fp
1001e664:	e009883a 	mov	r4,fp
1001e668:	b80b883a 	mov	r5,r23
1001e66c:	da000115 	stw	r8,4(sp)
1001e670:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e674:	e009883a 	mov	r4,fp
1001e678:	b80b883a 	mov	r5,r23
1001e67c:	d8800015 	stw	r2,0(sp)
1001e680:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e684:	d9800017 	ldw	r6,0(sp)
1001e688:	da000117 	ldw	r8,4(sp)
1001e68c:	94bfffcc 	andi	r18,r18,65535
1001e690:	300c943a 	slli	r6,r6,16
1001e694:	1209383a 	mul	r4,r2,r8
1001e698:	3490b03a 	or	r8,r6,r18
1001e69c:	4100042e 	bgeu	r8,r4,1001e6b0 <__umoddi3+0x3ac>
1001e6a0:	4451883a 	add	r8,r8,r17
1001e6a4:	10ffffc4 	addi	r3,r2,-1
1001e6a8:	44406a2e 	bgeu	r8,r17,1001e854 <__umoddi3+0x550>
1001e6ac:	1805883a 	mov	r2,r3
1001e6b0:	b012943a 	slli	r9,r22,16
1001e6b4:	9abfffcc 	andi	r10,r19,65535
1001e6b8:	980ed43a 	srli	r7,r19,16
1001e6bc:	124ab03a 	or	r5,r2,r9
1001e6c0:	2a7fffcc 	andi	r9,r5,65535
1001e6c4:	280ad43a 	srli	r5,r5,16
1001e6c8:	4a8d383a 	mul	r6,r9,r10
1001e6cc:	49d3383a 	mul	r9,r9,r7
1001e6d0:	2a95383a 	mul	r10,r5,r10
1001e6d4:	3004d43a 	srli	r2,r6,16
1001e6d8:	4111c83a 	sub	r8,r8,r4
1001e6dc:	5253883a 	add	r9,r10,r9
1001e6e0:	4893883a 	add	r9,r9,r2
1001e6e4:	29cb383a 	mul	r5,r5,r7
1001e6e8:	4a80022e 	bgeu	r9,r10,1001e6f4 <__umoddi3+0x3f0>
1001e6ec:	00800074 	movhi	r2,1
1001e6f0:	288b883a 	add	r5,r5,r2
1001e6f4:	4808d43a 	srli	r4,r9,16
1001e6f8:	4812943a 	slli	r9,r9,16
1001e6fc:	31bfffcc 	andi	r6,r6,65535
1001e700:	290b883a 	add	r5,r5,r4
1001e704:	498d883a 	add	r6,r9,r6
1001e708:	41403a36 	bltu	r8,r5,1001e7f4 <__umoddi3+0x4f0>
1001e70c:	41405d26 	beq	r8,r5,1001e884 <__umoddi3+0x580>
1001e710:	4149c83a 	sub	r4,r8,r5
1001e714:	300f883a 	mov	r7,r6
1001e718:	81cfc83a 	sub	r7,r16,r7
1001e71c:	81c7803a 	cmpltu	r3,r16,r7
1001e720:	20c7c83a 	sub	r3,r4,r3
1001e724:	1d44983a 	sll	r2,r3,r21
1001e728:	3d0ed83a 	srl	r7,r7,r20
1001e72c:	1d06d83a 	srl	r3,r3,r20
1001e730:	11c4b03a 	or	r2,r2,r7
1001e734:	003f9206 	br	1001e580 <__alt_data_end+0xf001e580>
1001e738:	0025883a 	mov	r18,zero
1001e73c:	003f1806 	br	1001e3a0 <__alt_data_end+0xf001e3a0>
1001e740:	98a6983a 	sll	r19,r19,r2
1001e744:	88e8d83a 	srl	r20,r17,r3
1001e748:	80c6d83a 	srl	r3,r16,r3
1001e74c:	982cd43a 	srli	r22,r19,16
1001e750:	88a2983a 	sll	r17,r17,r2
1001e754:	a009883a 	mov	r4,r20
1001e758:	b00b883a 	mov	r5,r22
1001e75c:	88eab03a 	or	r21,r17,r3
1001e760:	1025883a 	mov	r18,r2
1001e764:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e768:	a009883a 	mov	r4,r20
1001e76c:	b00b883a 	mov	r5,r22
1001e770:	1023883a 	mov	r17,r2
1001e774:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e778:	9f3fffcc 	andi	fp,r19,65535
1001e77c:	8822943a 	slli	r17,r17,16
1001e780:	a80ad43a 	srli	r5,r21,16
1001e784:	1705383a 	mul	r2,r2,fp
1001e788:	84a8983a 	sll	r20,r16,r18
1001e78c:	8948b03a 	or	r4,r17,r5
1001e790:	2080042e 	bgeu	r4,r2,1001e7a4 <__umoddi3+0x4a0>
1001e794:	24c9883a 	add	r4,r4,r19
1001e798:	24c00236 	bltu	r4,r19,1001e7a4 <__umoddi3+0x4a0>
1001e79c:	2080012e 	bgeu	r4,r2,1001e7a4 <__umoddi3+0x4a0>
1001e7a0:	24c9883a 	add	r4,r4,r19
1001e7a4:	20afc83a 	sub	r23,r4,r2
1001e7a8:	b809883a 	mov	r4,r23
1001e7ac:	b00b883a 	mov	r5,r22
1001e7b0:	000c6e80 	call	1000c6e8 <__umodsi3>
1001e7b4:	1023883a 	mov	r17,r2
1001e7b8:	b809883a 	mov	r4,r23
1001e7bc:	b00b883a 	mov	r5,r22
1001e7c0:	000c6e00 	call	1000c6e0 <__udivsi3>
1001e7c4:	8822943a 	slli	r17,r17,16
1001e7c8:	1705383a 	mul	r2,r2,fp
1001e7cc:	a93fffcc 	andi	r4,r21,65535
1001e7d0:	8908b03a 	or	r4,r17,r4
1001e7d4:	2080042e 	bgeu	r4,r2,1001e7e8 <__umoddi3+0x4e4>
1001e7d8:	24c9883a 	add	r4,r4,r19
1001e7dc:	24c00236 	bltu	r4,r19,1001e7e8 <__umoddi3+0x4e4>
1001e7e0:	2080012e 	bgeu	r4,r2,1001e7e8 <__umoddi3+0x4e4>
1001e7e4:	24c9883a 	add	r4,r4,r19
1001e7e8:	20a3c83a 	sub	r17,r4,r2
1001e7ec:	e021883a 	mov	r16,fp
1001e7f0:	003f3d06 	br	1001e4e8 <__alt_data_end+0xf001e4e8>
1001e7f4:	34cfc83a 	sub	r7,r6,r19
1001e7f8:	2c4bc83a 	sub	r5,r5,r17
1001e7fc:	31cd803a 	cmpltu	r6,r6,r7
1001e800:	298dc83a 	sub	r6,r5,r6
1001e804:	4189c83a 	sub	r4,r8,r6
1001e808:	003fc306 	br	1001e718 <__alt_data_end+0xf001e718>
1001e80c:	000b883a 	mov	r5,zero
1001e810:	002b883a 	mov	r21,zero
1001e814:	003f0a06 	br	1001e440 <__alt_data_end+0xf001e440>
1001e818:	01400404 	movi	r5,16
1001e81c:	282b883a 	mov	r21,r5
1001e820:	003f0706 	br	1001e440 <__alt_data_end+0xf001e440>
1001e824:	01400404 	movi	r5,16
1001e828:	2805883a 	mov	r2,r5
1001e82c:	003ecd06 	br	1001e364 <__alt_data_end+0xf001e364>
1001e830:	0005883a 	mov	r2,zero
1001e834:	0007883a 	mov	r3,zero
1001e838:	003f1e06 	br	1001e4b4 <__alt_data_end+0xf001e4b4>
1001e83c:	00800404 	movi	r2,16
1001e840:	1007883a 	mov	r3,r2
1001e844:	003f1b06 	br	1001e4b4 <__alt_data_end+0xf001e4b4>
1001e848:	000b883a 	mov	r5,zero
1001e84c:	0005883a 	mov	r2,zero
1001e850:	003ec406 	br	1001e364 <__alt_data_end+0xf001e364>
1001e854:	413f952e 	bgeu	r8,r4,1001e6ac <__alt_data_end+0xf001e6ac>
1001e858:	10bfff84 	addi	r2,r2,-2
1001e85c:	4451883a 	add	r8,r8,r17
1001e860:	003f9306 	br	1001e6b0 <__alt_data_end+0xf001e6b0>
1001e864:	2f3f7d2e 	bgeu	r5,fp,1001e65c <__alt_data_end+0xf001e65c>
1001e868:	b5bfff84 	addi	r22,r22,-2
1001e86c:	2c4b883a 	add	r5,r5,r17
1001e870:	003f7b06 	br	1001e660 <__alt_data_end+0xf001e660>
1001e874:	34cd883a 	add	r6,r6,r19
1001e878:	003f2a06 	br	1001e524 <__alt_data_end+0xf001e524>
1001e87c:	8005883a 	mov	r2,r16
1001e880:	003efe06 	br	1001e47c <__alt_data_end+0xf001e47c>
1001e884:	81bfdb36 	bltu	r16,r6,1001e7f4 <__alt_data_end+0xf001e7f4>
1001e888:	300f883a 	mov	r7,r6
1001e88c:	0009883a 	mov	r4,zero
1001e890:	003fa106 	br	1001e718 <__alt_data_end+0xf001e718>

1001e894 <__eqsf2>:
1001e894:	2006d5fa 	srli	r3,r4,23
1001e898:	280cd5fa 	srli	r6,r5,23
1001e89c:	01c02034 	movhi	r7,128
1001e8a0:	39ffffc4 	addi	r7,r7,-1
1001e8a4:	18c03fcc 	andi	r3,r3,255
1001e8a8:	02003fc4 	movi	r8,255
1001e8ac:	3904703a 	and	r2,r7,r4
1001e8b0:	31803fcc 	andi	r6,r6,255
1001e8b4:	394e703a 	and	r7,r7,r5
1001e8b8:	2008d7fa 	srli	r4,r4,31
1001e8bc:	280ad7fa 	srli	r5,r5,31
1001e8c0:	1a000c26 	beq	r3,r8,1001e8f4 <__eqsf2+0x60>
1001e8c4:	02003fc4 	movi	r8,255
1001e8c8:	32000326 	beq	r6,r8,1001e8d8 <__eqsf2+0x44>
1001e8cc:	19800426 	beq	r3,r6,1001e8e0 <__eqsf2+0x4c>
1001e8d0:	00800044 	movi	r2,1
1001e8d4:	f800283a 	ret
1001e8d8:	383ffd1e 	bne	r7,zero,1001e8d0 <__alt_data_end+0xf001e8d0>
1001e8dc:	19bffc1e 	bne	r3,r6,1001e8d0 <__alt_data_end+0xf001e8d0>
1001e8e0:	11fffb1e 	bne	r2,r7,1001e8d0 <__alt_data_end+0xf001e8d0>
1001e8e4:	21400626 	beq	r4,r5,1001e900 <__eqsf2+0x6c>
1001e8e8:	183ff91e 	bne	r3,zero,1001e8d0 <__alt_data_end+0xf001e8d0>
1001e8ec:	1004c03a 	cmpne	r2,r2,zero
1001e8f0:	f800283a 	ret
1001e8f4:	103ff326 	beq	r2,zero,1001e8c4 <__alt_data_end+0xf001e8c4>
1001e8f8:	00800044 	movi	r2,1
1001e8fc:	f800283a 	ret
1001e900:	0005883a 	mov	r2,zero
1001e904:	f800283a 	ret

1001e908 <__gesf2>:
1001e908:	2004d5fa 	srli	r2,r4,23
1001e90c:	2806d5fa 	srli	r3,r5,23
1001e910:	01802034 	movhi	r6,128
1001e914:	31bfffc4 	addi	r6,r6,-1
1001e918:	10803fcc 	andi	r2,r2,255
1001e91c:	01c03fc4 	movi	r7,255
1001e920:	3110703a 	and	r8,r6,r4
1001e924:	18c03fcc 	andi	r3,r3,255
1001e928:	314c703a 	and	r6,r6,r5
1001e92c:	2008d7fa 	srli	r4,r4,31
1001e930:	280ad7fa 	srli	r5,r5,31
1001e934:	11c00926 	beq	r2,r7,1001e95c <__gesf2+0x54>
1001e938:	19c01226 	beq	r3,r7,1001e984 <__gesf2+0x7c>
1001e93c:	1000091e 	bne	r2,zero,1001e964 <__gesf2+0x5c>
1001e940:	4013003a 	cmpeq	r9,r8,zero
1001e944:	480f883a 	mov	r7,r9
1001e948:	1800091e 	bne	r3,zero,1001e970 <__gesf2+0x68>
1001e94c:	3000081e 	bne	r6,zero,1001e970 <__gesf2+0x68>
1001e950:	48001026 	beq	r9,zero,1001e994 <__gesf2+0x8c>
1001e954:	0005883a 	mov	r2,zero
1001e958:	f800283a 	ret
1001e95c:	4000161e 	bne	r8,zero,1001e9b8 <__gesf2+0xb0>
1001e960:	18800826 	beq	r3,r2,1001e984 <__gesf2+0x7c>
1001e964:	1800091e 	bne	r3,zero,1001e98c <__gesf2+0x84>
1001e968:	000f883a 	mov	r7,zero
1001e96c:	30000926 	beq	r6,zero,1001e994 <__gesf2+0x8c>
1001e970:	29403fcc 	andi	r5,r5,255
1001e974:	38000626 	beq	r7,zero,1001e990 <__gesf2+0x88>
1001e978:	2800071e 	bne	r5,zero,1001e998 <__gesf2+0x90>
1001e97c:	00bfffc4 	movi	r2,-1
1001e980:	f800283a 	ret
1001e984:	30000c1e 	bne	r6,zero,1001e9b8 <__gesf2+0xb0>
1001e988:	103fed26 	beq	r2,zero,1001e940 <__alt_data_end+0xf001e940>
1001e98c:	29403fcc 	andi	r5,r5,255
1001e990:	21400326 	beq	r4,r5,1001e9a0 <__gesf2+0x98>
1001e994:	203ff91e 	bne	r4,zero,1001e97c <__alt_data_end+0xf001e97c>
1001e998:	00800044 	movi	r2,1
1001e99c:	f800283a 	ret
1001e9a0:	18bffc16 	blt	r3,r2,1001e994 <__alt_data_end+0xf001e994>
1001e9a4:	10c00216 	blt	r2,r3,1001e9b0 <__gesf2+0xa8>
1001e9a8:	323ffa36 	bltu	r6,r8,1001e994 <__alt_data_end+0xf001e994>
1001e9ac:	41bfe92e 	bgeu	r8,r6,1001e954 <__alt_data_end+0xf001e954>
1001e9b0:	203ff226 	beq	r4,zero,1001e97c <__alt_data_end+0xf001e97c>
1001e9b4:	003ff806 	br	1001e998 <__alt_data_end+0xf001e998>
1001e9b8:	00bfff84 	movi	r2,-2
1001e9bc:	f800283a 	ret

1001e9c0 <__lesf2>:
1001e9c0:	2004d5fa 	srli	r2,r4,23
1001e9c4:	280cd5fa 	srli	r6,r5,23
1001e9c8:	00c02034 	movhi	r3,128
1001e9cc:	18ffffc4 	addi	r3,r3,-1
1001e9d0:	10803fcc 	andi	r2,r2,255
1001e9d4:	01c03fc4 	movi	r7,255
1001e9d8:	1910703a 	and	r8,r3,r4
1001e9dc:	31803fcc 	andi	r6,r6,255
1001e9e0:	1946703a 	and	r3,r3,r5
1001e9e4:	2008d7fa 	srli	r4,r4,31
1001e9e8:	280ad7fa 	srli	r5,r5,31
1001e9ec:	11c00a26 	beq	r2,r7,1001ea18 <__lesf2+0x58>
1001e9f0:	31c01526 	beq	r6,r7,1001ea48 <__lesf2+0x88>
1001e9f4:	10000a1e 	bne	r2,zero,1001ea20 <__lesf2+0x60>
1001e9f8:	4013003a 	cmpeq	r9,r8,zero
1001e9fc:	480f883a 	mov	r7,r9
1001ea00:	30000d26 	beq	r6,zero,1001ea38 <__lesf2+0x78>
1001ea04:	29403fcc 	andi	r5,r5,255
1001ea08:	38001426 	beq	r7,zero,1001ea5c <__lesf2+0x9c>
1001ea0c:	2800081e 	bne	r5,zero,1001ea30 <__lesf2+0x70>
1001ea10:	00bfffc4 	movi	r2,-1
1001ea14:	f800283a 	ret
1001ea18:	40000c1e 	bne	r8,zero,1001ea4c <__lesf2+0x8c>
1001ea1c:	30800a26 	beq	r6,r2,1001ea48 <__lesf2+0x88>
1001ea20:	30000d1e 	bne	r6,zero,1001ea58 <__lesf2+0x98>
1001ea24:	000f883a 	mov	r7,zero
1001ea28:	183ff61e 	bne	r3,zero,1001ea04 <__alt_data_end+0xf001ea04>
1001ea2c:	203ff81e 	bne	r4,zero,1001ea10 <__alt_data_end+0xf001ea10>
1001ea30:	00800044 	movi	r2,1
1001ea34:	f800283a 	ret
1001ea38:	183ff21e 	bne	r3,zero,1001ea04 <__alt_data_end+0xf001ea04>
1001ea3c:	483ffb26 	beq	r9,zero,1001ea2c <__alt_data_end+0xf001ea2c>
1001ea40:	0005883a 	mov	r2,zero
1001ea44:	f800283a 	ret
1001ea48:	18000226 	beq	r3,zero,1001ea54 <__lesf2+0x94>
1001ea4c:	00800084 	movi	r2,2
1001ea50:	f800283a 	ret
1001ea54:	103fe826 	beq	r2,zero,1001e9f8 <__alt_data_end+0xf001e9f8>
1001ea58:	29403fcc 	andi	r5,r5,255
1001ea5c:	217ff31e 	bne	r4,r5,1001ea2c <__alt_data_end+0xf001ea2c>
1001ea60:	30bff216 	blt	r6,r2,1001ea2c <__alt_data_end+0xf001ea2c>
1001ea64:	11800216 	blt	r2,r6,1001ea70 <__lesf2+0xb0>
1001ea68:	1a3ff036 	bltu	r3,r8,1001ea2c <__alt_data_end+0xf001ea2c>
1001ea6c:	40fff42e 	bgeu	r8,r3,1001ea40 <__alt_data_end+0xf001ea40>
1001ea70:	203fe726 	beq	r4,zero,1001ea10 <__alt_data_end+0xf001ea10>
1001ea74:	003fee06 	br	1001ea30 <__alt_data_end+0xf001ea30>

1001ea78 <__adddf3>:
1001ea78:	02000434 	movhi	r8,16
1001ea7c:	423fffc4 	addi	r8,r8,-1
1001ea80:	defffb04 	addi	sp,sp,-20
1001ea84:	2a12703a 	and	r9,r5,r8
1001ea88:	2806d7fa 	srli	r3,r5,31
1001ea8c:	3a10703a 	and	r8,r7,r8
1001ea90:	3804d53a 	srli	r2,r7,20
1001ea94:	3014d77a 	srli	r10,r6,29
1001ea98:	dc000015 	stw	r16,0(sp)
1001ea9c:	481290fa 	slli	r9,r9,3
1001eaa0:	2820d53a 	srli	r16,r5,20
1001eaa4:	401090fa 	slli	r8,r8,3
1001eaa8:	200ad77a 	srli	r5,r4,29
1001eaac:	380ed7fa 	srli	r7,r7,31
1001eab0:	dc800215 	stw	r18,8(sp)
1001eab4:	dc400115 	stw	r17,4(sp)
1001eab8:	dfc00415 	stw	ra,16(sp)
1001eabc:	dcc00315 	stw	r19,12(sp)
1001eac0:	1c803fcc 	andi	r18,r3,255
1001eac4:	8401ffcc 	andi	r16,r16,2047
1001eac8:	494ab03a 	or	r5,r9,r5
1001eacc:	202290fa 	slli	r17,r4,3
1001ead0:	1081ffcc 	andi	r2,r2,2047
1001ead4:	4290b03a 	or	r8,r8,r10
1001ead8:	300c90fa 	slli	r6,r6,3
1001eadc:	91c07026 	beq	r18,r7,1001eca0 <__adddf3+0x228>
1001eae0:	8087c83a 	sub	r3,r16,r2
1001eae4:	00c0b30e 	bge	zero,r3,1001edb4 <__adddf3+0x33c>
1001eae8:	10002a1e 	bne	r2,zero,1001eb94 <__adddf3+0x11c>
1001eaec:	4184b03a 	or	r2,r8,r6
1001eaf0:	1000991e 	bne	r2,zero,1001ed58 <__adddf3+0x2e0>
1001eaf4:	888001cc 	andi	r2,r17,7
1001eaf8:	10005b26 	beq	r2,zero,1001ec68 <__adddf3+0x1f0>
1001eafc:	88c003cc 	andi	r3,r17,15
1001eb00:	00800104 	movi	r2,4
1001eb04:	18805826 	beq	r3,r2,1001ec68 <__adddf3+0x1f0>
1001eb08:	89800104 	addi	r6,r17,4
1001eb0c:	3463803a 	cmpltu	r17,r6,r17
1001eb10:	2c4b883a 	add	r5,r5,r17
1001eb14:	2880202c 	andhi	r2,r5,128
1001eb18:	9007883a 	mov	r3,r18
1001eb1c:	3023883a 	mov	r17,r6
1001eb20:	10005426 	beq	r2,zero,1001ec74 <__adddf3+0x1fc>
1001eb24:	84000044 	addi	r16,r16,1
1001eb28:	0081ffc4 	movi	r2,2047
1001eb2c:	8080c126 	beq	r16,r2,1001ee34 <__adddf3+0x3bc>
1001eb30:	013fe034 	movhi	r4,65408
1001eb34:	213fffc4 	addi	r4,r4,-1
1001eb38:	290a703a 	and	r5,r5,r4
1001eb3c:	2804977a 	slli	r2,r5,29
1001eb40:	280a927a 	slli	r5,r5,9
1001eb44:	8822d0fa 	srli	r17,r17,3
1001eb48:	8401ffcc 	andi	r16,r16,2047
1001eb4c:	2808d33a 	srli	r4,r5,12
1001eb50:	1444b03a 	or	r2,r2,r17
1001eb54:	8401ffcc 	andi	r16,r16,2047
1001eb58:	800a953a 	slli	r5,r16,20
1001eb5c:	18c03fcc 	andi	r3,r3,255
1001eb60:	04000434 	movhi	r16,16
1001eb64:	180697fa 	slli	r3,r3,31
1001eb68:	843fffc4 	addi	r16,r16,-1
1001eb6c:	2420703a 	and	r16,r4,r16
1001eb70:	8160b03a 	or	r16,r16,r5
1001eb74:	80c6b03a 	or	r3,r16,r3
1001eb78:	dfc00417 	ldw	ra,16(sp)
1001eb7c:	dcc00317 	ldw	r19,12(sp)
1001eb80:	dc800217 	ldw	r18,8(sp)
1001eb84:	dc400117 	ldw	r17,4(sp)
1001eb88:	dc000017 	ldw	r16,0(sp)
1001eb8c:	dec00504 	addi	sp,sp,20
1001eb90:	f800283a 	ret
1001eb94:	0081ffc4 	movi	r2,2047
1001eb98:	80bfd626 	beq	r16,r2,1001eaf4 <__alt_data_end+0xf001eaf4>
1001eb9c:	42002034 	orhi	r8,r8,128
1001eba0:	00800e04 	movi	r2,56
1001eba4:	10c0a616 	blt	r2,r3,1001ee40 <__adddf3+0x3c8>
1001eba8:	008007c4 	movi	r2,31
1001ebac:	10c0c916 	blt	r2,r3,1001eed4 <__adddf3+0x45c>
1001ebb0:	00800804 	movi	r2,32
1001ebb4:	10c5c83a 	sub	r2,r2,r3
1001ebb8:	408e983a 	sll	r7,r8,r2
1001ebbc:	30c8d83a 	srl	r4,r6,r3
1001ebc0:	3084983a 	sll	r2,r6,r2
1001ebc4:	40c6d83a 	srl	r3,r8,r3
1001ebc8:	390cb03a 	or	r6,r7,r4
1001ebcc:	1004c03a 	cmpne	r2,r2,zero
1001ebd0:	308cb03a 	or	r6,r6,r2
1001ebd4:	898dc83a 	sub	r6,r17,r6
1001ebd8:	89a3803a 	cmpltu	r17,r17,r6
1001ebdc:	28cbc83a 	sub	r5,r5,r3
1001ebe0:	2c4bc83a 	sub	r5,r5,r17
1001ebe4:	3023883a 	mov	r17,r6
1001ebe8:	2880202c 	andhi	r2,r5,128
1001ebec:	10006d26 	beq	r2,zero,1001eda4 <__adddf3+0x32c>
1001ebf0:	04c02034 	movhi	r19,128
1001ebf4:	9cffffc4 	addi	r19,r19,-1
1001ebf8:	2ce6703a 	and	r19,r5,r19
1001ebfc:	98007e26 	beq	r19,zero,1001edf8 <__adddf3+0x380>
1001ec00:	9809883a 	mov	r4,r19
1001ec04:	00211ac0 	call	100211ac <__clzsi2>
1001ec08:	10fffe04 	addi	r3,r2,-8
1001ec0c:	010007c4 	movi	r4,31
1001ec10:	20c07f16 	blt	r4,r3,1001ee10 <__adddf3+0x398>
1001ec14:	01400a04 	movi	r5,40
1001ec18:	2885c83a 	sub	r2,r5,r2
1001ec1c:	888ad83a 	srl	r5,r17,r2
1001ec20:	98e6983a 	sll	r19,r19,r3
1001ec24:	88e2983a 	sll	r17,r17,r3
1001ec28:	2ce6b03a 	or	r19,r5,r19
1001ec2c:	1c007c16 	blt	r3,r16,1001ee20 <__adddf3+0x3a8>
1001ec30:	1c21c83a 	sub	r16,r3,r16
1001ec34:	81400044 	addi	r5,r16,1
1001ec38:	00c007c4 	movi	r3,31
1001ec3c:	19409816 	blt	r3,r5,1001eea0 <__adddf3+0x428>
1001ec40:	1c21c83a 	sub	r16,r3,r16
1001ec44:	8c08983a 	sll	r4,r17,r16
1001ec48:	8946d83a 	srl	r3,r17,r5
1001ec4c:	9c20983a 	sll	r16,r19,r16
1001ec50:	2008c03a 	cmpne	r4,r4,zero
1001ec54:	994ad83a 	srl	r5,r19,r5
1001ec58:	1c06b03a 	or	r3,r3,r16
1001ec5c:	1922b03a 	or	r17,r3,r4
1001ec60:	0021883a 	mov	r16,zero
1001ec64:	003fa306 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001ec68:	2880202c 	andhi	r2,r5,128
1001ec6c:	9007883a 	mov	r3,r18
1001ec70:	103fac1e 	bne	r2,zero,1001eb24 <__alt_data_end+0xf001eb24>
1001ec74:	2804977a 	slli	r2,r5,29
1001ec78:	8822d0fa 	srli	r17,r17,3
1001ec7c:	0101ffc4 	movi	r4,2047
1001ec80:	280ad0fa 	srli	r5,r5,3
1001ec84:	1444b03a 	or	r2,r2,r17
1001ec88:	81002c26 	beq	r16,r4,1001ed3c <__adddf3+0x2c4>
1001ec8c:	8120703a 	and	r16,r16,r4
1001ec90:	01000434 	movhi	r4,16
1001ec94:	213fffc4 	addi	r4,r4,-1
1001ec98:	2908703a 	and	r4,r5,r4
1001ec9c:	003fad06 	br	1001eb54 <__alt_data_end+0xf001eb54>
1001eca0:	8089c83a 	sub	r4,r16,r2
1001eca4:	01006a0e 	bge	zero,r4,1001ee50 <__adddf3+0x3d8>
1001eca8:	10003326 	beq	r2,zero,1001ed78 <__adddf3+0x300>
1001ecac:	0081ffc4 	movi	r2,2047
1001ecb0:	80bf9026 	beq	r16,r2,1001eaf4 <__alt_data_end+0xf001eaf4>
1001ecb4:	42002034 	orhi	r8,r8,128
1001ecb8:	00800e04 	movi	r2,56
1001ecbc:	1100b116 	blt	r2,r4,1001ef84 <__adddf3+0x50c>
1001ecc0:	008007c4 	movi	r2,31
1001ecc4:	1100e216 	blt	r2,r4,1001f050 <__adddf3+0x5d8>
1001ecc8:	00800804 	movi	r2,32
1001eccc:	1105c83a 	sub	r2,r2,r4
1001ecd0:	4092983a 	sll	r9,r8,r2
1001ecd4:	310ed83a 	srl	r7,r6,r4
1001ecd8:	3084983a 	sll	r2,r6,r2
1001ecdc:	4110d83a 	srl	r8,r8,r4
1001ece0:	49ccb03a 	or	r6,r9,r7
1001ece4:	1004c03a 	cmpne	r2,r2,zero
1001ece8:	308cb03a 	or	r6,r6,r2
1001ecec:	344d883a 	add	r6,r6,r17
1001ecf0:	3463803a 	cmpltu	r17,r6,r17
1001ecf4:	414b883a 	add	r5,r8,r5
1001ecf8:	2c4b883a 	add	r5,r5,r17
1001ecfc:	3023883a 	mov	r17,r6
1001ed00:	2880202c 	andhi	r2,r5,128
1001ed04:	10002726 	beq	r2,zero,1001eda4 <__adddf3+0x32c>
1001ed08:	84000044 	addi	r16,r16,1
1001ed0c:	0081ffc4 	movi	r2,2047
1001ed10:	8080ae26 	beq	r16,r2,1001efcc <__adddf3+0x554>
1001ed14:	00bfe034 	movhi	r2,65408
1001ed18:	10bfffc4 	addi	r2,r2,-1
1001ed1c:	288a703a 	and	r5,r5,r2
1001ed20:	880cd07a 	srli	r6,r17,1
1001ed24:	280897fa 	slli	r4,r5,31
1001ed28:	88c0004c 	andi	r3,r17,1
1001ed2c:	30e2b03a 	or	r17,r6,r3
1001ed30:	280ad07a 	srli	r5,r5,1
1001ed34:	8922b03a 	or	r17,r17,r4
1001ed38:	003f6e06 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001ed3c:	1148b03a 	or	r4,r2,r5
1001ed40:	20003c26 	beq	r4,zero,1001ee34 <__adddf3+0x3bc>
1001ed44:	29000234 	orhi	r4,r5,8
1001ed48:	01400434 	movhi	r5,16
1001ed4c:	297fffc4 	addi	r5,r5,-1
1001ed50:	2148703a 	and	r4,r4,r5
1001ed54:	003f7f06 	br	1001eb54 <__alt_data_end+0xf001eb54>
1001ed58:	18ffffc4 	addi	r3,r3,-1
1001ed5c:	18004d1e 	bne	r3,zero,1001ee94 <__adddf3+0x41c>
1001ed60:	898dc83a 	sub	r6,r17,r6
1001ed64:	89a3803a 	cmpltu	r17,r17,r6
1001ed68:	2a0bc83a 	sub	r5,r5,r8
1001ed6c:	2c4bc83a 	sub	r5,r5,r17
1001ed70:	3023883a 	mov	r17,r6
1001ed74:	003f9c06 	br	1001ebe8 <__alt_data_end+0xf001ebe8>
1001ed78:	4184b03a 	or	r2,r8,r6
1001ed7c:	103f5d26 	beq	r2,zero,1001eaf4 <__alt_data_end+0xf001eaf4>
1001ed80:	213fffc4 	addi	r4,r4,-1
1001ed84:	203fd926 	beq	r4,zero,1001ecec <__alt_data_end+0xf001ecec>
1001ed88:	0081ffc4 	movi	r2,2047
1001ed8c:	80bfca1e 	bne	r16,r2,1001ecb8 <__alt_data_end+0xf001ecb8>
1001ed90:	003f5806 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001ed94:	10c8b03a 	or	r4,r2,r3
1001ed98:	20008b26 	beq	r4,zero,1001efc8 <__adddf3+0x550>
1001ed9c:	100b883a 	mov	r5,r2
1001eda0:	1823883a 	mov	r17,r3
1001eda4:	888001cc 	andi	r2,r17,7
1001eda8:	103f541e 	bne	r2,zero,1001eafc <__alt_data_end+0xf001eafc>
1001edac:	9007883a 	mov	r3,r18
1001edb0:	003fb006 	br	1001ec74 <__alt_data_end+0xf001ec74>
1001edb4:	1800531e 	bne	r3,zero,1001ef04 <__adddf3+0x48c>
1001edb8:	80800044 	addi	r2,r16,1
1001edbc:	1081ffcc 	andi	r2,r2,2047
1001edc0:	00c00044 	movi	r3,1
1001edc4:	1880990e 	bge	r3,r2,1001f02c <__adddf3+0x5b4>
1001edc8:	8985c83a 	sub	r2,r17,r6
1001edcc:	8887803a 	cmpltu	r3,r17,r2
1001edd0:	2a27c83a 	sub	r19,r5,r8
1001edd4:	98e7c83a 	sub	r19,r19,r3
1001edd8:	98c0202c 	andhi	r3,r19,128
1001eddc:	18006226 	beq	r3,zero,1001ef68 <__adddf3+0x4f0>
1001ede0:	3463c83a 	sub	r17,r6,r17
1001ede4:	4151c83a 	sub	r8,r8,r5
1001ede8:	344d803a 	cmpltu	r6,r6,r17
1001edec:	41a7c83a 	sub	r19,r8,r6
1001edf0:	3825883a 	mov	r18,r7
1001edf4:	983f821e 	bne	r19,zero,1001ec00 <__alt_data_end+0xf001ec00>
1001edf8:	8809883a 	mov	r4,r17
1001edfc:	00211ac0 	call	100211ac <__clzsi2>
1001ee00:	10800804 	addi	r2,r2,32
1001ee04:	10fffe04 	addi	r3,r2,-8
1001ee08:	010007c4 	movi	r4,31
1001ee0c:	20ff810e 	bge	r4,r3,1001ec14 <__alt_data_end+0xf001ec14>
1001ee10:	14fff604 	addi	r19,r2,-40
1001ee14:	8ce6983a 	sll	r19,r17,r19
1001ee18:	0023883a 	mov	r17,zero
1001ee1c:	1c3f840e 	bge	r3,r16,1001ec30 <__alt_data_end+0xf001ec30>
1001ee20:	017fe034 	movhi	r5,65408
1001ee24:	297fffc4 	addi	r5,r5,-1
1001ee28:	80e1c83a 	sub	r16,r16,r3
1001ee2c:	994a703a 	and	r5,r19,r5
1001ee30:	003f3006 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001ee34:	0009883a 	mov	r4,zero
1001ee38:	0005883a 	mov	r2,zero
1001ee3c:	003f4506 	br	1001eb54 <__alt_data_end+0xf001eb54>
1001ee40:	418cb03a 	or	r6,r8,r6
1001ee44:	300cc03a 	cmpne	r6,r6,zero
1001ee48:	0007883a 	mov	r3,zero
1001ee4c:	003f6106 	br	1001ebd4 <__alt_data_end+0xf001ebd4>
1001ee50:	2000921e 	bne	r4,zero,1001f09c <__adddf3+0x624>
1001ee54:	80800044 	addi	r2,r16,1
1001ee58:	11c1ffcc 	andi	r7,r2,2047
1001ee5c:	01000044 	movi	r4,1
1001ee60:	21c0610e 	bge	r4,r7,1001efe8 <__adddf3+0x570>
1001ee64:	0101ffc4 	movi	r4,2047
1001ee68:	1100a326 	beq	r2,r4,1001f0f8 <__adddf3+0x680>
1001ee6c:	344d883a 	add	r6,r6,r17
1001ee70:	3463803a 	cmpltu	r17,r6,r17
1001ee74:	414b883a 	add	r5,r8,r5
1001ee78:	2c4b883a 	add	r5,r5,r17
1001ee7c:	282297fa 	slli	r17,r5,31
1001ee80:	300cd07a 	srli	r6,r6,1
1001ee84:	280ad07a 	srli	r5,r5,1
1001ee88:	1021883a 	mov	r16,r2
1001ee8c:	89a2b03a 	or	r17,r17,r6
1001ee90:	003f1806 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001ee94:	0081ffc4 	movi	r2,2047
1001ee98:	80bf411e 	bne	r16,r2,1001eba0 <__alt_data_end+0xf001eba0>
1001ee9c:	003f1506 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001eea0:	80bff844 	addi	r2,r16,-31
1001eea4:	00c00804 	movi	r3,32
1001eea8:	9884d83a 	srl	r2,r19,r2
1001eeac:	28c04a26 	beq	r5,r3,1001efd8 <__adddf3+0x560>
1001eeb0:	00c00fc4 	movi	r3,63
1001eeb4:	1c21c83a 	sub	r16,r3,r16
1001eeb8:	9c26983a 	sll	r19,r19,r16
1001eebc:	9c62b03a 	or	r17,r19,r17
1001eec0:	8822c03a 	cmpne	r17,r17,zero
1001eec4:	88a2b03a 	or	r17,r17,r2
1001eec8:	000b883a 	mov	r5,zero
1001eecc:	0021883a 	mov	r16,zero
1001eed0:	003fb406 	br	1001eda4 <__alt_data_end+0xf001eda4>
1001eed4:	18bff804 	addi	r2,r3,-32
1001eed8:	01000804 	movi	r4,32
1001eedc:	4084d83a 	srl	r2,r8,r2
1001eee0:	19003f26 	beq	r3,r4,1001efe0 <__adddf3+0x568>
1001eee4:	01001004 	movi	r4,64
1001eee8:	20c7c83a 	sub	r3,r4,r3
1001eeec:	40d0983a 	sll	r8,r8,r3
1001eef0:	418cb03a 	or	r6,r8,r6
1001eef4:	300cc03a 	cmpne	r6,r6,zero
1001eef8:	308cb03a 	or	r6,r6,r2
1001eefc:	0007883a 	mov	r3,zero
1001ef00:	003f3406 	br	1001ebd4 <__alt_data_end+0xf001ebd4>
1001ef04:	80002326 	beq	r16,zero,1001ef94 <__adddf3+0x51c>
1001ef08:	0101ffc4 	movi	r4,2047
1001ef0c:	11005e26 	beq	r2,r4,1001f088 <__adddf3+0x610>
1001ef10:	00c7c83a 	sub	r3,zero,r3
1001ef14:	29402034 	orhi	r5,r5,128
1001ef18:	01000e04 	movi	r4,56
1001ef1c:	20c07216 	blt	r4,r3,1001f0e8 <__adddf3+0x670>
1001ef20:	010007c4 	movi	r4,31
1001ef24:	20c0ce16 	blt	r4,r3,1001f260 <__adddf3+0x7e8>
1001ef28:	01000804 	movi	r4,32
1001ef2c:	20c9c83a 	sub	r4,r4,r3
1001ef30:	2914983a 	sll	r10,r5,r4
1001ef34:	88d2d83a 	srl	r9,r17,r3
1001ef38:	8908983a 	sll	r4,r17,r4
1001ef3c:	28c6d83a 	srl	r3,r5,r3
1001ef40:	5262b03a 	or	r17,r10,r9
1001ef44:	2008c03a 	cmpne	r4,r4,zero
1001ef48:	8922b03a 	or	r17,r17,r4
1001ef4c:	3463c83a 	sub	r17,r6,r17
1001ef50:	40c7c83a 	sub	r3,r8,r3
1001ef54:	344d803a 	cmpltu	r6,r6,r17
1001ef58:	198bc83a 	sub	r5,r3,r6
1001ef5c:	1021883a 	mov	r16,r2
1001ef60:	3825883a 	mov	r18,r7
1001ef64:	003f2006 	br	1001ebe8 <__alt_data_end+0xf001ebe8>
1001ef68:	9886b03a 	or	r3,r19,r2
1001ef6c:	1800141e 	bne	r3,zero,1001efc0 <__adddf3+0x548>
1001ef70:	0007883a 	mov	r3,zero
1001ef74:	000b883a 	mov	r5,zero
1001ef78:	0023883a 	mov	r17,zero
1001ef7c:	0021883a 	mov	r16,zero
1001ef80:	003f3c06 	br	1001ec74 <__alt_data_end+0xf001ec74>
1001ef84:	418cb03a 	or	r6,r8,r6
1001ef88:	300cc03a 	cmpne	r6,r6,zero
1001ef8c:	0011883a 	mov	r8,zero
1001ef90:	003f5606 	br	1001ecec <__alt_data_end+0xf001ecec>
1001ef94:	2c48b03a 	or	r4,r5,r17
1001ef98:	20003b26 	beq	r4,zero,1001f088 <__adddf3+0x610>
1001ef9c:	00c6303a 	nor	r3,zero,r3
1001efa0:	1800371e 	bne	r3,zero,1001f080 <__adddf3+0x608>
1001efa4:	3463c83a 	sub	r17,r6,r17
1001efa8:	414bc83a 	sub	r5,r8,r5
1001efac:	344d803a 	cmpltu	r6,r6,r17
1001efb0:	298bc83a 	sub	r5,r5,r6
1001efb4:	1021883a 	mov	r16,r2
1001efb8:	3825883a 	mov	r18,r7
1001efbc:	003f0a06 	br	1001ebe8 <__alt_data_end+0xf001ebe8>
1001efc0:	1023883a 	mov	r17,r2
1001efc4:	003f0d06 	br	1001ebfc <__alt_data_end+0xf001ebfc>
1001efc8:	0007883a 	mov	r3,zero
1001efcc:	000b883a 	mov	r5,zero
1001efd0:	0023883a 	mov	r17,zero
1001efd4:	003f2706 	br	1001ec74 <__alt_data_end+0xf001ec74>
1001efd8:	0027883a 	mov	r19,zero
1001efdc:	003fb706 	br	1001eebc <__alt_data_end+0xf001eebc>
1001efe0:	0011883a 	mov	r8,zero
1001efe4:	003fc206 	br	1001eef0 <__alt_data_end+0xf001eef0>
1001efe8:	2c44b03a 	or	r2,r5,r17
1001efec:	8000871e 	bne	r16,zero,1001f20c <__adddf3+0x794>
1001eff0:	1000b126 	beq	r2,zero,1001f2b8 <__adddf3+0x840>
1001eff4:	4184b03a 	or	r2,r8,r6
1001eff8:	103ebe26 	beq	r2,zero,1001eaf4 <__alt_data_end+0xf001eaf4>
1001effc:	3445883a 	add	r2,r6,r17
1001f000:	1463803a 	cmpltu	r17,r2,r17
1001f004:	414b883a 	add	r5,r8,r5
1001f008:	2c4b883a 	add	r5,r5,r17
1001f00c:	28c0202c 	andhi	r3,r5,128
1001f010:	1023883a 	mov	r17,r2
1001f014:	183f6326 	beq	r3,zero,1001eda4 <__alt_data_end+0xf001eda4>
1001f018:	00bfe034 	movhi	r2,65408
1001f01c:	10bfffc4 	addi	r2,r2,-1
1001f020:	2021883a 	mov	r16,r4
1001f024:	288a703a 	and	r5,r5,r2
1001f028:	003eb206 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f02c:	2c44b03a 	or	r2,r5,r17
1001f030:	8000251e 	bne	r16,zero,1001f0c8 <__adddf3+0x650>
1001f034:	10004b1e 	bne	r2,zero,1001f164 <__adddf3+0x6ec>
1001f038:	4184b03a 	or	r2,r8,r6
1001f03c:	103fe226 	beq	r2,zero,1001efc8 <__alt_data_end+0xf001efc8>
1001f040:	400b883a 	mov	r5,r8
1001f044:	3023883a 	mov	r17,r6
1001f048:	3825883a 	mov	r18,r7
1001f04c:	003ea906 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f050:	20bff804 	addi	r2,r4,-32
1001f054:	01c00804 	movi	r7,32
1001f058:	4084d83a 	srl	r2,r8,r2
1001f05c:	21c07e26 	beq	r4,r7,1001f258 <__adddf3+0x7e0>
1001f060:	01c01004 	movi	r7,64
1001f064:	3909c83a 	sub	r4,r7,r4
1001f068:	4110983a 	sll	r8,r8,r4
1001f06c:	418cb03a 	or	r6,r8,r6
1001f070:	300cc03a 	cmpne	r6,r6,zero
1001f074:	308cb03a 	or	r6,r6,r2
1001f078:	0011883a 	mov	r8,zero
1001f07c:	003f1b06 	br	1001ecec <__alt_data_end+0xf001ecec>
1001f080:	0101ffc4 	movi	r4,2047
1001f084:	113fa41e 	bne	r2,r4,1001ef18 <__alt_data_end+0xf001ef18>
1001f088:	400b883a 	mov	r5,r8
1001f08c:	3023883a 	mov	r17,r6
1001f090:	1021883a 	mov	r16,r2
1001f094:	3825883a 	mov	r18,r7
1001f098:	003e9606 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f09c:	80001a1e 	bne	r16,zero,1001f108 <__adddf3+0x690>
1001f0a0:	2c4eb03a 	or	r7,r5,r17
1001f0a4:	38005526 	beq	r7,zero,1001f1fc <__adddf3+0x784>
1001f0a8:	0108303a 	nor	r4,zero,r4
1001f0ac:	2000511e 	bne	r4,zero,1001f1f4 <__adddf3+0x77c>
1001f0b0:	89a3883a 	add	r17,r17,r6
1001f0b4:	414b883a 	add	r5,r8,r5
1001f0b8:	898d803a 	cmpltu	r6,r17,r6
1001f0bc:	298b883a 	add	r5,r5,r6
1001f0c0:	1021883a 	mov	r16,r2
1001f0c4:	003f0e06 	br	1001ed00 <__alt_data_end+0xf001ed00>
1001f0c8:	1000341e 	bne	r2,zero,1001f19c <__adddf3+0x724>
1001f0cc:	4184b03a 	or	r2,r8,r6
1001f0d0:	10006f26 	beq	r2,zero,1001f290 <__adddf3+0x818>
1001f0d4:	400b883a 	mov	r5,r8
1001f0d8:	3023883a 	mov	r17,r6
1001f0dc:	3825883a 	mov	r18,r7
1001f0e0:	0401ffc4 	movi	r16,2047
1001f0e4:	003e8306 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f0e8:	2c62b03a 	or	r17,r5,r17
1001f0ec:	8822c03a 	cmpne	r17,r17,zero
1001f0f0:	0007883a 	mov	r3,zero
1001f0f4:	003f9506 	br	1001ef4c <__alt_data_end+0xf001ef4c>
1001f0f8:	1021883a 	mov	r16,r2
1001f0fc:	000b883a 	mov	r5,zero
1001f100:	0023883a 	mov	r17,zero
1001f104:	003edb06 	br	1001ec74 <__alt_data_end+0xf001ec74>
1001f108:	01c1ffc4 	movi	r7,2047
1001f10c:	11c03b26 	beq	r2,r7,1001f1fc <__adddf3+0x784>
1001f110:	0109c83a 	sub	r4,zero,r4
1001f114:	29402034 	orhi	r5,r5,128
1001f118:	01c00e04 	movi	r7,56
1001f11c:	39006216 	blt	r7,r4,1001f2a8 <__adddf3+0x830>
1001f120:	01c007c4 	movi	r7,31
1001f124:	39006b16 	blt	r7,r4,1001f2d4 <__adddf3+0x85c>
1001f128:	01c00804 	movi	r7,32
1001f12c:	390fc83a 	sub	r7,r7,r4
1001f130:	29d4983a 	sll	r10,r5,r7
1001f134:	8912d83a 	srl	r9,r17,r4
1001f138:	89ce983a 	sll	r7,r17,r7
1001f13c:	2908d83a 	srl	r4,r5,r4
1001f140:	5262b03a 	or	r17,r10,r9
1001f144:	380ac03a 	cmpne	r5,r7,zero
1001f148:	8962b03a 	or	r17,r17,r5
1001f14c:	89a3883a 	add	r17,r17,r6
1001f150:	2211883a 	add	r8,r4,r8
1001f154:	898d803a 	cmpltu	r6,r17,r6
1001f158:	418b883a 	add	r5,r8,r6
1001f15c:	1021883a 	mov	r16,r2
1001f160:	003ee706 	br	1001ed00 <__alt_data_end+0xf001ed00>
1001f164:	4184b03a 	or	r2,r8,r6
1001f168:	103e6226 	beq	r2,zero,1001eaf4 <__alt_data_end+0xf001eaf4>
1001f16c:	8987c83a 	sub	r3,r17,r6
1001f170:	88c9803a 	cmpltu	r4,r17,r3
1001f174:	2a05c83a 	sub	r2,r5,r8
1001f178:	1105c83a 	sub	r2,r2,r4
1001f17c:	1100202c 	andhi	r4,r2,128
1001f180:	203f0426 	beq	r4,zero,1001ed94 <__alt_data_end+0xf001ed94>
1001f184:	3463c83a 	sub	r17,r6,r17
1001f188:	414bc83a 	sub	r5,r8,r5
1001f18c:	344d803a 	cmpltu	r6,r6,r17
1001f190:	298bc83a 	sub	r5,r5,r6
1001f194:	3825883a 	mov	r18,r7
1001f198:	003e5606 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f19c:	4184b03a 	or	r2,r8,r6
1001f1a0:	10002b26 	beq	r2,zero,1001f250 <__adddf3+0x7d8>
1001f1a4:	2804d0fa 	srli	r2,r5,3
1001f1a8:	8822d0fa 	srli	r17,r17,3
1001f1ac:	280a977a 	slli	r5,r5,29
1001f1b0:	10c0022c 	andhi	r3,r2,8
1001f1b4:	2c62b03a 	or	r17,r5,r17
1001f1b8:	18000826 	beq	r3,zero,1001f1dc <__adddf3+0x764>
1001f1bc:	4008d0fa 	srli	r4,r8,3
1001f1c0:	20c0022c 	andhi	r3,r4,8
1001f1c4:	1800051e 	bne	r3,zero,1001f1dc <__adddf3+0x764>
1001f1c8:	300cd0fa 	srli	r6,r6,3
1001f1cc:	4010977a 	slli	r8,r8,29
1001f1d0:	2005883a 	mov	r2,r4
1001f1d4:	3825883a 	mov	r18,r7
1001f1d8:	41a2b03a 	or	r17,r8,r6
1001f1dc:	880ad77a 	srli	r5,r17,29
1001f1e0:	100490fa 	slli	r2,r2,3
1001f1e4:	882290fa 	slli	r17,r17,3
1001f1e8:	0401ffc4 	movi	r16,2047
1001f1ec:	288ab03a 	or	r5,r5,r2
1001f1f0:	003e4006 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f1f4:	01c1ffc4 	movi	r7,2047
1001f1f8:	11ffc71e 	bne	r2,r7,1001f118 <__alt_data_end+0xf001f118>
1001f1fc:	400b883a 	mov	r5,r8
1001f200:	3023883a 	mov	r17,r6
1001f204:	1021883a 	mov	r16,r2
1001f208:	003e3a06 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f20c:	10002d26 	beq	r2,zero,1001f2c4 <__adddf3+0x84c>
1001f210:	4184b03a 	or	r2,r8,r6
1001f214:	10000e26 	beq	r2,zero,1001f250 <__adddf3+0x7d8>
1001f218:	2804d0fa 	srli	r2,r5,3
1001f21c:	8822d0fa 	srli	r17,r17,3
1001f220:	280a977a 	slli	r5,r5,29
1001f224:	10c0022c 	andhi	r3,r2,8
1001f228:	2c62b03a 	or	r17,r5,r17
1001f22c:	183feb26 	beq	r3,zero,1001f1dc <__alt_data_end+0xf001f1dc>
1001f230:	4008d0fa 	srli	r4,r8,3
1001f234:	20c0022c 	andhi	r3,r4,8
1001f238:	183fe81e 	bne	r3,zero,1001f1dc <__alt_data_end+0xf001f1dc>
1001f23c:	300cd0fa 	srli	r6,r6,3
1001f240:	4010977a 	slli	r8,r8,29
1001f244:	2005883a 	mov	r2,r4
1001f248:	41a2b03a 	or	r17,r8,r6
1001f24c:	003fe306 	br	1001f1dc <__alt_data_end+0xf001f1dc>
1001f250:	0401ffc4 	movi	r16,2047
1001f254:	003e2706 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f258:	0011883a 	mov	r8,zero
1001f25c:	003f8306 	br	1001f06c <__alt_data_end+0xf001f06c>
1001f260:	193ff804 	addi	r4,r3,-32
1001f264:	02400804 	movi	r9,32
1001f268:	2908d83a 	srl	r4,r5,r4
1001f26c:	1a402526 	beq	r3,r9,1001f304 <__adddf3+0x88c>
1001f270:	02401004 	movi	r9,64
1001f274:	48c7c83a 	sub	r3,r9,r3
1001f278:	28ca983a 	sll	r5,r5,r3
1001f27c:	2c62b03a 	or	r17,r5,r17
1001f280:	8822c03a 	cmpne	r17,r17,zero
1001f284:	8922b03a 	or	r17,r17,r4
1001f288:	0007883a 	mov	r3,zero
1001f28c:	003f2f06 	br	1001ef4c <__alt_data_end+0xf001ef4c>
1001f290:	01402034 	movhi	r5,128
1001f294:	0007883a 	mov	r3,zero
1001f298:	297fffc4 	addi	r5,r5,-1
1001f29c:	047ffe04 	movi	r17,-8
1001f2a0:	0401ffc4 	movi	r16,2047
1001f2a4:	003e7306 	br	1001ec74 <__alt_data_end+0xf001ec74>
1001f2a8:	2c62b03a 	or	r17,r5,r17
1001f2ac:	8822c03a 	cmpne	r17,r17,zero
1001f2b0:	0009883a 	mov	r4,zero
1001f2b4:	003fa506 	br	1001f14c <__alt_data_end+0xf001f14c>
1001f2b8:	400b883a 	mov	r5,r8
1001f2bc:	3023883a 	mov	r17,r6
1001f2c0:	003e0c06 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f2c4:	400b883a 	mov	r5,r8
1001f2c8:	3023883a 	mov	r17,r6
1001f2cc:	0401ffc4 	movi	r16,2047
1001f2d0:	003e0806 	br	1001eaf4 <__alt_data_end+0xf001eaf4>
1001f2d4:	21fff804 	addi	r7,r4,-32
1001f2d8:	02400804 	movi	r9,32
1001f2dc:	29ced83a 	srl	r7,r5,r7
1001f2e0:	22400a26 	beq	r4,r9,1001f30c <__adddf3+0x894>
1001f2e4:	02401004 	movi	r9,64
1001f2e8:	4909c83a 	sub	r4,r9,r4
1001f2ec:	290a983a 	sll	r5,r5,r4
1001f2f0:	2c62b03a 	or	r17,r5,r17
1001f2f4:	8822c03a 	cmpne	r17,r17,zero
1001f2f8:	89e2b03a 	or	r17,r17,r7
1001f2fc:	0009883a 	mov	r4,zero
1001f300:	003f9206 	br	1001f14c <__alt_data_end+0xf001f14c>
1001f304:	000b883a 	mov	r5,zero
1001f308:	003fdc06 	br	1001f27c <__alt_data_end+0xf001f27c>
1001f30c:	000b883a 	mov	r5,zero
1001f310:	003ff706 	br	1001f2f0 <__alt_data_end+0xf001f2f0>

1001f314 <__divdf3>:
1001f314:	defff204 	addi	sp,sp,-56
1001f318:	dd000815 	stw	r20,32(sp)
1001f31c:	2828d53a 	srli	r20,r5,20
1001f320:	dd800a15 	stw	r22,40(sp)
1001f324:	282cd7fa 	srli	r22,r5,31
1001f328:	dc000415 	stw	r16,16(sp)
1001f32c:	04000434 	movhi	r16,16
1001f330:	df000c15 	stw	fp,48(sp)
1001f334:	dcc00715 	stw	r19,28(sp)
1001f338:	dc800615 	stw	r18,24(sp)
1001f33c:	dc400515 	stw	r17,20(sp)
1001f340:	843fffc4 	addi	r16,r16,-1
1001f344:	dfc00d15 	stw	ra,52(sp)
1001f348:	ddc00b15 	stw	r23,44(sp)
1001f34c:	dd400915 	stw	r21,36(sp)
1001f350:	a501ffcc 	andi	r20,r20,2047
1001f354:	2025883a 	mov	r18,r4
1001f358:	2027883a 	mov	r19,r4
1001f35c:	2c22703a 	and	r17,r5,r16
1001f360:	b7003fcc 	andi	fp,r22,255
1001f364:	a0005e26 	beq	r20,zero,1001f4e0 <__divdf3+0x1cc>
1001f368:	0081ffc4 	movi	r2,2047
1001f36c:	a0803526 	beq	r20,r2,1001f444 <__divdf3+0x130>
1001f370:	8c000434 	orhi	r16,r17,16
1001f374:	2004d77a 	srli	r2,r4,29
1001f378:	802090fa 	slli	r16,r16,3
1001f37c:	202690fa 	slli	r19,r4,3
1001f380:	a53f0044 	addi	r20,r20,-1023
1001f384:	80a2b03a 	or	r17,r16,r2
1001f388:	0025883a 	mov	r18,zero
1001f38c:	0011883a 	mov	r8,zero
1001f390:	380ad53a 	srli	r5,r7,20
1001f394:	382ed7fa 	srli	r23,r7,31
1001f398:	04000434 	movhi	r16,16
1001f39c:	843fffc4 	addi	r16,r16,-1
1001f3a0:	2941ffcc 	andi	r5,r5,2047
1001f3a4:	302b883a 	mov	r21,r6
1001f3a8:	3c20703a 	and	r16,r7,r16
1001f3ac:	ba403fcc 	andi	r9,r23,255
1001f3b0:	28006726 	beq	r5,zero,1001f550 <__divdf3+0x23c>
1001f3b4:	0081ffc4 	movi	r2,2047
1001f3b8:	28805f26 	beq	r5,r2,1001f538 <__divdf3+0x224>
1001f3bc:	84000434 	orhi	r16,r16,16
1001f3c0:	3004d77a 	srli	r2,r6,29
1001f3c4:	802090fa 	slli	r16,r16,3
1001f3c8:	302a90fa 	slli	r21,r6,3
1001f3cc:	297f0044 	addi	r5,r5,-1023
1001f3d0:	80a0b03a 	or	r16,r16,r2
1001f3d4:	000f883a 	mov	r7,zero
1001f3d8:	3c86b03a 	or	r3,r7,r18
1001f3dc:	180690ba 	slli	r3,r3,2
1001f3e0:	008400b4 	movhi	r2,4098
1001f3e4:	10bd0104 	addi	r2,r2,-3068
1001f3e8:	1887883a 	add	r3,r3,r2
1001f3ec:	18c00017 	ldw	r3,0(r3)
1001f3f0:	b5c8f03a 	xor	r4,r22,r23
1001f3f4:	200d883a 	mov	r6,r4
1001f3f8:	24803fcc 	andi	r18,r4,255
1001f3fc:	a169c83a 	sub	r20,r20,r5
1001f400:	1800683a 	jmp	r3
1001f404:	1001f64c 	andi	zero,r2,2009
1001f408:	1001f47c 	xorhi	zero,r2,2001
1001f40c:	1001f610 	cmplti	zero,r2,2008
1001f410:	1001f460 	cmpeqi	zero,r2,2001
1001f414:	1001f610 	cmplti	zero,r2,2008
1001f418:	1001f5e4 	muli	zero,r2,2007
1001f41c:	1001f610 	cmplti	zero,r2,2008
1001f420:	1001f460 	cmpeqi	zero,r2,2001
1001f424:	1001f47c 	xorhi	zero,r2,2001
1001f428:	1001f47c 	xorhi	zero,r2,2001
1001f42c:	1001f5e4 	muli	zero,r2,2007
1001f430:	1001f460 	cmpeqi	zero,r2,2001
1001f434:	1001f470 	cmpltui	zero,r2,2001
1001f438:	1001f470 	cmpltui	zero,r2,2001
1001f43c:	1001f470 	cmpltui	zero,r2,2001
1001f440:	1001f620 	cmpeqi	zero,r2,2008
1001f444:	8904b03a 	or	r2,r17,r4
1001f448:	1000631e 	bne	r2,zero,1001f5d8 <__divdf3+0x2c4>
1001f44c:	04800204 	movi	r18,8
1001f450:	0023883a 	mov	r17,zero
1001f454:	0027883a 	mov	r19,zero
1001f458:	02000084 	movi	r8,2
1001f45c:	003fcc06 	br	1001f390 <__alt_data_end+0xf001f390>
1001f460:	8023883a 	mov	r17,r16
1001f464:	a827883a 	mov	r19,r21
1001f468:	4839883a 	mov	fp,r9
1001f46c:	3811883a 	mov	r8,r7
1001f470:	00800084 	movi	r2,2
1001f474:	40812a1e 	bne	r8,r2,1001f920 <__divdf3+0x60c>
1001f478:	e025883a 	mov	r18,fp
1001f47c:	9180004c 	andi	r6,r18,1
1001f480:	0101ffc4 	movi	r4,2047
1001f484:	000b883a 	mov	r5,zero
1001f488:	0027883a 	mov	r19,zero
1001f48c:	2008953a 	slli	r4,r4,20
1001f490:	30c03fcc 	andi	r3,r6,255
1001f494:	04000434 	movhi	r16,16
1001f498:	180697fa 	slli	r3,r3,31
1001f49c:	843fffc4 	addi	r16,r16,-1
1001f4a0:	2c20703a 	and	r16,r5,r16
1001f4a4:	8120b03a 	or	r16,r16,r4
1001f4a8:	80c6b03a 	or	r3,r16,r3
1001f4ac:	9805883a 	mov	r2,r19
1001f4b0:	dfc00d17 	ldw	ra,52(sp)
1001f4b4:	df000c17 	ldw	fp,48(sp)
1001f4b8:	ddc00b17 	ldw	r23,44(sp)
1001f4bc:	dd800a17 	ldw	r22,40(sp)
1001f4c0:	dd400917 	ldw	r21,36(sp)
1001f4c4:	dd000817 	ldw	r20,32(sp)
1001f4c8:	dcc00717 	ldw	r19,28(sp)
1001f4cc:	dc800617 	ldw	r18,24(sp)
1001f4d0:	dc400517 	ldw	r17,20(sp)
1001f4d4:	dc000417 	ldw	r16,16(sp)
1001f4d8:	dec00e04 	addi	sp,sp,56
1001f4dc:	f800283a 	ret
1001f4e0:	8904b03a 	or	r2,r17,r4
1001f4e4:	10003726 	beq	r2,zero,1001f5c4 <__divdf3+0x2b0>
1001f4e8:	88011c26 	beq	r17,zero,1001f95c <__divdf3+0x648>
1001f4ec:	8809883a 	mov	r4,r17
1001f4f0:	d9800315 	stw	r6,12(sp)
1001f4f4:	d9c00115 	stw	r7,4(sp)
1001f4f8:	00211ac0 	call	100211ac <__clzsi2>
1001f4fc:	d9800317 	ldw	r6,12(sp)
1001f500:	d9c00117 	ldw	r7,4(sp)
1001f504:	1007883a 	mov	r3,r2
1001f508:	01000a04 	movi	r4,40
1001f50c:	1cfffe04 	addi	r19,r3,-8
1001f510:	20c9c83a 	sub	r4,r4,r3
1001f514:	8cca983a 	sll	r5,r17,r19
1001f518:	9108d83a 	srl	r4,r18,r4
1001f51c:	94e6983a 	sll	r19,r18,r19
1001f520:	2162b03a 	or	r17,r4,r5
1001f524:	053f0344 	movi	r20,-1011
1001f528:	a0e9c83a 	sub	r20,r20,r3
1001f52c:	0025883a 	mov	r18,zero
1001f530:	0011883a 	mov	r8,zero
1001f534:	003f9606 	br	1001f390 <__alt_data_end+0xf001f390>
1001f538:	8184b03a 	or	r2,r16,r6
1001f53c:	10001f1e 	bne	r2,zero,1001f5bc <__divdf3+0x2a8>
1001f540:	0021883a 	mov	r16,zero
1001f544:	002b883a 	mov	r21,zero
1001f548:	01c00084 	movi	r7,2
1001f54c:	003fa206 	br	1001f3d8 <__alt_data_end+0xf001f3d8>
1001f550:	8184b03a 	or	r2,r16,r6
1001f554:	10001526 	beq	r2,zero,1001f5ac <__divdf3+0x298>
1001f558:	80010c26 	beq	r16,zero,1001f98c <__divdf3+0x678>
1001f55c:	8009883a 	mov	r4,r16
1001f560:	d9800315 	stw	r6,12(sp)
1001f564:	da000215 	stw	r8,8(sp)
1001f568:	da400015 	stw	r9,0(sp)
1001f56c:	00211ac0 	call	100211ac <__clzsi2>
1001f570:	d9800317 	ldw	r6,12(sp)
1001f574:	da000217 	ldw	r8,8(sp)
1001f578:	da400017 	ldw	r9,0(sp)
1001f57c:	1007883a 	mov	r3,r2
1001f580:	01000a04 	movi	r4,40
1001f584:	1d7ffe04 	addi	r21,r3,-8
1001f588:	20c9c83a 	sub	r4,r4,r3
1001f58c:	8560983a 	sll	r16,r16,r21
1001f590:	3108d83a 	srl	r4,r6,r4
1001f594:	356a983a 	sll	r21,r6,r21
1001f598:	2420b03a 	or	r16,r4,r16
1001f59c:	017f0344 	movi	r5,-1011
1001f5a0:	28cbc83a 	sub	r5,r5,r3
1001f5a4:	000f883a 	mov	r7,zero
1001f5a8:	003f8b06 	br	1001f3d8 <__alt_data_end+0xf001f3d8>
1001f5ac:	0021883a 	mov	r16,zero
1001f5b0:	002b883a 	mov	r21,zero
1001f5b4:	01c00044 	movi	r7,1
1001f5b8:	003f8706 	br	1001f3d8 <__alt_data_end+0xf001f3d8>
1001f5bc:	01c000c4 	movi	r7,3
1001f5c0:	003f8506 	br	1001f3d8 <__alt_data_end+0xf001f3d8>
1001f5c4:	04800104 	movi	r18,4
1001f5c8:	0023883a 	mov	r17,zero
1001f5cc:	0027883a 	mov	r19,zero
1001f5d0:	02000044 	movi	r8,1
1001f5d4:	003f6e06 	br	1001f390 <__alt_data_end+0xf001f390>
1001f5d8:	04800304 	movi	r18,12
1001f5dc:	020000c4 	movi	r8,3
1001f5e0:	003f6b06 	br	1001f390 <__alt_data_end+0xf001f390>
1001f5e4:	01400434 	movhi	r5,16
1001f5e8:	000d883a 	mov	r6,zero
1001f5ec:	297fffc4 	addi	r5,r5,-1
1001f5f0:	04ffffc4 	movi	r19,-1
1001f5f4:	0101ffc4 	movi	r4,2047
1001f5f8:	003fa406 	br	1001f48c <__alt_data_end+0xf001f48c>
1001f5fc:	043f0084 	movi	r16,-1022
1001f600:	8521c83a 	sub	r16,r16,r20
1001f604:	00800e04 	movi	r2,56
1001f608:	1401200e 	bge	r2,r16,1001fa8c <__divdf3+0x778>
1001f60c:	9180004c 	andi	r6,r18,1
1001f610:	0009883a 	mov	r4,zero
1001f614:	000b883a 	mov	r5,zero
1001f618:	0027883a 	mov	r19,zero
1001f61c:	003f9b06 	br	1001f48c <__alt_data_end+0xf001f48c>
1001f620:	8880022c 	andhi	r2,r17,8
1001f624:	1000c726 	beq	r2,zero,1001f944 <__divdf3+0x630>
1001f628:	8080022c 	andhi	r2,r16,8
1001f62c:	1000c51e 	bne	r2,zero,1001f944 <__divdf3+0x630>
1001f630:	00800434 	movhi	r2,16
1001f634:	81400234 	orhi	r5,r16,8
1001f638:	10bfffc4 	addi	r2,r2,-1
1001f63c:	b80d883a 	mov	r6,r23
1001f640:	288a703a 	and	r5,r5,r2
1001f644:	a827883a 	mov	r19,r21
1001f648:	003fea06 	br	1001f5f4 <__alt_data_end+0xf001f5f4>
1001f64c:	8440ea36 	bltu	r16,r17,1001f9f8 <__divdf3+0x6e4>
1001f650:	8c00e826 	beq	r17,r16,1001f9f4 <__divdf3+0x6e0>
1001f654:	a53fffc4 	addi	r20,r20,-1
1001f658:	882d883a 	mov	r22,r17
1001f65c:	000d883a 	mov	r6,zero
1001f660:	a804d63a 	srli	r2,r21,24
1001f664:	8020923a 	slli	r16,r16,8
1001f668:	b009883a 	mov	r4,r22
1001f66c:	d9800315 	stw	r6,12(sp)
1001f670:	1420b03a 	or	r16,r2,r16
1001f674:	802ed43a 	srli	r23,r16,16
1001f678:	873fffcc 	andi	fp,r16,65535
1001f67c:	a82a923a 	slli	r21,r21,8
1001f680:	b80b883a 	mov	r5,r23
1001f684:	000c6e00 	call	1000c6e0 <__udivsi3>
1001f688:	b009883a 	mov	r4,r22
1001f68c:	b80b883a 	mov	r5,r23
1001f690:	1023883a 	mov	r17,r2
1001f694:	000c6e80 	call	1000c6e8 <__umodsi3>
1001f698:	1004943a 	slli	r2,r2,16
1001f69c:	9808d43a 	srli	r4,r19,16
1001f6a0:	8f2d383a 	mul	r22,r17,fp
1001f6a4:	d9800317 	ldw	r6,12(sp)
1001f6a8:	1106b03a 	or	r3,r2,r4
1001f6ac:	1d80062e 	bgeu	r3,r22,1001f6c8 <__divdf3+0x3b4>
1001f6b0:	1c07883a 	add	r3,r3,r16
1001f6b4:	88bfffc4 	addi	r2,r17,-1
1001f6b8:	1c00dc36 	bltu	r3,r16,1001fa2c <__divdf3+0x718>
1001f6bc:	1d80db2e 	bgeu	r3,r22,1001fa2c <__divdf3+0x718>
1001f6c0:	8c7fff84 	addi	r17,r17,-2
1001f6c4:	1c07883a 	add	r3,r3,r16
1001f6c8:	1dadc83a 	sub	r22,r3,r22
1001f6cc:	b009883a 	mov	r4,r22
1001f6d0:	b80b883a 	mov	r5,r23
1001f6d4:	d9800315 	stw	r6,12(sp)
1001f6d8:	000c6e00 	call	1000c6e0 <__udivsi3>
1001f6dc:	b009883a 	mov	r4,r22
1001f6e0:	b80b883a 	mov	r5,r23
1001f6e4:	d8800015 	stw	r2,0(sp)
1001f6e8:	000c6e80 	call	1000c6e8 <__umodsi3>
1001f6ec:	da400017 	ldw	r9,0(sp)
1001f6f0:	1004943a 	slli	r2,r2,16
1001f6f4:	9cffffcc 	andi	r19,r19,65535
1001f6f8:	4f07383a 	mul	r3,r9,fp
1001f6fc:	14c8b03a 	or	r4,r2,r19
1001f700:	d9800317 	ldw	r6,12(sp)
1001f704:	20c0062e 	bgeu	r4,r3,1001f720 <__divdf3+0x40c>
1001f708:	2409883a 	add	r4,r4,r16
1001f70c:	48bfffc4 	addi	r2,r9,-1
1001f710:	2400c436 	bltu	r4,r16,1001fa24 <__divdf3+0x710>
1001f714:	20c0c32e 	bgeu	r4,r3,1001fa24 <__divdf3+0x710>
1001f718:	4a7fff84 	addi	r9,r9,-2
1001f71c:	2409883a 	add	r4,r4,r16
1001f720:	8822943a 	slli	r17,r17,16
1001f724:	a80ed43a 	srli	r7,r21,16
1001f728:	aa3fffcc 	andi	r8,r21,65535
1001f72c:	4c62b03a 	or	r17,r9,r17
1001f730:	8816d43a 	srli	r11,r17,16
1001f734:	897fffcc 	andi	r5,r17,65535
1001f738:	2a15383a 	mul	r10,r5,r8
1001f73c:	5a19383a 	mul	r12,r11,r8
1001f740:	29cb383a 	mul	r5,r5,r7
1001f744:	5012d43a 	srli	r9,r10,16
1001f748:	20c5c83a 	sub	r2,r4,r3
1001f74c:	614b883a 	add	r5,r12,r5
1001f750:	2a4b883a 	add	r5,r5,r9
1001f754:	59c7383a 	mul	r3,r11,r7
1001f758:	2b00022e 	bgeu	r5,r12,1001f764 <__divdf3+0x450>
1001f75c:	01000074 	movhi	r4,1
1001f760:	1907883a 	add	r3,r3,r4
1001f764:	2808d43a 	srli	r4,r5,16
1001f768:	280a943a 	slli	r5,r5,16
1001f76c:	54ffffcc 	andi	r19,r10,65535
1001f770:	1907883a 	add	r3,r3,r4
1001f774:	2ccb883a 	add	r5,r5,r19
1001f778:	10c09336 	bltu	r2,r3,1001f9c8 <__divdf3+0x6b4>
1001f77c:	10c0ad26 	beq	r2,r3,1001fa34 <__divdf3+0x720>
1001f780:	10c7c83a 	sub	r3,r2,r3
1001f784:	3167c83a 	sub	r19,r6,r5
1001f788:	34ed803a 	cmpltu	r22,r6,r19
1001f78c:	1dadc83a 	sub	r22,r3,r22
1001f790:	b400b226 	beq	r22,r16,1001fa5c <__divdf3+0x748>
1001f794:	b009883a 	mov	r4,r22
1001f798:	b80b883a 	mov	r5,r23
1001f79c:	d9c00115 	stw	r7,4(sp)
1001f7a0:	da000215 	stw	r8,8(sp)
1001f7a4:	000c6e00 	call	1000c6e0 <__udivsi3>
1001f7a8:	b009883a 	mov	r4,r22
1001f7ac:	b80b883a 	mov	r5,r23
1001f7b0:	d8800315 	stw	r2,12(sp)
1001f7b4:	000c6e80 	call	1000c6e8 <__umodsi3>
1001f7b8:	d9800317 	ldw	r6,12(sp)
1001f7bc:	1004943a 	slli	r2,r2,16
1001f7c0:	9808d43a 	srli	r4,r19,16
1001f7c4:	372d383a 	mul	r22,r6,fp
1001f7c8:	d9c00117 	ldw	r7,4(sp)
1001f7cc:	1106b03a 	or	r3,r2,r4
1001f7d0:	da000217 	ldw	r8,8(sp)
1001f7d4:	1d80062e 	bgeu	r3,r22,1001f7f0 <__divdf3+0x4dc>
1001f7d8:	1c07883a 	add	r3,r3,r16
1001f7dc:	30bfffc4 	addi	r2,r6,-1
1001f7e0:	1c00a036 	bltu	r3,r16,1001fa64 <__divdf3+0x750>
1001f7e4:	1d809f2e 	bgeu	r3,r22,1001fa64 <__divdf3+0x750>
1001f7e8:	31bfff84 	addi	r6,r6,-2
1001f7ec:	1c07883a 	add	r3,r3,r16
1001f7f0:	1dadc83a 	sub	r22,r3,r22
1001f7f4:	b009883a 	mov	r4,r22
1001f7f8:	b80b883a 	mov	r5,r23
1001f7fc:	d9800315 	stw	r6,12(sp)
1001f800:	d9c00115 	stw	r7,4(sp)
1001f804:	da000215 	stw	r8,8(sp)
1001f808:	000c6e00 	call	1000c6e0 <__udivsi3>
1001f80c:	b009883a 	mov	r4,r22
1001f810:	b80b883a 	mov	r5,r23
1001f814:	d8800015 	stw	r2,0(sp)
1001f818:	000c6e80 	call	1000c6e8 <__umodsi3>
1001f81c:	da400017 	ldw	r9,0(sp)
1001f820:	1004943a 	slli	r2,r2,16
1001f824:	993fffcc 	andi	r4,r19,65535
1001f828:	4f39383a 	mul	fp,r9,fp
1001f82c:	1106b03a 	or	r3,r2,r4
1001f830:	d9800317 	ldw	r6,12(sp)
1001f834:	d9c00117 	ldw	r7,4(sp)
1001f838:	da000217 	ldw	r8,8(sp)
1001f83c:	1f00062e 	bgeu	r3,fp,1001f858 <__divdf3+0x544>
1001f840:	1c07883a 	add	r3,r3,r16
1001f844:	48bfffc4 	addi	r2,r9,-1
1001f848:	1c008836 	bltu	r3,r16,1001fa6c <__divdf3+0x758>
1001f84c:	1f00872e 	bgeu	r3,fp,1001fa6c <__divdf3+0x758>
1001f850:	4a7fff84 	addi	r9,r9,-2
1001f854:	1c07883a 	add	r3,r3,r16
1001f858:	3008943a 	slli	r4,r6,16
1001f85c:	1f07c83a 	sub	r3,r3,fp
1001f860:	4926b03a 	or	r19,r9,r4
1001f864:	993fffcc 	andi	r4,r19,65535
1001f868:	980cd43a 	srli	r6,r19,16
1001f86c:	220b383a 	mul	r5,r4,r8
1001f870:	21c5383a 	mul	r2,r4,r7
1001f874:	3211383a 	mul	r8,r6,r8
1001f878:	2808d43a 	srli	r4,r5,16
1001f87c:	31cf383a 	mul	r7,r6,r7
1001f880:	4085883a 	add	r2,r8,r2
1001f884:	1105883a 	add	r2,r2,r4
1001f888:	1200022e 	bgeu	r2,r8,1001f894 <__divdf3+0x580>
1001f88c:	01000074 	movhi	r4,1
1001f890:	390f883a 	add	r7,r7,r4
1001f894:	1008d43a 	srli	r4,r2,16
1001f898:	1004943a 	slli	r2,r2,16
1001f89c:	297fffcc 	andi	r5,r5,65535
1001f8a0:	390f883a 	add	r7,r7,r4
1001f8a4:	1145883a 	add	r2,r2,r5
1001f8a8:	19c06536 	bltu	r3,r7,1001fa40 <__divdf3+0x72c>
1001f8ac:	19c09f26 	beq	r3,r7,1001fb2c <__divdf3+0x818>
1001f8b0:	9cc00054 	ori	r19,r19,1
1001f8b4:	a100ffc4 	addi	r4,r20,1023
1001f8b8:	013f500e 	bge	zero,r4,1001f5fc <__alt_data_end+0xf001f5fc>
1001f8bc:	988001cc 	andi	r2,r19,7
1001f8c0:	10000726 	beq	r2,zero,1001f8e0 <__divdf3+0x5cc>
1001f8c4:	98c003cc 	andi	r3,r19,15
1001f8c8:	00800104 	movi	r2,4
1001f8cc:	18800426 	beq	r3,r2,1001f8e0 <__divdf3+0x5cc>
1001f8d0:	9885883a 	add	r2,r19,r2
1001f8d4:	14e1803a 	cmpltu	r16,r2,r19
1001f8d8:	8c23883a 	add	r17,r17,r16
1001f8dc:	1027883a 	mov	r19,r2
1001f8e0:	8880402c 	andhi	r2,r17,256
1001f8e4:	10000426 	beq	r2,zero,1001f8f8 <__divdf3+0x5e4>
1001f8e8:	00bfc034 	movhi	r2,65280
1001f8ec:	10bfffc4 	addi	r2,r2,-1
1001f8f0:	a1010004 	addi	r4,r20,1024
1001f8f4:	88a2703a 	and	r17,r17,r2
1001f8f8:	0081ff84 	movi	r2,2046
1001f8fc:	113edf16 	blt	r2,r4,1001f47c <__alt_data_end+0xf001f47c>
1001f900:	9826d0fa 	srli	r19,r19,3
1001f904:	8804977a 	slli	r2,r17,29
1001f908:	8820927a 	slli	r16,r17,9
1001f90c:	2101ffcc 	andi	r4,r4,2047
1001f910:	14e6b03a 	or	r19,r2,r19
1001f914:	800ad33a 	srli	r5,r16,12
1001f918:	9180004c 	andi	r6,r18,1
1001f91c:	003edb06 	br	1001f48c <__alt_data_end+0xf001f48c>
1001f920:	008000c4 	movi	r2,3
1001f924:	4080a826 	beq	r8,r2,1001fbc8 <__divdf3+0x8b4>
1001f928:	00800044 	movi	r2,1
1001f92c:	4080551e 	bne	r8,r2,1001fa84 <__divdf3+0x770>
1001f930:	e00d883a 	mov	r6,fp
1001f934:	0009883a 	mov	r4,zero
1001f938:	000b883a 	mov	r5,zero
1001f93c:	0027883a 	mov	r19,zero
1001f940:	003ed206 	br	1001f48c <__alt_data_end+0xf001f48c>
1001f944:	00800434 	movhi	r2,16
1001f948:	89400234 	orhi	r5,r17,8
1001f94c:	10bfffc4 	addi	r2,r2,-1
1001f950:	b00d883a 	mov	r6,r22
1001f954:	288a703a 	and	r5,r5,r2
1001f958:	003f2606 	br	1001f5f4 <__alt_data_end+0xf001f5f4>
1001f95c:	d9800315 	stw	r6,12(sp)
1001f960:	d9c00115 	stw	r7,4(sp)
1001f964:	00211ac0 	call	100211ac <__clzsi2>
1001f968:	10c00804 	addi	r3,r2,32
1001f96c:	010009c4 	movi	r4,39
1001f970:	d9800317 	ldw	r6,12(sp)
1001f974:	d9c00117 	ldw	r7,4(sp)
1001f978:	20fee30e 	bge	r4,r3,1001f508 <__alt_data_end+0xf001f508>
1001f97c:	117ffe04 	addi	r5,r2,-8
1001f980:	9162983a 	sll	r17,r18,r5
1001f984:	0027883a 	mov	r19,zero
1001f988:	003ee606 	br	1001f524 <__alt_data_end+0xf001f524>
1001f98c:	3009883a 	mov	r4,r6
1001f990:	d9800315 	stw	r6,12(sp)
1001f994:	da000215 	stw	r8,8(sp)
1001f998:	da400015 	stw	r9,0(sp)
1001f99c:	00211ac0 	call	100211ac <__clzsi2>
1001f9a0:	10c00804 	addi	r3,r2,32
1001f9a4:	010009c4 	movi	r4,39
1001f9a8:	d9800317 	ldw	r6,12(sp)
1001f9ac:	da000217 	ldw	r8,8(sp)
1001f9b0:	da400017 	ldw	r9,0(sp)
1001f9b4:	20fef20e 	bge	r4,r3,1001f580 <__alt_data_end+0xf001f580>
1001f9b8:	10bffe04 	addi	r2,r2,-8
1001f9bc:	a8a0983a 	sll	r16,r21,r2
1001f9c0:	002b883a 	mov	r21,zero
1001f9c4:	003ef506 	br	1001f59c <__alt_data_end+0xf001f59c>
1001f9c8:	354d883a 	add	r6,r6,r21
1001f9cc:	3549803a 	cmpltu	r4,r6,r21
1001f9d0:	2409883a 	add	r4,r4,r16
1001f9d4:	2089883a 	add	r4,r4,r2
1001f9d8:	88bfffc4 	addi	r2,r17,-1
1001f9dc:	81000c2e 	bgeu	r16,r4,1001fa10 <__divdf3+0x6fc>
1001f9e0:	20c04436 	bltu	r4,r3,1001faf4 <__divdf3+0x7e0>
1001f9e4:	19006f26 	beq	r3,r4,1001fba4 <__divdf3+0x890>
1001f9e8:	20c7c83a 	sub	r3,r4,r3
1001f9ec:	1023883a 	mov	r17,r2
1001f9f0:	003f6406 	br	1001f784 <__alt_data_end+0xf001f784>
1001f9f4:	9d7f1736 	bltu	r19,r21,1001f654 <__alt_data_end+0xf001f654>
1001f9f8:	9806d07a 	srli	r3,r19,1
1001f9fc:	880497fa 	slli	r2,r17,31
1001fa00:	980c97fa 	slli	r6,r19,31
1001fa04:	882cd07a 	srli	r22,r17,1
1001fa08:	18a6b03a 	or	r19,r3,r2
1001fa0c:	003f1406 	br	1001f660 <__alt_data_end+0xf001f660>
1001fa10:	243ff51e 	bne	r4,r16,1001f9e8 <__alt_data_end+0xf001f9e8>
1001fa14:	357ff22e 	bgeu	r6,r21,1001f9e0 <__alt_data_end+0xf001f9e0>
1001fa18:	80c7c83a 	sub	r3,r16,r3
1001fa1c:	1023883a 	mov	r17,r2
1001fa20:	003f5806 	br	1001f784 <__alt_data_end+0xf001f784>
1001fa24:	1013883a 	mov	r9,r2
1001fa28:	003f3d06 	br	1001f720 <__alt_data_end+0xf001f720>
1001fa2c:	1023883a 	mov	r17,r2
1001fa30:	003f2506 	br	1001f6c8 <__alt_data_end+0xf001f6c8>
1001fa34:	317fe436 	bltu	r6,r5,1001f9c8 <__alt_data_end+0xf001f9c8>
1001fa38:	0007883a 	mov	r3,zero
1001fa3c:	003f5106 	br	1001f784 <__alt_data_end+0xf001f784>
1001fa40:	1c07883a 	add	r3,r3,r16
1001fa44:	993fffc4 	addi	r4,r19,-1
1001fa48:	1c000a2e 	bgeu	r3,r16,1001fa74 <__divdf3+0x760>
1001fa4c:	2027883a 	mov	r19,r4
1001fa50:	19ff971e 	bne	r3,r7,1001f8b0 <__alt_data_end+0xf001f8b0>
1001fa54:	a8bf961e 	bne	r21,r2,1001f8b0 <__alt_data_end+0xf001f8b0>
1001fa58:	003f9606 	br	1001f8b4 <__alt_data_end+0xf001f8b4>
1001fa5c:	04ffffc4 	movi	r19,-1
1001fa60:	003f9406 	br	1001f8b4 <__alt_data_end+0xf001f8b4>
1001fa64:	100d883a 	mov	r6,r2
1001fa68:	003f6106 	br	1001f7f0 <__alt_data_end+0xf001f7f0>
1001fa6c:	1013883a 	mov	r9,r2
1001fa70:	003f7906 	br	1001f858 <__alt_data_end+0xf001f858>
1001fa74:	19c02636 	bltu	r3,r7,1001fb10 <__divdf3+0x7fc>
1001fa78:	38c04d26 	beq	r7,r3,1001fbb0 <__divdf3+0x89c>
1001fa7c:	2027883a 	mov	r19,r4
1001fa80:	003f8b06 	br	1001f8b0 <__alt_data_end+0xf001f8b0>
1001fa84:	e025883a 	mov	r18,fp
1001fa88:	003f8a06 	br	1001f8b4 <__alt_data_end+0xf001f8b4>
1001fa8c:	008007c4 	movi	r2,31
1001fa90:	14002a16 	blt	r2,r16,1001fb3c <__divdf3+0x828>
1001fa94:	a5010784 	addi	r20,r20,1054
1001fa98:	8d04983a 	sll	r2,r17,r20
1001fa9c:	9c06d83a 	srl	r3,r19,r16
1001faa0:	9d28983a 	sll	r20,r19,r20
1001faa4:	8c20d83a 	srl	r16,r17,r16
1001faa8:	1886b03a 	or	r3,r3,r2
1001faac:	a004c03a 	cmpne	r2,r20,zero
1001fab0:	1884b03a 	or	r2,r3,r2
1001fab4:	10c001cc 	andi	r3,r2,7
1001fab8:	18000726 	beq	r3,zero,1001fad8 <__divdf3+0x7c4>
1001fabc:	110003cc 	andi	r4,r2,15
1001fac0:	00c00104 	movi	r3,4
1001fac4:	20c00426 	beq	r4,r3,1001fad8 <__divdf3+0x7c4>
1001fac8:	10c00104 	addi	r3,r2,4
1001facc:	1885803a 	cmpltu	r2,r3,r2
1001fad0:	80a1883a 	add	r16,r16,r2
1001fad4:	1805883a 	mov	r2,r3
1001fad8:	80c0202c 	andhi	r3,r16,128
1001fadc:	18002d26 	beq	r3,zero,1001fb94 <__divdf3+0x880>
1001fae0:	9180004c 	andi	r6,r18,1
1001fae4:	01000044 	movi	r4,1
1001fae8:	000b883a 	mov	r5,zero
1001faec:	0027883a 	mov	r19,zero
1001faf0:	003e6606 	br	1001f48c <__alt_data_end+0xf001f48c>
1001faf4:	354d883a 	add	r6,r6,r21
1001faf8:	356d803a 	cmpltu	r22,r6,r21
1001fafc:	b42d883a 	add	r22,r22,r16
1001fb00:	b12d883a 	add	r22,r22,r4
1001fb04:	8c7fff84 	addi	r17,r17,-2
1001fb08:	b0c7c83a 	sub	r3,r22,r3
1001fb0c:	003f1d06 	br	1001f784 <__alt_data_end+0xf001f784>
1001fb10:	ad4b883a 	add	r5,r21,r21
1001fb14:	2d6b803a 	cmpltu	r21,r5,r21
1001fb18:	ac2b883a 	add	r21,r21,r16
1001fb1c:	1d47883a 	add	r3,r3,r21
1001fb20:	993fff84 	addi	r4,r19,-2
1001fb24:	282b883a 	mov	r21,r5
1001fb28:	003fc806 	br	1001fa4c <__alt_data_end+0xf001fa4c>
1001fb2c:	103fc41e 	bne	r2,zero,1001fa40 <__alt_data_end+0xf001fa40>
1001fb30:	002b883a 	mov	r21,zero
1001fb34:	a8bf5e1e 	bne	r21,r2,1001f8b0 <__alt_data_end+0xf001f8b0>
1001fb38:	003f5e06 	br	1001f8b4 <__alt_data_end+0xf001f8b4>
1001fb3c:	00bef884 	movi	r2,-1054
1001fb40:	1505c83a 	sub	r2,r2,r20
1001fb44:	00c00804 	movi	r3,32
1001fb48:	8884d83a 	srl	r2,r17,r2
1001fb4c:	80c01c26 	beq	r16,r3,1001fbc0 <__divdf3+0x8ac>
1001fb50:	a0c10f84 	addi	r3,r20,1086
1001fb54:	88c6983a 	sll	r3,r17,r3
1001fb58:	1cc6b03a 	or	r3,r3,r19
1001fb5c:	1806c03a 	cmpne	r3,r3,zero
1001fb60:	1884b03a 	or	r2,r3,r2
1001fb64:	140001cc 	andi	r16,r2,7
1001fb68:	8000061e 	bne	r16,zero,1001fb84 <__divdf3+0x870>
1001fb6c:	000b883a 	mov	r5,zero
1001fb70:	1004d0fa 	srli	r2,r2,3
1001fb74:	9180004c 	andi	r6,r18,1
1001fb78:	0009883a 	mov	r4,zero
1001fb7c:	1426b03a 	or	r19,r2,r16
1001fb80:	003e4206 	br	1001f48c <__alt_data_end+0xf001f48c>
1001fb84:	110003cc 	andi	r4,r2,15
1001fb88:	00c00104 	movi	r3,4
1001fb8c:	0021883a 	mov	r16,zero
1001fb90:	20ffcd1e 	bne	r4,r3,1001fac8 <__alt_data_end+0xf001fac8>
1001fb94:	800a927a 	slli	r5,r16,9
1001fb98:	8020977a 	slli	r16,r16,29
1001fb9c:	280ad33a 	srli	r5,r5,12
1001fba0:	003ff306 	br	1001fb70 <__alt_data_end+0xf001fb70>
1001fba4:	317fd336 	bltu	r6,r5,1001faf4 <__alt_data_end+0xf001faf4>
1001fba8:	1023883a 	mov	r17,r2
1001fbac:	003fa206 	br	1001fa38 <__alt_data_end+0xf001fa38>
1001fbb0:	a8bfd736 	bltu	r21,r2,1001fb10 <__alt_data_end+0xf001fb10>
1001fbb4:	2027883a 	mov	r19,r4
1001fbb8:	a8bf3d1e 	bne	r21,r2,1001f8b0 <__alt_data_end+0xf001f8b0>
1001fbbc:	003f3d06 	br	1001f8b4 <__alt_data_end+0xf001f8b4>
1001fbc0:	0007883a 	mov	r3,zero
1001fbc4:	003fe406 	br	1001fb58 <__alt_data_end+0xf001fb58>
1001fbc8:	00800434 	movhi	r2,16
1001fbcc:	89400234 	orhi	r5,r17,8
1001fbd0:	10bfffc4 	addi	r2,r2,-1
1001fbd4:	e00d883a 	mov	r6,fp
1001fbd8:	288a703a 	and	r5,r5,r2
1001fbdc:	003e8506 	br	1001f5f4 <__alt_data_end+0xf001f5f4>

1001fbe0 <__eqdf2>:
1001fbe0:	2804d53a 	srli	r2,r5,20
1001fbe4:	3806d53a 	srli	r3,r7,20
1001fbe8:	02000434 	movhi	r8,16
1001fbec:	423fffc4 	addi	r8,r8,-1
1001fbf0:	1081ffcc 	andi	r2,r2,2047
1001fbf4:	0241ffc4 	movi	r9,2047
1001fbf8:	2a14703a 	and	r10,r5,r8
1001fbfc:	18c1ffcc 	andi	r3,r3,2047
1001fc00:	3a10703a 	and	r8,r7,r8
1001fc04:	280ad7fa 	srli	r5,r5,31
1001fc08:	380ed7fa 	srli	r7,r7,31
1001fc0c:	12400f26 	beq	r2,r9,1001fc4c <__eqdf2+0x6c>
1001fc10:	0241ffc4 	movi	r9,2047
1001fc14:	1a400326 	beq	r3,r9,1001fc24 <__eqdf2+0x44>
1001fc18:	10c00526 	beq	r2,r3,1001fc30 <__eqdf2+0x50>
1001fc1c:	00800044 	movi	r2,1
1001fc20:	f800283a 	ret
1001fc24:	4192b03a 	or	r9,r8,r6
1001fc28:	483ffc1e 	bne	r9,zero,1001fc1c <__alt_data_end+0xf001fc1c>
1001fc2c:	10fffb1e 	bne	r2,r3,1001fc1c <__alt_data_end+0xf001fc1c>
1001fc30:	523ffa1e 	bne	r10,r8,1001fc1c <__alt_data_end+0xf001fc1c>
1001fc34:	21bff91e 	bne	r4,r6,1001fc1c <__alt_data_end+0xf001fc1c>
1001fc38:	29c00826 	beq	r5,r7,1001fc5c <__eqdf2+0x7c>
1001fc3c:	103ff71e 	bne	r2,zero,1001fc1c <__alt_data_end+0xf001fc1c>
1001fc40:	5104b03a 	or	r2,r10,r4
1001fc44:	1004c03a 	cmpne	r2,r2,zero
1001fc48:	f800283a 	ret
1001fc4c:	5112b03a 	or	r9,r10,r4
1001fc50:	483fef26 	beq	r9,zero,1001fc10 <__alt_data_end+0xf001fc10>
1001fc54:	00800044 	movi	r2,1
1001fc58:	f800283a 	ret
1001fc5c:	0005883a 	mov	r2,zero
1001fc60:	f800283a 	ret

1001fc64 <__gedf2>:
1001fc64:	2804d53a 	srli	r2,r5,20
1001fc68:	3806d53a 	srli	r3,r7,20
1001fc6c:	02000434 	movhi	r8,16
1001fc70:	423fffc4 	addi	r8,r8,-1
1001fc74:	0241ffc4 	movi	r9,2047
1001fc78:	1081ffcc 	andi	r2,r2,2047
1001fc7c:	2a14703a 	and	r10,r5,r8
1001fc80:	1a46703a 	and	r3,r3,r9
1001fc84:	3a10703a 	and	r8,r7,r8
1001fc88:	280ad7fa 	srli	r5,r5,31
1001fc8c:	380ed7fa 	srli	r7,r7,31
1001fc90:	12400b26 	beq	r2,r9,1001fcc0 <__gedf2+0x5c>
1001fc94:	1a401626 	beq	r3,r9,1001fcf0 <__gedf2+0x8c>
1001fc98:	10000c1e 	bne	r2,zero,1001fccc <__gedf2+0x68>
1001fc9c:	5112b03a 	or	r9,r10,r4
1001fca0:	4813003a 	cmpeq	r9,r9,zero
1001fca4:	4817883a 	mov	r11,r9
1001fca8:	18000c1e 	bne	r3,zero,1001fcdc <__gedf2+0x78>
1001fcac:	4198b03a 	or	r12,r8,r6
1001fcb0:	60000a1e 	bne	r12,zero,1001fcdc <__gedf2+0x78>
1001fcb4:	48001326 	beq	r9,zero,1001fd04 <__gedf2+0xa0>
1001fcb8:	0005883a 	mov	r2,zero
1001fcbc:	f800283a 	ret
1001fcc0:	5112b03a 	or	r9,r10,r4
1001fcc4:	4800191e 	bne	r9,zero,1001fd2c <__gedf2+0xc8>
1001fcc8:	18800926 	beq	r3,r2,1001fcf0 <__gedf2+0x8c>
1001fccc:	18000b1e 	bne	r3,zero,1001fcfc <__gedf2+0x98>
1001fcd0:	4192b03a 	or	r9,r8,r6
1001fcd4:	0017883a 	mov	r11,zero
1001fcd8:	48000a26 	beq	r9,zero,1001fd04 <__gedf2+0xa0>
1001fcdc:	39c03fcc 	andi	r7,r7,255
1001fce0:	58000726 	beq	r11,zero,1001fd00 <__gedf2+0x9c>
1001fce4:	3800081e 	bne	r7,zero,1001fd08 <__gedf2+0xa4>
1001fce8:	00bfffc4 	movi	r2,-1
1001fcec:	f800283a 	ret
1001fcf0:	4192b03a 	or	r9,r8,r6
1001fcf4:	48000d1e 	bne	r9,zero,1001fd2c <__gedf2+0xc8>
1001fcf8:	103fe826 	beq	r2,zero,1001fc9c <__alt_data_end+0xf001fc9c>
1001fcfc:	39c03fcc 	andi	r7,r7,255
1001fd00:	29c00326 	beq	r5,r7,1001fd10 <__gedf2+0xac>
1001fd04:	283ff81e 	bne	r5,zero,1001fce8 <__alt_data_end+0xf001fce8>
1001fd08:	00800044 	movi	r2,1
1001fd0c:	f800283a 	ret
1001fd10:	18bffc16 	blt	r3,r2,1001fd04 <__alt_data_end+0xf001fd04>
1001fd14:	10c00316 	blt	r2,r3,1001fd24 <__gedf2+0xc0>
1001fd18:	42bffa36 	bltu	r8,r10,1001fd04 <__alt_data_end+0xf001fd04>
1001fd1c:	52000526 	beq	r10,r8,1001fd34 <__gedf2+0xd0>
1001fd20:	523fe52e 	bgeu	r10,r8,1001fcb8 <__alt_data_end+0xf001fcb8>
1001fd24:	283ff026 	beq	r5,zero,1001fce8 <__alt_data_end+0xf001fce8>
1001fd28:	003ff706 	br	1001fd08 <__alt_data_end+0xf001fd08>
1001fd2c:	00bfff84 	movi	r2,-2
1001fd30:	f800283a 	ret
1001fd34:	313ff336 	bltu	r6,r4,1001fd04 <__alt_data_end+0xf001fd04>
1001fd38:	21bfdf2e 	bgeu	r4,r6,1001fcb8 <__alt_data_end+0xf001fcb8>
1001fd3c:	283fea26 	beq	r5,zero,1001fce8 <__alt_data_end+0xf001fce8>
1001fd40:	003ff106 	br	1001fd08 <__alt_data_end+0xf001fd08>

1001fd44 <__ledf2>:
1001fd44:	2804d53a 	srli	r2,r5,20
1001fd48:	3810d53a 	srli	r8,r7,20
1001fd4c:	00c00434 	movhi	r3,16
1001fd50:	18ffffc4 	addi	r3,r3,-1
1001fd54:	0241ffc4 	movi	r9,2047
1001fd58:	1081ffcc 	andi	r2,r2,2047
1001fd5c:	28d4703a 	and	r10,r5,r3
1001fd60:	4250703a 	and	r8,r8,r9
1001fd64:	38c6703a 	and	r3,r7,r3
1001fd68:	280ad7fa 	srli	r5,r5,31
1001fd6c:	380ed7fa 	srli	r7,r7,31
1001fd70:	12400b26 	beq	r2,r9,1001fda0 <__ledf2+0x5c>
1001fd74:	42401926 	beq	r8,r9,1001fddc <__ledf2+0x98>
1001fd78:	10000c1e 	bne	r2,zero,1001fdac <__ledf2+0x68>
1001fd7c:	5112b03a 	or	r9,r10,r4
1001fd80:	4813003a 	cmpeq	r9,r9,zero
1001fd84:	4817883a 	mov	r11,r9
1001fd88:	40000f26 	beq	r8,zero,1001fdc8 <__ledf2+0x84>
1001fd8c:	39c03fcc 	andi	r7,r7,255
1001fd90:	58001826 	beq	r11,zero,1001fdf4 <__ledf2+0xb0>
1001fd94:	38000a1e 	bne	r7,zero,1001fdc0 <__ledf2+0x7c>
1001fd98:	00bfffc4 	movi	r2,-1
1001fd9c:	f800283a 	ret
1001fda0:	5112b03a 	or	r9,r10,r4
1001fda4:	48000f1e 	bne	r9,zero,1001fde4 <__ledf2+0xa0>
1001fda8:	40800c26 	beq	r8,r2,1001fddc <__ledf2+0x98>
1001fdac:	4000101e 	bne	r8,zero,1001fdf0 <__ledf2+0xac>
1001fdb0:	1992b03a 	or	r9,r3,r6
1001fdb4:	0017883a 	mov	r11,zero
1001fdb8:	483ff41e 	bne	r9,zero,1001fd8c <__alt_data_end+0xf001fd8c>
1001fdbc:	283ff61e 	bne	r5,zero,1001fd98 <__alt_data_end+0xf001fd98>
1001fdc0:	00800044 	movi	r2,1
1001fdc4:	f800283a 	ret
1001fdc8:	1998b03a 	or	r12,r3,r6
1001fdcc:	603fef1e 	bne	r12,zero,1001fd8c <__alt_data_end+0xf001fd8c>
1001fdd0:	483ffa26 	beq	r9,zero,1001fdbc <__alt_data_end+0xf001fdbc>
1001fdd4:	0005883a 	mov	r2,zero
1001fdd8:	f800283a 	ret
1001fddc:	1992b03a 	or	r9,r3,r6
1001fde0:	48000226 	beq	r9,zero,1001fdec <__ledf2+0xa8>
1001fde4:	00800084 	movi	r2,2
1001fde8:	f800283a 	ret
1001fdec:	103fe326 	beq	r2,zero,1001fd7c <__alt_data_end+0xf001fd7c>
1001fdf0:	39c03fcc 	andi	r7,r7,255
1001fdf4:	29fff11e 	bne	r5,r7,1001fdbc <__alt_data_end+0xf001fdbc>
1001fdf8:	40bff016 	blt	r8,r2,1001fdbc <__alt_data_end+0xf001fdbc>
1001fdfc:	12000316 	blt	r2,r8,1001fe0c <__ledf2+0xc8>
1001fe00:	1abfee36 	bltu	r3,r10,1001fdbc <__alt_data_end+0xf001fdbc>
1001fe04:	50c00326 	beq	r10,r3,1001fe14 <__ledf2+0xd0>
1001fe08:	50fff22e 	bgeu	r10,r3,1001fdd4 <__alt_data_end+0xf001fdd4>
1001fe0c:	283fe226 	beq	r5,zero,1001fd98 <__alt_data_end+0xf001fd98>
1001fe10:	003feb06 	br	1001fdc0 <__alt_data_end+0xf001fdc0>
1001fe14:	313fe936 	bltu	r6,r4,1001fdbc <__alt_data_end+0xf001fdbc>
1001fe18:	21bfee2e 	bgeu	r4,r6,1001fdd4 <__alt_data_end+0xf001fdd4>
1001fe1c:	283fde26 	beq	r5,zero,1001fd98 <__alt_data_end+0xf001fd98>
1001fe20:	003fe706 	br	1001fdc0 <__alt_data_end+0xf001fdc0>

1001fe24 <__muldf3>:
1001fe24:	defff204 	addi	sp,sp,-56
1001fe28:	2804d53a 	srli	r2,r5,20
1001fe2c:	dd800a15 	stw	r22,40(sp)
1001fe30:	282cd7fa 	srli	r22,r5,31
1001fe34:	dc000415 	stw	r16,16(sp)
1001fe38:	04000434 	movhi	r16,16
1001fe3c:	df000c15 	stw	fp,48(sp)
1001fe40:	dd000815 	stw	r20,32(sp)
1001fe44:	dcc00715 	stw	r19,28(sp)
1001fe48:	dc800615 	stw	r18,24(sp)
1001fe4c:	dc400515 	stw	r17,20(sp)
1001fe50:	843fffc4 	addi	r16,r16,-1
1001fe54:	dfc00d15 	stw	ra,52(sp)
1001fe58:	ddc00b15 	stw	r23,44(sp)
1001fe5c:	dd400915 	stw	r21,36(sp)
1001fe60:	1501ffcc 	andi	r20,r2,2047
1001fe64:	2023883a 	mov	r17,r4
1001fe68:	2025883a 	mov	r18,r4
1001fe6c:	2c20703a 	and	r16,r5,r16
1001fe70:	b027883a 	mov	r19,r22
1001fe74:	b7003fcc 	andi	fp,r22,255
1001fe78:	a0005926 	beq	r20,zero,1001ffe0 <__muldf3+0x1bc>
1001fe7c:	0081ffc4 	movi	r2,2047
1001fe80:	a0803426 	beq	r20,r2,1001ff54 <__muldf3+0x130>
1001fe84:	84000434 	orhi	r16,r16,16
1001fe88:	2004d77a 	srli	r2,r4,29
1001fe8c:	802090fa 	slli	r16,r16,3
1001fe90:	202490fa 	slli	r18,r4,3
1001fe94:	a53f0044 	addi	r20,r20,-1023
1001fe98:	80a0b03a 	or	r16,r16,r2
1001fe9c:	002b883a 	mov	r21,zero
1001fea0:	0015883a 	mov	r10,zero
1001fea4:	3812d53a 	srli	r9,r7,20
1001fea8:	3806d7fa 	srli	r3,r7,31
1001feac:	02000434 	movhi	r8,16
1001feb0:	423fffc4 	addi	r8,r8,-1
1001feb4:	4941ffcc 	andi	r5,r9,2047
1001feb8:	302f883a 	mov	r23,r6
1001febc:	3a22703a 	and	r17,r7,r8
1001fec0:	1ac03fcc 	andi	r11,r3,255
1001fec4:	28006226 	beq	r5,zero,10020050 <__muldf3+0x22c>
1001fec8:	0081ffc4 	movi	r2,2047
1001fecc:	28805a26 	beq	r5,r2,10020038 <__muldf3+0x214>
1001fed0:	8a000434 	orhi	r8,r17,16
1001fed4:	3004d77a 	srli	r2,r6,29
1001fed8:	401090fa 	slli	r8,r8,3
1001fedc:	302e90fa 	slli	r23,r6,3
1001fee0:	297f0044 	addi	r5,r5,-1023
1001fee4:	40a2b03a 	or	r17,r8,r2
1001fee8:	0013883a 	mov	r9,zero
1001feec:	4d4cb03a 	or	r6,r9,r21
1001fef0:	300c90ba 	slli	r6,r6,2
1001fef4:	020400b4 	movhi	r8,4098
1001fef8:	423fc504 	addi	r8,r8,-236
1001fefc:	320d883a 	add	r6,r6,r8
1001ff00:	31800017 	ldw	r6,0(r6)
1001ff04:	a14b883a 	add	r5,r20,r5
1001ff08:	1dacf03a 	xor	r22,r3,r22
1001ff0c:	2b000044 	addi	r12,r5,1
1001ff10:	3000683a 	jmp	r6
1001ff14:	10020150 	cmplti	zero,r2,2053
1001ff18:	1002013c 	xorhi	zero,r2,2052
1001ff1c:	1002013c 	xorhi	zero,r2,2052
1001ff20:	10020128 	cmpgeui	zero,r2,2052
1001ff24:	1001ff70 	cmpltui	zero,r2,2045
1001ff28:	1001ff70 	cmpltui	zero,r2,2045
1001ff2c:	10020110 	cmplti	zero,r2,2052
1001ff30:	10020128 	cmpgeui	zero,r2,2052
1001ff34:	1001ff70 	cmpltui	zero,r2,2045
1001ff38:	10020110 	cmplti	zero,r2,2052
1001ff3c:	1001ff70 	cmpltui	zero,r2,2045
1001ff40:	10020128 	cmpgeui	zero,r2,2052
1001ff44:	1001ff74 	orhi	zero,r2,2045
1001ff48:	1001ff74 	orhi	zero,r2,2045
1001ff4c:	1001ff74 	orhi	zero,r2,2045
1001ff50:	1002034c 	andi	zero,r2,2061
1001ff54:	8104b03a 	or	r2,r16,r4
1001ff58:	10006a1e 	bne	r2,zero,10020104 <__muldf3+0x2e0>
1001ff5c:	05400204 	movi	r21,8
1001ff60:	0021883a 	mov	r16,zero
1001ff64:	0025883a 	mov	r18,zero
1001ff68:	02800084 	movi	r10,2
1001ff6c:	003fcd06 	br	1001fea4 <__alt_data_end+0xf001fea4>
1001ff70:	b039883a 	mov	fp,r22
1001ff74:	00800084 	movi	r2,2
1001ff78:	50804e1e 	bne	r10,r2,100200b4 <__muldf3+0x290>
1001ff7c:	e4c0004c 	andi	r19,fp,1
1001ff80:	0101ffc4 	movi	r4,2047
1001ff84:	0021883a 	mov	r16,zero
1001ff88:	0025883a 	mov	r18,zero
1001ff8c:	2008953a 	slli	r4,r4,20
1001ff90:	98c03fcc 	andi	r3,r19,255
1001ff94:	01400434 	movhi	r5,16
1001ff98:	297fffc4 	addi	r5,r5,-1
1001ff9c:	180697fa 	slli	r3,r3,31
1001ffa0:	8160703a 	and	r16,r16,r5
1001ffa4:	8120b03a 	or	r16,r16,r4
1001ffa8:	80c6b03a 	or	r3,r16,r3
1001ffac:	9005883a 	mov	r2,r18
1001ffb0:	dfc00d17 	ldw	ra,52(sp)
1001ffb4:	df000c17 	ldw	fp,48(sp)
1001ffb8:	ddc00b17 	ldw	r23,44(sp)
1001ffbc:	dd800a17 	ldw	r22,40(sp)
1001ffc0:	dd400917 	ldw	r21,36(sp)
1001ffc4:	dd000817 	ldw	r20,32(sp)
1001ffc8:	dcc00717 	ldw	r19,28(sp)
1001ffcc:	dc800617 	ldw	r18,24(sp)
1001ffd0:	dc400517 	ldw	r17,20(sp)
1001ffd4:	dc000417 	ldw	r16,16(sp)
1001ffd8:	dec00e04 	addi	sp,sp,56
1001ffdc:	f800283a 	ret
1001ffe0:	8104b03a 	or	r2,r16,r4
1001ffe4:	10004226 	beq	r2,zero,100200f0 <__muldf3+0x2cc>
1001ffe8:	8000f926 	beq	r16,zero,100203d0 <__muldf3+0x5ac>
1001ffec:	8009883a 	mov	r4,r16
1001fff0:	d9800315 	stw	r6,12(sp)
1001fff4:	d9c00015 	stw	r7,0(sp)
1001fff8:	00211ac0 	call	100211ac <__clzsi2>
1001fffc:	d9800317 	ldw	r6,12(sp)
10020000:	d9c00017 	ldw	r7,0(sp)
10020004:	1007883a 	mov	r3,r2
10020008:	01000a04 	movi	r4,40
1002000c:	18bffe04 	addi	r2,r3,-8
10020010:	20c9c83a 	sub	r4,r4,r3
10020014:	80a0983a 	sll	r16,r16,r2
10020018:	8908d83a 	srl	r4,r17,r4
1002001c:	88a4983a 	sll	r18,r17,r2
10020020:	2420b03a 	or	r16,r4,r16
10020024:	017f0344 	movi	r5,-1011
10020028:	28e9c83a 	sub	r20,r5,r3
1002002c:	002b883a 	mov	r21,zero
10020030:	0015883a 	mov	r10,zero
10020034:	003f9b06 	br	1001fea4 <__alt_data_end+0xf001fea4>
10020038:	8984b03a 	or	r2,r17,r6
1002003c:	10002a1e 	bne	r2,zero,100200e8 <__muldf3+0x2c4>
10020040:	0023883a 	mov	r17,zero
10020044:	002f883a 	mov	r23,zero
10020048:	02400084 	movi	r9,2
1002004c:	003fa706 	br	1001feec <__alt_data_end+0xf001feec>
10020050:	8984b03a 	or	r2,r17,r6
10020054:	10002026 	beq	r2,zero,100200d8 <__muldf3+0x2b4>
10020058:	8800cc26 	beq	r17,zero,1002038c <__muldf3+0x568>
1002005c:	8809883a 	mov	r4,r17
10020060:	d8c00215 	stw	r3,8(sp)
10020064:	d9800315 	stw	r6,12(sp)
10020068:	da800015 	stw	r10,0(sp)
1002006c:	dac00115 	stw	r11,4(sp)
10020070:	00211ac0 	call	100211ac <__clzsi2>
10020074:	d8c00217 	ldw	r3,8(sp)
10020078:	d9800317 	ldw	r6,12(sp)
1002007c:	da800017 	ldw	r10,0(sp)
10020080:	dac00117 	ldw	r11,4(sp)
10020084:	1009883a 	mov	r4,r2
10020088:	01400a04 	movi	r5,40
1002008c:	25fffe04 	addi	r23,r4,-8
10020090:	290bc83a 	sub	r5,r5,r4
10020094:	8dd0983a 	sll	r8,r17,r23
10020098:	314ad83a 	srl	r5,r6,r5
1002009c:	35ee983a 	sll	r23,r6,r23
100200a0:	2a22b03a 	or	r17,r5,r8
100200a4:	017f0344 	movi	r5,-1011
100200a8:	290bc83a 	sub	r5,r5,r4
100200ac:	0013883a 	mov	r9,zero
100200b0:	003f8e06 	br	1001feec <__alt_data_end+0xf001feec>
100200b4:	008000c4 	movi	r2,3
100200b8:	50811d26 	beq	r10,r2,10020530 <__muldf3+0x70c>
100200bc:	00800044 	movi	r2,1
100200c0:	5080e01e 	bne	r10,r2,10020444 <__muldf3+0x620>
100200c4:	e0a6703a 	and	r19,fp,r2
100200c8:	0009883a 	mov	r4,zero
100200cc:	0021883a 	mov	r16,zero
100200d0:	0025883a 	mov	r18,zero
100200d4:	003fad06 	br	1001ff8c <__alt_data_end+0xf001ff8c>
100200d8:	0023883a 	mov	r17,zero
100200dc:	002f883a 	mov	r23,zero
100200e0:	02400044 	movi	r9,1
100200e4:	003f8106 	br	1001feec <__alt_data_end+0xf001feec>
100200e8:	024000c4 	movi	r9,3
100200ec:	003f7f06 	br	1001feec <__alt_data_end+0xf001feec>
100200f0:	05400104 	movi	r21,4
100200f4:	0021883a 	mov	r16,zero
100200f8:	0025883a 	mov	r18,zero
100200fc:	02800044 	movi	r10,1
10020100:	003f6806 	br	1001fea4 <__alt_data_end+0xf001fea4>
10020104:	05400304 	movi	r21,12
10020108:	028000c4 	movi	r10,3
1002010c:	003f6506 	br	1001fea4 <__alt_data_end+0xf001fea4>
10020110:	04000434 	movhi	r16,16
10020114:	0027883a 	mov	r19,zero
10020118:	843fffc4 	addi	r16,r16,-1
1002011c:	04bfffc4 	movi	r18,-1
10020120:	0101ffc4 	movi	r4,2047
10020124:	003f9906 	br	1001ff8c <__alt_data_end+0xf001ff8c>
10020128:	8821883a 	mov	r16,r17
1002012c:	b825883a 	mov	r18,r23
10020130:	5839883a 	mov	fp,r11
10020134:	4815883a 	mov	r10,r9
10020138:	003f8e06 	br	1001ff74 <__alt_data_end+0xf001ff74>
1002013c:	8821883a 	mov	r16,r17
10020140:	b825883a 	mov	r18,r23
10020144:	b039883a 	mov	fp,r22
10020148:	4815883a 	mov	r10,r9
1002014c:	003f8906 	br	1001ff74 <__alt_data_end+0xf001ff74>
10020150:	b80cd43a 	srli	r6,r23,16
10020154:	9006d43a 	srli	r3,r18,16
10020158:	90bfffcc 	andi	r2,r18,65535
1002015c:	bdffffcc 	andi	r23,r23,65535
10020160:	b891383a 	mul	r8,r23,r2
10020164:	b8c9383a 	mul	r4,r23,r3
10020168:	309b383a 	mul	r13,r6,r2
1002016c:	400ed43a 	srli	r7,r8,16
10020170:	30df383a 	mul	r15,r6,r3
10020174:	235b883a 	add	r13,r4,r13
10020178:	69db883a 	add	r13,r13,r7
1002017c:	6900022e 	bgeu	r13,r4,10020188 <__muldf3+0x364>
10020180:	01000074 	movhi	r4,1
10020184:	791f883a 	add	r15,r15,r4
10020188:	8828d43a 	srli	r20,r17,16
1002018c:	8c7fffcc 	andi	r17,r17,65535
10020190:	888f383a 	mul	r7,r17,r2
10020194:	88d3383a 	mul	r9,r17,r3
10020198:	a0a5383a 	mul	r18,r20,r2
1002019c:	3816d43a 	srli	r11,r7,16
100201a0:	6814943a 	slli	r10,r13,16
100201a4:	4ca5883a 	add	r18,r9,r18
100201a8:	423fffcc 	andi	r8,r8,65535
100201ac:	92e5883a 	add	r18,r18,r11
100201b0:	6808d43a 	srli	r4,r13,16
100201b4:	5215883a 	add	r10,r10,r8
100201b8:	a0c7383a 	mul	r3,r20,r3
100201bc:	9240022e 	bgeu	r18,r9,100201c8 <__muldf3+0x3a4>
100201c0:	00800074 	movhi	r2,1
100201c4:	1887883a 	add	r3,r3,r2
100201c8:	802ad43a 	srli	r21,r16,16
100201cc:	80bfffcc 	andi	r2,r16,65535
100201d0:	b893383a 	mul	r9,r23,r2
100201d4:	3091383a 	mul	r8,r6,r2
100201d8:	bd6f383a 	mul	r23,r23,r21
100201dc:	9026943a 	slli	r19,r18,16
100201e0:	481ad43a 	srli	r13,r9,16
100201e4:	9024d43a 	srli	r18,r18,16
100201e8:	39ffffcc 	andi	r7,r7,65535
100201ec:	ba11883a 	add	r8,r23,r8
100201f0:	99e7883a 	add	r19,r19,r7
100201f4:	4351883a 	add	r8,r8,r13
100201f8:	1c97883a 	add	r11,r3,r18
100201fc:	354d383a 	mul	r6,r6,r21
10020200:	9925883a 	add	r18,r19,r4
10020204:	45c0022e 	bgeu	r8,r23,10020210 <__muldf3+0x3ec>
10020208:	00c00074 	movhi	r3,1
1002020c:	30cd883a 	add	r6,r6,r3
10020210:	8889383a 	mul	r4,r17,r2
10020214:	8d63383a 	mul	r17,r17,r21
10020218:	a085383a 	mul	r2,r20,r2
1002021c:	200ed43a 	srli	r7,r4,16
10020220:	401cd43a 	srli	r14,r8,16
10020224:	401a943a 	slli	r13,r8,16
10020228:	8885883a 	add	r2,r17,r2
1002022c:	4a3fffcc 	andi	r8,r9,65535
10020230:	11c5883a 	add	r2,r2,r7
10020234:	339d883a 	add	r14,r6,r14
10020238:	6a11883a 	add	r8,r13,r8
1002023c:	a561383a 	mul	r16,r20,r21
10020240:	1440022e 	bgeu	r2,r17,1002024c <__muldf3+0x428>
10020244:	00c00074 	movhi	r3,1
10020248:	80e1883a 	add	r16,r16,r3
1002024c:	1006943a 	slli	r3,r2,16
10020250:	213fffcc 	andi	r4,r4,65535
10020254:	93db883a 	add	r13,r18,r15
10020258:	1909883a 	add	r4,r3,r4
1002025c:	22c7883a 	add	r3,r4,r11
10020260:	6cd3803a 	cmpltu	r9,r13,r19
10020264:	6a09883a 	add	r4,r13,r8
10020268:	1a5b883a 	add	r13,r3,r9
1002026c:	2211803a 	cmpltu	r8,r4,r8
10020270:	734d883a 	add	r6,r14,r13
10020274:	100ed43a 	srli	r7,r2,16
10020278:	6a53803a 	cmpltu	r9,r13,r9
1002027c:	3205883a 	add	r2,r6,r8
10020280:	1ac7803a 	cmpltu	r3,r3,r11
10020284:	1211803a 	cmpltu	r8,r2,r8
10020288:	48c6b03a 	or	r3,r9,r3
1002028c:	338d803a 	cmpltu	r6,r6,r14
10020290:	19c7883a 	add	r3,r3,r7
10020294:	418cb03a 	or	r6,r8,r6
10020298:	1987883a 	add	r3,r3,r6
1002029c:	2024927a 	slli	r18,r4,9
100202a0:	1c07883a 	add	r3,r3,r16
100202a4:	1806927a 	slli	r3,r3,9
100202a8:	1020d5fa 	srli	r16,r2,23
100202ac:	2008d5fa 	srli	r4,r4,23
100202b0:	9294b03a 	or	r10,r18,r10
100202b4:	1004927a 	slli	r2,r2,9
100202b8:	5024c03a 	cmpne	r18,r10,zero
100202bc:	1c20b03a 	or	r16,r3,r16
100202c0:	9108b03a 	or	r4,r18,r4
100202c4:	80c0402c 	andhi	r3,r16,256
100202c8:	20a4b03a 	or	r18,r4,r2
100202cc:	18000726 	beq	r3,zero,100202ec <__muldf3+0x4c8>
100202d0:	9006d07a 	srli	r3,r18,1
100202d4:	800897fa 	slli	r4,r16,31
100202d8:	9080004c 	andi	r2,r18,1
100202dc:	8020d07a 	srli	r16,r16,1
100202e0:	10c4b03a 	or	r2,r2,r3
100202e4:	1124b03a 	or	r18,r2,r4
100202e8:	600b883a 	mov	r5,r12
100202ec:	2900ffc4 	addi	r4,r5,1023
100202f0:	01004b0e 	bge	zero,r4,10020420 <__muldf3+0x5fc>
100202f4:	908001cc 	andi	r2,r18,7
100202f8:	10000726 	beq	r2,zero,10020318 <__muldf3+0x4f4>
100202fc:	90c003cc 	andi	r3,r18,15
10020300:	00800104 	movi	r2,4
10020304:	18800426 	beq	r3,r2,10020318 <__muldf3+0x4f4>
10020308:	9087883a 	add	r3,r18,r2
1002030c:	1c85803a 	cmpltu	r2,r3,r18
10020310:	80a1883a 	add	r16,r16,r2
10020314:	1825883a 	mov	r18,r3
10020318:	8080402c 	andhi	r2,r16,256
1002031c:	10000426 	beq	r2,zero,10020330 <__muldf3+0x50c>
10020320:	00bfc034 	movhi	r2,65280
10020324:	10bfffc4 	addi	r2,r2,-1
10020328:	29010004 	addi	r4,r5,1024
1002032c:	80a0703a 	and	r16,r16,r2
10020330:	0081ff84 	movi	r2,2046
10020334:	1100320e 	bge	r2,r4,10020400 <__muldf3+0x5dc>
10020338:	b4c0004c 	andi	r19,r22,1
1002033c:	0101ffc4 	movi	r4,2047
10020340:	0021883a 	mov	r16,zero
10020344:	0025883a 	mov	r18,zero
10020348:	003f1006 	br	1001ff8c <__alt_data_end+0xf001ff8c>
1002034c:	8080022c 	andhi	r2,r16,8
10020350:	10000926 	beq	r2,zero,10020378 <__muldf3+0x554>
10020354:	8880022c 	andhi	r2,r17,8
10020358:	1000071e 	bne	r2,zero,10020378 <__muldf3+0x554>
1002035c:	00800434 	movhi	r2,16
10020360:	8c000234 	orhi	r16,r17,8
10020364:	10bfffc4 	addi	r2,r2,-1
10020368:	1827883a 	mov	r19,r3
1002036c:	80a0703a 	and	r16,r16,r2
10020370:	b825883a 	mov	r18,r23
10020374:	003f6a06 	br	10020120 <__alt_data_end+0xf0020120>
10020378:	00800434 	movhi	r2,16
1002037c:	84000234 	orhi	r16,r16,8
10020380:	10bfffc4 	addi	r2,r2,-1
10020384:	80a0703a 	and	r16,r16,r2
10020388:	003f6506 	br	10020120 <__alt_data_end+0xf0020120>
1002038c:	3009883a 	mov	r4,r6
10020390:	d8c00215 	stw	r3,8(sp)
10020394:	d9800315 	stw	r6,12(sp)
10020398:	da800015 	stw	r10,0(sp)
1002039c:	dac00115 	stw	r11,4(sp)
100203a0:	00211ac0 	call	100211ac <__clzsi2>
100203a4:	11000804 	addi	r4,r2,32
100203a8:	014009c4 	movi	r5,39
100203ac:	d8c00217 	ldw	r3,8(sp)
100203b0:	d9800317 	ldw	r6,12(sp)
100203b4:	da800017 	ldw	r10,0(sp)
100203b8:	dac00117 	ldw	r11,4(sp)
100203bc:	293f320e 	bge	r5,r4,10020088 <__alt_data_end+0xf0020088>
100203c0:	10bffe04 	addi	r2,r2,-8
100203c4:	b8a2983a 	sll	r17,r23,r2
100203c8:	002f883a 	mov	r23,zero
100203cc:	003f3506 	br	100200a4 <__alt_data_end+0xf00200a4>
100203d0:	d9800315 	stw	r6,12(sp)
100203d4:	d9c00015 	stw	r7,0(sp)
100203d8:	00211ac0 	call	100211ac <__clzsi2>
100203dc:	10c00804 	addi	r3,r2,32
100203e0:	010009c4 	movi	r4,39
100203e4:	d9800317 	ldw	r6,12(sp)
100203e8:	d9c00017 	ldw	r7,0(sp)
100203ec:	20ff060e 	bge	r4,r3,10020008 <__alt_data_end+0xf0020008>
100203f0:	10bffe04 	addi	r2,r2,-8
100203f4:	88a0983a 	sll	r16,r17,r2
100203f8:	0025883a 	mov	r18,zero
100203fc:	003f0906 	br	10020024 <__alt_data_end+0xf0020024>
10020400:	9004d0fa 	srli	r2,r18,3
10020404:	8024977a 	slli	r18,r16,29
10020408:	8020927a 	slli	r16,r16,9
1002040c:	2101ffcc 	andi	r4,r4,2047
10020410:	90a4b03a 	or	r18,r18,r2
10020414:	8020d33a 	srli	r16,r16,12
10020418:	b4c0004c 	andi	r19,r22,1
1002041c:	003edb06 	br	1001ff8c <__alt_data_end+0xf001ff8c>
10020420:	00ff0084 	movi	r3,-1022
10020424:	1947c83a 	sub	r3,r3,r5
10020428:	00800e04 	movi	r2,56
1002042c:	10c0080e 	bge	r2,r3,10020450 <__muldf3+0x62c>
10020430:	b4c0004c 	andi	r19,r22,1
10020434:	0009883a 	mov	r4,zero
10020438:	0021883a 	mov	r16,zero
1002043c:	0025883a 	mov	r18,zero
10020440:	003ed206 	br	1001ff8c <__alt_data_end+0xf001ff8c>
10020444:	600b883a 	mov	r5,r12
10020448:	e02d883a 	mov	r22,fp
1002044c:	003fa706 	br	100202ec <__alt_data_end+0xf00202ec>
10020450:	008007c4 	movi	r2,31
10020454:	10c01816 	blt	r2,r3,100204b8 <__muldf3+0x694>
10020458:	29410784 	addi	r5,r5,1054
1002045c:	8144983a 	sll	r2,r16,r5
10020460:	90c8d83a 	srl	r4,r18,r3
10020464:	914a983a 	sll	r5,r18,r5
10020468:	80c6d83a 	srl	r3,r16,r3
1002046c:	2088b03a 	or	r4,r4,r2
10020470:	2804c03a 	cmpne	r2,r5,zero
10020474:	2084b03a 	or	r2,r4,r2
10020478:	110001cc 	andi	r4,r2,7
1002047c:	20000726 	beq	r4,zero,1002049c <__muldf3+0x678>
10020480:	114003cc 	andi	r5,r2,15
10020484:	01000104 	movi	r4,4
10020488:	29000426 	beq	r5,r4,1002049c <__muldf3+0x678>
1002048c:	11000104 	addi	r4,r2,4
10020490:	2085803a 	cmpltu	r2,r4,r2
10020494:	1887883a 	add	r3,r3,r2
10020498:	2005883a 	mov	r2,r4
1002049c:	1900202c 	andhi	r4,r3,128
100204a0:	20001826 	beq	r4,zero,10020504 <__muldf3+0x6e0>
100204a4:	b4c0004c 	andi	r19,r22,1
100204a8:	01000044 	movi	r4,1
100204ac:	0021883a 	mov	r16,zero
100204b0:	0025883a 	mov	r18,zero
100204b4:	003eb506 	br	1001ff8c <__alt_data_end+0xf001ff8c>
100204b8:	00bef884 	movi	r2,-1054
100204bc:	1145c83a 	sub	r2,r2,r5
100204c0:	8088d83a 	srl	r4,r16,r2
100204c4:	00800804 	movi	r2,32
100204c8:	18801726 	beq	r3,r2,10020528 <__muldf3+0x704>
100204cc:	28810f84 	addi	r2,r5,1086
100204d0:	8084983a 	sll	r2,r16,r2
100204d4:	1484b03a 	or	r2,r2,r18
100204d8:	1004c03a 	cmpne	r2,r2,zero
100204dc:	1104b03a 	or	r2,r2,r4
100204e0:	10c001cc 	andi	r3,r2,7
100204e4:	18000b1e 	bne	r3,zero,10020514 <__muldf3+0x6f0>
100204e8:	0021883a 	mov	r16,zero
100204ec:	1004d0fa 	srli	r2,r2,3
100204f0:	b4c0004c 	andi	r19,r22,1
100204f4:	0009883a 	mov	r4,zero
100204f8:	10e4b03a 	or	r18,r2,r3
100204fc:	003ea306 	br	1001ff8c <__alt_data_end+0xf001ff8c>
10020500:	0007883a 	mov	r3,zero
10020504:	1820927a 	slli	r16,r3,9
10020508:	1806977a 	slli	r3,r3,29
1002050c:	8020d33a 	srli	r16,r16,12
10020510:	003ff606 	br	100204ec <__alt_data_end+0xf00204ec>
10020514:	110003cc 	andi	r4,r2,15
10020518:	00c00104 	movi	r3,4
1002051c:	20fff826 	beq	r4,r3,10020500 <__alt_data_end+0xf0020500>
10020520:	0007883a 	mov	r3,zero
10020524:	003fd906 	br	1002048c <__alt_data_end+0xf002048c>
10020528:	0005883a 	mov	r2,zero
1002052c:	003fe906 	br	100204d4 <__alt_data_end+0xf00204d4>
10020530:	00800434 	movhi	r2,16
10020534:	84000234 	orhi	r16,r16,8
10020538:	10bfffc4 	addi	r2,r2,-1
1002053c:	e4c0004c 	andi	r19,fp,1
10020540:	80a0703a 	and	r16,r16,r2
10020544:	003ef606 	br	10020120 <__alt_data_end+0xf0020120>

10020548 <__subdf3>:
10020548:	00c00434 	movhi	r3,16
1002054c:	18ffffc4 	addi	r3,r3,-1
10020550:	defffb04 	addi	sp,sp,-20
10020554:	28d2703a 	and	r9,r5,r3
10020558:	3814d53a 	srli	r10,r7,20
1002055c:	38c6703a 	and	r3,r7,r3
10020560:	3004d77a 	srli	r2,r6,29
10020564:	dc800215 	stw	r18,8(sp)
10020568:	dc000015 	stw	r16,0(sp)
1002056c:	2824d7fa 	srli	r18,r5,31
10020570:	2820d53a 	srli	r16,r5,20
10020574:	481290fa 	slli	r9,r9,3
10020578:	200ad77a 	srli	r5,r4,29
1002057c:	180690fa 	slli	r3,r3,3
10020580:	dc400115 	stw	r17,4(sp)
10020584:	dfc00415 	stw	ra,16(sp)
10020588:	202290fa 	slli	r17,r4,3
1002058c:	dcc00315 	stw	r19,12(sp)
10020590:	5281ffcc 	andi	r10,r10,2047
10020594:	0101ffc4 	movi	r4,2047
10020598:	9011883a 	mov	r8,r18
1002059c:	8401ffcc 	andi	r16,r16,2047
100205a0:	94803fcc 	andi	r18,r18,255
100205a4:	494ab03a 	or	r5,r9,r5
100205a8:	380ed7fa 	srli	r7,r7,31
100205ac:	1886b03a 	or	r3,r3,r2
100205b0:	300c90fa 	slli	r6,r6,3
100205b4:	51009026 	beq	r10,r4,100207f8 <__subdf3+0x2b0>
100205b8:	39c0005c 	xori	r7,r7,1
100205bc:	8285c83a 	sub	r2,r16,r10
100205c0:	91c06f26 	beq	r18,r7,10020780 <__subdf3+0x238>
100205c4:	0080b10e 	bge	zero,r2,1002088c <__subdf3+0x344>
100205c8:	50002a1e 	bne	r10,zero,10020674 <__subdf3+0x12c>
100205cc:	1988b03a 	or	r4,r3,r6
100205d0:	2000941e 	bne	r4,zero,10020824 <__subdf3+0x2dc>
100205d4:	888001cc 	andi	r2,r17,7
100205d8:	10005b26 	beq	r2,zero,10020748 <__subdf3+0x200>
100205dc:	88c003cc 	andi	r3,r17,15
100205e0:	00800104 	movi	r2,4
100205e4:	18805826 	beq	r3,r2,10020748 <__subdf3+0x200>
100205e8:	88c00104 	addi	r3,r17,4
100205ec:	1c63803a 	cmpltu	r17,r3,r17
100205f0:	2c4b883a 	add	r5,r5,r17
100205f4:	2880202c 	andhi	r2,r5,128
100205f8:	9200004c 	andi	r8,r18,1
100205fc:	1823883a 	mov	r17,r3
10020600:	10005426 	beq	r2,zero,10020754 <__subdf3+0x20c>
10020604:	84000044 	addi	r16,r16,1
10020608:	0081ffc4 	movi	r2,2047
1002060c:	8080bf26 	beq	r16,r2,1002090c <__subdf3+0x3c4>
10020610:	013fe034 	movhi	r4,65408
10020614:	213fffc4 	addi	r4,r4,-1
10020618:	290a703a 	and	r5,r5,r4
1002061c:	2804977a 	slli	r2,r5,29
10020620:	280a927a 	slli	r5,r5,9
10020624:	8822d0fa 	srli	r17,r17,3
10020628:	8401ffcc 	andi	r16,r16,2047
1002062c:	2808d33a 	srli	r4,r5,12
10020630:	1444b03a 	or	r2,r2,r17
10020634:	8401ffcc 	andi	r16,r16,2047
10020638:	800a953a 	slli	r5,r16,20
1002063c:	40c03fcc 	andi	r3,r8,255
10020640:	04000434 	movhi	r16,16
10020644:	180697fa 	slli	r3,r3,31
10020648:	843fffc4 	addi	r16,r16,-1
1002064c:	2420703a 	and	r16,r4,r16
10020650:	8160b03a 	or	r16,r16,r5
10020654:	80c6b03a 	or	r3,r16,r3
10020658:	dfc00417 	ldw	ra,16(sp)
1002065c:	dcc00317 	ldw	r19,12(sp)
10020660:	dc800217 	ldw	r18,8(sp)
10020664:	dc400117 	ldw	r17,4(sp)
10020668:	dc000017 	ldw	r16,0(sp)
1002066c:	dec00504 	addi	sp,sp,20
10020670:	f800283a 	ret
10020674:	0101ffc4 	movi	r4,2047
10020678:	813fd626 	beq	r16,r4,100205d4 <__alt_data_end+0xf00205d4>
1002067c:	18c02034 	orhi	r3,r3,128
10020680:	01000e04 	movi	r4,56
10020684:	2080a416 	blt	r4,r2,10020918 <__subdf3+0x3d0>
10020688:	010007c4 	movi	r4,31
1002068c:	2080c716 	blt	r4,r2,100209ac <__subdf3+0x464>
10020690:	01000804 	movi	r4,32
10020694:	2089c83a 	sub	r4,r4,r2
10020698:	1910983a 	sll	r8,r3,r4
1002069c:	308ed83a 	srl	r7,r6,r2
100206a0:	3108983a 	sll	r4,r6,r4
100206a4:	1884d83a 	srl	r2,r3,r2
100206a8:	41ccb03a 	or	r6,r8,r7
100206ac:	2008c03a 	cmpne	r4,r4,zero
100206b0:	310cb03a 	or	r6,r6,r4
100206b4:	898dc83a 	sub	r6,r17,r6
100206b8:	89a3803a 	cmpltu	r17,r17,r6
100206bc:	288bc83a 	sub	r5,r5,r2
100206c0:	2c4bc83a 	sub	r5,r5,r17
100206c4:	3023883a 	mov	r17,r6
100206c8:	2880202c 	andhi	r2,r5,128
100206cc:	10006b26 	beq	r2,zero,1002087c <__subdf3+0x334>
100206d0:	04c02034 	movhi	r19,128
100206d4:	9cffffc4 	addi	r19,r19,-1
100206d8:	2ce6703a 	and	r19,r5,r19
100206dc:	98007c26 	beq	r19,zero,100208d0 <__subdf3+0x388>
100206e0:	9809883a 	mov	r4,r19
100206e4:	00211ac0 	call	100211ac <__clzsi2>
100206e8:	10fffe04 	addi	r3,r2,-8
100206ec:	010007c4 	movi	r4,31
100206f0:	20c07d16 	blt	r4,r3,100208e8 <__subdf3+0x3a0>
100206f4:	01400a04 	movi	r5,40
100206f8:	2885c83a 	sub	r2,r5,r2
100206fc:	888ad83a 	srl	r5,r17,r2
10020700:	98e6983a 	sll	r19,r19,r3
10020704:	88e2983a 	sll	r17,r17,r3
10020708:	2ce6b03a 	or	r19,r5,r19
1002070c:	1c007a16 	blt	r3,r16,100208f8 <__subdf3+0x3b0>
10020710:	1c21c83a 	sub	r16,r3,r16
10020714:	81400044 	addi	r5,r16,1
10020718:	00c007c4 	movi	r3,31
1002071c:	19409616 	blt	r3,r5,10020978 <__subdf3+0x430>
10020720:	1c21c83a 	sub	r16,r3,r16
10020724:	8c08983a 	sll	r4,r17,r16
10020728:	8946d83a 	srl	r3,r17,r5
1002072c:	9c20983a 	sll	r16,r19,r16
10020730:	2008c03a 	cmpne	r4,r4,zero
10020734:	994ad83a 	srl	r5,r19,r5
10020738:	1c06b03a 	or	r3,r3,r16
1002073c:	1922b03a 	or	r17,r3,r4
10020740:	0021883a 	mov	r16,zero
10020744:	003fa306 	br	100205d4 <__alt_data_end+0xf00205d4>
10020748:	2880202c 	andhi	r2,r5,128
1002074c:	9200004c 	andi	r8,r18,1
10020750:	103fac1e 	bne	r2,zero,10020604 <__alt_data_end+0xf0020604>
10020754:	2804977a 	slli	r2,r5,29
10020758:	8822d0fa 	srli	r17,r17,3
1002075c:	00c1ffc4 	movi	r3,2047
10020760:	280ad0fa 	srli	r5,r5,3
10020764:	1444b03a 	or	r2,r2,r17
10020768:	80c02726 	beq	r16,r3,10020808 <__subdf3+0x2c0>
1002076c:	01000434 	movhi	r4,16
10020770:	213fffc4 	addi	r4,r4,-1
10020774:	80e0703a 	and	r16,r16,r3
10020778:	2908703a 	and	r4,r5,r4
1002077c:	003fad06 	br	10020634 <__alt_data_end+0xf0020634>
10020780:	0080690e 	bge	zero,r2,10020928 <__subdf3+0x3e0>
10020784:	50002f26 	beq	r10,zero,10020844 <__subdf3+0x2fc>
10020788:	0101ffc4 	movi	r4,2047
1002078c:	813f9126 	beq	r16,r4,100205d4 <__alt_data_end+0xf00205d4>
10020790:	18c02034 	orhi	r3,r3,128
10020794:	01000e04 	movi	r4,56
10020798:	2080b00e 	bge	r4,r2,10020a5c <__subdf3+0x514>
1002079c:	198cb03a 	or	r6,r3,r6
100207a0:	300ec03a 	cmpne	r7,r6,zero
100207a4:	0005883a 	mov	r2,zero
100207a8:	3c4f883a 	add	r7,r7,r17
100207ac:	3c63803a 	cmpltu	r17,r7,r17
100207b0:	114b883a 	add	r5,r2,r5
100207b4:	2c4b883a 	add	r5,r5,r17
100207b8:	3823883a 	mov	r17,r7
100207bc:	2880202c 	andhi	r2,r5,128
100207c0:	10002e26 	beq	r2,zero,1002087c <__subdf3+0x334>
100207c4:	84000044 	addi	r16,r16,1
100207c8:	0081ffc4 	movi	r2,2047
100207cc:	8080de26 	beq	r16,r2,10020b48 <__subdf3+0x600>
100207d0:	00bfe034 	movhi	r2,65408
100207d4:	10bfffc4 	addi	r2,r2,-1
100207d8:	288a703a 	and	r5,r5,r2
100207dc:	880cd07a 	srli	r6,r17,1
100207e0:	280897fa 	slli	r4,r5,31
100207e4:	88c0004c 	andi	r3,r17,1
100207e8:	30e2b03a 	or	r17,r6,r3
100207ec:	280ad07a 	srli	r5,r5,1
100207f0:	8922b03a 	or	r17,r17,r4
100207f4:	003f7706 	br	100205d4 <__alt_data_end+0xf00205d4>
100207f8:	1984b03a 	or	r2,r3,r6
100207fc:	103f6e26 	beq	r2,zero,100205b8 <__alt_data_end+0xf00205b8>
10020800:	39c03fcc 	andi	r7,r7,255
10020804:	003f6d06 	br	100205bc <__alt_data_end+0xf00205bc>
10020808:	1146b03a 	or	r3,r2,r5
1002080c:	18003f26 	beq	r3,zero,1002090c <__subdf3+0x3c4>
10020810:	00c00434 	movhi	r3,16
10020814:	29000234 	orhi	r4,r5,8
10020818:	18ffffc4 	addi	r3,r3,-1
1002081c:	20c8703a 	and	r4,r4,r3
10020820:	003f8406 	br	10020634 <__alt_data_end+0xf0020634>
10020824:	10bfffc4 	addi	r2,r2,-1
10020828:	1000501e 	bne	r2,zero,1002096c <__subdf3+0x424>
1002082c:	898fc83a 	sub	r7,r17,r6
10020830:	89e3803a 	cmpltu	r17,r17,r7
10020834:	28cbc83a 	sub	r5,r5,r3
10020838:	2c4bc83a 	sub	r5,r5,r17
1002083c:	3823883a 	mov	r17,r7
10020840:	003fa106 	br	100206c8 <__alt_data_end+0xf00206c8>
10020844:	1988b03a 	or	r4,r3,r6
10020848:	203f6226 	beq	r4,zero,100205d4 <__alt_data_end+0xf00205d4>
1002084c:	10bfffc4 	addi	r2,r2,-1
10020850:	10009b1e 	bne	r2,zero,10020ac0 <__subdf3+0x578>
10020854:	344d883a 	add	r6,r6,r17
10020858:	3463803a 	cmpltu	r17,r6,r17
1002085c:	194b883a 	add	r5,r3,r5
10020860:	2c4b883a 	add	r5,r5,r17
10020864:	3023883a 	mov	r17,r6
10020868:	003fd406 	br	100207bc <__alt_data_end+0xf00207bc>
1002086c:	1106b03a 	or	r3,r2,r4
10020870:	1800b426 	beq	r3,zero,10020b44 <__subdf3+0x5fc>
10020874:	100b883a 	mov	r5,r2
10020878:	2023883a 	mov	r17,r4
1002087c:	888001cc 	andi	r2,r17,7
10020880:	103f561e 	bne	r2,zero,100205dc <__alt_data_end+0xf00205dc>
10020884:	9200004c 	andi	r8,r18,1
10020888:	003fb206 	br	10020754 <__alt_data_end+0xf0020754>
1002088c:	1000531e 	bne	r2,zero,100209dc <__subdf3+0x494>
10020890:	80800044 	addi	r2,r16,1
10020894:	1081ffcc 	andi	r2,r2,2047
10020898:	01000044 	movi	r4,1
1002089c:	2080a00e 	bge	r4,r2,10020b20 <__subdf3+0x5d8>
100208a0:	8985c83a 	sub	r2,r17,r6
100208a4:	8889803a 	cmpltu	r4,r17,r2
100208a8:	28e7c83a 	sub	r19,r5,r3
100208ac:	9927c83a 	sub	r19,r19,r4
100208b0:	9900202c 	andhi	r4,r19,128
100208b4:	20006226 	beq	r4,zero,10020a40 <__subdf3+0x4f8>
100208b8:	3463c83a 	sub	r17,r6,r17
100208bc:	194bc83a 	sub	r5,r3,r5
100208c0:	344d803a 	cmpltu	r6,r6,r17
100208c4:	29a7c83a 	sub	r19,r5,r6
100208c8:	3825883a 	mov	r18,r7
100208cc:	983f841e 	bne	r19,zero,100206e0 <__alt_data_end+0xf00206e0>
100208d0:	8809883a 	mov	r4,r17
100208d4:	00211ac0 	call	100211ac <__clzsi2>
100208d8:	10800804 	addi	r2,r2,32
100208dc:	10fffe04 	addi	r3,r2,-8
100208e0:	010007c4 	movi	r4,31
100208e4:	20ff830e 	bge	r4,r3,100206f4 <__alt_data_end+0xf00206f4>
100208e8:	14fff604 	addi	r19,r2,-40
100208ec:	8ce6983a 	sll	r19,r17,r19
100208f0:	0023883a 	mov	r17,zero
100208f4:	1c3f860e 	bge	r3,r16,10020710 <__alt_data_end+0xf0020710>
100208f8:	017fe034 	movhi	r5,65408
100208fc:	297fffc4 	addi	r5,r5,-1
10020900:	80e1c83a 	sub	r16,r16,r3
10020904:	994a703a 	and	r5,r19,r5
10020908:	003f3206 	br	100205d4 <__alt_data_end+0xf00205d4>
1002090c:	0009883a 	mov	r4,zero
10020910:	0005883a 	mov	r2,zero
10020914:	003f4706 	br	10020634 <__alt_data_end+0xf0020634>
10020918:	198cb03a 	or	r6,r3,r6
1002091c:	300cc03a 	cmpne	r6,r6,zero
10020920:	0005883a 	mov	r2,zero
10020924:	003f6306 	br	100206b4 <__alt_data_end+0xf00206b4>
10020928:	10009d1e 	bne	r2,zero,10020ba0 <__subdf3+0x658>
1002092c:	81c00044 	addi	r7,r16,1
10020930:	3881ffcc 	andi	r2,r7,2047
10020934:	02400044 	movi	r9,1
10020938:	4880680e 	bge	r9,r2,10020adc <__subdf3+0x594>
1002093c:	0081ffc4 	movi	r2,2047
10020940:	3880ae26 	beq	r7,r2,10020bfc <__subdf3+0x6b4>
10020944:	344d883a 	add	r6,r6,r17
10020948:	3463803a 	cmpltu	r17,r6,r17
1002094c:	194b883a 	add	r5,r3,r5
10020950:	2c4b883a 	add	r5,r5,r17
10020954:	282297fa 	slli	r17,r5,31
10020958:	300cd07a 	srli	r6,r6,1
1002095c:	280ad07a 	srli	r5,r5,1
10020960:	3821883a 	mov	r16,r7
10020964:	89a2b03a 	or	r17,r17,r6
10020968:	003f1a06 	br	100205d4 <__alt_data_end+0xf00205d4>
1002096c:	0101ffc4 	movi	r4,2047
10020970:	813f431e 	bne	r16,r4,10020680 <__alt_data_end+0xf0020680>
10020974:	003f1706 	br	100205d4 <__alt_data_end+0xf00205d4>
10020978:	80bff844 	addi	r2,r16,-31
1002097c:	00c00804 	movi	r3,32
10020980:	9884d83a 	srl	r2,r19,r2
10020984:	28c05126 	beq	r5,r3,10020acc <__subdf3+0x584>
10020988:	00c00fc4 	movi	r3,63
1002098c:	1c21c83a 	sub	r16,r3,r16
10020990:	9c26983a 	sll	r19,r19,r16
10020994:	9c62b03a 	or	r17,r19,r17
10020998:	8822c03a 	cmpne	r17,r17,zero
1002099c:	88a2b03a 	or	r17,r17,r2
100209a0:	000b883a 	mov	r5,zero
100209a4:	0021883a 	mov	r16,zero
100209a8:	003fb406 	br	1002087c <__alt_data_end+0xf002087c>
100209ac:	113ff804 	addi	r4,r2,-32
100209b0:	01c00804 	movi	r7,32
100209b4:	1908d83a 	srl	r4,r3,r4
100209b8:	11c04626 	beq	r2,r7,10020ad4 <__subdf3+0x58c>
100209bc:	01c01004 	movi	r7,64
100209c0:	3885c83a 	sub	r2,r7,r2
100209c4:	1884983a 	sll	r2,r3,r2
100209c8:	118cb03a 	or	r6,r2,r6
100209cc:	300cc03a 	cmpne	r6,r6,zero
100209d0:	310cb03a 	or	r6,r6,r4
100209d4:	0005883a 	mov	r2,zero
100209d8:	003f3606 	br	100206b4 <__alt_data_end+0xf00206b4>
100209dc:	80002b26 	beq	r16,zero,10020a8c <__subdf3+0x544>
100209e0:	0101ffc4 	movi	r4,2047
100209e4:	51006926 	beq	r10,r4,10020b8c <__subdf3+0x644>
100209e8:	0085c83a 	sub	r2,zero,r2
100209ec:	29402034 	orhi	r5,r5,128
100209f0:	01000e04 	movi	r4,56
100209f4:	20807d16 	blt	r4,r2,10020bec <__subdf3+0x6a4>
100209f8:	010007c4 	movi	r4,31
100209fc:	2080d916 	blt	r4,r2,10020d64 <__subdf3+0x81c>
10020a00:	01000804 	movi	r4,32
10020a04:	2089c83a 	sub	r4,r4,r2
10020a08:	2912983a 	sll	r9,r5,r4
10020a0c:	8890d83a 	srl	r8,r17,r2
10020a10:	8908983a 	sll	r4,r17,r4
10020a14:	2884d83a 	srl	r2,r5,r2
10020a18:	4a22b03a 	or	r17,r9,r8
10020a1c:	2008c03a 	cmpne	r4,r4,zero
10020a20:	8922b03a 	or	r17,r17,r4
10020a24:	3463c83a 	sub	r17,r6,r17
10020a28:	1885c83a 	sub	r2,r3,r2
10020a2c:	344d803a 	cmpltu	r6,r6,r17
10020a30:	118bc83a 	sub	r5,r2,r6
10020a34:	5021883a 	mov	r16,r10
10020a38:	3825883a 	mov	r18,r7
10020a3c:	003f2206 	br	100206c8 <__alt_data_end+0xf00206c8>
10020a40:	9886b03a 	or	r3,r19,r2
10020a44:	18001c1e 	bne	r3,zero,10020ab8 <__subdf3+0x570>
10020a48:	0011883a 	mov	r8,zero
10020a4c:	000b883a 	mov	r5,zero
10020a50:	0023883a 	mov	r17,zero
10020a54:	0021883a 	mov	r16,zero
10020a58:	003f3e06 	br	10020754 <__alt_data_end+0xf0020754>
10020a5c:	010007c4 	movi	r4,31
10020a60:	20803c16 	blt	r4,r2,10020b54 <__subdf3+0x60c>
10020a64:	01000804 	movi	r4,32
10020a68:	2089c83a 	sub	r4,r4,r2
10020a6c:	1912983a 	sll	r9,r3,r4
10020a70:	308ed83a 	srl	r7,r6,r2
10020a74:	3108983a 	sll	r4,r6,r4
10020a78:	1884d83a 	srl	r2,r3,r2
10020a7c:	49ceb03a 	or	r7,r9,r7
10020a80:	2008c03a 	cmpne	r4,r4,zero
10020a84:	390eb03a 	or	r7,r7,r4
10020a88:	003f4706 	br	100207a8 <__alt_data_end+0xf00207a8>
10020a8c:	2c48b03a 	or	r4,r5,r17
10020a90:	20003e26 	beq	r4,zero,10020b8c <__subdf3+0x644>
10020a94:	0084303a 	nor	r2,zero,r2
10020a98:	10003a1e 	bne	r2,zero,10020b84 <__subdf3+0x63c>
10020a9c:	3463c83a 	sub	r17,r6,r17
10020aa0:	194bc83a 	sub	r5,r3,r5
10020aa4:	344d803a 	cmpltu	r6,r6,r17
10020aa8:	298bc83a 	sub	r5,r5,r6
10020aac:	5021883a 	mov	r16,r10
10020ab0:	3825883a 	mov	r18,r7
10020ab4:	003f0406 	br	100206c8 <__alt_data_end+0xf00206c8>
10020ab8:	1023883a 	mov	r17,r2
10020abc:	003f0706 	br	100206dc <__alt_data_end+0xf00206dc>
10020ac0:	0101ffc4 	movi	r4,2047
10020ac4:	813f331e 	bne	r16,r4,10020794 <__alt_data_end+0xf0020794>
10020ac8:	003ec206 	br	100205d4 <__alt_data_end+0xf00205d4>
10020acc:	0027883a 	mov	r19,zero
10020ad0:	003fb006 	br	10020994 <__alt_data_end+0xf0020994>
10020ad4:	0005883a 	mov	r2,zero
10020ad8:	003fbb06 	br	100209c8 <__alt_data_end+0xf00209c8>
10020adc:	2c44b03a 	or	r2,r5,r17
10020ae0:	80008b1e 	bne	r16,zero,10020d10 <__subdf3+0x7c8>
10020ae4:	1000b526 	beq	r2,zero,10020dbc <__subdf3+0x874>
10020ae8:	1984b03a 	or	r2,r3,r6
10020aec:	103eb926 	beq	r2,zero,100205d4 <__alt_data_end+0xf00205d4>
10020af0:	3449883a 	add	r4,r6,r17
10020af4:	2463803a 	cmpltu	r17,r4,r17
10020af8:	194b883a 	add	r5,r3,r5
10020afc:	2c4b883a 	add	r5,r5,r17
10020b00:	2880202c 	andhi	r2,r5,128
10020b04:	2023883a 	mov	r17,r4
10020b08:	103f5c26 	beq	r2,zero,1002087c <__alt_data_end+0xf002087c>
10020b0c:	00bfe034 	movhi	r2,65408
10020b10:	10bfffc4 	addi	r2,r2,-1
10020b14:	4821883a 	mov	r16,r9
10020b18:	288a703a 	and	r5,r5,r2
10020b1c:	003ead06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020b20:	2c44b03a 	or	r2,r5,r17
10020b24:	8000291e 	bne	r16,zero,10020bcc <__subdf3+0x684>
10020b28:	10004f1e 	bne	r2,zero,10020c68 <__subdf3+0x720>
10020b2c:	1984b03a 	or	r2,r3,r6
10020b30:	10000426 	beq	r2,zero,10020b44 <__subdf3+0x5fc>
10020b34:	180b883a 	mov	r5,r3
10020b38:	3023883a 	mov	r17,r6
10020b3c:	3825883a 	mov	r18,r7
10020b40:	003ea406 	br	100205d4 <__alt_data_end+0xf00205d4>
10020b44:	0011883a 	mov	r8,zero
10020b48:	000b883a 	mov	r5,zero
10020b4c:	0023883a 	mov	r17,zero
10020b50:	003f0006 	br	10020754 <__alt_data_end+0xf0020754>
10020b54:	11fff804 	addi	r7,r2,-32
10020b58:	19c8d83a 	srl	r4,r3,r7
10020b5c:	01c00804 	movi	r7,32
10020b60:	11c07e26 	beq	r2,r7,10020d5c <__subdf3+0x814>
10020b64:	01c01004 	movi	r7,64
10020b68:	3885c83a 	sub	r2,r7,r2
10020b6c:	1884983a 	sll	r2,r3,r2
10020b70:	118cb03a 	or	r6,r2,r6
10020b74:	300ec03a 	cmpne	r7,r6,zero
10020b78:	390eb03a 	or	r7,r7,r4
10020b7c:	0005883a 	mov	r2,zero
10020b80:	003f0906 	br	100207a8 <__alt_data_end+0xf00207a8>
10020b84:	0101ffc4 	movi	r4,2047
10020b88:	513f991e 	bne	r10,r4,100209f0 <__alt_data_end+0xf00209f0>
10020b8c:	180b883a 	mov	r5,r3
10020b90:	3023883a 	mov	r17,r6
10020b94:	5021883a 	mov	r16,r10
10020b98:	3825883a 	mov	r18,r7
10020b9c:	003e8d06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020ba0:	80001a1e 	bne	r16,zero,10020c0c <__subdf3+0x6c4>
10020ba4:	2c48b03a 	or	r4,r5,r17
10020ba8:	20005526 	beq	r4,zero,10020d00 <__subdf3+0x7b8>
10020bac:	0084303a 	nor	r2,zero,r2
10020bb0:	1000511e 	bne	r2,zero,10020cf8 <__subdf3+0x7b0>
10020bb4:	89a3883a 	add	r17,r17,r6
10020bb8:	194b883a 	add	r5,r3,r5
10020bbc:	898d803a 	cmpltu	r6,r17,r6
10020bc0:	298b883a 	add	r5,r5,r6
10020bc4:	5021883a 	mov	r16,r10
10020bc8:	003efc06 	br	100207bc <__alt_data_end+0xf00207bc>
10020bcc:	1000341e 	bne	r2,zero,10020ca0 <__subdf3+0x758>
10020bd0:	1984b03a 	or	r2,r3,r6
10020bd4:	10006f26 	beq	r2,zero,10020d94 <__subdf3+0x84c>
10020bd8:	180b883a 	mov	r5,r3
10020bdc:	3023883a 	mov	r17,r6
10020be0:	3825883a 	mov	r18,r7
10020be4:	0401ffc4 	movi	r16,2047
10020be8:	003e7a06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020bec:	2c62b03a 	or	r17,r5,r17
10020bf0:	8822c03a 	cmpne	r17,r17,zero
10020bf4:	0005883a 	mov	r2,zero
10020bf8:	003f8a06 	br	10020a24 <__alt_data_end+0xf0020a24>
10020bfc:	3821883a 	mov	r16,r7
10020c00:	000b883a 	mov	r5,zero
10020c04:	0023883a 	mov	r17,zero
10020c08:	003ed206 	br	10020754 <__alt_data_end+0xf0020754>
10020c0c:	0101ffc4 	movi	r4,2047
10020c10:	51003b26 	beq	r10,r4,10020d00 <__subdf3+0x7b8>
10020c14:	0085c83a 	sub	r2,zero,r2
10020c18:	29402034 	orhi	r5,r5,128
10020c1c:	01000e04 	movi	r4,56
10020c20:	20806216 	blt	r4,r2,10020dac <__subdf3+0x864>
10020c24:	010007c4 	movi	r4,31
10020c28:	20806b16 	blt	r4,r2,10020dd8 <__subdf3+0x890>
10020c2c:	01000804 	movi	r4,32
10020c30:	2089c83a 	sub	r4,r4,r2
10020c34:	2912983a 	sll	r9,r5,r4
10020c38:	888ed83a 	srl	r7,r17,r2
10020c3c:	8908983a 	sll	r4,r17,r4
10020c40:	2884d83a 	srl	r2,r5,r2
10020c44:	49e2b03a 	or	r17,r9,r7
10020c48:	2008c03a 	cmpne	r4,r4,zero
10020c4c:	8922b03a 	or	r17,r17,r4
10020c50:	89a3883a 	add	r17,r17,r6
10020c54:	10c5883a 	add	r2,r2,r3
10020c58:	898d803a 	cmpltu	r6,r17,r6
10020c5c:	118b883a 	add	r5,r2,r6
10020c60:	5021883a 	mov	r16,r10
10020c64:	003ed506 	br	100207bc <__alt_data_end+0xf00207bc>
10020c68:	1984b03a 	or	r2,r3,r6
10020c6c:	103e5926 	beq	r2,zero,100205d4 <__alt_data_end+0xf00205d4>
10020c70:	8989c83a 	sub	r4,r17,r6
10020c74:	8911803a 	cmpltu	r8,r17,r4
10020c78:	28c5c83a 	sub	r2,r5,r3
10020c7c:	1205c83a 	sub	r2,r2,r8
10020c80:	1200202c 	andhi	r8,r2,128
10020c84:	403ef926 	beq	r8,zero,1002086c <__alt_data_end+0xf002086c>
10020c88:	3463c83a 	sub	r17,r6,r17
10020c8c:	194bc83a 	sub	r5,r3,r5
10020c90:	344d803a 	cmpltu	r6,r6,r17
10020c94:	298bc83a 	sub	r5,r5,r6
10020c98:	3825883a 	mov	r18,r7
10020c9c:	003e4d06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020ca0:	1984b03a 	or	r2,r3,r6
10020ca4:	10002b26 	beq	r2,zero,10020d54 <__subdf3+0x80c>
10020ca8:	2808d0fa 	srli	r4,r5,3
10020cac:	8822d0fa 	srli	r17,r17,3
10020cb0:	280a977a 	slli	r5,r5,29
10020cb4:	2080022c 	andhi	r2,r4,8
10020cb8:	2c62b03a 	or	r17,r5,r17
10020cbc:	10000826 	beq	r2,zero,10020ce0 <__subdf3+0x798>
10020cc0:	1810d0fa 	srli	r8,r3,3
10020cc4:	4080022c 	andhi	r2,r8,8
10020cc8:	1000051e 	bne	r2,zero,10020ce0 <__subdf3+0x798>
10020ccc:	300cd0fa 	srli	r6,r6,3
10020cd0:	1804977a 	slli	r2,r3,29
10020cd4:	4009883a 	mov	r4,r8
10020cd8:	3825883a 	mov	r18,r7
10020cdc:	11a2b03a 	or	r17,r2,r6
10020ce0:	880ad77a 	srli	r5,r17,29
10020ce4:	200890fa 	slli	r4,r4,3
10020ce8:	882290fa 	slli	r17,r17,3
10020cec:	0401ffc4 	movi	r16,2047
10020cf0:	290ab03a 	or	r5,r5,r4
10020cf4:	003e3706 	br	100205d4 <__alt_data_end+0xf00205d4>
10020cf8:	0101ffc4 	movi	r4,2047
10020cfc:	513fc71e 	bne	r10,r4,10020c1c <__alt_data_end+0xf0020c1c>
10020d00:	180b883a 	mov	r5,r3
10020d04:	3023883a 	mov	r17,r6
10020d08:	5021883a 	mov	r16,r10
10020d0c:	003e3106 	br	100205d4 <__alt_data_end+0xf00205d4>
10020d10:	10002d26 	beq	r2,zero,10020dc8 <__subdf3+0x880>
10020d14:	1984b03a 	or	r2,r3,r6
10020d18:	10000e26 	beq	r2,zero,10020d54 <__subdf3+0x80c>
10020d1c:	2808d0fa 	srli	r4,r5,3
10020d20:	8822d0fa 	srli	r17,r17,3
10020d24:	280a977a 	slli	r5,r5,29
10020d28:	2080022c 	andhi	r2,r4,8
10020d2c:	2c62b03a 	or	r17,r5,r17
10020d30:	103feb26 	beq	r2,zero,10020ce0 <__alt_data_end+0xf0020ce0>
10020d34:	180ed0fa 	srli	r7,r3,3
10020d38:	3880022c 	andhi	r2,r7,8
10020d3c:	103fe81e 	bne	r2,zero,10020ce0 <__alt_data_end+0xf0020ce0>
10020d40:	300cd0fa 	srli	r6,r6,3
10020d44:	1804977a 	slli	r2,r3,29
10020d48:	3809883a 	mov	r4,r7
10020d4c:	11a2b03a 	or	r17,r2,r6
10020d50:	003fe306 	br	10020ce0 <__alt_data_end+0xf0020ce0>
10020d54:	0401ffc4 	movi	r16,2047
10020d58:	003e1e06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020d5c:	0005883a 	mov	r2,zero
10020d60:	003f8306 	br	10020b70 <__alt_data_end+0xf0020b70>
10020d64:	113ff804 	addi	r4,r2,-32
10020d68:	02000804 	movi	r8,32
10020d6c:	2908d83a 	srl	r4,r5,r4
10020d70:	12002526 	beq	r2,r8,10020e08 <__subdf3+0x8c0>
10020d74:	02001004 	movi	r8,64
10020d78:	4085c83a 	sub	r2,r8,r2
10020d7c:	288a983a 	sll	r5,r5,r2
10020d80:	2c62b03a 	or	r17,r5,r17
10020d84:	8822c03a 	cmpne	r17,r17,zero
10020d88:	8922b03a 	or	r17,r17,r4
10020d8c:	0005883a 	mov	r2,zero
10020d90:	003f2406 	br	10020a24 <__alt_data_end+0xf0020a24>
10020d94:	01402034 	movhi	r5,128
10020d98:	0011883a 	mov	r8,zero
10020d9c:	297fffc4 	addi	r5,r5,-1
10020da0:	047ffe04 	movi	r17,-8
10020da4:	0401ffc4 	movi	r16,2047
10020da8:	003e6a06 	br	10020754 <__alt_data_end+0xf0020754>
10020dac:	2c62b03a 	or	r17,r5,r17
10020db0:	8822c03a 	cmpne	r17,r17,zero
10020db4:	0005883a 	mov	r2,zero
10020db8:	003fa506 	br	10020c50 <__alt_data_end+0xf0020c50>
10020dbc:	180b883a 	mov	r5,r3
10020dc0:	3023883a 	mov	r17,r6
10020dc4:	003e0306 	br	100205d4 <__alt_data_end+0xf00205d4>
10020dc8:	180b883a 	mov	r5,r3
10020dcc:	3023883a 	mov	r17,r6
10020dd0:	0401ffc4 	movi	r16,2047
10020dd4:	003dff06 	br	100205d4 <__alt_data_end+0xf00205d4>
10020dd8:	113ff804 	addi	r4,r2,-32
10020ddc:	01c00804 	movi	r7,32
10020de0:	2908d83a 	srl	r4,r5,r4
10020de4:	11c00a26 	beq	r2,r7,10020e10 <__subdf3+0x8c8>
10020de8:	01c01004 	movi	r7,64
10020dec:	3885c83a 	sub	r2,r7,r2
10020df0:	288a983a 	sll	r5,r5,r2
10020df4:	2c62b03a 	or	r17,r5,r17
10020df8:	8822c03a 	cmpne	r17,r17,zero
10020dfc:	8922b03a 	or	r17,r17,r4
10020e00:	0005883a 	mov	r2,zero
10020e04:	003f9206 	br	10020c50 <__alt_data_end+0xf0020c50>
10020e08:	000b883a 	mov	r5,zero
10020e0c:	003fdc06 	br	10020d80 <__alt_data_end+0xf0020d80>
10020e10:	000b883a 	mov	r5,zero
10020e14:	003ff706 	br	10020df4 <__alt_data_end+0xf0020df4>

10020e18 <__fixdfsi>:
10020e18:	2806d53a 	srli	r3,r5,20
10020e1c:	00800434 	movhi	r2,16
10020e20:	10bfffc4 	addi	r2,r2,-1
10020e24:	18c1ffcc 	andi	r3,r3,2047
10020e28:	0180ff84 	movi	r6,1022
10020e2c:	2884703a 	and	r2,r5,r2
10020e30:	280ad7fa 	srli	r5,r5,31
10020e34:	30c0130e 	bge	r6,r3,10020e84 <__fixdfsi+0x6c>
10020e38:	01810744 	movi	r6,1053
10020e3c:	30c00d16 	blt	r6,r3,10020e74 <__fixdfsi+0x5c>
10020e40:	01810cc4 	movi	r6,1075
10020e44:	30cdc83a 	sub	r6,r6,r3
10020e48:	01c007c4 	movi	r7,31
10020e4c:	10800434 	orhi	r2,r2,16
10020e50:	39800e0e 	bge	r7,r6,10020e8c <__fixdfsi+0x74>
10020e54:	010104c4 	movi	r4,1043
10020e58:	20c7c83a 	sub	r3,r4,r3
10020e5c:	10c6d83a 	srl	r3,r2,r3
10020e60:	29403fcc 	andi	r5,r5,255
10020e64:	0145c83a 	sub	r2,zero,r5
10020e68:	1884f03a 	xor	r2,r3,r2
10020e6c:	1145883a 	add	r2,r2,r5
10020e70:	f800283a 	ret
10020e74:	00a00034 	movhi	r2,32768
10020e78:	10bfffc4 	addi	r2,r2,-1
10020e7c:	2885883a 	add	r2,r5,r2
10020e80:	f800283a 	ret
10020e84:	0005883a 	mov	r2,zero
10020e88:	f800283a 	ret
10020e8c:	18fefb44 	addi	r3,r3,-1043
10020e90:	2188d83a 	srl	r4,r4,r6
10020e94:	10c6983a 	sll	r3,r2,r3
10020e98:	20c6b03a 	or	r3,r4,r3
10020e9c:	003ff006 	br	10020e60 <__alt_data_end+0xf0020e60>

10020ea0 <__floatsidf>:
10020ea0:	defffd04 	addi	sp,sp,-12
10020ea4:	dc400115 	stw	r17,4(sp)
10020ea8:	dfc00215 	stw	ra,8(sp)
10020eac:	dc000015 	stw	r16,0(sp)
10020eb0:	2023883a 	mov	r17,r4
10020eb4:	20001426 	beq	r4,zero,10020f08 <__floatsidf+0x68>
10020eb8:	2020d7fa 	srli	r16,r4,31
10020ebc:	80000126 	beq	r16,zero,10020ec4 <__floatsidf+0x24>
10020ec0:	0123c83a 	sub	r17,zero,r4
10020ec4:	8809883a 	mov	r4,r17
10020ec8:	00211ac0 	call	100211ac <__clzsi2>
10020ecc:	01410784 	movi	r5,1054
10020ed0:	00c00284 	movi	r3,10
10020ed4:	288bc83a 	sub	r5,r5,r2
10020ed8:	18801c16 	blt	r3,r2,10020f4c <__floatsidf+0xac>
10020edc:	00c002c4 	movi	r3,11
10020ee0:	1887c83a 	sub	r3,r3,r2
10020ee4:	88c8d83a 	srl	r4,r17,r3
10020ee8:	00c00434 	movhi	r3,16
10020eec:	18ffffc4 	addi	r3,r3,-1
10020ef0:	10800544 	addi	r2,r2,21
10020ef4:	20c8703a 	and	r4,r4,r3
10020ef8:	8884983a 	sll	r2,r17,r2
10020efc:	28c1ffcc 	andi	r3,r5,2047
10020f00:	800d883a 	mov	r6,r16
10020f04:	00000406 	br	10020f18 <__floatsidf+0x78>
10020f08:	000d883a 	mov	r6,zero
10020f0c:	0007883a 	mov	r3,zero
10020f10:	0009883a 	mov	r4,zero
10020f14:	0005883a 	mov	r2,zero
10020f18:	180a953a 	slli	r5,r3,20
10020f1c:	31803fcc 	andi	r6,r6,255
10020f20:	00c00434 	movhi	r3,16
10020f24:	300c97fa 	slli	r6,r6,31
10020f28:	18ffffc4 	addi	r3,r3,-1
10020f2c:	20c6703a 	and	r3,r4,r3
10020f30:	1946b03a 	or	r3,r3,r5
10020f34:	1986b03a 	or	r3,r3,r6
10020f38:	dfc00217 	ldw	ra,8(sp)
10020f3c:	dc400117 	ldw	r17,4(sp)
10020f40:	dc000017 	ldw	r16,0(sp)
10020f44:	dec00304 	addi	sp,sp,12
10020f48:	f800283a 	ret
10020f4c:	10fffd44 	addi	r3,r2,-11
10020f50:	88c8983a 	sll	r4,r17,r3
10020f54:	00800434 	movhi	r2,16
10020f58:	10bfffc4 	addi	r2,r2,-1
10020f5c:	2088703a 	and	r4,r4,r2
10020f60:	28c1ffcc 	andi	r3,r5,2047
10020f64:	800d883a 	mov	r6,r16
10020f68:	0005883a 	mov	r2,zero
10020f6c:	003fea06 	br	10020f18 <__alt_data_end+0xf0020f18>

10020f70 <__floatunsidf>:
10020f70:	defffe04 	addi	sp,sp,-8
10020f74:	dc000015 	stw	r16,0(sp)
10020f78:	dfc00115 	stw	ra,4(sp)
10020f7c:	2021883a 	mov	r16,r4
10020f80:	20001026 	beq	r4,zero,10020fc4 <__floatunsidf+0x54>
10020f84:	00211ac0 	call	100211ac <__clzsi2>
10020f88:	01410784 	movi	r5,1054
10020f8c:	100d883a 	mov	r6,r2
10020f90:	288bc83a 	sub	r5,r5,r2
10020f94:	00800284 	movi	r2,10
10020f98:	11801616 	blt	r2,r6,10020ff4 <__floatunsidf+0x84>
10020f9c:	008002c4 	movi	r2,11
10020fa0:	1185c83a 	sub	r2,r2,r6
10020fa4:	8084d83a 	srl	r2,r16,r2
10020fa8:	00c00434 	movhi	r3,16
10020fac:	31c00544 	addi	r7,r6,21
10020fb0:	18ffffc4 	addi	r3,r3,-1
10020fb4:	81e0983a 	sll	r16,r16,r7
10020fb8:	10cc703a 	and	r6,r2,r3
10020fbc:	2941ffcc 	andi	r5,r5,2047
10020fc0:	00000206 	br	10020fcc <__floatunsidf+0x5c>
10020fc4:	000b883a 	mov	r5,zero
10020fc8:	000d883a 	mov	r6,zero
10020fcc:	280a953a 	slli	r5,r5,20
10020fd0:	00c00434 	movhi	r3,16
10020fd4:	18ffffc4 	addi	r3,r3,-1
10020fd8:	30c6703a 	and	r3,r6,r3
10020fdc:	8005883a 	mov	r2,r16
10020fe0:	1946b03a 	or	r3,r3,r5
10020fe4:	dfc00117 	ldw	ra,4(sp)
10020fe8:	dc000017 	ldw	r16,0(sp)
10020fec:	dec00204 	addi	sp,sp,8
10020ff0:	f800283a 	ret
10020ff4:	31bffd44 	addi	r6,r6,-11
10020ff8:	818c983a 	sll	r6,r16,r6
10020ffc:	00800434 	movhi	r2,16
10021000:	10bfffc4 	addi	r2,r2,-1
10021004:	2941ffcc 	andi	r5,r5,2047
10021008:	0021883a 	mov	r16,zero
1002100c:	308c703a 	and	r6,r6,r2
10021010:	003fee06 	br	10020fcc <__alt_data_end+0xf0020fcc>

10021014 <__truncdfsf2>:
10021014:	2810d53a 	srli	r8,r5,20
10021018:	01c00434 	movhi	r7,16
1002101c:	39ffffc4 	addi	r7,r7,-1
10021020:	29ce703a 	and	r7,r5,r7
10021024:	380e90fa 	slli	r7,r7,3
10021028:	4201ffcc 	andi	r8,r8,2047
1002102c:	200cd77a 	srli	r6,r4,29
10021030:	42400044 	addi	r9,r8,1
10021034:	4a41ffcc 	andi	r9,r9,2047
10021038:	00800044 	movi	r2,1
1002103c:	398cb03a 	or	r6,r7,r6
10021040:	280ad7fa 	srli	r5,r5,31
10021044:	200e90fa 	slli	r7,r4,3
10021048:	1240230e 	bge	r2,r9,100210d8 <__truncdfsf2+0xc4>
1002104c:	40ff2004 	addi	r3,r8,-896
10021050:	00803f84 	movi	r2,254
10021054:	10c01516 	blt	r2,r3,100210ac <__truncdfsf2+0x98>
10021058:	00c02d0e 	bge	zero,r3,10021110 <__truncdfsf2+0xfc>
1002105c:	200891ba 	slli	r4,r4,6
10021060:	300c90fa 	slli	r6,r6,3
10021064:	380ed77a 	srli	r7,r7,29
10021068:	2008c03a 	cmpne	r4,r4,zero
1002106c:	310cb03a 	or	r6,r6,r4
10021070:	31ccb03a 	or	r6,r6,r7
10021074:	308001cc 	andi	r2,r6,7
10021078:	10000426 	beq	r2,zero,1002108c <__truncdfsf2+0x78>
1002107c:	310003cc 	andi	r4,r6,15
10021080:	00800104 	movi	r2,4
10021084:	20800126 	beq	r4,r2,1002108c <__truncdfsf2+0x78>
10021088:	31800104 	addi	r6,r6,4
1002108c:	3081002c 	andhi	r2,r6,1024
10021090:	10002326 	beq	r2,zero,10021120 <__truncdfsf2+0x10c>
10021094:	18c00044 	addi	r3,r3,1
10021098:	00803fc4 	movi	r2,255
1002109c:	18800326 	beq	r3,r2,100210ac <__truncdfsf2+0x98>
100210a0:	300c91ba 	slli	r6,r6,6
100210a4:	300cd27a 	srli	r6,r6,9
100210a8:	00000206 	br	100210b4 <__truncdfsf2+0xa0>
100210ac:	00ffffc4 	movi	r3,-1
100210b0:	000d883a 	mov	r6,zero
100210b4:	18c03fcc 	andi	r3,r3,255
100210b8:	180895fa 	slli	r4,r3,23
100210bc:	00c02034 	movhi	r3,128
100210c0:	280a97fa 	slli	r5,r5,31
100210c4:	18ffffc4 	addi	r3,r3,-1
100210c8:	30c6703a 	and	r3,r6,r3
100210cc:	1906b03a 	or	r3,r3,r4
100210d0:	1944b03a 	or	r2,r3,r5
100210d4:	f800283a 	ret
100210d8:	4000071e 	bne	r8,zero,100210f8 <__truncdfsf2+0xe4>
100210dc:	31ccb03a 	or	r6,r6,r7
100210e0:	30000d1e 	bne	r6,zero,10021118 <__truncdfsf2+0x104>
100210e4:	0007883a 	mov	r3,zero
100210e8:	00802034 	movhi	r2,128
100210ec:	10bfffc4 	addi	r2,r2,-1
100210f0:	308c703a 	and	r6,r6,r2
100210f4:	003fef06 	br	100210b4 <__alt_data_end+0xf00210b4>
100210f8:	31c8b03a 	or	r4,r6,r7
100210fc:	203feb26 	beq	r4,zero,100210ac <__alt_data_end+0xf00210ac>
10021100:	300c90fa 	slli	r6,r6,3
10021104:	00c03fc4 	movi	r3,255
10021108:	31808034 	orhi	r6,r6,512
1002110c:	003fd906 	br	10021074 <__alt_data_end+0xf0021074>
10021110:	00bffa44 	movi	r2,-23
10021114:	1880090e 	bge	r3,r2,1002113c <__truncdfsf2+0x128>
10021118:	01800144 	movi	r6,5
1002111c:	0007883a 	mov	r3,zero
10021120:	00803fc4 	movi	r2,255
10021124:	300cd0fa 	srli	r6,r6,3
10021128:	18bfef1e 	bne	r3,r2,100210e8 <__alt_data_end+0xf00210e8>
1002112c:	303fdf26 	beq	r6,zero,100210ac <__alt_data_end+0xf00210ac>
10021130:	31801034 	orhi	r6,r6,64
10021134:	00ffffc4 	movi	r3,-1
10021138:	003feb06 	br	100210e8 <__alt_data_end+0xf00210e8>
1002113c:	0080e784 	movi	r2,926
10021140:	1205c83a 	sub	r2,r2,r8
10021144:	00c007c4 	movi	r3,31
10021148:	31802034 	orhi	r6,r6,128
1002114c:	18800916 	blt	r3,r2,10021174 <__truncdfsf2+0x160>
10021150:	423f2084 	addi	r8,r8,-894
10021154:	3a06983a 	sll	r3,r7,r8
10021158:	3210983a 	sll	r8,r6,r8
1002115c:	388ed83a 	srl	r7,r7,r2
10021160:	180cc03a 	cmpne	r6,r3,zero
10021164:	418cb03a 	or	r6,r8,r6
10021168:	31ccb03a 	or	r6,r6,r7
1002116c:	0007883a 	mov	r3,zero
10021170:	003fc006 	br	10021074 <__alt_data_end+0xf0021074>
10021174:	00c0df84 	movi	r3,894
10021178:	1a07c83a 	sub	r3,r3,r8
1002117c:	01000804 	movi	r4,32
10021180:	30c6d83a 	srl	r3,r6,r3
10021184:	11000726 	beq	r2,r4,100211a4 <__truncdfsf2+0x190>
10021188:	423f2884 	addi	r8,r8,-862
1002118c:	3210983a 	sll	r8,r6,r8
10021190:	41ceb03a 	or	r7,r8,r7
10021194:	380ec03a 	cmpne	r7,r7,zero
10021198:	38ccb03a 	or	r6,r7,r3
1002119c:	0007883a 	mov	r3,zero
100211a0:	003fb406 	br	10021074 <__alt_data_end+0xf0021074>
100211a4:	0011883a 	mov	r8,zero
100211a8:	003ff906 	br	10021190 <__alt_data_end+0xf0021190>

100211ac <__clzsi2>:
100211ac:	00bfffd4 	movui	r2,65535
100211b0:	11000b36 	bltu	r2,r4,100211e0 <__clzsi2+0x34>
100211b4:	00803fc4 	movi	r2,255
100211b8:	1100122e 	bgeu	r2,r4,10021204 <__clzsi2+0x58>
100211bc:	00c00204 	movi	r3,8
100211c0:	01400604 	movi	r5,24
100211c4:	20c8d83a 	srl	r4,r4,r3
100211c8:	008400b4 	movhi	r2,4098
100211cc:	10957704 	addi	r2,r2,21980
100211d0:	1109883a 	add	r4,r2,r4
100211d4:	20800003 	ldbu	r2,0(r4)
100211d8:	2885c83a 	sub	r2,r5,r2
100211dc:	f800283a 	ret
100211e0:	00804034 	movhi	r2,256
100211e4:	10bfffc4 	addi	r2,r2,-1
100211e8:	11000336 	bltu	r2,r4,100211f8 <__clzsi2+0x4c>
100211ec:	00c00404 	movi	r3,16
100211f0:	180b883a 	mov	r5,r3
100211f4:	003ff306 	br	100211c4 <__alt_data_end+0xf00211c4>
100211f8:	00c00604 	movi	r3,24
100211fc:	01400204 	movi	r5,8
10021200:	003ff006 	br	100211c4 <__alt_data_end+0xf00211c4>
10021204:	0007883a 	mov	r3,zero
10021208:	01400804 	movi	r5,32
1002120c:	003fed06 	br	100211c4 <__alt_data_end+0xf00211c4>

10021210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10021210:	defffe04 	addi	sp,sp,-8
10021214:	dfc00115 	stw	ra,4(sp)
10021218:	df000015 	stw	fp,0(sp)
1002121c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10021220:	008400b4 	movhi	r2,4098
10021224:	109d1b04 	addi	r2,r2,29804
10021228:	10800017 	ldw	r2,0(r2)
1002122c:	10000526 	beq	r2,zero,10021244 <alt_get_errno+0x34>
10021230:	008400b4 	movhi	r2,4098
10021234:	109d1b04 	addi	r2,r2,29804
10021238:	10800017 	ldw	r2,0(r2)
1002123c:	103ee83a 	callr	r2
10021240:	00000206 	br	1002124c <alt_get_errno+0x3c>
10021244:	008400f4 	movhi	r2,4099
10021248:	10a48b04 	addi	r2,r2,-28116
}
1002124c:	e037883a 	mov	sp,fp
10021250:	dfc00117 	ldw	ra,4(sp)
10021254:	df000017 	ldw	fp,0(sp)
10021258:	dec00204 	addi	sp,sp,8
1002125c:	f800283a 	ret

10021260 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10021260:	defffb04 	addi	sp,sp,-20
10021264:	dfc00415 	stw	ra,16(sp)
10021268:	df000315 	stw	fp,12(sp)
1002126c:	df000304 	addi	fp,sp,12
10021270:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10021274:	e0bfff17 	ldw	r2,-4(fp)
10021278:	10000616 	blt	r2,zero,10021294 <close+0x34>
1002127c:	e0bfff17 	ldw	r2,-4(fp)
10021280:	10c00324 	muli	r3,r2,12
10021284:	008400b4 	movhi	r2,4098
10021288:	10982204 	addi	r2,r2,24712
1002128c:	1885883a 	add	r2,r3,r2
10021290:	00000106 	br	10021298 <close+0x38>
10021294:	0005883a 	mov	r2,zero
10021298:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1002129c:	e0bffd17 	ldw	r2,-12(fp)
100212a0:	10001926 	beq	r2,zero,10021308 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100212a4:	e0bffd17 	ldw	r2,-12(fp)
100212a8:	10800017 	ldw	r2,0(r2)
100212ac:	10800417 	ldw	r2,16(r2)
100212b0:	10000626 	beq	r2,zero,100212cc <close+0x6c>
100212b4:	e0bffd17 	ldw	r2,-12(fp)
100212b8:	10800017 	ldw	r2,0(r2)
100212bc:	10800417 	ldw	r2,16(r2)
100212c0:	e13ffd17 	ldw	r4,-12(fp)
100212c4:	103ee83a 	callr	r2
100212c8:	00000106 	br	100212d0 <close+0x70>
100212cc:	0005883a 	mov	r2,zero
100212d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
100212d4:	e13fff17 	ldw	r4,-4(fp)
100212d8:	0021c2c0 	call	10021c2c <alt_release_fd>
    if (rval < 0)
100212dc:	e0bffe17 	ldw	r2,-8(fp)
100212e0:	1000070e 	bge	r2,zero,10021300 <close+0xa0>
    {
      ALT_ERRNO = -rval;
100212e4:	00212100 	call	10021210 <alt_get_errno>
100212e8:	1007883a 	mov	r3,r2
100212ec:	e0bffe17 	ldw	r2,-8(fp)
100212f0:	0085c83a 	sub	r2,zero,r2
100212f4:	18800015 	stw	r2,0(r3)
      return -1;
100212f8:	00bfffc4 	movi	r2,-1
100212fc:	00000706 	br	1002131c <close+0xbc>
    }
    return 0;
10021300:	0005883a 	mov	r2,zero
10021304:	00000506 	br	1002131c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10021308:	00212100 	call	10021210 <alt_get_errno>
1002130c:	1007883a 	mov	r3,r2
10021310:	00801444 	movi	r2,81
10021314:	18800015 	stw	r2,0(r3)
    return -1;
10021318:	00bfffc4 	movi	r2,-1
  }
}
1002131c:	e037883a 	mov	sp,fp
10021320:	dfc00117 	ldw	ra,4(sp)
10021324:	df000017 	ldw	fp,0(sp)
10021328:	dec00204 	addi	sp,sp,8
1002132c:	f800283a 	ret

10021330 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10021330:	defffc04 	addi	sp,sp,-16
10021334:	df000315 	stw	fp,12(sp)
10021338:	df000304 	addi	fp,sp,12
1002133c:	e13ffd15 	stw	r4,-12(fp)
10021340:	e17ffe15 	stw	r5,-8(fp)
10021344:	e1bfff15 	stw	r6,-4(fp)
  return len;
10021348:	e0bfff17 	ldw	r2,-4(fp)
}
1002134c:	e037883a 	mov	sp,fp
10021350:	df000017 	ldw	fp,0(sp)
10021354:	dec00104 	addi	sp,sp,4
10021358:	f800283a 	ret

1002135c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1002135c:	defffe04 	addi	sp,sp,-8
10021360:	dfc00115 	stw	ra,4(sp)
10021364:	df000015 	stw	fp,0(sp)
10021368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1002136c:	008400b4 	movhi	r2,4098
10021370:	109d1b04 	addi	r2,r2,29804
10021374:	10800017 	ldw	r2,0(r2)
10021378:	10000526 	beq	r2,zero,10021390 <alt_get_errno+0x34>
1002137c:	008400b4 	movhi	r2,4098
10021380:	109d1b04 	addi	r2,r2,29804
10021384:	10800017 	ldw	r2,0(r2)
10021388:	103ee83a 	callr	r2
1002138c:	00000206 	br	10021398 <alt_get_errno+0x3c>
10021390:	008400f4 	movhi	r2,4099
10021394:	10a48b04 	addi	r2,r2,-28116
}
10021398:	e037883a 	mov	sp,fp
1002139c:	dfc00117 	ldw	ra,4(sp)
100213a0:	df000017 	ldw	fp,0(sp)
100213a4:	dec00204 	addi	sp,sp,8
100213a8:	f800283a 	ret

100213ac <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100213ac:	defffb04 	addi	sp,sp,-20
100213b0:	dfc00415 	stw	ra,16(sp)
100213b4:	df000315 	stw	fp,12(sp)
100213b8:	df000304 	addi	fp,sp,12
100213bc:	e13ffe15 	stw	r4,-8(fp)
100213c0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
100213c4:	e0bffe17 	ldw	r2,-8(fp)
100213c8:	10000616 	blt	r2,zero,100213e4 <fstat+0x38>
100213cc:	e0bffe17 	ldw	r2,-8(fp)
100213d0:	10c00324 	muli	r3,r2,12
100213d4:	008400b4 	movhi	r2,4098
100213d8:	10982204 	addi	r2,r2,24712
100213dc:	1885883a 	add	r2,r3,r2
100213e0:	00000106 	br	100213e8 <fstat+0x3c>
100213e4:	0005883a 	mov	r2,zero
100213e8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
100213ec:	e0bffd17 	ldw	r2,-12(fp)
100213f0:	10001026 	beq	r2,zero,10021434 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
100213f4:	e0bffd17 	ldw	r2,-12(fp)
100213f8:	10800017 	ldw	r2,0(r2)
100213fc:	10800817 	ldw	r2,32(r2)
10021400:	10000726 	beq	r2,zero,10021420 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
10021404:	e0bffd17 	ldw	r2,-12(fp)
10021408:	10800017 	ldw	r2,0(r2)
1002140c:	10800817 	ldw	r2,32(r2)
10021410:	e13ffd17 	ldw	r4,-12(fp)
10021414:	e17fff17 	ldw	r5,-4(fp)
10021418:	103ee83a 	callr	r2
1002141c:	00000a06 	br	10021448 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
10021420:	e0bfff17 	ldw	r2,-4(fp)
10021424:	00c80004 	movi	r3,8192
10021428:	10c00115 	stw	r3,4(r2)
      return 0;
1002142c:	0005883a 	mov	r2,zero
10021430:	00000506 	br	10021448 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10021434:	002135c0 	call	1002135c <alt_get_errno>
10021438:	1007883a 	mov	r3,r2
1002143c:	00801444 	movi	r2,81
10021440:	18800015 	stw	r2,0(r3)
    return -1;
10021444:	00bfffc4 	movi	r2,-1
  }
}
10021448:	e037883a 	mov	sp,fp
1002144c:	dfc00117 	ldw	ra,4(sp)
10021450:	df000017 	ldw	fp,0(sp)
10021454:	dec00204 	addi	sp,sp,8
10021458:	f800283a 	ret

1002145c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1002145c:	defff904 	addi	sp,sp,-28
10021460:	dfc00615 	stw	ra,24(sp)
10021464:	df000515 	stw	fp,20(sp)
10021468:	df000504 	addi	fp,sp,20
1002146c:	e13ffc15 	stw	r4,-16(fp)
10021470:	e17ffd15 	stw	r5,-12(fp)
10021474:	e1bffe15 	stw	r6,-8(fp)
10021478:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1002147c:	e0800217 	ldw	r2,8(fp)
10021480:	d8800015 	stw	r2,0(sp)
10021484:	e13ffc17 	ldw	r4,-16(fp)
10021488:	e17ffd17 	ldw	r5,-12(fp)
1002148c:	e1bffe17 	ldw	r6,-8(fp)
10021490:	e1ffff17 	ldw	r7,-4(fp)
10021494:	002163c0 	call	1002163c <alt_iic_isr_register>
}  
10021498:	e037883a 	mov	sp,fp
1002149c:	dfc00117 	ldw	ra,4(sp)
100214a0:	df000017 	ldw	fp,0(sp)
100214a4:	dec00204 	addi	sp,sp,8
100214a8:	f800283a 	ret

100214ac <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100214ac:	defff904 	addi	sp,sp,-28
100214b0:	df000615 	stw	fp,24(sp)
100214b4:	df000604 	addi	fp,sp,24
100214b8:	e13ffe15 	stw	r4,-8(fp)
100214bc:	e17fff15 	stw	r5,-4(fp)
100214c0:	e0bfff17 	ldw	r2,-4(fp)
100214c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100214c8:	0005303a 	rdctl	r2,status
100214cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100214d0:	e0fffb17 	ldw	r3,-20(fp)
100214d4:	00bfff84 	movi	r2,-2
100214d8:	1884703a 	and	r2,r3,r2
100214dc:	1001703a 	wrctl	status,r2
  
  return context;
100214e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100214e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100214e8:	e0bffa17 	ldw	r2,-24(fp)
100214ec:	00c00044 	movi	r3,1
100214f0:	1884983a 	sll	r2,r3,r2
100214f4:	1007883a 	mov	r3,r2
100214f8:	008400f4 	movhi	r2,4099
100214fc:	10a48c04 	addi	r2,r2,-28112
10021500:	10800017 	ldw	r2,0(r2)
10021504:	1886b03a 	or	r3,r3,r2
10021508:	008400f4 	movhi	r2,4099
1002150c:	10a48c04 	addi	r2,r2,-28112
10021510:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10021514:	008400f4 	movhi	r2,4099
10021518:	10a48c04 	addi	r2,r2,-28112
1002151c:	10800017 	ldw	r2,0(r2)
10021520:	100170fa 	wrctl	ienable,r2
10021524:	e0bffc17 	ldw	r2,-16(fp)
10021528:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1002152c:	e0bffd17 	ldw	r2,-12(fp)
10021530:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10021534:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10021538:	0001883a 	nop
}
1002153c:	e037883a 	mov	sp,fp
10021540:	df000017 	ldw	fp,0(sp)
10021544:	dec00104 	addi	sp,sp,4
10021548:	f800283a 	ret

1002154c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1002154c:	defff904 	addi	sp,sp,-28
10021550:	df000615 	stw	fp,24(sp)
10021554:	df000604 	addi	fp,sp,24
10021558:	e13ffe15 	stw	r4,-8(fp)
1002155c:	e17fff15 	stw	r5,-4(fp)
10021560:	e0bfff17 	ldw	r2,-4(fp)
10021564:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021568:	0005303a 	rdctl	r2,status
1002156c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021570:	e0fffb17 	ldw	r3,-20(fp)
10021574:	00bfff84 	movi	r2,-2
10021578:	1884703a 	and	r2,r3,r2
1002157c:	1001703a 	wrctl	status,r2
  
  return context;
10021580:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10021584:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10021588:	e0bffa17 	ldw	r2,-24(fp)
1002158c:	00c00044 	movi	r3,1
10021590:	1884983a 	sll	r2,r3,r2
10021594:	0084303a 	nor	r2,zero,r2
10021598:	1007883a 	mov	r3,r2
1002159c:	008400f4 	movhi	r2,4099
100215a0:	10a48c04 	addi	r2,r2,-28112
100215a4:	10800017 	ldw	r2,0(r2)
100215a8:	1886703a 	and	r3,r3,r2
100215ac:	008400f4 	movhi	r2,4099
100215b0:	10a48c04 	addi	r2,r2,-28112
100215b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100215b8:	008400f4 	movhi	r2,4099
100215bc:	10a48c04 	addi	r2,r2,-28112
100215c0:	10800017 	ldw	r2,0(r2)
100215c4:	100170fa 	wrctl	ienable,r2
100215c8:	e0bffc17 	ldw	r2,-16(fp)
100215cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100215d0:	e0bffd17 	ldw	r2,-12(fp)
100215d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100215d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100215dc:	0001883a 	nop
}
100215e0:	e037883a 	mov	sp,fp
100215e4:	df000017 	ldw	fp,0(sp)
100215e8:	dec00104 	addi	sp,sp,4
100215ec:	f800283a 	ret

100215f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100215f0:	defffc04 	addi	sp,sp,-16
100215f4:	df000315 	stw	fp,12(sp)
100215f8:	df000304 	addi	fp,sp,12
100215fc:	e13ffe15 	stw	r4,-8(fp)
10021600:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10021604:	000530fa 	rdctl	r2,ienable
10021608:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1002160c:	e0bfff17 	ldw	r2,-4(fp)
10021610:	00c00044 	movi	r3,1
10021614:	1884983a 	sll	r2,r3,r2
10021618:	1007883a 	mov	r3,r2
1002161c:	e0bffd17 	ldw	r2,-12(fp)
10021620:	1884703a 	and	r2,r3,r2
10021624:	1004c03a 	cmpne	r2,r2,zero
10021628:	10803fcc 	andi	r2,r2,255
}
1002162c:	e037883a 	mov	sp,fp
10021630:	df000017 	ldw	fp,0(sp)
10021634:	dec00104 	addi	sp,sp,4
10021638:	f800283a 	ret

1002163c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1002163c:	defff504 	addi	sp,sp,-44
10021640:	dfc00a15 	stw	ra,40(sp)
10021644:	df000915 	stw	fp,36(sp)
10021648:	df000904 	addi	fp,sp,36
1002164c:	e13ffc15 	stw	r4,-16(fp)
10021650:	e17ffd15 	stw	r5,-12(fp)
10021654:	e1bffe15 	stw	r6,-8(fp)
10021658:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1002165c:	00bffa84 	movi	r2,-22
10021660:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10021664:	e0bffd17 	ldw	r2,-12(fp)
10021668:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1002166c:	e0bff817 	ldw	r2,-32(fp)
10021670:	10800808 	cmpgei	r2,r2,32
10021674:	1000271e 	bne	r2,zero,10021714 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021678:	0005303a 	rdctl	r2,status
1002167c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021680:	e0fffa17 	ldw	r3,-24(fp)
10021684:	00bfff84 	movi	r2,-2
10021688:	1884703a 	and	r2,r3,r2
1002168c:	1001703a 	wrctl	status,r2
  
  return context;
10021690:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10021694:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10021698:	008400f4 	movhi	r2,4099
1002169c:	10a56404 	addi	r2,r2,-27248
100216a0:	e0fff817 	ldw	r3,-32(fp)
100216a4:	180690fa 	slli	r3,r3,3
100216a8:	10c5883a 	add	r2,r2,r3
100216ac:	e0fffe17 	ldw	r3,-8(fp)
100216b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100216b4:	008400f4 	movhi	r2,4099
100216b8:	10a56404 	addi	r2,r2,-27248
100216bc:	e0fff817 	ldw	r3,-32(fp)
100216c0:	180690fa 	slli	r3,r3,3
100216c4:	10c5883a 	add	r2,r2,r3
100216c8:	10800104 	addi	r2,r2,4
100216cc:	e0ffff17 	ldw	r3,-4(fp)
100216d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100216d4:	e0bffe17 	ldw	r2,-8(fp)
100216d8:	10000526 	beq	r2,zero,100216f0 <alt_iic_isr_register+0xb4>
100216dc:	e0bff817 	ldw	r2,-32(fp)
100216e0:	e13ffc17 	ldw	r4,-16(fp)
100216e4:	100b883a 	mov	r5,r2
100216e8:	00214ac0 	call	100214ac <alt_ic_irq_enable>
100216ec:	00000406 	br	10021700 <alt_iic_isr_register+0xc4>
100216f0:	e0bff817 	ldw	r2,-32(fp)
100216f4:	e13ffc17 	ldw	r4,-16(fp)
100216f8:	100b883a 	mov	r5,r2
100216fc:	002154c0 	call	1002154c <alt_ic_irq_disable>
10021700:	e0bff715 	stw	r2,-36(fp)
10021704:	e0bff917 	ldw	r2,-28(fp)
10021708:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1002170c:	e0bffb17 	ldw	r2,-20(fp)
10021710:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10021714:	e0bff717 	ldw	r2,-36(fp)
}
10021718:	e037883a 	mov	sp,fp
1002171c:	dfc00117 	ldw	ra,4(sp)
10021720:	df000017 	ldw	fp,0(sp)
10021724:	dec00204 	addi	sp,sp,8
10021728:	f800283a 	ret

1002172c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1002172c:	defffe04 	addi	sp,sp,-8
10021730:	dfc00115 	stw	ra,4(sp)
10021734:	df000015 	stw	fp,0(sp)
10021738:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1002173c:	008400b4 	movhi	r2,4098
10021740:	109d1b04 	addi	r2,r2,29804
10021744:	10800017 	ldw	r2,0(r2)
10021748:	10000526 	beq	r2,zero,10021760 <alt_get_errno+0x34>
1002174c:	008400b4 	movhi	r2,4098
10021750:	109d1b04 	addi	r2,r2,29804
10021754:	10800017 	ldw	r2,0(r2)
10021758:	103ee83a 	callr	r2
1002175c:	00000206 	br	10021768 <alt_get_errno+0x3c>
10021760:	008400f4 	movhi	r2,4099
10021764:	10a48b04 	addi	r2,r2,-28116
}
10021768:	e037883a 	mov	sp,fp
1002176c:	dfc00117 	ldw	ra,4(sp)
10021770:	df000017 	ldw	fp,0(sp)
10021774:	dec00204 	addi	sp,sp,8
10021778:	f800283a 	ret

1002177c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1002177c:	deffed04 	addi	sp,sp,-76
10021780:	dfc01215 	stw	ra,72(sp)
10021784:	df001115 	stw	fp,68(sp)
10021788:	df001104 	addi	fp,sp,68
1002178c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10021790:	e0bfff17 	ldw	r2,-4(fp)
10021794:	10000616 	blt	r2,zero,100217b0 <isatty+0x34>
10021798:	e0bfff17 	ldw	r2,-4(fp)
1002179c:	10c00324 	muli	r3,r2,12
100217a0:	008400b4 	movhi	r2,4098
100217a4:	10982204 	addi	r2,r2,24712
100217a8:	1885883a 	add	r2,r3,r2
100217ac:	00000106 	br	100217b4 <isatty+0x38>
100217b0:	0005883a 	mov	r2,zero
100217b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
100217b8:	e0bfef17 	ldw	r2,-68(fp)
100217bc:	10000e26 	beq	r2,zero,100217f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
100217c0:	e0bfef17 	ldw	r2,-68(fp)
100217c4:	10800017 	ldw	r2,0(r2)
100217c8:	10800817 	ldw	r2,32(r2)
100217cc:	1000021e 	bne	r2,zero,100217d8 <isatty+0x5c>
    {
      return 1;
100217d0:	00800044 	movi	r2,1
100217d4:	00000d06 	br	1002180c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
100217d8:	e0bff004 	addi	r2,fp,-64
100217dc:	e13fff17 	ldw	r4,-4(fp)
100217e0:	100b883a 	mov	r5,r2
100217e4:	00213ac0 	call	100213ac <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
100217e8:	e0bff117 	ldw	r2,-60(fp)
100217ec:	10880020 	cmpeqi	r2,r2,8192
100217f0:	10803fcc 	andi	r2,r2,255
100217f4:	00000506 	br	1002180c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100217f8:	002172c0 	call	1002172c <alt_get_errno>
100217fc:	1007883a 	mov	r3,r2
10021800:	00801444 	movi	r2,81
10021804:	18800015 	stw	r2,0(r3)
    return 0;
10021808:	0005883a 	mov	r2,zero
  }
}
1002180c:	e037883a 	mov	sp,fp
10021810:	dfc00117 	ldw	ra,4(sp)
10021814:	df000017 	ldw	fp,0(sp)
10021818:	dec00204 	addi	sp,sp,8
1002181c:	f800283a 	ret

10021820 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10021820:	defffc04 	addi	sp,sp,-16
10021824:	df000315 	stw	fp,12(sp)
10021828:	df000304 	addi	fp,sp,12
1002182c:	e13ffd15 	stw	r4,-12(fp)
10021830:	e17ffe15 	stw	r5,-8(fp)
10021834:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10021838:	e0fffe17 	ldw	r3,-8(fp)
1002183c:	e0bffd17 	ldw	r2,-12(fp)
10021840:	18800c26 	beq	r3,r2,10021874 <alt_load_section+0x54>
  {
    while( to != end )
10021844:	00000806 	br	10021868 <alt_load_section+0x48>
    {
      *to++ = *from++;
10021848:	e0bffe17 	ldw	r2,-8(fp)
1002184c:	10c00104 	addi	r3,r2,4
10021850:	e0fffe15 	stw	r3,-8(fp)
10021854:	e0fffd17 	ldw	r3,-12(fp)
10021858:	19000104 	addi	r4,r3,4
1002185c:	e13ffd15 	stw	r4,-12(fp)
10021860:	18c00017 	ldw	r3,0(r3)
10021864:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10021868:	e0fffe17 	ldw	r3,-8(fp)
1002186c:	e0bfff17 	ldw	r2,-4(fp)
10021870:	18bff51e 	bne	r3,r2,10021848 <__alt_data_end+0xf0021848>
    {
      *to++ = *from++;
    }
  }
}
10021874:	e037883a 	mov	sp,fp
10021878:	df000017 	ldw	fp,0(sp)
1002187c:	dec00104 	addi	sp,sp,4
10021880:	f800283a 	ret

10021884 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10021884:	defffe04 	addi	sp,sp,-8
10021888:	dfc00115 	stw	ra,4(sp)
1002188c:	df000015 	stw	fp,0(sp)
10021890:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10021894:	010400b4 	movhi	r4,4098
10021898:	211d2204 	addi	r4,r4,29832
1002189c:	014400b4 	movhi	r5,4098
100218a0:	2955cd04 	addi	r5,r5,22324
100218a4:	018400b4 	movhi	r6,4098
100218a8:	319d2204 	addi	r6,r6,29832
100218ac:	00218200 	call	10021820 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
100218b0:	01040034 	movhi	r4,4096
100218b4:	21000804 	addi	r4,r4,32
100218b8:	01440034 	movhi	r5,4096
100218bc:	29400804 	addi	r5,r5,32
100218c0:	01840034 	movhi	r6,4096
100218c4:	31809004 	addi	r6,r6,576
100218c8:	00218200 	call	10021820 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100218cc:	010400b4 	movhi	r4,4098
100218d0:	2112bc04 	addi	r4,r4,19184
100218d4:	014400b4 	movhi	r5,4098
100218d8:	2952bc04 	addi	r5,r5,19184
100218dc:	018400b4 	movhi	r6,4098
100218e0:	3195cd04 	addi	r6,r6,22324
100218e4:	00218200 	call	10021820 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100218e8:	0023cc00 	call	10023cc0 <alt_dcache_flush_all>
  alt_icache_flush_all();
100218ec:	0023f400 	call	10023f40 <alt_icache_flush_all>
}
100218f0:	e037883a 	mov	sp,fp
100218f4:	dfc00117 	ldw	ra,4(sp)
100218f8:	df000017 	ldw	fp,0(sp)
100218fc:	dec00204 	addi	sp,sp,8
10021900:	f800283a 	ret

10021904 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10021904:	defffe04 	addi	sp,sp,-8
10021908:	dfc00115 	stw	ra,4(sp)
1002190c:	df000015 	stw	fp,0(sp)
10021910:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10021914:	008400b4 	movhi	r2,4098
10021918:	109d1b04 	addi	r2,r2,29804
1002191c:	10800017 	ldw	r2,0(r2)
10021920:	10000526 	beq	r2,zero,10021938 <alt_get_errno+0x34>
10021924:	008400b4 	movhi	r2,4098
10021928:	109d1b04 	addi	r2,r2,29804
1002192c:	10800017 	ldw	r2,0(r2)
10021930:	103ee83a 	callr	r2
10021934:	00000206 	br	10021940 <alt_get_errno+0x3c>
10021938:	008400f4 	movhi	r2,4099
1002193c:	10a48b04 	addi	r2,r2,-28116
}
10021940:	e037883a 	mov	sp,fp
10021944:	dfc00117 	ldw	ra,4(sp)
10021948:	df000017 	ldw	fp,0(sp)
1002194c:	dec00204 	addi	sp,sp,8
10021950:	f800283a 	ret

10021954 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10021954:	defff904 	addi	sp,sp,-28
10021958:	dfc00615 	stw	ra,24(sp)
1002195c:	df000515 	stw	fp,20(sp)
10021960:	df000504 	addi	fp,sp,20
10021964:	e13ffd15 	stw	r4,-12(fp)
10021968:	e17ffe15 	stw	r5,-8(fp)
1002196c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10021970:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10021974:	e0bffd17 	ldw	r2,-12(fp)
10021978:	10000616 	blt	r2,zero,10021994 <lseek+0x40>
1002197c:	e0bffd17 	ldw	r2,-12(fp)
10021980:	10c00324 	muli	r3,r2,12
10021984:	008400b4 	movhi	r2,4098
10021988:	10982204 	addi	r2,r2,24712
1002198c:	1885883a 	add	r2,r3,r2
10021990:	00000106 	br	10021998 <lseek+0x44>
10021994:	0005883a 	mov	r2,zero
10021998:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1002199c:	e0bffc17 	ldw	r2,-16(fp)
100219a0:	10001026 	beq	r2,zero,100219e4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
100219a4:	e0bffc17 	ldw	r2,-16(fp)
100219a8:	10800017 	ldw	r2,0(r2)
100219ac:	10800717 	ldw	r2,28(r2)
100219b0:	10000926 	beq	r2,zero,100219d8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
100219b4:	e0bffc17 	ldw	r2,-16(fp)
100219b8:	10800017 	ldw	r2,0(r2)
100219bc:	10800717 	ldw	r2,28(r2)
100219c0:	e13ffc17 	ldw	r4,-16(fp)
100219c4:	e17ffe17 	ldw	r5,-8(fp)
100219c8:	e1bfff17 	ldw	r6,-4(fp)
100219cc:	103ee83a 	callr	r2
100219d0:	e0bffb15 	stw	r2,-20(fp)
100219d4:	00000506 	br	100219ec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
100219d8:	00bfde84 	movi	r2,-134
100219dc:	e0bffb15 	stw	r2,-20(fp)
100219e0:	00000206 	br	100219ec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
100219e4:	00bfebc4 	movi	r2,-81
100219e8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
100219ec:	e0bffb17 	ldw	r2,-20(fp)
100219f0:	1000070e 	bge	r2,zero,10021a10 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
100219f4:	00219040 	call	10021904 <alt_get_errno>
100219f8:	1007883a 	mov	r3,r2
100219fc:	e0bffb17 	ldw	r2,-20(fp)
10021a00:	0085c83a 	sub	r2,zero,r2
10021a04:	18800015 	stw	r2,0(r3)
    rc = -1;
10021a08:	00bfffc4 	movi	r2,-1
10021a0c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10021a10:	e0bffb17 	ldw	r2,-20(fp)
}
10021a14:	e037883a 	mov	sp,fp
10021a18:	dfc00117 	ldw	ra,4(sp)
10021a1c:	df000017 	ldw	fp,0(sp)
10021a20:	dec00204 	addi	sp,sp,8
10021a24:	f800283a 	ret

10021a28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10021a28:	defffd04 	addi	sp,sp,-12
10021a2c:	dfc00215 	stw	ra,8(sp)
10021a30:	df000115 	stw	fp,4(sp)
10021a34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10021a38:	0009883a 	mov	r4,zero
10021a3c:	0021eec0 	call	10021eec <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10021a40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10021a44:	0021f200 	call	10021f20 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10021a48:	010400b4 	movhi	r4,4098
10021a4c:	2115ba04 	addi	r4,r4,22248
10021a50:	014400b4 	movhi	r5,4098
10021a54:	2955ba04 	addi	r5,r5,22248
10021a58:	018400b4 	movhi	r6,4098
10021a5c:	3195ba04 	addi	r6,r6,22248
10021a60:	00240cc0 	call	100240cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10021a64:	0023df80 	call	10023df8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10021a68:	010400b4 	movhi	r4,4098
10021a6c:	210f9504 	addi	r4,r4,15956
10021a70:	00247c80 	call	100247c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10021a74:	d127b317 	ldw	r4,-24884(gp)
10021a78:	d0e7b417 	ldw	r3,-24880(gp)
10021a7c:	d0a7b517 	ldw	r2,-24876(gp)
10021a80:	180b883a 	mov	r5,r3
10021a84:	100d883a 	mov	r6,r2
10021a88:	00025b00 	call	100025b0 <main>
10021a8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10021a90:	01000044 	movi	r4,1
10021a94:	00212600 	call	10021260 <close>
  exit (result);
10021a98:	e13fff17 	ldw	r4,-4(fp)
10021a9c:	00247dc0 	call	100247dc <exit>

10021aa0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10021aa0:	defffe04 	addi	sp,sp,-8
10021aa4:	df000115 	stw	fp,4(sp)
10021aa8:	df000104 	addi	fp,sp,4
10021aac:	e13fff15 	stw	r4,-4(fp)
}
10021ab0:	e037883a 	mov	sp,fp
10021ab4:	df000017 	ldw	fp,0(sp)
10021ab8:	dec00104 	addi	sp,sp,4
10021abc:	f800283a 	ret

10021ac0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10021ac0:	defffe04 	addi	sp,sp,-8
10021ac4:	df000115 	stw	fp,4(sp)
10021ac8:	df000104 	addi	fp,sp,4
10021acc:	e13fff15 	stw	r4,-4(fp)
}
10021ad0:	e037883a 	mov	sp,fp
10021ad4:	df000017 	ldw	fp,0(sp)
10021ad8:	dec00104 	addi	sp,sp,4
10021adc:	f800283a 	ret

10021ae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10021ae0:	defffe04 	addi	sp,sp,-8
10021ae4:	dfc00115 	stw	ra,4(sp)
10021ae8:	df000015 	stw	fp,0(sp)
10021aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10021af0:	008400b4 	movhi	r2,4098
10021af4:	109d1b04 	addi	r2,r2,29804
10021af8:	10800017 	ldw	r2,0(r2)
10021afc:	10000526 	beq	r2,zero,10021b14 <alt_get_errno+0x34>
10021b00:	008400b4 	movhi	r2,4098
10021b04:	109d1b04 	addi	r2,r2,29804
10021b08:	10800017 	ldw	r2,0(r2)
10021b0c:	103ee83a 	callr	r2
10021b10:	00000206 	br	10021b1c <alt_get_errno+0x3c>
10021b14:	008400f4 	movhi	r2,4099
10021b18:	10a48b04 	addi	r2,r2,-28116
}
10021b1c:	e037883a 	mov	sp,fp
10021b20:	dfc00117 	ldw	ra,4(sp)
10021b24:	df000017 	ldw	fp,0(sp)
10021b28:	dec00204 	addi	sp,sp,8
10021b2c:	f800283a 	ret

10021b30 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10021b30:	defff904 	addi	sp,sp,-28
10021b34:	dfc00615 	stw	ra,24(sp)
10021b38:	df000515 	stw	fp,20(sp)
10021b3c:	df000504 	addi	fp,sp,20
10021b40:	e13ffd15 	stw	r4,-12(fp)
10021b44:	e17ffe15 	stw	r5,-8(fp)
10021b48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10021b4c:	e0bffd17 	ldw	r2,-12(fp)
10021b50:	10000616 	blt	r2,zero,10021b6c <read+0x3c>
10021b54:	e0bffd17 	ldw	r2,-12(fp)
10021b58:	10c00324 	muli	r3,r2,12
10021b5c:	008400b4 	movhi	r2,4098
10021b60:	10982204 	addi	r2,r2,24712
10021b64:	1885883a 	add	r2,r3,r2
10021b68:	00000106 	br	10021b70 <read+0x40>
10021b6c:	0005883a 	mov	r2,zero
10021b70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10021b74:	e0bffb17 	ldw	r2,-20(fp)
10021b78:	10002226 	beq	r2,zero,10021c04 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10021b7c:	e0bffb17 	ldw	r2,-20(fp)
10021b80:	10800217 	ldw	r2,8(r2)
10021b84:	108000cc 	andi	r2,r2,3
10021b88:	10800060 	cmpeqi	r2,r2,1
10021b8c:	1000181e 	bne	r2,zero,10021bf0 <read+0xc0>
        (fd->dev->read))
10021b90:	e0bffb17 	ldw	r2,-20(fp)
10021b94:	10800017 	ldw	r2,0(r2)
10021b98:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10021b9c:	10001426 	beq	r2,zero,10021bf0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10021ba0:	e0bffb17 	ldw	r2,-20(fp)
10021ba4:	10800017 	ldw	r2,0(r2)
10021ba8:	10800517 	ldw	r2,20(r2)
10021bac:	e0ffff17 	ldw	r3,-4(fp)
10021bb0:	e13ffb17 	ldw	r4,-20(fp)
10021bb4:	e17ffe17 	ldw	r5,-8(fp)
10021bb8:	180d883a 	mov	r6,r3
10021bbc:	103ee83a 	callr	r2
10021bc0:	e0bffc15 	stw	r2,-16(fp)
10021bc4:	e0bffc17 	ldw	r2,-16(fp)
10021bc8:	1000070e 	bge	r2,zero,10021be8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
10021bcc:	0021ae00 	call	10021ae0 <alt_get_errno>
10021bd0:	1007883a 	mov	r3,r2
10021bd4:	e0bffc17 	ldw	r2,-16(fp)
10021bd8:	0085c83a 	sub	r2,zero,r2
10021bdc:	18800015 	stw	r2,0(r3)
          return -1;
10021be0:	00bfffc4 	movi	r2,-1
10021be4:	00000c06 	br	10021c18 <read+0xe8>
        }
        return rval;
10021be8:	e0bffc17 	ldw	r2,-16(fp)
10021bec:	00000a06 	br	10021c18 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
10021bf0:	0021ae00 	call	10021ae0 <alt_get_errno>
10021bf4:	1007883a 	mov	r3,r2
10021bf8:	00800344 	movi	r2,13
10021bfc:	18800015 	stw	r2,0(r3)
10021c00:	00000406 	br	10021c14 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10021c04:	0021ae00 	call	10021ae0 <alt_get_errno>
10021c08:	1007883a 	mov	r3,r2
10021c0c:	00801444 	movi	r2,81
10021c10:	18800015 	stw	r2,0(r3)
  }
  return -1;
10021c14:	00bfffc4 	movi	r2,-1
}
10021c18:	e037883a 	mov	sp,fp
10021c1c:	dfc00117 	ldw	ra,4(sp)
10021c20:	df000017 	ldw	fp,0(sp)
10021c24:	dec00204 	addi	sp,sp,8
10021c28:	f800283a 	ret

10021c2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10021c2c:	defffe04 	addi	sp,sp,-8
10021c30:	df000115 	stw	fp,4(sp)
10021c34:	df000104 	addi	fp,sp,4
10021c38:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
10021c3c:	e0bfff17 	ldw	r2,-4(fp)
10021c40:	108000d0 	cmplti	r2,r2,3
10021c44:	10000d1e 	bne	r2,zero,10021c7c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
10021c48:	008400b4 	movhi	r2,4098
10021c4c:	10982204 	addi	r2,r2,24712
10021c50:	e0ffff17 	ldw	r3,-4(fp)
10021c54:	18c00324 	muli	r3,r3,12
10021c58:	10c5883a 	add	r2,r2,r3
10021c5c:	10800204 	addi	r2,r2,8
10021c60:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10021c64:	008400b4 	movhi	r2,4098
10021c68:	10982204 	addi	r2,r2,24712
10021c6c:	e0ffff17 	ldw	r3,-4(fp)
10021c70:	18c00324 	muli	r3,r3,12
10021c74:	10c5883a 	add	r2,r2,r3
10021c78:	10000015 	stw	zero,0(r2)
  }
}
10021c7c:	e037883a 	mov	sp,fp
10021c80:	df000017 	ldw	fp,0(sp)
10021c84:	dec00104 	addi	sp,sp,4
10021c88:	f800283a 	ret

10021c8c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10021c8c:	defff904 	addi	sp,sp,-28
10021c90:	df000615 	stw	fp,24(sp)
10021c94:	df000604 	addi	fp,sp,24
10021c98:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10021c9c:	0005303a 	rdctl	r2,status
10021ca0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10021ca4:	e0fffc17 	ldw	r3,-16(fp)
10021ca8:	00bfff84 	movi	r2,-2
10021cac:	1884703a 	and	r2,r3,r2
10021cb0:	1001703a 	wrctl	status,r2
  
  return context;
10021cb4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10021cb8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10021cbc:	d0a04317 	ldw	r2,-32500(gp)
10021cc0:	10c000c4 	addi	r3,r2,3
10021cc4:	00bfff04 	movi	r2,-4
10021cc8:	1884703a 	and	r2,r3,r2
10021ccc:	d0a04315 	stw	r2,-32500(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10021cd0:	d0e04317 	ldw	r3,-32500(gp)
10021cd4:	e0bfff17 	ldw	r2,-4(fp)
10021cd8:	1887883a 	add	r3,r3,r2
10021cdc:	00880034 	movhi	r2,8192
10021ce0:	10800004 	addi	r2,r2,0
10021ce4:	10c0062e 	bgeu	r2,r3,10021d00 <sbrk+0x74>
10021ce8:	e0bffa17 	ldw	r2,-24(fp)
10021cec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10021cf0:	e0bffd17 	ldw	r2,-12(fp)
10021cf4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10021cf8:	00bfffc4 	movi	r2,-1
10021cfc:	00000b06 	br	10021d2c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10021d00:	d0a04317 	ldw	r2,-32500(gp)
10021d04:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
10021d08:	d0e04317 	ldw	r3,-32500(gp)
10021d0c:	e0bfff17 	ldw	r2,-4(fp)
10021d10:	1885883a 	add	r2,r3,r2
10021d14:	d0a04315 	stw	r2,-32500(gp)
10021d18:	e0bffa17 	ldw	r2,-24(fp)
10021d1c:	e0bffe15 	stw	r2,-8(fp)
10021d20:	e0bffe17 	ldw	r2,-8(fp)
10021d24:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10021d28:	e0bffb17 	ldw	r2,-20(fp)
} 
10021d2c:	e037883a 	mov	sp,fp
10021d30:	df000017 	ldw	fp,0(sp)
10021d34:	dec00104 	addi	sp,sp,4
10021d38:	f800283a 	ret

10021d3c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10021d3c:	defffd04 	addi	sp,sp,-12
10021d40:	dfc00215 	stw	ra,8(sp)
10021d44:	df000115 	stw	fp,4(sp)
10021d48:	df000104 	addi	fp,sp,4
10021d4c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10021d50:	e13fff17 	ldw	r4,-4(fp)
10021d54:	0023b680 	call	10023b68 <alt_busy_sleep>
}
10021d58:	e037883a 	mov	sp,fp
10021d5c:	dfc00117 	ldw	ra,4(sp)
10021d60:	df000017 	ldw	fp,0(sp)
10021d64:	dec00204 	addi	sp,sp,8
10021d68:	f800283a 	ret

10021d6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10021d6c:	defffe04 	addi	sp,sp,-8
10021d70:	dfc00115 	stw	ra,4(sp)
10021d74:	df000015 	stw	fp,0(sp)
10021d78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10021d7c:	008400b4 	movhi	r2,4098
10021d80:	109d1b04 	addi	r2,r2,29804
10021d84:	10800017 	ldw	r2,0(r2)
10021d88:	10000526 	beq	r2,zero,10021da0 <alt_get_errno+0x34>
10021d8c:	008400b4 	movhi	r2,4098
10021d90:	109d1b04 	addi	r2,r2,29804
10021d94:	10800017 	ldw	r2,0(r2)
10021d98:	103ee83a 	callr	r2
10021d9c:	00000206 	br	10021da8 <alt_get_errno+0x3c>
10021da0:	008400f4 	movhi	r2,4099
10021da4:	10a48b04 	addi	r2,r2,-28116
}
10021da8:	e037883a 	mov	sp,fp
10021dac:	dfc00117 	ldw	ra,4(sp)
10021db0:	df000017 	ldw	fp,0(sp)
10021db4:	dec00204 	addi	sp,sp,8
10021db8:	f800283a 	ret

10021dbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10021dbc:	defff904 	addi	sp,sp,-28
10021dc0:	dfc00615 	stw	ra,24(sp)
10021dc4:	df000515 	stw	fp,20(sp)
10021dc8:	df000504 	addi	fp,sp,20
10021dcc:	e13ffd15 	stw	r4,-12(fp)
10021dd0:	e17ffe15 	stw	r5,-8(fp)
10021dd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10021dd8:	e0bffd17 	ldw	r2,-12(fp)
10021ddc:	10000616 	blt	r2,zero,10021df8 <write+0x3c>
10021de0:	e0bffd17 	ldw	r2,-12(fp)
10021de4:	10c00324 	muli	r3,r2,12
10021de8:	008400b4 	movhi	r2,4098
10021dec:	10982204 	addi	r2,r2,24712
10021df0:	1885883a 	add	r2,r3,r2
10021df4:	00000106 	br	10021dfc <write+0x40>
10021df8:	0005883a 	mov	r2,zero
10021dfc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10021e00:	e0bffb17 	ldw	r2,-20(fp)
10021e04:	10002126 	beq	r2,zero,10021e8c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10021e08:	e0bffb17 	ldw	r2,-20(fp)
10021e0c:	10800217 	ldw	r2,8(r2)
10021e10:	108000cc 	andi	r2,r2,3
10021e14:	10001826 	beq	r2,zero,10021e78 <write+0xbc>
10021e18:	e0bffb17 	ldw	r2,-20(fp)
10021e1c:	10800017 	ldw	r2,0(r2)
10021e20:	10800617 	ldw	r2,24(r2)
10021e24:	10001426 	beq	r2,zero,10021e78 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10021e28:	e0bffb17 	ldw	r2,-20(fp)
10021e2c:	10800017 	ldw	r2,0(r2)
10021e30:	10800617 	ldw	r2,24(r2)
10021e34:	e0ffff17 	ldw	r3,-4(fp)
10021e38:	e13ffb17 	ldw	r4,-20(fp)
10021e3c:	e17ffe17 	ldw	r5,-8(fp)
10021e40:	180d883a 	mov	r6,r3
10021e44:	103ee83a 	callr	r2
10021e48:	e0bffc15 	stw	r2,-16(fp)
10021e4c:	e0bffc17 	ldw	r2,-16(fp)
10021e50:	1000070e 	bge	r2,zero,10021e70 <write+0xb4>
      {
        ALT_ERRNO = -rval;
10021e54:	0021d6c0 	call	10021d6c <alt_get_errno>
10021e58:	1007883a 	mov	r3,r2
10021e5c:	e0bffc17 	ldw	r2,-16(fp)
10021e60:	0085c83a 	sub	r2,zero,r2
10021e64:	18800015 	stw	r2,0(r3)
        return -1;
10021e68:	00bfffc4 	movi	r2,-1
10021e6c:	00000c06 	br	10021ea0 <write+0xe4>
      }
      return rval;
10021e70:	e0bffc17 	ldw	r2,-16(fp)
10021e74:	00000a06 	br	10021ea0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
10021e78:	0021d6c0 	call	10021d6c <alt_get_errno>
10021e7c:	1007883a 	mov	r3,r2
10021e80:	00800344 	movi	r2,13
10021e84:	18800015 	stw	r2,0(r3)
10021e88:	00000406 	br	10021e9c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10021e8c:	0021d6c0 	call	10021d6c <alt_get_errno>
10021e90:	1007883a 	mov	r3,r2
10021e94:	00801444 	movi	r2,81
10021e98:	18800015 	stw	r2,0(r3)
  }
  return -1;
10021e9c:	00bfffc4 	movi	r2,-1
}
10021ea0:	e037883a 	mov	sp,fp
10021ea4:	dfc00117 	ldw	ra,4(sp)
10021ea8:	df000017 	ldw	fp,0(sp)
10021eac:	dec00204 	addi	sp,sp,8
10021eb0:	f800283a 	ret

10021eb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10021eb4:	defffd04 	addi	sp,sp,-12
10021eb8:	dfc00215 	stw	ra,8(sp)
10021ebc:	df000115 	stw	fp,4(sp)
10021ec0:	df000104 	addi	fp,sp,4
10021ec4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10021ec8:	e13fff17 	ldw	r4,-4(fp)
10021ecc:	014400b4 	movhi	r5,4098
10021ed0:	295d1804 	addi	r5,r5,29792
10021ed4:	0023d540 	call	10023d54 <alt_dev_llist_insert>
}
10021ed8:	e037883a 	mov	sp,fp
10021edc:	dfc00117 	ldw	ra,4(sp)
10021ee0:	df000017 	ldw	fp,0(sp)
10021ee4:	dec00204 	addi	sp,sp,8
10021ee8:	f800283a 	ret

10021eec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10021eec:	defffd04 	addi	sp,sp,-12
10021ef0:	dfc00215 	stw	ra,8(sp)
10021ef4:	df000115 	stw	fp,4(sp)
10021ef8:	df000104 	addi	fp,sp,4
10021efc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, NIOS2_GEN2);
10021f00:	00245540 	call	10024554 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10021f04:	00800044 	movi	r2,1
10021f08:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10021f0c:	e037883a 	mov	sp,fp
10021f10:	dfc00117 	ldw	ra,4(sp)
10021f14:	df000017 	ldw	fp,0(sp)
10021f18:	dec00204 	addi	sp,sp,8
10021f1c:	f800283a 	ret

10021f20 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10021f20:	defffe04 	addi	sp,sp,-8
10021f24:	dfc00115 	stw	ra,4(sp)
10021f28:	df000015 	stw	fp,0(sp)
10021f2c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
10021f30:	010400b4 	movhi	r4,4098
10021f34:	21188c04 	addi	r4,r4,25136
10021f38:	000b883a 	mov	r5,zero
10021f3c:	01800044 	movi	r6,1
10021f40:	002210c0 	call	1002210c <altera_avalon_jtag_uart_init>
10021f44:	010400b4 	movhi	r4,4098
10021f48:	21188204 	addi	r4,r4,25096
10021f4c:	0021eb40 	call	10021eb4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( CC2650_SPI, CC2650_SPI);
10021f50:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( CC3100_SPI, CC3100_SPI);
10021f54:	0001883a 	nop
    ALTERA_AVALON_SPI_INIT ( SPI_GSENSOR, spi_gsensor);
10021f58:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID, SYSID);
10021f5c:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( CC3100_UART, CC3100_UART);
10021f60:	010400b4 	movhi	r4,4098
10021f64:	211ca404 	addi	r4,r4,29328
10021f68:	000b883a 	mov	r5,zero
10021f6c:	018000c4 	movi	r6,3
10021f70:	0022d080 	call	10022d08 <altera_avalon_uart_init>
10021f74:	010400b4 	movhi	r4,4098
10021f78:	211c9a04 	addi	r4,r4,29288
10021f7c:	0021eb40 	call	10021eb4 <alt_dev_reg>
    ALTERA_MODULAR_ADC_INIT ( ADC, ADC);
10021f80:	010400b4 	movhi	r4,4098
10021f84:	211ccb04 	addi	r4,r4,29484
10021f88:	000b883a 	mov	r5,zero
10021f8c:	000d883a 	mov	r6,zero
10021f90:	00236380 	call	10023638 <altera_modular_adc_init>
}
10021f94:	e037883a 	mov	sp,fp
10021f98:	dfc00117 	ldw	ra,4(sp)
10021f9c:	df000017 	ldw	fp,0(sp)
10021fa0:	dec00204 	addi	sp,sp,8
10021fa4:	f800283a 	ret

10021fa8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10021fa8:	defffa04 	addi	sp,sp,-24
10021fac:	dfc00515 	stw	ra,20(sp)
10021fb0:	df000415 	stw	fp,16(sp)
10021fb4:	df000404 	addi	fp,sp,16
10021fb8:	e13ffd15 	stw	r4,-12(fp)
10021fbc:	e17ffe15 	stw	r5,-8(fp)
10021fc0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10021fc4:	e0bffd17 	ldw	r2,-12(fp)
10021fc8:	10800017 	ldw	r2,0(r2)
10021fcc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10021fd0:	e0bffc17 	ldw	r2,-16(fp)
10021fd4:	10c00a04 	addi	r3,r2,40
10021fd8:	e0bffd17 	ldw	r2,-12(fp)
10021fdc:	10800217 	ldw	r2,8(r2)
10021fe0:	1809883a 	mov	r4,r3
10021fe4:	e17ffe17 	ldw	r5,-8(fp)
10021fe8:	e1bfff17 	ldw	r6,-4(fp)
10021fec:	100f883a 	mov	r7,r2
10021ff0:	00225d00 	call	100225d0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10021ff4:	e037883a 	mov	sp,fp
10021ff8:	dfc00117 	ldw	ra,4(sp)
10021ffc:	df000017 	ldw	fp,0(sp)
10022000:	dec00204 	addi	sp,sp,8
10022004:	f800283a 	ret

10022008 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10022008:	defffa04 	addi	sp,sp,-24
1002200c:	dfc00515 	stw	ra,20(sp)
10022010:	df000415 	stw	fp,16(sp)
10022014:	df000404 	addi	fp,sp,16
10022018:	e13ffd15 	stw	r4,-12(fp)
1002201c:	e17ffe15 	stw	r5,-8(fp)
10022020:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10022024:	e0bffd17 	ldw	r2,-12(fp)
10022028:	10800017 	ldw	r2,0(r2)
1002202c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10022030:	e0bffc17 	ldw	r2,-16(fp)
10022034:	10c00a04 	addi	r3,r2,40
10022038:	e0bffd17 	ldw	r2,-12(fp)
1002203c:	10800217 	ldw	r2,8(r2)
10022040:	1809883a 	mov	r4,r3
10022044:	e17ffe17 	ldw	r5,-8(fp)
10022048:	e1bfff17 	ldw	r6,-4(fp)
1002204c:	100f883a 	mov	r7,r2
10022050:	00227dc0 	call	100227dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10022054:	e037883a 	mov	sp,fp
10022058:	dfc00117 	ldw	ra,4(sp)
1002205c:	df000017 	ldw	fp,0(sp)
10022060:	dec00204 	addi	sp,sp,8
10022064:	f800283a 	ret

10022068 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10022068:	defffc04 	addi	sp,sp,-16
1002206c:	dfc00315 	stw	ra,12(sp)
10022070:	df000215 	stw	fp,8(sp)
10022074:	df000204 	addi	fp,sp,8
10022078:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1002207c:	e0bfff17 	ldw	r2,-4(fp)
10022080:	10800017 	ldw	r2,0(r2)
10022084:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
10022088:	e0bffe17 	ldw	r2,-8(fp)
1002208c:	10c00a04 	addi	r3,r2,40
10022090:	e0bfff17 	ldw	r2,-4(fp)
10022094:	10800217 	ldw	r2,8(r2)
10022098:	1809883a 	mov	r4,r3
1002209c:	100b883a 	mov	r5,r2
100220a0:	002247c0 	call	1002247c <altera_avalon_jtag_uart_close>
}
100220a4:	e037883a 	mov	sp,fp
100220a8:	dfc00117 	ldw	ra,4(sp)
100220ac:	df000017 	ldw	fp,0(sp)
100220b0:	dec00204 	addi	sp,sp,8
100220b4:	f800283a 	ret

100220b8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100220b8:	defffa04 	addi	sp,sp,-24
100220bc:	dfc00515 	stw	ra,20(sp)
100220c0:	df000415 	stw	fp,16(sp)
100220c4:	df000404 	addi	fp,sp,16
100220c8:	e13ffd15 	stw	r4,-12(fp)
100220cc:	e17ffe15 	stw	r5,-8(fp)
100220d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100220d4:	e0bffd17 	ldw	r2,-12(fp)
100220d8:	10800017 	ldw	r2,0(r2)
100220dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100220e0:	e0bffc17 	ldw	r2,-16(fp)
100220e4:	10800a04 	addi	r2,r2,40
100220e8:	1009883a 	mov	r4,r2
100220ec:	e17ffe17 	ldw	r5,-8(fp)
100220f0:	e1bfff17 	ldw	r6,-4(fp)
100220f4:	00224e40 	call	100224e4 <altera_avalon_jtag_uart_ioctl>
}
100220f8:	e037883a 	mov	sp,fp
100220fc:	dfc00117 	ldw	ra,4(sp)
10022100:	df000017 	ldw	fp,0(sp)
10022104:	dec00204 	addi	sp,sp,8
10022108:	f800283a 	ret

1002210c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1002210c:	defffa04 	addi	sp,sp,-24
10022110:	dfc00515 	stw	ra,20(sp)
10022114:	df000415 	stw	fp,16(sp)
10022118:	df000404 	addi	fp,sp,16
1002211c:	e13ffd15 	stw	r4,-12(fp)
10022120:	e17ffe15 	stw	r5,-8(fp)
10022124:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10022128:	e0bffd17 	ldw	r2,-12(fp)
1002212c:	00c00044 	movi	r3,1
10022130:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10022134:	e0bffd17 	ldw	r2,-12(fp)
10022138:	10800017 	ldw	r2,0(r2)
1002213c:	10800104 	addi	r2,r2,4
10022140:	1007883a 	mov	r3,r2
10022144:	e0bffd17 	ldw	r2,-12(fp)
10022148:	10800817 	ldw	r2,32(r2)
1002214c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10022150:	e0fffe17 	ldw	r3,-8(fp)
10022154:	e0bfff17 	ldw	r2,-4(fp)
10022158:	d8000015 	stw	zero,0(sp)
1002215c:	1809883a 	mov	r4,r3
10022160:	100b883a 	mov	r5,r2
10022164:	018400b4 	movhi	r6,4098
10022168:	31887404 	addi	r6,r6,8656
1002216c:	e1fffd17 	ldw	r7,-12(fp)
10022170:	002145c0 	call	1002145c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10022174:	e0bffd17 	ldw	r2,-12(fp)
10022178:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1002217c:	e0bffd17 	ldw	r2,-12(fp)
10022180:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10022184:	008400f4 	movhi	r2,4099
10022188:	10a49104 	addi	r2,r2,-28092
1002218c:	10800017 	ldw	r2,0(r2)
10022190:	1809883a 	mov	r4,r3
10022194:	100b883a 	mov	r5,r2
10022198:	018400b4 	movhi	r6,4098
1002219c:	3188f504 	addi	r6,r6,9172
100221a0:	e1fffd17 	ldw	r7,-12(fp)
100221a4:	0023a280 	call	10023a28 <alt_alarm_start>
100221a8:	1000040e 	bge	r2,zero,100221bc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100221ac:	e0fffd17 	ldw	r3,-12(fp)
100221b0:	00a00034 	movhi	r2,32768
100221b4:	10bfffc4 	addi	r2,r2,-1
100221b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100221bc:	e037883a 	mov	sp,fp
100221c0:	dfc00117 	ldw	ra,4(sp)
100221c4:	df000017 	ldw	fp,0(sp)
100221c8:	dec00204 	addi	sp,sp,8
100221cc:	f800283a 	ret

100221d0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100221d0:	defff804 	addi	sp,sp,-32
100221d4:	df000715 	stw	fp,28(sp)
100221d8:	df000704 	addi	fp,sp,28
100221dc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100221e0:	e0bfff17 	ldw	r2,-4(fp)
100221e4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100221e8:	e0bffb17 	ldw	r2,-20(fp)
100221ec:	10800017 	ldw	r2,0(r2)
100221f0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100221f4:	e0bffc17 	ldw	r2,-16(fp)
100221f8:	10800104 	addi	r2,r2,4
100221fc:	10800037 	ldwio	r2,0(r2)
10022200:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10022204:	e0bffd17 	ldw	r2,-12(fp)
10022208:	1080c00c 	andi	r2,r2,768
1002220c:	1000011e 	bne	r2,zero,10022214 <altera_avalon_jtag_uart_irq+0x44>
      break;
10022210:	00006c06 	br	100223c4 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10022214:	e0bffd17 	ldw	r2,-12(fp)
10022218:	1080400c 	andi	r2,r2,256
1002221c:	10003426 	beq	r2,zero,100222f0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10022220:	00800074 	movhi	r2,1
10022224:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10022228:	e0bffb17 	ldw	r2,-20(fp)
1002222c:	10800a17 	ldw	r2,40(r2)
10022230:	10800044 	addi	r2,r2,1
10022234:	1081ffcc 	andi	r2,r2,2047
10022238:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1002223c:	e0bffb17 	ldw	r2,-20(fp)
10022240:	10c00b17 	ldw	r3,44(r2)
10022244:	e0bffe17 	ldw	r2,-8(fp)
10022248:	1880011e 	bne	r3,r2,10022250 <altera_avalon_jtag_uart_irq+0x80>
          break;
1002224c:	00001606 	br	100222a8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10022250:	e0bffc17 	ldw	r2,-16(fp)
10022254:	10800037 	ldwio	r2,0(r2)
10022258:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1002225c:	e0bff917 	ldw	r2,-28(fp)
10022260:	10a0000c 	andi	r2,r2,32768
10022264:	1000011e 	bne	r2,zero,1002226c <altera_avalon_jtag_uart_irq+0x9c>
          break;
10022268:	00000f06 	br	100222a8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1002226c:	e0bffb17 	ldw	r2,-20(fp)
10022270:	10800a17 	ldw	r2,40(r2)
10022274:	e0fff917 	ldw	r3,-28(fp)
10022278:	1809883a 	mov	r4,r3
1002227c:	e0fffb17 	ldw	r3,-20(fp)
10022280:	1885883a 	add	r2,r3,r2
10022284:	10800e04 	addi	r2,r2,56
10022288:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1002228c:	e0bffb17 	ldw	r2,-20(fp)
10022290:	10800a17 	ldw	r2,40(r2)
10022294:	10800044 	addi	r2,r2,1
10022298:	10c1ffcc 	andi	r3,r2,2047
1002229c:	e0bffb17 	ldw	r2,-20(fp)
100222a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100222a4:	003fe006 	br	10022228 <__alt_data_end+0xf0022228>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100222a8:	e0bff917 	ldw	r2,-28(fp)
100222ac:	10bfffec 	andhi	r2,r2,65535
100222b0:	10000f26 	beq	r2,zero,100222f0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100222b4:	e0bffb17 	ldw	r2,-20(fp)
100222b8:	10c00817 	ldw	r3,32(r2)
100222bc:	00bfff84 	movi	r2,-2
100222c0:	1886703a 	and	r3,r3,r2
100222c4:	e0bffb17 	ldw	r2,-20(fp)
100222c8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100222cc:	e0bffc17 	ldw	r2,-16(fp)
100222d0:	10800104 	addi	r2,r2,4
100222d4:	1007883a 	mov	r3,r2
100222d8:	e0bffb17 	ldw	r2,-20(fp)
100222dc:	10800817 	ldw	r2,32(r2)
100222e0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100222e4:	e0bffc17 	ldw	r2,-16(fp)
100222e8:	10800104 	addi	r2,r2,4
100222ec:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100222f0:	e0bffd17 	ldw	r2,-12(fp)
100222f4:	1080800c 	andi	r2,r2,512
100222f8:	10003126 	beq	r2,zero,100223c0 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100222fc:	e0bffd17 	ldw	r2,-12(fp)
10022300:	1004d43a 	srli	r2,r2,16
10022304:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10022308:	00001406 	br	1002235c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1002230c:	e0bffc17 	ldw	r2,-16(fp)
10022310:	e0fffb17 	ldw	r3,-20(fp)
10022314:	18c00d17 	ldw	r3,52(r3)
10022318:	e13ffb17 	ldw	r4,-20(fp)
1002231c:	20c7883a 	add	r3,r4,r3
10022320:	18c20e04 	addi	r3,r3,2104
10022324:	18c00003 	ldbu	r3,0(r3)
10022328:	18c03fcc 	andi	r3,r3,255
1002232c:	18c0201c 	xori	r3,r3,128
10022330:	18ffe004 	addi	r3,r3,-128
10022334:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10022338:	e0bffb17 	ldw	r2,-20(fp)
1002233c:	10800d17 	ldw	r2,52(r2)
10022340:	10800044 	addi	r2,r2,1
10022344:	10c1ffcc 	andi	r3,r2,2047
10022348:	e0bffb17 	ldw	r2,-20(fp)
1002234c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10022350:	e0bffa17 	ldw	r2,-24(fp)
10022354:	10bfffc4 	addi	r2,r2,-1
10022358:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1002235c:	e0bffa17 	ldw	r2,-24(fp)
10022360:	10000526 	beq	r2,zero,10022378 <altera_avalon_jtag_uart_irq+0x1a8>
10022364:	e0bffb17 	ldw	r2,-20(fp)
10022368:	10c00d17 	ldw	r3,52(r2)
1002236c:	e0bffb17 	ldw	r2,-20(fp)
10022370:	10800c17 	ldw	r2,48(r2)
10022374:	18bfe51e 	bne	r3,r2,1002230c <__alt_data_end+0xf002230c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10022378:	e0bffa17 	ldw	r2,-24(fp)
1002237c:	10001026 	beq	r2,zero,100223c0 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10022380:	e0bffb17 	ldw	r2,-20(fp)
10022384:	10c00817 	ldw	r3,32(r2)
10022388:	00bfff44 	movi	r2,-3
1002238c:	1886703a 	and	r3,r3,r2
10022390:	e0bffb17 	ldw	r2,-20(fp)
10022394:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10022398:	e0bffb17 	ldw	r2,-20(fp)
1002239c:	10800017 	ldw	r2,0(r2)
100223a0:	10800104 	addi	r2,r2,4
100223a4:	1007883a 	mov	r3,r2
100223a8:	e0bffb17 	ldw	r2,-20(fp)
100223ac:	10800817 	ldw	r2,32(r2)
100223b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100223b4:	e0bffc17 	ldw	r2,-16(fp)
100223b8:	10800104 	addi	r2,r2,4
100223bc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100223c0:	003f8c06 	br	100221f4 <__alt_data_end+0xf00221f4>
}
100223c4:	e037883a 	mov	sp,fp
100223c8:	df000017 	ldw	fp,0(sp)
100223cc:	dec00104 	addi	sp,sp,4
100223d0:	f800283a 	ret

100223d4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
100223d4:	defff804 	addi	sp,sp,-32
100223d8:	df000715 	stw	fp,28(sp)
100223dc:	df000704 	addi	fp,sp,28
100223e0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100223e4:	e0bffb17 	ldw	r2,-20(fp)
100223e8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100223ec:	e0bff917 	ldw	r2,-28(fp)
100223f0:	10800017 	ldw	r2,0(r2)
100223f4:	10800104 	addi	r2,r2,4
100223f8:	10800037 	ldwio	r2,0(r2)
100223fc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10022400:	e0bffa17 	ldw	r2,-24(fp)
10022404:	1081000c 	andi	r2,r2,1024
10022408:	10000b26 	beq	r2,zero,10022438 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1002240c:	e0bff917 	ldw	r2,-28(fp)
10022410:	10800017 	ldw	r2,0(r2)
10022414:	10800104 	addi	r2,r2,4
10022418:	1007883a 	mov	r3,r2
1002241c:	e0bff917 	ldw	r2,-28(fp)
10022420:	10800817 	ldw	r2,32(r2)
10022424:	10810014 	ori	r2,r2,1024
10022428:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1002242c:	e0bff917 	ldw	r2,-28(fp)
10022430:	10000915 	stw	zero,36(r2)
10022434:	00000a06 	br	10022460 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10022438:	e0bff917 	ldw	r2,-28(fp)
1002243c:	10c00917 	ldw	r3,36(r2)
10022440:	00a00034 	movhi	r2,32768
10022444:	10bfff04 	addi	r2,r2,-4
10022448:	10c00536 	bltu	r2,r3,10022460 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1002244c:	e0bff917 	ldw	r2,-28(fp)
10022450:	10800917 	ldw	r2,36(r2)
10022454:	10c00044 	addi	r3,r2,1
10022458:	e0bff917 	ldw	r2,-28(fp)
1002245c:	10c00915 	stw	r3,36(r2)
10022460:	008400f4 	movhi	r2,4099
10022464:	10a49104 	addi	r2,r2,-28092
10022468:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1002246c:	e037883a 	mov	sp,fp
10022470:	df000017 	ldw	fp,0(sp)
10022474:	dec00104 	addi	sp,sp,4
10022478:	f800283a 	ret

1002247c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1002247c:	defffd04 	addi	sp,sp,-12
10022480:	df000215 	stw	fp,8(sp)
10022484:	df000204 	addi	fp,sp,8
10022488:	e13ffe15 	stw	r4,-8(fp)
1002248c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10022490:	00000506 	br	100224a8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10022494:	e0bfff17 	ldw	r2,-4(fp)
10022498:	1090000c 	andi	r2,r2,16384
1002249c:	10000226 	beq	r2,zero,100224a8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100224a0:	00bffd44 	movi	r2,-11
100224a4:	00000b06 	br	100224d4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100224a8:	e0bffe17 	ldw	r2,-8(fp)
100224ac:	10c00d17 	ldw	r3,52(r2)
100224b0:	e0bffe17 	ldw	r2,-8(fp)
100224b4:	10800c17 	ldw	r2,48(r2)
100224b8:	18800526 	beq	r3,r2,100224d0 <altera_avalon_jtag_uart_close+0x54>
100224bc:	e0bffe17 	ldw	r2,-8(fp)
100224c0:	10c00917 	ldw	r3,36(r2)
100224c4:	e0bffe17 	ldw	r2,-8(fp)
100224c8:	10800117 	ldw	r2,4(r2)
100224cc:	18bff136 	bltu	r3,r2,10022494 <__alt_data_end+0xf0022494>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100224d0:	0005883a 	mov	r2,zero
}
100224d4:	e037883a 	mov	sp,fp
100224d8:	df000017 	ldw	fp,0(sp)
100224dc:	dec00104 	addi	sp,sp,4
100224e0:	f800283a 	ret

100224e4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100224e4:	defffa04 	addi	sp,sp,-24
100224e8:	df000515 	stw	fp,20(sp)
100224ec:	df000504 	addi	fp,sp,20
100224f0:	e13ffd15 	stw	r4,-12(fp)
100224f4:	e17ffe15 	stw	r5,-8(fp)
100224f8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100224fc:	00bff9c4 	movi	r2,-25
10022500:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10022504:	e0bffe17 	ldw	r2,-8(fp)
10022508:	10da8060 	cmpeqi	r3,r2,27137
1002250c:	1800031e 	bne	r3,zero,1002251c <altera_avalon_jtag_uart_ioctl+0x38>
10022510:	109a80a0 	cmpeqi	r2,r2,27138
10022514:	1000191e 	bne	r2,zero,1002257c <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
10022518:	00002806 	br	100225bc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1002251c:	e0bffd17 	ldw	r2,-12(fp)
10022520:	10c00117 	ldw	r3,4(r2)
10022524:	00a00034 	movhi	r2,32768
10022528:	10bfffc4 	addi	r2,r2,-1
1002252c:	18801226 	beq	r3,r2,10022578 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
10022530:	e0bfff17 	ldw	r2,-4(fp)
10022534:	10800017 	ldw	r2,0(r2)
10022538:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1002253c:	e0bffc17 	ldw	r2,-16(fp)
10022540:	10800090 	cmplti	r2,r2,2
10022544:	1000061e 	bne	r2,zero,10022560 <altera_avalon_jtag_uart_ioctl+0x7c>
10022548:	e0fffc17 	ldw	r3,-16(fp)
1002254c:	00a00034 	movhi	r2,32768
10022550:	10bfffc4 	addi	r2,r2,-1
10022554:	18800226 	beq	r3,r2,10022560 <altera_avalon_jtag_uart_ioctl+0x7c>
10022558:	e0bffc17 	ldw	r2,-16(fp)
1002255c:	00000206 	br	10022568 <altera_avalon_jtag_uart_ioctl+0x84>
10022560:	00a00034 	movhi	r2,32768
10022564:	10bfff84 	addi	r2,r2,-2
10022568:	e0fffd17 	ldw	r3,-12(fp)
1002256c:	18800115 	stw	r2,4(r3)
      rc = 0;
10022570:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10022574:	00001106 	br	100225bc <altera_avalon_jtag_uart_ioctl+0xd8>
10022578:	00001006 	br	100225bc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1002257c:	e0bffd17 	ldw	r2,-12(fp)
10022580:	10c00117 	ldw	r3,4(r2)
10022584:	00a00034 	movhi	r2,32768
10022588:	10bfffc4 	addi	r2,r2,-1
1002258c:	18800a26 	beq	r3,r2,100225b8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10022590:	e0bffd17 	ldw	r2,-12(fp)
10022594:	10c00917 	ldw	r3,36(r2)
10022598:	e0bffd17 	ldw	r2,-12(fp)
1002259c:	10800117 	ldw	r2,4(r2)
100225a0:	1885803a 	cmpltu	r2,r3,r2
100225a4:	10c03fcc 	andi	r3,r2,255
100225a8:	e0bfff17 	ldw	r2,-4(fp)
100225ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
100225b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100225b4:	00000006 	br	100225b8 <altera_avalon_jtag_uart_ioctl+0xd4>
100225b8:	0001883a 	nop

  default:
    break;
  }

  return rc;
100225bc:	e0bffb17 	ldw	r2,-20(fp)
}
100225c0:	e037883a 	mov	sp,fp
100225c4:	df000017 	ldw	fp,0(sp)
100225c8:	dec00104 	addi	sp,sp,4
100225cc:	f800283a 	ret

100225d0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
100225d0:	defff304 	addi	sp,sp,-52
100225d4:	dfc00c15 	stw	ra,48(sp)
100225d8:	df000b15 	stw	fp,44(sp)
100225dc:	df000b04 	addi	fp,sp,44
100225e0:	e13ffc15 	stw	r4,-16(fp)
100225e4:	e17ffd15 	stw	r5,-12(fp)
100225e8:	e1bffe15 	stw	r6,-8(fp)
100225ec:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100225f0:	e0bffd17 	ldw	r2,-12(fp)
100225f4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100225f8:	00004906 	br	10022720 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100225fc:	e0bffc17 	ldw	r2,-16(fp)
10022600:	10800a17 	ldw	r2,40(r2)
10022604:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10022608:	e0bffc17 	ldw	r2,-16(fp)
1002260c:	10800b17 	ldw	r2,44(r2)
10022610:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10022614:	e0fff717 	ldw	r3,-36(fp)
10022618:	e0bff817 	ldw	r2,-32(fp)
1002261c:	18800536 	bltu	r3,r2,10022634 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10022620:	e0fff717 	ldw	r3,-36(fp)
10022624:	e0bff817 	ldw	r2,-32(fp)
10022628:	1885c83a 	sub	r2,r3,r2
1002262c:	e0bff615 	stw	r2,-40(fp)
10022630:	00000406 	br	10022644 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10022634:	00c20004 	movi	r3,2048
10022638:	e0bff817 	ldw	r2,-32(fp)
1002263c:	1885c83a 	sub	r2,r3,r2
10022640:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10022644:	e0bff617 	ldw	r2,-40(fp)
10022648:	1000011e 	bne	r2,zero,10022650 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1002264c:	00001d06 	br	100226c4 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
10022650:	e0fffe17 	ldw	r3,-8(fp)
10022654:	e0bff617 	ldw	r2,-40(fp)
10022658:	1880022e 	bgeu	r3,r2,10022664 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1002265c:	e0bffe17 	ldw	r2,-8(fp)
10022660:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10022664:	e0bff817 	ldw	r2,-32(fp)
10022668:	10800e04 	addi	r2,r2,56
1002266c:	e0fffc17 	ldw	r3,-16(fp)
10022670:	1885883a 	add	r2,r3,r2
10022674:	e13ff517 	ldw	r4,-44(fp)
10022678:	100b883a 	mov	r5,r2
1002267c:	e1bff617 	ldw	r6,-40(fp)
10022680:	000c7840 	call	1000c784 <memcpy>
      ptr   += n;
10022684:	e0fff517 	ldw	r3,-44(fp)
10022688:	e0bff617 	ldw	r2,-40(fp)
1002268c:	1885883a 	add	r2,r3,r2
10022690:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10022694:	e0fffe17 	ldw	r3,-8(fp)
10022698:	e0bff617 	ldw	r2,-40(fp)
1002269c:	1885c83a 	sub	r2,r3,r2
100226a0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100226a4:	e0fff817 	ldw	r3,-32(fp)
100226a8:	e0bff617 	ldw	r2,-40(fp)
100226ac:	1885883a 	add	r2,r3,r2
100226b0:	10c1ffcc 	andi	r3,r2,2047
100226b4:	e0bffc17 	ldw	r2,-16(fp)
100226b8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
100226bc:	e0bffe17 	ldw	r2,-8(fp)
100226c0:	00bfce16 	blt	zero,r2,100225fc <__alt_data_end+0xf00225fc>

    /* If we read any data then return it */
    if (ptr != buffer)
100226c4:	e0fff517 	ldw	r3,-44(fp)
100226c8:	e0bffd17 	ldw	r2,-12(fp)
100226cc:	18800126 	beq	r3,r2,100226d4 <altera_avalon_jtag_uart_read+0x104>
      break;
100226d0:	00001506 	br	10022728 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
100226d4:	e0bfff17 	ldw	r2,-4(fp)
100226d8:	1090000c 	andi	r2,r2,16384
100226dc:	10000126 	beq	r2,zero,100226e4 <altera_avalon_jtag_uart_read+0x114>
      break;
100226e0:	00001106 	br	10022728 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100226e4:	0001883a 	nop
100226e8:	e0bffc17 	ldw	r2,-16(fp)
100226ec:	10c00a17 	ldw	r3,40(r2)
100226f0:	e0bff717 	ldw	r2,-36(fp)
100226f4:	1880051e 	bne	r3,r2,1002270c <altera_avalon_jtag_uart_read+0x13c>
100226f8:	e0bffc17 	ldw	r2,-16(fp)
100226fc:	10c00917 	ldw	r3,36(r2)
10022700:	e0bffc17 	ldw	r2,-16(fp)
10022704:	10800117 	ldw	r2,4(r2)
10022708:	18bff736 	bltu	r3,r2,100226e8 <__alt_data_end+0xf00226e8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1002270c:	e0bffc17 	ldw	r2,-16(fp)
10022710:	10c00a17 	ldw	r3,40(r2)
10022714:	e0bff717 	ldw	r2,-36(fp)
10022718:	1880011e 	bne	r3,r2,10022720 <altera_avalon_jtag_uart_read+0x150>
      break;
1002271c:	00000206 	br	10022728 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10022720:	e0bffe17 	ldw	r2,-8(fp)
10022724:	00bfb516 	blt	zero,r2,100225fc <__alt_data_end+0xf00225fc>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10022728:	e0fff517 	ldw	r3,-44(fp)
1002272c:	e0bffd17 	ldw	r2,-12(fp)
10022730:	18801826 	beq	r3,r2,10022794 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10022734:	0005303a 	rdctl	r2,status
10022738:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1002273c:	e0fffa17 	ldw	r3,-24(fp)
10022740:	00bfff84 	movi	r2,-2
10022744:	1884703a 	and	r2,r3,r2
10022748:	1001703a 	wrctl	status,r2
  
  return context;
1002274c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10022750:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10022754:	e0bffc17 	ldw	r2,-16(fp)
10022758:	10800817 	ldw	r2,32(r2)
1002275c:	10c00054 	ori	r3,r2,1
10022760:	e0bffc17 	ldw	r2,-16(fp)
10022764:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10022768:	e0bffc17 	ldw	r2,-16(fp)
1002276c:	10800017 	ldw	r2,0(r2)
10022770:	10800104 	addi	r2,r2,4
10022774:	1007883a 	mov	r3,r2
10022778:	e0bffc17 	ldw	r2,-16(fp)
1002277c:	10800817 	ldw	r2,32(r2)
10022780:	18800035 	stwio	r2,0(r3)
10022784:	e0bff917 	ldw	r2,-28(fp)
10022788:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1002278c:	e0bffb17 	ldw	r2,-20(fp)
10022790:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10022794:	e0fff517 	ldw	r3,-44(fp)
10022798:	e0bffd17 	ldw	r2,-12(fp)
1002279c:	18800426 	beq	r3,r2,100227b0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
100227a0:	e0fff517 	ldw	r3,-44(fp)
100227a4:	e0bffd17 	ldw	r2,-12(fp)
100227a8:	1885c83a 	sub	r2,r3,r2
100227ac:	00000606 	br	100227c8 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
100227b0:	e0bfff17 	ldw	r2,-4(fp)
100227b4:	1090000c 	andi	r2,r2,16384
100227b8:	10000226 	beq	r2,zero,100227c4 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
100227bc:	00bffd44 	movi	r2,-11
100227c0:	00000106 	br	100227c8 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
100227c4:	00bffec4 	movi	r2,-5
}
100227c8:	e037883a 	mov	sp,fp
100227cc:	dfc00117 	ldw	ra,4(sp)
100227d0:	df000017 	ldw	fp,0(sp)
100227d4:	dec00204 	addi	sp,sp,8
100227d8:	f800283a 	ret

100227dc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100227dc:	defff304 	addi	sp,sp,-52
100227e0:	dfc00c15 	stw	ra,48(sp)
100227e4:	df000b15 	stw	fp,44(sp)
100227e8:	df000b04 	addi	fp,sp,44
100227ec:	e13ffc15 	stw	r4,-16(fp)
100227f0:	e17ffd15 	stw	r5,-12(fp)
100227f4:	e1bffe15 	stw	r6,-8(fp)
100227f8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100227fc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10022800:	e0bffd17 	ldw	r2,-12(fp)
10022804:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10022808:	00003806 	br	100228ec <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1002280c:	e0bffc17 	ldw	r2,-16(fp)
10022810:	10800c17 	ldw	r2,48(r2)
10022814:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
10022818:	e0bffc17 	ldw	r2,-16(fp)
1002281c:	10800d17 	ldw	r2,52(r2)
10022820:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10022824:	e0fff817 	ldw	r3,-32(fp)
10022828:	e0bff517 	ldw	r2,-44(fp)
1002282c:	1880062e 	bgeu	r3,r2,10022848 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10022830:	e0fff517 	ldw	r3,-44(fp)
10022834:	e0bff817 	ldw	r2,-32(fp)
10022838:	1885c83a 	sub	r2,r3,r2
1002283c:	10bfffc4 	addi	r2,r2,-1
10022840:	e0bff615 	stw	r2,-40(fp)
10022844:	00000b06 	br	10022874 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10022848:	e0bff517 	ldw	r2,-44(fp)
1002284c:	10000526 	beq	r2,zero,10022864 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10022850:	00c20004 	movi	r3,2048
10022854:	e0bff817 	ldw	r2,-32(fp)
10022858:	1885c83a 	sub	r2,r3,r2
1002285c:	e0bff615 	stw	r2,-40(fp)
10022860:	00000406 	br	10022874 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10022864:	00c1ffc4 	movi	r3,2047
10022868:	e0bff817 	ldw	r2,-32(fp)
1002286c:	1885c83a 	sub	r2,r3,r2
10022870:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10022874:	e0bff617 	ldw	r2,-40(fp)
10022878:	1000011e 	bne	r2,zero,10022880 <altera_avalon_jtag_uart_write+0xa4>
        break;
1002287c:	00001d06 	br	100228f4 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
10022880:	e0fffe17 	ldw	r3,-8(fp)
10022884:	e0bff617 	ldw	r2,-40(fp)
10022888:	1880022e 	bgeu	r3,r2,10022894 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1002288c:	e0bffe17 	ldw	r2,-8(fp)
10022890:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10022894:	e0bff817 	ldw	r2,-32(fp)
10022898:	10820e04 	addi	r2,r2,2104
1002289c:	e0fffc17 	ldw	r3,-16(fp)
100228a0:	1885883a 	add	r2,r3,r2
100228a4:	1009883a 	mov	r4,r2
100228a8:	e17ffd17 	ldw	r5,-12(fp)
100228ac:	e1bff617 	ldw	r6,-40(fp)
100228b0:	000c7840 	call	1000c784 <memcpy>
      ptr   += n;
100228b4:	e0fffd17 	ldw	r3,-12(fp)
100228b8:	e0bff617 	ldw	r2,-40(fp)
100228bc:	1885883a 	add	r2,r3,r2
100228c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
100228c4:	e0fffe17 	ldw	r3,-8(fp)
100228c8:	e0bff617 	ldw	r2,-40(fp)
100228cc:	1885c83a 	sub	r2,r3,r2
100228d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100228d4:	e0fff817 	ldw	r3,-32(fp)
100228d8:	e0bff617 	ldw	r2,-40(fp)
100228dc:	1885883a 	add	r2,r3,r2
100228e0:	10c1ffcc 	andi	r3,r2,2047
100228e4:	e0bffc17 	ldw	r2,-16(fp)
100228e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100228ec:	e0bffe17 	ldw	r2,-8(fp)
100228f0:	00bfc616 	blt	zero,r2,1002280c <__alt_data_end+0xf002280c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100228f4:	0005303a 	rdctl	r2,status
100228f8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100228fc:	e0fffa17 	ldw	r3,-24(fp)
10022900:	00bfff84 	movi	r2,-2
10022904:	1884703a 	and	r2,r3,r2
10022908:	1001703a 	wrctl	status,r2
  
  return context;
1002290c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10022910:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10022914:	e0bffc17 	ldw	r2,-16(fp)
10022918:	10800817 	ldw	r2,32(r2)
1002291c:	10c00094 	ori	r3,r2,2
10022920:	e0bffc17 	ldw	r2,-16(fp)
10022924:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10022928:	e0bffc17 	ldw	r2,-16(fp)
1002292c:	10800017 	ldw	r2,0(r2)
10022930:	10800104 	addi	r2,r2,4
10022934:	1007883a 	mov	r3,r2
10022938:	e0bffc17 	ldw	r2,-16(fp)
1002293c:	10800817 	ldw	r2,32(r2)
10022940:	18800035 	stwio	r2,0(r3)
10022944:	e0bff917 	ldw	r2,-28(fp)
10022948:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1002294c:	e0bffb17 	ldw	r2,-20(fp)
10022950:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10022954:	e0bffe17 	ldw	r2,-8(fp)
10022958:	0080120e 	bge	zero,r2,100229a4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
1002295c:	e0bfff17 	ldw	r2,-4(fp)
10022960:	1090000c 	andi	r2,r2,16384
10022964:	10000126 	beq	r2,zero,1002296c <altera_avalon_jtag_uart_write+0x190>
        break;
10022968:	00001006 	br	100229ac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
1002296c:	0001883a 	nop
10022970:	e0bffc17 	ldw	r2,-16(fp)
10022974:	10c00d17 	ldw	r3,52(r2)
10022978:	e0bff517 	ldw	r2,-44(fp)
1002297c:	1880051e 	bne	r3,r2,10022994 <altera_avalon_jtag_uart_write+0x1b8>
10022980:	e0bffc17 	ldw	r2,-16(fp)
10022984:	10c00917 	ldw	r3,36(r2)
10022988:	e0bffc17 	ldw	r2,-16(fp)
1002298c:	10800117 	ldw	r2,4(r2)
10022990:	18bff736 	bltu	r3,r2,10022970 <__alt_data_end+0xf0022970>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10022994:	e0bffc17 	ldw	r2,-16(fp)
10022998:	10800917 	ldw	r2,36(r2)
1002299c:	10000126 	beq	r2,zero,100229a4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
100229a0:	00000206 	br	100229ac <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
100229a4:	e0bffe17 	ldw	r2,-8(fp)
100229a8:	00bf9716 	blt	zero,r2,10022808 <__alt_data_end+0xf0022808>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
100229ac:	e0fffd17 	ldw	r3,-12(fp)
100229b0:	e0bff717 	ldw	r2,-36(fp)
100229b4:	18800426 	beq	r3,r2,100229c8 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
100229b8:	e0fffd17 	ldw	r3,-12(fp)
100229bc:	e0bff717 	ldw	r2,-36(fp)
100229c0:	1885c83a 	sub	r2,r3,r2
100229c4:	00000606 	br	100229e0 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
100229c8:	e0bfff17 	ldw	r2,-4(fp)
100229cc:	1090000c 	andi	r2,r2,16384
100229d0:	10000226 	beq	r2,zero,100229dc <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100229d4:	00bffd44 	movi	r2,-11
100229d8:	00000106 	br	100229e0 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100229dc:	00bffec4 	movi	r2,-5
}
100229e0:	e037883a 	mov	sp,fp
100229e4:	dfc00117 	ldw	ra,4(sp)
100229e8:	df000017 	ldw	fp,0(sp)
100229ec:	dec00204 	addi	sp,sp,8
100229f0:	f800283a 	ret

100229f4 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
100229f4:	defff404 	addi	sp,sp,-48
100229f8:	df000b15 	stw	fp,44(sp)
100229fc:	df000b04 	addi	fp,sp,44
10022a00:	e13ffc15 	stw	r4,-16(fp)
10022a04:	e17ffd15 	stw	r5,-12(fp)
10022a08:	e1bffe15 	stw	r6,-8(fp)
10022a0c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
10022a10:	e0ffff17 	ldw	r3,-4(fp)
10022a14:	e0bffe17 	ldw	r2,-8(fp)
10022a18:	1885883a 	add	r2,r3,r2
10022a1c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
10022a20:	e0c00217 	ldw	r3,8(fp)
10022a24:	e0800117 	ldw	r2,4(fp)
10022a28:	1885883a 	add	r2,r3,r2
10022a2c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
10022a30:	e0800117 	ldw	r2,4(fp)
10022a34:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
10022a38:	e0bffe17 	ldw	r2,-8(fp)
10022a3c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
10022a40:	00800044 	movi	r2,1
10022a44:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
10022a48:	e0bffc17 	ldw	r2,-16(fp)
10022a4c:	10800504 	addi	r2,r2,20
10022a50:	1009883a 	mov	r4,r2
10022a54:	e0bffd17 	ldw	r2,-12(fp)
10022a58:	00c00044 	movi	r3,1
10022a5c:	1884983a 	sll	r2,r3,r2
10022a60:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
10022a64:	e0800317 	ldw	r2,12(fp)
10022a68:	1080008c 	andi	r2,r2,2
10022a6c:	1000051e 	bne	r2,zero,10022a84 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
10022a70:	e0bffc17 	ldw	r2,-16(fp)
10022a74:	10800304 	addi	r2,r2,12
10022a78:	1007883a 	mov	r3,r2
10022a7c:	00810004 	movi	r2,1024
10022a80:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
10022a84:	e0bffc17 	ldw	r2,-16(fp)
10022a88:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
10022a8c:	e0bffc17 	ldw	r2,-16(fp)
10022a90:	10800204 	addi	r2,r2,8
10022a94:	10800037 	ldwio	r2,0(r2)
10022a98:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
10022a9c:	e0bffa17 	ldw	r2,-24(fp)
10022aa0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
10022aa4:	10000226 	beq	r2,zero,10022ab0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
10022aa8:	e0bff717 	ldw	r2,-36(fp)
10022aac:	1000031e 	bne	r2,zero,10022abc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
10022ab0:	e0bffa17 	ldw	r2,-24(fp)
10022ab4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
10022ab8:	103ff426 	beq	r2,zero,10022a8c <__alt_data_end+0xf0022a8c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
10022abc:	e0bffa17 	ldw	r2,-24(fp)
10022ac0:	1080100c 	andi	r2,r2,64
10022ac4:	10001e26 	beq	r2,zero,10022b40 <alt_avalon_spi_command+0x14c>
10022ac8:	e0bff717 	ldw	r2,-36(fp)
10022acc:	00801c0e 	bge	zero,r2,10022b40 <alt_avalon_spi_command+0x14c>
    {
      credits--;
10022ad0:	e0bff717 	ldw	r2,-36(fp)
10022ad4:	10bfffc4 	addi	r2,r2,-1
10022ad8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
10022adc:	e0ffff17 	ldw	r3,-4(fp)
10022ae0:	e0bff817 	ldw	r2,-32(fp)
10022ae4:	18800a2e 	bgeu	r3,r2,10022b10 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
10022ae8:	e0bffc17 	ldw	r2,-16(fp)
10022aec:	10800104 	addi	r2,r2,4
10022af0:	1009883a 	mov	r4,r2
10022af4:	e0bfff17 	ldw	r2,-4(fp)
10022af8:	10c00044 	addi	r3,r2,1
10022afc:	e0ffff15 	stw	r3,-4(fp)
10022b00:	10800003 	ldbu	r2,0(r2)
10022b04:	10803fcc 	andi	r2,r2,255
10022b08:	20800035 	stwio	r2,0(r4)
10022b0c:	00000c06 	br	10022b40 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
10022b10:	e0bff517 	ldw	r2,-44(fp)
10022b14:	10000826 	beq	r2,zero,10022b38 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
10022b18:	e0bff517 	ldw	r2,-44(fp)
10022b1c:	10bfffc4 	addi	r2,r2,-1
10022b20:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
10022b24:	e0bffc17 	ldw	r2,-16(fp)
10022b28:	10800104 	addi	r2,r2,4
10022b2c:	0007883a 	mov	r3,zero
10022b30:	10c00035 	stwio	r3,0(r2)
10022b34:	00000206 	br	10022b40 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
10022b38:	00bf0004 	movi	r2,-1024
10022b3c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
10022b40:	e0bffa17 	ldw	r2,-24(fp)
10022b44:	1080200c 	andi	r2,r2,128
10022b48:	10001726 	beq	r2,zero,10022ba8 <alt_avalon_spi_command+0x1b4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
10022b4c:	e0bffc17 	ldw	r2,-16(fp)
10022b50:	10800037 	ldwio	r2,0(r2)
10022b54:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
10022b58:	e0bff617 	ldw	r2,-40(fp)
10022b5c:	10000426 	beq	r2,zero,10022b70 <alt_avalon_spi_command+0x17c>
        read_ignore--;
10022b60:	e0bff617 	ldw	r2,-40(fp)
10022b64:	10bfffc4 	addi	r2,r2,-1
10022b68:	e0bff615 	stw	r2,-40(fp)
10022b6c:	00000506 	br	10022b84 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
10022b70:	e0800217 	ldw	r2,8(fp)
10022b74:	10c00044 	addi	r3,r2,1
10022b78:	e0c00215 	stw	r3,8(fp)
10022b7c:	e0fffb17 	ldw	r3,-20(fp)
10022b80:	10c00005 	stb	r3,0(r2)
      credits++;
10022b84:	e0bff717 	ldw	r2,-36(fp)
10022b88:	10800044 	addi	r2,r2,1
10022b8c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
10022b90:	e0bff617 	ldw	r2,-40(fp)
10022b94:	1000041e 	bne	r2,zero,10022ba8 <alt_avalon_spi_command+0x1b4>
10022b98:	e0c00217 	ldw	r3,8(fp)
10022b9c:	e0bff917 	ldw	r2,-28(fp)
10022ba0:	1880011e 	bne	r3,r2,10022ba8 <alt_avalon_spi_command+0x1b4>
        break;
10022ba4:	00000106 	br	10022bac <alt_avalon_spi_command+0x1b8>
    }
    
  }
10022ba8:	003fb806 	br	10022a8c <__alt_data_end+0xf0022a8c>

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
10022bac:	e0bffc17 	ldw	r2,-16(fp)
10022bb0:	10800204 	addi	r2,r2,8
10022bb4:	10800037 	ldwio	r2,0(r2)
10022bb8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
10022bbc:	e0bffa17 	ldw	r2,-24(fp)
10022bc0:	1080080c 	andi	r2,r2,32
10022bc4:	103ff926 	beq	r2,zero,10022bac <__alt_data_end+0xf0022bac>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
10022bc8:	e0800317 	ldw	r2,12(fp)
10022bcc:	1080004c 	andi	r2,r2,1
10022bd0:	1000041e 	bne	r2,zero,10022be4 <alt_avalon_spi_command+0x1f0>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
10022bd4:	e0bffc17 	ldw	r2,-16(fp)
10022bd8:	10800304 	addi	r2,r2,12
10022bdc:	0007883a 	mov	r3,zero
10022be0:	10c00035 	stwio	r3,0(r2)

  return read_length;
10022be4:	e0800117 	ldw	r2,4(fp)
}
10022be8:	e037883a 	mov	sp,fp
10022bec:	df000017 	ldw	fp,0(sp)
10022bf0:	dec00104 	addi	sp,sp,4
10022bf4:	f800283a 	ret

10022bf8 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
10022bf8:	defffa04 	addi	sp,sp,-24
10022bfc:	dfc00515 	stw	ra,20(sp)
10022c00:	df000415 	stw	fp,16(sp)
10022c04:	df000404 	addi	fp,sp,16
10022c08:	e13ffd15 	stw	r4,-12(fp)
10022c0c:	e17ffe15 	stw	r5,-8(fp)
10022c10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
10022c14:	e0bffd17 	ldw	r2,-12(fp)
10022c18:	10800017 	ldw	r2,0(r2)
10022c1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
10022c20:	e0bffc17 	ldw	r2,-16(fp)
10022c24:	10c00a04 	addi	r3,r2,40
10022c28:	e0bffd17 	ldw	r2,-12(fp)
10022c2c:	10800217 	ldw	r2,8(r2)
10022c30:	1809883a 	mov	r4,r3
10022c34:	e17ffe17 	ldw	r5,-8(fp)
10022c38:	e1bfff17 	ldw	r6,-4(fp)
10022c3c:	100f883a 	mov	r7,r2
10022c40:	00231100 	call	10023110 <altera_avalon_uart_read>
      fd->fd_flags);
}
10022c44:	e037883a 	mov	sp,fp
10022c48:	dfc00117 	ldw	ra,4(sp)
10022c4c:	df000017 	ldw	fp,0(sp)
10022c50:	dec00204 	addi	sp,sp,8
10022c54:	f800283a 	ret

10022c58 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10022c58:	defffa04 	addi	sp,sp,-24
10022c5c:	dfc00515 	stw	ra,20(sp)
10022c60:	df000415 	stw	fp,16(sp)
10022c64:	df000404 	addi	fp,sp,16
10022c68:	e13ffd15 	stw	r4,-12(fp)
10022c6c:	e17ffe15 	stw	r5,-8(fp)
10022c70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
10022c74:	e0bffd17 	ldw	r2,-12(fp)
10022c78:	10800017 	ldw	r2,0(r2)
10022c7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
10022c80:	e0bffc17 	ldw	r2,-16(fp)
10022c84:	10c00a04 	addi	r3,r2,40
10022c88:	e0bffd17 	ldw	r2,-12(fp)
10022c8c:	10800217 	ldw	r2,8(r2)
10022c90:	1809883a 	mov	r4,r3
10022c94:	e17ffe17 	ldw	r5,-8(fp)
10022c98:	e1bfff17 	ldw	r6,-4(fp)
10022c9c:	100f883a 	mov	r7,r2
10022ca0:	002333c0 	call	1002333c <altera_avalon_uart_write>
      fd->fd_flags);
}
10022ca4:	e037883a 	mov	sp,fp
10022ca8:	dfc00117 	ldw	ra,4(sp)
10022cac:	df000017 	ldw	fp,0(sp)
10022cb0:	dec00204 	addi	sp,sp,8
10022cb4:	f800283a 	ret

10022cb8 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
10022cb8:	defffc04 	addi	sp,sp,-16
10022cbc:	dfc00315 	stw	ra,12(sp)
10022cc0:	df000215 	stw	fp,8(sp)
10022cc4:	df000204 	addi	fp,sp,8
10022cc8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
10022ccc:	e0bfff17 	ldw	r2,-4(fp)
10022cd0:	10800017 	ldw	r2,0(r2)
10022cd4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
10022cd8:	e0bffe17 	ldw	r2,-8(fp)
10022cdc:	10c00a04 	addi	r3,r2,40
10022ce0:	e0bfff17 	ldw	r2,-4(fp)
10022ce4:	10800217 	ldw	r2,8(r2)
10022ce8:	1809883a 	mov	r4,r3
10022cec:	100b883a 	mov	r5,r2
10022cf0:	002306c0 	call	1002306c <altera_avalon_uart_close>
}
10022cf4:	e037883a 	mov	sp,fp
10022cf8:	dfc00117 	ldw	ra,4(sp)
10022cfc:	df000017 	ldw	fp,0(sp)
10022d00:	dec00204 	addi	sp,sp,8
10022d04:	f800283a 	ret

10022d08 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
10022d08:	defff804 	addi	sp,sp,-32
10022d0c:	dfc00715 	stw	ra,28(sp)
10022d10:	df000615 	stw	fp,24(sp)
10022d14:	df000604 	addi	fp,sp,24
10022d18:	e13ffd15 	stw	r4,-12(fp)
10022d1c:	e17ffe15 	stw	r5,-8(fp)
10022d20:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
10022d24:	e0bffd17 	ldw	r2,-12(fp)
10022d28:	10800017 	ldw	r2,0(r2)
10022d2c:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
10022d30:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
10022d34:	1000041e 	bne	r2,zero,10022d48 <altera_avalon_uart_init+0x40>
10022d38:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
10022d3c:	1000021e 	bne	r2,zero,10022d48 <altera_avalon_uart_init+0x40>
10022d40:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
10022d44:	10000226 	beq	r2,zero,10022d50 <altera_avalon_uart_init+0x48>
10022d48:	00800044 	movi	r2,1
10022d4c:	00000106 	br	10022d54 <altera_avalon_uart_init+0x4c>
10022d50:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
10022d54:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
10022d58:	e0bffc17 	ldw	r2,-16(fp)
10022d5c:	10000f1e 	bne	r2,zero,10022d9c <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
10022d60:	e0bffd17 	ldw	r2,-12(fp)
10022d64:	00c32004 	movi	r3,3200
10022d68:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
10022d6c:	e0bffb17 	ldw	r2,-20(fp)
10022d70:	10800304 	addi	r2,r2,12
10022d74:	e0fffd17 	ldw	r3,-12(fp)
10022d78:	18c00117 	ldw	r3,4(r3)
10022d7c:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
10022d80:	d8000015 	stw	zero,0(sp)
10022d84:	e13ffe17 	ldw	r4,-8(fp)
10022d88:	e17fff17 	ldw	r5,-4(fp)
10022d8c:	018400b4 	movhi	r6,4098
10022d90:	318b6c04 	addi	r6,r6,11696
10022d94:	e1fffd17 	ldw	r7,-12(fp)
10022d98:	002145c0 	call	1002145c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
10022d9c:	e037883a 	mov	sp,fp
10022da0:	dfc00117 	ldw	ra,4(sp)
10022da4:	df000017 	ldw	fp,0(sp)
10022da8:	dec00204 	addi	sp,sp,8
10022dac:	f800283a 	ret

10022db0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
10022db0:	defffa04 	addi	sp,sp,-24
10022db4:	dfc00515 	stw	ra,20(sp)
10022db8:	df000415 	stw	fp,16(sp)
10022dbc:	df000404 	addi	fp,sp,16
10022dc0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
10022dc4:	e0bfff17 	ldw	r2,-4(fp)
10022dc8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
10022dcc:	e0bffc17 	ldw	r2,-16(fp)
10022dd0:	10800017 	ldw	r2,0(r2)
10022dd4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
10022dd8:	e0bffd17 	ldw	r2,-12(fp)
10022ddc:	10800204 	addi	r2,r2,8
10022de0:	10800037 	ldwio	r2,0(r2)
10022de4:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
10022de8:	e0bffd17 	ldw	r2,-12(fp)
10022dec:	10800204 	addi	r2,r2,8
10022df0:	0007883a 	mov	r3,zero
10022df4:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
10022df8:	e0bffd17 	ldw	r2,-12(fp)
10022dfc:	10800204 	addi	r2,r2,8
10022e00:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
10022e04:	e0bffe17 	ldw	r2,-8(fp)
10022e08:	1080200c 	andi	r2,r2,128
10022e0c:	10000326 	beq	r2,zero,10022e1c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
10022e10:	e13ffc17 	ldw	r4,-16(fp)
10022e14:	e17ffe17 	ldw	r5,-8(fp)
10022e18:	0022e480 	call	10022e48 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
10022e1c:	e0bffe17 	ldw	r2,-8(fp)
10022e20:	1081100c 	andi	r2,r2,1088
10022e24:	10000326 	beq	r2,zero,10022e34 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
10022e28:	e13ffc17 	ldw	r4,-16(fp)
10022e2c:	e17ffe17 	ldw	r5,-8(fp)
10022e30:	0022f280 	call	10022f28 <altera_avalon_uart_txirq>
  }
  

}
10022e34:	e037883a 	mov	sp,fp
10022e38:	dfc00117 	ldw	ra,4(sp)
10022e3c:	df000017 	ldw	fp,0(sp)
10022e40:	dec00204 	addi	sp,sp,8
10022e44:	f800283a 	ret

10022e48 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
10022e48:	defffc04 	addi	sp,sp,-16
10022e4c:	df000315 	stw	fp,12(sp)
10022e50:	df000304 	addi	fp,sp,12
10022e54:	e13ffe15 	stw	r4,-8(fp)
10022e58:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
10022e5c:	e0bfff17 	ldw	r2,-4(fp)
10022e60:	108000cc 	andi	r2,r2,3
10022e64:	10000126 	beq	r2,zero,10022e6c <altera_avalon_uart_rxirq+0x24>
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
10022e68:	00002b06 	br	10022f18 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
10022e6c:	e0bffe17 	ldw	r2,-8(fp)
10022e70:	10800317 	ldw	r2,12(r2)
10022e74:	e0bffe17 	ldw	r2,-8(fp)
10022e78:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10022e7c:	e0bffe17 	ldw	r2,-8(fp)
10022e80:	10800317 	ldw	r2,12(r2)
10022e84:	10800044 	addi	r2,r2,1
10022e88:	10800fcc 	andi	r2,r2,63
10022e8c:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
10022e90:	e0bffe17 	ldw	r2,-8(fp)
10022e94:	10800317 	ldw	r2,12(r2)
10022e98:	e0fffe17 	ldw	r3,-8(fp)
10022e9c:	18c00017 	ldw	r3,0(r3)
10022ea0:	18c00037 	ldwio	r3,0(r3)
10022ea4:	1809883a 	mov	r4,r3
10022ea8:	e0fffe17 	ldw	r3,-8(fp)
10022eac:	1885883a 	add	r2,r3,r2
10022eb0:	10800704 	addi	r2,r2,28
10022eb4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
10022eb8:	e0bffe17 	ldw	r2,-8(fp)
10022ebc:	e0fffd17 	ldw	r3,-12(fp)
10022ec0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10022ec4:	e0bffe17 	ldw	r2,-8(fp)
10022ec8:	10800317 	ldw	r2,12(r2)
10022ecc:	10800044 	addi	r2,r2,1
10022ed0:	10800fcc 	andi	r2,r2,63
10022ed4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
10022ed8:	e0bffe17 	ldw	r2,-8(fp)
10022edc:	10c00217 	ldw	r3,8(r2)
10022ee0:	e0bffd17 	ldw	r2,-12(fp)
10022ee4:	18800c1e 	bne	r3,r2,10022f18 <altera_avalon_uart_rxirq+0xd0>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
10022ee8:	e0bffe17 	ldw	r2,-8(fp)
10022eec:	10c00117 	ldw	r3,4(r2)
10022ef0:	00bfdfc4 	movi	r2,-129
10022ef4:	1886703a 	and	r3,r3,r2
10022ef8:	e0bffe17 	ldw	r2,-8(fp)
10022efc:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
10022f00:	e0bffe17 	ldw	r2,-8(fp)
10022f04:	10800017 	ldw	r2,0(r2)
10022f08:	10800304 	addi	r2,r2,12
10022f0c:	e0fffe17 	ldw	r3,-8(fp)
10022f10:	18c00117 	ldw	r3,4(r3)
10022f14:	10c00035 	stwio	r3,0(r2)
  }   
}
10022f18:	e037883a 	mov	sp,fp
10022f1c:	df000017 	ldw	fp,0(sp)
10022f20:	dec00104 	addi	sp,sp,4
10022f24:	f800283a 	ret

10022f28 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
10022f28:	defffb04 	addi	sp,sp,-20
10022f2c:	df000415 	stw	fp,16(sp)
10022f30:	df000404 	addi	fp,sp,16
10022f34:	e13ffc15 	stw	r4,-16(fp)
10022f38:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
10022f3c:	e0bffc17 	ldw	r2,-16(fp)
10022f40:	10c00417 	ldw	r3,16(r2)
10022f44:	e0bffc17 	ldw	r2,-16(fp)
10022f48:	10800517 	ldw	r2,20(r2)
10022f4c:	18803226 	beq	r3,r2,10023018 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
10022f50:	e0bffc17 	ldw	r2,-16(fp)
10022f54:	10800617 	ldw	r2,24(r2)
10022f58:	1080008c 	andi	r2,r2,2
10022f5c:	10000326 	beq	r2,zero,10022f6c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
10022f60:	e0bffd17 	ldw	r2,-12(fp)
10022f64:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
10022f68:	10001d26 	beq	r2,zero,10022fe0 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
10022f6c:	e0bffc17 	ldw	r2,-16(fp)
10022f70:	10800417 	ldw	r2,16(r2)
10022f74:	e0bffc17 	ldw	r2,-16(fp)
10022f78:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
10022f7c:	e0bffc17 	ldw	r2,-16(fp)
10022f80:	10800017 	ldw	r2,0(r2)
10022f84:	10800104 	addi	r2,r2,4
10022f88:	e0fffc17 	ldw	r3,-16(fp)
10022f8c:	18c00417 	ldw	r3,16(r3)
10022f90:	e13ffc17 	ldw	r4,-16(fp)
10022f94:	20c7883a 	add	r3,r4,r3
10022f98:	18c01704 	addi	r3,r3,92
10022f9c:	18c00003 	ldbu	r3,0(r3)
10022fa0:	18c03fcc 	andi	r3,r3,255
10022fa4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
10022fa8:	e0bffc17 	ldw	r2,-16(fp)
10022fac:	10800417 	ldw	r2,16(r2)
10022fb0:	10800044 	addi	r2,r2,1
10022fb4:	e0fffc17 	ldw	r3,-16(fp)
10022fb8:	18800415 	stw	r2,16(r3)
10022fbc:	10c00fcc 	andi	r3,r2,63
10022fc0:	e0bffc17 	ldw	r2,-16(fp)
10022fc4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
10022fc8:	e0bffc17 	ldw	r2,-16(fp)
10022fcc:	10800117 	ldw	r2,4(r2)
10022fd0:	10c01014 	ori	r3,r2,64
10022fd4:	e0bffc17 	ldw	r2,-16(fp)
10022fd8:	10c00115 	stw	r3,4(r2)
10022fdc:	00000e06 	br	10023018 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
10022fe0:	e0bffc17 	ldw	r2,-16(fp)
10022fe4:	10800017 	ldw	r2,0(r2)
10022fe8:	10800204 	addi	r2,r2,8
10022fec:	10800037 	ldwio	r2,0(r2)
10022ff0:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
10022ff4:	e0bffd17 	ldw	r2,-12(fp)
10022ff8:	1082000c 	andi	r2,r2,2048
10022ffc:	1000061e 	bne	r2,zero,10023018 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
10023000:	e0bffc17 	ldw	r2,-16(fp)
10023004:	10c00117 	ldw	r3,4(r2)
10023008:	00bfefc4 	movi	r2,-65
1002300c:	1886703a 	and	r3,r3,r2
10023010:	e0bffc17 	ldw	r2,-16(fp)
10023014:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
10023018:	e0bffc17 	ldw	r2,-16(fp)
1002301c:	10c00417 	ldw	r3,16(r2)
10023020:	e0bffc17 	ldw	r2,-16(fp)
10023024:	10800517 	ldw	r2,20(r2)
10023028:	1880061e 	bne	r3,r2,10023044 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1002302c:	e0bffc17 	ldw	r2,-16(fp)
10023030:	10c00117 	ldw	r3,4(r2)
10023034:	00beefc4 	movi	r2,-1089
10023038:	1886703a 	and	r3,r3,r2
1002303c:	e0bffc17 	ldw	r2,-16(fp)
10023040:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10023044:	e0bffc17 	ldw	r2,-16(fp)
10023048:	10800017 	ldw	r2,0(r2)
1002304c:	10800304 	addi	r2,r2,12
10023050:	e0fffc17 	ldw	r3,-16(fp)
10023054:	18c00117 	ldw	r3,4(r3)
10023058:	10c00035 	stwio	r3,0(r2)
}
1002305c:	e037883a 	mov	sp,fp
10023060:	df000017 	ldw	fp,0(sp)
10023064:	dec00104 	addi	sp,sp,4
10023068:	f800283a 	ret

1002306c <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
1002306c:	defffd04 	addi	sp,sp,-12
10023070:	df000215 	stw	fp,8(sp)
10023074:	df000204 	addi	fp,sp,8
10023078:	e13ffe15 	stw	r4,-8(fp)
1002307c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
10023080:	00000506 	br	10023098 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10023084:	e0bfff17 	ldw	r2,-4(fp)
10023088:	1090000c 	andi	r2,r2,16384
1002308c:	10000226 	beq	r2,zero,10023098 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
10023090:	00bffd44 	movi	r2,-11
10023094:	00000606 	br	100230b0 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
10023098:	e0bffe17 	ldw	r2,-8(fp)
1002309c:	10c00417 	ldw	r3,16(r2)
100230a0:	e0bffe17 	ldw	r2,-8(fp)
100230a4:	10800517 	ldw	r2,20(r2)
100230a8:	18bff61e 	bne	r3,r2,10023084 <__alt_data_end+0xf0023084>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100230ac:	0005883a 	mov	r2,zero
}
100230b0:	e037883a 	mov	sp,fp
100230b4:	df000017 	ldw	fp,0(sp)
100230b8:	dec00104 	addi	sp,sp,4
100230bc:	f800283a 	ret

100230c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100230c0:	defffe04 	addi	sp,sp,-8
100230c4:	dfc00115 	stw	ra,4(sp)
100230c8:	df000015 	stw	fp,0(sp)
100230cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100230d0:	008400b4 	movhi	r2,4098
100230d4:	109d1b04 	addi	r2,r2,29804
100230d8:	10800017 	ldw	r2,0(r2)
100230dc:	10000526 	beq	r2,zero,100230f4 <alt_get_errno+0x34>
100230e0:	008400b4 	movhi	r2,4098
100230e4:	109d1b04 	addi	r2,r2,29804
100230e8:	10800017 	ldw	r2,0(r2)
100230ec:	103ee83a 	callr	r2
100230f0:	00000206 	br	100230fc <alt_get_errno+0x3c>
100230f4:	008400f4 	movhi	r2,4099
100230f8:	10a48b04 	addi	r2,r2,-28116
}
100230fc:	e037883a 	mov	sp,fp
10023100:	dfc00117 	ldw	ra,4(sp)
10023104:	df000017 	ldw	fp,0(sp)
10023108:	dec00204 	addi	sp,sp,8
1002310c:	f800283a 	ret

10023110 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
10023110:	defff204 	addi	sp,sp,-56
10023114:	dfc00d15 	stw	ra,52(sp)
10023118:	df000c15 	stw	fp,48(sp)
1002311c:	df000c04 	addi	fp,sp,48
10023120:	e13ffc15 	stw	r4,-16(fp)
10023124:	e17ffd15 	stw	r5,-12(fp)
10023128:	e1bffe15 	stw	r6,-8(fp)
1002312c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
10023130:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
10023134:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
10023138:	e0bfff17 	ldw	r2,-4(fp)
1002313c:	1090000c 	andi	r2,r2,16384
10023140:	1005003a 	cmpeq	r2,r2,zero
10023144:	10803fcc 	andi	r2,r2,255
10023148:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
1002314c:	00001306 	br	1002319c <altera_avalon_uart_read+0x8c>
    {
      count++;
10023150:	e0bff517 	ldw	r2,-44(fp)
10023154:	10800044 	addi	r2,r2,1
10023158:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
1002315c:	e0bffd17 	ldw	r2,-12(fp)
10023160:	10c00044 	addi	r3,r2,1
10023164:	e0fffd15 	stw	r3,-12(fp)
10023168:	e0fffc17 	ldw	r3,-16(fp)
1002316c:	18c00217 	ldw	r3,8(r3)
10023170:	e13ffc17 	ldw	r4,-16(fp)
10023174:	20c7883a 	add	r3,r4,r3
10023178:	18c00704 	addi	r3,r3,28
1002317c:	18c00003 	ldbu	r3,0(r3)
10023180:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
10023184:	e0bffc17 	ldw	r2,-16(fp)
10023188:	10800217 	ldw	r2,8(r2)
1002318c:	10800044 	addi	r2,r2,1
10023190:	10c00fcc 	andi	r3,r2,63
10023194:	e0bffc17 	ldw	r2,-16(fp)
10023198:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
1002319c:	e0fff517 	ldw	r3,-44(fp)
100231a0:	e0bffe17 	ldw	r2,-8(fp)
100231a4:	1880050e 	bge	r3,r2,100231bc <altera_avalon_uart_read+0xac>
100231a8:	e0bffc17 	ldw	r2,-16(fp)
100231ac:	10c00217 	ldw	r3,8(r2)
100231b0:	e0bffc17 	ldw	r2,-16(fp)
100231b4:	10800317 	ldw	r2,12(r2)
100231b8:	18bfe51e 	bne	r3,r2,10023150 <__alt_data_end+0xf0023150>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
100231bc:	e0bff517 	ldw	r2,-44(fp)
100231c0:	1000251e 	bne	r2,zero,10023258 <altera_avalon_uart_read+0x148>
100231c4:	e0bffc17 	ldw	r2,-16(fp)
100231c8:	10c00217 	ldw	r3,8(r2)
100231cc:	e0bffc17 	ldw	r2,-16(fp)
100231d0:	10800317 	ldw	r2,12(r2)
100231d4:	1880201e 	bne	r3,r2,10023258 <altera_avalon_uart_read+0x148>
    {
      if (!block)
100231d8:	e0bff617 	ldw	r2,-40(fp)
100231dc:	1000071e 	bne	r2,zero,100231fc <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
100231e0:	00230c00 	call	100230c0 <alt_get_errno>
100231e4:	1007883a 	mov	r3,r2
100231e8:	008002c4 	movi	r2,11
100231ec:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
100231f0:	00800044 	movi	r2,1
100231f4:	e0bff405 	stb	r2,-48(fp)
        break;
100231f8:	00001b06 	br	10023268 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100231fc:	0005303a 	rdctl	r2,status
10023200:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10023204:	e0fff817 	ldw	r3,-32(fp)
10023208:	00bfff84 	movi	r2,-2
1002320c:	1884703a 	and	r2,r3,r2
10023210:	1001703a 	wrctl	status,r2
  
  return context;
10023214:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
10023218:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
1002321c:	e0bffc17 	ldw	r2,-16(fp)
10023220:	10800117 	ldw	r2,4(r2)
10023224:	10c02014 	ori	r3,r2,128
10023228:	e0bffc17 	ldw	r2,-16(fp)
1002322c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
10023230:	e0bffc17 	ldw	r2,-16(fp)
10023234:	10800017 	ldw	r2,0(r2)
10023238:	10800304 	addi	r2,r2,12
1002323c:	e0fffc17 	ldw	r3,-16(fp)
10023240:	18c00117 	ldw	r3,4(r3)
10023244:	10c00035 	stwio	r3,0(r2)
10023248:	e0bff717 	ldw	r2,-36(fp)
1002324c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10023250:	e0bff917 	ldw	r2,-28(fp)
10023254:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
10023258:	e0bff517 	ldw	r2,-44(fp)
1002325c:	1000021e 	bne	r2,zero,10023268 <altera_avalon_uart_read+0x158>
10023260:	e0bffe17 	ldw	r2,-8(fp)
10023264:	103fb91e 	bne	r2,zero,1002314c <__alt_data_end+0xf002314c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10023268:	0005303a 	rdctl	r2,status
1002326c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10023270:	e0fffa17 	ldw	r3,-24(fp)
10023274:	00bfff84 	movi	r2,-2
10023278:	1884703a 	and	r2,r3,r2
1002327c:	1001703a 	wrctl	status,r2
  
  return context;
10023280:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
10023284:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
10023288:	e0bffc17 	ldw	r2,-16(fp)
1002328c:	10800117 	ldw	r2,4(r2)
10023290:	10c02014 	ori	r3,r2,128
10023294:	e0bffc17 	ldw	r2,-16(fp)
10023298:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
1002329c:	e0bffc17 	ldw	r2,-16(fp)
100232a0:	10800017 	ldw	r2,0(r2)
100232a4:	10800304 	addi	r2,r2,12
100232a8:	e0fffc17 	ldw	r3,-16(fp)
100232ac:	18c00117 	ldw	r3,4(r3)
100232b0:	10c00035 	stwio	r3,0(r2)
100232b4:	e0bff717 	ldw	r2,-36(fp)
100232b8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100232bc:	e0bffb17 	ldw	r2,-20(fp)
100232c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
100232c4:	e0bff403 	ldbu	r2,-48(fp)
100232c8:	10000226 	beq	r2,zero,100232d4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
100232cc:	00bffd44 	movi	r2,-11
100232d0:	00000106 	br	100232d8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
100232d4:	e0bff517 	ldw	r2,-44(fp)
  }
}
100232d8:	e037883a 	mov	sp,fp
100232dc:	dfc00117 	ldw	ra,4(sp)
100232e0:	df000017 	ldw	fp,0(sp)
100232e4:	dec00204 	addi	sp,sp,8
100232e8:	f800283a 	ret

100232ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100232ec:	defffe04 	addi	sp,sp,-8
100232f0:	dfc00115 	stw	ra,4(sp)
100232f4:	df000015 	stw	fp,0(sp)
100232f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100232fc:	008400b4 	movhi	r2,4098
10023300:	109d1b04 	addi	r2,r2,29804
10023304:	10800017 	ldw	r2,0(r2)
10023308:	10000526 	beq	r2,zero,10023320 <alt_get_errno+0x34>
1002330c:	008400b4 	movhi	r2,4098
10023310:	109d1b04 	addi	r2,r2,29804
10023314:	10800017 	ldw	r2,0(r2)
10023318:	103ee83a 	callr	r2
1002331c:	00000206 	br	10023328 <alt_get_errno+0x3c>
10023320:	008400f4 	movhi	r2,4099
10023324:	10a48b04 	addi	r2,r2,-28116
}
10023328:	e037883a 	mov	sp,fp
1002332c:	dfc00117 	ldw	ra,4(sp)
10023330:	df000017 	ldw	fp,0(sp)
10023334:	dec00204 	addi	sp,sp,8
10023338:	f800283a 	ret

1002333c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
1002333c:	defff204 	addi	sp,sp,-56
10023340:	dfc00d15 	stw	ra,52(sp)
10023344:	df000c15 	stw	fp,48(sp)
10023348:	df000c04 	addi	fp,sp,48
1002334c:	e13ffc15 	stw	r4,-16(fp)
10023350:	e17ffd15 	stw	r5,-12(fp)
10023354:	e1bffe15 	stw	r6,-8(fp)
10023358:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
1002335c:	e0bffe17 	ldw	r2,-8(fp)
10023360:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
10023364:	e0bfff17 	ldw	r2,-4(fp)
10023368:	1090000c 	andi	r2,r2,16384
1002336c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
10023370:	00003c06 	br	10023464 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
10023374:	e0bffc17 	ldw	r2,-16(fp)
10023378:	10800517 	ldw	r2,20(r2)
1002337c:	10800044 	addi	r2,r2,1
10023380:	10800fcc 	andi	r2,r2,63
10023384:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
10023388:	e0bffc17 	ldw	r2,-16(fp)
1002338c:	10c00417 	ldw	r3,16(r2)
10023390:	e0bff617 	ldw	r2,-40(fp)
10023394:	1880221e 	bne	r3,r2,10023420 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
10023398:	e0bff517 	ldw	r2,-44(fp)
1002339c:	10000526 	beq	r2,zero,100233b4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
100233a0:	00232ec0 	call	100232ec <alt_get_errno>
100233a4:	1007883a 	mov	r3,r2
100233a8:	008002c4 	movi	r2,11
100233ac:	18800015 	stw	r2,0(r3)
        break;
100233b0:	00002e06 	br	1002346c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100233b4:	0005303a 	rdctl	r2,status
100233b8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100233bc:	e0fff817 	ldw	r3,-32(fp)
100233c0:	00bfff84 	movi	r2,-2
100233c4:	1884703a 	and	r2,r3,r2
100233c8:	1001703a 	wrctl	status,r2
  
  return context;
100233cc:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
100233d0:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
100233d4:	e0bffc17 	ldw	r2,-16(fp)
100233d8:	10800117 	ldw	r2,4(r2)
100233dc:	10c11014 	ori	r3,r2,1088
100233e0:	e0bffc17 	ldw	r2,-16(fp)
100233e4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100233e8:	e0bffc17 	ldw	r2,-16(fp)
100233ec:	10800017 	ldw	r2,0(r2)
100233f0:	10800304 	addi	r2,r2,12
100233f4:	e0fffc17 	ldw	r3,-16(fp)
100233f8:	18c00117 	ldw	r3,4(r3)
100233fc:	10c00035 	stwio	r3,0(r2)
10023400:	e0bff717 	ldw	r2,-36(fp)
10023404:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10023408:	e0bff917 	ldw	r2,-28(fp)
1002340c:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
10023410:	e0bffc17 	ldw	r2,-16(fp)
10023414:	10c00417 	ldw	r3,16(r2)
10023418:	e0bff617 	ldw	r2,-40(fp)
1002341c:	18bffc26 	beq	r3,r2,10023410 <__alt_data_end+0xf0023410>
      }
    }

    count--;
10023420:	e0bff417 	ldw	r2,-48(fp)
10023424:	10bfffc4 	addi	r2,r2,-1
10023428:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
1002342c:	e0bffc17 	ldw	r2,-16(fp)
10023430:	10c00517 	ldw	r3,20(r2)
10023434:	e0bffd17 	ldw	r2,-12(fp)
10023438:	11000044 	addi	r4,r2,1
1002343c:	e13ffd15 	stw	r4,-12(fp)
10023440:	10800003 	ldbu	r2,0(r2)
10023444:	1009883a 	mov	r4,r2
10023448:	e0bffc17 	ldw	r2,-16(fp)
1002344c:	10c5883a 	add	r2,r2,r3
10023450:	10801704 	addi	r2,r2,92
10023454:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
10023458:	e0bffc17 	ldw	r2,-16(fp)
1002345c:	e0fff617 	ldw	r3,-40(fp)
10023460:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
10023464:	e0bff417 	ldw	r2,-48(fp)
10023468:	103fc21e 	bne	r2,zero,10023374 <__alt_data_end+0xf0023374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1002346c:	0005303a 	rdctl	r2,status
10023470:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10023474:	e0fffa17 	ldw	r3,-24(fp)
10023478:	00bfff84 	movi	r2,-2
1002347c:	1884703a 	and	r2,r3,r2
10023480:	1001703a 	wrctl	status,r2
  
  return context;
10023484:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
10023488:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
1002348c:	e0bffc17 	ldw	r2,-16(fp)
10023490:	10800117 	ldw	r2,4(r2)
10023494:	10c11014 	ori	r3,r2,1088
10023498:	e0bffc17 	ldw	r2,-16(fp)
1002349c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
100234a0:	e0bffc17 	ldw	r2,-16(fp)
100234a4:	10800017 	ldw	r2,0(r2)
100234a8:	10800304 	addi	r2,r2,12
100234ac:	e0fffc17 	ldw	r3,-16(fp)
100234b0:	18c00117 	ldw	r3,4(r3)
100234b4:	10c00035 	stwio	r3,0(r2)
100234b8:	e0bff717 	ldw	r2,-36(fp)
100234bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100234c0:	e0bffb17 	ldw	r2,-20(fp)
100234c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
100234c8:	e0fffe17 	ldw	r3,-8(fp)
100234cc:	e0bff417 	ldw	r2,-48(fp)
100234d0:	1885c83a 	sub	r2,r3,r2
}
100234d4:	e037883a 	mov	sp,fp
100234d8:	dfc00117 	ldw	ra,4(sp)
100234dc:	df000017 	ldw	fp,0(sp)
100234e0:	dec00204 	addi	sp,sp,8
100234e4:	f800283a 	ret

100234e8 <alt_adc_irq>:
 * alt_adc_irq()
 *
 * Interrupt handler for the altera modular adc.
 */
static void alt_adc_irq(void *context)
{
100234e8:	defff904 	addi	sp,sp,-28
100234ec:	dfc00615 	stw	ra,24(sp)
100234f0:	df000515 	stw	fp,20(sp)
100234f4:	df000504 	addi	fp,sp,20
100234f8:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = (alt_modular_adc_dev *) context;
100234fc:	e0bfff17 	ldw	r2,-4(fp)
10023500:	e0bffb15 	stw	r2,-20(fp)
    alt_irq_context cpu_sr = 0;
10023504:	e03ffc15 	stw	zero,-16(fp)

	if(NULL != dev)
10023508:	e0bffb17 	ldw	r2,-20(fp)
1002350c:	10001926 	beq	r2,zero,10023574 <alt_adc_irq+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10023510:	0005303a 	rdctl	r2,status
10023514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10023518:	e0fffd17 	ldw	r3,-12(fp)
1002351c:	00bfff84 	movi	r2,-2
10023520:	1884703a 	and	r2,r3,r2
10023524:	1001703a 	wrctl	status,r2
  
  return context;
10023528:	e0bffd17 	ldw	r2,-12(fp)
	{
	    cpu_sr = alt_irq_disable_all();
1002352c:	e0bffc15 	stw	r2,-16(fp)
		* Other interrupts are explicitly disabled if callbacks
		* are registered because there is no guarantee that they are 
		* pre-emption-safe. This allows the driver to support 
		* interrupt pre-emption.
		*/
		if(dev->callback) 
10023530:	e0bffb17 	ldw	r2,-20(fp)
10023534:	10800a17 	ldw	r2,40(r2)
10023538:	10000626 	beq	r2,zero,10023554 <alt_adc_irq+0x6c>
		{
			dev->callback (dev->callback_context);
1002353c:	e0bffb17 	ldw	r2,-20(fp)
10023540:	10800a17 	ldw	r2,40(r2)
10023544:	e0fffb17 	ldw	r3,-20(fp)
10023548:	18c00b17 	ldw	r3,44(r3)
1002354c:	1809883a 	mov	r4,r3
10023550:	103ee83a 	callr	r2
		}
    
		/* clear the IRQ status */
		adc_clear_interrupt_status(dev->sample_store_base);
10023554:	e0bffb17 	ldw	r2,-20(fp)
10023558:	10800c17 	ldw	r2,48(r2)
1002355c:	1009883a 	mov	r4,r2
10023560:	00239700 	call	10023970 <adc_clear_interrupt_status>
10023564:	e0bffc17 	ldw	r2,-16(fp)
10023568:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1002356c:	e0bffe17 	ldw	r2,-8(fp)
10023570:	1001703a 	wrctl	status,r2
	    
		alt_irq_enable_all(cpu_sr);
	}
	
    return;
10023574:	0001883a 	nop
}
10023578:	e037883a 	mov	sp,fp
1002357c:	dfc00117 	ldw	ra,4(sp)
10023580:	df000017 	ldw	fp,0(sp)
10023584:	dec00204 	addi	sp,sp,8
10023588:	f800283a 	ret

1002358c <alt_adc_word_read>:
 * Returns:
 * 0 -> success
 * -EINVAL -> Invalid arguments
**/
int alt_adc_word_read (alt_u32 sample_store_base, alt_u32* dest_ptr, alt_u32 len)
{
1002358c:	defff804 	addi	sp,sp,-32
10023590:	df000715 	stw	fp,28(sp)
10023594:	df000704 	addi	fp,sp,28
10023598:	e13ffd15 	stw	r4,-12(fp)
1002359c:	e17ffe15 	stw	r5,-8(fp)
100235a0:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 word = 0;
100235a4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 word_length = len;
100235a8:	e0bfff17 	ldw	r2,-4(fp)
100235ac:	e0bffb15 	stw	r2,-20(fp)
    alt_u32* dest_buf = dest_ptr;
100235b0:	e0bffe17 	ldw	r2,-8(fp)
100235b4:	e0bffa15 	stw	r2,-24(fp)
    alt_u32 base = sample_store_base;
100235b8:	e0bffd17 	ldw	r2,-12(fp)
100235bc:	e0bffc15 	stw	r2,-16(fp)
     
    /* return -EINVAL if invalid arguments passed into function */
    if(NULL == dest_buf)
100235c0:	e0bffa17 	ldw	r2,-24(fp)
100235c4:	1000021e 	bne	r2,zero,100235d0 <alt_adc_word_read+0x44>
    {
    	return -EINVAL;
100235c8:	00bffa84 	movi	r2,-22
100235cc:	00001606 	br	10023628 <alt_adc_word_read+0x9c>
    }

    for(word = 0; word < word_length; word++)
100235d0:	e03ff915 	stw	zero,-28(fp)
100235d4:	00001006 	br	10023618 <alt_adc_word_read+0x8c>
    {
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);
100235d8:	e0bff917 	ldw	r2,-28(fp)
100235dc:	1085883a 	add	r2,r2,r2
100235e0:	1085883a 	add	r2,r2,r2
100235e4:	1007883a 	mov	r3,r2
100235e8:	e0bffc17 	ldw	r2,-16(fp)
100235ec:	1885883a 	add	r2,r3,r2
100235f0:	10800037 	ldwio	r2,0(r2)
100235f4:	1007883a 	mov	r3,r2
100235f8:	e0bffa17 	ldw	r2,-24(fp)
100235fc:	10c00015 	stw	r3,0(r2)

       dest_buf++;
10023600:	e0bffa17 	ldw	r2,-24(fp)
10023604:	10800104 	addi	r2,r2,4
10023608:	e0bffa15 	stw	r2,-24(fp)
    if(NULL == dest_buf)
    {
    	return -EINVAL;
    }

    for(word = 0; word < word_length; word++)
1002360c:	e0bff917 	ldw	r2,-28(fp)
10023610:	10800044 	addi	r2,r2,1
10023614:	e0bff915 	stw	r2,-28(fp)
10023618:	e0fff917 	ldw	r3,-28(fp)
1002361c:	e0bffb17 	ldw	r2,-20(fp)
10023620:	18bfed36 	bltu	r3,r2,100235d8 <__alt_data_end+0xf00235d8>
       *dest_buf = IORD_32DIRECT((base + (word * 4)),0);

       dest_buf++;
    }

    return 0;
10023624:	0005883a 	mov	r2,zero

}
10023628:	e037883a 	mov	sp,fp
1002362c:	df000017 	ldw	fp,0(sp)
10023630:	dec00104 	addi	sp,sp,4
10023634:	f800283a 	ret

10023638 <altera_modular_adc_init>:


void altera_modular_adc_init(alt_modular_adc_dev* dev, alt_32 ic_id, alt_32 irq)
{
10023638:	defffa04 	addi	sp,sp,-24
1002363c:	dfc00515 	stw	ra,20(sp)
10023640:	df000415 	stw	fp,16(sp)
10023644:	df000404 	addi	fp,sp,16
10023648:	e13ffd15 	stw	r4,-12(fp)
1002364c:	e17ffe15 	stw	r5,-8(fp)
10023650:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist altera_modular_adc_list;
    alt_dev_llist_insert((alt_dev_llist*) dev, &altera_modular_adc_list);
10023654:	e13ffd17 	ldw	r4,-12(fp)
10023658:	d1604404 	addi	r5,gp,-32496
1002365c:	0023d540 	call	10023d54 <alt_dev_llist_insert>
	
	if ((0 <= ic_id) && (0 <= irq))
10023660:	e0bffe17 	ldw	r2,-8(fp)
10023664:	10000b16 	blt	r2,zero,10023694 <altera_modular_adc_init+0x5c>
10023668:	e0bfff17 	ldw	r2,-4(fp)
1002366c:	10000916 	blt	r2,zero,10023694 <altera_modular_adc_init+0x5c>
	{
          /* Install IRQ handler */
	  #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
              alt_ic_isr_register(ic_id, irq, alt_adc_irq, 
10023670:	e0fffe17 	ldw	r3,-8(fp)
10023674:	e0bfff17 	ldw	r2,-4(fp)
10023678:	d8000015 	stw	zero,0(sp)
1002367c:	1809883a 	mov	r4,r3
10023680:	100b883a 	mov	r5,r2
10023684:	018400b4 	movhi	r6,4098
10023688:	318d3a04 	addi	r6,r6,13544
1002368c:	e1fffd17 	ldw	r7,-12(fp)
10023690:	002145c0 	call	1002145c <alt_ic_isr_register>
                      dev, NULL);
          #else
             alt_irq_register(irq, dev, alt_adc_irq);
          #endif 
	}
}
10023694:	e037883a 	mov	sp,fp
10023698:	dfc00117 	ldw	ra,4(sp)
1002369c:	df000017 	ldw	fp,0(sp)
100236a0:	dec00204 	addi	sp,sp,8
100236a4:	f800283a 	ret

100236a8 <alt_adc_register_callback>:
void alt_adc_register_callback(
	alt_modular_adc_dev *dev,
	alt_adc_callback callback,
	void *context,
	alt_u32 sample_store_base)
{
100236a8:	defffa04 	addi	sp,sp,-24
100236ac:	dfc00515 	stw	ra,20(sp)
100236b0:	df000415 	stw	fp,16(sp)
100236b4:	df000404 	addi	fp,sp,16
100236b8:	e13ffc15 	stw	r4,-16(fp)
100236bc:	e17ffd15 	stw	r5,-12(fp)
100236c0:	e1bffe15 	stw	r6,-8(fp)
100236c4:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
100236c8:	e0bffc17 	ldw	r2,-16(fp)
100236cc:	e0fffd17 	ldw	r3,-12(fp)
100236d0:	10c00a15 	stw	r3,40(r2)
    dev->callback_context = context;
100236d4:	e0bffc17 	ldw	r2,-16(fp)
100236d8:	e0fffe17 	ldw	r3,-8(fp)
100236dc:	10c00b15 	stw	r3,44(r2)
    dev->sample_store_base = sample_store_base;
100236e0:	e0bffc17 	ldw	r2,-16(fp)
100236e4:	e0ffff17 	ldw	r3,-4(fp)
100236e8:	10c00c15 	stw	r3,48(r2)
	
	if(NULL != callback)
100236ec:	e0bffd17 	ldw	r2,-12(fp)
100236f0:	10000726 	beq	r2,zero,10023710 <alt_adc_register_callback+0x68>
	{
                adc_clear_interrupt_status(sample_store_base);
100236f4:	e0bfff17 	ldw	r2,-4(fp)
100236f8:	1009883a 	mov	r4,r2
100236fc:	00239700 	call	10023970 <adc_clear_interrupt_status>
		adc_interrupt_enable(sample_store_base);
10023700:	e0bfff17 	ldw	r2,-4(fp)
10023704:	1009883a 	mov	r4,r2
10023708:	00238ec0 	call	100238ec <adc_interrupt_enable>
1002370c:	00000606 	br	10023728 <alt_adc_register_callback+0x80>
	}
	else
	{
		adc_interrupt_disable(sample_store_base);
10023710:	e0bfff17 	ldw	r2,-4(fp)
10023714:	1009883a 	mov	r4,r2
10023718:	002392c0 	call	1002392c <adc_interrupt_disable>
                adc_clear_interrupt_status(sample_store_base);
1002371c:	e0bfff17 	ldw	r2,-4(fp)
10023720:	1009883a 	mov	r4,r2
10023724:	00239700 	call	10023970 <adc_clear_interrupt_status>
	}
	
    
	
    return ;
10023728:	0001883a 	nop
}
1002372c:	e037883a 	mov	sp,fp
10023730:	dfc00117 	ldw	ra,4(sp)
10023734:	df000017 	ldw	fp,0(sp)
10023738:	dec00204 	addi	sp,sp,8
1002373c:	f800283a 	ret

10023740 <altera_modular_adc_open>:

alt_modular_adc_dev* altera_modular_adc_open (const char *name)
{
10023740:	defffc04 	addi	sp,sp,-16
10023744:	dfc00315 	stw	ra,12(sp)
10023748:	df000215 	stw	fp,8(sp)
1002374c:	df000204 	addi	fp,sp,8
10023750:	e13fff15 	stw	r4,-4(fp)
    alt_modular_adc_dev *dev = NULL;
10023754:	e03ffe15 	stw	zero,-8(fp)

    /* Find requested device */
    dev = (alt_modular_adc_dev*) alt_find_dev (name, &altera_modular_adc_list);
10023758:	e13fff17 	ldw	r4,-4(fp)
1002375c:	d1604404 	addi	r5,gp,-32496
10023760:	0023eb00 	call	10023eb0 <alt_find_dev>
10023764:	e0bffe15 	stw	r2,-8(fp)

    return dev;
10023768:	e0bffe17 	ldw	r2,-8(fp)
}
1002376c:	e037883a 	mov	sp,fp
10023770:	dfc00117 	ldw	ra,4(sp)
10023774:	df000017 	ldw	fp,0(sp)
10023778:	dec00204 	addi	sp,sp,8
1002377c:	f800283a 	ret

10023780 <adc_stop>:

void adc_stop(int sequencer_base)
{
10023780:	defffe04 	addi	sp,sp,-8
10023784:	df000115 	stw	fp,4(sp)
10023788:	df000104 	addi	fp,sp,4
1002378c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_STOP(sequencer_base);
10023790:	e0bfff17 	ldw	r2,-4(fp)
10023794:	e0ffff17 	ldw	r3,-4(fp)
10023798:	19000037 	ldwio	r4,0(r3)
1002379c:	00ffff84 	movi	r3,-2
100237a0:	20c6703a 	and	r3,r4,r3
100237a4:	10c00035 	stwio	r3,0(r2)
100237a8:	0001883a 	nop
100237ac:	e0bfff17 	ldw	r2,-4(fp)
100237b0:	10800037 	ldwio	r2,0(r2)
100237b4:	1080004c 	andi	r2,r2,1
100237b8:	103ffc1e 	bne	r2,zero,100237ac <__alt_data_end+0xf00237ac>
}
100237bc:	e037883a 	mov	sp,fp
100237c0:	df000017 	ldw	fp,0(sp)
100237c4:	dec00104 	addi	sp,sp,4
100237c8:	f800283a 	ret

100237cc <adc_start>:

void adc_start(int sequencer_base)
{
100237cc:	defffe04 	addi	sp,sp,-8
100237d0:	df000115 	stw	fp,4(sp)
100237d4:	df000104 	addi	fp,sp,4
100237d8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SEQUENCER_START(sequencer_base);
100237dc:	e0bfff17 	ldw	r2,-4(fp)
100237e0:	e0ffff17 	ldw	r3,-4(fp)
100237e4:	18c00037 	ldwio	r3,0(r3)
100237e8:	18c00054 	ori	r3,r3,1
100237ec:	10c00035 	stwio	r3,0(r2)
}
100237f0:	e037883a 	mov	sp,fp
100237f4:	df000017 	ldw	fp,0(sp)
100237f8:	dec00104 	addi	sp,sp,4
100237fc:	f800283a 	ret

10023800 <adc_set_mode_run_once>:

void adc_set_mode_run_once(int sequencer_base)
{
10023800:	defffe04 	addi	sp,sp,-8
10023804:	df000115 	stw	fp,4(sp)
10023808:	df000104 	addi	fp,sp,4
1002380c:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_ONCE(sequencer_base);
10023810:	e0bfff17 	ldw	r2,-4(fp)
10023814:	e0ffff17 	ldw	r3,-4(fp)
10023818:	19000037 	ldwio	r4,0(r3)
1002381c:	00fffc44 	movi	r3,-15
10023820:	20c6703a 	and	r3,r4,r3
10023824:	18c00094 	ori	r3,r3,2
10023828:	10c00035 	stwio	r3,0(r2)
}
1002382c:	e037883a 	mov	sp,fp
10023830:	df000017 	ldw	fp,0(sp)
10023834:	dec00104 	addi	sp,sp,4
10023838:	f800283a 	ret

1002383c <adc_set_mode_run_continuously>:

void adc_set_mode_run_continuously(int sequencer_base)
{
1002383c:	defffe04 	addi	sp,sp,-8
10023840:	df000115 	stw	fp,4(sp)
10023844:	df000104 	addi	fp,sp,4
10023848:	e13fff15 	stw	r4,-4(fp)
    /* Note: Stop the ADC before calling this function,
       changing ADC mode while RUN bit is set has no effect. */
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_CONTINUOUSLY(sequencer_base);
1002384c:	e0bfff17 	ldw	r2,-4(fp)
10023850:	e0ffff17 	ldw	r3,-4(fp)
10023854:	19000037 	ldwio	r4,0(r3)
10023858:	00fffc44 	movi	r3,-15
1002385c:	20c6703a 	and	r3,r4,r3
10023860:	10c00035 	stwio	r3,0(r2)
}
10023864:	e037883a 	mov	sp,fp
10023868:	df000017 	ldw	fp,0(sp)
1002386c:	dec00104 	addi	sp,sp,4
10023870:	f800283a 	ret

10023874 <adc_recalibrate>:

void adc_recalibrate(int sequencer_base)
{
10023874:	defffc04 	addi	sp,sp,-16
10023878:	dfc00315 	stw	ra,12(sp)
1002387c:	df000215 	stw	fp,8(sp)
10023880:	df000204 	addi	fp,sp,8
10023884:	e13fff15 	stw	r4,-4(fp)
         2. Start the ADC Sequencer Core.
         5. Poll for RUN bit to be clear
         6. Restore CMD register
     */
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
10023888:	e0bfff17 	ldw	r2,-4(fp)
1002388c:	10800037 	ldwio	r2,0(r2)
10023890:	e0bffe15 	stw	r2,-8(fp)
    adc_stop(sequencer_base);
10023894:	e13fff17 	ldw	r4,-4(fp)
10023898:	00237800 	call	10023780 <adc_stop>
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
1002389c:	e0bfff17 	ldw	r2,-4(fp)
100238a0:	e0ffff17 	ldw	r3,-4(fp)
100238a4:	18c00037 	ldwio	r3,0(r3)
100238a8:	18c00394 	ori	r3,r3,14
100238ac:	10c00035 	stwio	r3,0(r2)
    adc_start(sequencer_base);
100238b0:	e13fff17 	ldw	r4,-4(fp)
100238b4:	00237cc0 	call	100237cc <adc_start>
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
100238b8:	0001883a 	nop
100238bc:	e0bfff17 	ldw	r2,-4(fp)
100238c0:	10800037 	ldwio	r2,0(r2)
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
100238c4:	1080004c 	andi	r2,r2,1
    alt_u32 backup_cmd_reg;
    backup_cmd_reg = IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base);
    adc_stop(sequencer_base);
    ALTERA_MODULAR_ADC_SEQUENCER_MODE_RUN_RECALIBRATION(sequencer_base);
    adc_start(sequencer_base);
    while(IORD_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base)
100238c8:	103ffc1e 	bne	r2,zero,100238bc <__alt_data_end+0xf00238bc>
             & ALTERA_MODULAR_ADC_SEQUENCER_CMD_RUN_MSK);
    IOWR_ALTERA_MODULAR_ADC_SEQUENCER_CMD_REG(sequencer_base, backup_cmd_reg);
100238cc:	e0bfff17 	ldw	r2,-4(fp)
100238d0:	e0fffe17 	ldw	r3,-8(fp)
100238d4:	10c00035 	stwio	r3,0(r2)
}
100238d8:	e037883a 	mov	sp,fp
100238dc:	dfc00117 	ldw	ra,4(sp)
100238e0:	df000017 	ldw	fp,0(sp)
100238e4:	dec00204 	addi	sp,sp,8
100238e8:	f800283a 	ret

100238ec <adc_interrupt_enable>:

void adc_interrupt_enable(int sample_store_base)
{
100238ec:	defffe04 	addi	sp,sp,-8
100238f0:	df000115 	stw	fp,4(sp)
100238f4:	df000104 	addi	fp,sp,4
100238f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_ENABLE(sample_store_base);
100238fc:	e0bfff17 	ldw	r2,-4(fp)
10023900:	10804004 	addi	r2,r2,256
10023904:	1007883a 	mov	r3,r2
10023908:	e0bfff17 	ldw	r2,-4(fp)
1002390c:	10804004 	addi	r2,r2,256
10023910:	10800037 	ldwio	r2,0(r2)
10023914:	10800054 	ori	r2,r2,1
10023918:	18800035 	stwio	r2,0(r3)
}
1002391c:	e037883a 	mov	sp,fp
10023920:	df000017 	ldw	fp,0(sp)
10023924:	dec00104 	addi	sp,sp,4
10023928:	f800283a 	ret

1002392c <adc_interrupt_disable>:

void adc_interrupt_disable(int sample_store_base)
{
1002392c:	defffe04 	addi	sp,sp,-8
10023930:	df000115 	stw	fp,4(sp)
10023934:	df000104 	addi	fp,sp,4
10023938:	e13fff15 	stw	r4,-4(fp)
    ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_DISABLE(sample_store_base);
1002393c:	e0bfff17 	ldw	r2,-4(fp)
10023940:	10804004 	addi	r2,r2,256
10023944:	1009883a 	mov	r4,r2
10023948:	e0bfff17 	ldw	r2,-4(fp)
1002394c:	10804004 	addi	r2,r2,256
10023950:	10c00037 	ldwio	r3,0(r2)
10023954:	00bfff84 	movi	r2,-2
10023958:	1884703a 	and	r2,r3,r2
1002395c:	20800035 	stwio	r2,0(r4)
}
10023960:	e037883a 	mov	sp,fp
10023964:	df000017 	ldw	fp,0(sp)
10023968:	dec00104 	addi	sp,sp,4
1002396c:	f800283a 	ret

10023970 <adc_clear_interrupt_status>:

void adc_clear_interrupt_status(int sample_store_base)
{
10023970:	defffe04 	addi	sp,sp,-8
10023974:	df000115 	stw	fp,4(sp)
10023978:	df000104 	addi	fp,sp,4
1002397c:	e13fff15 	stw	r4,-4(fp)
    CLEAR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base);
10023980:	e0bfff17 	ldw	r2,-4(fp)
10023984:	10804104 	addi	r2,r2,260
10023988:	1007883a 	mov	r3,r2
1002398c:	e0bfff17 	ldw	r2,-4(fp)
10023990:	10804104 	addi	r2,r2,260
10023994:	10800037 	ldwio	r2,0(r2)
10023998:	10800054 	ori	r2,r2,1
1002399c:	18800035 	stwio	r2,0(r3)
}
100239a0:	e037883a 	mov	sp,fp
100239a4:	df000017 	ldw	fp,0(sp)
100239a8:	dec00104 	addi	sp,sp,4
100239ac:	f800283a 	ret

100239b0 <adc_interrupt_asserted>:

int adc_interrupt_asserted(int sample_store_base)
{
100239b0:	defffe04 	addi	sp,sp,-8
100239b4:	df000115 	stw	fp,4(sp)
100239b8:	df000104 	addi	fp,sp,4
100239bc:	e13fff15 	stw	r4,-4(fp)
    return((READ_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ_STATUS(sample_store_base)==1) ? -1 : 0);
100239c0:	e0bfff17 	ldw	r2,-4(fp)
100239c4:	10804104 	addi	r2,r2,260
100239c8:	10800037 	ldwio	r2,0(r2)
100239cc:	1080004c 	andi	r2,r2,1
100239d0:	10000226 	beq	r2,zero,100239dc <adc_interrupt_asserted+0x2c>
100239d4:	00bfffc4 	movi	r2,-1
100239d8:	00000106 	br	100239e0 <adc_interrupt_asserted+0x30>
100239dc:	0005883a 	mov	r2,zero
}
100239e0:	e037883a 	mov	sp,fp
100239e4:	df000017 	ldw	fp,0(sp)
100239e8:	dec00104 	addi	sp,sp,4
100239ec:	f800283a 	ret

100239f0 <adc_wait_for_interrupt>:

void adc_wait_for_interrupt(int sample_store_base)
{
100239f0:	defffe04 	addi	sp,sp,-8
100239f4:	df000115 	stw	fp,4(sp)
100239f8:	df000104 	addi	fp,sp,4
100239fc:	e13fff15 	stw	r4,-4(fp)
    WAIT_FOR_ALTERA_MODULAR_ADC_SAMPLE_STORAGE_IRQ(sample_store_base);
10023a00:	0001883a 	nop
10023a04:	e0bfff17 	ldw	r2,-4(fp)
10023a08:	10804104 	addi	r2,r2,260
10023a0c:	10800037 	ldwio	r2,0(r2)
10023a10:	1080004c 	andi	r2,r2,1
10023a14:	103ffb26 	beq	r2,zero,10023a04 <__alt_data_end+0xf0023a04>
}
10023a18:	e037883a 	mov	sp,fp
10023a1c:	df000017 	ldw	fp,0(sp)
10023a20:	dec00104 	addi	sp,sp,4
10023a24:	f800283a 	ret

10023a28 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10023a28:	defff504 	addi	sp,sp,-44
10023a2c:	df000a15 	stw	fp,40(sp)
10023a30:	df000a04 	addi	fp,sp,40
10023a34:	e13ffc15 	stw	r4,-16(fp)
10023a38:	e17ffd15 	stw	r5,-12(fp)
10023a3c:	e1bffe15 	stw	r6,-8(fp)
10023a40:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10023a44:	e03ff615 	stw	zero,-40(fp)
10023a48:	008400f4 	movhi	r2,4099
10023a4c:	10a49104 	addi	r2,r2,-28092
10023a50:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10023a54:	10003f26 	beq	r2,zero,10023b54 <alt_alarm_start+0x12c>
  {
    if (alarm)
10023a58:	e0bffc17 	ldw	r2,-16(fp)
10023a5c:	10003b26 	beq	r2,zero,10023b4c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10023a60:	e0bffc17 	ldw	r2,-16(fp)
10023a64:	e0fffe17 	ldw	r3,-8(fp)
10023a68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10023a6c:	e0bffc17 	ldw	r2,-16(fp)
10023a70:	e0ffff17 	ldw	r3,-4(fp)
10023a74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10023a78:	0005303a 	rdctl	r2,status
10023a7c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10023a80:	e0fff817 	ldw	r3,-32(fp)
10023a84:	00bfff84 	movi	r2,-2
10023a88:	1884703a 	and	r2,r3,r2
10023a8c:	1001703a 	wrctl	status,r2
  
  return context;
10023a90:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
10023a94:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10023a98:	008400f4 	movhi	r2,4099
10023a9c:	10a49204 	addi	r2,r2,-28088
10023aa0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10023aa4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10023aa8:	e0fffd17 	ldw	r3,-12(fp)
10023aac:	e0bff617 	ldw	r2,-40(fp)
10023ab0:	1885883a 	add	r2,r3,r2
10023ab4:	10c00044 	addi	r3,r2,1
10023ab8:	e0bffc17 	ldw	r2,-16(fp)
10023abc:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10023ac0:	e0bffc17 	ldw	r2,-16(fp)
10023ac4:	10c00217 	ldw	r3,8(r2)
10023ac8:	e0bff617 	ldw	r2,-40(fp)
10023acc:	1880042e 	bgeu	r3,r2,10023ae0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10023ad0:	e0bffc17 	ldw	r2,-16(fp)
10023ad4:	00c00044 	movi	r3,1
10023ad8:	10c00405 	stb	r3,16(r2)
10023adc:	00000206 	br	10023ae8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10023ae0:	e0bffc17 	ldw	r2,-16(fp)
10023ae4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10023ae8:	e0fffc17 	ldw	r3,-16(fp)
10023aec:	008400b4 	movhi	r2,4098
10023af0:	109d2004 	addi	r2,r2,29824
10023af4:	e0bff915 	stw	r2,-28(fp)
10023af8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10023afc:	e0bffa17 	ldw	r2,-24(fp)
10023b00:	e0fff917 	ldw	r3,-28(fp)
10023b04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10023b08:	e0bff917 	ldw	r2,-28(fp)
10023b0c:	10c00017 	ldw	r3,0(r2)
10023b10:	e0bffa17 	ldw	r2,-24(fp)
10023b14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10023b18:	e0bff917 	ldw	r2,-28(fp)
10023b1c:	10800017 	ldw	r2,0(r2)
10023b20:	e0fffa17 	ldw	r3,-24(fp)
10023b24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10023b28:	e0bff917 	ldw	r2,-28(fp)
10023b2c:	e0fffa17 	ldw	r3,-24(fp)
10023b30:	10c00015 	stw	r3,0(r2)
10023b34:	e0bff717 	ldw	r2,-36(fp)
10023b38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10023b3c:	e0bffb17 	ldw	r2,-20(fp)
10023b40:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10023b44:	0005883a 	mov	r2,zero
10023b48:	00000306 	br	10023b58 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
10023b4c:	00bffa84 	movi	r2,-22
10023b50:	00000106 	br	10023b58 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10023b54:	00bfde84 	movi	r2,-134
  }
}
10023b58:	e037883a 	mov	sp,fp
10023b5c:	df000017 	ldw	fp,0(sp)
10023b60:	dec00104 	addi	sp,sp,4
10023b64:	f800283a 	ret

10023b68 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10023b68:	defffa04 	addi	sp,sp,-24
10023b6c:	dfc00515 	stw	ra,20(sp)
10023b70:	df000415 	stw	fp,16(sp)
10023b74:	df000404 	addi	fp,sp,16
10023b78:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
10023b7c:	008000c4 	movi	r2,3
10023b80:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10023b84:	e0fffd17 	ldw	r3,-12(fp)
10023b88:	008003f4 	movhi	r2,15
10023b8c:	10909004 	addi	r2,r2,16960
10023b90:	1885383a 	mul	r2,r3,r2
10023b94:	0100bef4 	movhi	r4,763
10023b98:	213c2004 	addi	r4,r4,-3968
10023b9c:	100b883a 	mov	r5,r2
10023ba0:	000c6e00 	call	1000c6e0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10023ba4:	01200034 	movhi	r4,32768
10023ba8:	213fffc4 	addi	r4,r4,-1
10023bac:	100b883a 	mov	r5,r2
10023bb0:	000c6e00 	call	1000c6e0 <__udivsi3>
10023bb4:	e13fff17 	ldw	r4,-4(fp)
10023bb8:	100b883a 	mov	r5,r2
10023bbc:	000c6e00 	call	1000c6e0 <__udivsi3>
10023bc0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10023bc4:	e0bffe17 	ldw	r2,-8(fp)
10023bc8:	10002a26 	beq	r2,zero,10023c74 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10023bcc:	e03ffc15 	stw	zero,-16(fp)
10023bd0:	00001706 	br	10023c30 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10023bd4:	00a00034 	movhi	r2,32768
10023bd8:	10bfffc4 	addi	r2,r2,-1
10023bdc:	10bfffc4 	addi	r2,r2,-1
10023be0:	103ffe1e 	bne	r2,zero,10023bdc <__alt_data_end+0xf0023bdc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10023be4:	e0fffd17 	ldw	r3,-12(fp)
10023be8:	008003f4 	movhi	r2,15
10023bec:	10909004 	addi	r2,r2,16960
10023bf0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10023bf4:	0100bef4 	movhi	r4,763
10023bf8:	213c2004 	addi	r4,r4,-3968
10023bfc:	100b883a 	mov	r5,r2
10023c00:	000c6e00 	call	1000c6e0 <__udivsi3>
10023c04:	01200034 	movhi	r4,32768
10023c08:	213fffc4 	addi	r4,r4,-1
10023c0c:	100b883a 	mov	r5,r2
10023c10:	000c6e00 	call	1000c6e0 <__udivsi3>
10023c14:	1007883a 	mov	r3,r2
10023c18:	e0bfff17 	ldw	r2,-4(fp)
10023c1c:	10c5c83a 	sub	r2,r2,r3
10023c20:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10023c24:	e0bffc17 	ldw	r2,-16(fp)
10023c28:	10800044 	addi	r2,r2,1
10023c2c:	e0bffc15 	stw	r2,-16(fp)
10023c30:	e0fffc17 	ldw	r3,-16(fp)
10023c34:	e0bffe17 	ldw	r2,-8(fp)
10023c38:	18bfe616 	blt	r3,r2,10023bd4 <__alt_data_end+0xf0023bd4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10023c3c:	e0fffd17 	ldw	r3,-12(fp)
10023c40:	008003f4 	movhi	r2,15
10023c44:	10909004 	addi	r2,r2,16960
10023c48:	1885383a 	mul	r2,r3,r2
10023c4c:	0100bef4 	movhi	r4,763
10023c50:	213c2004 	addi	r4,r4,-3968
10023c54:	100b883a 	mov	r5,r2
10023c58:	000c6e00 	call	1000c6e0 <__udivsi3>
10023c5c:	1007883a 	mov	r3,r2
10023c60:	e0bfff17 	ldw	r2,-4(fp)
10023c64:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10023c68:	10bfffc4 	addi	r2,r2,-1
10023c6c:	103ffe1e 	bne	r2,zero,10023c68 <__alt_data_end+0xf0023c68>
10023c70:	00000d06 	br	10023ca8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10023c74:	e0fffd17 	ldw	r3,-12(fp)
10023c78:	008003f4 	movhi	r2,15
10023c7c:	10909004 	addi	r2,r2,16960
10023c80:	1885383a 	mul	r2,r3,r2
10023c84:	0100bef4 	movhi	r4,763
10023c88:	213c2004 	addi	r4,r4,-3968
10023c8c:	100b883a 	mov	r5,r2
10023c90:	000c6e00 	call	1000c6e0 <__udivsi3>
10023c94:	1007883a 	mov	r3,r2
10023c98:	e0bfff17 	ldw	r2,-4(fp)
10023c9c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10023ca0:	10bfffc4 	addi	r2,r2,-1
10023ca4:	00bffe16 	blt	zero,r2,10023ca0 <__alt_data_end+0xf0023ca0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10023ca8:	0005883a 	mov	r2,zero
}
10023cac:	e037883a 	mov	sp,fp
10023cb0:	dfc00117 	ldw	ra,4(sp)
10023cb4:	df000017 	ldw	fp,0(sp)
10023cb8:	dec00204 	addi	sp,sp,8
10023cbc:	f800283a 	ret

10023cc0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10023cc0:	defffe04 	addi	sp,sp,-8
10023cc4:	df000115 	stw	fp,4(sp)
10023cc8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10023ccc:	e03fff15 	stw	zero,-4(fp)
10023cd0:	00000506 	br	10023ce8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
10023cd4:	e0bfff17 	ldw	r2,-4(fp)
10023cd8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
10023cdc:	e0bfff17 	ldw	r2,-4(fp)
10023ce0:	10800804 	addi	r2,r2,32
10023ce4:	e0bfff15 	stw	r2,-4(fp)
10023ce8:	e0bfff17 	ldw	r2,-4(fp)
10023cec:	10820030 	cmpltui	r2,r2,2048
10023cf0:	103ff81e 	bne	r2,zero,10023cd4 <__alt_data_end+0xf0023cd4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10023cf4:	e037883a 	mov	sp,fp
10023cf8:	df000017 	ldw	fp,0(sp)
10023cfc:	dec00104 	addi	sp,sp,4
10023d00:	f800283a 	ret

10023d04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10023d04:	defffe04 	addi	sp,sp,-8
10023d08:	dfc00115 	stw	ra,4(sp)
10023d0c:	df000015 	stw	fp,0(sp)
10023d10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10023d14:	008400b4 	movhi	r2,4098
10023d18:	109d1b04 	addi	r2,r2,29804
10023d1c:	10800017 	ldw	r2,0(r2)
10023d20:	10000526 	beq	r2,zero,10023d38 <alt_get_errno+0x34>
10023d24:	008400b4 	movhi	r2,4098
10023d28:	109d1b04 	addi	r2,r2,29804
10023d2c:	10800017 	ldw	r2,0(r2)
10023d30:	103ee83a 	callr	r2
10023d34:	00000206 	br	10023d40 <alt_get_errno+0x3c>
10023d38:	008400f4 	movhi	r2,4099
10023d3c:	10a48b04 	addi	r2,r2,-28116
}
10023d40:	e037883a 	mov	sp,fp
10023d44:	dfc00117 	ldw	ra,4(sp)
10023d48:	df000017 	ldw	fp,0(sp)
10023d4c:	dec00204 	addi	sp,sp,8
10023d50:	f800283a 	ret

10023d54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10023d54:	defffa04 	addi	sp,sp,-24
10023d58:	dfc00515 	stw	ra,20(sp)
10023d5c:	df000415 	stw	fp,16(sp)
10023d60:	df000404 	addi	fp,sp,16
10023d64:	e13ffe15 	stw	r4,-8(fp)
10023d68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10023d6c:	e0bffe17 	ldw	r2,-8(fp)
10023d70:	10000326 	beq	r2,zero,10023d80 <alt_dev_llist_insert+0x2c>
10023d74:	e0bffe17 	ldw	r2,-8(fp)
10023d78:	10800217 	ldw	r2,8(r2)
10023d7c:	1000061e 	bne	r2,zero,10023d98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10023d80:	0023d040 	call	10023d04 <alt_get_errno>
10023d84:	1007883a 	mov	r3,r2
10023d88:	00800584 	movi	r2,22
10023d8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10023d90:	00bffa84 	movi	r2,-22
10023d94:	00001306 	br	10023de4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10023d98:	e0bffe17 	ldw	r2,-8(fp)
10023d9c:	e0ffff17 	ldw	r3,-4(fp)
10023da0:	e0fffc15 	stw	r3,-16(fp)
10023da4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10023da8:	e0bffd17 	ldw	r2,-12(fp)
10023dac:	e0fffc17 	ldw	r3,-16(fp)
10023db0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10023db4:	e0bffc17 	ldw	r2,-16(fp)
10023db8:	10c00017 	ldw	r3,0(r2)
10023dbc:	e0bffd17 	ldw	r2,-12(fp)
10023dc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10023dc4:	e0bffc17 	ldw	r2,-16(fp)
10023dc8:	10800017 	ldw	r2,0(r2)
10023dcc:	e0fffd17 	ldw	r3,-12(fp)
10023dd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10023dd4:	e0bffc17 	ldw	r2,-16(fp)
10023dd8:	e0fffd17 	ldw	r3,-12(fp)
10023ddc:	10c00015 	stw	r3,0(r2)

  return 0;  
10023de0:	0005883a 	mov	r2,zero
}
10023de4:	e037883a 	mov	sp,fp
10023de8:	dfc00117 	ldw	ra,4(sp)
10023dec:	df000017 	ldw	fp,0(sp)
10023df0:	dec00204 	addi	sp,sp,8
10023df4:	f800283a 	ret

10023df8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10023df8:	defffd04 	addi	sp,sp,-12
10023dfc:	dfc00215 	stw	ra,8(sp)
10023e00:	df000115 	stw	fp,4(sp)
10023e04:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10023e08:	008400b4 	movhi	r2,4098
10023e0c:	1092bb04 	addi	r2,r2,19180
10023e10:	e0bfff15 	stw	r2,-4(fp)
10023e14:	00000606 	br	10023e30 <_do_ctors+0x38>
        (*ctor) (); 
10023e18:	e0bfff17 	ldw	r2,-4(fp)
10023e1c:	10800017 	ldw	r2,0(r2)
10023e20:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10023e24:	e0bfff17 	ldw	r2,-4(fp)
10023e28:	10bfff04 	addi	r2,r2,-4
10023e2c:	e0bfff15 	stw	r2,-4(fp)
10023e30:	e0ffff17 	ldw	r3,-4(fp)
10023e34:	008400b4 	movhi	r2,4098
10023e38:	1092bc04 	addi	r2,r2,19184
10023e3c:	18bff62e 	bgeu	r3,r2,10023e18 <__alt_data_end+0xf0023e18>
        (*ctor) (); 
}
10023e40:	e037883a 	mov	sp,fp
10023e44:	dfc00117 	ldw	ra,4(sp)
10023e48:	df000017 	ldw	fp,0(sp)
10023e4c:	dec00204 	addi	sp,sp,8
10023e50:	f800283a 	ret

10023e54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10023e54:	defffd04 	addi	sp,sp,-12
10023e58:	dfc00215 	stw	ra,8(sp)
10023e5c:	df000115 	stw	fp,4(sp)
10023e60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10023e64:	008400b4 	movhi	r2,4098
10023e68:	1092bb04 	addi	r2,r2,19180
10023e6c:	e0bfff15 	stw	r2,-4(fp)
10023e70:	00000606 	br	10023e8c <_do_dtors+0x38>
        (*dtor) (); 
10023e74:	e0bfff17 	ldw	r2,-4(fp)
10023e78:	10800017 	ldw	r2,0(r2)
10023e7c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10023e80:	e0bfff17 	ldw	r2,-4(fp)
10023e84:	10bfff04 	addi	r2,r2,-4
10023e88:	e0bfff15 	stw	r2,-4(fp)
10023e8c:	e0ffff17 	ldw	r3,-4(fp)
10023e90:	008400b4 	movhi	r2,4098
10023e94:	1092bc04 	addi	r2,r2,19184
10023e98:	18bff62e 	bgeu	r3,r2,10023e74 <__alt_data_end+0xf0023e74>
        (*dtor) (); 
}
10023e9c:	e037883a 	mov	sp,fp
10023ea0:	dfc00117 	ldw	ra,4(sp)
10023ea4:	df000017 	ldw	fp,0(sp)
10023ea8:	dec00204 	addi	sp,sp,8
10023eac:	f800283a 	ret

10023eb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10023eb0:	defffa04 	addi	sp,sp,-24
10023eb4:	dfc00515 	stw	ra,20(sp)
10023eb8:	df000415 	stw	fp,16(sp)
10023ebc:	df000404 	addi	fp,sp,16
10023ec0:	e13ffe15 	stw	r4,-8(fp)
10023ec4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10023ec8:	e0bfff17 	ldw	r2,-4(fp)
10023ecc:	10800017 	ldw	r2,0(r2)
10023ed0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10023ed4:	e13ffe17 	ldw	r4,-8(fp)
10023ed8:	000cc400 	call	1000cc40 <strlen>
10023edc:	10800044 	addi	r2,r2,1
10023ee0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10023ee4:	00000d06 	br	10023f1c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10023ee8:	e0bffc17 	ldw	r2,-16(fp)
10023eec:	10c00217 	ldw	r3,8(r2)
10023ef0:	e0bffd17 	ldw	r2,-12(fp)
10023ef4:	1809883a 	mov	r4,r3
10023ef8:	e17ffe17 	ldw	r5,-8(fp)
10023efc:	100d883a 	mov	r6,r2
10023f00:	000c7080 	call	1000c708 <memcmp>
10023f04:	1000021e 	bne	r2,zero,10023f10 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10023f08:	e0bffc17 	ldw	r2,-16(fp)
10023f0c:	00000706 	br	10023f2c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10023f10:	e0bffc17 	ldw	r2,-16(fp)
10023f14:	10800017 	ldw	r2,0(r2)
10023f18:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10023f1c:	e0fffc17 	ldw	r3,-16(fp)
10023f20:	e0bfff17 	ldw	r2,-4(fp)
10023f24:	18bff01e 	bne	r3,r2,10023ee8 <__alt_data_end+0xf0023ee8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10023f28:	0005883a 	mov	r2,zero
}
10023f2c:	e037883a 	mov	sp,fp
10023f30:	dfc00117 	ldw	ra,4(sp)
10023f34:	df000017 	ldw	fp,0(sp)
10023f38:	dec00204 	addi	sp,sp,8
10023f3c:	f800283a 	ret

10023f40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10023f40:	defffe04 	addi	sp,sp,-8
10023f44:	dfc00115 	stw	ra,4(sp)
10023f48:	df000015 	stw	fp,0(sp)
10023f4c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
10023f50:	0009883a 	mov	r4,zero
10023f54:	01440004 	movi	r5,4096
10023f58:	002473c0 	call	1002473c <alt_icache_flush>
#endif
}
10023f5c:	e037883a 	mov	sp,fp
10023f60:	dfc00117 	ldw	ra,4(sp)
10023f64:	df000017 	ldw	fp,0(sp)
10023f68:	dec00204 	addi	sp,sp,8
10023f6c:	f800283a 	ret

10023f70 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10023f70:	defffe04 	addi	sp,sp,-8
10023f74:	df000115 	stw	fp,4(sp)
10023f78:	df000104 	addi	fp,sp,4
10023f7c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10023f80:	e0bfff17 	ldw	r2,-4(fp)
10023f84:	10bffe84 	addi	r2,r2,-6
10023f88:	10c00428 	cmpgeui	r3,r2,16
10023f8c:	18001a1e 	bne	r3,zero,10023ff8 <alt_exception_cause_generated_bad_addr+0x88>
10023f90:	100690ba 	slli	r3,r2,2
10023f94:	008400b4 	movhi	r2,4098
10023f98:	108fea04 	addi	r2,r2,16296
10023f9c:	1885883a 	add	r2,r3,r2
10023fa0:	10800017 	ldw	r2,0(r2)
10023fa4:	1000683a 	jmp	r2
10023fa8:	10023fe8 	cmpgeui	zero,r2,2303
10023fac:	10023fe8 	cmpgeui	zero,r2,2303
10023fb0:	10023ff8 	rdprs	zero,r2,2303
10023fb4:	10023ff8 	rdprs	zero,r2,2303
10023fb8:	10023ff8 	rdprs	zero,r2,2303
10023fbc:	10023fe8 	cmpgeui	zero,r2,2303
10023fc0:	10023ff0 	cmpltui	zero,r2,2303
10023fc4:	10023ff8 	rdprs	zero,r2,2303
10023fc8:	10023fe8 	cmpgeui	zero,r2,2303
10023fcc:	10023fe8 	cmpgeui	zero,r2,2303
10023fd0:	10023ff8 	rdprs	zero,r2,2303
10023fd4:	10023fe8 	cmpgeui	zero,r2,2303
10023fd8:	10023ff0 	cmpltui	zero,r2,2303
10023fdc:	10023ff8 	rdprs	zero,r2,2303
10023fe0:	10023ff8 	rdprs	zero,r2,2303
10023fe4:	10023fe8 	cmpgeui	zero,r2,2303
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10023fe8:	00800044 	movi	r2,1
10023fec:	00000306 	br	10023ffc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10023ff0:	0005883a 	mov	r2,zero
10023ff4:	00000106 	br	10023ffc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10023ff8:	0005883a 	mov	r2,zero
  }
}
10023ffc:	e037883a 	mov	sp,fp
10024000:	df000017 	ldw	fp,0(sp)
10024004:	dec00104 	addi	sp,sp,4
10024008:	f800283a 	ret

1002400c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1002400c:	defff904 	addi	sp,sp,-28
10024010:	dfc00615 	stw	ra,24(sp)
10024014:	df000515 	stw	fp,20(sp)
10024018:	df000504 	addi	fp,sp,20
1002401c:	e13ffc15 	stw	r4,-16(fp)
10024020:	e17ffd15 	stw	r5,-12(fp)
10024024:	e1bffe15 	stw	r6,-8(fp)
10024028:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
1002402c:	e13ffd17 	ldw	r4,-12(fp)
10024030:	e17ffe17 	ldw	r5,-8(fp)
10024034:	e1bfff17 	ldw	r6,-4(fp)
10024038:	00242600 	call	10024260 <open>
1002403c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
10024040:	e0bffb17 	ldw	r2,-20(fp)
10024044:	10001c16 	blt	r2,zero,100240b8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
10024048:	008400b4 	movhi	r2,4098
1002404c:	10982204 	addi	r2,r2,24712
10024050:	e0fffb17 	ldw	r3,-20(fp)
10024054:	18c00324 	muli	r3,r3,12
10024058:	10c5883a 	add	r2,r2,r3
1002405c:	10c00017 	ldw	r3,0(r2)
10024060:	e0bffc17 	ldw	r2,-16(fp)
10024064:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10024068:	008400b4 	movhi	r2,4098
1002406c:	10982204 	addi	r2,r2,24712
10024070:	e0fffb17 	ldw	r3,-20(fp)
10024074:	18c00324 	muli	r3,r3,12
10024078:	10c5883a 	add	r2,r2,r3
1002407c:	10800104 	addi	r2,r2,4
10024080:	10c00017 	ldw	r3,0(r2)
10024084:	e0bffc17 	ldw	r2,-16(fp)
10024088:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
1002408c:	008400b4 	movhi	r2,4098
10024090:	10982204 	addi	r2,r2,24712
10024094:	e0fffb17 	ldw	r3,-20(fp)
10024098:	18c00324 	muli	r3,r3,12
1002409c:	10c5883a 	add	r2,r2,r3
100240a0:	10800204 	addi	r2,r2,8
100240a4:	10c00017 	ldw	r3,0(r2)
100240a8:	e0bffc17 	ldw	r2,-16(fp)
100240ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100240b0:	e13ffb17 	ldw	r4,-20(fp)
100240b4:	0021c2c0 	call	10021c2c <alt_release_fd>
  }
} 
100240b8:	e037883a 	mov	sp,fp
100240bc:	dfc00117 	ldw	ra,4(sp)
100240c0:	df000017 	ldw	fp,0(sp)
100240c4:	dec00204 	addi	sp,sp,8
100240c8:	f800283a 	ret

100240cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100240cc:	defffb04 	addi	sp,sp,-20
100240d0:	dfc00415 	stw	ra,16(sp)
100240d4:	df000315 	stw	fp,12(sp)
100240d8:	df000304 	addi	fp,sp,12
100240dc:	e13ffd15 	stw	r4,-12(fp)
100240e0:	e17ffe15 	stw	r5,-8(fp)
100240e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
100240e8:	010400b4 	movhi	r4,4098
100240ec:	21182504 	addi	r4,r4,24724
100240f0:	e17ffd17 	ldw	r5,-12(fp)
100240f4:	01800044 	movi	r6,1
100240f8:	01c07fc4 	movi	r7,511
100240fc:	002400c0 	call	1002400c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10024100:	010400b4 	movhi	r4,4098
10024104:	21182204 	addi	r4,r4,24712
10024108:	e17ffe17 	ldw	r5,-8(fp)
1002410c:	000d883a 	mov	r6,zero
10024110:	01c07fc4 	movi	r7,511
10024114:	002400c0 	call	1002400c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10024118:	010400b4 	movhi	r4,4098
1002411c:	21182804 	addi	r4,r4,24736
10024120:	e17fff17 	ldw	r5,-4(fp)
10024124:	01800044 	movi	r6,1
10024128:	01c07fc4 	movi	r7,511
1002412c:	002400c0 	call	1002400c <alt_open_fd>
}  
10024130:	e037883a 	mov	sp,fp
10024134:	dfc00117 	ldw	ra,4(sp)
10024138:	df000017 	ldw	fp,0(sp)
1002413c:	dec00204 	addi	sp,sp,8
10024140:	f800283a 	ret

10024144 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10024144:	defffe04 	addi	sp,sp,-8
10024148:	dfc00115 	stw	ra,4(sp)
1002414c:	df000015 	stw	fp,0(sp)
10024150:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10024154:	008400b4 	movhi	r2,4098
10024158:	109d1b04 	addi	r2,r2,29804
1002415c:	10800017 	ldw	r2,0(r2)
10024160:	10000526 	beq	r2,zero,10024178 <alt_get_errno+0x34>
10024164:	008400b4 	movhi	r2,4098
10024168:	109d1b04 	addi	r2,r2,29804
1002416c:	10800017 	ldw	r2,0(r2)
10024170:	103ee83a 	callr	r2
10024174:	00000206 	br	10024180 <alt_get_errno+0x3c>
10024178:	008400f4 	movhi	r2,4099
1002417c:	10a48b04 	addi	r2,r2,-28116
}
10024180:	e037883a 	mov	sp,fp
10024184:	dfc00117 	ldw	ra,4(sp)
10024188:	df000017 	ldw	fp,0(sp)
1002418c:	dec00204 	addi	sp,sp,8
10024190:	f800283a 	ret

10024194 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10024194:	defffd04 	addi	sp,sp,-12
10024198:	df000215 	stw	fp,8(sp)
1002419c:	df000204 	addi	fp,sp,8
100241a0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100241a4:	e0bfff17 	ldw	r2,-4(fp)
100241a8:	10800217 	ldw	r2,8(r2)
100241ac:	10d00034 	orhi	r3,r2,16384
100241b0:	e0bfff17 	ldw	r2,-4(fp)
100241b4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100241b8:	e03ffe15 	stw	zero,-8(fp)
100241bc:	00001d06 	br	10024234 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100241c0:	008400b4 	movhi	r2,4098
100241c4:	10982204 	addi	r2,r2,24712
100241c8:	e0fffe17 	ldw	r3,-8(fp)
100241cc:	18c00324 	muli	r3,r3,12
100241d0:	10c5883a 	add	r2,r2,r3
100241d4:	10c00017 	ldw	r3,0(r2)
100241d8:	e0bfff17 	ldw	r2,-4(fp)
100241dc:	10800017 	ldw	r2,0(r2)
100241e0:	1880111e 	bne	r3,r2,10024228 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
100241e4:	008400b4 	movhi	r2,4098
100241e8:	10982204 	addi	r2,r2,24712
100241ec:	e0fffe17 	ldw	r3,-8(fp)
100241f0:	18c00324 	muli	r3,r3,12
100241f4:	10c5883a 	add	r2,r2,r3
100241f8:	10800204 	addi	r2,r2,8
100241fc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10024200:	1000090e 	bge	r2,zero,10024228 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10024204:	e0bffe17 	ldw	r2,-8(fp)
10024208:	10c00324 	muli	r3,r2,12
1002420c:	008400b4 	movhi	r2,4098
10024210:	10982204 	addi	r2,r2,24712
10024214:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10024218:	e0bfff17 	ldw	r2,-4(fp)
1002421c:	18800226 	beq	r3,r2,10024228 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10024220:	00bffcc4 	movi	r2,-13
10024224:	00000a06 	br	10024250 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10024228:	e0bffe17 	ldw	r2,-8(fp)
1002422c:	10800044 	addi	r2,r2,1
10024230:	e0bffe15 	stw	r2,-8(fp)
10024234:	008400b4 	movhi	r2,4098
10024238:	109d1a04 	addi	r2,r2,29800
1002423c:	10800017 	ldw	r2,0(r2)
10024240:	1007883a 	mov	r3,r2
10024244:	e0bffe17 	ldw	r2,-8(fp)
10024248:	18bfdd2e 	bgeu	r3,r2,100241c0 <__alt_data_end+0xf00241c0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
1002424c:	0005883a 	mov	r2,zero
}
10024250:	e037883a 	mov	sp,fp
10024254:	df000017 	ldw	fp,0(sp)
10024258:	dec00104 	addi	sp,sp,4
1002425c:	f800283a 	ret

10024260 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10024260:	defff604 	addi	sp,sp,-40
10024264:	dfc00915 	stw	ra,36(sp)
10024268:	df000815 	stw	fp,32(sp)
1002426c:	df000804 	addi	fp,sp,32
10024270:	e13ffd15 	stw	r4,-12(fp)
10024274:	e17ffe15 	stw	r5,-8(fp)
10024278:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
1002427c:	00bfffc4 	movi	r2,-1
10024280:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10024284:	00bffb44 	movi	r2,-19
10024288:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
1002428c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10024290:	e13ffd17 	ldw	r4,-12(fp)
10024294:	014400b4 	movhi	r5,4098
10024298:	295d1804 	addi	r5,r5,29792
1002429c:	0023eb00 	call	10023eb0 <alt_find_dev>
100242a0:	e0bff815 	stw	r2,-32(fp)
100242a4:	e0bff817 	ldw	r2,-32(fp)
100242a8:	1000051e 	bne	r2,zero,100242c0 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100242ac:	e13ffd17 	ldw	r4,-12(fp)
100242b0:	00245740 	call	10024574 <alt_find_file>
100242b4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100242b8:	00800044 	movi	r2,1
100242bc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100242c0:	e0bff817 	ldw	r2,-32(fp)
100242c4:	10002926 	beq	r2,zero,1002436c <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
100242c8:	e13ff817 	ldw	r4,-32(fp)
100242cc:	00246880 	call	10024688 <alt_get_fd>
100242d0:	e0bff915 	stw	r2,-28(fp)
100242d4:	e0bff917 	ldw	r2,-28(fp)
100242d8:	1000030e 	bge	r2,zero,100242e8 <open+0x88>
    {
      status = index;
100242dc:	e0bff917 	ldw	r2,-28(fp)
100242e0:	e0bffa15 	stw	r2,-24(fp)
100242e4:	00002306 	br	10024374 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
100242e8:	e0bff917 	ldw	r2,-28(fp)
100242ec:	10c00324 	muli	r3,r2,12
100242f0:	008400b4 	movhi	r2,4098
100242f4:	10982204 	addi	r2,r2,24712
100242f8:	1885883a 	add	r2,r3,r2
100242fc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10024300:	e0fffe17 	ldw	r3,-8(fp)
10024304:	00900034 	movhi	r2,16384
10024308:	10bfffc4 	addi	r2,r2,-1
1002430c:	1886703a 	and	r3,r3,r2
10024310:	e0bffc17 	ldw	r2,-16(fp)
10024314:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10024318:	e0bffb17 	ldw	r2,-20(fp)
1002431c:	1000051e 	bne	r2,zero,10024334 <open+0xd4>
10024320:	e13ffc17 	ldw	r4,-16(fp)
10024324:	00241940 	call	10024194 <alt_file_locked>
10024328:	e0bffa15 	stw	r2,-24(fp)
1002432c:	e0bffa17 	ldw	r2,-24(fp)
10024330:	10001016 	blt	r2,zero,10024374 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10024334:	e0bff817 	ldw	r2,-32(fp)
10024338:	10800317 	ldw	r2,12(r2)
1002433c:	10000826 	beq	r2,zero,10024360 <open+0x100>
10024340:	e0bff817 	ldw	r2,-32(fp)
10024344:	10800317 	ldw	r2,12(r2)
10024348:	e13ffc17 	ldw	r4,-16(fp)
1002434c:	e17ffd17 	ldw	r5,-12(fp)
10024350:	e1bffe17 	ldw	r6,-8(fp)
10024354:	e1ffff17 	ldw	r7,-4(fp)
10024358:	103ee83a 	callr	r2
1002435c:	00000106 	br	10024364 <open+0x104>
10024360:	0005883a 	mov	r2,zero
10024364:	e0bffa15 	stw	r2,-24(fp)
10024368:	00000206 	br	10024374 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
1002436c:	00bffb44 	movi	r2,-19
10024370:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10024374:	e0bffa17 	ldw	r2,-24(fp)
10024378:	1000090e 	bge	r2,zero,100243a0 <open+0x140>
  {
    alt_release_fd (index);  
1002437c:	e13ff917 	ldw	r4,-28(fp)
10024380:	0021c2c0 	call	10021c2c <alt_release_fd>
    ALT_ERRNO = -status;
10024384:	00241440 	call	10024144 <alt_get_errno>
10024388:	1007883a 	mov	r3,r2
1002438c:	e0bffa17 	ldw	r2,-24(fp)
10024390:	0085c83a 	sub	r2,zero,r2
10024394:	18800015 	stw	r2,0(r3)
    return -1;
10024398:	00bfffc4 	movi	r2,-1
1002439c:	00000106 	br	100243a4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
100243a0:	e0bff917 	ldw	r2,-28(fp)
}
100243a4:	e037883a 	mov	sp,fp
100243a8:	dfc00117 	ldw	ra,4(sp)
100243ac:	df000017 	ldw	fp,0(sp)
100243b0:	dec00204 	addi	sp,sp,8
100243b4:	f800283a 	ret

100243b8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
100243b8:	defffa04 	addi	sp,sp,-24
100243bc:	df000515 	stw	fp,20(sp)
100243c0:	df000504 	addi	fp,sp,20
100243c4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100243c8:	0005303a 	rdctl	r2,status
100243cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100243d0:	e0fffc17 	ldw	r3,-16(fp)
100243d4:	00bfff84 	movi	r2,-2
100243d8:	1884703a 	and	r2,r3,r2
100243dc:	1001703a 	wrctl	status,r2
  
  return context;
100243e0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100243e4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100243e8:	e0bfff17 	ldw	r2,-4(fp)
100243ec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100243f0:	e0bffd17 	ldw	r2,-12(fp)
100243f4:	10800017 	ldw	r2,0(r2)
100243f8:	e0fffd17 	ldw	r3,-12(fp)
100243fc:	18c00117 	ldw	r3,4(r3)
10024400:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10024404:	e0bffd17 	ldw	r2,-12(fp)
10024408:	10800117 	ldw	r2,4(r2)
1002440c:	e0fffd17 	ldw	r3,-12(fp)
10024410:	18c00017 	ldw	r3,0(r3)
10024414:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10024418:	e0bffd17 	ldw	r2,-12(fp)
1002441c:	e0fffd17 	ldw	r3,-12(fp)
10024420:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10024424:	e0bffd17 	ldw	r2,-12(fp)
10024428:	e0fffd17 	ldw	r3,-12(fp)
1002442c:	10c00015 	stw	r3,0(r2)
10024430:	e0bffb17 	ldw	r2,-20(fp)
10024434:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10024438:	e0bffe17 	ldw	r2,-8(fp)
1002443c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10024440:	e037883a 	mov	sp,fp
10024444:	df000017 	ldw	fp,0(sp)
10024448:	dec00104 	addi	sp,sp,4
1002444c:	f800283a 	ret

10024450 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10024450:	defffb04 	addi	sp,sp,-20
10024454:	dfc00415 	stw	ra,16(sp)
10024458:	df000315 	stw	fp,12(sp)
1002445c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10024460:	d0a04617 	ldw	r2,-32488(gp)
10024464:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10024468:	d0a7b817 	ldw	r2,-24864(gp)
1002446c:	10800044 	addi	r2,r2,1
10024470:	d0a7b815 	stw	r2,-24864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10024474:	00002e06 	br	10024530 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10024478:	e0bffd17 	ldw	r2,-12(fp)
1002447c:	10800017 	ldw	r2,0(r2)
10024480:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10024484:	e0bffd17 	ldw	r2,-12(fp)
10024488:	10800403 	ldbu	r2,16(r2)
1002448c:	10803fcc 	andi	r2,r2,255
10024490:	10000426 	beq	r2,zero,100244a4 <alt_tick+0x54>
10024494:	d0a7b817 	ldw	r2,-24864(gp)
10024498:	1000021e 	bne	r2,zero,100244a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
1002449c:	e0bffd17 	ldw	r2,-12(fp)
100244a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100244a4:	e0bffd17 	ldw	r2,-12(fp)
100244a8:	10800217 	ldw	r2,8(r2)
100244ac:	d0e7b817 	ldw	r3,-24864(gp)
100244b0:	18801d36 	bltu	r3,r2,10024528 <alt_tick+0xd8>
100244b4:	e0bffd17 	ldw	r2,-12(fp)
100244b8:	10800403 	ldbu	r2,16(r2)
100244bc:	10803fcc 	andi	r2,r2,255
100244c0:	1000191e 	bne	r2,zero,10024528 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
100244c4:	e0bffd17 	ldw	r2,-12(fp)
100244c8:	10800317 	ldw	r2,12(r2)
100244cc:	e0fffd17 	ldw	r3,-12(fp)
100244d0:	18c00517 	ldw	r3,20(r3)
100244d4:	1809883a 	mov	r4,r3
100244d8:	103ee83a 	callr	r2
100244dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100244e0:	e0bfff17 	ldw	r2,-4(fp)
100244e4:	1000031e 	bne	r2,zero,100244f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100244e8:	e13ffd17 	ldw	r4,-12(fp)
100244ec:	00243b80 	call	100243b8 <alt_alarm_stop>
100244f0:	00000d06 	br	10024528 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100244f4:	e0bffd17 	ldw	r2,-12(fp)
100244f8:	10c00217 	ldw	r3,8(r2)
100244fc:	e0bfff17 	ldw	r2,-4(fp)
10024500:	1887883a 	add	r3,r3,r2
10024504:	e0bffd17 	ldw	r2,-12(fp)
10024508:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
1002450c:	e0bffd17 	ldw	r2,-12(fp)
10024510:	10c00217 	ldw	r3,8(r2)
10024514:	d0a7b817 	ldw	r2,-24864(gp)
10024518:	1880032e 	bgeu	r3,r2,10024528 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
1002451c:	e0bffd17 	ldw	r2,-12(fp)
10024520:	00c00044 	movi	r3,1
10024524:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10024528:	e0bffe17 	ldw	r2,-8(fp)
1002452c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10024530:	e0fffd17 	ldw	r3,-12(fp)
10024534:	d0a04604 	addi	r2,gp,-32488
10024538:	18bfcf1e 	bne	r3,r2,10024478 <__alt_data_end+0xf0024478>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
1002453c:	0001883a 	nop
}
10024540:	e037883a 	mov	sp,fp
10024544:	dfc00117 	ldw	ra,4(sp)
10024548:	df000017 	ldw	fp,0(sp)
1002454c:	dec00204 	addi	sp,sp,8
10024550:	f800283a 	ret

10024554 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10024554:	deffff04 	addi	sp,sp,-4
10024558:	df000015 	stw	fp,0(sp)
1002455c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10024560:	000170fa 	wrctl	ienable,zero
}
10024564:	e037883a 	mov	sp,fp
10024568:	df000017 	ldw	fp,0(sp)
1002456c:	dec00104 	addi	sp,sp,4
10024570:	f800283a 	ret

10024574 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10024574:	defffb04 	addi	sp,sp,-20
10024578:	dfc00415 	stw	ra,16(sp)
1002457c:	df000315 	stw	fp,12(sp)
10024580:	df000304 	addi	fp,sp,12
10024584:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10024588:	008400b4 	movhi	r2,4098
1002458c:	109d1604 	addi	r2,r2,29784
10024590:	10800017 	ldw	r2,0(r2)
10024594:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10024598:	00003106 	br	10024660 <alt_find_file+0xec>
  {
    len = strlen(next->name);
1002459c:	e0bffd17 	ldw	r2,-12(fp)
100245a0:	10800217 	ldw	r2,8(r2)
100245a4:	1009883a 	mov	r4,r2
100245a8:	000cc400 	call	1000cc40 <strlen>
100245ac:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
100245b0:	e0bffd17 	ldw	r2,-12(fp)
100245b4:	10c00217 	ldw	r3,8(r2)
100245b8:	e0bffe17 	ldw	r2,-8(fp)
100245bc:	10bfffc4 	addi	r2,r2,-1
100245c0:	1885883a 	add	r2,r3,r2
100245c4:	10800003 	ldbu	r2,0(r2)
100245c8:	10803fcc 	andi	r2,r2,255
100245cc:	1080201c 	xori	r2,r2,128
100245d0:	10bfe004 	addi	r2,r2,-128
100245d4:	10800bd8 	cmpnei	r2,r2,47
100245d8:	1000031e 	bne	r2,zero,100245e8 <alt_find_file+0x74>
    {
      len -= 1;
100245dc:	e0bffe17 	ldw	r2,-8(fp)
100245e0:	10bfffc4 	addi	r2,r2,-1
100245e4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100245e8:	e0bffe17 	ldw	r2,-8(fp)
100245ec:	e0ffff17 	ldw	r3,-4(fp)
100245f0:	1885883a 	add	r2,r3,r2
100245f4:	10800003 	ldbu	r2,0(r2)
100245f8:	10803fcc 	andi	r2,r2,255
100245fc:	1080201c 	xori	r2,r2,128
10024600:	10bfe004 	addi	r2,r2,-128
10024604:	10800be0 	cmpeqi	r2,r2,47
10024608:	1000081e 	bne	r2,zero,1002462c <alt_find_file+0xb8>
1002460c:	e0bffe17 	ldw	r2,-8(fp)
10024610:	e0ffff17 	ldw	r3,-4(fp)
10024614:	1885883a 	add	r2,r3,r2
10024618:	10800003 	ldbu	r2,0(r2)
1002461c:	10803fcc 	andi	r2,r2,255
10024620:	1080201c 	xori	r2,r2,128
10024624:	10bfe004 	addi	r2,r2,-128
10024628:	10000a1e 	bne	r2,zero,10024654 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
1002462c:	e0bffd17 	ldw	r2,-12(fp)
10024630:	10c00217 	ldw	r3,8(r2)
10024634:	e0bffe17 	ldw	r2,-8(fp)
10024638:	1809883a 	mov	r4,r3
1002463c:	e17fff17 	ldw	r5,-4(fp)
10024640:	100d883a 	mov	r6,r2
10024644:	000c7080 	call	1000c708 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10024648:	1000021e 	bne	r2,zero,10024654 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
1002464c:	e0bffd17 	ldw	r2,-12(fp)
10024650:	00000806 	br	10024674 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10024654:	e0bffd17 	ldw	r2,-12(fp)
10024658:	10800017 	ldw	r2,0(r2)
1002465c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10024660:	e0fffd17 	ldw	r3,-12(fp)
10024664:	008400b4 	movhi	r2,4098
10024668:	109d1604 	addi	r2,r2,29784
1002466c:	18bfcb1e 	bne	r3,r2,1002459c <__alt_data_end+0xf002459c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10024670:	0005883a 	mov	r2,zero
}
10024674:	e037883a 	mov	sp,fp
10024678:	dfc00117 	ldw	ra,4(sp)
1002467c:	df000017 	ldw	fp,0(sp)
10024680:	dec00204 	addi	sp,sp,8
10024684:	f800283a 	ret

10024688 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10024688:	defffc04 	addi	sp,sp,-16
1002468c:	df000315 	stw	fp,12(sp)
10024690:	df000304 	addi	fp,sp,12
10024694:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
10024698:	00bffa04 	movi	r2,-24
1002469c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100246a0:	e03ffd15 	stw	zero,-12(fp)
100246a4:	00001d06 	br	1002471c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
100246a8:	008400b4 	movhi	r2,4098
100246ac:	10982204 	addi	r2,r2,24712
100246b0:	e0fffd17 	ldw	r3,-12(fp)
100246b4:	18c00324 	muli	r3,r3,12
100246b8:	10c5883a 	add	r2,r2,r3
100246bc:	10800017 	ldw	r2,0(r2)
100246c0:	1000131e 	bne	r2,zero,10024710 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
100246c4:	008400b4 	movhi	r2,4098
100246c8:	10982204 	addi	r2,r2,24712
100246cc:	e0fffd17 	ldw	r3,-12(fp)
100246d0:	18c00324 	muli	r3,r3,12
100246d4:	10c5883a 	add	r2,r2,r3
100246d8:	e0ffff17 	ldw	r3,-4(fp)
100246dc:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100246e0:	008400b4 	movhi	r2,4098
100246e4:	109d1a04 	addi	r2,r2,29800
100246e8:	10c00017 	ldw	r3,0(r2)
100246ec:	e0bffd17 	ldw	r2,-12(fp)
100246f0:	1880040e 	bge	r3,r2,10024704 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
100246f4:	008400b4 	movhi	r2,4098
100246f8:	109d1a04 	addi	r2,r2,29800
100246fc:	e0fffd17 	ldw	r3,-12(fp)
10024700:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10024704:	e0bffd17 	ldw	r2,-12(fp)
10024708:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
1002470c:	00000606 	br	10024728 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10024710:	e0bffd17 	ldw	r2,-12(fp)
10024714:	10800044 	addi	r2,r2,1
10024718:	e0bffd15 	stw	r2,-12(fp)
1002471c:	e0bffd17 	ldw	r2,-12(fp)
10024720:	10800810 	cmplti	r2,r2,32
10024724:	103fe01e 	bne	r2,zero,100246a8 <__alt_data_end+0xf00246a8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10024728:	e0bffe17 	ldw	r2,-8(fp)
}
1002472c:	e037883a 	mov	sp,fp
10024730:	df000017 	ldw	fp,0(sp)
10024734:	dec00104 	addi	sp,sp,4
10024738:	f800283a 	ret

1002473c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
1002473c:	defffb04 	addi	sp,sp,-20
10024740:	df000415 	stw	fp,16(sp)
10024744:	df000404 	addi	fp,sp,16
10024748:	e13ffe15 	stw	r4,-8(fp)
1002474c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
10024750:	e0bfff17 	ldw	r2,-4(fp)
10024754:	10840070 	cmpltui	r2,r2,4097
10024758:	1000021e 	bne	r2,zero,10024764 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
1002475c:	00840004 	movi	r2,4096
10024760:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
10024764:	e0fffe17 	ldw	r3,-8(fp)
10024768:	e0bfff17 	ldw	r2,-4(fp)
1002476c:	1885883a 	add	r2,r3,r2
10024770:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10024774:	e0bffe17 	ldw	r2,-8(fp)
10024778:	e0bffc15 	stw	r2,-16(fp)
1002477c:	00000506 	br	10024794 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
10024780:	e0bffc17 	ldw	r2,-16(fp)
10024784:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
10024788:	e0bffc17 	ldw	r2,-16(fp)
1002478c:	10800804 	addi	r2,r2,32
10024790:	e0bffc15 	stw	r2,-16(fp)
10024794:	e0fffc17 	ldw	r3,-16(fp)
10024798:	e0bffd17 	ldw	r2,-12(fp)
1002479c:	18bff836 	bltu	r3,r2,10024780 <__alt_data_end+0xf0024780>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
100247a0:	e0bffe17 	ldw	r2,-8(fp)
100247a4:	108007cc 	andi	r2,r2,31
100247a8:	10000226 	beq	r2,zero,100247b4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
100247ac:	e0bffc17 	ldw	r2,-16(fp)
100247b0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
100247b4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
100247b8:	e037883a 	mov	sp,fp
100247bc:	df000017 	ldw	fp,0(sp)
100247c0:	dec00104 	addi	sp,sp,4
100247c4:	f800283a 	ret

100247c8 <atexit>:
100247c8:	200b883a 	mov	r5,r4
100247cc:	000d883a 	mov	r6,zero
100247d0:	0009883a 	mov	r4,zero
100247d4:	000f883a 	mov	r7,zero
100247d8:	00248141 	jmpi	10024814 <__register_exitproc>

100247dc <exit>:
100247dc:	defffe04 	addi	sp,sp,-8
100247e0:	000b883a 	mov	r5,zero
100247e4:	dc000015 	stw	r16,0(sp)
100247e8:	dfc00115 	stw	ra,4(sp)
100247ec:	2021883a 	mov	r16,r4
100247f0:	00249280 	call	10024928 <__call_exitprocs>
100247f4:	008400b4 	movhi	r2,4098
100247f8:	109d0f04 	addi	r2,r2,29756
100247fc:	11000017 	ldw	r4,0(r2)
10024800:	20800f17 	ldw	r2,60(r4)
10024804:	10000126 	beq	r2,zero,1002480c <exit+0x30>
10024808:	103ee83a 	callr	r2
1002480c:	8009883a 	mov	r4,r16
10024810:	0024abc0 	call	10024abc <_exit>

10024814 <__register_exitproc>:
10024814:	008400b4 	movhi	r2,4098
10024818:	defffa04 	addi	sp,sp,-24
1002481c:	109d0f04 	addi	r2,r2,29756
10024820:	dc000315 	stw	r16,12(sp)
10024824:	14000017 	ldw	r16,0(r2)
10024828:	dc400415 	stw	r17,16(sp)
1002482c:	dfc00515 	stw	ra,20(sp)
10024830:	80805217 	ldw	r2,328(r16)
10024834:	2023883a 	mov	r17,r4
10024838:	10003626 	beq	r2,zero,10024914 <__register_exitproc+0x100>
1002483c:	10c00117 	ldw	r3,4(r2)
10024840:	010007c4 	movi	r4,31
10024844:	20c00e16 	blt	r4,r3,10024880 <__register_exitproc+0x6c>
10024848:	1a400044 	addi	r9,r3,1
1002484c:	8800211e 	bne	r17,zero,100248d4 <__register_exitproc+0xc0>
10024850:	18c00084 	addi	r3,r3,2
10024854:	18c7883a 	add	r3,r3,r3
10024858:	18c7883a 	add	r3,r3,r3
1002485c:	12400115 	stw	r9,4(r2)
10024860:	10c7883a 	add	r3,r2,r3
10024864:	19400015 	stw	r5,0(r3)
10024868:	0005883a 	mov	r2,zero
1002486c:	dfc00517 	ldw	ra,20(sp)
10024870:	dc400417 	ldw	r17,16(sp)
10024874:	dc000317 	ldw	r16,12(sp)
10024878:	dec00604 	addi	sp,sp,24
1002487c:	f800283a 	ret
10024880:	00800034 	movhi	r2,0
10024884:	10800004 	addi	r2,r2,0
10024888:	10002526 	beq	r2,zero,10024920 <__register_exitproc+0x10c>
1002488c:	01006404 	movi	r4,400
10024890:	d9400015 	stw	r5,0(sp)
10024894:	d9800115 	stw	r6,4(sp)
10024898:	d9c00215 	stw	r7,8(sp)
1002489c:	00000000 	call	10000000 <__reset>
100248a0:	d9400017 	ldw	r5,0(sp)
100248a4:	d9800117 	ldw	r6,4(sp)
100248a8:	d9c00217 	ldw	r7,8(sp)
100248ac:	10001c26 	beq	r2,zero,10024920 <__register_exitproc+0x10c>
100248b0:	80c05217 	ldw	r3,328(r16)
100248b4:	10000115 	stw	zero,4(r2)
100248b8:	02400044 	movi	r9,1
100248bc:	10c00015 	stw	r3,0(r2)
100248c0:	80805215 	stw	r2,328(r16)
100248c4:	10006215 	stw	zero,392(r2)
100248c8:	10006315 	stw	zero,396(r2)
100248cc:	0007883a 	mov	r3,zero
100248d0:	883fdf26 	beq	r17,zero,10024850 <__alt_data_end+0xf0024850>
100248d4:	18d1883a 	add	r8,r3,r3
100248d8:	4211883a 	add	r8,r8,r8
100248dc:	1211883a 	add	r8,r2,r8
100248e0:	41802215 	stw	r6,136(r8)
100248e4:	01000044 	movi	r4,1
100248e8:	11806217 	ldw	r6,392(r2)
100248ec:	20c8983a 	sll	r4,r4,r3
100248f0:	310cb03a 	or	r6,r6,r4
100248f4:	11806215 	stw	r6,392(r2)
100248f8:	41c04215 	stw	r7,264(r8)
100248fc:	01800084 	movi	r6,2
10024900:	89bfd31e 	bne	r17,r6,10024850 <__alt_data_end+0xf0024850>
10024904:	11806317 	ldw	r6,396(r2)
10024908:	3108b03a 	or	r4,r6,r4
1002490c:	11006315 	stw	r4,396(r2)
10024910:	003fcf06 	br	10024850 <__alt_data_end+0xf0024850>
10024914:	80805304 	addi	r2,r16,332
10024918:	80805215 	stw	r2,328(r16)
1002491c:	003fc706 	br	1002483c <__alt_data_end+0xf002483c>
10024920:	00bfffc4 	movi	r2,-1
10024924:	003fd106 	br	1002486c <__alt_data_end+0xf002486c>

10024928 <__call_exitprocs>:
10024928:	008400b4 	movhi	r2,4098
1002492c:	109d0f04 	addi	r2,r2,29756
10024930:	10800017 	ldw	r2,0(r2)
10024934:	defff404 	addi	sp,sp,-48
10024938:	dd800815 	stw	r22,32(sp)
1002493c:	d8800015 	stw	r2,0(sp)
10024940:	10805204 	addi	r2,r2,328
10024944:	dd000615 	stw	r20,24(sp)
10024948:	dc800415 	stw	r18,16(sp)
1002494c:	dfc00b15 	stw	ra,44(sp)
10024950:	df000a15 	stw	fp,40(sp)
10024954:	ddc00915 	stw	r23,36(sp)
10024958:	dd400715 	stw	r21,28(sp)
1002495c:	dcc00515 	stw	r19,20(sp)
10024960:	dc400315 	stw	r17,12(sp)
10024964:	dc000215 	stw	r16,8(sp)
10024968:	2025883a 	mov	r18,r4
1002496c:	2829883a 	mov	r20,r5
10024970:	d8800115 	stw	r2,4(sp)
10024974:	05bfffc4 	movi	r22,-1
10024978:	d8800017 	ldw	r2,0(sp)
1002497c:	14c05217 	ldw	r19,328(r2)
10024980:	98001d26 	beq	r19,zero,100249f8 <__call_exitprocs+0xd0>
10024984:	dd400117 	ldw	r21,4(sp)
10024988:	98800117 	ldw	r2,4(r19)
1002498c:	173fffc4 	addi	fp,r2,-1
10024990:	e0000d16 	blt	fp,zero,100249c8 <__call_exitprocs+0xa0>
10024994:	14000044 	addi	r16,r2,1
10024998:	8421883a 	add	r16,r16,r16
1002499c:	8421883a 	add	r16,r16,r16
100249a0:	84402004 	addi	r17,r16,128
100249a4:	9c63883a 	add	r17,r19,r17
100249a8:	9c21883a 	add	r16,r19,r16
100249ac:	a0001e26 	beq	r20,zero,10024a28 <__call_exitprocs+0x100>
100249b0:	80804017 	ldw	r2,256(r16)
100249b4:	15001c26 	beq	r2,r20,10024a28 <__call_exitprocs+0x100>
100249b8:	e73fffc4 	addi	fp,fp,-1
100249bc:	843fff04 	addi	r16,r16,-4
100249c0:	8c7fff04 	addi	r17,r17,-4
100249c4:	e5bff91e 	bne	fp,r22,100249ac <__alt_data_end+0xf00249ac>
100249c8:	00800034 	movhi	r2,0
100249cc:	10800004 	addi	r2,r2,0
100249d0:	10000926 	beq	r2,zero,100249f8 <__call_exitprocs+0xd0>
100249d4:	98800117 	ldw	r2,4(r19)
100249d8:	1000311e 	bne	r2,zero,10024aa0 <__call_exitprocs+0x178>
100249dc:	98800017 	ldw	r2,0(r19)
100249e0:	10003426 	beq	r2,zero,10024ab4 <__call_exitprocs+0x18c>
100249e4:	9809883a 	mov	r4,r19
100249e8:	a8800015 	stw	r2,0(r21)
100249ec:	00000000 	call	10000000 <__reset>
100249f0:	acc00017 	ldw	r19,0(r21)
100249f4:	983fe41e 	bne	r19,zero,10024988 <__alt_data_end+0xf0024988>
100249f8:	dfc00b17 	ldw	ra,44(sp)
100249fc:	df000a17 	ldw	fp,40(sp)
10024a00:	ddc00917 	ldw	r23,36(sp)
10024a04:	dd800817 	ldw	r22,32(sp)
10024a08:	dd400717 	ldw	r21,28(sp)
10024a0c:	dd000617 	ldw	r20,24(sp)
10024a10:	dcc00517 	ldw	r19,20(sp)
10024a14:	dc800417 	ldw	r18,16(sp)
10024a18:	dc400317 	ldw	r17,12(sp)
10024a1c:	dc000217 	ldw	r16,8(sp)
10024a20:	dec00c04 	addi	sp,sp,48
10024a24:	f800283a 	ret
10024a28:	98800117 	ldw	r2,4(r19)
10024a2c:	80c00017 	ldw	r3,0(r16)
10024a30:	10bfffc4 	addi	r2,r2,-1
10024a34:	17001526 	beq	r2,fp,10024a8c <__call_exitprocs+0x164>
10024a38:	80000015 	stw	zero,0(r16)
10024a3c:	183fde26 	beq	r3,zero,100249b8 <__alt_data_end+0xf00249b8>
10024a40:	00800044 	movi	r2,1
10024a44:	1708983a 	sll	r4,r2,fp
10024a48:	98806217 	ldw	r2,392(r19)
10024a4c:	9dc00117 	ldw	r23,4(r19)
10024a50:	2084703a 	and	r2,r4,r2
10024a54:	1000061e 	bne	r2,zero,10024a70 <__call_exitprocs+0x148>
10024a58:	183ee83a 	callr	r3
10024a5c:	98800117 	ldw	r2,4(r19)
10024a60:	15ffc51e 	bne	r2,r23,10024978 <__alt_data_end+0xf0024978>
10024a64:	a8800017 	ldw	r2,0(r21)
10024a68:	14ffd326 	beq	r2,r19,100249b8 <__alt_data_end+0xf00249b8>
10024a6c:	003fc206 	br	10024978 <__alt_data_end+0xf0024978>
10024a70:	98806317 	ldw	r2,396(r19)
10024a74:	2084703a 	and	r2,r4,r2
10024a78:	1000061e 	bne	r2,zero,10024a94 <__call_exitprocs+0x16c>
10024a7c:	89400017 	ldw	r5,0(r17)
10024a80:	9009883a 	mov	r4,r18
10024a84:	183ee83a 	callr	r3
10024a88:	003ff406 	br	10024a5c <__alt_data_end+0xf0024a5c>
10024a8c:	9f000115 	stw	fp,4(r19)
10024a90:	003fea06 	br	10024a3c <__alt_data_end+0xf0024a3c>
10024a94:	89000017 	ldw	r4,0(r17)
10024a98:	183ee83a 	callr	r3
10024a9c:	003fef06 	br	10024a5c <__alt_data_end+0xf0024a5c>
10024aa0:	98800017 	ldw	r2,0(r19)
10024aa4:	982b883a 	mov	r21,r19
10024aa8:	1027883a 	mov	r19,r2
10024aac:	983fb61e 	bne	r19,zero,10024988 <__alt_data_end+0xf0024988>
10024ab0:	003fd106 	br	100249f8 <__alt_data_end+0xf00249f8>
10024ab4:	0005883a 	mov	r2,zero
10024ab8:	003ffa06 	br	10024aa4 <__alt_data_end+0xf0024aa4>

10024abc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10024abc:	defffd04 	addi	sp,sp,-12
10024ac0:	df000215 	stw	fp,8(sp)
10024ac4:	df000204 	addi	fp,sp,8
10024ac8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10024acc:	0001883a 	nop
10024ad0:	e0bfff17 	ldw	r2,-4(fp)
10024ad4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10024ad8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10024adc:	10000226 	beq	r2,zero,10024ae8 <_exit+0x2c>
    ALT_SIM_FAIL();
10024ae0:	002af070 	cmpltui	zero,zero,43969
10024ae4:	00000106 	br	10024aec <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10024ae8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10024aec:	003fff06 	br	10024aec <__alt_data_end+0xf0024aec>
