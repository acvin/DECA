
camera_config.elf:     file format elf32-littlenios2
camera_config.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020240

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000054e0 memsz 0x000054e0 flags r-x
    LOAD off    0x00006500 vaddr 0x00025500 paddr 0x000257e0 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00006ac0 vaddr 0x00025ac0 paddr 0x00025ac0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004dcc  00020240  00020240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004f4  0002500c  0002500c  0000600c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00025500  000257e0  00006500  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00025ac0  00025ac0  00006ac0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00025be0  00025be0  000067e0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000067e0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005f8  00000000  00000000  00006808  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007b68  00000000  00000000  00006e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002be3  00000000  00000000  0000e968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003c7f  00000000  00000000  0001154b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000dc8  00000000  00000000  000151cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001e91  00000000  00000000  00015f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001143  00000000  00000000  00017e25  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00018f68  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000170  00000000  00000000  00018fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0001ae89  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000a  00000000  00000000  0001ae8c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0001ae96  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0001ae97  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0001ae98  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0001ae9c  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0001aea0  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000004  00000000  00000000  0001aea4  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000004  00000000  00000000  0001aea8  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000004  00000000  00000000  0001aeac  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000008  00000000  00000000  0001aeb0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 0000002c  00000000  00000000  0001aeb8  2**0
                  CONTENTS, READONLY
 29 .jdi          00003e33  00000000  00000000  0001aee4  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000fa195  00000000  00000000  0001ed17  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020240 l    d  .text	00000000 .text
0002500c l    d  .rodata	00000000 .rodata
00025500 l    d  .rwdata	00000000 .rwdata
00025ac0 l    d  .bss	00000000 .bss
00025be0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../camera_config_bsp//obj/HAL/src/crt0.o
00020288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 camera_config.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0002320c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00023470 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00025500 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00023b48 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00023cb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023e00 l     F .text	00000038 alt_dev_reg
000255e0 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000240f0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00024344 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000244a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000244d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00025adc g     O .bss	00000004 alt_instruction_exception_handler
00023c2c g     F .text	0000005c alt_main
000233c0 g     F .text	00000080 _puts_r
00025ae0 g     O .bss	00000100 alt_irq
00020600 g     F .text	00000060 ACK_check
000257e0 g       *ABS*	00000000 __flash_rwdata_start
00020574 g     F .text	0000008c ACK_single_check
00023374 g     F .text	0000004c printf
00020660 g     F .text	00000200 OC_I2C_Write
000210a4 g     F .text	00000060 AR0833_write_cmos_sensor_8
00024b7c g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00025ac0 g     O .bss	00000004 errno
00025ac8 g     O .bss	00000004 alt_argv
0002d7b4 g       *ABS*	00000000 _gp
00023c88 g     F .text	00000030 usleep
00025634 g     O .rwdata	00000180 alt_fd_list
00022d18 g     F .text	00000060 DDR3_Check
00020394 g     F .text	0000014c oc_i2c_init_ex
0002500c g       *ABS*	00000000 __DTOR_END__
00023440 g     F .text	00000014 puts
00024c28 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00023f78 g     F .text	000000e4 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00023338 g     F .text	0000003c _printf_r
00023328 g     F .text	00000008 .hidden __udivsi3
00024b9c g     F .text	0000008c alt_icache_flush
000257cc g     O .rwdata	00000004 alt_max_fd
00020ff8 g     F .text	0000004c SWAP16
000257b4 g     O .rwdata	00000004 _global_impure_ptr
00025be0 g       *ABS*	00000000 __bss_end
00024890 g     F .text	000000f0 alt_iic_isr_register
00024a78 g     F .text	00000104 alt_tick
00024844 g     F .text	0000004c alt_ic_irq_enabled
00020bc8 g     F .text	000001e0 OC_I2CL_Write
000249e0 g     F .text	00000098 alt_alarm_stop
00025ad0 g     O .bss	00000004 alt_irq_active
00020860 g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000d0 alt_irq_handler
0002560c g     O .rwdata	00000028 alt_dev_null
0002028c g     F .text	00000058 Write32_Data
00024464 g     F .text	00000044 alt_dcache_flush_all
000257e0 g       *ABS*	00000000 __ram_rwdata_end
000257c4 g     O .rwdata	00000008 alt_dev_list
00023d08 g     F .text	000000f8 write
00025500 g       *ABS*	00000000 __ram_rodata_end
00023330 g     F .text	00000008 .hidden __umodsi3
00025be0 g       *ABS*	00000000 end
000201cc g     F .exceptions	00000074 alt_instruction_exception_entry
0002500c g       *ABS*	00000000 __CTOR_LIST__
00031170 g       *ABS*	00000000 __alt_stack_pointer
00024164 g     F .text	00000088 alt_avalon_timer_sc_init
0002405c g     F .text	00000094 altera_avalon_jtag_uart_write
000234dc g     F .text	00000544 ___vfprintf_internal_r
00024e3c g     F .text	0000019c __call_exitprocs
00020240 g     F .text	0000004c _start
00025ad4 g     O .bss	00000004 _alt_tick_rate
00025ad8 g     O .bss	00000004 _alt_nticks
00023e6c g     F .text	0000004c alt_sys_init
00024cf8 g     F .text	00000144 __register_exitproc
00025500 g       *ABS*	00000000 __ram_rwdata_start
0002500c g       *ABS*	00000000 __ram_rodata_start
00021104 g     F .text	00001c14 BYD_CONFIG_1024x768_RAW8
00023eb8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000241ec g     F .text	00000158 alt_busy_sleep
00025be0 g       *ABS*	00000000 __alt_stack_base
0002033c g     F .text	00000058 oc_i2c_init
00024524 g     F .text	000000a4 alt_dev_llist_insert
00023a44 g     F .text	000000ac __sfvwrite_small_dev
00025ac0 g       *ABS*	00000000 __bss_start
000230fc g     F .text	00000110 main
00025acc g     O .bss	00000004 alt_envp
00023f18 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000257d0 g     O .rwdata	00000004 alt_errno
00023278 g     F .text	00000054 .hidden __divsi3
000204e0 g     F .text	00000094 oc_i2c_uninit
0002500c g       *ABS*	00000000 __CTOR_END__
0002500c g       *ABS*	00000000 __flash_rodata_start
0002500c g       *ABS*	00000000 __DTOR_LIST__
00023e38 g     F .text	00000034 alt_irq_init
00024980 g     F .text	00000060 alt_release_fd
00024cc4 g     F .text	00000014 atexit
00023af0 g     F .text	00000058 _write_r
000257b8 g     O .rwdata	00000004 _impure_ptr
00025ac4 g     O .bss	00000004 alt_argc
00024624 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000257bc g     O .rwdata	00000008 alt_fs_list
000202e4 g     F .text	00000058 Read32_Data
000208c4 g     F .text	000001cc OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
000246b0 g     F .text	00000050 alt_ic_isr_register
000257e0 g       *ABS*	00000000 _edata
00025be0 g       *ABS*	00000000 _end
00020240 g       *ABS*	00000000 __ram_exceptions_end
000247a0 g     F .text	000000a4 alt_ic_irq_disable
00020a90 g     F .text	00000138 OC_I2C_Read_Continue
00024cd8 g     F .text	00000020 exit
000232cc g     F .text	0000005c .hidden __modsi3
00031170 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00021044 g     F .text	00000060 AR0833_write_cmos_sensor
00020da8 g     F .text	00000250 OC_I2CL_Read
00024fd8 g     F .text	00000034 _exit
00023454 g     F .text	0000001c strlen
00024680 g     F .text	00000030 alt_icache_flush_all
000257d4 g     O .rwdata	00000004 alt_priority_mask
00024700 g     F .text	000000a0 alt_ic_irq_enable
00023a20 g     F .text	00000024 __vfprintf_internal
00022d78 g     F .text	00000384 MIPI_Init
000257d8 g     O .rwdata	00000008 alt_alarm_list
000245c8 g     F .text	0000005c _do_ctors
00024394 g     F .text	000000d0 close
00023bac g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffeee94>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409014 	ori	at,at,576
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201cc0 	call	201cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	1096b804 	addi	r2,r2,23264
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	1096b804 	addi	r2,r2,23264
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffeefbc>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffeefb0>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	e037883a 	mov	sp,fp
   201bc:	dfc00117 	ldw	ra,4(sp)
   201c0:	df000017 	ldw	fp,0(sp)
   201c4:	dec00204 	addi	sp,sp,8
   201c8:	f800283a 	ret

000201cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201cc:	defffb04 	addi	sp,sp,-20
   201d0:	dfc00415 	stw	ra,16(sp)
   201d4:	df000315 	stw	fp,12(sp)
   201d8:	df000304 	addi	fp,sp,12
   201dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e0:	000531fa 	rdctl	r2,exception
   201e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201e8:	e0bffd17 	ldw	r2,-12(fp)
   201ec:	10801f0c 	andi	r2,r2,124
   201f0:	1004d0ba 	srli	r2,r2,2
   201f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201f8:	0005333a 	rdctl	r2,badaddr
   201fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20200:	d0a0ca17 	ldw	r2,-31960(gp)
   20204:	10000726 	beq	r2,zero,20224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   20208:	d0a0ca17 	ldw	r2,-31960(gp)
   2020c:	e0fffd17 	ldw	r3,-12(fp)
   20210:	1809883a 	mov	r4,r3
   20214:	e17fff17 	ldw	r5,-4(fp)
   20218:	e1bffe17 	ldw	r6,-8(fp)
   2021c:	103ee83a 	callr	r2
   20220:	00000206 	br	2022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   20228:	0005883a 	mov	r2,zero
}
   2022c:	e037883a 	mov	sp,fp
   20230:	dfc00117 	ldw	ra,4(sp)
   20234:	df000017 	ldw	fp,0(sp)
   20238:	dec00204 	addi	sp,sp,8
   2023c:	f800283a 	ret

Disassembly of section .text:

00020240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   20248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   2024c:	00bffd16 	blt	zero,r2,20244 <__alt_data_end+0xfffef0d4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20250:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20254:	dec45c14 	ori	sp,sp,4464
    movhi gp, %hi(_gp)
   20258:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   2025c:	d6b5ed14 	ori	gp,gp,55220
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20260:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20264:	1096b014 	ori	r2,r2,23232

    movhi r3, %hi(__bss_end)
   20268:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   2026c:	18d6f814 	ori	r3,r3,23520

    beq r2, r3, 1f
   20270:	10c00326 	beq	r2,r3,20280 <_start+0x40>

0:
    stw zero, (r2)
   20274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   20278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   2027c:	10fffd36 	bltu	r2,r3,20274 <__alt_data_end+0xfffef104>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20280:	0023bac0 	call	23bac <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20284:	0023c2c0 	call	23c2c <alt_main>

00020288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   20288:	003fff06 	br	20288 <__alt_data_end+0xfffef118>

0002028c <Write32_Data>:
#define SLEEP_TIME 15  //us
#define ACK_SLEEP_TIME 15  //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data){
   2028c:	defffb04 	addi	sp,sp,-20
   20290:	df000415 	stw	fp,16(sp)
   20294:	df000404 	addi	fp,sp,16
   20298:	e13ffd15 	stw	r4,-12(fp)
   2029c:	e17ffe15 	stw	r5,-8(fp)
   202a0:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
    IOWR(base_address, offset_address,Data);
   202a4:	e0bffe17 	ldw	r2,-8(fp)
   202a8:	1085883a 	add	r2,r2,r2
   202ac:	1085883a 	add	r2,r2,r2
   202b0:	1007883a 	mov	r3,r2
   202b4:	e0bffd17 	ldw	r2,-12(fp)
   202b8:	1885883a 	add	r2,r3,r2
   202bc:	1007883a 	mov	r3,r2
   202c0:	e0bfff17 	ldw	r2,-4(fp)
   202c4:	18800035 	stwio	r2,0(r3)
    bPass=TRUE;
   202c8:	00800044 	movi	r2,1
   202cc:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
   202d0:	e0bffc17 	ldw	r2,-16(fp)
}
   202d4:	e037883a 	mov	sp,fp
   202d8:	df000017 	ldw	fp,0(sp)
   202dc:	dec00104 	addi	sp,sp,4
   202e0:	f800283a 	ret

000202e4 <Read32_Data>:



bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
   202e4:	defffb04 	addi	sp,sp,-20
   202e8:	df000415 	stw	fp,16(sp)
   202ec:	df000404 	addi	fp,sp,16
   202f0:	e13ffd15 	stw	r4,-12(fp)
   202f4:	e17ffe15 	stw	r5,-8(fp)
   202f8:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
   202fc:	e0bffe17 	ldw	r2,-8(fp)
   20300:	1085883a 	add	r2,r2,r2
   20304:	1085883a 	add	r2,r2,r2
   20308:	1007883a 	mov	r3,r2
   2030c:	e0bffd17 	ldw	r2,-12(fp)
   20310:	1885883a 	add	r2,r3,r2
   20314:	10c00037 	ldwio	r3,0(r2)
   20318:	e0bfff17 	ldw	r2,-4(fp)
   2031c:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
   20320:	00800044 	movi	r2,1
   20324:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
   20328:	e0bffc17 	ldw	r2,-16(fp)
}
   2032c:	e037883a 	mov	sp,fp
   20330:	df000017 	ldw	fp,0(sp)
   20334:	dec00104 	addi	sp,sp,4
   20338:	f800283a 	ret

0002033c <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base){
   2033c:	defffa04 	addi	sp,sp,-24
   20340:	dfc00515 	stw	ra,20(sp)
   20344:	df000415 	stw	fp,16(sp)
   20348:	df000404 	addi	fp,sp,16
   2034c:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50*1000*1000; // 50MHz
   20350:	0080bef4 	movhi	r2,763
   20354:	10bc2004 	addi	r2,r2,-3968
   20358:	e0bffc15 	stw	r2,-16(fp)
	const alt_32 i2c_clk = 400*1000; // 400KHz
   2035c:	008001b4 	movhi	r2,6
   20360:	1086a004 	addi	r2,r2,6784
   20364:	e0bffd15 	stw	r2,-12(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   20368:	e13fff17 	ldw	r4,-4(fp)
   2036c:	e17ffc17 	ldw	r5,-16(fp)
   20370:	e1bffd17 	ldw	r6,-12(fp)
   20374:	00203940 	call	20394 <oc_i2c_init_ex>
   20378:	e0bffe15 	stw	r2,-8(fp)

	return bSuccess;
   2037c:	e0bffe17 	ldw	r2,-8(fp)
}
   20380:	e037883a 	mov	sp,fp
   20384:	dfc00117 	ldw	ra,4(sp)
   20388:	df000017 	ldw	fp,0(sp)
   2038c:	dec00204 	addi	sp,sp,8
   20390:	f800283a 	ret

00020394 <oc_i2c_init_ex>:

bool  oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk)
{
   20394:	defff604 	addi	sp,sp,-40
   20398:	dfc00915 	stw	ra,36(sp)
   2039c:	df000815 	stw	fp,32(sp)
   203a0:	df000804 	addi	fp,sp,32
   203a4:	e13ffd15 	stw	r4,-12(fp)
   203a8:	e17ffe15 	stw	r5,-8(fp)
   203ac:	e1bfff15 	stw	r6,-4(fp)
	bool bSuccess=TRUE;
   203b0:	00800044 	movi	r2,1
   203b4:	e0bff815 	stw	r2,-32(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   203b8:	00bfe004 	movi	r2,-128
   203bc:	e0bff905 	stb	r2,-28(fp)

    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk/(5*i2c_clk))-1;
   203c0:	e0bfff17 	ldw	r2,-4(fp)
   203c4:	10800164 	muli	r2,r2,5
   203c8:	e13ffe17 	ldw	r4,-8(fp)
   203cc:	100b883a 	mov	r5,r2
   203d0:	00232780 	call	23278 <__divsi3>
   203d4:	10bfffc4 	addi	r2,r2,-1
   203d8:	e0bffa15 	stw	r2,-24(fp)
	prescale_low = prescale & 0xFF;
   203dc:	e0bffa17 	ldw	r2,-24(fp)
   203e0:	e0bffb05 	stb	r2,-20(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203e4:	e0bffa17 	ldw	r2,-24(fp)
   203e8:	1005d23a 	srai	r2,r2,8
   203ec:	e0bffb45 	stb	r2,-19(fp)

   IOWR(i2c_base, 0, prescale_low);//write low byte of  prescale (reg 0)
   203f0:	e0bffd17 	ldw	r2,-12(fp)
   203f4:	e0fffb03 	ldbu	r3,-20(fp)
   203f8:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1, prescale_high);//write high byte of prescale (reg 1)
   203fc:	e0bffd17 	ldw	r2,-12(fp)
   20400:	10800104 	addi	r2,r2,4
   20404:	1007883a 	mov	r3,r2
   20408:	e0bffb43 	ldbu	r2,-19(fp)
   2040c:	18800035 	stwio	r2,0(r3)

   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2, ControlValue);
   20410:	e0bffd17 	ldw	r2,-12(fp)
   20414:	10800204 	addi	r2,r2,8
   20418:	1007883a 	mov	r3,r2
   2041c:	e0bff903 	ldbu	r2,-28(fp)
   20420:	18800035 	stwio	r2,0(r3)


    // check prescale low byte
    if (bSuccess){
   20424:	e0bff817 	ldw	r2,-32(fp)
   20428:	10000826 	beq	r2,zero,2044c <oc_i2c_init_ex+0xb8>
    	read_data =IORD(i2c_base, 0);
   2042c:	e0bffd17 	ldw	r2,-12(fp)
   20430:	10800037 	ldwio	r2,0(r2)
   20434:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_low ){
   20438:	e0bffc17 	ldw	r2,-16(fp)
   2043c:	10c03fcc 	andi	r3,r2,255
   20440:	e0bffb03 	ldbu	r2,-20(fp)
   20444:	18800126 	beq	r3,r2,2044c <oc_i2c_init_ex+0xb8>
            bSuccess = FALSE;
   20448:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check prescale high byte
    if (bSuccess){
   2044c:	e0bff817 	ldw	r2,-32(fp)
   20450:	10000926 	beq	r2,zero,20478 <oc_i2c_init_ex+0xe4>
    	read_data =IORD(i2c_base, 1);
   20454:	e0bffd17 	ldw	r2,-12(fp)
   20458:	10800104 	addi	r2,r2,4
   2045c:	10800037 	ldwio	r2,0(r2)
   20460:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != prescale_high ){
   20464:	e0bffc17 	ldw	r2,-16(fp)
   20468:	10c03fcc 	andi	r3,r2,255
   2046c:	e0bffb43 	ldbu	r2,-19(fp)
   20470:	18800126 	beq	r3,r2,20478 <oc_i2c_init_ex+0xe4>
            bSuccess = FALSE;
   20474:	e03ff815 	stw	zero,-32(fp)
        }
    }

    // check control
    if (bSuccess){
   20478:	e0bff817 	ldw	r2,-32(fp)
   2047c:	10000926 	beq	r2,zero,204a4 <oc_i2c_init_ex+0x110>
    	read_data =IORD(i2c_base, 2);
   20480:	e0bffd17 	ldw	r2,-12(fp)
   20484:	10800204 	addi	r2,r2,8
   20488:	10800037 	ldwio	r2,0(r2)
   2048c:	e0bffc15 	stw	r2,-16(fp)
        if( (read_data & 0x00ff) != ControlValue ){
   20490:	e0bffc17 	ldw	r2,-16(fp)
   20494:	10c03fcc 	andi	r3,r2,255
   20498:	e0bff903 	ldbu	r2,-28(fp)
   2049c:	18800126 	beq	r3,r2,204a4 <oc_i2c_init_ex+0x110>
            bSuccess = FALSE;
   204a0:	e03ff815 	stw	zero,-32(fp)
        }
    }

   if (bSuccess)
   204a4:	e0bff817 	ldw	r2,-32(fp)
   204a8:	10000426 	beq	r2,zero,204bc <oc_i2c_init_ex+0x128>
       printf("\nI2C core is enabled! \r\n");
   204ac:	010000b4 	movhi	r4,2
   204b0:	21140304 	addi	r4,r4,20492
   204b4:	00234400 	call	23440 <puts>
   204b8:	00000306 	br	204c8 <oc_i2c_init_ex+0x134>
   else
       printf("\nI2C core is not enabled successfully! \r\n");
   204bc:	010000b4 	movhi	r4,2
   204c0:	21140904 	addi	r4,r4,20516
   204c4:	00234400 	call	23440 <puts>

   return bSuccess;
   204c8:	e0bff817 	ldw	r2,-32(fp)

}
   204cc:	e037883a 	mov	sp,fp
   204d0:	dfc00117 	ldw	ra,4(sp)
   204d4:	df000017 	ldw	fp,0(sp)
   204d8:	dec00204 	addi	sp,sp,8
   204dc:	f800283a 	ret

000204e0 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base)
{
   204e0:	defffa04 	addi	sp,sp,-24
   204e4:	dfc00515 	stw	ra,20(sp)
   204e8:	df000415 	stw	fp,16(sp)
   204ec:	df000404 	addi	fp,sp,16
   204f0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   204f4:	00800044 	movi	r2,1
   204f8:	e0bffc15 	stw	r2,-16(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   204fc:	e03ffd05 	stb	zero,-12(fp)

    IOWR( i2c_base, 2, ControlValue);
   20500:	e0bfff17 	ldw	r2,-4(fp)
   20504:	10800204 	addi	r2,r2,8
   20508:	1007883a 	mov	r3,r2
   2050c:	e0bffd03 	ldbu	r2,-12(fp)
   20510:	18800035 	stwio	r2,0(r3)
   	read_data =IORD(i2c_base, 2);
   20514:	e0bfff17 	ldw	r2,-4(fp)
   20518:	10800204 	addi	r2,r2,8
   2051c:	10800037 	ldwio	r2,0(r2)
   20520:	e0bffe15 	stw	r2,-8(fp)
	if( (read_data & 0x00ff) != ControlValue ){
   20524:	e0bffe17 	ldw	r2,-8(fp)
   20528:	10c03fcc 	andi	r3,r2,255
   2052c:	e0bffd03 	ldbu	r2,-12(fp)
   20530:	18800126 	beq	r3,r2,20538 <oc_i2c_uninit+0x58>
            bSuccess = FALSE;
   20534:	e03ffc15 	stw	zero,-16(fp)
    }

   if (bSuccess)
   20538:	e0bffc17 	ldw	r2,-16(fp)
   2053c:	10000426 	beq	r2,zero,20550 <oc_i2c_uninit+0x70>
       printf("\I2C core  is disabled! \r\n");
   20540:	010000b4 	movhi	r4,2
   20544:	21141404 	addi	r4,r4,20560
   20548:	00234400 	call	23440 <puts>
   2054c:	00000306 	br	2055c <oc_i2c_uninit+0x7c>
   else
       printf("\I2C core is failed to disable! \r\n");
   20550:	010000b4 	movhi	r4,2
   20554:	21141b04 	addi	r4,r4,20588
   20558:	00234400 	call	23440 <puts>

   return bSuccess;
   2055c:	e0bffc17 	ldw	r2,-16(fp)

}
   20560:	e037883a 	mov	sp,fp
   20564:	dfc00117 	ldw	ra,4(sp)
   20568:	df000017 	ldw	fp,0(sp)
   2056c:	dec00204 	addi	sp,sp,8
   20570:	f800283a 	ret

00020574 <ACK_single_check>:




bool  ACK_single_check(alt_32 i2c_base)
{
   20574:	defffb04 	addi	sp,sp,-20
   20578:	dfc00415 	stw	ra,16(sp)
   2057c:	df000315 	stw	fp,12(sp)
   20580:	df000304 	addi	fp,sp,12
   20584:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
   20588:	00800044 	movi	r2,1
   2058c:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(ACK_SLEEP_TIME);
   20590:	010003c4 	movi	r4,15
   20594:	0023c880 	call	23c88 <usleep>
    read_data =IORD(i2c_base, 4);
   20598:	e0bfff17 	ldw	r2,-4(fp)
   2059c:	10800404 	addi	r2,r2,16
   205a0:	10800037 	ldwio	r2,0(r2)
   205a4:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
   205a8:	e0bffe17 	ldw	r2,-8(fp)
   205ac:	1080008c 	andi	r2,r2,2
   205b0:	10000126 	beq	r2,zero,205b8 <ACK_single_check+0x44>
            bSuccess = FALSE;
   205b4:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
   205b8:	e0bffd17 	ldw	r2,-12(fp)
   205bc:	10000a26 	beq	r2,zero,205e8 <ACK_single_check+0x74>
            usleep(ACK_SLEEP_TIME);
   205c0:	010003c4 	movi	r4,15
   205c4:	0023c880 	call	23c88 <usleep>
            read_data =IORD(i2c_base, 4);
   205c8:	e0bfff17 	ldw	r2,-4(fp)
   205cc:	10800404 	addi	r2,r2,16
   205d0:	10800037 	ldwio	r2,0(r2)
   205d4:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
   205d8:	e0bffe17 	ldw	r2,-8(fp)
   205dc:	1080200c 	andi	r2,r2,128
   205e0:	10000126 	beq	r2,zero,205e8 <ACK_single_check+0x74>
                    bSuccess = FALSE;
   205e4:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
   205e8:	e0bffd17 	ldw	r2,-12(fp)
}
   205ec:	e037883a 	mov	sp,fp
   205f0:	dfc00117 	ldw	ra,4(sp)
   205f4:	df000017 	ldw	fp,0(sp)
   205f8:	dec00204 	addi	sp,sp,8
   205fc:	f800283a 	ret

00020600 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
   20600:	defffb04 	addi	sp,sp,-20
   20604:	dfc00415 	stw	ra,16(sp)
   20608:	df000315 	stw	fp,12(sp)
   2060c:	df000304 	addi	fp,sp,12
   20610:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
   20614:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
   20618:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
   2061c:	00000306 	br	2062c <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
   20620:	e13fff17 	ldw	r4,-4(fp)
   20624:	00205740 	call	20574 <ACK_single_check>
   20628:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
   2062c:	e0bffd17 	ldw	r2,-12(fp)
   20630:	1000051e 	bne	r2,zero,20648 <ACK_check+0x48>
   20634:	e0bffe17 	ldw	r2,-8(fp)
   20638:	10c00044 	addi	r3,r2,1
   2063c:	e0fffe15 	stw	r3,-8(fp)
   20640:	10800290 	cmplti	r2,r2,10
   20644:	103ff61e 	bne	r2,zero,20620 <__alt_data_end+0xfffef4b0>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
   20648:	e0bffd17 	ldw	r2,-12(fp)
}
   2064c:	e037883a 	mov	sp,fp
   20650:	dfc00117 	ldw	ra,4(sp)
   20654:	df000017 	ldw	fp,0(sp)
   20658:	dec00204 	addi	sp,sp,8
   2065c:	f800283a 	ret

00020660 <OC_I2C_Write>:

bool  OC_I2C_Write(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData, int nWriteLength)
{
   20660:	defff904 	addi	sp,sp,-28
   20664:	dfc00615 	stw	ra,24(sp)
   20668:	df000515 	stw	fp,20(sp)
   2066c:	df000504 	addi	fp,sp,20
   20670:	e13ffc15 	stw	r4,-16(fp)
   20674:	2807883a 	mov	r3,r5
   20678:	3005883a 	mov	r2,r6
   2067c:	e1ffff15 	stw	r7,-4(fp)
   20680:	e0fffd05 	stb	r3,-12(fp)
   20684:	e0bffe05 	stb	r2,-8(fp)
    //DWORD reg_data = 0x0;
    int i;
   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address)){
   20688:	e0bffd03 	ldbu	r2,-12(fp)
   2068c:	e13ffc17 	ldw	r4,-16(fp)
   20690:	014000c4 	movi	r5,3
   20694:	100d883a 	mov	r6,r2
   20698:	002028c0 	call	2028c <Write32_Data>
   2069c:	1000051e 	bne	r2,zero,206b4 <OC_I2C_Write+0x54>
       printf("OC_I2C_Write error[0]\r\n");
   206a0:	010000b4 	movhi	r4,2
   206a4:	21142404 	addi	r4,r4,20624
   206a8:	00234400 	call	23440 <puts>
       return FALSE;
   206ac:	0005883a 	mov	r2,zero
   206b0:	00006606 	br	2084c <OC_I2C_Write+0x1ec>
   }
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90)){
   206b4:	e13ffc17 	ldw	r4,-16(fp)
   206b8:	01400104 	movi	r5,4
   206bc:	01802404 	movi	r6,144
   206c0:	002028c0 	call	2028c <Write32_Data>
   206c4:	1000051e 	bne	r2,zero,206dc <OC_I2C_Write+0x7c>
       printf("OC_I2C_Write error[1]\r\n");
   206c8:	010000b4 	movhi	r4,2
   206cc:	21142a04 	addi	r4,r4,20648
   206d0:	00234400 	call	23440 <puts>
       return FALSE;
   206d4:	0005883a 	mov	r2,zero
   206d8:	00005c06 	br	2084c <OC_I2C_Write+0x1ec>
   }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   206dc:	e13ffc17 	ldw	r4,-16(fp)
   206e0:	00206000 	call	20600 <ACK_check>
   206e4:	1000051e 	bne	r2,zero,206fc <OC_I2C_Write+0x9c>
        printf("OC_I2C_Write error[2]\r\n");
   206e8:	010000b4 	movhi	r4,2
   206ec:	21143004 	addi	r4,r4,20672
   206f0:	00234400 	call	23440 <puts>
        return FALSE;
   206f4:	0005883a 	mov	r2,zero
   206f8:	00005406 	br	2084c <OC_I2C_Write+0x1ec>
    }
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,sub_address)){
   206fc:	e0bffe03 	ldbu	r2,-8(fp)
   20700:	e13ffc17 	ldw	r4,-16(fp)
   20704:	014000c4 	movi	r5,3
   20708:	100d883a 	mov	r6,r2
   2070c:	002028c0 	call	2028c <Write32_Data>
   20710:	1000051e 	bne	r2,zero,20728 <OC_I2C_Write+0xc8>
       printf("OC_I2C_Write error[3]\r\n");
   20714:	010000b4 	movhi	r4,2
   20718:	21143604 	addi	r4,r4,20696
   2071c:	00234400 	call	23440 <puts>
       return FALSE;
   20720:	0005883a 	mov	r2,zero
   20724:	00004906 	br	2084c <OC_I2C_Write+0x1ec>
   }

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10)){
   20728:	e13ffc17 	ldw	r4,-16(fp)
   2072c:	01400104 	movi	r5,4
   20730:	01800404 	movi	r6,16
   20734:	002028c0 	call	2028c <Write32_Data>
   20738:	1000051e 	bne	r2,zero,20750 <OC_I2C_Write+0xf0>
        printf("OC_I2C_Write error[4]\r\n");
   2073c:	010000b4 	movhi	r4,2
   20740:	21143c04 	addi	r4,r4,20720
   20744:	00234400 	call	23440 <puts>
        return FALSE;
   20748:	0005883a 	mov	r2,zero
   2074c:	00003f06 	br	2084c <OC_I2C_Write+0x1ec>
    }

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base)){
   20750:	e13ffc17 	ldw	r4,-16(fp)
   20754:	00206000 	call	20600 <ACK_check>
   20758:	1000051e 	bne	r2,zero,20770 <OC_I2C_Write+0x110>
        printf("OC_I2C_Write error[5]\r\n");
   2075c:	010000b4 	movhi	r4,2
   20760:	21144204 	addi	r4,r4,20744
   20764:	00234400 	call	23440 <puts>
        return FALSE;
   20768:	0005883a 	mov	r2,zero
   2076c:	00003706 	br	2084c <OC_I2C_Write+0x1ec>
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=nWriteLength-1;i>0;i--){
   20770:	e0800217 	ldw	r2,8(fp)
   20774:	10bfffc4 	addi	r2,r2,-1
   20778:	e0bffb15 	stw	r2,-20(fp)
   2077c:	00002406 	br	20810 <OC_I2C_Write+0x1b0>
        //set the txr reg data with the data
          if (!Write32_Data( i2c_base, 3,*(pData+i))){
   20780:	e0bffb17 	ldw	r2,-20(fp)
   20784:	e0ffff17 	ldw	r3,-4(fp)
   20788:	1885883a 	add	r2,r3,r2
   2078c:	10800003 	ldbu	r2,0(r2)
   20790:	10803fcc 	andi	r2,r2,255
   20794:	e13ffc17 	ldw	r4,-16(fp)
   20798:	014000c4 	movi	r5,3
   2079c:	100d883a 	mov	r6,r2
   207a0:	002028c0 	call	2028c <Write32_Data>
   207a4:	1000051e 	bne	r2,zero,207bc <OC_I2C_Write+0x15c>
              printf("OC_I2C_Write error[6]\r\n");
   207a8:	010000b4 	movhi	r4,2
   207ac:	21144804 	addi	r4,r4,20768
   207b0:	00234400 	call	23440 <puts>
              return FALSE;
   207b4:	0005883a 	mov	r2,zero
   207b8:	00002406 	br	2084c <OC_I2C_Write+0x1ec>
          }

        //set STO and WR bits(bit7 and bit4)
         if (!Write32_Data( i2c_base, 4,0x10)){
   207bc:	e13ffc17 	ldw	r4,-16(fp)
   207c0:	01400104 	movi	r5,4
   207c4:	01800404 	movi	r6,16
   207c8:	002028c0 	call	2028c <Write32_Data>
   207cc:	1000051e 	bne	r2,zero,207e4 <OC_I2C_Write+0x184>
             printf("OC_I2C_Write error[7]\r\n");
   207d0:	010000b4 	movhi	r4,2
   207d4:	21144e04 	addi	r4,r4,20792
   207d8:	00234400 	call	23440 <puts>
              return FALSE;
   207dc:	0005883a 	mov	r2,zero
   207e0:	00001a06 	br	2084c <OC_I2C_Write+0x1ec>
         }

         //wait TIP bit go to 0 to end Tx
          if(!ACK_check( i2c_base)){
   207e4:	e13ffc17 	ldw	r4,-16(fp)
   207e8:	00206000 	call	20600 <ACK_check>
   207ec:	1000051e 	bne	r2,zero,20804 <OC_I2C_Write+0x1a4>
              printf("OC_I2C_Write error[8]\r\n");
   207f0:	010000b4 	movhi	r4,2
   207f4:	21145404 	addi	r4,r4,20816
   207f8:	00234400 	call	23440 <puts>
              return FALSE;
   207fc:	0005883a 	mov	r2,zero
   20800:	00001206 	br	2084c <OC_I2C_Write+0x1ec>
        return FALSE;
    }
 //  printf("\n receive ACK-reg address! \n");

#if 1
    for( i=nWriteLength-1;i>0;i--){
   20804:	e0bffb17 	ldw	r2,-20(fp)
   20808:	10bfffc4 	addi	r2,r2,-1
   2080c:	e0bffb15 	stw	r2,-20(fp)
   20810:	e0bffb17 	ldw	r2,-20(fp)
   20814:	00bfda16 	blt	zero,r2,20780 <__alt_data_end+0xfffef610>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return false;
#endif

     if (!Write32_Data( i2c_base, 4,0x40)){
   20818:	e13ffc17 	ldw	r4,-16(fp)
   2081c:	01400104 	movi	r5,4
   20820:	01801004 	movi	r6,64
   20824:	002028c0 	call	2028c <Write32_Data>
   20828:	1000051e 	bne	r2,zero,20840 <OC_I2C_Write+0x1e0>
         printf("OC_I2C_Write error[9]\r\n");
   2082c:	010000b4 	movhi	r4,2
   20830:	21145a04 	addi	r4,r4,20840
   20834:	00234400 	call	23440 <puts>
         return FALSE;
   20838:	0005883a 	mov	r2,zero
   2083c:	00000306 	br	2084c <OC_I2C_Write+0x1ec>
     }
         //Sleep(10);
     //OS_msleep(1);
     usleep(SLEEP_TIME);
   20840:	010003c4 	movi	r4,15
   20844:	0023c880 	call	23c88 <usleep>

  // printf("\n receive ACK-data! \n");

     return TRUE;
   20848:	00800044 	movi	r2,1

}
   2084c:	e037883a 	mov	sp,fp
   20850:	dfc00117 	ldw	ra,4(sp)
   20854:	df000017 	ldw	fp,0(sp)
   20858:	dec00204 	addi	sp,sp,8
   2085c:	f800283a 	ret

00020860 <ACK_judge_for_read>:


bool ACK_judge_for_read(alt_32 i2c_base)
{
   20860:	defffb04 	addi	sp,sp,-20
   20864:	dfc00415 	stw	ra,16(sp)
   20868:	df000315 	stw	fp,12(sp)
   2086c:	df000304 	addi	fp,sp,12
   20870:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(ACK_SLEEP_TIME);
   20874:	010003c4 	movi	r4,15
   20878:	0023c880 	call	23c88 <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
   2087c:	e0bffe04 	addi	r2,fp,-8
   20880:	e13fff17 	ldw	r4,-4(fp)
   20884:	01400104 	movi	r5,4
   20888:	100d883a 	mov	r6,r2
   2088c:	00202e40 	call	202e4 <Read32_Data>
   20890:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
   20894:	e0bffd17 	ldw	r2,-12(fp)
   20898:	10000426 	beq	r2,zero,208ac <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
   2089c:	e0bffe17 	ldw	r2,-8(fp)
   208a0:	1080008c 	andi	r2,r2,2
   208a4:	10000126 	beq	r2,zero,208ac <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
   208a8:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
   208ac:	e0bffd17 	ldw	r2,-12(fp)

}
   208b0:	e037883a 	mov	sp,fp
   208b4:	dfc00117 	ldw	ra,4(sp)
   208b8:	df000017 	ldw	fp,0(sp)
   208bc:	dec00204 	addi	sp,sp,8
   208c0:	f800283a 	ret

000208c4 <OC_I2C_Read>:


bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
   208c4:	defff804 	addi	sp,sp,-32
   208c8:	dfc00715 	stw	ra,28(sp)
   208cc:	df000615 	stw	fp,24(sp)
   208d0:	df000604 	addi	fp,sp,24
   208d4:	e13ffc15 	stw	r4,-16(fp)
   208d8:	2807883a 	mov	r3,r5
   208dc:	3005883a 	mov	r2,r6
   208e0:	e1ffff15 	stw	r7,-4(fp)
   208e4:	e0fffd05 	stb	r3,-12(fp)
   208e8:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
   208ec:	e0bffc17 	ldw	r2,-16(fp)
   208f0:	10800304 	addi	r2,r2,12
   208f4:	1007883a 	mov	r3,r2
   208f8:	e0bffd03 	ldbu	r2,-12(fp)
   208fc:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
   20900:	e0bffc17 	ldw	r2,-16(fp)
   20904:	10800404 	addi	r2,r2,16
   20908:	1007883a 	mov	r3,r2
   2090c:	00802404 	movi	r2,144
   20910:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
   20914:	e13ffc17 	ldw	r4,-16(fp)
   20918:	00206000 	call	20600 <ACK_check>
   2091c:	1000051e 	bne	r2,zero,20934 <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
   20920:	010000b4 	movhi	r4,2
   20924:	21146004 	addi	r4,r4,20864
   20928:	00234400 	call	23440 <puts>
       return FALSE;
   2092c:	0005883a 	mov	r2,zero
   20930:	00005206 	br	20a7c <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
   20934:	e0bffc17 	ldw	r2,-16(fp)
   20938:	10800304 	addi	r2,r2,12
   2093c:	1007883a 	mov	r3,r2
   20940:	e0bffe03 	ldbu	r2,-8(fp)
   20944:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
   20948:	e0bffc17 	ldw	r2,-16(fp)
   2094c:	10800404 	addi	r2,r2,16
   20950:	1007883a 	mov	r3,r2
   20954:	00800404 	movi	r2,16
   20958:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   2095c:	e13ffc17 	ldw	r4,-16(fp)
   20960:	00206000 	call	20600 <ACK_check>
   20964:	1000051e 	bne	r2,zero,2097c <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
   20968:	010000b4 	movhi	r4,2
   2096c:	21146604 	addi	r4,r4,20888
   20970:	00234400 	call	23440 <puts>
        return FALSE;
   20974:	0005883a 	mov	r2,zero
   20978:	00004006 	br	20a7c <OC_I2C_Read+0x1b8>
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1

    IOWR(i2c_base, 3,device_address|0x01);
   2097c:	e0bffc17 	ldw	r2,-16(fp)
   20980:	10800304 	addi	r2,r2,12
   20984:	1007883a 	mov	r3,r2
   20988:	e0bffd03 	ldbu	r2,-12(fp)
   2098c:	10800054 	ori	r2,r2,1
   20990:	10803fcc 	andi	r2,r2,255
   20994:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20998:	e0bffc17 	ldw	r2,-16(fp)
   2099c:	10800404 	addi	r2,r2,16
   209a0:	1007883a 	mov	r3,r2
   209a4:	00802404 	movi	r2,144
   209a8:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   209ac:	e13ffc17 	ldw	r4,-16(fp)
   209b0:	00206000 	call	20600 <ACK_check>
   209b4:	1000051e 	bne	r2,zero,209cc <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
   209b8:	010000b4 	movhi	r4,2
   209bc:	21146c04 	addi	r4,r4,20912
   209c0:	00234400 	call	23440 <puts>
        return FALSE;
   209c4:	0005883a 	mov	r2,zero
   209c8:	00002c06 	br	20a7c <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
   209cc:	e03ffa15 	stw	zero,-24(fp)
   209d0:	00001f06 	br	20a50 <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   209d4:	e0bffc17 	ldw	r2,-16(fp)
   209d8:	10800404 	addi	r2,r2,16
   209dc:	1009883a 	mov	r4,r2
   209e0:	e0bffa17 	ldw	r2,-24(fp)
   209e4:	10c00044 	addi	r3,r2,1
   209e8:	e0800217 	ldw	r2,8(fp)
   209ec:	1880021e 	bne	r3,r2,209f8 <OC_I2C_Read+0x134>
   209f0:	00800a04 	movi	r2,40
   209f4:	00000106 	br	209fc <OC_I2C_Read+0x138>
   209f8:	00800804 	movi	r2,32
   209fc:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20a00:	e13ffc17 	ldw	r4,-16(fp)
   20a04:	00208600 	call	20860 <ACK_judge_for_read>
   20a08:	1000051e 	bne	r2,zero,20a20 <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
   20a0c:	010000b4 	movhi	r4,2
   20a10:	21147204 	addi	r4,r4,20936
   20a14:	00234400 	call	23440 <puts>
            return FALSE;
   20a18:	0005883a 	mov	r2,zero
   20a1c:	00001706 	br	20a7c <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20a20:	e0bffc17 	ldw	r2,-16(fp)
   20a24:	10800304 	addi	r2,r2,12
   20a28:	10800037 	ldwio	r2,0(r2)
   20a2c:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20a30:	e0bffa17 	ldw	r2,-24(fp)
   20a34:	e0ffff17 	ldw	r3,-4(fp)
   20a38:	1885883a 	add	r2,r3,r2
   20a3c:	e0fffb17 	ldw	r3,-20(fp)
   20a40:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20a44:	e0bffa17 	ldw	r2,-24(fp)
   20a48:	10800044 	addi	r2,r2,1
   20a4c:	e0bffa15 	stw	r2,-24(fp)
   20a50:	e0fffa17 	ldw	r3,-24(fp)
   20a54:	e0800217 	ldw	r2,8(fp)
   20a58:	18bfde16 	blt	r3,r2,209d4 <__alt_data_end+0xfffef864>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20a5c:	e0bffc17 	ldw	r2,-16(fp)
   20a60:	10800404 	addi	r2,r2,16
   20a64:	1007883a 	mov	r3,r2
   20a68:	00801004 	movi	r2,64
   20a6c:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20a70:	010003c4 	movi	r4,15
   20a74:	0023c880 	call	23c88 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20a78:	00800044 	movi	r2,1

}
   20a7c:	e037883a 	mov	sp,fp
   20a80:	dfc00117 	ldw	ra,4(sp)
   20a84:	df000017 	ldw	fp,0(sp)
   20a88:	dec00204 	addi	sp,sp,8
   20a8c:	f800283a 	ret

00020a90 <OC_I2C_Read_Continue>:


bool  OC_I2C_Read_Continue(alt_32 i2c_base,alt_u8 device_address, alt_u8 *pData8, int nReadLength){
   20a90:	defff804 	addi	sp,sp,-32
   20a94:	dfc00715 	stw	ra,28(sp)
   20a98:	df000615 	stw	fp,24(sp)
   20a9c:	df000604 	addi	fp,sp,24
   20aa0:	e13ffc15 	stw	r4,-16(fp)
   20aa4:	2805883a 	mov	r2,r5
   20aa8:	e1bffe15 	stw	r6,-8(fp)
   20aac:	e1ffff15 	stw	r7,-4(fp)
   20ab0:	e0bffd05 	stb	r2,-12(fp)
	int i;
	alt_u32 Data32;

    IOWR(i2c_base, 3,device_address|0x01);
   20ab4:	e0bffc17 	ldw	r2,-16(fp)
   20ab8:	10800304 	addi	r2,r2,12
   20abc:	1007883a 	mov	r3,r2
   20ac0:	e0bffd03 	ldbu	r2,-12(fp)
   20ac4:	10800054 	ori	r2,r2,1
   20ac8:	10803fcc 	andi	r2,r2,255
   20acc:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
   20ad0:	e0bffc17 	ldw	r2,-16(fp)
   20ad4:	10800404 	addi	r2,r2,16
   20ad8:	1007883a 	mov	r3,r2
   20adc:	00802404 	movi	r2,144
   20ae0:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
   20ae4:	e13ffc17 	ldw	r4,-16(fp)
   20ae8:	00206000 	call	20600 <ACK_check>
   20aec:	1000051e 	bne	r2,zero,20b04 <OC_I2C_Read_Continue+0x74>
        printf("OC_I2C_Read error[8]\r\n");
   20af0:	010000b4 	movhi	r4,2
   20af4:	21146c04 	addi	r4,r4,20912
   20af8:	00234400 	call	23440 <puts>
        return FALSE;
   20afc:	0005883a 	mov	r2,zero
   20b00:	00002c06 	br	20bb4 <OC_I2C_Read_Continue+0x124>
    }

    for(i=0;i<nReadLength;i++){
   20b04:	e03ffa15 	stw	zero,-24(fp)
   20b08:	00001f06 	br	20b88 <OC_I2C_Read_Continue+0xf8>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20b0c:	e0bffc17 	ldw	r2,-16(fp)
   20b10:	10800404 	addi	r2,r2,16
   20b14:	1009883a 	mov	r4,r2
   20b18:	e0bffa17 	ldw	r2,-24(fp)
   20b1c:	10c00044 	addi	r3,r2,1
   20b20:	e0bfff17 	ldw	r2,-4(fp)
   20b24:	1880021e 	bne	r3,r2,20b30 <OC_I2C_Read_Continue+0xa0>
   20b28:	00800a04 	movi	r2,40
   20b2c:	00000106 	br	20b34 <OC_I2C_Read_Continue+0xa4>
   20b30:	00800804 	movi	r2,32
   20b34:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20b38:	e13ffc17 	ldw	r4,-16(fp)
   20b3c:	00208600 	call	20860 <ACK_judge_for_read>
   20b40:	1000051e 	bne	r2,zero,20b58 <OC_I2C_Read_Continue+0xc8>
            printf("OC_I2C_Read error[10]\r\n");
   20b44:	010000b4 	movhi	r4,2
   20b48:	21147204 	addi	r4,r4,20936
   20b4c:	00234400 	call	23440 <puts>
            return FALSE;
   20b50:	0005883a 	mov	r2,zero
   20b54:	00001706 	br	20bb4 <OC_I2C_Read_Continue+0x124>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20b58:	e0bffc17 	ldw	r2,-16(fp)
   20b5c:	10800304 	addi	r2,r2,12
   20b60:	10800037 	ldwio	r2,0(r2)
   20b64:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20b68:	e0bffa17 	ldw	r2,-24(fp)
   20b6c:	e0fffe17 	ldw	r3,-8(fp)
   20b70:	1885883a 	add	r2,r3,r2
   20b74:	e0fffb17 	ldw	r3,-20(fp)
   20b78:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
   20b7c:	e0bffa17 	ldw	r2,-24(fp)
   20b80:	10800044 	addi	r2,r2,1
   20b84:	e0bffa15 	stw	r2,-24(fp)
   20b88:	e0fffa17 	ldw	r3,-24(fp)
   20b8c:	e0bfff17 	ldw	r2,-4(fp)
   20b90:	18bfde16 	blt	r3,r2,20b0c <__alt_data_end+0xfffef99c>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
   20b94:	e0bffc17 	ldw	r2,-16(fp)
   20b98:	10800404 	addi	r2,r2,16
   20b9c:	1007883a 	mov	r3,r2
   20ba0:	00801004 	movi	r2,64
   20ba4:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20ba8:	010003c4 	movi	r4,15
   20bac:	0023c880 	call	23c88 <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
   20bb0:	00800044 	movi	r2,1

}
   20bb4:	e037883a 	mov	sp,fp
   20bb8:	dfc00117 	ldw	ra,4(sp)
   20bbc:	df000017 	ldw	fp,0(sp)
   20bc0:	dec00204 	addi	sp,sp,8
   20bc4:	f800283a 	ret

00020bc8 <OC_I2CL_Write>:


//  size > 2Kb
bool  OC_I2CL_Write(alt_32 i2c_base,alt_u8 device_address,alt_u16 sub_address,alt_u8 *pData, int nWriteLength)
    {
   20bc8:	defff804 	addi	sp,sp,-32
   20bcc:	dfc00715 	stw	ra,28(sp)
   20bd0:	df000615 	stw	fp,24(sp)
   20bd4:	df000604 	addi	fp,sp,24
   20bd8:	e13ffc15 	stw	r4,-16(fp)
   20bdc:	2807883a 	mov	r3,r5
   20be0:	3005883a 	mov	r2,r6
   20be4:	e1ffff15 	stw	r7,-4(fp)
   20be8:	e0fffd05 	stb	r3,-12(fp)
   20bec:	e0bffe0d 	sth	r2,-8(fp)
    //DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
    //int count= 0;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20bf0:	e0bffe0b 	ldhu	r2,-8(fp)
   20bf4:	1004d23a 	srli	r2,r2,8
   20bf8:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = sub_address & 0xFF;
   20bfc:	e0bffe0b 	ldhu	r2,-8(fp)
   20c00:	e0bffb45 	stb	r2,-19(fp)

    int i;

    //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20c04:	e0bffd03 	ldbu	r2,-12(fp)
   20c08:	e13ffc17 	ldw	r4,-16(fp)
   20c0c:	014000c4 	movi	r5,3
   20c10:	100d883a 	mov	r6,r2
   20c14:	002028c0 	call	2028c <Write32_Data>
   20c18:	1000021e 	bne	r2,zero,20c24 <OC_I2CL_Write+0x5c>
       return FALSE;
   20c1c:	0005883a 	mov	r2,zero
   20c20:	00005c06 	br	20d94 <OC_I2CL_Write+0x1cc>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))//0x90
   20c24:	e13ffc17 	ldw	r4,-16(fp)
   20c28:	01400104 	movi	r5,4
   20c2c:	01802404 	movi	r6,144
   20c30:	002028c0 	call	2028c <Write32_Data>
   20c34:	1000021e 	bne	r2,zero,20c40 <OC_I2CL_Write+0x78>
       return FALSE;
   20c38:	0005883a 	mov	r2,zero
   20c3c:	00005506 	br	20d94 <OC_I2CL_Write+0x1cc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20c40:	e13ffc17 	ldw	r4,-16(fp)
   20c44:	00206000 	call	20600 <ACK_check>
   20c48:	1000021e 	bne	r2,zero,20c54 <OC_I2CL_Write+0x8c>
        return FALSE;
   20c4c:	0005883a 	mov	r2,zero
   20c50:	00005006 	br	20d94 <OC_I2CL_Write+0x1cc>
  // printf("\n receive ACK-device address! \n");

   //set the txr reg data with reg address + 1 data MSB
 //  reg_data  = (sub_address << 1) & 0xFE;
   //reg_data |= ((data >> 8) & 0x01);
   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20c54:	e0bffb03 	ldbu	r2,-20(fp)
   20c58:	e13ffc17 	ldw	r4,-16(fp)
   20c5c:	014000c4 	movi	r5,3
   20c60:	100d883a 	mov	r6,r2
   20c64:	002028c0 	call	2028c <Write32_Data>
   20c68:	1000021e 	bne	r2,zero,20c74 <OC_I2CL_Write+0xac>
       return FALSE;
   20c6c:	0005883a 	mov	r2,zero
   20c70:	00004806 	br	20d94 <OC_I2CL_Write+0x1cc>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20c74:	e13ffc17 	ldw	r4,-16(fp)
   20c78:	01400104 	movi	r5,4
   20c7c:	01800404 	movi	r6,16
   20c80:	002028c0 	call	2028c <Write32_Data>
   20c84:	1000021e 	bne	r2,zero,20c90 <OC_I2CL_Write+0xc8>
        return FALSE;
   20c88:	0005883a 	mov	r2,zero
   20c8c:	00004106 	br	20d94 <OC_I2CL_Write+0x1cc>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20c90:	e13ffc17 	ldw	r4,-16(fp)
   20c94:	00206000 	call	20600 <ACK_check>
   20c98:	1000021e 	bne	r2,zero,20ca4 <OC_I2CL_Write+0xdc>
        return FALSE;
   20c9c:	0005883a 	mov	r2,zero
   20ca0:	00003c06 	br	20d94 <OC_I2CL_Write+0x1cc>
  // printf("\n receive ACK-reg high address! \n");

   //set the txr reg data with reg address + 1 data MSB
   if (!Write32_Data( i2c_base, 3,AddrLow))//reg_data&0xff);
   20ca4:	e0bffb43 	ldbu	r2,-19(fp)
   20ca8:	e13ffc17 	ldw	r4,-16(fp)
   20cac:	014000c4 	movi	r5,3
   20cb0:	100d883a 	mov	r6,r2
   20cb4:	002028c0 	call	2028c <Write32_Data>
   20cb8:	1000021e 	bne	r2,zero,20cc4 <OC_I2CL_Write+0xfc>
       return FALSE;
   20cbc:	0005883a 	mov	r2,zero
   20cc0:	00003406 	br	20d94 <OC_I2CL_Write+0x1cc>

   //set WR bits(bit4)
    Write32_Data( i2c_base, 4,0x10);
   20cc4:	e13ffc17 	ldw	r4,-16(fp)
   20cc8:	01400104 	movi	r5,4
   20ccc:	01800404 	movi	r6,16
   20cd0:	002028c0 	call	2028c <Write32_Data>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20cd4:	e13ffc17 	ldw	r4,-16(fp)
   20cd8:	00206000 	call	20600 <ACK_check>
   20cdc:	1000021e 	bne	r2,zero,20ce8 <OC_I2CL_Write+0x120>
        return FALSE;
   20ce0:	0005883a 	mov	r2,zero
   20ce4:	00002b06 	br	20d94 <OC_I2CL_Write+0x1cc>
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
   20ce8:	e0800217 	ldw	r2,8(fp)
   20cec:	10bfffc4 	addi	r2,r2,-1
   20cf0:	e0bffa15 	stw	r2,-24(fp)
   20cf4:	00001b06 	br	20d64 <OC_I2CL_Write+0x19c>
        //set the txr reg data with the other data 8 bit LSB
        if (!Write32_Data( i2c_base, 3,*(pData+i)))
   20cf8:	e0bffa17 	ldw	r2,-24(fp)
   20cfc:	e0ffff17 	ldw	r3,-4(fp)
   20d00:	1885883a 	add	r2,r3,r2
   20d04:	10800003 	ldbu	r2,0(r2)
   20d08:	10803fcc 	andi	r2,r2,255
   20d0c:	e13ffc17 	ldw	r4,-16(fp)
   20d10:	014000c4 	movi	r5,3
   20d14:	100d883a 	mov	r6,r2
   20d18:	002028c0 	call	2028c <Write32_Data>
   20d1c:	1000021e 	bne	r2,zero,20d28 <OC_I2CL_Write+0x160>
            return FALSE;
   20d20:	0005883a 	mov	r2,zero
   20d24:	00001b06 	br	20d94 <OC_I2CL_Write+0x1cc>

       //set STO and WR bits(bit7 and bit4)
        if (!Write32_Data( i2c_base, 4,0x10))
   20d28:	e13ffc17 	ldw	r4,-16(fp)
   20d2c:	01400104 	movi	r5,4
   20d30:	01800404 	movi	r6,16
   20d34:	002028c0 	call	2028c <Write32_Data>
   20d38:	1000021e 	bne	r2,zero,20d44 <OC_I2CL_Write+0x17c>
            return FALSE;
   20d3c:	0005883a 	mov	r2,zero
   20d40:	00001406 	br	20d94 <OC_I2CL_Write+0x1cc>

        //wait TIP bit go to 0 to end Tx
         if(!ACK_check( i2c_base))
   20d44:	e13ffc17 	ldw	r4,-16(fp)
   20d48:	00206000 	call	20600 <ACK_check>
   20d4c:	1000021e 	bne	r2,zero,20d58 <OC_I2CL_Write+0x190>
             return FALSE;
   20d50:	0005883a 	mov	r2,zero
   20d54:	00000f06 	br	20d94 <OC_I2CL_Write+0x1cc>
    if(!ACK_check( i2c_base))
        return FALSE;
  //  printf("\n receive ACK-reg low address! \n");

#if 1
    for( i=nWriteLength-1;i>=0;i--){
   20d58:	e0bffa17 	ldw	r2,-24(fp)
   20d5c:	10bfffc4 	addi	r2,r2,-1
   20d60:	e0bffa15 	stw	r2,-24(fp)
   20d64:	e0bffa17 	ldw	r2,-24(fp)
   20d68:	103fe30e 	bge	r2,zero,20cf8 <__alt_data_end+0xfffefb88>
   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
        return FALSE;

#endif
    if (!Write32_Data( i2c_base, 4,0x40))
   20d6c:	e13ffc17 	ldw	r4,-16(fp)
   20d70:	01400104 	movi	r5,4
   20d74:	01801004 	movi	r6,64
   20d78:	002028c0 	call	2028c <Write32_Data>
   20d7c:	1000021e 	bne	r2,zero,20d88 <OC_I2CL_Write+0x1c0>
         return FALSE;
   20d80:	0005883a 	mov	r2,zero
   20d84:	00000306 	br	20d94 <OC_I2CL_Write+0x1cc>

     //OS_msleep(1);
      usleep(SLEEP_TIME);
   20d88:	010003c4 	movi	r4,15
   20d8c:	0023c880 	call	23c88 <usleep>
  //  printf("\n receive ACK-data! \n");

     return TRUE;
   20d90:	00800044 	movi	r2,1
}
   20d94:	e037883a 	mov	sp,fp
   20d98:	dfc00117 	ldw	ra,4(sp)
   20d9c:	df000017 	ldw	fp,0(sp)
   20da0:	dec00204 	addi	sp,sp,8
   20da4:	f800283a 	ret

00020da8 <OC_I2CL_Read>:

   return TRUE;

} */

bool  OC_I2CL_Read(alt_32 i2c_base,alt_u8 device_address, alt_u16 sub_address, alt_u8 *pData8, int nReadLength){
   20da8:	defff704 	addi	sp,sp,-36
   20dac:	dfc00815 	stw	ra,32(sp)
   20db0:	df000715 	stw	fp,28(sp)
   20db4:	df000704 	addi	fp,sp,28
   20db8:	e13ffc15 	stw	r4,-16(fp)
   20dbc:	2807883a 	mov	r3,r5
   20dc0:	3005883a 	mov	r2,r6
   20dc4:	e1ffff15 	stw	r7,-4(fp)
   20dc8:	e0fffd05 	stb	r3,-12(fp)
   20dcc:	e0bffe0d 	sth	r2,-8(fp)
    int i;

    alt_u8 AddrHigh, AddrLow;
    alt_u8 DataHigh, DataLow;

    AddrHigh = (sub_address >> 8) & 0xFF;
   20dd0:	e0bffe0b 	ldhu	r2,-8(fp)
   20dd4:	1004d23a 	srli	r2,r2,8
   20dd8:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = sub_address & 0xFF;
   20ddc:	e0bffe0b 	ldhu	r2,-8(fp)
   20de0:	e0bffa45 	stb	r2,-23(fp)


   //set the tx reg audio chip dev address with write bit
   if (!Write32_Data( i2c_base, 3,device_address))
   20de4:	e0bffd03 	ldbu	r2,-12(fp)
   20de8:	e13ffc17 	ldw	r4,-16(fp)
   20dec:	014000c4 	movi	r5,3
   20df0:	100d883a 	mov	r6,r2
   20df4:	002028c0 	call	2028c <Write32_Data>
   20df8:	1000021e 	bne	r2,zero,20e04 <OC_I2CL_Read+0x5c>
       return FALSE;
   20dfc:	0005883a 	mov	r2,zero
   20e00:	00007806 	br	20fe4 <OC_I2CL_Read+0x23c>
   //set STA and WR bits(bit7 and bit4)
   if (!Write32_Data( i2c_base, 4,0x90))
   20e04:	e13ffc17 	ldw	r4,-16(fp)
   20e08:	01400104 	movi	r5,4
   20e0c:	01802404 	movi	r6,144
   20e10:	002028c0 	call	2028c <Write32_Data>
   20e14:	1000021e 	bne	r2,zero,20e20 <OC_I2CL_Read+0x78>
       return FALSE;
   20e18:	0005883a 	mov	r2,zero
   20e1c:	00007106 	br	20fe4 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20e20:	e13ffc17 	ldw	r4,-16(fp)
   20e24:	00206000 	call	20600 <ACK_check>
   20e28:	1000021e 	bne	r2,zero,20e34 <OC_I2CL_Read+0x8c>
        return FALSE;
   20e2c:	0005883a 	mov	r2,zero
   20e30:	00006c06 	br	20fe4 <OC_I2CL_Read+0x23c>
 //  printf("\n receive ACK-device address! \n");


   //set the txr reg data with reg address + 0

   if (!Write32_Data( i2c_base, 3,AddrHigh))//reg_data&0xff);
   20e34:	e0bffa03 	ldbu	r2,-24(fp)
   20e38:	e13ffc17 	ldw	r4,-16(fp)
   20e3c:	014000c4 	movi	r5,3
   20e40:	100d883a 	mov	r6,r2
   20e44:	002028c0 	call	2028c <Write32_Data>
   20e48:	1000021e 	bne	r2,zero,20e54 <OC_I2CL_Read+0xac>
       return FALSE;
   20e4c:	0005883a 	mov	r2,zero
   20e50:	00006406 	br	20fe4 <OC_I2CL_Read+0x23c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20e54:	e13ffc17 	ldw	r4,-16(fp)
   20e58:	01400104 	movi	r5,4
   20e5c:	01800404 	movi	r6,16
   20e60:	002028c0 	call	2028c <Write32_Data>
   20e64:	1000021e 	bne	r2,zero,20e70 <OC_I2CL_Read+0xc8>
        return FALSE;
   20e68:	0005883a 	mov	r2,zero
   20e6c:	00005d06 	br	20fe4 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20e70:	e13ffc17 	ldw	r4,-16(fp)
   20e74:	00206000 	call	20600 <ACK_check>
   20e78:	1000021e 	bne	r2,zero,20e84 <OC_I2CL_Read+0xdc>
        return FALSE;
   20e7c:	0005883a 	mov	r2,zero
   20e80:	00005806 	br	20fe4 <OC_I2CL_Read+0x23c>
//   printf("\n read receive ACK-reg High address! \n");

     //set the txr reg data with reg address + 0
   if (!Write32_Data( i2c_base, 3,AddrLow)) //;//reg_data&0xff);
   20e84:	e0bffa43 	ldbu	r2,-23(fp)
   20e88:	e13ffc17 	ldw	r4,-16(fp)
   20e8c:	014000c4 	movi	r5,3
   20e90:	100d883a 	mov	r6,r2
   20e94:	002028c0 	call	2028c <Write32_Data>
   20e98:	1000021e 	bne	r2,zero,20ea4 <OC_I2CL_Read+0xfc>
       return FALSE;
   20e9c:	0005883a 	mov	r2,zero
   20ea0:	00005006 	br	20fe4 <OC_I2CL_Read+0x23c>

   //set WR bits(bit4)
    if (!Write32_Data( i2c_base, 4,0x10))
   20ea4:	e13ffc17 	ldw	r4,-16(fp)
   20ea8:	01400104 	movi	r5,4
   20eac:	01800404 	movi	r6,16
   20eb0:	002028c0 	call	2028c <Write32_Data>
   20eb4:	1000021e 	bne	r2,zero,20ec0 <OC_I2CL_Read+0x118>
        return FALSE;
   20eb8:	0005883a 	mov	r2,zero
   20ebc:	00004906 	br	20fe4 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20ec0:	e13ffc17 	ldw	r4,-16(fp)
   20ec4:	00206000 	call	20600 <ACK_check>
   20ec8:	1000021e 	bne	r2,zero,20ed4 <OC_I2CL_Read+0x12c>
        return FALSE;
   20ecc:	0005883a 	mov	r2,zero
   20ed0:	00004406 	br	20fe4 <OC_I2CL_Read+0x23c>

 //  printf("\n read receive ACK-reg Low address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
     if (!Write32_Data( i2c_base, 3,device_address|0x01))
   20ed4:	e0bffd03 	ldbu	r2,-12(fp)
   20ed8:	10800054 	ori	r2,r2,1
   20edc:	10803fcc 	andi	r2,r2,255
   20ee0:	e13ffc17 	ldw	r4,-16(fp)
   20ee4:	014000c4 	movi	r5,3
   20ee8:	100d883a 	mov	r6,r2
   20eec:	002028c0 	call	2028c <Write32_Data>
   20ef0:	1000021e 	bne	r2,zero,20efc <OC_I2CL_Read+0x154>
         return FALSE;
   20ef4:	0005883a 	mov	r2,zero
   20ef8:	00003a06 	br	20fe4 <OC_I2CL_Read+0x23c>

   //set STA and WR bits(bit7 and bit4)
     if (!Write32_Data( i2c_base, 4,0x90))
   20efc:	e13ffc17 	ldw	r4,-16(fp)
   20f00:	01400104 	movi	r5,4
   20f04:	01802404 	movi	r6,144
   20f08:	002028c0 	call	2028c <Write32_Data>
   20f0c:	1000021e 	bne	r2,zero,20f18 <OC_I2CL_Read+0x170>
         return FALSE;
   20f10:	0005883a 	mov	r2,zero
   20f14:	00003306 	br	20fe4 <OC_I2CL_Read+0x23c>

   //wait TIP bit go to 0 to end Tx
    if(!ACK_check( i2c_base))
   20f18:	e13ffc17 	ldw	r4,-16(fp)
   20f1c:	00206000 	call	20600 <ACK_check>
   20f20:	1000021e 	bne	r2,zero,20f2c <OC_I2CL_Read+0x184>
        return FALSE;
   20f24:	0005883a 	mov	r2,zero
   20f28:	00002e06 	br	20fe4 <OC_I2CL_Read+0x23c>
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   20f2c:	e03ff915 	stw	zero,-28(fp)
   20f30:	00001f06 	br	20fb0 <OC_I2CL_Read+0x208>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
   20f34:	e0bffc17 	ldw	r2,-16(fp)
   20f38:	10800404 	addi	r2,r2,16
   20f3c:	1009883a 	mov	r4,r2
   20f40:	e0bff917 	ldw	r2,-28(fp)
   20f44:	10c00044 	addi	r3,r2,1
   20f48:	e0800217 	ldw	r2,8(fp)
   20f4c:	1880021e 	bne	r3,r2,20f58 <OC_I2CL_Read+0x1b0>
   20f50:	00800a04 	movi	r2,40
   20f54:	00000106 	br	20f5c <OC_I2CL_Read+0x1b4>
   20f58:	00800804 	movi	r2,32
   20f5c:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
   20f60:	e13ffc17 	ldw	r4,-16(fp)
   20f64:	00208600 	call	20860 <ACK_judge_for_read>
   20f68:	1000051e 	bne	r2,zero,20f80 <OC_I2CL_Read+0x1d8>
            printf("OC_I2C_Read error[10]\r\n");
   20f6c:	010000b4 	movhi	r4,2
   20f70:	21147204 	addi	r4,r4,20936
   20f74:	00234400 	call	23440 <puts>
            return FALSE;
   20f78:	0005883a 	mov	r2,zero
   20f7c:	00001906 	br	20fe4 <OC_I2CL_Read+0x23c>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
   20f80:	e0bffc17 	ldw	r2,-16(fp)
   20f84:	10800304 	addi	r2,r2,12
   20f88:	10800037 	ldwio	r2,0(r2)
   20f8c:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
   20f90:	e0bff917 	ldw	r2,-28(fp)
   20f94:	e0ffff17 	ldw	r3,-4(fp)
   20f98:	1885883a 	add	r2,r3,r2
   20f9c:	e0fffb17 	ldw	r3,-20(fp)
   20fa0:	10c00005 	stb	r3,0(r2)
//   printf("\n read receive ACK-device address(read)! \n");

       //read the rxr data

#if 1
    for(i=0;i<nReadLength;i++){
   20fa4:	e0bff917 	ldw	r2,-28(fp)
   20fa8:	10800044 	addi	r2,r2,1
   20fac:	e0bff915 	stw	r2,-28(fp)
   20fb0:	e0fff917 	ldw	r3,-28(fp)
   20fb4:	e0800217 	ldw	r2,8(fp)
   20fb8:	18bfde16 	blt	r3,r2,20f34 <__alt_data_end+0xfffefdc4>
    DataLow =  Data32 & 0xff;

    pData16 = (DataHigh << 8) | DataLow;
#endif

   if (!Write32_Data( i2c_base, 4,0x40))
   20fbc:	e13ffc17 	ldw	r4,-16(fp)
   20fc0:	01400104 	movi	r5,4
   20fc4:	01801004 	movi	r6,64
   20fc8:	002028c0 	call	2028c <Write32_Data>
   20fcc:	1000021e 	bne	r2,zero,20fd8 <OC_I2CL_Read+0x230>
       return FALSE;
   20fd0:	0005883a 	mov	r2,zero
   20fd4:	00000306 	br	20fe4 <OC_I2CL_Read+0x23c>

   //OS_msleep(1);
    usleep(SLEEP_TIME);
   20fd8:	010003c4 	movi	r4,15
   20fdc:	0023c880 	call	23c88 <usleep>

   return TRUE;
   20fe0:	00800044 	movi	r2,1

}
   20fe4:	e037883a 	mov	sp,fp
   20fe8:	dfc00117 	ldw	ra,4(sp)
   20fec:	df000017 	ldw	fp,0(sp)
   20ff0:	dec00204 	addi	sp,sp,8
   20ff4:	f800283a 	ret

00020ff8 <SWAP16>:
#include "camera_config.h"




alt_u16 SWAP16(alt_u16 x){
   20ff8:	defffd04 	addi	sp,sp,-12
   20ffc:	df000215 	stw	fp,8(sp)
   21000:	df000204 	addi	fp,sp,8
   21004:	2005883a 	mov	r2,r4
   21008:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 y;
	//y =  (((x) >> 8) & 0xff) | (((x) & 0xff) << 8);
	y = (x >> 8) & 0x00ff;
   2100c:	e0bfff0b 	ldhu	r2,-4(fp)
   21010:	1004d23a 	srli	r2,r2,8
   21014:	e0bffe0d 	sth	r2,-8(fp)
	y |= (x << 8) & 0xff00;
   21018:	e0bfff0b 	ldhu	r2,-4(fp)
   2101c:	1004923a 	slli	r2,r2,8
   21020:	1007883a 	mov	r3,r2
   21024:	e0bffe0b 	ldhu	r2,-8(fp)
   21028:	1884b03a 	or	r2,r3,r2
   2102c:	e0bffe0d 	sth	r2,-8(fp)
	return y;
   21030:	e0bffe0b 	ldhu	r2,-8(fp)
}
   21034:	e037883a 	mov	sp,fp
   21038:	df000017 	ldw	fp,0(sp)
   2103c:	dec00104 	addi	sp,sp,4
   21040:	f800283a 	ret

00021044 <AR0833_write_cmos_sensor>:


#define Sleep(x)	usleep(x*1000)
#define AR0833DB(x) printf(x)

void AR0833_write_cmos_sensor(alt_u16 Addr, alt_u16 Value){
   21044:	defffa04 	addi	sp,sp,-24
   21048:	dfc00515 	stw	ra,20(sp)
   2104c:	df000415 	stw	fp,16(sp)
   21050:	df000404 	addi	fp,sp,16
   21054:	2007883a 	mov	r3,r4
   21058:	2805883a 	mov	r2,r5
   2105c:	e0fffe0d 	sth	r3,-8(fp)
   21060:	e0bfff0d 	sth	r2,-4(fp)
	const alt_u8 device_address = MIPI_I2C_ADDR;
   21064:	00801b04 	movi	r2,108
   21068:	e0bffd05 	stb	r2,-12(fp)
	//OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, device_address, SWAP16(Addr), (alt_u8 *)&Value, sizeof(Value));
	OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, device_address, Addr, (alt_u8 *)&Value, sizeof(Value));
   2106c:	e17ffd03 	ldbu	r5,-12(fp)
   21070:	e1bffe0b 	ldhu	r6,-8(fp)
   21074:	e0ffff04 	addi	r3,fp,-4
   21078:	00800084 	movi	r2,2
   2107c:	d8800015 	stw	r2,0(sp)
   21080:	01000134 	movhi	r4,4
   21084:	21041004 	addi	r4,r4,4160
   21088:	180f883a 	mov	r7,r3
   2108c:	0020bc80 	call	20bc8 <OC_I2CL_Write>

}
   21090:	e037883a 	mov	sp,fp
   21094:	dfc00117 	ldw	ra,4(sp)
   21098:	df000017 	ldw	fp,0(sp)
   2109c:	dec00204 	addi	sp,sp,8
   210a0:	f800283a 	ret

000210a4 <AR0833_write_cmos_sensor_8>:

void AR0833_write_cmos_sensor_8(alt_u16 Addr, alt_u8 Value){
   210a4:	defffa04 	addi	sp,sp,-24
   210a8:	dfc00515 	stw	ra,20(sp)
   210ac:	df000415 	stw	fp,16(sp)
   210b0:	df000404 	addi	fp,sp,16
   210b4:	2007883a 	mov	r3,r4
   210b8:	2805883a 	mov	r2,r5
   210bc:	e0fffe0d 	sth	r3,-8(fp)
   210c0:	e0bfff05 	stb	r2,-4(fp)
	const alt_u8 device_address = MIPI_I2C_ADDR;
   210c4:	00801b04 	movi	r2,108
   210c8:	e0bffd05 	stb	r2,-12(fp)
	//OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, device_address, SWAP16(Addr), (alt_u8 *)&Value, sizeof(Value));
	OC_I2CL_Write(I2C_OPENCORES_MIPI_BASE, device_address, Addr, (alt_u8 *)&Value, sizeof(Value));
   210cc:	e17ffd03 	ldbu	r5,-12(fp)
   210d0:	e1bffe0b 	ldhu	r6,-8(fp)
   210d4:	e0ffff04 	addi	r3,fp,-4
   210d8:	00800044 	movi	r2,1
   210dc:	d8800015 	stw	r2,0(sp)
   210e0:	01000134 	movhi	r4,4
   210e4:	21041004 	addi	r4,r4,4160
   210e8:	180f883a 	mov	r7,r3
   210ec:	0020bc80 	call	20bc8 <OC_I2CL_Write>

}
   210f0:	e037883a 	mov	sp,fp
   210f4:	dfc00117 	ldw	ra,4(sp)
   210f8:	df000017 	ldw	fp,0(sp)
   210fc:	dec00204 	addi	sp,sp,8
   21100:	f800283a 	ret

00021104 <BYD_CONFIG_1024x768_RAW8>:




void BYD_CONFIG_1024x768_RAW8(bool bScale, bool bTestMode)
{
   21104:	defffc04 	addi	sp,sp,-16
   21108:	dfc00315 	stw	ra,12(sp)
   2110c:	df000215 	stw	fp,8(sp)
   21110:	df000204 	addi	fp,sp,8
   21114:	e13ffe15 	stw	r4,-8(fp)
   21118:	e17fff15 	stw	r5,-4(fp)
//    AR0833DB("BYD_CONFIG, Scale=%s, TestMode=%s\r\n", bScale?"yes":"no", bTestMode?"yes":"no");
	printf("=====================================\r\n");
   2111c:	010000b4 	movhi	r4,2
   21120:	21147804 	addi	r4,r4,20960
   21124:	00234400 	call	23440 <puts>
    printf("BYD_CONFIG, Scale=%s, TestMode=%s\r\n", bScale?"yes":"no", bTestMode?"yes":"no");
   21128:	e0bffe17 	ldw	r2,-8(fp)
   2112c:	10000326 	beq	r2,zero,2113c <BYD_CONFIG_1024x768_RAW8+0x38>
   21130:	00c000b4 	movhi	r3,2
   21134:	18d48204 	addi	r3,r3,21000
   21138:	00000206 	br	21144 <BYD_CONFIG_1024x768_RAW8+0x40>
   2113c:	00c000b4 	movhi	r3,2
   21140:	18d48304 	addi	r3,r3,21004
   21144:	e0bfff17 	ldw	r2,-4(fp)
   21148:	10000326 	beq	r2,zero,21158 <BYD_CONFIG_1024x768_RAW8+0x54>
   2114c:	008000b4 	movhi	r2,2
   21150:	10948204 	addi	r2,r2,21000
   21154:	00000206 	br	21160 <BYD_CONFIG_1024x768_RAW8+0x5c>
   21158:	008000b4 	movhi	r2,2
   2115c:	10948304 	addi	r2,r2,21004
   21160:	010000b4 	movhi	r4,2
   21164:	21148404 	addi	r4,r4,21008
   21168:	180b883a 	mov	r5,r3
   2116c:	100d883a 	mov	r6,r2
   21170:	00233740 	call	23374 <printf>
	printf("=====================================\r\n");
   21174:	010000b4 	movhi	r4,2
   21178:	21147804 	addi	r4,r4,20960
   2117c:	00234400 	call	23440 <puts>

    AR0833_write_cmos_sensor(0x301A, 0x0019); 	// RESET_REGISTER
   21180:	010c0684 	movi	r4,12314
   21184:	01400644 	movi	r5,25
   21188:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    Sleep(100);
   2118c:	010000b4 	movhi	r4,2
   21190:	2121a804 	addi	r4,r4,-31072
   21194:	0023c880 	call	23c88 <usleep>
    AR0833_write_cmos_sensor(0x301A, 0x0218); 	// RESET_REGISTER
   21198:	010c0684 	movi	r4,12314
   2119c:	01408604 	movi	r5,536
   211a0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3042, 0x0000); 	// DARK_CONTROL2
   211a4:	010c1084 	movi	r4,12354
   211a8:	000b883a 	mov	r5,zero
   211ac:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30C0, 0x1810); 	// CALIB_CONTROL
   211b0:	010c3004 	movi	r4,12480
   211b4:	01460404 	movi	r5,6160
   211b8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30C8, 0x0018); 	// CALIB_DAC
   211bc:	010c3204 	movi	r4,12488
   211c0:	01400604 	movi	r5,24
   211c4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30D2, 0x0000); 	// CRM_CONTROL
   211c8:	010c3484 	movi	r4,12498
   211cc:	000b883a 	mov	r5,zero
   211d0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30D4, 0xD030); 	// COLUMN_CORRECTION
   211d4:	010c3504 	movi	r4,12500
   211d8:	01740c14 	movui	r5,53296
   211dc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30D6, 0x2200); 	// COLUMN_CORRECTION2
   211e0:	010c3584 	movi	r4,12502
   211e4:	01488004 	movi	r5,8704
   211e8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30DA, 0x0080); 	// COLUMN_CORRECTION_CLIP2
   211ec:	010c3684 	movi	r4,12506
   211f0:	01402004 	movi	r5,128
   211f4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30DC, 0x0080); 	// COLUMN_CORRECTION_CLIP3
   211f8:	010c3704 	movi	r4,12508
   211fc:	01402004 	movi	r5,128
   21200:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x30EE, 0x0340); 	// DARK_CONTROL3
   21204:	010c3b84 	movi	r4,12526
   21208:	0140d004 	movi	r5,832
   2120c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x316A, 0x8800); 	// DAC_RSTLO
   21210:	010c5a84 	movi	r4,12650
   21214:	01620014 	movui	r5,34816
   21218:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x316C, 0x8200); 	// DAC_TXLO
   2121c:	010c5b04 	movi	r4,12652
   21220:	01608014 	movui	r5,33280
   21224:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3172, 0x0286); 	// ANALOG_CONTROL2
   21228:	010c5c84 	movi	r4,12658
   2122c:	0140a184 	movi	r5,646
   21230:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3174, 0x8000); 	// ANALOG_CONTROL3
   21234:	010c5d04 	movi	r4,12660
   21238:	01600014 	movui	r5,32768
   2123c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x317C, 0xE103); 	// ANALOG_CONTROL7
   21240:	010c5f04 	movi	r4,12668
   21244:	017840d4 	movui	r5,57603
   21248:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3180, 0xF0FF); 	// FINEDIGCORR_CONTROL
   2124c:	010c6004 	movi	r4,12672
   21250:	017c3fd4 	movui	r5,61695
   21254:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31E0, 0x0741); 	// PIX_DEF_ID
   21258:	010c7804 	movi	r4,12768
   2125c:	0141d044 	movi	r5,1857
   21260:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3ECC, 0x0056); 	// DAC_LD_0_1
   21264:	010fb304 	movi	r4,16076
   21268:	01401584 	movi	r5,86
   2126c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3ED0, 0xA8AA); 	// DAC_LD_4_5
   21270:	010fb404 	movi	r4,16080
   21274:	016a2a94 	movui	r5,43178
   21278:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3ED2, 0xAAA8); 	// DAC_LD_6_7
   2127c:	010fb484 	movi	r4,16082
   21280:	016aaa14 	movui	r5,43688
   21284:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3ED4, 0x8ACC); 	// DAC_LD_8_9
   21288:	010fb504 	movi	r4,16084
   2128c:	0162b314 	movui	r5,35532
   21290:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3ED8, 0x7288); 	// DAC_LD_12_13
   21294:	010fb604 	movi	r4,16088
   21298:	015ca204 	movi	r5,29320
   2129c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDA, 0x77CA); 	// DAC_LD_14_15
   212a0:	010fb684 	movi	r4,16090
   212a4:	015df284 	movi	r5,30666
   212a8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDE, 0x6664); 	// DAC_LD_18_19
   212ac:	010fb784 	movi	r4,16094
   212b0:	01599904 	movi	r5,26212
   212b4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE0, 0x26D5); 	// DAC_LD_20_21
   212b8:	010fb804 	movi	r4,16096
   212bc:	0149b544 	movi	r5,9941
   212c0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE4, 0x1548); 	// DAC_LD_24_25
   212c4:	010fb904 	movi	r4,16100
   212c8:	01455204 	movi	r5,5448
   212cc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE6, 0xB10C); 	// DAC_LD_26_27
   212d0:	010fb984 	movi	r4,16102
   212d4:	016c4314 	movui	r5,45324
   212d8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE8, 0x6E79); 	// DAC_LD_28_29
   212dc:	010fba04 	movi	r4,16104
   212e0:	015b9e44 	movi	r5,28281
   212e4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EFE, 0x77CC); 	// DAC_LD_TXLO
   212e8:	010fbf84 	movi	r4,16126
   212ec:	015df304 	movi	r5,30668
   212f0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31E6, 0x0000); 	// PIX_DEF_ID_2
   212f4:	010c7984 	movi	r4,12774
   212f8:	000b883a 	mov	r5,zero
   212fc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F00, 0x0028); 	// BM_T0
   21300:	010fc004 	movi	r4,16128
   21304:	01400a04 	movi	r5,40
   21308:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F02, 0x0140); 	// BM_T1
   2130c:	010fc084 	movi	r4,16130
   21310:	01405004 	movi	r5,320
   21314:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F04, 0x0002); 	// NOISE_GAIN_THRESHOLD0
   21318:	010fc104 	movi	r4,16132
   2131c:	01400084 	movi	r5,2
   21320:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F06, 0x0004); 	// NOISE_GAIN_THRESHOLD1
   21324:	010fc184 	movi	r4,16134
   21328:	01400104 	movi	r5,4
   2132c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F08, 0x0008); 	// NOISE_GAIN_THRESHOLD2
   21330:	010fc204 	movi	r4,16136
   21334:	01400204 	movi	r5,8
   21338:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F0A, 0x0B09); 	// NOISE_FLOOR10
   2133c:	010fc284 	movi	r4,16138
   21340:	0142c244 	movi	r5,2825
   21344:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F0C, 0x0302); 	// NOISE_FLOOR32
   21348:	010fc304 	movi	r4,16140
   2134c:	0140c084 	movi	r5,770
   21350:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F10, 0x0505); 	// SINGLE_K_FACTOR0
   21354:	010fc404 	movi	r4,16144
   21358:	01414144 	movi	r5,1285
   2135c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F12, 0x0303); 	// SINGLE_K_FACTOR1
   21360:	010fc484 	movi	r4,16146
   21364:	0140c0c4 	movi	r5,771
   21368:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F14, 0x0101); 	// SINGLE_K_FACTOR2
   2136c:	010fc504 	movi	r4,16148
   21370:	01404044 	movi	r5,257
   21374:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F16, 0x2020); 	// CROSSFACTOR0
   21378:	010fc584 	movi	r4,16150
   2137c:	01480804 	movi	r5,8224
   21380:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F18, 0x0404); 	// CROSSFACTOR1
   21384:	010fc604 	movi	r4,16152
   21388:	01410104 	movi	r5,1028
   2138c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F1A, 0x7070); 	// CROSSFACTOR2
   21390:	010fc684 	movi	r4,16154
   21394:	015c1c04 	movi	r5,28784
   21398:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F1C, 0x003A); 	// SINGLE_MAXFACTOR
   2139c:	010fc704 	movi	r4,16156
   213a0:	01400e84 	movi	r5,58
   213a4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F1E, 0x003C); 	// NOISE_COEF
   213a8:	010fc784 	movi	r4,16158
   213ac:	01400f04 	movi	r5,60
   213b0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F2C, 0x2210); 	// GTH_THRES_RTN
   213b4:	010fcb04 	movi	r4,16172
   213b8:	01488404 	movi	r5,8720
   213bc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F40, 0x2020); 	// COUPLE_K_FACTOR0
   213c0:	010fd004 	movi	r4,16192
   213c4:	01480804 	movi	r5,8224
   213c8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F42, 0x0808); 	// COUPLE_K_FACTOR1
   213cc:	010fd084 	movi	r4,16194
   213d0:	01420204 	movi	r5,2056
   213d4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3F44, 0x0101); 	// COUPLE_K_FACTOR2
   213d8:	010fd104 	movi	r4,16196
   213dc:	01404044 	movi	r5,257
   213e0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    Sleep(100);
   213e4:	010000b4 	movhi	r4,2
   213e8:	2121a804 	addi	r4,r4,-31072
   213ec:	0023c880 	call	23c88 <usleep>

    AR0833_write_cmos_sensor_8(0x3D00, 0x04);
   213f0:	010f4004 	movi	r4,15616
   213f4:	01400104 	movi	r5,4
   213f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D01, 0x70);
   213fc:	010f4044 	movi	r4,15617
   21400:	01401c04 	movi	r5,112
   21404:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D02, 0xC8);
   21408:	010f4084 	movi	r4,15618
   2140c:	01403204 	movi	r5,200
   21410:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D03, 0xFF);
   21414:	010f40c4 	movi	r4,15619
   21418:	01403fc4 	movi	r5,255
   2141c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D04, 0xFF);
   21420:	010f4104 	movi	r4,15620
   21424:	01403fc4 	movi	r5,255
   21428:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D05, 0xFF);
   2142c:	010f4144 	movi	r4,15621
   21430:	01403fc4 	movi	r5,255
   21434:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D06, 0xFF);
   21438:	010f4184 	movi	r4,15622
   2143c:	01403fc4 	movi	r5,255
   21440:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D07, 0xFF);
   21444:	010f41c4 	movi	r4,15623
   21448:	01403fc4 	movi	r5,255
   2144c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D08, 0x6F);
   21450:	010f4204 	movi	r4,15624
   21454:	01401bc4 	movi	r5,111
   21458:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D09, 0x40);
   2145c:	010f4244 	movi	r4,15625
   21460:	01401004 	movi	r5,64
   21464:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0A, 0x14);
   21468:	010f4284 	movi	r4,15626
   2146c:	01400504 	movi	r5,20
   21470:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0B, 0x0E);
   21474:	010f42c4 	movi	r4,15627
   21478:	01400384 	movi	r5,14
   2147c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0C, 0x23);
   21480:	010f4304 	movi	r4,15628
   21484:	014008c4 	movi	r5,35
   21488:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0D, 0x82);
   2148c:	010f4344 	movi	r4,15629
   21490:	01402084 	movi	r5,130
   21494:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0E, 0x41);
   21498:	010f4384 	movi	r4,15630
   2149c:	01401044 	movi	r5,65
   214a0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D0F, 0x5C);
   214a4:	010f43c4 	movi	r4,15631
   214a8:	01401704 	movi	r5,92
   214ac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D10, 0x54);
   214b0:	010f4404 	movi	r4,15632
   214b4:	01401504 	movi	r5,84
   214b8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D11, 0x6E);
   214bc:	010f4444 	movi	r4,15633
   214c0:	01401b84 	movi	r5,110
   214c4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D12, 0x42);
   214c8:	010f4484 	movi	r4,15634
   214cc:	01401084 	movi	r5,66
   214d0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D13, 0x00);
   214d4:	010f44c4 	movi	r4,15635
   214d8:	000b883a 	mov	r5,zero
   214dc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D14, 0xC0);
   214e0:	010f4504 	movi	r4,15636
   214e4:	01403004 	movi	r5,192
   214e8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D15, 0x5D);
   214ec:	010f4544 	movi	r4,15637
   214f0:	01401744 	movi	r5,93
   214f4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D16, 0x80);
   214f8:	010f4584 	movi	r4,15638
   214fc:	01402004 	movi	r5,128
   21500:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D17, 0x5A);
   21504:	010f45c4 	movi	r4,15639
   21508:	01401684 	movi	r5,90
   2150c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D18, 0x80);
   21510:	010f4604 	movi	r4,15640
   21514:	01402004 	movi	r5,128
   21518:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D19, 0x57);
   2151c:	010f4644 	movi	r4,15641
   21520:	014015c4 	movi	r5,87
   21524:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1A, 0x84);
   21528:	010f4684 	movi	r4,15642
   2152c:	01402104 	movi	r5,132
   21530:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1B, 0x64);
   21534:	010f46c4 	movi	r4,15643
   21538:	01401904 	movi	r5,100
   2153c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1C, 0x80);
   21540:	010f4704 	movi	r4,15644
   21544:	01402004 	movi	r5,128
   21548:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1D, 0x55);
   2154c:	010f4744 	movi	r4,15645
   21550:	01401544 	movi	r5,85
   21554:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1E, 0x86);
   21558:	010f4784 	movi	r4,15646
   2155c:	01402184 	movi	r5,134
   21560:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D1F, 0x64);
   21564:	010f47c4 	movi	r4,15647
   21568:	01401904 	movi	r5,100
   2156c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D20, 0x80);
   21570:	010f4804 	movi	r4,15648
   21574:	01402004 	movi	r5,128
   21578:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D21, 0x65);
   2157c:	010f4844 	movi	r4,15649
   21580:	01401944 	movi	r5,101
   21584:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D22, 0x88);
   21588:	010f4884 	movi	r4,15650
   2158c:	01402204 	movi	r5,136
   21590:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D23, 0x65);
   21594:	010f48c4 	movi	r4,15651
   21598:	01401944 	movi	r5,101
   2159c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D24, 0x84);
   215a0:	010f4904 	movi	r4,15652
   215a4:	01402104 	movi	r5,132
   215a8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D25, 0x58);
   215ac:	010f4944 	movi	r4,15653
   215b0:	01401604 	movi	r5,88
   215b4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D26, 0x80);
   215b8:	010f4984 	movi	r4,15654
   215bc:	01402004 	movi	r5,128
   215c0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D27, 0x00);
   215c4:	010f49c4 	movi	r4,15655
   215c8:	000b883a 	mov	r5,zero
   215cc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D28, 0xC0);
   215d0:	010f4a04 	movi	r4,15656
   215d4:	01403004 	movi	r5,192
   215d8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D29, 0x80);
   215dc:	010f4a44 	movi	r4,15657
   215e0:	01402004 	movi	r5,128
   215e4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2A, 0x30);
   215e8:	010f4a84 	movi	r4,15658
   215ec:	01400c04 	movi	r5,48
   215f0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2B, 0x0C);
   215f4:	010f4ac4 	movi	r4,15659
   215f8:	01400304 	movi	r5,12
   215fc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2C, 0x84);
   21600:	010f4b04 	movi	r4,15660
   21604:	01402104 	movi	r5,132
   21608:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2D, 0x42);
   2160c:	010f4b44 	movi	r4,15661
   21610:	01401084 	movi	r5,66
   21614:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2E, 0x82);
   21618:	010f4b84 	movi	r4,15662
   2161c:	01402084 	movi	r5,130
   21620:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D2F, 0x10);
   21624:	010f4bc4 	movi	r4,15663
   21628:	01400404 	movi	r5,16
   2162c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D30, 0x30);
   21630:	010f4c04 	movi	r4,15664
   21634:	01400c04 	movi	r5,48
   21638:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D31, 0xA6);
   2163c:	010f4c44 	movi	r4,15665
   21640:	01402984 	movi	r5,166
   21644:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D32, 0x5B);
   21648:	010f4c84 	movi	r4,15666
   2164c:	014016c4 	movi	r5,91
   21650:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D33, 0x80);
   21654:	010f4cc4 	movi	r4,15667
   21658:	01402004 	movi	r5,128
   2165c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D34, 0x63);
   21660:	010f4d04 	movi	r4,15668
   21664:	014018c4 	movi	r5,99
   21668:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D35, 0x8B);
   2166c:	010f4d44 	movi	r4,15669
   21670:	014022c4 	movi	r5,139
   21674:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D36, 0x30);
   21678:	010f4d84 	movi	r4,15670
   2167c:	01400c04 	movi	r5,48
   21680:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D37, 0x0C);
   21684:	010f4dc4 	movi	r4,15671
   21688:	01400304 	movi	r5,12
   2168c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D38, 0xA5);
   21690:	010f4e04 	movi	r4,15672
   21694:	01402944 	movi	r5,165
   21698:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D39, 0x59);
   2169c:	010f4e44 	movi	r4,15673
   216a0:	01401644 	movi	r5,89
   216a4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3A, 0x84);
   216a8:	010f4e84 	movi	r4,15674
   216ac:	01402104 	movi	r5,132
   216b0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3B, 0x6C);
   216b4:	010f4ec4 	movi	r4,15675
   216b8:	01401b04 	movi	r5,108
   216bc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3C, 0x80);
   216c0:	010f4f04 	movi	r4,15676
   216c4:	01402004 	movi	r5,128
   216c8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3D, 0x6D);
   216cc:	010f4f44 	movi	r4,15677
   216d0:	01401b44 	movi	r5,109
   216d4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3E, 0x81);
   216d8:	010f4f84 	movi	r4,15678
   216dc:	01402044 	movi	r5,129
   216e0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D3F, 0x5F);
   216e4:	010f4fc4 	movi	r4,15679
   216e8:	014017c4 	movi	r5,95
   216ec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D40, 0x60);
   216f0:	010f5004 	movi	r4,15680
   216f4:	01401804 	movi	r5,96
   216f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D41, 0x61);
   216fc:	010f5044 	movi	r4,15681
   21700:	01401844 	movi	r5,97
   21704:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D42, 0x10);
   21708:	010f5084 	movi	r4,15682
   2170c:	01400404 	movi	r5,16
   21710:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D43, 0x30);
   21714:	010f50c4 	movi	r4,15683
   21718:	01400c04 	movi	r5,48
   2171c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D44, 0x88);
   21720:	010f5104 	movi	r4,15684
   21724:	01402204 	movi	r5,136
   21728:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D45, 0x66);
   2172c:	010f5144 	movi	r4,15685
   21730:	01401984 	movi	r5,102
   21734:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D46, 0x83);
   21738:	010f5184 	movi	r4,15686
   2173c:	014020c4 	movi	r5,131
   21740:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D47, 0x6E);
   21744:	010f51c4 	movi	r4,15687
   21748:	01401b84 	movi	r5,110
   2174c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D48, 0x80);
   21750:	010f5204 	movi	r4,15688
   21754:	01402004 	movi	r5,128
   21758:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D49, 0x64);
   2175c:	010f5244 	movi	r4,15689
   21760:	01401904 	movi	r5,100
   21764:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4A, 0x87);
   21768:	010f5284 	movi	r4,15690
   2176c:	014021c4 	movi	r5,135
   21770:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4B, 0x64);
   21774:	010f52c4 	movi	r4,15691
   21778:	01401904 	movi	r5,100
   2177c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4C, 0x30);
   21780:	010f5304 	movi	r4,15692
   21784:	01400c04 	movi	r5,48
   21788:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4D, 0x50);
   2178c:	010f5344 	movi	r4,15693
   21790:	01401404 	movi	r5,80
   21794:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4E, 0xDA);
   21798:	010f5384 	movi	r4,15694
   2179c:	01403684 	movi	r5,218
   217a0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D4F, 0x6A);
   217a4:	010f53c4 	movi	r4,15695
   217a8:	01401a84 	movi	r5,106
   217ac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D50, 0x83);
   217b0:	010f5404 	movi	r4,15696
   217b4:	014020c4 	movi	r5,131
   217b8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D51, 0x6B);
   217bc:	010f5444 	movi	r4,15697
   217c0:	01401ac4 	movi	r5,107
   217c4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D52, 0xA6);
   217c8:	010f5484 	movi	r4,15698
   217cc:	01402984 	movi	r5,166
   217d0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D53, 0x30);
   217d4:	010f54c4 	movi	r4,15699
   217d8:	01400c04 	movi	r5,48
   217dc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D54, 0x94);
   217e0:	010f5504 	movi	r4,15700
   217e4:	01402504 	movi	r5,148
   217e8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D55, 0x67);
   217ec:	010f5544 	movi	r4,15701
   217f0:	014019c4 	movi	r5,103
   217f4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D56, 0x84);
   217f8:	010f5584 	movi	r4,15702
   217fc:	01402104 	movi	r5,132
   21800:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D57, 0x65);
   21804:	010f55c4 	movi	r4,15703
   21808:	01401944 	movi	r5,101
   2180c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D58, 0x82);
   21810:	010f5604 	movi	r4,15704
   21814:	01402084 	movi	r5,130
   21818:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D59, 0x4D);
   2181c:	010f5644 	movi	r4,15705
   21820:	01401344 	movi	r5,77
   21824:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5A, 0x83);
   21828:	010f5684 	movi	r4,15706
   2182c:	014020c4 	movi	r5,131
   21830:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5B, 0x65);
   21834:	010f56c4 	movi	r4,15707
   21838:	01401944 	movi	r5,101
   2183c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5C, 0x30);
   21840:	010f5704 	movi	r4,15708
   21844:	01400c04 	movi	r5,48
   21848:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5D, 0x50);
   2184c:	010f5744 	movi	r4,15709
   21850:	01401404 	movi	r5,80
   21854:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5E, 0xA6);
   21858:	010f5784 	movi	r4,15710
   2185c:	01402984 	movi	r5,166
   21860:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D5F, 0x58);
   21864:	010f57c4 	movi	r4,15711
   21868:	01401604 	movi	r5,88
   2186c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D60, 0x43);
   21870:	010f5804 	movi	r4,15712
   21874:	014010c4 	movi	r5,67
   21878:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D61, 0x06);
   2187c:	010f5844 	movi	r4,15713
   21880:	01400184 	movi	r5,6
   21884:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D62, 0x00);
   21888:	010f5884 	movi	r4,15714
   2188c:	000b883a 	mov	r5,zero
   21890:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D63, 0x8D);
   21894:	010f58c4 	movi	r4,15715
   21898:	01402344 	movi	r5,141
   2189c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D64, 0x45);
   218a0:	010f5904 	movi	r4,15716
   218a4:	01401144 	movi	r5,69
   218a8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D65, 0xA0);
   218ac:	010f5944 	movi	r4,15717
   218b0:	01402804 	movi	r5,160
   218b4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D66, 0x45);
   218b8:	010f5984 	movi	r4,15718
   218bc:	01401144 	movi	r5,69
   218c0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D67, 0x6A);
   218c4:	010f59c4 	movi	r4,15719
   218c8:	01401a84 	movi	r5,106
   218cc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D68, 0x83);
   218d0:	010f5a04 	movi	r4,15720
   218d4:	014020c4 	movi	r5,131
   218d8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D69, 0x6B);
   218dc:	010f5a44 	movi	r4,15721
   218e0:	01401ac4 	movi	r5,107
   218e4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6A, 0x06);
   218e8:	010f5a84 	movi	r4,15722
   218ec:	01400184 	movi	r5,6
   218f0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6B, 0x00);
   218f4:	010f5ac4 	movi	r4,15723
   218f8:	000b883a 	mov	r5,zero
   218fc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6C, 0x81);
   21900:	010f5b04 	movi	r4,15724
   21904:	01402044 	movi	r5,129
   21908:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6D, 0x43);
   2190c:	010f5b44 	movi	r4,15725
   21910:	014010c4 	movi	r5,67
   21914:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6E, 0x9C);
   21918:	010f5b84 	movi	r4,15726
   2191c:	01402704 	movi	r5,156
   21920:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D6F, 0x58);
   21924:	010f5bc4 	movi	r4,15727
   21928:	01401604 	movi	r5,88
   2192c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D70, 0x84);
   21930:	010f5c04 	movi	r4,15728
   21934:	01402104 	movi	r5,132
   21938:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D71, 0x30);
   2193c:	010f5c44 	movi	r4,15729
   21940:	01400c04 	movi	r5,48
   21944:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D72, 0x90);
   21948:	010f5c84 	movi	r4,15730
   2194c:	01402404 	movi	r5,144
   21950:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D73, 0x67);
   21954:	010f5cc4 	movi	r4,15731
   21958:	014019c4 	movi	r5,103
   2195c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D74, 0x64);
   21960:	010f5d04 	movi	r4,15732
   21964:	01401904 	movi	r5,100
   21968:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D75, 0x88);
   2196c:	010f5d44 	movi	r4,15733
   21970:	01402204 	movi	r5,136
   21974:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D76, 0x64);
   21978:	010f5d84 	movi	r4,15734
   2197c:	01401904 	movi	r5,100
   21980:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D77, 0x80);
   21984:	010f5dc4 	movi	r4,15735
   21988:	01402004 	movi	r5,128
   2198c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D78, 0x65);
   21990:	010f5e04 	movi	r4,15736
   21994:	01401944 	movi	r5,101
   21998:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D79, 0x88);
   2199c:	010f5e44 	movi	r4,15737
   219a0:	01402204 	movi	r5,136
   219a4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7A, 0x65);
   219a8:	010f5e84 	movi	r4,15738
   219ac:	01401944 	movi	r5,101
   219b0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7B, 0x82);
   219b4:	010f5ec4 	movi	r4,15739
   219b8:	01402084 	movi	r5,130
   219bc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7C, 0x10);
   219c0:	010f5f04 	movi	r4,15740
   219c4:	01400404 	movi	r5,16
   219c8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7D, 0xC0);
   219cc:	010f5f44 	movi	r4,15741
   219d0:	01403004 	movi	r5,192
   219d4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7E, 0xEB);
   219d8:	010f5f84 	movi	r4,15742
   219dc:	01403ac4 	movi	r5,235
   219e0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D7F, 0x10);
   219e4:	010f5fc4 	movi	r4,15743
   219e8:	01400404 	movi	r5,16
   219ec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D80, 0xC0);
   219f0:	010f6004 	movi	r4,15744
   219f4:	01403004 	movi	r5,192
   219f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D81, 0x66);
   219fc:	010f6044 	movi	r4,15745
   21a00:	01401984 	movi	r5,102
   21a04:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D82, 0x85);
   21a08:	010f6084 	movi	r4,15746
   21a0c:	01402144 	movi	r5,133
   21a10:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D83, 0x64);
   21a14:	010f60c4 	movi	r4,15747
   21a18:	01401904 	movi	r5,100
   21a1c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D84, 0x81);
   21a20:	010f6104 	movi	r4,15748
   21a24:	01402044 	movi	r5,129
   21a28:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D85, 0x17);
   21a2c:	010f6144 	movi	r4,15749
   21a30:	014005c4 	movi	r5,23
   21a34:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D86, 0x00);
   21a38:	010f6184 	movi	r4,15750
   21a3c:	000b883a 	mov	r5,zero
   21a40:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D87, 0x80);
   21a44:	010f61c4 	movi	r4,15751
   21a48:	01402004 	movi	r5,128
   21a4c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D88, 0x20);
   21a50:	010f6204 	movi	r4,15752
   21a54:	01400804 	movi	r5,32
   21a58:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D89, 0x0D);
   21a5c:	010f6244 	movi	r4,15753
   21a60:	01400344 	movi	r5,13
   21a64:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8A, 0x80);
   21a68:	010f6284 	movi	r4,15754
   21a6c:	01402004 	movi	r5,128
   21a70:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8B, 0x18);
   21a74:	010f62c4 	movi	r4,15755
   21a78:	01400604 	movi	r5,24
   21a7c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8C, 0x0C);
   21a80:	010f6304 	movi	r4,15756
   21a84:	01400304 	movi	r5,12
   21a88:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8D, 0x80);
   21a8c:	010f6344 	movi	r4,15757
   21a90:	01402004 	movi	r5,128
   21a94:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8E, 0x64);
   21a98:	010f6384 	movi	r4,15758
   21a9c:	01401904 	movi	r5,100
   21aa0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D8F, 0x30);
   21aa4:	010f63c4 	movi	r4,15759
   21aa8:	01400c04 	movi	r5,48
   21aac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D90, 0x60);
   21ab0:	010f6404 	movi	r4,15760
   21ab4:	01401804 	movi	r5,96
   21ab8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D91, 0x41);
   21abc:	010f6444 	movi	r4,15761
   21ac0:	01401044 	movi	r5,65
   21ac4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D92, 0x82);
   21ac8:	010f6484 	movi	r4,15762
   21acc:	01402084 	movi	r5,130
   21ad0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D93, 0x42);
   21ad4:	010f64c4 	movi	r4,15763
   21ad8:	01401084 	movi	r5,66
   21adc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D94, 0xB2);
   21ae0:	010f6504 	movi	r4,15764
   21ae4:	01402c84 	movi	r5,178
   21ae8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D95, 0x42);
   21aec:	010f6544 	movi	r4,15765
   21af0:	01401084 	movi	r5,66
   21af4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D96, 0x80);
   21af8:	010f6584 	movi	r4,15766
   21afc:	01402004 	movi	r5,128
   21b00:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D97, 0x40);
   21b04:	010f65c4 	movi	r4,15767
   21b08:	01401004 	movi	r5,64
   21b0c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D98, 0x81);
   21b10:	010f6604 	movi	r4,15768
   21b14:	01402044 	movi	r5,129
   21b18:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D99, 0x40);
   21b1c:	010f6644 	movi	r4,15769
   21b20:	01401004 	movi	r5,64
   21b24:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9A, 0x80);
   21b28:	010f6684 	movi	r4,15770
   21b2c:	01402004 	movi	r5,128
   21b30:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9B, 0x41);
   21b34:	010f66c4 	movi	r4,15771
   21b38:	01401044 	movi	r5,65
   21b3c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9C, 0x80);
   21b40:	010f6704 	movi	r4,15772
   21b44:	01402004 	movi	r5,128
   21b48:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9D, 0x42);
   21b4c:	010f6744 	movi	r4,15773
   21b50:	01401084 	movi	r5,66
   21b54:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9E, 0x80);
   21b58:	010f6784 	movi	r4,15774
   21b5c:	01402004 	movi	r5,128
   21b60:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3D9F, 0x43);
   21b64:	010f67c4 	movi	r4,15775
   21b68:	014010c4 	movi	r5,67
   21b6c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA0, 0x83);
   21b70:	010f6804 	movi	r4,15776
   21b74:	014020c4 	movi	r5,131
   21b78:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA1, 0x06);
   21b7c:	010f6844 	movi	r4,15777
   21b80:	01400184 	movi	r5,6
   21b84:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA2, 0xC0);
   21b88:	010f6884 	movi	r4,15778
   21b8c:	01403004 	movi	r5,192
   21b90:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA3, 0x88);
   21b94:	010f68c4 	movi	r4,15779
   21b98:	01402204 	movi	r5,136
   21b9c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA4, 0x44);
   21ba0:	010f6904 	movi	r4,15780
   21ba4:	01401104 	movi	r5,68
   21ba8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA5, 0x87);
   21bac:	010f6944 	movi	r4,15781
   21bb0:	014021c4 	movi	r5,135
   21bb4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA6, 0x6A);
   21bb8:	010f6984 	movi	r4,15782
   21bbc:	01401a84 	movi	r5,106
   21bc0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA7, 0x83);
   21bc4:	010f69c4 	movi	r4,15783
   21bc8:	014020c4 	movi	r5,131
   21bcc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA8, 0x6B);
   21bd0:	010f6a04 	movi	r4,15784
   21bd4:	01401ac4 	movi	r5,107
   21bd8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DA9, 0x92);
   21bdc:	010f6a44 	movi	r4,15785
   21be0:	01402484 	movi	r5,146
   21be4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAA, 0x44);
   21be8:	010f6a84 	movi	r4,15786
   21bec:	01401104 	movi	r5,68
   21bf0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAB, 0x88);
   21bf4:	010f6ac4 	movi	r4,15787
   21bf8:	01402204 	movi	r5,136
   21bfc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAC, 0x06);
   21c00:	010f6b04 	movi	r4,15788
   21c04:	01400184 	movi	r5,6
   21c08:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAD, 0xC8);
   21c0c:	010f6b44 	movi	r4,15789
   21c10:	01403204 	movi	r5,200
   21c14:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAE, 0x81);
   21c18:	010f6b84 	movi	r4,15790
   21c1c:	01402044 	movi	r5,129
   21c20:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DAF, 0x41);
   21c24:	010f6bc4 	movi	r4,15791
   21c28:	01401044 	movi	r5,65
   21c2c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB0, 0x85);
   21c30:	010f6c04 	movi	r4,15792
   21c34:	01402144 	movi	r5,133
   21c38:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB1, 0x30);
   21c3c:	010f6c44 	movi	r4,15793
   21c40:	01400c04 	movi	r5,48
   21c44:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB2, 0xA4);
   21c48:	010f6c84 	movi	r4,15794
   21c4c:	01402904 	movi	r5,164
   21c50:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB3, 0x67);
   21c54:	010f6cc4 	movi	r4,15795
   21c58:	014019c4 	movi	r5,103
   21c5c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB4, 0x85);
   21c60:	010f6d04 	movi	r4,15796
   21c64:	01402144 	movi	r5,133
   21c68:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB5, 0x65);
   21c6c:	010f6d44 	movi	r4,15797
   21c70:	01401944 	movi	r5,101
   21c74:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB6, 0x87);
   21c78:	010f6d84 	movi	r4,15798
   21c7c:	014021c4 	movi	r5,135
   21c80:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB7, 0x65);
   21c84:	010f6dc4 	movi	r4,15799
   21c88:	01401944 	movi	r5,101
   21c8c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB8, 0x30);
   21c90:	010f6e04 	movi	r4,15800
   21c94:	01400c04 	movi	r5,48
   21c98:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DB9, 0x60);
   21c9c:	010f6e44 	movi	r4,15801
   21ca0:	01401804 	movi	r5,96
   21ca4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBA, 0x8D);
   21ca8:	010f6e84 	movi	r4,15802
   21cac:	01402344 	movi	r5,141
   21cb0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBB, 0x42);
   21cb4:	010f6ec4 	movi	r4,15803
   21cb8:	01401084 	movi	r5,66
   21cbc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBC, 0x82);
   21cc0:	010f6f04 	movi	r4,15804
   21cc4:	01402084 	movi	r5,130
   21cc8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBD, 0x40);
   21ccc:	010f6f44 	movi	r4,15805
   21cd0:	01401004 	movi	r5,64
   21cd4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBE, 0x82);
   21cd8:	010f6f84 	movi	r4,15806
   21cdc:	01402084 	movi	r5,130
   21ce0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DBF, 0x40);
   21ce4:	010f6fc4 	movi	r4,15807
   21ce8:	01401004 	movi	r5,64
   21cec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC0, 0x80);
   21cf0:	010f7004 	movi	r4,15808
   21cf4:	01402004 	movi	r5,128
   21cf8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC1, 0x41);
   21cfc:	010f7044 	movi	r4,15809
   21d00:	01401044 	movi	r5,65
   21d04:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC2, 0x80);
   21d08:	010f7084 	movi	r4,15810
   21d0c:	01402004 	movi	r5,128
   21d10:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC3, 0x42);
   21d14:	010f70c4 	movi	r4,15811
   21d18:	01401084 	movi	r5,66
   21d1c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC4, 0x80);
   21d20:	010f7104 	movi	r4,15812
   21d24:	01402004 	movi	r5,128
   21d28:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC5, 0x43);
   21d2c:	010f7144 	movi	r4,15813
   21d30:	014010c4 	movi	r5,67
   21d34:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC6, 0x83);
   21d38:	010f7184 	movi	r4,15814
   21d3c:	014020c4 	movi	r5,131
   21d40:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC7, 0x06);
   21d44:	010f71c4 	movi	r4,15815
   21d48:	01400184 	movi	r5,6
   21d4c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC8, 0xC0);
   21d50:	010f7204 	movi	r4,15816
   21d54:	01403004 	movi	r5,192
   21d58:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DC9, 0x88);
   21d5c:	010f7244 	movi	r4,15817
   21d60:	01402204 	movi	r5,136
   21d64:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCA, 0x44);
   21d68:	010f7284 	movi	r4,15818
   21d6c:	01401104 	movi	r5,68
   21d70:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCB, 0x9C);
   21d74:	010f72c4 	movi	r4,15819
   21d78:	01402704 	movi	r5,156
   21d7c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCC, 0x44);
   21d80:	010f7304 	movi	r4,15820
   21d84:	01401104 	movi	r5,68
   21d88:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCD, 0x88);
   21d8c:	010f7344 	movi	r4,15821
   21d90:	01402204 	movi	r5,136
   21d94:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCE, 0x06);
   21d98:	010f7384 	movi	r4,15822
   21d9c:	01400184 	movi	r5,6
   21da0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DCF, 0xC8);
   21da4:	010f73c4 	movi	r4,15823
   21da8:	01403204 	movi	r5,200
   21dac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD0, 0x85);
   21db0:	010f7404 	movi	r4,15824
   21db4:	01402144 	movi	r5,133
   21db8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD1, 0x41);
   21dbc:	010f7444 	movi	r4,15825
   21dc0:	01401044 	movi	r5,65
   21dc4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD2, 0x6A);
   21dc8:	010f7484 	movi	r4,15826
   21dcc:	01401a84 	movi	r5,106
   21dd0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD3, 0x83);
   21dd4:	010f74c4 	movi	r4,15827
   21dd8:	014020c4 	movi	r5,131
   21ddc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD4, 0x6B);
   21de0:	010f7504 	movi	r4,15828
   21de4:	01401ac4 	movi	r5,107
   21de8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD5, 0xA0);
   21dec:	010f7544 	movi	r4,15829
   21df0:	01402804 	movi	r5,160
   21df4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD6, 0x42);
   21df8:	010f7584 	movi	r4,15830
   21dfc:	01401084 	movi	r5,66
   21e00:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD7, 0x82);
   21e04:	010f75c4 	movi	r4,15831
   21e08:	01402084 	movi	r5,130
   21e0c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD8, 0x40);
   21e10:	010f7604 	movi	r4,15832
   21e14:	01401004 	movi	r5,64
   21e18:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DD9, 0x6C);
   21e1c:	010f7644 	movi	r4,15833
   21e20:	01401b04 	movi	r5,108
   21e24:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDA, 0x3A);
   21e28:	010f7684 	movi	r4,15834
   21e2c:	01400e84 	movi	r5,58
   21e30:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDB, 0xA8);
   21e34:	010f76c4 	movi	r4,15835
   21e38:	01402a04 	movi	r5,168
   21e3c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDC, 0x80);
   21e40:	010f7704 	movi	r4,15836
   21e44:	01402004 	movi	r5,128
   21e48:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDD, 0x28);
   21e4c:	010f7744 	movi	r4,15837
   21e50:	01400a04 	movi	r5,40
   21e54:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDE, 0x30);
   21e58:	010f7784 	movi	r4,15838
   21e5c:	01400c04 	movi	r5,48
   21e60:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DDF, 0x70);
   21e64:	010f77c4 	movi	r4,15839
   21e68:	01401c04 	movi	r5,112
   21e6c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE0, 0x6F);
   21e70:	010f7804 	movi	r4,15840
   21e74:	01401bc4 	movi	r5,111
   21e78:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE1, 0x40);
   21e7c:	010f7844 	movi	r4,15841
   21e80:	01401004 	movi	r5,64
   21e84:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE2, 0x14);
   21e88:	010f7884 	movi	r4,15842
   21e8c:	01400504 	movi	r5,20
   21e90:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE3, 0x0E);
   21e94:	010f78c4 	movi	r4,15843
   21e98:	01400384 	movi	r5,14
   21e9c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE4, 0x23);
   21ea0:	010f7904 	movi	r4,15844
   21ea4:	014008c4 	movi	r5,35
   21ea8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE5, 0xC2);
   21eac:	010f7944 	movi	r4,15845
   21eb0:	01403084 	movi	r5,194
   21eb4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE6, 0x41);
   21eb8:	010f7984 	movi	r4,15846
   21ebc:	01401044 	movi	r5,65
   21ec0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE7, 0x82);
   21ec4:	010f79c4 	movi	r4,15847
   21ec8:	01402084 	movi	r5,130
   21ecc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE8, 0x42);
   21ed0:	010f7a04 	movi	r4,15848
   21ed4:	01401084 	movi	r5,66
   21ed8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DE9, 0x00);
   21edc:	010f7a44 	movi	r4,15849
   21ee0:	000b883a 	mov	r5,zero
   21ee4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DEA, 0xC0);
   21ee8:	010f7a84 	movi	r4,15850
   21eec:	01403004 	movi	r5,192
   21ef0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DEB, 0x5D);
   21ef4:	010f7ac4 	movi	r4,15851
   21ef8:	01401744 	movi	r5,93
   21efc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DEC, 0x80);
   21f00:	010f7b04 	movi	r4,15852
   21f04:	01402004 	movi	r5,128
   21f08:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DED, 0x5A);
   21f0c:	010f7b44 	movi	r4,15853
   21f10:	01401684 	movi	r5,90
   21f14:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DEE, 0x80);
   21f18:	010f7b84 	movi	r4,15854
   21f1c:	01402004 	movi	r5,128
   21f20:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DEF, 0x57);
   21f24:	010f7bc4 	movi	r4,15855
   21f28:	014015c4 	movi	r5,87
   21f2c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF0, 0x84);
   21f30:	010f7c04 	movi	r4,15856
   21f34:	01402104 	movi	r5,132
   21f38:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF1, 0x64);
   21f3c:	010f7c44 	movi	r4,15857
   21f40:	01401904 	movi	r5,100
   21f44:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF2, 0x80);
   21f48:	010f7c84 	movi	r4,15858
   21f4c:	01402004 	movi	r5,128
   21f50:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF3, 0x55);
   21f54:	010f7cc4 	movi	r4,15859
   21f58:	01401544 	movi	r5,85
   21f5c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF4, 0x86);
   21f60:	010f7d04 	movi	r4,15860
   21f64:	01402184 	movi	r5,134
   21f68:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF5, 0x64);
   21f6c:	010f7d44 	movi	r4,15861
   21f70:	01401904 	movi	r5,100
   21f74:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF6, 0x80);
   21f78:	010f7d84 	movi	r4,15862
   21f7c:	01402004 	movi	r5,128
   21f80:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF7, 0x65);
   21f84:	010f7dc4 	movi	r4,15863
   21f88:	01401944 	movi	r5,101
   21f8c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF8, 0x88);
   21f90:	010f7e04 	movi	r4,15864
   21f94:	01402204 	movi	r5,136
   21f98:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DF9, 0x65);
   21f9c:	010f7e44 	movi	r4,15865
   21fa0:	01401944 	movi	r5,101
   21fa4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFA, 0x82);
   21fa8:	010f7e84 	movi	r4,15866
   21fac:	01402084 	movi	r5,130
   21fb0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFB, 0x54);
   21fb4:	010f7ec4 	movi	r4,15867
   21fb8:	01401504 	movi	r5,84
   21fbc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFC, 0x80);
   21fc0:	010f7f04 	movi	r4,15868
   21fc4:	01402004 	movi	r5,128
   21fc8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFD, 0x58);
   21fcc:	010f7f44 	movi	r4,15869
   21fd0:	01401604 	movi	r5,88
   21fd4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFE, 0x80);
   21fd8:	010f7f84 	movi	r4,15870
   21fdc:	01402004 	movi	r5,128
   21fe0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3DFF, 0x00);
   21fe4:	010f7fc4 	movi	r4,15871
   21fe8:	000b883a 	mov	r5,zero
   21fec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E00, 0xC0);
   21ff0:	010f8004 	movi	r4,15872
   21ff4:	01403004 	movi	r5,192
   21ff8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E01, 0x86);
   21ffc:	010f8044 	movi	r4,15873
   22000:	01402184 	movi	r5,134
   22004:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E02, 0x42);
   22008:	010f8084 	movi	r4,15874
   2200c:	01401084 	movi	r5,66
   22010:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E03, 0x82);
   22014:	010f80c4 	movi	r4,15875
   22018:	01402084 	movi	r5,130
   2201c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E04, 0x10);
   22020:	010f8104 	movi	r4,15876
   22024:	01400404 	movi	r5,16
   22028:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E05, 0x30);
   2202c:	010f8144 	movi	r4,15877
   22030:	01400c04 	movi	r5,48
   22034:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E06, 0x9C);
   22038:	010f8184 	movi	r4,15878
   2203c:	01402704 	movi	r5,156
   22040:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E07, 0x5C);
   22044:	010f81c4 	movi	r4,15879
   22048:	01401704 	movi	r5,92
   2204c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E08, 0x80);
   22050:	010f8204 	movi	r4,15880
   22054:	01402004 	movi	r5,128
   22058:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E09, 0x6E);
   2205c:	010f8244 	movi	r4,15881
   22060:	01401b84 	movi	r5,110
   22064:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0A, 0x86);
   22068:	010f8284 	movi	r4,15882
   2206c:	01402184 	movi	r5,134
   22070:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0B, 0x5B);
   22074:	010f82c4 	movi	r4,15883
   22078:	014016c4 	movi	r5,91
   2207c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0C, 0x80);
   22080:	010f8304 	movi	r4,15884
   22084:	01402004 	movi	r5,128
   22088:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0D, 0x63);
   2208c:	010f8344 	movi	r4,15885
   22090:	014018c4 	movi	r5,99
   22094:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0E, 0x9E);
   22098:	010f8384 	movi	r4,15886
   2209c:	01402784 	movi	r5,158
   220a0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E0F, 0x59);
   220a4:	010f83c4 	movi	r4,15887
   220a8:	01401644 	movi	r5,89
   220ac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E10, 0x8C);
   220b0:	010f8404 	movi	r4,15888
   220b4:	01402304 	movi	r5,140
   220b8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E11, 0x5E);
   220bc:	010f8444 	movi	r4,15889
   220c0:	01401784 	movi	r5,94
   220c4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E12, 0x8A);
   220c8:	010f8484 	movi	r4,15890
   220cc:	01402284 	movi	r5,138
   220d0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E13, 0x6C);
   220d4:	010f84c4 	movi	r4,15891
   220d8:	01401b04 	movi	r5,108
   220dc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E14, 0x80);
   220e0:	010f8504 	movi	r4,15892
   220e4:	01402004 	movi	r5,128
   220e8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E15, 0x6D);
   220ec:	010f8544 	movi	r4,15893
   220f0:	01401b44 	movi	r5,109
   220f4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E16, 0x81);
   220f8:	010f8584 	movi	r4,15894
   220fc:	01402044 	movi	r5,129
   22100:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E17, 0x5F);
   22104:	010f85c4 	movi	r4,15895
   22108:	014017c4 	movi	r5,95
   2210c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E18, 0x60);
   22110:	010f8604 	movi	r4,15896
   22114:	01401804 	movi	r5,96
   22118:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E19, 0x61);
   2211c:	010f8644 	movi	r4,15897
   22120:	01401844 	movi	r5,97
   22124:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1A, 0x88);
   22128:	010f8684 	movi	r4,15898
   2212c:	01402204 	movi	r5,136
   22130:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1B, 0x10);
   22134:	010f86c4 	movi	r4,15899
   22138:	01400404 	movi	r5,16
   2213c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1C, 0x30);
   22140:	010f8704 	movi	r4,15900
   22144:	01400c04 	movi	r5,48
   22148:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1D, 0x66);
   2214c:	010f8744 	movi	r4,15901
   22150:	01401984 	movi	r5,102
   22154:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1E, 0x83);
   22158:	010f8784 	movi	r4,15902
   2215c:	014020c4 	movi	r5,131
   22160:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E1F, 0x6E);
   22164:	010f87c4 	movi	r4,15903
   22168:	01401b84 	movi	r5,110
   2216c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E20, 0x80);
   22170:	010f8804 	movi	r4,15904
   22174:	01402004 	movi	r5,128
   22178:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E21, 0x64);
   2217c:	010f8844 	movi	r4,15905
   22180:	01401904 	movi	r5,100
   22184:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E22, 0x87);
   22188:	010f8884 	movi	r4,15906
   2218c:	014021c4 	movi	r5,135
   22190:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E23, 0x64);
   22194:	010f88c4 	movi	r4,15907
   22198:	01401904 	movi	r5,100
   2219c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E24, 0x30);
   221a0:	010f8904 	movi	r4,15908
   221a4:	01400c04 	movi	r5,48
   221a8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E25, 0x50);
   221ac:	010f8944 	movi	r4,15909
   221b0:	01401404 	movi	r5,80
   221b4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E26, 0xD3);
   221b8:	010f8984 	movi	r4,15910
   221bc:	014034c4 	movi	r5,211
   221c0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E27, 0x6A);
   221c4:	010f89c4 	movi	r4,15911
   221c8:	01401a84 	movi	r5,106
   221cc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E28, 0x6B);
   221d0:	010f8a04 	movi	r4,15912
   221d4:	01401ac4 	movi	r5,107
   221d8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E29, 0xAD);
   221dc:	010f8a44 	movi	r4,15913
   221e0:	01402b44 	movi	r5,173
   221e4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2A, 0x30);
   221e8:	010f8a84 	movi	r4,15914
   221ec:	01400c04 	movi	r5,48
   221f0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2B, 0x94);
   221f4:	010f8ac4 	movi	r4,15915
   221f8:	01402504 	movi	r5,148
   221fc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2C, 0x67);
   22200:	010f8b04 	movi	r4,15916
   22204:	014019c4 	movi	r5,103
   22208:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2D, 0x84);
   2220c:	010f8b44 	movi	r4,15917
   22210:	01402104 	movi	r5,132
   22214:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2E, 0x65);
   22218:	010f8b84 	movi	r4,15918
   2221c:	01401944 	movi	r5,101
   22220:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E2F, 0x82);
   22224:	010f8bc4 	movi	r4,15919
   22228:	01402084 	movi	r5,130
   2222c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E30, 0x4D);
   22230:	010f8c04 	movi	r4,15920
   22234:	01401344 	movi	r5,77
   22238:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E31, 0x83);
   2223c:	010f8c44 	movi	r4,15921
   22240:	014020c4 	movi	r5,131
   22244:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E32, 0x65);
   22248:	010f8c84 	movi	r4,15922
   2224c:	01401944 	movi	r5,101
   22250:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E33, 0x30);
   22254:	010f8cc4 	movi	r4,15923
   22258:	01400c04 	movi	r5,48
   2225c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E34, 0x50);
   22260:	010f8d04 	movi	r4,15924
   22264:	01401404 	movi	r5,80
   22268:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E35, 0xA7);
   2226c:	010f8d44 	movi	r4,15925
   22270:	014029c4 	movi	r5,167
   22274:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E36, 0x43);
   22278:	010f8d84 	movi	r4,15926
   2227c:	014010c4 	movi	r5,67
   22280:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E37, 0x06);
   22284:	010f8dc4 	movi	r4,15927
   22288:	01400184 	movi	r5,6
   2228c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E38, 0x00);
   22290:	010f8e04 	movi	r4,15928
   22294:	000b883a 	mov	r5,zero
   22298:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E39, 0x8D);
   2229c:	010f8e44 	movi	r4,15929
   222a0:	01402344 	movi	r5,141
   222a4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3A, 0x45);
   222a8:	010f8e84 	movi	r4,15930
   222ac:	01401144 	movi	r5,69
   222b0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3B, 0x9A);
   222b4:	010f8ec4 	movi	r4,15931
   222b8:	01402684 	movi	r5,154
   222bc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3C, 0x6A);
   222c0:	010f8f04 	movi	r4,15932
   222c4:	01401a84 	movi	r5,106
   222c8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3D, 0x6B);
   222cc:	010f8f44 	movi	r4,15933
   222d0:	01401ac4 	movi	r5,107
   222d4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3E, 0x45);
   222d8:	010f8f84 	movi	r4,15934
   222dc:	01401144 	movi	r5,69
   222e0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E3F, 0x85);
   222e4:	010f8fc4 	movi	r4,15935
   222e8:	01402144 	movi	r5,133
   222ec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E40, 0x06);
   222f0:	010f9004 	movi	r4,15936
   222f4:	01400184 	movi	r5,6
   222f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E41, 0x00);
   222fc:	010f9044 	movi	r4,15937
   22300:	000b883a 	mov	r5,zero
   22304:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E42, 0x81);
   22308:	010f9084 	movi	r4,15938
   2230c:	01402044 	movi	r5,129
   22310:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E43, 0x43);
   22314:	010f90c4 	movi	r4,15939
   22318:	014010c4 	movi	r5,67
   2231c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E44, 0x8A);
   22320:	010f9104 	movi	r4,15940
   22324:	01402284 	movi	r5,138
   22328:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E45, 0x6F);
   2232c:	010f9144 	movi	r4,15941
   22330:	01401bc4 	movi	r5,111
   22334:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E46, 0x96);
   22338:	010f9184 	movi	r4,15942
   2233c:	01402584 	movi	r5,150
   22340:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E47, 0x30);
   22344:	010f91c4 	movi	r4,15943
   22348:	01400c04 	movi	r5,48
   2234c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E48, 0x90);
   22350:	010f9204 	movi	r4,15944
   22354:	01402404 	movi	r5,144
   22358:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E49, 0x67);
   2235c:	010f9244 	movi	r4,15945
   22360:	014019c4 	movi	r5,103
   22364:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4A, 0x64);
   22368:	010f9284 	movi	r4,15946
   2236c:	01401904 	movi	r5,100
   22370:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4B, 0x88);
   22374:	010f92c4 	movi	r4,15947
   22378:	01402204 	movi	r5,136
   2237c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4C, 0x64);
   22380:	010f9304 	movi	r4,15948
   22384:	01401904 	movi	r5,100
   22388:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4D, 0x80);
   2238c:	010f9344 	movi	r4,15949
   22390:	01402004 	movi	r5,128
   22394:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4E, 0x65);
   22398:	010f9384 	movi	r4,15950
   2239c:	01401944 	movi	r5,101
   223a0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E4F, 0x82);
   223a4:	010f93c4 	movi	r4,15951
   223a8:	01402084 	movi	r5,130
   223ac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E50, 0x10);
   223b0:	010f9404 	movi	r4,15952
   223b4:	01400404 	movi	r5,16
   223b8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E51, 0xC0);
   223bc:	010f9444 	movi	r4,15953
   223c0:	01403004 	movi	r5,192
   223c4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E52, 0x84);
   223c8:	010f9484 	movi	r4,15954
   223cc:	01402104 	movi	r5,132
   223d0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E53, 0x65);
   223d4:	010f94c4 	movi	r4,15955
   223d8:	01401944 	movi	r5,101
   223dc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E54, 0xEF);
   223e0:	010f9504 	movi	r4,15956
   223e4:	01403bc4 	movi	r5,239
   223e8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E55, 0x10);
   223ec:	010f9544 	movi	r4,15957
   223f0:	01400404 	movi	r5,16
   223f4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E56, 0xC0);
   223f8:	010f9584 	movi	r4,15958
   223fc:	01403004 	movi	r5,192
   22400:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E57, 0x66);
   22404:	010f95c4 	movi	r4,15959
   22408:	01401984 	movi	r5,102
   2240c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E58, 0x85);
   22410:	010f9604 	movi	r4,15960
   22414:	01402144 	movi	r5,133
   22418:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E59, 0x64);
   2241c:	010f9644 	movi	r4,15961
   22420:	01401904 	movi	r5,100
   22424:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5A, 0x81);
   22428:	010f9684 	movi	r4,15962
   2242c:	01402044 	movi	r5,129
   22430:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5B, 0x17);
   22434:	010f96c4 	movi	r4,15963
   22438:	014005c4 	movi	r5,23
   2243c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5C, 0x00);
   22440:	010f9704 	movi	r4,15964
   22444:	000b883a 	mov	r5,zero
   22448:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5D, 0x80);
   2244c:	010f9744 	movi	r4,15965
   22450:	01402004 	movi	r5,128
   22454:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5E, 0x20);
   22458:	010f9784 	movi	r4,15966
   2245c:	01400804 	movi	r5,32
   22460:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E5F, 0x0D);
   22464:	010f97c4 	movi	r4,15967
   22468:	01400344 	movi	r5,13
   2246c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E60, 0x80);
   22470:	010f9804 	movi	r4,15968
   22474:	01402004 	movi	r5,128
   22478:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E61, 0x18);
   2247c:	010f9844 	movi	r4,15969
   22480:	01400604 	movi	r5,24
   22484:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E62, 0x0C);
   22488:	010f9884 	movi	r4,15970
   2248c:	01400304 	movi	r5,12
   22490:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E63, 0x80);
   22494:	010f98c4 	movi	r4,15971
   22498:	01402004 	movi	r5,128
   2249c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E64, 0x64);
   224a0:	010f9904 	movi	r4,15972
   224a4:	01401904 	movi	r5,100
   224a8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E65, 0x30);
   224ac:	010f9944 	movi	r4,15973
   224b0:	01400c04 	movi	r5,48
   224b4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E66, 0x60);
   224b8:	010f9984 	movi	r4,15974
   224bc:	01401804 	movi	r5,96
   224c0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E67, 0x41);
   224c4:	010f99c4 	movi	r4,15975
   224c8:	01401044 	movi	r5,65
   224cc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E68, 0x82);
   224d0:	010f9a04 	movi	r4,15976
   224d4:	01402084 	movi	r5,130
   224d8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E69, 0x42);
   224dc:	010f9a44 	movi	r4,15977
   224e0:	01401084 	movi	r5,66
   224e4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6A, 0xB2);
   224e8:	010f9a84 	movi	r4,15978
   224ec:	01402c84 	movi	r5,178
   224f0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6B, 0x42);
   224f4:	010f9ac4 	movi	r4,15979
   224f8:	01401084 	movi	r5,66
   224fc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6C, 0x80);
   22500:	010f9b04 	movi	r4,15980
   22504:	01402004 	movi	r5,128
   22508:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6D, 0x40);
   2250c:	010f9b44 	movi	r4,15981
   22510:	01401004 	movi	r5,64
   22514:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6E, 0x82);
   22518:	010f9b84 	movi	r4,15982
   2251c:	01402084 	movi	r5,130
   22520:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E6F, 0x40);
   22524:	010f9bc4 	movi	r4,15983
   22528:	01401004 	movi	r5,64
   2252c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E70, 0x4C);
   22530:	010f9c04 	movi	r4,15984
   22534:	01401304 	movi	r5,76
   22538:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E71, 0x45);
   2253c:	010f9c44 	movi	r4,15985
   22540:	01401144 	movi	r5,69
   22544:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E72, 0x92);
   22548:	010f9c84 	movi	r4,15986
   2254c:	01402484 	movi	r5,146
   22550:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E73, 0x6A);
   22554:	010f9cc4 	movi	r4,15987
   22558:	01401a84 	movi	r5,106
   2255c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E74, 0x6B);
   22560:	010f9d04 	movi	r4,15988
   22564:	01401ac4 	movi	r5,107
   22568:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E75, 0x9B);
   2256c:	010f9d44 	movi	r4,15989
   22570:	014026c4 	movi	r5,155
   22574:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E76, 0x45);
   22578:	010f9d84 	movi	r4,15990
   2257c:	01401144 	movi	r5,69
   22580:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E77, 0x81);
   22584:	010f9dc4 	movi	r4,15991
   22588:	01402044 	movi	r5,129
   2258c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E78, 0x4C);
   22590:	010f9e04 	movi	r4,15992
   22594:	01401304 	movi	r5,76
   22598:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E79, 0x40);
   2259c:	010f9e44 	movi	r4,15993
   225a0:	01401004 	movi	r5,64
   225a4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7A, 0x8C);
   225a8:	010f9e84 	movi	r4,15994
   225ac:	01402304 	movi	r5,140
   225b0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7B, 0x30);
   225b4:	010f9ec4 	movi	r4,15995
   225b8:	01400c04 	movi	r5,48
   225bc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7C, 0xA4);
   225c0:	010f9f04 	movi	r4,15996
   225c4:	01402904 	movi	r5,164
   225c8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7D, 0x67);
   225cc:	010f9f44 	movi	r4,15997
   225d0:	014019c4 	movi	r5,103
   225d4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7E, 0x85);
   225d8:	010f9f84 	movi	r4,15998
   225dc:	01402144 	movi	r5,133
   225e0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E7F, 0x65);
   225e4:	010f9fc4 	movi	r4,15999
   225e8:	01401944 	movi	r5,101
   225ec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E80, 0x87);
   225f0:	010fa004 	movi	r4,16000
   225f4:	014021c4 	movi	r5,135
   225f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E81, 0x65);
   225fc:	010fa044 	movi	r4,16001
   22600:	01401944 	movi	r5,101
   22604:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E82, 0x30);
   22608:	010fa084 	movi	r4,16002
   2260c:	01400c04 	movi	r5,48
   22610:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E83, 0x60);
   22614:	010fa0c4 	movi	r4,16003
   22618:	01401804 	movi	r5,96
   2261c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E84, 0xD3);
   22620:	010fa104 	movi	r4,16004
   22624:	014034c4 	movi	r5,211
   22628:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E85, 0x6A);
   2262c:	010fa144 	movi	r4,16005
   22630:	01401a84 	movi	r5,106
   22634:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E86, 0x6B);
   22638:	010fa184 	movi	r4,16006
   2263c:	01401ac4 	movi	r5,107
   22640:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E87, 0xAC);
   22644:	010fa1c4 	movi	r4,16007
   22648:	01402b04 	movi	r5,172
   2264c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E88, 0x6C);
   22650:	010fa204 	movi	r4,16008
   22654:	01401b04 	movi	r5,108
   22658:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E89, 0x32);
   2265c:	010fa244 	movi	r4,16009
   22660:	01400c84 	movi	r5,50
   22664:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8A, 0xA8);
   22668:	010fa284 	movi	r4,16010
   2266c:	01402a04 	movi	r5,168
   22670:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8B, 0x80);
   22674:	010fa2c4 	movi	r4,16011
   22678:	01402004 	movi	r5,128
   2267c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8C, 0x28);
   22680:	010fa304 	movi	r4,16012
   22684:	01400a04 	movi	r5,40
   22688:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8D, 0x30);
   2268c:	010fa344 	movi	r4,16013
   22690:	01400c04 	movi	r5,48
   22694:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8E, 0x70);
   22698:	010fa384 	movi	r4,16014
   2269c:	01401c04 	movi	r5,112
   226a0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E8F, 0x00);
   226a4:	010fa3c4 	movi	r4,16015
   226a8:	000b883a 	mov	r5,zero
   226ac:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E90, 0x80);
   226b0:	010fa404 	movi	r4,16016
   226b4:	01402004 	movi	r5,128
   226b8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E91, 0x40);
   226bc:	010fa444 	movi	r4,16017
   226c0:	01401004 	movi	r5,64
   226c4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E92, 0x4C);
   226c8:	010fa484 	movi	r4,16018
   226cc:	01401304 	movi	r5,76
   226d0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E93, 0xBD);
   226d4:	010fa4c4 	movi	r4,16019
   226d8:	01402f44 	movi	r5,189
   226dc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E94, 0x00);
   226e0:	010fa504 	movi	r4,16020
   226e4:	000b883a 	mov	r5,zero
   226e8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E95, 0x0E);
   226ec:	010fa544 	movi	r4,16021
   226f0:	01400384 	movi	r5,14
   226f4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E96, 0xBE);
   226f8:	010fa584 	movi	r4,16022
   226fc:	01402f84 	movi	r5,190
   22700:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E97, 0x44);
   22704:	010fa5c4 	movi	r4,16023
   22708:	01401104 	movi	r5,68
   2270c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E98, 0x88);
   22710:	010fa604 	movi	r4,16024
   22714:	01402204 	movi	r5,136
   22718:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E99, 0x44);
   2271c:	010fa644 	movi	r4,16025
   22720:	01401104 	movi	r5,68
   22724:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9A, 0xBC);
   22728:	010fa684 	movi	r4,16026
   2272c:	01402f04 	movi	r5,188
   22730:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9B, 0x78);
   22734:	010fa6c4 	movi	r4,16027
   22738:	01401e04 	movi	r5,120
   2273c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9C, 0x09);
   22740:	010fa704 	movi	r4,16028
   22744:	01400244 	movi	r5,9
   22748:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9D, 0x00);
   2274c:	010fa744 	movi	r4,16029
   22750:	000b883a 	mov	r5,zero
   22754:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9E, 0x89);
   22758:	010fa784 	movi	r4,16030
   2275c:	01402244 	movi	r5,137
   22760:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3E9F, 0x04);
   22764:	010fa7c4 	movi	r4,16031
   22768:	01400104 	movi	r5,4
   2276c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA0, 0x80);
   22770:	010fa804 	movi	r4,16032
   22774:	01402004 	movi	r5,128
   22778:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA1, 0x80);
   2277c:	010fa844 	movi	r4,16033
   22780:	01402004 	movi	r5,128
   22784:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA2, 0x02);
   22788:	010fa884 	movi	r4,16034
   2278c:	01400084 	movi	r5,2
   22790:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA3, 0x40);
   22794:	010fa8c4 	movi	r4,16035
   22798:	01401004 	movi	r5,64
   2279c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA4, 0x86);
   227a0:	010fa904 	movi	r4,16036
   227a4:	01402184 	movi	r5,134
   227a8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA5, 0x09);
   227ac:	010fa944 	movi	r4,16037
   227b0:	01400244 	movi	r5,9
   227b4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA6, 0x00);
   227b8:	010fa984 	movi	r4,16038
   227bc:	000b883a 	mov	r5,zero
   227c0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA7, 0x8E);
   227c4:	010fa9c4 	movi	r4,16039
   227c8:	01402384 	movi	r5,142
   227cc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA8, 0x09);
   227d0:	010faa04 	movi	r4,16040
   227d4:	01400244 	movi	r5,9
   227d8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EA9, 0x00);
   227dc:	010faa44 	movi	r4,16041
   227e0:	000b883a 	mov	r5,zero
   227e4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAA, 0x80);
   227e8:	010faa84 	movi	r4,16042
   227ec:	01402004 	movi	r5,128
   227f0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAB, 0x02);
   227f4:	010faac4 	movi	r4,16043
   227f8:	01400084 	movi	r5,2
   227fc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAC, 0x40);
   22800:	010fab04 	movi	r4,16044
   22804:	01401004 	movi	r5,64
   22808:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAD, 0x80);
   2280c:	010fab44 	movi	r4,16045
   22810:	01402004 	movi	r5,128
   22814:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAE, 0x04);
   22818:	010fab84 	movi	r4,16046
   2281c:	01400104 	movi	r5,4
   22820:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EAF, 0x80);
   22824:	010fabc4 	movi	r4,16047
   22828:	01402004 	movi	r5,128
   2282c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB0, 0x88);
   22830:	010fac04 	movi	r4,16048
   22834:	01402204 	movi	r5,136
   22838:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB1, 0x7D);
   2283c:	010fac44 	movi	r4,16049
   22840:	01401f44 	movi	r5,125
   22844:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB2, 0x9E);
   22848:	010fac84 	movi	r4,16050
   2284c:	01402784 	movi	r5,158
   22850:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB3, 0x86);
   22854:	010facc4 	movi	r4,16051
   22858:	01402184 	movi	r5,134
   2285c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB4, 0x09);
   22860:	010fad04 	movi	r4,16052
   22864:	01400244 	movi	r5,9
   22868:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB5, 0x00);
   2286c:	010fad44 	movi	r4,16053
   22870:	000b883a 	mov	r5,zero
   22874:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB6, 0x87);
   22878:	010fad84 	movi	r4,16054
   2287c:	014021c4 	movi	r5,135
   22880:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB7, 0x7A);
   22884:	010fadc4 	movi	r4,16055
   22888:	01401e84 	movi	r5,122
   2288c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB8, 0x00);
   22890:	010fae04 	movi	r4,16056
   22894:	000b883a 	mov	r5,zero
   22898:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EB9, 0x0E);
   2289c:	010fae44 	movi	r4,16057
   228a0:	01400384 	movi	r5,14
   228a4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBA, 0xC3);
   228a8:	010fae84 	movi	r4,16058
   228ac:	014030c4 	movi	r5,195
   228b0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBB, 0x79);
   228b4:	010faec4 	movi	r4,16059
   228b8:	01401e44 	movi	r5,121
   228bc:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBC, 0x4C);
   228c0:	010faf04 	movi	r4,16060
   228c4:	01401304 	movi	r5,76
   228c8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBD, 0x40);
   228cc:	010faf44 	movi	r4,16061
   228d0:	01401004 	movi	r5,64
   228d4:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBE, 0xBF);
   228d8:	010faf84 	movi	r4,16062
   228dc:	01402fc4 	movi	r5,191
   228e0:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EBF, 0x70);
   228e4:	010fafc4 	movi	r4,16063
   228e8:	01401c04 	movi	r5,112
   228ec:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC0, 0x00);
   228f0:	010fb004 	movi	r4,16064
   228f4:	000b883a 	mov	r5,zero
   228f8:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC1, 0x00);
   228fc:	010fb044 	movi	r4,16065
   22900:	000b883a 	mov	r5,zero
   22904:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC2, 0x00);
   22908:	010fb084 	movi	r4,16066
   2290c:	000b883a 	mov	r5,zero
   22910:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC3, 0x00);
   22914:	010fb0c4 	movi	r4,16067
   22918:	000b883a 	mov	r5,zero
   2291c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC4, 0x00);
   22920:	010fb104 	movi	r4,16068
   22924:	000b883a 	mov	r5,zero
   22928:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC5, 0x00);
   2292c:	010fb144 	movi	r4,16069
   22930:	000b883a 	mov	r5,zero
   22934:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC6, 0x00);
   22938:	010fb184 	movi	r4,16070
   2293c:	000b883a 	mov	r5,zero
   22940:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC7, 0x00);
   22944:	010fb1c4 	movi	r4,16071
   22948:	000b883a 	mov	r5,zero
   2294c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC8, 0x00);
   22950:	010fb204 	movi	r4,16072
   22954:	000b883a 	mov	r5,zero
   22958:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3EC9, 0x00);
   2295c:	010fb244 	movi	r4,16073
   22960:	000b883a 	mov	r5,zero
   22964:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3ECA, 0x00);
   22968:	010fb284 	movi	r4,16074
   2296c:	000b883a 	mov	r5,zero
   22970:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>
    AR0833_write_cmos_sensor_8(0x3ECB, 0x00);
   22974:	010fb2c4 	movi	r4,16075
   22978:	000b883a 	mov	r5,zero
   2297c:	00210a40 	call	210a4 <AR0833_write_cmos_sensor_8>


    AR0833_write_cmos_sensor(0x301A, 0x0018); 	// RESET_REGISTER
   22980:	010c0684 	movi	r4,12314
   22984:	01400604 	movi	r5,24
   22988:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDE, 0x6664); 	// DAC_LD_18_19
   2298c:	010fb784 	movi	r4,16094
   22990:	01599904 	movi	r5,26212
   22994:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDE, 0x6664); 	// DAC_LD_18_19
   22998:	010fb784 	movi	r4,16094
   2299c:	01599904 	movi	r5,26212
   229a0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDE, 0x6664); 	// DAC_LD_18_19
   229a4:	010fb784 	movi	r4,16094
   229a8:	01599904 	movi	r5,26212
   229ac:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EDE, 0x6664); 	// DAC_LD_18_19
   229b0:	010fb784 	movi	r4,16094
   229b4:	01599904 	movi	r5,26212
   229b8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE0, 0x26D5); 	// DAC_LD_20_21
   229bc:	010fb804 	movi	r4,16096
   229c0:	0149b544 	movi	r5,9941
   229c4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3EE0, 0x26D5); 	// DAC_LD_20_21
   229c8:	010fb804 	movi	r4,16096
   229cc:	0149b544 	movi	r5,9941
   229d0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x301A, 0x001C); 	// RESET_REGISTER
   229d4:	010c0684 	movi	r4,12314
   229d8:	01400704 	movi	r5,28
   229dc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0300, 0x0005); 	// VT_PIX_CLK_DIV
   229e0:	0100c004 	movi	r4,768
   229e4:	01400144 	movi	r5,5
   229e8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0302, 0x0001); 	// VT_SYS_CLK_DIV
   229ec:	0100c084 	movi	r4,770
   229f0:	01400044 	movi	r5,1
   229f4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0304, 0x0004); 	// PRE_PLL_CLK_DIV
   229f8:	0100c104 	movi	r4,772
   229fc:	01400104 	movi	r5,4
   22a00:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0306, 0x007A); 	// PLL_MULTIPLIER
   22a04:	0100c184 	movi	r4,774
   22a08:	01401e84 	movi	r5,122
   22a0c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0308, 0x000A); 	// OP_PIX_CLK_DIV
   22a10:	0100c204 	movi	r4,776
   22a14:	01400284 	movi	r5,10
   22a18:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x030A, 0x0001); 	// OP_SYS_CLK_DIV
   22a1c:	0100c284 	movi	r4,778
   22a20:	01400044 	movi	r5,1
   22a24:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x3064, 0x7800); 	// SMIA_TEST
   22a28:	010c1904 	movi	r4,12388
   22a2c:	015e0004 	movi	r5,30720
   22a30:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    // apply .ini from arrow, richard
    AR0833_write_cmos_sensor(0x0300, 0x0005); 	// VT_PIX_CLK_DIV
   22a34:	0100c004 	movi	r4,768
   22a38:	01400144 	movi	r5,5
   22a3c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0302, 0x0001); 	// VT_SYS_CLK_DIV
   22a40:	0100c084 	movi	r4,770
   22a44:	01400044 	movi	r5,1
   22a48:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0304, 0x0004); 	// PRE_PLL_CLK_DIV
   22a4c:	0100c104 	movi	r4,772
   22a50:	01400104 	movi	r5,4
   22a54:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0306, 0x0046); 	// PLL_MULTIPLIER
   22a58:	0100c184 	movi	r4,774
   22a5c:	01401184 	movi	r5,70
   22a60:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0308, 0x000A); 	// OP_PIX_CLK_DIV
   22a64:	0100c204 	movi	r4,776
   22a68:	01400284 	movi	r5,10
   22a6c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x030A, 0x0001); 	// OP_SYS_CLK_DIV
   22a70:	0100c284 	movi	r4,778
   22a74:	01400044 	movi	r5,1
   22a78:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    //VCO =  XTCLK * pll_multiplier(R0x306) / (pre_pll_clk_div(R0x0304)) = 24MHz * 0x46 / 4 = 24 * 70 / 4 = 420MHz
    // vt_sys_clk =  VCO / (vt_sys_clk_div(R0x302) x 2) = 420 / (1 x 2) = 210Mhz

#if 1
    //  reduce clock, richard
    AR0833_write_cmos_sensor(0x0300, 0x0005); 	// VT_PIX_CLK_DIV
   22a7c:	0100c004 	movi	r4,768
   22a80:	01400144 	movi	r5,5
   22a84:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0302, 0x0001); 	// VT_SYS_CLK_DIV
   22a88:	0100c084 	movi	r4,770
   22a8c:	01400044 	movi	r5,1
   22a90:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0304, 0x0008); 	// PRE_PLL_CLK_DIV
   22a94:	0100c104 	movi	r4,772
   22a98:	01400204 	movi	r5,8
   22a9c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0306, 0x0046); 	// PLL_MULTIPLIER
   22aa0:	0100c184 	movi	r4,774
   22aa4:	01401184 	movi	r5,70
   22aa8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0308, 0x000A); 	// OP_PIX_CLK_DIV
   22aac:	0100c204 	movi	r4,776
   22ab0:	01400284 	movi	r5,10
   22ab4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x030A, 0x0001); 	// OP_SYS_CLK_DIV
   22ab8:	0100c284 	movi	r4,778
   22abc:	01400044 	movi	r5,1
   22ac0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    //VCO = 105MHz
    // vt_sys_clk = 25.125Mhz
#endif

    // richard add: raw8
    AR0833_write_cmos_sensor(0x0112, 0x0808);        // CCP_DATA_FORMAT
   22ac4:	01004484 	movi	r4,274
   22ac8:	01420204 	movi	r5,2056
   22acc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x030A, 0x0001); 	// OP_SYS_CLK_DIV
    //VCO = 336MHz
    // vt_sys_clk = 168Mhz
#endif

    Sleep(1);
   22ad0:	0100fa04 	movi	r4,1000
   22ad4:	0023c880 	call	23c88 <usleep>
    AR0833_write_cmos_sensor(0x31B0, 0x0060); 	// FRAME_PREAMBLE
   22ad8:	010c6c04 	movi	r4,12720
   22adc:	01401804 	movi	r5,96
   22ae0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31B2, 0x0042); 	// LINE_PREAMBLE
   22ae4:	010c6c84 	movi	r4,12722
   22ae8:	01401084 	movi	r5,66
   22aec:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31B4, 0x1C36); 	// MIPI_TIMING_0
   22af0:	010c6d04 	movi	r4,12724
   22af4:	01470d84 	movi	r5,7222
   22af8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31B6, 0x5218); 	// MIPI_TIMING_1
   22afc:	010c6d84 	movi	r4,12726
   22b00:	01548604 	movi	r5,21016
   22b04:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31B8, 0x404A); 	// MIPI_TIMING_2
   22b08:	010c6e04 	movi	r4,12728
   22b0c:	01501284 	movi	r5,16458
   22b10:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31BA, 0x028A); 	// MIPI_TIMING_3
   22b14:	010c6e84 	movi	r4,12730
   22b18:	0140a284 	movi	r5,650
   22b1c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x31BC, 0x0008); 	// MIPI_TIMING_4
   22b20:	010c6f04 	movi	r4,12732
   22b24:	01400204 	movi	r5,8
   22b28:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    Sleep(1);
   22b2c:	0100fa04 	movi	r4,1000
   22b30:	0023c880 	call	23c88 <usleep>

    AR0833_write_cmos_sensor(0x0342, 0x1000); 	// LINE_LENGTH_PCK
   22b34:	0100d084 	movi	r4,834
   22b38:	01440004 	movi	r5,4096
   22b3c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0340, 0x0556); 	// FRAME_LENGTH_LINES
   22b40:	0100d004 	movi	r4,832
   22b44:	01415584 	movi	r5,1366
   22b48:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0202, 0x0500); 	// COARSE_INTEGRATION_TIME
   22b4c:	01008084 	movi	r4,514
   22b50:	01414004 	movi	r5,1280
   22b54:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    AR0833_write_cmos_sensor(0x0342, 0x0ECE); 	// LINE_LENGTH_PCK
   22b58:	0100d084 	movi	r4,834
   22b5c:	0143b384 	movi	r5,3790
   22b60:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0340, 0x0A0F); 	// FRAME_LENGTH_LINES
   22b64:	0100d004 	movi	r4,832
   22b68:	014283c4 	movi	r5,2575
   22b6c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0202, 0x0A0F); 	// COARSE_INTEGRATION_TIME
   22b70:	01008084 	movi	r4,514
   22b74:	014283c4 	movi	r5,2575
   22b78:	00210440 	call	21044 <AR0833_write_cmos_sensor>
//    AR0833_write_cmos_sensor(0x034A, 0x03c8); 	// Y_ADDR_END
    AR0833_write_cmos_sensor(0x034A, 0x0609+(2448-768*2)/2); 	// Y_ADDR_END
#endif

///////
    if (bScale){
   22b7c:	e0bffe17 	ldw	r2,-8(fp)
   22b80:	10000d26 	beq	r2,zero,22bb8 <BYD_CONFIG_1024x768_RAW8+0x1ab4>
    	AR0833_write_cmos_sensor(0x0344, 0x0008+(3264-1024*2)/2); 	// X_ADDR_START
   22b84:	0100d104 	movi	r4,836
   22b88:	01409a04 	movi	r5,616
   22b8c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0348, 8+1024*2+1+(3264-1024*2)/2); 	// X_ADDR_END
   22b90:	0100d204 	movi	r4,840
   22b94:	01429a44 	movi	r5,2665
   22b98:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    	AR0833_write_cmos_sensor(0x0346, 0x0008+(2448-768*2)/2); 	// Y_ADDR_START
   22b9c:	0100d184 	movi	r4,838
   22ba0:	01407404 	movi	r5,464
   22ba4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x034A, 8+768*2+1+(2448-768*2)/2); 	// Y_ADDR_END
   22ba8:	0100d284 	movi	r4,842
   22bac:	0141f444 	movi	r5,2001
   22bb0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
   22bb4:	00000c06 	br	22be8 <BYD_CONFIG_1024x768_RAW8+0x1ae4>

    }else{
    	AR0833_write_cmos_sensor(0x0344, 0x0008+(3264-1024)/2); 	// X_ADDR_START
   22bb8:	0100d104 	movi	r4,836
   22bbc:	01411a04 	movi	r5,1128
   22bc0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0348, 8+1024+1+(3264-1024)/2); 	// X_ADDR_END
   22bc4:	0100d204 	movi	r4,840
   22bc8:	01421a44 	movi	r5,2153
   22bcc:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    	AR0833_write_cmos_sensor(0x0346, 0x0008+(2448-768)/2); 	// Y_ADDR_START
   22bd0:	0100d184 	movi	r4,838
   22bd4:	0140d404 	movi	r5,848
   22bd8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x034A, 8+768+1+(2448-768)/2); 	// Y_ADDR_END
   22bdc:	0100d284 	movi	r4,842
   22be0:	01419444 	movi	r5,1617
   22be4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
	}


    AR0833_write_cmos_sensor(0x034C, 0x0400); 	// X_OUTPUT_SIZE
   22be8:	0100d304 	movi	r4,844
   22bec:	01410004 	movi	r5,1024
   22bf0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x034E, 0x0300); 	// Y_OUTPUT_SIZE
   22bf4:	0100d384 	movi	r4,846
   22bf8:	0140c004 	movi	r5,768
   22bfc:	00210440 	call	21044 <AR0833_write_cmos_sensor>


    if (bTestMode){
   22c00:	e0bfff17 	ldw	r2,-4(fp)
   22c04:	10001226 	beq	r2,zero,22c50 <BYD_CONFIG_1024x768_RAW8+0x1b4c>

    	AR0833_write_cmos_sensor(0x0602, 0);  // red
   22c08:	01018084 	movi	r4,1538
   22c0c:	000b883a 	mov	r5,zero
   22c10:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0604, 0);  // greenR
   22c14:	01018104 	movi	r4,1540
   22c18:	000b883a 	mov	r5,zero
   22c1c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0606, 1023);  // blue
   22c20:	01018184 	movi	r4,1542
   22c24:	0140ffc4 	movi	r5,1023
   22c28:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0608, 0);  // greenB
   22c2c:	01018204 	movi	r4,1544
   22c30:	000b883a 	mov	r5,zero
   22c34:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	AR0833_write_cmos_sensor(0x0600, 0x0000); 	// 0: Normal operation, Generate output data from pixel array
   22c38:	01018004 	movi	r4,1536
   22c3c:	000b883a 	mov	r5,zero
   22c40:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    	//AR0833_write_cmos_sensor(0x0600, 0x0001); 	// 1: Solid color test pattern.
    	AR0833_write_cmos_sensor(0x0600, 0x0002); 	// 2: 100% color bar test pattern
   22c44:	01018004 	movi	r4,1536
   22c48:	01400084 	movi	r5,2
   22c4c:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x020E, 0x0180); 	// digital_gain_greenr (default 0x100)
    AR0833_write_cmos_sensor(0x0210, 0x0220); 	// digital_gain_red (default 0x100)
    AR0833_write_cmos_sensor(0x0212, 0x0200); 	// digital_gain_blue (default 0x100)
    AR0833_write_cmos_sensor(0x0214, 0x0180); 	// digital_gain_greenb (default 0x100)
	#else
    AR0833_write_cmos_sensor(0x020E, 0x0100); 	// digital_gain_greenr (default 0x100)
   22c50:	01008384 	movi	r4,526
   22c54:	01404004 	movi	r5,256
   22c58:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0210, 0x0180); 	// digital_gain_red (default 0x100)
   22c5c:	01008404 	movi	r4,528
   22c60:	01406004 	movi	r5,384
   22c64:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0212, 0x0140); 	// digital_gain_blue (default 0x100)
   22c68:	01008484 	movi	r4,530
   22c6c:	01405004 	movi	r5,320
   22c70:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0214, 0x0100); 	// digital_gain_greenb (default 0x100)
   22c74:	01008504 	movi	r4,532
   22c78:	01404004 	movi	r5,256
   22c7c:	00210440 	call	21044 <AR0833_write_cmos_sensor>


#endif


    AR0833_write_cmos_sensor(0x3040, 0x4041 ); 	// READ_MODE
   22c80:	010c1004 	movi	r4,12352
   22c84:	01501044 	movi	r5,16449
   22c88:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    // richard add, vertical mirrow only
    AR0833_write_cmos_sensor(0x3040, 0x8041 ); 	// READ_MODE
   22c8c:	010c1004 	movi	r4,12352
   22c90:	01601054 	movui	r5,32833
   22c94:	00210440 	call	21044 <AR0833_write_cmos_sensor>

 //   AR0833_write_cmos_sensor(0x0400, 0x0002); 	// SCALING_MODE, 2: Enable horizontal and vertical scaling

    if (bScale)
   22c98:	e0bffe17 	ldw	r2,-8(fp)
   22c9c:	10000426 	beq	r2,zero,22cb0 <BYD_CONFIG_1024x768_RAW8+0x1bac>
        AR0833_write_cmos_sensor(0x0400, 0x0002); 	// SCALING_MODE, 2: Enable horizontal and vertical scaling
   22ca0:	01010004 	movi	r4,1024
   22ca4:	01400084 	movi	r5,2
   22ca8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
   22cac:	00000306 	br	22cbc <BYD_CONFIG_1024x768_RAW8+0x1bb8>
    else
    	AR0833_write_cmos_sensor(0x0400, 0x0000); 	// SCALING_MODE, 0: disable scaling
   22cb0:	01010004 	movi	r4,1024
   22cb4:	000b883a 	mov	r5,zero
   22cb8:	00210440 	call	21044 <AR0833_write_cmos_sensor>

    AR0833_write_cmos_sensor(0x0402, 0x0000); 	// SPATIAL_SAMPLING
   22cbc:	01010084 	movi	r4,1026
   22cc0:	000b883a 	mov	r5,zero
   22cc4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0404, 0x0020); 	// SCALE_M (default 0x0010)
   22cc8:	01010104 	movi	r4,1028
   22ccc:	01400804 	movi	r5,32
   22cd0:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x0408, 0x0208); 	// SECOND_RESIDUAL
   22cd4:	01010204 	movi	r4,1032
   22cd8:	01408204 	movi	r5,520
   22cdc:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x040A, 0x00C7); 	// SECOND_CROP
   22ce0:	01010284 	movi	r4,1034
   22ce4:	014031c4 	movi	r5,199
   22ce8:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x306E, 0x9090); 	// DATA_PATH_SELECT
   22cec:	010c1b84 	movi	r4,12398
   22cf0:	01642414 	movui	r5,37008
   22cf4:	00210440 	call	21044 <AR0833_write_cmos_sensor>
    AR0833_write_cmos_sensor(0x301A, 0x001C); 	// RESET_REGISTER (Lock_reg & stream)
   22cf8:	010c0684 	movi	r4,12314
   22cfc:	01400704 	movi	r5,28
   22d00:	00210440 	call	21044 <AR0833_write_cmos_sensor>




}
   22d04:	e037883a 	mov	sp,fp
   22d08:	dfc00117 	ldw	ra,4(sp)
   22d0c:	df000017 	ldw	fp,0(sp)
   22d10:	dec00204 	addi	sp,sp,8
   22d14:	f800283a 	ret

00022d18 <DDR3_Check>:
#include "system.h"
#include "camera_config.h"



bool DDR3_Check(void){
   22d18:	defffc04 	addi	sp,sp,-16
   22d1c:	dfc00315 	stw	ra,12(sp)
   22d20:	df000215 	stw	fp,8(sp)
   22d24:	df000204 	addi	fp,sp,8
	bool bSuccess = FALSE;
   22d28:	e03ffe15 	stw	zero,-8(fp)
	int Status;

	Status = IORD(DDR3_STATUS_BASE, 0x00);
   22d2c:	00800174 	movhi	r2,5
   22d30:	10800037 	ldwio	r2,0(r2)
   22d34:	e0bfff15 	stw	r2,-4(fp)
	if (Status == 0x0D)
   22d38:	e0bfff17 	ldw	r2,-4(fp)
   22d3c:	10800358 	cmpnei	r2,r2,13
   22d40:	1000031e 	bne	r2,zero,22d50 <DDR3_Check+0x38>
			bSuccess = TRUE;
   22d44:	00800044 	movi	r2,1
   22d48:	e0bffe15 	stw	r2,-8(fp)
   22d4c:	00000406 	br	22d60 <DDR3_Check+0x48>
	else
		printf("DDR3 Status(PLL_LOCK, CAL_SUCCESS, CAL_FAIL, CAL_DONE)=%xh\r\n", Status);
   22d50:	010000b4 	movhi	r4,2
   22d54:	21148d04 	addi	r4,r4,21044
   22d58:	e17fff17 	ldw	r5,-4(fp)
   22d5c:	00233740 	call	23374 <printf>

	return bSuccess;
   22d60:	e0bffe17 	ldw	r2,-8(fp)

}
   22d64:	e037883a 	mov	sp,fp
   22d68:	dfc00117 	ldw	ra,4(sp)
   22d6c:	df000017 	ldw	fp,0(sp)
   22d70:	dec00204 	addi	sp,sp,8
   22d74:	f800283a 	ret

00022d78 <MIPI_Init>:




// Default setup gives a physical 73.2 MHz internal clock for an external input clock of 24MHz.
bool MIPI_Init(bool bScale, bool bTestMode){
   22d78:	defff804 	addi	sp,sp,-32
   22d7c:	dfc00715 	stw	ra,28(sp)
   22d80:	df000615 	stw	fp,24(sp)
   22d84:	df000604 	addi	fp,sp,24
   22d88:	e13ffe15 	stw	r4,-8(fp)
   22d8c:	e17fff15 	stw	r5,-4(fp)
	bool bSuccess;
//	int i;
	alt_u16 Data16, sensor_id;
	alt_u8 Data8;
	const alt_u8 device_address = MIPI_I2C_ADDR;
   22d90:	00801b04 	movi	r2,108
   22d94:	e0bffc05 	stb	r2,-16(fp)
	int sw;
//	int d;

	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, 50*1000*1000,400*1000); //I2C: 400K
   22d98:	01000134 	movhi	r4,4
   22d9c:	21041004 	addi	r4,r4,4160
   22da0:	0140bef4 	movhi	r5,763
   22da4:	297c2004 	addi	r5,r5,-3968
   22da8:	018001b4 	movhi	r6,6
   22dac:	3186a004 	addi	r6,r6,6784
   22db0:	00203940 	call	20394 <oc_i2c_init_ex>
   22db4:	e0bffb15 	stw	r2,-20(fp)
	if (!bSuccess)
   22db8:	e0bffb17 	ldw	r2,-20(fp)
   22dbc:	1000031e 	bne	r2,zero,22dcc <MIPI_Init+0x54>
		printf("failed to init MIPI i2c\r\n");
   22dc0:	010000b4 	movhi	r4,2
   22dc4:	21149d04 	addi	r4,r4,21108
   22dc8:	00234400 	call	23440 <puts>

	// init
	if (bSuccess){
   22dcc:	e0bffb17 	ldw	r2,-20(fp)
   22dd0:	1000c126 	beq	r2,zero,230d8 <MIPI_Init+0x360>
		BYD_CONFIG_1024x768_RAW8(bScale, bTestMode);
   22dd4:	e13ffe17 	ldw	r4,-8(fp)
   22dd8:	e17fff17 	ldw	r5,-4(fp)
   22ddc:	00211040 	call	21104 <BYD_CONFIG_1024x768_RAW8>

		// dump setting info
		   // check version
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x00, (alt_u8 *)&Data16, sizeof(Data16))){
   22de0:	e17ffc03 	ldbu	r5,-16(fp)
   22de4:	e0fffd04 	addi	r3,fp,-12
   22de8:	00800084 	movi	r2,2
   22dec:	d8800015 	stw	r2,0(sp)
   22df0:	01000134 	movhi	r4,4
   22df4:	21041004 	addi	r4,r4,4160
   22df8:	000d883a 	mov	r6,zero
   22dfc:	180f883a 	mov	r7,r3
   22e00:	0020da80 	call	20da8 <OC_I2CL_Read>
   22e04:	10000b26 	beq	r2,zero,22e34 <MIPI_Init+0xbc>
				sensor_id = SWAP16(Data16);
   22e08:	e0bffd0b 	ldhu	r2,-12(fp)
   22e0c:	10bfffcc 	andi	r2,r2,65535
   22e10:	1009883a 	mov	r4,r2
   22e14:	0020ff80 	call	20ff8 <SWAP16>
   22e18:	e0bffc8d 	sth	r2,-14(fp)
				printf("chip_version_reg:%04xh\r\n", sensor_id);
   22e1c:	e0bffc8b 	ldhu	r2,-14(fp)
   22e20:	010000b4 	movhi	r4,2
   22e24:	2114a404 	addi	r4,r4,21136
   22e28:	100b883a 	mov	r5,r2
   22e2c:	00233740 	call	23374 <printf>
   22e30:	00000406 	br	22e44 <MIPI_Init+0xcc>
			}else{
				bSuccess = FALSE;
   22e34:	e03ffb15 	stw	zero,-20(fp)
				printf("failed to find the camera\r\n");
   22e38:	010000b4 	movhi	r4,2
   22e3c:	2114ab04 	addi	r4,r4,21164
   22e40:	00234400 	call	23440 <puts>
			}
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x02, (alt_u8 *)&Data8, sizeof(Data8)))
   22e44:	e17ffc03 	ldbu	r5,-16(fp)
   22e48:	e0fffd84 	addi	r3,fp,-10
   22e4c:	00800044 	movi	r2,1
   22e50:	d8800015 	stw	r2,0(sp)
   22e54:	01000134 	movhi	r4,4
   22e58:	21041004 	addi	r4,r4,4160
   22e5c:	01800084 	movi	r6,2
   22e60:	180f883a 	mov	r7,r3
   22e64:	0020da80 	call	20da8 <OC_I2CL_Read>
   22e68:	10000626 	beq	r2,zero,22e84 <MIPI_Init+0x10c>
				printf("revision_number:%02xh\r\n", Data8);
   22e6c:	e0bffd83 	ldbu	r2,-10(fp)
   22e70:	10803fcc 	andi	r2,r2,255
   22e74:	010000b4 	movhi	r4,2
   22e78:	2114b204 	addi	r4,r4,21192
   22e7c:	100b883a 	mov	r5,r2
   22e80:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x03, (alt_u8 *)&Data8, sizeof(Data8)))
   22e84:	e17ffc03 	ldbu	r5,-16(fp)
   22e88:	e0fffd84 	addi	r3,fp,-10
   22e8c:	00800044 	movi	r2,1
   22e90:	d8800015 	stw	r2,0(sp)
   22e94:	01000134 	movhi	r4,4
   22e98:	21041004 	addi	r4,r4,4160
   22e9c:	018000c4 	movi	r6,3
   22ea0:	180f883a 	mov	r7,r3
   22ea4:	0020da80 	call	20da8 <OC_I2CL_Read>
   22ea8:	10000626 	beq	r2,zero,22ec4 <MIPI_Init+0x14c>
				printf("manufacturer_id:%02xh\r\n", Data8);
   22eac:	e0bffd83 	ldbu	r2,-10(fp)
   22eb0:	10803fcc 	andi	r2,r2,255
   22eb4:	010000b4 	movhi	r4,2
   22eb8:	2114b804 	addi	r4,r4,21216
   22ebc:	100b883a 	mov	r5,r2
   22ec0:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x04, (alt_u8 *)&Data8, sizeof(Data8)))
   22ec4:	e17ffc03 	ldbu	r5,-16(fp)
   22ec8:	e0fffd84 	addi	r3,fp,-10
   22ecc:	00800044 	movi	r2,1
   22ed0:	d8800015 	stw	r2,0(sp)
   22ed4:	01000134 	movhi	r4,4
   22ed8:	21041004 	addi	r4,r4,4160
   22edc:	01800104 	movi	r6,4
   22ee0:	180f883a 	mov	r7,r3
   22ee4:	0020da80 	call	20da8 <OC_I2CL_Read>
   22ee8:	10000626 	beq	r2,zero,22f04 <MIPI_Init+0x18c>
				printf("smia_version:%02xh\r\n", Data8);
   22eec:	e0bffd83 	ldbu	r2,-10(fp)
   22ef0:	10803fcc 	andi	r2,r2,255
   22ef4:	010000b4 	movhi	r4,2
   22ef8:	2114be04 	addi	r4,r4,21240
   22efc:	100b883a 	mov	r5,r2
   22f00:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x05, (alt_u8 *)&Data8, sizeof(Data8)))
   22f04:	e17ffc03 	ldbu	r5,-16(fp)
   22f08:	e0fffd84 	addi	r3,fp,-10
   22f0c:	00800044 	movi	r2,1
   22f10:	d8800015 	stw	r2,0(sp)
   22f14:	01000134 	movhi	r4,4
   22f18:	21041004 	addi	r4,r4,4160
   22f1c:	01800144 	movi	r6,5
   22f20:	180f883a 	mov	r7,r3
   22f24:	0020da80 	call	20da8 <OC_I2CL_Read>
   22f28:	10000626 	beq	r2,zero,22f44 <MIPI_Init+0x1cc>
				printf("frame_count:%02xh\r\n", Data8);
   22f2c:	e0bffd83 	ldbu	r2,-10(fp)
   22f30:	10803fcc 	andi	r2,r2,255
   22f34:	010000b4 	movhi	r4,2
   22f38:	2114c404 	addi	r4,r4,21264
   22f3c:	100b883a 	mov	r5,r2
   22f40:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x06, (alt_u8 *)&Data8, sizeof(Data8)))
   22f44:	e17ffc03 	ldbu	r5,-16(fp)
   22f48:	e0fffd84 	addi	r3,fp,-10
   22f4c:	00800044 	movi	r2,1
   22f50:	d8800015 	stw	r2,0(sp)
   22f54:	01000134 	movhi	r4,4
   22f58:	21041004 	addi	r4,r4,4160
   22f5c:	01800184 	movi	r6,6
   22f60:	180f883a 	mov	r7,r3
   22f64:	0020da80 	call	20da8 <OC_I2CL_Read>
   22f68:	10000626 	beq	r2,zero,22f84 <MIPI_Init+0x20c>
				printf("pixel_order:%02xh\r\n", Data8);
   22f6c:	e0bffd83 	ldbu	r2,-10(fp)
   22f70:	10803fcc 	andi	r2,r2,255
   22f74:	010000b4 	movhi	r4,2
   22f78:	2114c904 	addi	r4,r4,21284
   22f7c:	100b883a 	mov	r5,r2
   22f80:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x08, (alt_u8 *)&Data16, sizeof(Data16)))
   22f84:	e17ffc03 	ldbu	r5,-16(fp)
   22f88:	e0fffd04 	addi	r3,fp,-12
   22f8c:	00800084 	movi	r2,2
   22f90:	d8800015 	stw	r2,0(sp)
   22f94:	01000134 	movhi	r4,4
   22f98:	21041004 	addi	r4,r4,4160
   22f9c:	01800204 	movi	r6,8
   22fa0:	180f883a 	mov	r7,r3
   22fa4:	0020da80 	call	20da8 <OC_I2CL_Read>
   22fa8:	10000826 	beq	r2,zero,22fcc <MIPI_Init+0x254>
				printf("data_pedestal:%04xh\r\n", SWAP16(Data16));
   22fac:	e0bffd0b 	ldhu	r2,-12(fp)
   22fb0:	10bfffcc 	andi	r2,r2,65535
   22fb4:	1009883a 	mov	r4,r2
   22fb8:	0020ff80 	call	20ff8 <SWAP16>
   22fbc:	010000b4 	movhi	r4,2
   22fc0:	2114ce04 	addi	r4,r4,21304
   22fc4:	100b883a 	mov	r5,r2
   22fc8:	00233740 	call	23374 <printf>
			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, BYD_MODE_SELECT, (alt_u8 *)&Data8, sizeof(Data8)))
   22fcc:	e17ffc03 	ldbu	r5,-16(fp)
   22fd0:	e0fffd84 	addi	r3,fp,-10
   22fd4:	00800044 	movi	r2,1
   22fd8:	d8800015 	stw	r2,0(sp)
   22fdc:	01000134 	movhi	r4,4
   22fe0:	21041004 	addi	r4,r4,4160
   22fe4:	01804004 	movi	r6,256
   22fe8:	180f883a 	mov	r7,r3
   22fec:	0020da80 	call	20da8 <OC_I2CL_Read>
   22ff0:	10000626 	beq	r2,zero,2300c <MIPI_Init+0x294>
				printf("mode_select:%02xh\r\n", Data8);
   22ff4:	e0bffd83 	ldbu	r2,-10(fp)
   22ff8:	10803fcc 	andi	r2,r2,255
   22ffc:	010000b4 	movhi	r4,2
   23000:	2114d404 	addi	r4,r4,21328
   23004:	100b883a 	mov	r5,r2
   23008:	00233740 	call	23374 <printf>

			if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x3024, (alt_u8 *)&Data8, sizeof(Data8))){
   2300c:	e17ffc03 	ldbu	r5,-16(fp)
   23010:	e0fffd84 	addi	r3,fp,-10
   23014:	00800044 	movi	r2,1
   23018:	d8800015 	stw	r2,0(sp)
   2301c:	01000134 	movhi	r4,4
   23020:	21041004 	addi	r4,r4,4160
   23024:	018c0904 	movi	r6,12324
   23028:	180f883a 	mov	r7,r3
   2302c:	0020da80 	call	20da8 <OC_I2CL_Read>
   23030:	10001526 	beq	r2,zero,23088 <MIPI_Init+0x310>
					printf("Pixel Order:%04xh\r\n", Data8);
   23034:	e0bffd83 	ldbu	r2,-10(fp)
   23038:	10803fcc 	andi	r2,r2,255
   2303c:	010000b4 	movhi	r4,2
   23040:	2114d904 	addi	r4,r4,21348
   23044:	100b883a 	mov	r5,r2
   23048:	00233740 	call	23374 <printf>
					printf("00 = First row is GreenR/Red, first pixel is GreenR\r\n");
   2304c:	010000b4 	movhi	r4,2
   23050:	2114de04 	addi	r4,r4,21368
   23054:	00234400 	call	23440 <puts>
					printf("01 = First row is GreenR/Red, first pixel is Red\r\n");
   23058:	010000b4 	movhi	r4,2
   2305c:	2114ec04 	addi	r4,r4,21424
   23060:	00234400 	call	23440 <puts>
					printf("02 = First row is Blue/GreenB, first pixel is Blue\r\n");
   23064:	010000b4 	movhi	r4,2
   23068:	2114f904 	addi	r4,r4,21476
   2306c:	00234400 	call	23440 <puts>
					printf("03 = First row is Blue/GreenB, first pixel is GreenB\r\n");
   23070:	010000b4 	movhi	r4,2
   23074:	21150604 	addi	r4,r4,21528
   23078:	00234400 	call	23440 <puts>
					printf("\r\n");
   2307c:	010000b4 	movhi	r4,2
   23080:	21151404 	addi	r4,r4,21584
   23084:	00234400 	call	23440 <puts>
				}



		if (OC_I2CL_Read(I2C_OPENCORES_MIPI_BASE, device_address, 0x0112, (alt_u8 *)&Data16, sizeof(Data16))){
   23088:	e17ffc03 	ldbu	r5,-16(fp)
   2308c:	e0fffd04 	addi	r3,fp,-12
   23090:	00800084 	movi	r2,2
   23094:	d8800015 	stw	r2,0(sp)
   23098:	01000134 	movhi	r4,4
   2309c:	21041004 	addi	r4,r4,4160
   230a0:	01804484 	movi	r6,274
   230a4:	180f883a 	mov	r7,r3
   230a8:	0020da80 	call	20da8 <OC_I2CL_Read>
   230ac:	10000a26 	beq	r2,zero,230d8 <MIPI_Init+0x360>
				sensor_id = SWAP16(Data16);
   230b0:	e0bffd0b 	ldhu	r2,-12(fp)
   230b4:	10bfffcc 	andi	r2,r2,65535
   230b8:	1009883a 	mov	r4,r2
   230bc:	0020ff80 	call	20ff8 <SWAP16>
   230c0:	e0bffc8d 	sth	r2,-14(fp)
				printf("ccp_data_format:%04xh\r\n", sensor_id);
   230c4:	e0bffc8b 	ldhu	r2,-14(fp)
   230c8:	010000b4 	movhi	r4,2
   230cc:	21151504 	addi	r4,r4,21588
   230d0:	100b883a 	mov	r5,r2
   230d4:	00233740 	call	23374 <printf>
			}

	} //

	oc_i2c_uninit(I2C_OPENCORES_MIPI_BASE);
   230d8:	01000134 	movhi	r4,4
   230dc:	21041004 	addi	r4,r4,4160
   230e0:	00204e00 	call	204e0 <oc_i2c_uninit>


	return bSuccess;
   230e4:	e0bffb17 	ldw	r2,-20(fp)
}
   230e8:	e037883a 	mov	sp,fp
   230ec:	dfc00117 	ldw	ra,4(sp)
   230f0:	df000017 	ldw	fp,0(sp)
   230f4:	dec00204 	addi	sp,sp,8
   230f8:	f800283a 	ret

000230fc <main>:

int main()
{
   230fc:	defffc04 	addi	sp,sp,-16
   23100:	dfc00315 	stw	ra,12(sp)
   23104:	df000215 	stw	fp,8(sp)
   23108:	df000204 	addi	fp,sp,8
	int SW, preSW;

	IOWR(LED_BASE, 0x00, 0xFF); // LED OFF
   2310c:	00c03fc4 	movi	r3,255
   23110:	00800134 	movhi	r2,4
   23114:	10841c04 	addi	r2,r2,4208
   23118:	10c00035 	stwio	r3,0(r2)

  printf("MIPI Demo\n");
   2311c:	010000b4 	movhi	r4,2
   23120:	21151b04 	addi	r4,r4,21612
   23124:	00234400 	call	23440 <puts>

  // ddr3 check
  if (!DDR3_Check())
   23128:	0022d180 	call	22d18 <DDR3_Check>
   2312c:	1000041e 	bne	r2,zero,23140 <main+0x44>
	  printf("DDR3 Init failed!\r\n");
   23130:	010000b4 	movhi	r4,2
   23134:	21151e04 	addi	r4,r4,21624
   23138:	00234400 	call	23440 <puts>
   2313c:	00000306 	br	2314c <main+0x50>
  else
	  printf("DDR3 Init successfully!\r\n");
   23140:	010000b4 	movhi	r4,2
   23144:	21152304 	addi	r4,r4,21644
   23148:	00234400 	call	23440 <puts>

  // mipi init
  SW = IORD(SW_BASE, 0x00) & 0x03;
   2314c:	00800134 	movhi	r2,4
   23150:	10841804 	addi	r2,r2,4192
   23154:	10800037 	ldwio	r2,0(r2)
   23158:	108000cc 	andi	r2,r2,3
   2315c:	e0bfff15 	stw	r2,-4(fp)
  //SW =0x02;
  preSW = SW;
   23160:	e0bfff17 	ldw	r2,-4(fp)
   23164:	e0bffe15 	stw	r2,-8(fp)
  if (!MIPI_Init(SW & 0x01, SW & 0x02)){
   23168:	e0bfff17 	ldw	r2,-4(fp)
   2316c:	10c0004c 	andi	r3,r2,1
   23170:	e0bfff17 	ldw	r2,-4(fp)
   23174:	1080008c 	andi	r2,r2,2
   23178:	1809883a 	mov	r4,r3
   2317c:	100b883a 	mov	r5,r2
   23180:	0022d780 	call	22d78 <MIPI_Init>
   23184:	1000081e 	bne	r2,zero,231a8 <main+0xac>
	  printf("MIPI_Init Init failed!\r\n");
   23188:	010000b4 	movhi	r4,2
   2318c:	21152a04 	addi	r4,r4,21672
   23190:	00234400 	call	23440 <puts>
  	  IOWR(LED_BASE, 0x00, 0xAF); // LED7/6:half light
   23194:	00c02bc4 	movi	r3,175
   23198:	00800134 	movhi	r2,4
   2319c:	10841c04 	addi	r2,r2,4208
   231a0:	10c00035 	stwio	r3,0(r2)
   231a4:	00000706 	br	231c4 <main+0xc8>
  }else{
	  printf("MIPI_Init Init successfully!\r\n");
   231a8:	010000b4 	movhi	r4,2
   231ac:	21153004 	addi	r4,r4,21696
   231b0:	00234400 	call	23440 <puts>
  	  IOWR(LED_BASE, 0x00, 0x0F); // LED7/6/5/4: full light
   231b4:	00c003c4 	movi	r3,15
   231b8:	00800134 	movhi	r2,4
   231bc:	10841c04 	addi	r2,r2,4208
   231c0:	10c00035 	stwio	r3,0(r2)
  }


  while(1){
	  SW = IORD(SW_BASE, 0x00) & 0x03;
   231c4:	00800134 	movhi	r2,4
   231c8:	10841804 	addi	r2,r2,4192
   231cc:	10800037 	ldwio	r2,0(r2)
   231d0:	108000cc 	andi	r2,r2,3
   231d4:	e0bfff15 	stw	r2,-4(fp)
	  //SW =0x02;
	  if (SW != preSW){
   231d8:	e0ffff17 	ldw	r3,-4(fp)
   231dc:	e0bffe17 	ldw	r2,-8(fp)
   231e0:	18800926 	beq	r3,r2,23208 <main+0x10c>
		  MIPI_Init(SW & 0x01, SW & 0x02);
   231e4:	e0bfff17 	ldw	r2,-4(fp)
   231e8:	10c0004c 	andi	r3,r2,1
   231ec:	e0bfff17 	ldw	r2,-4(fp)
   231f0:	1080008c 	andi	r2,r2,2
   231f4:	1809883a 	mov	r4,r3
   231f8:	100b883a 	mov	r5,r2
   231fc:	0022d780 	call	22d78 <MIPI_Init>
		  preSW = SW;
   23200:	e0bfff17 	ldw	r2,-4(fp)
   23204:	e0bffe15 	stw	r2,-8(fp)
	  }
  }
   23208:	003fee06 	br	231c4 <__alt_data_end+0xffff2054>

0002320c <udivmodsi4>:
   2320c:	2900182e 	bgeu	r5,r4,23270 <udivmodsi4+0x64>
   23210:	28001716 	blt	r5,zero,23270 <udivmodsi4+0x64>
   23214:	00800804 	movi	r2,32
   23218:	00c00044 	movi	r3,1
   2321c:	00000206 	br	23228 <udivmodsi4+0x1c>
   23220:	10001126 	beq	r2,zero,23268 <udivmodsi4+0x5c>
   23224:	28000516 	blt	r5,zero,2323c <udivmodsi4+0x30>
   23228:	294b883a 	add	r5,r5,r5
   2322c:	10bfffc4 	addi	r2,r2,-1
   23230:	18c7883a 	add	r3,r3,r3
   23234:	293ffa36 	bltu	r5,r4,23220 <__alt_data_end+0xffff20b0>
   23238:	18000b26 	beq	r3,zero,23268 <udivmodsi4+0x5c>
   2323c:	0005883a 	mov	r2,zero
   23240:	21400236 	bltu	r4,r5,2324c <udivmodsi4+0x40>
   23244:	2149c83a 	sub	r4,r4,r5
   23248:	10c4b03a 	or	r2,r2,r3
   2324c:	1806d07a 	srli	r3,r3,1
   23250:	280ad07a 	srli	r5,r5,1
   23254:	183ffa1e 	bne	r3,zero,23240 <__alt_data_end+0xffff20d0>
   23258:	3000011e 	bne	r6,zero,23260 <udivmodsi4+0x54>
   2325c:	f800283a 	ret
   23260:	2005883a 	mov	r2,r4
   23264:	f800283a 	ret
   23268:	0005883a 	mov	r2,zero
   2326c:	003ffa06 	br	23258 <__alt_data_end+0xffff20e8>
   23270:	00c00044 	movi	r3,1
   23274:	003ff106 	br	2323c <__alt_data_end+0xffff20cc>

00023278 <__divsi3>:
   23278:	defffe04 	addi	sp,sp,-8
   2327c:	dfc00115 	stw	ra,4(sp)
   23280:	dc000015 	stw	r16,0(sp)
   23284:	20000b16 	blt	r4,zero,232b4 <__divsi3+0x3c>
   23288:	0021883a 	mov	r16,zero
   2328c:	28000c16 	blt	r5,zero,232c0 <__divsi3+0x48>
   23290:	000d883a 	mov	r6,zero
   23294:	002320c0 	call	2320c <udivmodsi4>
   23298:	0407c83a 	sub	r3,zero,r16
   2329c:	1884f03a 	xor	r2,r3,r2
   232a0:	1405883a 	add	r2,r2,r16
   232a4:	dfc00117 	ldw	ra,4(sp)
   232a8:	dc000017 	ldw	r16,0(sp)
   232ac:	dec00204 	addi	sp,sp,8
   232b0:	f800283a 	ret
   232b4:	0109c83a 	sub	r4,zero,r4
   232b8:	04000044 	movi	r16,1
   232bc:	283ff40e 	bge	r5,zero,23290 <__alt_data_end+0xffff2120>
   232c0:	014bc83a 	sub	r5,zero,r5
   232c4:	8400005c 	xori	r16,r16,1
   232c8:	003ff106 	br	23290 <__alt_data_end+0xffff2120>

000232cc <__modsi3>:
   232cc:	defffd04 	addi	sp,sp,-12
   232d0:	dfc00215 	stw	ra,8(sp)
   232d4:	dc400115 	stw	r17,4(sp)
   232d8:	dc000015 	stw	r16,0(sp)
   232dc:	20000c16 	blt	r4,zero,23310 <__modsi3+0x44>
   232e0:	0023883a 	mov	r17,zero
   232e4:	0021883a 	mov	r16,zero
   232e8:	28000d16 	blt	r5,zero,23320 <__modsi3+0x54>
   232ec:	01800044 	movi	r6,1
   232f0:	002320c0 	call	2320c <udivmodsi4>
   232f4:	1404f03a 	xor	r2,r2,r16
   232f8:	8885883a 	add	r2,r17,r2
   232fc:	dfc00217 	ldw	ra,8(sp)
   23300:	dc400117 	ldw	r17,4(sp)
   23304:	dc000017 	ldw	r16,0(sp)
   23308:	dec00304 	addi	sp,sp,12
   2330c:	f800283a 	ret
   23310:	0109c83a 	sub	r4,zero,r4
   23314:	04400044 	movi	r17,1
   23318:	043fffc4 	movi	r16,-1
   2331c:	283ff30e 	bge	r5,zero,232ec <__alt_data_end+0xffff217c>
   23320:	014bc83a 	sub	r5,zero,r5
   23324:	003ff106 	br	232ec <__alt_data_end+0xffff217c>

00023328 <__udivsi3>:
   23328:	000d883a 	mov	r6,zero
   2332c:	002320c1 	jmpi	2320c <udivmodsi4>

00023330 <__umodsi3>:
   23330:	01800044 	movi	r6,1
   23334:	002320c1 	jmpi	2320c <udivmodsi4>

00023338 <_printf_r>:
   23338:	defffd04 	addi	sp,sp,-12
   2333c:	dfc00015 	stw	ra,0(sp)
   23340:	d9800115 	stw	r6,4(sp)
   23344:	d9c00215 	stw	r7,8(sp)
   23348:	20c00217 	ldw	r3,8(r4)
   2334c:	280d883a 	mov	r6,r5
   23350:	014000b4 	movhi	r5,2
   23354:	294e9104 	addi	r5,r5,14916
   23358:	19400115 	stw	r5,4(r3)
   2335c:	21400217 	ldw	r5,8(r4)
   23360:	d9c00104 	addi	r7,sp,4
   23364:	00234dc0 	call	234dc <___vfprintf_internal_r>
   23368:	dfc00017 	ldw	ra,0(sp)
   2336c:	dec00304 	addi	sp,sp,12
   23370:	f800283a 	ret

00023374 <printf>:
   23374:	defffc04 	addi	sp,sp,-16
   23378:	dfc00015 	stw	ra,0(sp)
   2337c:	d9400115 	stw	r5,4(sp)
   23380:	d9800215 	stw	r6,8(sp)
   23384:	d9c00315 	stw	r7,12(sp)
   23388:	008000b4 	movhi	r2,2
   2338c:	1095ee04 	addi	r2,r2,22456
   23390:	10800017 	ldw	r2,0(r2)
   23394:	200b883a 	mov	r5,r4
   23398:	010000b4 	movhi	r4,2
   2339c:	10c00217 	ldw	r3,8(r2)
   233a0:	210e9104 	addi	r4,r4,14916
   233a4:	d9800104 	addi	r6,sp,4
   233a8:	19000115 	stw	r4,4(r3)
   233ac:	11000217 	ldw	r4,8(r2)
   233b0:	0023a200 	call	23a20 <__vfprintf_internal>
   233b4:	dfc00017 	ldw	ra,0(sp)
   233b8:	dec00404 	addi	sp,sp,16
   233bc:	f800283a 	ret

000233c0 <_puts_r>:
   233c0:	defffd04 	addi	sp,sp,-12
   233c4:	dc000015 	stw	r16,0(sp)
   233c8:	2021883a 	mov	r16,r4
   233cc:	2809883a 	mov	r4,r5
   233d0:	dfc00215 	stw	ra,8(sp)
   233d4:	dc400115 	stw	r17,4(sp)
   233d8:	2823883a 	mov	r17,r5
   233dc:	00234540 	call	23454 <strlen>
   233e0:	81400217 	ldw	r5,8(r16)
   233e4:	00c000b4 	movhi	r3,2
   233e8:	18ce9104 	addi	r3,r3,14916
   233ec:	28c00115 	stw	r3,4(r5)
   233f0:	8009883a 	mov	r4,r16
   233f4:	880d883a 	mov	r6,r17
   233f8:	100f883a 	mov	r7,r2
   233fc:	0023a440 	call	23a44 <__sfvwrite_small_dev>
   23400:	00ffffc4 	movi	r3,-1
   23404:	10c00926 	beq	r2,r3,2342c <_puts_r+0x6c>
   23408:	81400217 	ldw	r5,8(r16)
   2340c:	018000b4 	movhi	r6,2
   23410:	8009883a 	mov	r4,r16
   23414:	28800117 	ldw	r2,4(r5)
   23418:	31953804 	addi	r6,r6,21728
   2341c:	01c00044 	movi	r7,1
   23420:	103ee83a 	callr	r2
   23424:	10bfffe0 	cmpeqi	r2,r2,-1
   23428:	0085c83a 	sub	r2,zero,r2
   2342c:	dfc00217 	ldw	ra,8(sp)
   23430:	dc400117 	ldw	r17,4(sp)
   23434:	dc000017 	ldw	r16,0(sp)
   23438:	dec00304 	addi	sp,sp,12
   2343c:	f800283a 	ret

00023440 <puts>:
   23440:	008000b4 	movhi	r2,2
   23444:	1095ee04 	addi	r2,r2,22456
   23448:	200b883a 	mov	r5,r4
   2344c:	11000017 	ldw	r4,0(r2)
   23450:	00233c01 	jmpi	233c0 <_puts_r>

00023454 <strlen>:
   23454:	2005883a 	mov	r2,r4
   23458:	10c00007 	ldb	r3,0(r2)
   2345c:	18000226 	beq	r3,zero,23468 <strlen+0x14>
   23460:	10800044 	addi	r2,r2,1
   23464:	003ffc06 	br	23458 <__alt_data_end+0xffff22e8>
   23468:	1105c83a 	sub	r2,r2,r4
   2346c:	f800283a 	ret

00023470 <print_repeat>:
   23470:	defffb04 	addi	sp,sp,-20
   23474:	dc800315 	stw	r18,12(sp)
   23478:	dc400215 	stw	r17,8(sp)
   2347c:	dc000115 	stw	r16,4(sp)
   23480:	dfc00415 	stw	ra,16(sp)
   23484:	2025883a 	mov	r18,r4
   23488:	2823883a 	mov	r17,r5
   2348c:	d9800005 	stb	r6,0(sp)
   23490:	3821883a 	mov	r16,r7
   23494:	04000a0e 	bge	zero,r16,234c0 <print_repeat+0x50>
   23498:	88800117 	ldw	r2,4(r17)
   2349c:	9009883a 	mov	r4,r18
   234a0:	880b883a 	mov	r5,r17
   234a4:	d80d883a 	mov	r6,sp
   234a8:	01c00044 	movi	r7,1
   234ac:	103ee83a 	callr	r2
   234b0:	843fffc4 	addi	r16,r16,-1
   234b4:	103ff726 	beq	r2,zero,23494 <__alt_data_end+0xffff2324>
   234b8:	00bfffc4 	movi	r2,-1
   234bc:	00000106 	br	234c4 <print_repeat+0x54>
   234c0:	0005883a 	mov	r2,zero
   234c4:	dfc00417 	ldw	ra,16(sp)
   234c8:	dc800317 	ldw	r18,12(sp)
   234cc:	dc400217 	ldw	r17,8(sp)
   234d0:	dc000117 	ldw	r16,4(sp)
   234d4:	dec00504 	addi	sp,sp,20
   234d8:	f800283a 	ret

000234dc <___vfprintf_internal_r>:
   234dc:	deffe404 	addi	sp,sp,-112
   234e0:	d8c00804 	addi	r3,sp,32
   234e4:	df001a15 	stw	fp,104(sp)
   234e8:	ddc01915 	stw	r23,100(sp)
   234ec:	dd801815 	stw	r22,96(sp)
   234f0:	dd401715 	stw	r21,92(sp)
   234f4:	dd001615 	stw	r20,88(sp)
   234f8:	dcc01515 	stw	r19,84(sp)
   234fc:	dc801415 	stw	r18,80(sp)
   23500:	dc401315 	stw	r17,76(sp)
   23504:	dc001215 	stw	r16,72(sp)
   23508:	dfc01b15 	stw	ra,108(sp)
   2350c:	2027883a 	mov	r19,r4
   23510:	2839883a 	mov	fp,r5
   23514:	382f883a 	mov	r23,r7
   23518:	d9800f15 	stw	r6,60(sp)
   2351c:	0021883a 	mov	r16,zero
   23520:	d8000e15 	stw	zero,56(sp)
   23524:	002d883a 	mov	r22,zero
   23528:	0029883a 	mov	r20,zero
   2352c:	0025883a 	mov	r18,zero
   23530:	0023883a 	mov	r17,zero
   23534:	d8000c15 	stw	zero,48(sp)
   23538:	d8000b15 	stw	zero,44(sp)
   2353c:	002b883a 	mov	r21,zero
   23540:	d8c00915 	stw	r3,36(sp)
   23544:	d8c00f17 	ldw	r3,60(sp)
   23548:	19000003 	ldbu	r4,0(r3)
   2354c:	20803fcc 	andi	r2,r4,255
   23550:	1080201c 	xori	r2,r2,128
   23554:	10bfe004 	addi	r2,r2,-128
   23558:	10012426 	beq	r2,zero,239ec <___vfprintf_internal_r+0x510>
   2355c:	00c00044 	movi	r3,1
   23560:	a8c01426 	beq	r21,r3,235b4 <___vfprintf_internal_r+0xd8>
   23564:	1d400216 	blt	r3,r21,23570 <___vfprintf_internal_r+0x94>
   23568:	a8000626 	beq	r21,zero,23584 <___vfprintf_internal_r+0xa8>
   2356c:	00011b06 	br	239dc <___vfprintf_internal_r+0x500>
   23570:	01400084 	movi	r5,2
   23574:	a9401d26 	beq	r21,r5,235ec <___vfprintf_internal_r+0x110>
   23578:	014000c4 	movi	r5,3
   2357c:	a9402926 	beq	r21,r5,23624 <___vfprintf_internal_r+0x148>
   23580:	00011606 	br	239dc <___vfprintf_internal_r+0x500>
   23584:	01400944 	movi	r5,37
   23588:	11410326 	beq	r2,r5,23998 <___vfprintf_internal_r+0x4bc>
   2358c:	e0800117 	ldw	r2,4(fp)
   23590:	d9000005 	stb	r4,0(sp)
   23594:	e00b883a 	mov	r5,fp
   23598:	9809883a 	mov	r4,r19
   2359c:	d80d883a 	mov	r6,sp
   235a0:	01c00044 	movi	r7,1
   235a4:	103ee83a 	callr	r2
   235a8:	1000de1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   235ac:	84000044 	addi	r16,r16,1
   235b0:	00010a06 	br	239dc <___vfprintf_internal_r+0x500>
   235b4:	01400c04 	movi	r5,48
   235b8:	11410026 	beq	r2,r5,239bc <___vfprintf_internal_r+0x4e0>
   235bc:	01400944 	movi	r5,37
   235c0:	11400a1e 	bne	r2,r5,235ec <___vfprintf_internal_r+0x110>
   235c4:	d8800005 	stb	r2,0(sp)
   235c8:	e0800117 	ldw	r2,4(fp)
   235cc:	9809883a 	mov	r4,r19
   235d0:	e00b883a 	mov	r5,fp
   235d4:	d80d883a 	mov	r6,sp
   235d8:	a80f883a 	mov	r7,r21
   235dc:	103ee83a 	callr	r2
   235e0:	1000d01e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   235e4:	84000044 	addi	r16,r16,1
   235e8:	0000fb06 	br	239d8 <___vfprintf_internal_r+0x4fc>
   235ec:	217ff404 	addi	r5,r4,-48
   235f0:	29403fcc 	andi	r5,r5,255
   235f4:	00c00244 	movi	r3,9
   235f8:	19400736 	bltu	r3,r5,23618 <___vfprintf_internal_r+0x13c>
   235fc:	00bfffc4 	movi	r2,-1
   23600:	88800226 	beq	r17,r2,2360c <___vfprintf_internal_r+0x130>
   23604:	8c4002a4 	muli	r17,r17,10
   23608:	00000106 	br	23610 <___vfprintf_internal_r+0x134>
   2360c:	0023883a 	mov	r17,zero
   23610:	8963883a 	add	r17,r17,r5
   23614:	0000ea06 	br	239c0 <___vfprintf_internal_r+0x4e4>
   23618:	01400b84 	movi	r5,46
   2361c:	1140ec26 	beq	r2,r5,239d0 <___vfprintf_internal_r+0x4f4>
   23620:	05400084 	movi	r21,2
   23624:	213ff404 	addi	r4,r4,-48
   23628:	21003fcc 	andi	r4,r4,255
   2362c:	00c00244 	movi	r3,9
   23630:	19000736 	bltu	r3,r4,23650 <___vfprintf_internal_r+0x174>
   23634:	00bfffc4 	movi	r2,-1
   23638:	90800226 	beq	r18,r2,23644 <___vfprintf_internal_r+0x168>
   2363c:	948002a4 	muli	r18,r18,10
   23640:	00000106 	br	23648 <___vfprintf_internal_r+0x16c>
   23644:	0025883a 	mov	r18,zero
   23648:	9125883a 	add	r18,r18,r4
   2364c:	0000e306 	br	239dc <___vfprintf_internal_r+0x500>
   23650:	00c01b04 	movi	r3,108
   23654:	10c0dc26 	beq	r2,r3,239c8 <___vfprintf_internal_r+0x4ec>
   23658:	013fffc4 	movi	r4,-1
   2365c:	91000226 	beq	r18,r4,23668 <___vfprintf_internal_r+0x18c>
   23660:	d8000b15 	stw	zero,44(sp)
   23664:	00000106 	br	2366c <___vfprintf_internal_r+0x190>
   23668:	04800044 	movi	r18,1
   2366c:	01001a44 	movi	r4,105
   23670:	11001626 	beq	r2,r4,236cc <___vfprintf_internal_r+0x1f0>
   23674:	20800916 	blt	r4,r2,2369c <___vfprintf_internal_r+0x1c0>
   23678:	010018c4 	movi	r4,99
   2367c:	11009226 	beq	r2,r4,238c8 <___vfprintf_internal_r+0x3ec>
   23680:	01001904 	movi	r4,100
   23684:	11001126 	beq	r2,r4,236cc <___vfprintf_internal_r+0x1f0>
   23688:	01001604 	movi	r4,88
   2368c:	1100d21e 	bne	r2,r4,239d8 <___vfprintf_internal_r+0x4fc>
   23690:	00c00044 	movi	r3,1
   23694:	d8c00e15 	stw	r3,56(sp)
   23698:	00001406 	br	236ec <___vfprintf_internal_r+0x210>
   2369c:	01001cc4 	movi	r4,115
   236a0:	1100a226 	beq	r2,r4,2392c <___vfprintf_internal_r+0x450>
   236a4:	20800416 	blt	r4,r2,236b8 <___vfprintf_internal_r+0x1dc>
   236a8:	01001bc4 	movi	r4,111
   236ac:	1100ca1e 	bne	r2,r4,239d8 <___vfprintf_internal_r+0x4fc>
   236b0:	05000204 	movi	r20,8
   236b4:	00000e06 	br	236f0 <___vfprintf_internal_r+0x214>
   236b8:	01001d44 	movi	r4,117
   236bc:	11000c26 	beq	r2,r4,236f0 <___vfprintf_internal_r+0x214>
   236c0:	01001e04 	movi	r4,120
   236c4:	11000926 	beq	r2,r4,236ec <___vfprintf_internal_r+0x210>
   236c8:	0000c306 	br	239d8 <___vfprintf_internal_r+0x4fc>
   236cc:	b8800104 	addi	r2,r23,4
   236d0:	b0000726 	beq	r22,zero,236f0 <___vfprintf_internal_r+0x214>
   236d4:	d8800d15 	stw	r2,52(sp)
   236d8:	bdc00017 	ldw	r23,0(r23)
   236dc:	b800080e 	bge	r23,zero,23700 <___vfprintf_internal_r+0x224>
   236e0:	05efc83a 	sub	r23,zero,r23
   236e4:	02400044 	movi	r9,1
   236e8:	00000606 	br	23704 <___vfprintf_internal_r+0x228>
   236ec:	05000404 	movi	r20,16
   236f0:	b8c00104 	addi	r3,r23,4
   236f4:	d8c00d15 	stw	r3,52(sp)
   236f8:	bdc00017 	ldw	r23,0(r23)
   236fc:	002d883a 	mov	r22,zero
   23700:	0013883a 	mov	r9,zero
   23704:	002b883a 	mov	r21,zero
   23708:	dd4d883a 	add	r6,sp,r21
   2370c:	b8001626 	beq	r23,zero,23768 <___vfprintf_internal_r+0x28c>
   23710:	b809883a 	mov	r4,r23
   23714:	a00b883a 	mov	r5,r20
   23718:	d9801015 	stw	r6,64(sp)
   2371c:	da401115 	stw	r9,68(sp)
   23720:	00233280 	call	23328 <__udivsi3>
   23724:	a089383a 	mul	r4,r20,r2
   23728:	00c00244 	movi	r3,9
   2372c:	d9801017 	ldw	r6,64(sp)
   23730:	b92fc83a 	sub	r23,r23,r4
   23734:	da401117 	ldw	r9,68(sp)
   23738:	1dc00216 	blt	r3,r23,23744 <___vfprintf_internal_r+0x268>
   2373c:	bdc00c04 	addi	r23,r23,48
   23740:	00000506 	br	23758 <___vfprintf_internal_r+0x27c>
   23744:	d8c00e17 	ldw	r3,56(sp)
   23748:	18000226 	beq	r3,zero,23754 <___vfprintf_internal_r+0x278>
   2374c:	bdc00dc4 	addi	r23,r23,55
   23750:	00000106 	br	23758 <___vfprintf_internal_r+0x27c>
   23754:	bdc015c4 	addi	r23,r23,87
   23758:	35c00005 	stb	r23,0(r6)
   2375c:	ad400044 	addi	r21,r21,1
   23760:	102f883a 	mov	r23,r2
   23764:	003fe806 	br	23708 <__alt_data_end+0xffff2598>
   23768:	36c7c83a 	sub	r3,r6,sp
   2376c:	d8c00a15 	stw	r3,40(sp)
   23770:	90c5c83a 	sub	r2,r18,r3
   23774:	302f883a 	mov	r23,r6
   23778:	00800e0e 	bge	zero,r2,237b4 <___vfprintf_internal_r+0x2d8>
   2377c:	302b883a 	mov	r21,r6
   23780:	3085883a 	add	r2,r6,r2
   23784:	01400c04 	movi	r5,48
   23788:	d8c00917 	ldw	r3,36(sp)
   2378c:	a809883a 	mov	r4,r21
   23790:	a8c0052e 	bgeu	r21,r3,237a8 <___vfprintf_internal_r+0x2cc>
   23794:	ad400044 	addi	r21,r21,1
   23798:	21400005 	stb	r5,0(r4)
   2379c:	a82f883a 	mov	r23,r21
   237a0:	a8bff91e 	bne	r21,r2,23788 <__alt_data_end+0xffff2618>
   237a4:	00000106 	br	237ac <___vfprintf_internal_r+0x2d0>
   237a8:	a82f883a 	mov	r23,r21
   237ac:	aeebc83a 	sub	r21,r21,sp
   237b0:	dd400a15 	stw	r21,40(sp)
   237b4:	d8c00a17 	ldw	r3,40(sp)
   237b8:	1a51883a 	add	r8,r3,r9
   237bc:	d8c00b17 	ldw	r3,44(sp)
   237c0:	8a2bc83a 	sub	r21,r17,r8
   237c4:	18001726 	beq	r3,zero,23824 <___vfprintf_internal_r+0x348>
   237c8:	48000a26 	beq	r9,zero,237f4 <___vfprintf_internal_r+0x318>
   237cc:	00800b44 	movi	r2,45
   237d0:	d8800805 	stb	r2,32(sp)
   237d4:	e0800117 	ldw	r2,4(fp)
   237d8:	9809883a 	mov	r4,r19
   237dc:	e00b883a 	mov	r5,fp
   237e0:	d9800804 	addi	r6,sp,32
   237e4:	01c00044 	movi	r7,1
   237e8:	103ee83a 	callr	r2
   237ec:	10004d1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   237f0:	84000044 	addi	r16,r16,1
   237f4:	0540070e 	bge	zero,r21,23814 <___vfprintf_internal_r+0x338>
   237f8:	9809883a 	mov	r4,r19
   237fc:	e00b883a 	mov	r5,fp
   23800:	01800c04 	movi	r6,48
   23804:	a80f883a 	mov	r7,r21
   23808:	00234700 	call	23470 <print_repeat>
   2380c:	1000451e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   23810:	8561883a 	add	r16,r16,r21
   23814:	d8c00a17 	ldw	r3,40(sp)
   23818:	b811883a 	mov	r8,r23
   2381c:	1debc83a 	sub	r21,r3,r23
   23820:	00002206 	br	238ac <___vfprintf_internal_r+0x3d0>
   23824:	0540090e 	bge	zero,r21,2384c <___vfprintf_internal_r+0x370>
   23828:	9809883a 	mov	r4,r19
   2382c:	e00b883a 	mov	r5,fp
   23830:	01800804 	movi	r6,32
   23834:	a80f883a 	mov	r7,r21
   23838:	da401115 	stw	r9,68(sp)
   2383c:	00234700 	call	23470 <print_repeat>
   23840:	da401117 	ldw	r9,68(sp)
   23844:	1000371e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   23848:	8561883a 	add	r16,r16,r21
   2384c:	483ff126 	beq	r9,zero,23814 <__alt_data_end+0xffff26a4>
   23850:	00800b44 	movi	r2,45
   23854:	d8800805 	stb	r2,32(sp)
   23858:	e0800117 	ldw	r2,4(fp)
   2385c:	9809883a 	mov	r4,r19
   23860:	e00b883a 	mov	r5,fp
   23864:	d9800804 	addi	r6,sp,32
   23868:	01c00044 	movi	r7,1
   2386c:	103ee83a 	callr	r2
   23870:	10002c1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   23874:	84000044 	addi	r16,r16,1
   23878:	003fe606 	br	23814 <__alt_data_end+0xffff26a4>
   2387c:	423fffc4 	addi	r8,r8,-1
   23880:	40800003 	ldbu	r2,0(r8)
   23884:	9809883a 	mov	r4,r19
   23888:	e00b883a 	mov	r5,fp
   2388c:	d8800805 	stb	r2,32(sp)
   23890:	e0800117 	ldw	r2,4(fp)
   23894:	d9800804 	addi	r6,sp,32
   23898:	da001015 	stw	r8,64(sp)
   2389c:	01c00044 	movi	r7,1
   238a0:	103ee83a 	callr	r2
   238a4:	da001017 	ldw	r8,64(sp)
   238a8:	10001e1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   238ac:	8205c83a 	sub	r2,r16,r8
   238b0:	4549883a 	add	r4,r8,r21
   238b4:	b885883a 	add	r2,r23,r2
   238b8:	013ff016 	blt	zero,r4,2387c <__alt_data_end+0xffff270c>
   238bc:	1021883a 	mov	r16,r2
   238c0:	ddc00d17 	ldw	r23,52(sp)
   238c4:	00004406 	br	239d8 <___vfprintf_internal_r+0x4fc>
   238c8:	00800044 	movi	r2,1
   238cc:	1440080e 	bge	r2,r17,238f0 <___vfprintf_internal_r+0x414>
   238d0:	8d7fffc4 	addi	r21,r17,-1
   238d4:	9809883a 	mov	r4,r19
   238d8:	e00b883a 	mov	r5,fp
   238dc:	01800804 	movi	r6,32
   238e0:	a80f883a 	mov	r7,r21
   238e4:	00234700 	call	23470 <print_repeat>
   238e8:	10000e1e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   238ec:	8561883a 	add	r16,r16,r21
   238f0:	b8800017 	ldw	r2,0(r23)
   238f4:	9809883a 	mov	r4,r19
   238f8:	e00b883a 	mov	r5,fp
   238fc:	d8800005 	stb	r2,0(sp)
   23900:	e0800117 	ldw	r2,4(fp)
   23904:	d80d883a 	mov	r6,sp
   23908:	01c00044 	movi	r7,1
   2390c:	bd400104 	addi	r21,r23,4
   23910:	103ee83a 	callr	r2
   23914:	1000031e 	bne	r2,zero,23924 <___vfprintf_internal_r+0x448>
   23918:	84000044 	addi	r16,r16,1
   2391c:	a82f883a 	mov	r23,r21
   23920:	00002d06 	br	239d8 <___vfprintf_internal_r+0x4fc>
   23924:	00bfffc4 	movi	r2,-1
   23928:	00003106 	br	239f0 <___vfprintf_internal_r+0x514>
   2392c:	bd400017 	ldw	r21,0(r23)
   23930:	b8c00104 	addi	r3,r23,4
   23934:	d8c00a15 	stw	r3,40(sp)
   23938:	a809883a 	mov	r4,r21
   2393c:	00234540 	call	23454 <strlen>
   23940:	8893c83a 	sub	r9,r17,r2
   23944:	102f883a 	mov	r23,r2
   23948:	0240090e 	bge	zero,r9,23970 <___vfprintf_internal_r+0x494>
   2394c:	480f883a 	mov	r7,r9
   23950:	9809883a 	mov	r4,r19
   23954:	e00b883a 	mov	r5,fp
   23958:	01800804 	movi	r6,32
   2395c:	da401115 	stw	r9,68(sp)
   23960:	00234700 	call	23470 <print_repeat>
   23964:	da401117 	ldw	r9,68(sp)
   23968:	103fee1e 	bne	r2,zero,23924 <__alt_data_end+0xffff27b4>
   2396c:	8261883a 	add	r16,r16,r9
   23970:	e0800117 	ldw	r2,4(fp)
   23974:	9809883a 	mov	r4,r19
   23978:	e00b883a 	mov	r5,fp
   2397c:	a80d883a 	mov	r6,r21
   23980:	b80f883a 	mov	r7,r23
   23984:	103ee83a 	callr	r2
   23988:	103fe61e 	bne	r2,zero,23924 <__alt_data_end+0xffff27b4>
   2398c:	85e1883a 	add	r16,r16,r23
   23990:	ddc00a17 	ldw	r23,40(sp)
   23994:	00001006 	br	239d8 <___vfprintf_internal_r+0x4fc>
   23998:	05800044 	movi	r22,1
   2399c:	04bfffc4 	movi	r18,-1
   239a0:	d8000e15 	stw	zero,56(sp)
   239a4:	05000284 	movi	r20,10
   239a8:	9023883a 	mov	r17,r18
   239ac:	d8000c15 	stw	zero,48(sp)
   239b0:	d8000b15 	stw	zero,44(sp)
   239b4:	b02b883a 	mov	r21,r22
   239b8:	00000806 	br	239dc <___vfprintf_internal_r+0x500>
   239bc:	dd400b15 	stw	r21,44(sp)
   239c0:	05400084 	movi	r21,2
   239c4:	00000506 	br	239dc <___vfprintf_internal_r+0x500>
   239c8:	00c00044 	movi	r3,1
   239cc:	d8c00c15 	stw	r3,48(sp)
   239d0:	054000c4 	movi	r21,3
   239d4:	00000106 	br	239dc <___vfprintf_internal_r+0x500>
   239d8:	002b883a 	mov	r21,zero
   239dc:	d8c00f17 	ldw	r3,60(sp)
   239e0:	18c00044 	addi	r3,r3,1
   239e4:	d8c00f15 	stw	r3,60(sp)
   239e8:	003ed606 	br	23544 <__alt_data_end+0xffff23d4>
   239ec:	8005883a 	mov	r2,r16
   239f0:	dfc01b17 	ldw	ra,108(sp)
   239f4:	df001a17 	ldw	fp,104(sp)
   239f8:	ddc01917 	ldw	r23,100(sp)
   239fc:	dd801817 	ldw	r22,96(sp)
   23a00:	dd401717 	ldw	r21,92(sp)
   23a04:	dd001617 	ldw	r20,88(sp)
   23a08:	dcc01517 	ldw	r19,84(sp)
   23a0c:	dc801417 	ldw	r18,80(sp)
   23a10:	dc401317 	ldw	r17,76(sp)
   23a14:	dc001217 	ldw	r16,72(sp)
   23a18:	dec01c04 	addi	sp,sp,112
   23a1c:	f800283a 	ret

00023a20 <__vfprintf_internal>:
   23a20:	2007883a 	mov	r3,r4
   23a24:	010000b4 	movhi	r4,2
   23a28:	2115ee04 	addi	r4,r4,22456
   23a2c:	21000017 	ldw	r4,0(r4)
   23a30:	2805883a 	mov	r2,r5
   23a34:	300f883a 	mov	r7,r6
   23a38:	180b883a 	mov	r5,r3
   23a3c:	100d883a 	mov	r6,r2
   23a40:	00234dc1 	jmpi	234dc <___vfprintf_internal_r>

00023a44 <__sfvwrite_small_dev>:
   23a44:	2880000b 	ldhu	r2,0(r5)
   23a48:	defffa04 	addi	sp,sp,-24
   23a4c:	dc000015 	stw	r16,0(sp)
   23a50:	dfc00515 	stw	ra,20(sp)
   23a54:	dd000415 	stw	r20,16(sp)
   23a58:	dcc00315 	stw	r19,12(sp)
   23a5c:	dc800215 	stw	r18,8(sp)
   23a60:	dc400115 	stw	r17,4(sp)
   23a64:	1080020c 	andi	r2,r2,8
   23a68:	2821883a 	mov	r16,r5
   23a6c:	10001726 	beq	r2,zero,23acc <__sfvwrite_small_dev+0x88>
   23a70:	2880008f 	ldh	r2,2(r5)
   23a74:	10001216 	blt	r2,zero,23ac0 <__sfvwrite_small_dev+0x7c>
   23a78:	2027883a 	mov	r19,r4
   23a7c:	3025883a 	mov	r18,r6
   23a80:	3823883a 	mov	r17,r7
   23a84:	05010004 	movi	r20,1024
   23a88:	04400b0e 	bge	zero,r17,23ab8 <__sfvwrite_small_dev+0x74>
   23a8c:	8140008f 	ldh	r5,2(r16)
   23a90:	880f883a 	mov	r7,r17
   23a94:	a440010e 	bge	r20,r17,23a9c <__sfvwrite_small_dev+0x58>
   23a98:	01c10004 	movi	r7,1024
   23a9c:	9809883a 	mov	r4,r19
   23aa0:	900d883a 	mov	r6,r18
   23aa4:	0023af00 	call	23af0 <_write_r>
   23aa8:	0080050e 	bge	zero,r2,23ac0 <__sfvwrite_small_dev+0x7c>
   23aac:	88a3c83a 	sub	r17,r17,r2
   23ab0:	90a5883a 	add	r18,r18,r2
   23ab4:	003ff406 	br	23a88 <__alt_data_end+0xffff2918>
   23ab8:	0005883a 	mov	r2,zero
   23abc:	00000406 	br	23ad0 <__sfvwrite_small_dev+0x8c>
   23ac0:	8080000b 	ldhu	r2,0(r16)
   23ac4:	10801014 	ori	r2,r2,64
   23ac8:	8080000d 	sth	r2,0(r16)
   23acc:	00bfffc4 	movi	r2,-1
   23ad0:	dfc00517 	ldw	ra,20(sp)
   23ad4:	dd000417 	ldw	r20,16(sp)
   23ad8:	dcc00317 	ldw	r19,12(sp)
   23adc:	dc800217 	ldw	r18,8(sp)
   23ae0:	dc400117 	ldw	r17,4(sp)
   23ae4:	dc000017 	ldw	r16,0(sp)
   23ae8:	dec00604 	addi	sp,sp,24
   23aec:	f800283a 	ret

00023af0 <_write_r>:
   23af0:	defffd04 	addi	sp,sp,-12
   23af4:	dc000015 	stw	r16,0(sp)
   23af8:	040000b4 	movhi	r16,2
   23afc:	dc400115 	stw	r17,4(sp)
   23b00:	8416b004 	addi	r16,r16,23232
   23b04:	2023883a 	mov	r17,r4
   23b08:	2809883a 	mov	r4,r5
   23b0c:	300b883a 	mov	r5,r6
   23b10:	380d883a 	mov	r6,r7
   23b14:	dfc00215 	stw	ra,8(sp)
   23b18:	80000015 	stw	zero,0(r16)
   23b1c:	0023d080 	call	23d08 <write>
   23b20:	00ffffc4 	movi	r3,-1
   23b24:	10c0031e 	bne	r2,r3,23b34 <_write_r+0x44>
   23b28:	80c00017 	ldw	r3,0(r16)
   23b2c:	18000126 	beq	r3,zero,23b34 <_write_r+0x44>
   23b30:	88c00015 	stw	r3,0(r17)
   23b34:	dfc00217 	ldw	ra,8(sp)
   23b38:	dc400117 	ldw	r17,4(sp)
   23b3c:	dc000017 	ldw	r16,0(sp)
   23b40:	dec00304 	addi	sp,sp,12
   23b44:	f800283a 	ret

00023b48 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23b48:	defffc04 	addi	sp,sp,-16
   23b4c:	df000315 	stw	fp,12(sp)
   23b50:	df000304 	addi	fp,sp,12
   23b54:	e13ffd15 	stw	r4,-12(fp)
   23b58:	e17ffe15 	stw	r5,-8(fp)
   23b5c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23b60:	e0fffe17 	ldw	r3,-8(fp)
   23b64:	e0bffd17 	ldw	r2,-12(fp)
   23b68:	18800c26 	beq	r3,r2,23b9c <alt_load_section+0x54>
  {
    while( to != end )
   23b6c:	00000806 	br	23b90 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23b70:	e0bffe17 	ldw	r2,-8(fp)
   23b74:	10c00104 	addi	r3,r2,4
   23b78:	e0fffe15 	stw	r3,-8(fp)
   23b7c:	e0fffd17 	ldw	r3,-12(fp)
   23b80:	19000104 	addi	r4,r3,4
   23b84:	e13ffd15 	stw	r4,-12(fp)
   23b88:	18c00017 	ldw	r3,0(r3)
   23b8c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   23b90:	e0fffe17 	ldw	r3,-8(fp)
   23b94:	e0bfff17 	ldw	r2,-4(fp)
   23b98:	18bff51e 	bne	r3,r2,23b70 <__alt_data_end+0xffff2a00>
    {
      *to++ = *from++;
    }
  }
}
   23b9c:	e037883a 	mov	sp,fp
   23ba0:	df000017 	ldw	fp,0(sp)
   23ba4:	dec00104 	addi	sp,sp,4
   23ba8:	f800283a 	ret

00023bac <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   23bac:	defffe04 	addi	sp,sp,-8
   23bb0:	dfc00115 	stw	ra,4(sp)
   23bb4:	df000015 	stw	fp,0(sp)
   23bb8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   23bbc:	010000b4 	movhi	r4,2
   23bc0:	2115f804 	addi	r4,r4,22496
   23bc4:	014000b4 	movhi	r5,2
   23bc8:	29554004 	addi	r5,r5,21760
   23bcc:	018000b4 	movhi	r6,2
   23bd0:	3195f804 	addi	r6,r6,22496
   23bd4:	0023b480 	call	23b48 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   23bd8:	010000b4 	movhi	r4,2
   23bdc:	21000804 	addi	r4,r4,32
   23be0:	014000b4 	movhi	r5,2
   23be4:	29400804 	addi	r5,r5,32
   23be8:	018000b4 	movhi	r6,2
   23bec:	31809004 	addi	r6,r6,576
   23bf0:	0023b480 	call	23b48 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   23bf4:	010000b4 	movhi	r4,2
   23bf8:	21140304 	addi	r4,r4,20492
   23bfc:	014000b4 	movhi	r5,2
   23c00:	29540304 	addi	r5,r5,20492
   23c04:	018000b4 	movhi	r6,2
   23c08:	31954004 	addi	r6,r6,21760
   23c0c:	0023b480 	call	23b48 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23c10:	00244640 	call	24464 <alt_dcache_flush_all>
  alt_icache_flush_all();
   23c14:	00246800 	call	24680 <alt_icache_flush_all>
}
   23c18:	e037883a 	mov	sp,fp
   23c1c:	dfc00117 	ldw	ra,4(sp)
   23c20:	df000017 	ldw	fp,0(sp)
   23c24:	dec00204 	addi	sp,sp,8
   23c28:	f800283a 	ret

00023c2c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23c2c:	defffd04 	addi	sp,sp,-12
   23c30:	dfc00215 	stw	ra,8(sp)
   23c34:	df000115 	stw	fp,4(sp)
   23c38:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23c3c:	0009883a 	mov	r4,zero
   23c40:	0023e380 	call	23e38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23c44:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23c48:	0023e6c0 	call	23e6c <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   23c4c:	00245c80 	call	245c8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   23c50:	010000b4 	movhi	r4,2
   23c54:	21118904 	addi	r4,r4,17956
   23c58:	0024cc40 	call	24cc4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   23c5c:	d120c417 	ldw	r4,-31984(gp)
   23c60:	d0e0c517 	ldw	r3,-31980(gp)
   23c64:	d0a0c617 	ldw	r2,-31976(gp)
   23c68:	180b883a 	mov	r5,r3
   23c6c:	100d883a 	mov	r6,r2
   23c70:	00230fc0 	call	230fc <main>
   23c74:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   23c78:	01000044 	movi	r4,1
   23c7c:	00243940 	call	24394 <close>
  exit (result);
   23c80:	e13fff17 	ldw	r4,-4(fp)
   23c84:	0024cd80 	call	24cd8 <exit>

00023c88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   23c88:	defffd04 	addi	sp,sp,-12
   23c8c:	dfc00215 	stw	ra,8(sp)
   23c90:	df000115 	stw	fp,4(sp)
   23c94:	df000104 	addi	fp,sp,4
   23c98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   23c9c:	e13fff17 	ldw	r4,-4(fp)
   23ca0:	00241ec0 	call	241ec <alt_busy_sleep>
}
   23ca4:	e037883a 	mov	sp,fp
   23ca8:	dfc00117 	ldw	ra,4(sp)
   23cac:	df000017 	ldw	fp,0(sp)
   23cb0:	dec00204 	addi	sp,sp,8
   23cb4:	f800283a 	ret

00023cb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23cb8:	defffe04 	addi	sp,sp,-8
   23cbc:	dfc00115 	stw	ra,4(sp)
   23cc0:	df000015 	stw	fp,0(sp)
   23cc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23cc8:	008000b4 	movhi	r2,2
   23ccc:	1095f404 	addi	r2,r2,22480
   23cd0:	10800017 	ldw	r2,0(r2)
   23cd4:	10000526 	beq	r2,zero,23cec <alt_get_errno+0x34>
   23cd8:	008000b4 	movhi	r2,2
   23cdc:	1095f404 	addi	r2,r2,22480
   23ce0:	10800017 	ldw	r2,0(r2)
   23ce4:	103ee83a 	callr	r2
   23ce8:	00000206 	br	23cf4 <alt_get_errno+0x3c>
   23cec:	008000b4 	movhi	r2,2
   23cf0:	1096b004 	addi	r2,r2,23232
}
   23cf4:	e037883a 	mov	sp,fp
   23cf8:	dfc00117 	ldw	ra,4(sp)
   23cfc:	df000017 	ldw	fp,0(sp)
   23d00:	dec00204 	addi	sp,sp,8
   23d04:	f800283a 	ret

00023d08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23d08:	defff904 	addi	sp,sp,-28
   23d0c:	dfc00615 	stw	ra,24(sp)
   23d10:	df000515 	stw	fp,20(sp)
   23d14:	df000504 	addi	fp,sp,20
   23d18:	e13ffd15 	stw	r4,-12(fp)
   23d1c:	e17ffe15 	stw	r5,-8(fp)
   23d20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23d24:	e0bffd17 	ldw	r2,-12(fp)
   23d28:	10000616 	blt	r2,zero,23d44 <write+0x3c>
   23d2c:	e0bffd17 	ldw	r2,-12(fp)
   23d30:	10c00324 	muli	r3,r2,12
   23d34:	008000b4 	movhi	r2,2
   23d38:	10958d04 	addi	r2,r2,22068
   23d3c:	1885883a 	add	r2,r3,r2
   23d40:	00000106 	br	23d48 <write+0x40>
   23d44:	0005883a 	mov	r2,zero
   23d48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23d4c:	e0bffb17 	ldw	r2,-20(fp)
   23d50:	10002126 	beq	r2,zero,23dd8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23d54:	e0bffb17 	ldw	r2,-20(fp)
   23d58:	10800217 	ldw	r2,8(r2)
   23d5c:	108000cc 	andi	r2,r2,3
   23d60:	10001826 	beq	r2,zero,23dc4 <write+0xbc>
   23d64:	e0bffb17 	ldw	r2,-20(fp)
   23d68:	10800017 	ldw	r2,0(r2)
   23d6c:	10800617 	ldw	r2,24(r2)
   23d70:	10001426 	beq	r2,zero,23dc4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23d74:	e0bffb17 	ldw	r2,-20(fp)
   23d78:	10800017 	ldw	r2,0(r2)
   23d7c:	10800617 	ldw	r2,24(r2)
   23d80:	e0ffff17 	ldw	r3,-4(fp)
   23d84:	e13ffb17 	ldw	r4,-20(fp)
   23d88:	e17ffe17 	ldw	r5,-8(fp)
   23d8c:	180d883a 	mov	r6,r3
   23d90:	103ee83a 	callr	r2
   23d94:	e0bffc15 	stw	r2,-16(fp)
   23d98:	e0bffc17 	ldw	r2,-16(fp)
   23d9c:	1000070e 	bge	r2,zero,23dbc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   23da0:	0023cb80 	call	23cb8 <alt_get_errno>
   23da4:	1007883a 	mov	r3,r2
   23da8:	e0bffc17 	ldw	r2,-16(fp)
   23dac:	0085c83a 	sub	r2,zero,r2
   23db0:	18800015 	stw	r2,0(r3)
        return -1;
   23db4:	00bfffc4 	movi	r2,-1
   23db8:	00000c06 	br	23dec <write+0xe4>
      }
      return rval;
   23dbc:	e0bffc17 	ldw	r2,-16(fp)
   23dc0:	00000a06 	br	23dec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23dc4:	0023cb80 	call	23cb8 <alt_get_errno>
   23dc8:	1007883a 	mov	r3,r2
   23dcc:	00800344 	movi	r2,13
   23dd0:	18800015 	stw	r2,0(r3)
   23dd4:	00000406 	br	23de8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23dd8:	0023cb80 	call	23cb8 <alt_get_errno>
   23ddc:	1007883a 	mov	r3,r2
   23de0:	00801444 	movi	r2,81
   23de4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23de8:	00bfffc4 	movi	r2,-1
}
   23dec:	e037883a 	mov	sp,fp
   23df0:	dfc00117 	ldw	ra,4(sp)
   23df4:	df000017 	ldw	fp,0(sp)
   23df8:	dec00204 	addi	sp,sp,8
   23dfc:	f800283a 	ret

00023e00 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23e00:	defffd04 	addi	sp,sp,-12
   23e04:	dfc00215 	stw	ra,8(sp)
   23e08:	df000115 	stw	fp,4(sp)
   23e0c:	df000104 	addi	fp,sp,4
   23e10:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23e14:	e13fff17 	ldw	r4,-4(fp)
   23e18:	014000b4 	movhi	r5,2
   23e1c:	2955f104 	addi	r5,r5,22468
   23e20:	00245240 	call	24524 <alt_dev_llist_insert>
}
   23e24:	e037883a 	mov	sp,fp
   23e28:	dfc00117 	ldw	ra,4(sp)
   23e2c:	df000017 	ldw	fp,0(sp)
   23e30:	dec00204 	addi	sp,sp,8
   23e34:	f800283a 	ret

00023e38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23e38:	defffd04 	addi	sp,sp,-12
   23e3c:	dfc00215 	stw	ra,8(sp)
   23e40:	df000115 	stw	fp,4(sp)
   23e44:	df000104 	addi	fp,sp,4
   23e48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2, nios2_gen2);
   23e4c:	0024b7c0 	call	24b7c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23e50:	00800044 	movi	r2,1
   23e54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23e58:	e037883a 	mov	sp,fp
   23e5c:	dfc00117 	ldw	ra,4(sp)
   23e60:	df000017 	ldw	fp,0(sp)
   23e64:	dec00204 	addi	sp,sp,8
   23e68:	f800283a 	ret

00023e6c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23e6c:	defffe04 	addi	sp,sp,-8
   23e70:	dfc00115 	stw	ra,4(sp)
   23e74:	df000015 	stw	fp,0(sp)
   23e78:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
   23e7c:	01000134 	movhi	r4,4
   23e80:	21040004 	addi	r4,r4,4096
   23e84:	000b883a 	mov	r5,zero
   23e88:	01800104 	movi	r6,4
   23e8c:	01c0fa04 	movi	r7,1000
   23e90:	00241640 	call	24164 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23e94:	010000b4 	movhi	r4,2
   23e98:	21157804 	addi	r4,r4,21984
   23e9c:	0023e000 	call	23e00 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23ea0:	0001883a 	nop
}
   23ea4:	e037883a 	mov	sp,fp
   23ea8:	dfc00117 	ldw	ra,4(sp)
   23eac:	df000017 	ldw	fp,0(sp)
   23eb0:	dec00204 	addi	sp,sp,8
   23eb4:	f800283a 	ret

00023eb8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23eb8:	defffa04 	addi	sp,sp,-24
   23ebc:	dfc00515 	stw	ra,20(sp)
   23ec0:	df000415 	stw	fp,16(sp)
   23ec4:	df000404 	addi	fp,sp,16
   23ec8:	e13ffd15 	stw	r4,-12(fp)
   23ecc:	e17ffe15 	stw	r5,-8(fp)
   23ed0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23ed4:	e0bffd17 	ldw	r2,-12(fp)
   23ed8:	10800017 	ldw	r2,0(r2)
   23edc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23ee0:	e0bffc17 	ldw	r2,-16(fp)
   23ee4:	10c00a04 	addi	r3,r2,40
   23ee8:	e0bffd17 	ldw	r2,-12(fp)
   23eec:	10800217 	ldw	r2,8(r2)
   23ef0:	1809883a 	mov	r4,r3
   23ef4:	e17ffe17 	ldw	r5,-8(fp)
   23ef8:	e1bfff17 	ldw	r6,-4(fp)
   23efc:	100f883a 	mov	r7,r2
   23f00:	0023f780 	call	23f78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23f04:	e037883a 	mov	sp,fp
   23f08:	dfc00117 	ldw	ra,4(sp)
   23f0c:	df000017 	ldw	fp,0(sp)
   23f10:	dec00204 	addi	sp,sp,8
   23f14:	f800283a 	ret

00023f18 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23f18:	defffa04 	addi	sp,sp,-24
   23f1c:	dfc00515 	stw	ra,20(sp)
   23f20:	df000415 	stw	fp,16(sp)
   23f24:	df000404 	addi	fp,sp,16
   23f28:	e13ffd15 	stw	r4,-12(fp)
   23f2c:	e17ffe15 	stw	r5,-8(fp)
   23f30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23f34:	e0bffd17 	ldw	r2,-12(fp)
   23f38:	10800017 	ldw	r2,0(r2)
   23f3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23f40:	e0bffc17 	ldw	r2,-16(fp)
   23f44:	10c00a04 	addi	r3,r2,40
   23f48:	e0bffd17 	ldw	r2,-12(fp)
   23f4c:	10800217 	ldw	r2,8(r2)
   23f50:	1809883a 	mov	r4,r3
   23f54:	e17ffe17 	ldw	r5,-8(fp)
   23f58:	e1bfff17 	ldw	r6,-4(fp)
   23f5c:	100f883a 	mov	r7,r2
   23f60:	002405c0 	call	2405c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23f64:	e037883a 	mov	sp,fp
   23f68:	dfc00117 	ldw	ra,4(sp)
   23f6c:	df000017 	ldw	fp,0(sp)
   23f70:	dec00204 	addi	sp,sp,8
   23f74:	f800283a 	ret

00023f78 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   23f78:	defff704 	addi	sp,sp,-36
   23f7c:	df000815 	stw	fp,32(sp)
   23f80:	df000804 	addi	fp,sp,32
   23f84:	e13ffc15 	stw	r4,-16(fp)
   23f88:	e17ffd15 	stw	r5,-12(fp)
   23f8c:	e1bffe15 	stw	r6,-8(fp)
   23f90:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   23f94:	e0bffc17 	ldw	r2,-16(fp)
   23f98:	10800017 	ldw	r2,0(r2)
   23f9c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   23fa0:	e0bffd17 	ldw	r2,-12(fp)
   23fa4:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   23fa8:	e0bffe17 	ldw	r2,-8(fp)
   23fac:	e0fffd17 	ldw	r3,-12(fp)
   23fb0:	1885883a 	add	r2,r3,r2
   23fb4:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   23fb8:	00001406 	br	2400c <altera_avalon_jtag_uart_read+0x94>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23fbc:	e0bff917 	ldw	r2,-28(fp)
   23fc0:	10800037 	ldwio	r2,0(r2)
   23fc4:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   23fc8:	e0bffb17 	ldw	r2,-20(fp)
   23fcc:	10a0000c 	andi	r2,r2,32768
   23fd0:	10000626 	beq	r2,zero,23fec <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23fd4:	e0bff817 	ldw	r2,-32(fp)
   23fd8:	10c00044 	addi	r3,r2,1
   23fdc:	e0fff815 	stw	r3,-32(fp)
   23fe0:	e0fffb17 	ldw	r3,-20(fp)
   23fe4:	10c00005 	stb	r3,0(r2)
   23fe8:	00000806 	br	2400c <altera_avalon_jtag_uart_read+0x94>
    else if (ptr != buffer)
   23fec:	e0fff817 	ldw	r3,-32(fp)
   23ff0:	e0bffd17 	ldw	r2,-12(fp)
   23ff4:	18800126 	beq	r3,r2,23ffc <altera_avalon_jtag_uart_read+0x84>
      break;
   23ff8:	00000706 	br	24018 <altera_avalon_jtag_uart_read+0xa0>
    else if(flags & O_NONBLOCK)
   23ffc:	e0bfff17 	ldw	r2,-4(fp)
   24000:	1090000c 	andi	r2,r2,16384
   24004:	10000126 	beq	r2,zero,2400c <altera_avalon_jtag_uart_read+0x94>
      break;   
   24008:	00000306 	br	24018 <altera_avalon_jtag_uart_read+0xa0>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   2400c:	e0fff817 	ldw	r3,-32(fp)
   24010:	e0bffa17 	ldw	r2,-24(fp)
   24014:	18bfe936 	bltu	r3,r2,23fbc <__alt_data_end+0xffff2e4c>
    else if(flags & O_NONBLOCK)
      break;   
    
  }

  if (ptr != buffer)
   24018:	e0fff817 	ldw	r3,-32(fp)
   2401c:	e0bffd17 	ldw	r2,-12(fp)
   24020:	18800426 	beq	r3,r2,24034 <altera_avalon_jtag_uart_read+0xbc>
    return ptr - buffer;
   24024:	e0fff817 	ldw	r3,-32(fp)
   24028:	e0bffd17 	ldw	r2,-12(fp)
   2402c:	1885c83a 	sub	r2,r3,r2
   24030:	00000606 	br	2404c <altera_avalon_jtag_uart_read+0xd4>
  else if (flags & O_NONBLOCK)
   24034:	e0bfff17 	ldw	r2,-4(fp)
   24038:	1090000c 	andi	r2,r2,16384
   2403c:	10000226 	beq	r2,zero,24048 <altera_avalon_jtag_uart_read+0xd0>
    return -EWOULDBLOCK;
   24040:	00bffd44 	movi	r2,-11
   24044:	00000106 	br	2404c <altera_avalon_jtag_uart_read+0xd4>
  else
    return -EIO;
   24048:	00bffec4 	movi	r2,-5
}
   2404c:	e037883a 	mov	sp,fp
   24050:	df000017 	ldw	fp,0(sp)
   24054:	dec00104 	addi	sp,sp,4
   24058:	f800283a 	ret

0002405c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2405c:	defff904 	addi	sp,sp,-28
   24060:	df000615 	stw	fp,24(sp)
   24064:	df000604 	addi	fp,sp,24
   24068:	e13ffc15 	stw	r4,-16(fp)
   2406c:	e17ffd15 	stw	r5,-12(fp)
   24070:	e1bffe15 	stw	r6,-8(fp)
   24074:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   24078:	e0bffc17 	ldw	r2,-16(fp)
   2407c:	10800017 	ldw	r2,0(r2)
   24080:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   24084:	e0bffe17 	ldw	r2,-8(fp)
   24088:	e0fffd17 	ldw	r3,-12(fp)
   2408c:	1885883a 	add	r2,r3,r2
   24090:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   24094:	00000e06 	br	240d0 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   24098:	e0bffa17 	ldw	r2,-24(fp)
   2409c:	10800104 	addi	r2,r2,4
   240a0:	10800037 	ldwio	r2,0(r2)
   240a4:	10bfffec 	andhi	r2,r2,65535
   240a8:	10000926 	beq	r2,zero,240d0 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   240ac:	e0fffa17 	ldw	r3,-24(fp)
   240b0:	e0bffd17 	ldw	r2,-12(fp)
   240b4:	11000044 	addi	r4,r2,1
   240b8:	e13ffd15 	stw	r4,-12(fp)
   240bc:	10800003 	ldbu	r2,0(r2)
   240c0:	10803fcc 	andi	r2,r2,255
   240c4:	1080201c 	xori	r2,r2,128
   240c8:	10bfe004 	addi	r2,r2,-128
   240cc:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   240d0:	e0fffd17 	ldw	r3,-12(fp)
   240d4:	e0bffb17 	ldw	r2,-20(fp)
   240d8:	18bfef36 	bltu	r3,r2,24098 <__alt_data_end+0xffff2f28>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   240dc:	e0bffe17 	ldw	r2,-8(fp)
}
   240e0:	e037883a 	mov	sp,fp
   240e4:	df000017 	ldw	fp,0(sp)
   240e8:	dec00104 	addi	sp,sp,4
   240ec:	f800283a 	ret

000240f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   240f0:	defffa04 	addi	sp,sp,-24
   240f4:	dfc00515 	stw	ra,20(sp)
   240f8:	df000415 	stw	fp,16(sp)
   240fc:	df000404 	addi	fp,sp,16
   24100:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   24104:	0007883a 	mov	r3,zero
   24108:	e0bfff17 	ldw	r2,-4(fp)
   2410c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   24110:	e0bfff17 	ldw	r2,-4(fp)
   24114:	10800104 	addi	r2,r2,4
   24118:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2411c:	0005303a 	rdctl	r2,status
   24120:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24124:	e0fffd17 	ldw	r3,-12(fp)
   24128:	00bfff84 	movi	r2,-2
   2412c:	1884703a 	and	r2,r3,r2
   24130:	1001703a 	wrctl	status,r2
  
  return context;
   24134:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   24138:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2413c:	0024a780 	call	24a78 <alt_tick>
   24140:	e0bffc17 	ldw	r2,-16(fp)
   24144:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24148:	e0bffe17 	ldw	r2,-8(fp)
   2414c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   24150:	e037883a 	mov	sp,fp
   24154:	dfc00117 	ldw	ra,4(sp)
   24158:	df000017 	ldw	fp,0(sp)
   2415c:	dec00204 	addi	sp,sp,8
   24160:	f800283a 	ret

00024164 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   24164:	defff804 	addi	sp,sp,-32
   24168:	dfc00715 	stw	ra,28(sp)
   2416c:	df000615 	stw	fp,24(sp)
   24170:	df000604 	addi	fp,sp,24
   24174:	e13ffc15 	stw	r4,-16(fp)
   24178:	e17ffd15 	stw	r5,-12(fp)
   2417c:	e1bffe15 	stw	r6,-8(fp)
   24180:	e1ffff15 	stw	r7,-4(fp)
   24184:	e0bfff17 	ldw	r2,-4(fp)
   24188:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2418c:	008000b4 	movhi	r2,2
   24190:	1096b504 	addi	r2,r2,23252
   24194:	10800017 	ldw	r2,0(r2)
   24198:	1000041e 	bne	r2,zero,241ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
   2419c:	008000b4 	movhi	r2,2
   241a0:	1096b504 	addi	r2,r2,23252
   241a4:	e0fffb17 	ldw	r3,-20(fp)
   241a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   241ac:	e0bffc17 	ldw	r2,-16(fp)
   241b0:	10800104 	addi	r2,r2,4
   241b4:	00c001c4 	movi	r3,7
   241b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   241bc:	d8000015 	stw	zero,0(sp)
   241c0:	e13ffd17 	ldw	r4,-12(fp)
   241c4:	e17ffe17 	ldw	r5,-8(fp)
   241c8:	018000b4 	movhi	r6,2
   241cc:	31903c04 	addi	r6,r6,16624
   241d0:	e1fffc17 	ldw	r7,-16(fp)
   241d4:	00246b00 	call	246b0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   241d8:	e037883a 	mov	sp,fp
   241dc:	dfc00117 	ldw	ra,4(sp)
   241e0:	df000017 	ldw	fp,0(sp)
   241e4:	dec00204 	addi	sp,sp,8
   241e8:	f800283a 	ret

000241ec <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   241ec:	defffa04 	addi	sp,sp,-24
   241f0:	dfc00515 	stw	ra,20(sp)
   241f4:	df000415 	stw	fp,16(sp)
   241f8:	df000404 	addi	fp,sp,16
   241fc:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
   24200:	008000c4 	movi	r2,3
   24204:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   24208:	e0fffd17 	ldw	r3,-12(fp)
   2420c:	008003f4 	movhi	r2,15
   24210:	10909004 	addi	r2,r2,16960
   24214:	1885383a 	mul	r2,r3,r2
   24218:	01017db4 	movhi	r4,1526
   2421c:	21384004 	addi	r4,r4,-7936
   24220:	100b883a 	mov	r5,r2
   24224:	00233280 	call	23328 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   24228:	01200034 	movhi	r4,32768
   2422c:	213fffc4 	addi	r4,r4,-1
   24230:	100b883a 	mov	r5,r2
   24234:	00233280 	call	23328 <__udivsi3>
   24238:	e13fff17 	ldw	r4,-4(fp)
   2423c:	100b883a 	mov	r5,r2
   24240:	00233280 	call	23328 <__udivsi3>
   24244:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   24248:	e0bffe17 	ldw	r2,-8(fp)
   2424c:	10002a26 	beq	r2,zero,242f8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   24250:	e03ffc15 	stw	zero,-16(fp)
   24254:	00001706 	br	242b4 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   24258:	00a00034 	movhi	r2,32768
   2425c:	10bfffc4 	addi	r2,r2,-1
   24260:	10bfffc4 	addi	r2,r2,-1
   24264:	103ffe1e 	bne	r2,zero,24260 <__alt_data_end+0xffff30f0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   24268:	e0fffd17 	ldw	r3,-12(fp)
   2426c:	008003f4 	movhi	r2,15
   24270:	10909004 	addi	r2,r2,16960
   24274:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   24278:	01017db4 	movhi	r4,1526
   2427c:	21384004 	addi	r4,r4,-7936
   24280:	100b883a 	mov	r5,r2
   24284:	00233280 	call	23328 <__udivsi3>
   24288:	01200034 	movhi	r4,32768
   2428c:	213fffc4 	addi	r4,r4,-1
   24290:	100b883a 	mov	r5,r2
   24294:	00233280 	call	23328 <__udivsi3>
   24298:	1007883a 	mov	r3,r2
   2429c:	e0bfff17 	ldw	r2,-4(fp)
   242a0:	10c5c83a 	sub	r2,r2,r3
   242a4:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   242a8:	e0bffc17 	ldw	r2,-16(fp)
   242ac:	10800044 	addi	r2,r2,1
   242b0:	e0bffc15 	stw	r2,-16(fp)
   242b4:	e0fffc17 	ldw	r3,-16(fp)
   242b8:	e0bffe17 	ldw	r2,-8(fp)
   242bc:	18bfe616 	blt	r3,r2,24258 <__alt_data_end+0xffff30e8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   242c0:	e0fffd17 	ldw	r3,-12(fp)
   242c4:	008003f4 	movhi	r2,15
   242c8:	10909004 	addi	r2,r2,16960
   242cc:	1885383a 	mul	r2,r3,r2
   242d0:	01017db4 	movhi	r4,1526
   242d4:	21384004 	addi	r4,r4,-7936
   242d8:	100b883a 	mov	r5,r2
   242dc:	00233280 	call	23328 <__udivsi3>
   242e0:	1007883a 	mov	r3,r2
   242e4:	e0bfff17 	ldw	r2,-4(fp)
   242e8:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   242ec:	10bfffc4 	addi	r2,r2,-1
   242f0:	103ffe1e 	bne	r2,zero,242ec <__alt_data_end+0xffff317c>
   242f4:	00000d06 	br	2432c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   242f8:	e0fffd17 	ldw	r3,-12(fp)
   242fc:	008003f4 	movhi	r2,15
   24300:	10909004 	addi	r2,r2,16960
   24304:	1885383a 	mul	r2,r3,r2
   24308:	01017db4 	movhi	r4,1526
   2430c:	21384004 	addi	r4,r4,-7936
   24310:	100b883a 	mov	r5,r2
   24314:	00233280 	call	23328 <__udivsi3>
   24318:	1007883a 	mov	r3,r2
   2431c:	e0bfff17 	ldw	r2,-4(fp)
   24320:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   24324:	10bfffc4 	addi	r2,r2,-1
   24328:	00bffe16 	blt	zero,r2,24324 <__alt_data_end+0xffff31b4>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   2432c:	0005883a 	mov	r2,zero
}
   24330:	e037883a 	mov	sp,fp
   24334:	dfc00117 	ldw	ra,4(sp)
   24338:	df000017 	ldw	fp,0(sp)
   2433c:	dec00204 	addi	sp,sp,8
   24340:	f800283a 	ret

00024344 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24344:	defffe04 	addi	sp,sp,-8
   24348:	dfc00115 	stw	ra,4(sp)
   2434c:	df000015 	stw	fp,0(sp)
   24350:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24354:	008000b4 	movhi	r2,2
   24358:	1095f404 	addi	r2,r2,22480
   2435c:	10800017 	ldw	r2,0(r2)
   24360:	10000526 	beq	r2,zero,24378 <alt_get_errno+0x34>
   24364:	008000b4 	movhi	r2,2
   24368:	1095f404 	addi	r2,r2,22480
   2436c:	10800017 	ldw	r2,0(r2)
   24370:	103ee83a 	callr	r2
   24374:	00000206 	br	24380 <alt_get_errno+0x3c>
   24378:	008000b4 	movhi	r2,2
   2437c:	1096b004 	addi	r2,r2,23232
}
   24380:	e037883a 	mov	sp,fp
   24384:	dfc00117 	ldw	ra,4(sp)
   24388:	df000017 	ldw	fp,0(sp)
   2438c:	dec00204 	addi	sp,sp,8
   24390:	f800283a 	ret

00024394 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   24394:	defffb04 	addi	sp,sp,-20
   24398:	dfc00415 	stw	ra,16(sp)
   2439c:	df000315 	stw	fp,12(sp)
   243a0:	df000304 	addi	fp,sp,12
   243a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   243a8:	e0bfff17 	ldw	r2,-4(fp)
   243ac:	10000616 	blt	r2,zero,243c8 <close+0x34>
   243b0:	e0bfff17 	ldw	r2,-4(fp)
   243b4:	10c00324 	muli	r3,r2,12
   243b8:	008000b4 	movhi	r2,2
   243bc:	10958d04 	addi	r2,r2,22068
   243c0:	1885883a 	add	r2,r3,r2
   243c4:	00000106 	br	243cc <close+0x38>
   243c8:	0005883a 	mov	r2,zero
   243cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   243d0:	e0bffd17 	ldw	r2,-12(fp)
   243d4:	10001926 	beq	r2,zero,2443c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   243d8:	e0bffd17 	ldw	r2,-12(fp)
   243dc:	10800017 	ldw	r2,0(r2)
   243e0:	10800417 	ldw	r2,16(r2)
   243e4:	10000626 	beq	r2,zero,24400 <close+0x6c>
   243e8:	e0bffd17 	ldw	r2,-12(fp)
   243ec:	10800017 	ldw	r2,0(r2)
   243f0:	10800417 	ldw	r2,16(r2)
   243f4:	e13ffd17 	ldw	r4,-12(fp)
   243f8:	103ee83a 	callr	r2
   243fc:	00000106 	br	24404 <close+0x70>
   24400:	0005883a 	mov	r2,zero
   24404:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   24408:	e13fff17 	ldw	r4,-4(fp)
   2440c:	00249800 	call	24980 <alt_release_fd>
    if (rval < 0)
   24410:	e0bffe17 	ldw	r2,-8(fp)
   24414:	1000070e 	bge	r2,zero,24434 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   24418:	00243440 	call	24344 <alt_get_errno>
   2441c:	1007883a 	mov	r3,r2
   24420:	e0bffe17 	ldw	r2,-8(fp)
   24424:	0085c83a 	sub	r2,zero,r2
   24428:	18800015 	stw	r2,0(r3)
      return -1;
   2442c:	00bfffc4 	movi	r2,-1
   24430:	00000706 	br	24450 <close+0xbc>
    }
    return 0;
   24434:	0005883a 	mov	r2,zero
   24438:	00000506 	br	24450 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2443c:	00243440 	call	24344 <alt_get_errno>
   24440:	1007883a 	mov	r3,r2
   24444:	00801444 	movi	r2,81
   24448:	18800015 	stw	r2,0(r3)
    return -1;
   2444c:	00bfffc4 	movi	r2,-1
  }
}
   24450:	e037883a 	mov	sp,fp
   24454:	dfc00117 	ldw	ra,4(sp)
   24458:	df000017 	ldw	fp,0(sp)
   2445c:	dec00204 	addi	sp,sp,8
   24460:	f800283a 	ret

00024464 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   24464:	defffe04 	addi	sp,sp,-8
   24468:	df000115 	stw	fp,4(sp)
   2446c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   24470:	e03fff15 	stw	zero,-4(fp)
   24474:	00000506 	br	2448c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   24478:	e0bfff17 	ldw	r2,-4(fp)
   2447c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   24480:	e0bfff17 	ldw	r2,-4(fp)
   24484:	10800804 	addi	r2,r2,32
   24488:	e0bfff15 	stw	r2,-4(fp)
   2448c:	e0bfff17 	ldw	r2,-4(fp)
   24490:	10820030 	cmpltui	r2,r2,2048
   24494:	103ff81e 	bne	r2,zero,24478 <__alt_data_end+0xffff3308>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   24498:	e037883a 	mov	sp,fp
   2449c:	df000017 	ldw	fp,0(sp)
   244a0:	dec00104 	addi	sp,sp,4
   244a4:	f800283a 	ret

000244a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   244a8:	defffc04 	addi	sp,sp,-16
   244ac:	df000315 	stw	fp,12(sp)
   244b0:	df000304 	addi	fp,sp,12
   244b4:	e13ffd15 	stw	r4,-12(fp)
   244b8:	e17ffe15 	stw	r5,-8(fp)
   244bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   244c0:	e0bfff17 	ldw	r2,-4(fp)
}
   244c4:	e037883a 	mov	sp,fp
   244c8:	df000017 	ldw	fp,0(sp)
   244cc:	dec00104 	addi	sp,sp,4
   244d0:	f800283a 	ret

000244d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   244d4:	defffe04 	addi	sp,sp,-8
   244d8:	dfc00115 	stw	ra,4(sp)
   244dc:	df000015 	stw	fp,0(sp)
   244e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   244e4:	008000b4 	movhi	r2,2
   244e8:	1095f404 	addi	r2,r2,22480
   244ec:	10800017 	ldw	r2,0(r2)
   244f0:	10000526 	beq	r2,zero,24508 <alt_get_errno+0x34>
   244f4:	008000b4 	movhi	r2,2
   244f8:	1095f404 	addi	r2,r2,22480
   244fc:	10800017 	ldw	r2,0(r2)
   24500:	103ee83a 	callr	r2
   24504:	00000206 	br	24510 <alt_get_errno+0x3c>
   24508:	008000b4 	movhi	r2,2
   2450c:	1096b004 	addi	r2,r2,23232
}
   24510:	e037883a 	mov	sp,fp
   24514:	dfc00117 	ldw	ra,4(sp)
   24518:	df000017 	ldw	fp,0(sp)
   2451c:	dec00204 	addi	sp,sp,8
   24520:	f800283a 	ret

00024524 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   24524:	defffa04 	addi	sp,sp,-24
   24528:	dfc00515 	stw	ra,20(sp)
   2452c:	df000415 	stw	fp,16(sp)
   24530:	df000404 	addi	fp,sp,16
   24534:	e13ffe15 	stw	r4,-8(fp)
   24538:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2453c:	e0bffe17 	ldw	r2,-8(fp)
   24540:	10000326 	beq	r2,zero,24550 <alt_dev_llist_insert+0x2c>
   24544:	e0bffe17 	ldw	r2,-8(fp)
   24548:	10800217 	ldw	r2,8(r2)
   2454c:	1000061e 	bne	r2,zero,24568 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   24550:	00244d40 	call	244d4 <alt_get_errno>
   24554:	1007883a 	mov	r3,r2
   24558:	00800584 	movi	r2,22
   2455c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   24560:	00bffa84 	movi	r2,-22
   24564:	00001306 	br	245b4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   24568:	e0bffe17 	ldw	r2,-8(fp)
   2456c:	e0ffff17 	ldw	r3,-4(fp)
   24570:	e0fffc15 	stw	r3,-16(fp)
   24574:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24578:	e0bffd17 	ldw	r2,-12(fp)
   2457c:	e0fffc17 	ldw	r3,-16(fp)
   24580:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24584:	e0bffc17 	ldw	r2,-16(fp)
   24588:	10c00017 	ldw	r3,0(r2)
   2458c:	e0bffd17 	ldw	r2,-12(fp)
   24590:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24594:	e0bffc17 	ldw	r2,-16(fp)
   24598:	10800017 	ldw	r2,0(r2)
   2459c:	e0fffd17 	ldw	r3,-12(fp)
   245a0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   245a4:	e0bffc17 	ldw	r2,-16(fp)
   245a8:	e0fffd17 	ldw	r3,-12(fp)
   245ac:	10c00015 	stw	r3,0(r2)

  return 0;  
   245b0:	0005883a 	mov	r2,zero
}
   245b4:	e037883a 	mov	sp,fp
   245b8:	dfc00117 	ldw	ra,4(sp)
   245bc:	df000017 	ldw	fp,0(sp)
   245c0:	dec00204 	addi	sp,sp,8
   245c4:	f800283a 	ret

000245c8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   245c8:	defffd04 	addi	sp,sp,-12
   245cc:	dfc00215 	stw	ra,8(sp)
   245d0:	df000115 	stw	fp,4(sp)
   245d4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   245d8:	008000b4 	movhi	r2,2
   245dc:	10940204 	addi	r2,r2,20488
   245e0:	e0bfff15 	stw	r2,-4(fp)
   245e4:	00000606 	br	24600 <_do_ctors+0x38>
        (*ctor) (); 
   245e8:	e0bfff17 	ldw	r2,-4(fp)
   245ec:	10800017 	ldw	r2,0(r2)
   245f0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   245f4:	e0bfff17 	ldw	r2,-4(fp)
   245f8:	10bfff04 	addi	r2,r2,-4
   245fc:	e0bfff15 	stw	r2,-4(fp)
   24600:	e0ffff17 	ldw	r3,-4(fp)
   24604:	008000b4 	movhi	r2,2
   24608:	10940304 	addi	r2,r2,20492
   2460c:	18bff62e 	bgeu	r3,r2,245e8 <__alt_data_end+0xffff3478>
        (*ctor) (); 
}
   24610:	e037883a 	mov	sp,fp
   24614:	dfc00117 	ldw	ra,4(sp)
   24618:	df000017 	ldw	fp,0(sp)
   2461c:	dec00204 	addi	sp,sp,8
   24620:	f800283a 	ret

00024624 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   24624:	defffd04 	addi	sp,sp,-12
   24628:	dfc00215 	stw	ra,8(sp)
   2462c:	df000115 	stw	fp,4(sp)
   24630:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24634:	008000b4 	movhi	r2,2
   24638:	10940204 	addi	r2,r2,20488
   2463c:	e0bfff15 	stw	r2,-4(fp)
   24640:	00000606 	br	2465c <_do_dtors+0x38>
        (*dtor) (); 
   24644:	e0bfff17 	ldw	r2,-4(fp)
   24648:	10800017 	ldw	r2,0(r2)
   2464c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   24650:	e0bfff17 	ldw	r2,-4(fp)
   24654:	10bfff04 	addi	r2,r2,-4
   24658:	e0bfff15 	stw	r2,-4(fp)
   2465c:	e0ffff17 	ldw	r3,-4(fp)
   24660:	008000b4 	movhi	r2,2
   24664:	10940304 	addi	r2,r2,20492
   24668:	18bff62e 	bgeu	r3,r2,24644 <__alt_data_end+0xffff34d4>
        (*dtor) (); 
}
   2466c:	e037883a 	mov	sp,fp
   24670:	dfc00117 	ldw	ra,4(sp)
   24674:	df000017 	ldw	fp,0(sp)
   24678:	dec00204 	addi	sp,sp,8
   2467c:	f800283a 	ret

00024680 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   24680:	defffe04 	addi	sp,sp,-8
   24684:	dfc00115 	stw	ra,4(sp)
   24688:	df000015 	stw	fp,0(sp)
   2468c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   24690:	0009883a 	mov	r4,zero
   24694:	01440004 	movi	r5,4096
   24698:	0024b9c0 	call	24b9c <alt_icache_flush>
#endif
}
   2469c:	e037883a 	mov	sp,fp
   246a0:	dfc00117 	ldw	ra,4(sp)
   246a4:	df000017 	ldw	fp,0(sp)
   246a8:	dec00204 	addi	sp,sp,8
   246ac:	f800283a 	ret

000246b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   246b0:	defff904 	addi	sp,sp,-28
   246b4:	dfc00615 	stw	ra,24(sp)
   246b8:	df000515 	stw	fp,20(sp)
   246bc:	df000504 	addi	fp,sp,20
   246c0:	e13ffc15 	stw	r4,-16(fp)
   246c4:	e17ffd15 	stw	r5,-12(fp)
   246c8:	e1bffe15 	stw	r6,-8(fp)
   246cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   246d0:	e0800217 	ldw	r2,8(fp)
   246d4:	d8800015 	stw	r2,0(sp)
   246d8:	e13ffc17 	ldw	r4,-16(fp)
   246dc:	e17ffd17 	ldw	r5,-12(fp)
   246e0:	e1bffe17 	ldw	r6,-8(fp)
   246e4:	e1ffff17 	ldw	r7,-4(fp)
   246e8:	00248900 	call	24890 <alt_iic_isr_register>
}  
   246ec:	e037883a 	mov	sp,fp
   246f0:	dfc00117 	ldw	ra,4(sp)
   246f4:	df000017 	ldw	fp,0(sp)
   246f8:	dec00204 	addi	sp,sp,8
   246fc:	f800283a 	ret

00024700 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   24700:	defff904 	addi	sp,sp,-28
   24704:	df000615 	stw	fp,24(sp)
   24708:	df000604 	addi	fp,sp,24
   2470c:	e13ffe15 	stw	r4,-8(fp)
   24710:	e17fff15 	stw	r5,-4(fp)
   24714:	e0bfff17 	ldw	r2,-4(fp)
   24718:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2471c:	0005303a 	rdctl	r2,status
   24720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24724:	e0fffb17 	ldw	r3,-20(fp)
   24728:	00bfff84 	movi	r2,-2
   2472c:	1884703a 	and	r2,r3,r2
   24730:	1001703a 	wrctl	status,r2
  
  return context;
   24734:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   24738:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2473c:	e0bffa17 	ldw	r2,-24(fp)
   24740:	00c00044 	movi	r3,1
   24744:	1884983a 	sll	r2,r3,r2
   24748:	1007883a 	mov	r3,r2
   2474c:	008000b4 	movhi	r2,2
   24750:	1096b404 	addi	r2,r2,23248
   24754:	10800017 	ldw	r2,0(r2)
   24758:	1886b03a 	or	r3,r3,r2
   2475c:	008000b4 	movhi	r2,2
   24760:	1096b404 	addi	r2,r2,23248
   24764:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   24768:	008000b4 	movhi	r2,2
   2476c:	1096b404 	addi	r2,r2,23248
   24770:	10800017 	ldw	r2,0(r2)
   24774:	100170fa 	wrctl	ienable,r2
   24778:	e0bffc17 	ldw	r2,-16(fp)
   2477c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24780:	e0bffd17 	ldw	r2,-12(fp)
   24784:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   24788:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2478c:	0001883a 	nop
}
   24790:	e037883a 	mov	sp,fp
   24794:	df000017 	ldw	fp,0(sp)
   24798:	dec00104 	addi	sp,sp,4
   2479c:	f800283a 	ret

000247a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   247a0:	defff904 	addi	sp,sp,-28
   247a4:	df000615 	stw	fp,24(sp)
   247a8:	df000604 	addi	fp,sp,24
   247ac:	e13ffe15 	stw	r4,-8(fp)
   247b0:	e17fff15 	stw	r5,-4(fp)
   247b4:	e0bfff17 	ldw	r2,-4(fp)
   247b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   247bc:	0005303a 	rdctl	r2,status
   247c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   247c4:	e0fffb17 	ldw	r3,-20(fp)
   247c8:	00bfff84 	movi	r2,-2
   247cc:	1884703a 	and	r2,r3,r2
   247d0:	1001703a 	wrctl	status,r2
  
  return context;
   247d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   247d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   247dc:	e0bffa17 	ldw	r2,-24(fp)
   247e0:	00c00044 	movi	r3,1
   247e4:	1884983a 	sll	r2,r3,r2
   247e8:	0084303a 	nor	r2,zero,r2
   247ec:	1007883a 	mov	r3,r2
   247f0:	008000b4 	movhi	r2,2
   247f4:	1096b404 	addi	r2,r2,23248
   247f8:	10800017 	ldw	r2,0(r2)
   247fc:	1886703a 	and	r3,r3,r2
   24800:	008000b4 	movhi	r2,2
   24804:	1096b404 	addi	r2,r2,23248
   24808:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2480c:	008000b4 	movhi	r2,2
   24810:	1096b404 	addi	r2,r2,23248
   24814:	10800017 	ldw	r2,0(r2)
   24818:	100170fa 	wrctl	ienable,r2
   2481c:	e0bffc17 	ldw	r2,-16(fp)
   24820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24824:	e0bffd17 	ldw	r2,-12(fp)
   24828:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2482c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   24830:	0001883a 	nop
}
   24834:	e037883a 	mov	sp,fp
   24838:	df000017 	ldw	fp,0(sp)
   2483c:	dec00104 	addi	sp,sp,4
   24840:	f800283a 	ret

00024844 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   24844:	defffc04 	addi	sp,sp,-16
   24848:	df000315 	stw	fp,12(sp)
   2484c:	df000304 	addi	fp,sp,12
   24850:	e13ffe15 	stw	r4,-8(fp)
   24854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   24858:	000530fa 	rdctl	r2,ienable
   2485c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   24860:	e0bfff17 	ldw	r2,-4(fp)
   24864:	00c00044 	movi	r3,1
   24868:	1884983a 	sll	r2,r3,r2
   2486c:	1007883a 	mov	r3,r2
   24870:	e0bffd17 	ldw	r2,-12(fp)
   24874:	1884703a 	and	r2,r3,r2
   24878:	1004c03a 	cmpne	r2,r2,zero
   2487c:	10803fcc 	andi	r2,r2,255
}
   24880:	e037883a 	mov	sp,fp
   24884:	df000017 	ldw	fp,0(sp)
   24888:	dec00104 	addi	sp,sp,4
   2488c:	f800283a 	ret

00024890 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   24890:	defff504 	addi	sp,sp,-44
   24894:	dfc00a15 	stw	ra,40(sp)
   24898:	df000915 	stw	fp,36(sp)
   2489c:	df000904 	addi	fp,sp,36
   248a0:	e13ffc15 	stw	r4,-16(fp)
   248a4:	e17ffd15 	stw	r5,-12(fp)
   248a8:	e1bffe15 	stw	r6,-8(fp)
   248ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   248b0:	00bffa84 	movi	r2,-22
   248b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   248b8:	e0bffd17 	ldw	r2,-12(fp)
   248bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   248c0:	e0bff817 	ldw	r2,-32(fp)
   248c4:	10800808 	cmpgei	r2,r2,32
   248c8:	1000271e 	bne	r2,zero,24968 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   248cc:	0005303a 	rdctl	r2,status
   248d0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   248d4:	e0fffa17 	ldw	r3,-24(fp)
   248d8:	00bfff84 	movi	r2,-2
   248dc:	1884703a 	and	r2,r3,r2
   248e0:	1001703a 	wrctl	status,r2
  
  return context;
   248e4:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   248e8:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
   248ec:	008000b4 	movhi	r2,2
   248f0:	1096b804 	addi	r2,r2,23264
   248f4:	e0fff817 	ldw	r3,-32(fp)
   248f8:	180690fa 	slli	r3,r3,3
   248fc:	10c5883a 	add	r2,r2,r3
   24900:	e0fffe17 	ldw	r3,-8(fp)
   24904:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   24908:	008000b4 	movhi	r2,2
   2490c:	1096b804 	addi	r2,r2,23264
   24910:	e0fff817 	ldw	r3,-32(fp)
   24914:	180690fa 	slli	r3,r3,3
   24918:	10c5883a 	add	r2,r2,r3
   2491c:	10800104 	addi	r2,r2,4
   24920:	e0ffff17 	ldw	r3,-4(fp)
   24924:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   24928:	e0bffe17 	ldw	r2,-8(fp)
   2492c:	10000526 	beq	r2,zero,24944 <alt_iic_isr_register+0xb4>
   24930:	e0bff817 	ldw	r2,-32(fp)
   24934:	e13ffc17 	ldw	r4,-16(fp)
   24938:	100b883a 	mov	r5,r2
   2493c:	00247000 	call	24700 <alt_ic_irq_enable>
   24940:	00000406 	br	24954 <alt_iic_isr_register+0xc4>
   24944:	e0bff817 	ldw	r2,-32(fp)
   24948:	e13ffc17 	ldw	r4,-16(fp)
   2494c:	100b883a 	mov	r5,r2
   24950:	00247a00 	call	247a0 <alt_ic_irq_disable>
   24954:	e0bff715 	stw	r2,-36(fp)
   24958:	e0bff917 	ldw	r2,-28(fp)
   2495c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24960:	e0bffb17 	ldw	r2,-20(fp)
   24964:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   24968:	e0bff717 	ldw	r2,-36(fp)
}
   2496c:	e037883a 	mov	sp,fp
   24970:	dfc00117 	ldw	ra,4(sp)
   24974:	df000017 	ldw	fp,0(sp)
   24978:	dec00204 	addi	sp,sp,8
   2497c:	f800283a 	ret

00024980 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   24980:	defffe04 	addi	sp,sp,-8
   24984:	df000115 	stw	fp,4(sp)
   24988:	df000104 	addi	fp,sp,4
   2498c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   24990:	e0bfff17 	ldw	r2,-4(fp)
   24994:	108000d0 	cmplti	r2,r2,3
   24998:	10000d1e 	bne	r2,zero,249d0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2499c:	008000b4 	movhi	r2,2
   249a0:	10958d04 	addi	r2,r2,22068
   249a4:	e0ffff17 	ldw	r3,-4(fp)
   249a8:	18c00324 	muli	r3,r3,12
   249ac:	10c5883a 	add	r2,r2,r3
   249b0:	10800204 	addi	r2,r2,8
   249b4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   249b8:	008000b4 	movhi	r2,2
   249bc:	10958d04 	addi	r2,r2,22068
   249c0:	e0ffff17 	ldw	r3,-4(fp)
   249c4:	18c00324 	muli	r3,r3,12
   249c8:	10c5883a 	add	r2,r2,r3
   249cc:	10000015 	stw	zero,0(r2)
  }
}
   249d0:	e037883a 	mov	sp,fp
   249d4:	df000017 	ldw	fp,0(sp)
   249d8:	dec00104 	addi	sp,sp,4
   249dc:	f800283a 	ret

000249e0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   249e0:	defffa04 	addi	sp,sp,-24
   249e4:	df000515 	stw	fp,20(sp)
   249e8:	df000504 	addi	fp,sp,20
   249ec:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   249f0:	0005303a 	rdctl	r2,status
   249f4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   249f8:	e0fffc17 	ldw	r3,-16(fp)
   249fc:	00bfff84 	movi	r2,-2
   24a00:	1884703a 	and	r2,r3,r2
   24a04:	1001703a 	wrctl	status,r2
  
  return context;
   24a08:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   24a0c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   24a10:	e0bfff17 	ldw	r2,-4(fp)
   24a14:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   24a18:	e0bffd17 	ldw	r2,-12(fp)
   24a1c:	10800017 	ldw	r2,0(r2)
   24a20:	e0fffd17 	ldw	r3,-12(fp)
   24a24:	18c00117 	ldw	r3,4(r3)
   24a28:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   24a2c:	e0bffd17 	ldw	r2,-12(fp)
   24a30:	10800117 	ldw	r2,4(r2)
   24a34:	e0fffd17 	ldw	r3,-12(fp)
   24a38:	18c00017 	ldw	r3,0(r3)
   24a3c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   24a40:	e0bffd17 	ldw	r2,-12(fp)
   24a44:	e0fffd17 	ldw	r3,-12(fp)
   24a48:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   24a4c:	e0bffd17 	ldw	r2,-12(fp)
   24a50:	e0fffd17 	ldw	r3,-12(fp)
   24a54:	10c00015 	stw	r3,0(r2)
   24a58:	e0bffb17 	ldw	r2,-20(fp)
   24a5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24a60:	e0bffe17 	ldw	r2,-8(fp)
   24a64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   24a68:	e037883a 	mov	sp,fp
   24a6c:	df000017 	ldw	fp,0(sp)
   24a70:	dec00104 	addi	sp,sp,4
   24a74:	f800283a 	ret

00024a78 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   24a78:	defffb04 	addi	sp,sp,-20
   24a7c:	dfc00415 	stw	ra,16(sp)
   24a80:	df000315 	stw	fp,12(sp)
   24a84:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   24a88:	d0a00917 	ldw	r2,-32732(gp)
   24a8c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   24a90:	d0a0c917 	ldw	r2,-31964(gp)
   24a94:	10800044 	addi	r2,r2,1
   24a98:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24a9c:	00002e06 	br	24b58 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   24aa0:	e0bffd17 	ldw	r2,-12(fp)
   24aa4:	10800017 	ldw	r2,0(r2)
   24aa8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   24aac:	e0bffd17 	ldw	r2,-12(fp)
   24ab0:	10800403 	ldbu	r2,16(r2)
   24ab4:	10803fcc 	andi	r2,r2,255
   24ab8:	10000426 	beq	r2,zero,24acc <alt_tick+0x54>
   24abc:	d0a0c917 	ldw	r2,-31964(gp)
   24ac0:	1000021e 	bne	r2,zero,24acc <alt_tick+0x54>
    {
      alarm->rollover = 0;
   24ac4:	e0bffd17 	ldw	r2,-12(fp)
   24ac8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   24acc:	e0bffd17 	ldw	r2,-12(fp)
   24ad0:	10800217 	ldw	r2,8(r2)
   24ad4:	d0e0c917 	ldw	r3,-31964(gp)
   24ad8:	18801d36 	bltu	r3,r2,24b50 <alt_tick+0xd8>
   24adc:	e0bffd17 	ldw	r2,-12(fp)
   24ae0:	10800403 	ldbu	r2,16(r2)
   24ae4:	10803fcc 	andi	r2,r2,255
   24ae8:	1000191e 	bne	r2,zero,24b50 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   24aec:	e0bffd17 	ldw	r2,-12(fp)
   24af0:	10800317 	ldw	r2,12(r2)
   24af4:	e0fffd17 	ldw	r3,-12(fp)
   24af8:	18c00517 	ldw	r3,20(r3)
   24afc:	1809883a 	mov	r4,r3
   24b00:	103ee83a 	callr	r2
   24b04:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   24b08:	e0bfff17 	ldw	r2,-4(fp)
   24b0c:	1000031e 	bne	r2,zero,24b1c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   24b10:	e13ffd17 	ldw	r4,-12(fp)
   24b14:	00249e00 	call	249e0 <alt_alarm_stop>
   24b18:	00000d06 	br	24b50 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   24b1c:	e0bffd17 	ldw	r2,-12(fp)
   24b20:	10c00217 	ldw	r3,8(r2)
   24b24:	e0bfff17 	ldw	r2,-4(fp)
   24b28:	1887883a 	add	r3,r3,r2
   24b2c:	e0bffd17 	ldw	r2,-12(fp)
   24b30:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   24b34:	e0bffd17 	ldw	r2,-12(fp)
   24b38:	10c00217 	ldw	r3,8(r2)
   24b3c:	d0a0c917 	ldw	r2,-31964(gp)
   24b40:	1880032e 	bgeu	r3,r2,24b50 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   24b44:	e0bffd17 	ldw	r2,-12(fp)
   24b48:	00c00044 	movi	r3,1
   24b4c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   24b50:	e0bffe17 	ldw	r2,-8(fp)
   24b54:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   24b58:	e0fffd17 	ldw	r3,-12(fp)
   24b5c:	d0a00904 	addi	r2,gp,-32732
   24b60:	18bfcf1e 	bne	r3,r2,24aa0 <__alt_data_end+0xffff3930>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   24b64:	0001883a 	nop
}
   24b68:	e037883a 	mov	sp,fp
   24b6c:	dfc00117 	ldw	ra,4(sp)
   24b70:	df000017 	ldw	fp,0(sp)
   24b74:	dec00204 	addi	sp,sp,8
   24b78:	f800283a 	ret

00024b7c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   24b7c:	deffff04 	addi	sp,sp,-4
   24b80:	df000015 	stw	fp,0(sp)
   24b84:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   24b88:	000170fa 	wrctl	ienable,zero
}
   24b8c:	e037883a 	mov	sp,fp
   24b90:	df000017 	ldw	fp,0(sp)
   24b94:	dec00104 	addi	sp,sp,4
   24b98:	f800283a 	ret

00024b9c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   24b9c:	defffb04 	addi	sp,sp,-20
   24ba0:	df000415 	stw	fp,16(sp)
   24ba4:	df000404 	addi	fp,sp,16
   24ba8:	e13ffe15 	stw	r4,-8(fp)
   24bac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   24bb0:	e0bfff17 	ldw	r2,-4(fp)
   24bb4:	10840070 	cmpltui	r2,r2,4097
   24bb8:	1000021e 	bne	r2,zero,24bc4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   24bbc:	00840004 	movi	r2,4096
   24bc0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   24bc4:	e0fffe17 	ldw	r3,-8(fp)
   24bc8:	e0bfff17 	ldw	r2,-4(fp)
   24bcc:	1885883a 	add	r2,r3,r2
   24bd0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24bd4:	e0bffe17 	ldw	r2,-8(fp)
   24bd8:	e0bffc15 	stw	r2,-16(fp)
   24bdc:	00000506 	br	24bf4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   24be0:	e0bffc17 	ldw	r2,-16(fp)
   24be4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   24be8:	e0bffc17 	ldw	r2,-16(fp)
   24bec:	10800804 	addi	r2,r2,32
   24bf0:	e0bffc15 	stw	r2,-16(fp)
   24bf4:	e0fffc17 	ldw	r3,-16(fp)
   24bf8:	e0bffd17 	ldw	r2,-12(fp)
   24bfc:	18bff836 	bltu	r3,r2,24be0 <__alt_data_end+0xffff3a70>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   24c00:	e0bffe17 	ldw	r2,-8(fp)
   24c04:	108007cc 	andi	r2,r2,31
   24c08:	10000226 	beq	r2,zero,24c14 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   24c0c:	e0bffc17 	ldw	r2,-16(fp)
   24c10:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   24c14:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   24c18:	e037883a 	mov	sp,fp
   24c1c:	df000017 	ldw	fp,0(sp)
   24c20:	dec00104 	addi	sp,sp,4
   24c24:	f800283a 	ret

00024c28 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   24c28:	defffe04 	addi	sp,sp,-8
   24c2c:	df000115 	stw	fp,4(sp)
   24c30:	df000104 	addi	fp,sp,4
   24c34:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   24c38:	e0bfff17 	ldw	r2,-4(fp)
   24c3c:	10bffe84 	addi	r2,r2,-6
   24c40:	10c00428 	cmpgeui	r3,r2,16
   24c44:	18001a1e 	bne	r3,zero,24cb0 <alt_exception_cause_generated_bad_addr+0x88>
   24c48:	100690ba 	slli	r3,r2,2
   24c4c:	008000b4 	movhi	r2,2
   24c50:	10931804 	addi	r2,r2,19552
   24c54:	1885883a 	add	r2,r3,r2
   24c58:	10800017 	ldw	r2,0(r2)
   24c5c:	1000683a 	jmp	r2
   24c60:	00024ca0 	cmpeqi	zero,zero,2354
   24c64:	00024ca0 	cmpeqi	zero,zero,2354
   24c68:	00024cb0 	cmpltui	zero,zero,2354
   24c6c:	00024cb0 	cmpltui	zero,zero,2354
   24c70:	00024cb0 	cmpltui	zero,zero,2354
   24c74:	00024ca0 	cmpeqi	zero,zero,2354
   24c78:	00024ca8 	cmpgeui	zero,zero,2354
   24c7c:	00024cb0 	cmpltui	zero,zero,2354
   24c80:	00024ca0 	cmpeqi	zero,zero,2354
   24c84:	00024ca0 	cmpeqi	zero,zero,2354
   24c88:	00024cb0 	cmpltui	zero,zero,2354
   24c8c:	00024ca0 	cmpeqi	zero,zero,2354
   24c90:	00024ca8 	cmpgeui	zero,zero,2354
   24c94:	00024cb0 	cmpltui	zero,zero,2354
   24c98:	00024cb0 	cmpltui	zero,zero,2354
   24c9c:	00024ca0 	cmpeqi	zero,zero,2354
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   24ca0:	00800044 	movi	r2,1
   24ca4:	00000306 	br	24cb4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   24ca8:	0005883a 	mov	r2,zero
   24cac:	00000106 	br	24cb4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   24cb0:	0005883a 	mov	r2,zero
  }
}
   24cb4:	e037883a 	mov	sp,fp
   24cb8:	df000017 	ldw	fp,0(sp)
   24cbc:	dec00104 	addi	sp,sp,4
   24cc0:	f800283a 	ret

00024cc4 <atexit>:
   24cc4:	200b883a 	mov	r5,r4
   24cc8:	000d883a 	mov	r6,zero
   24ccc:	0009883a 	mov	r4,zero
   24cd0:	000f883a 	mov	r7,zero
   24cd4:	0024cf81 	jmpi	24cf8 <__register_exitproc>

00024cd8 <exit>:
   24cd8:	defffe04 	addi	sp,sp,-8
   24cdc:	000b883a 	mov	r5,zero
   24ce0:	dc000015 	stw	r16,0(sp)
   24ce4:	dfc00115 	stw	ra,4(sp)
   24ce8:	2021883a 	mov	r16,r4
   24cec:	0024e3c0 	call	24e3c <__call_exitprocs>
   24cf0:	8009883a 	mov	r4,r16
   24cf4:	0024fd80 	call	24fd8 <_exit>

00024cf8 <__register_exitproc>:
   24cf8:	008000b4 	movhi	r2,2
   24cfc:	defff904 	addi	sp,sp,-28
   24d00:	1095ed04 	addi	r2,r2,22452
   24d04:	dd400515 	stw	r21,20(sp)
   24d08:	15400017 	ldw	r21,0(r2)
   24d0c:	dc000015 	stw	r16,0(sp)
   24d10:	dd000415 	stw	r20,16(sp)
   24d14:	ac000c17 	ldw	r16,48(r21)
   24d18:	dcc00315 	stw	r19,12(sp)
   24d1c:	dc800215 	stw	r18,8(sp)
   24d20:	dc400115 	stw	r17,4(sp)
   24d24:	dfc00615 	stw	ra,24(sp)
   24d28:	2025883a 	mov	r18,r4
   24d2c:	2823883a 	mov	r17,r5
   24d30:	3029883a 	mov	r20,r6
   24d34:	3827883a 	mov	r19,r7
   24d38:	8000021e 	bne	r16,zero,24d44 <__register_exitproc+0x4c>
   24d3c:	ac000d04 	addi	r16,r21,52
   24d40:	ac000c15 	stw	r16,48(r21)
   24d44:	80800117 	ldw	r2,4(r16)
   24d48:	00c007c4 	movi	r3,31
   24d4c:	18800d0e 	bge	r3,r2,24d84 <__register_exitproc+0x8c>
   24d50:	00800034 	movhi	r2,0
   24d54:	10800004 	addi	r2,r2,0
   24d58:	1000021e 	bne	r2,zero,24d64 <__register_exitproc+0x6c>
   24d5c:	00bfffc4 	movi	r2,-1
   24d60:	00002d06 	br	24e18 <__register_exitproc+0x120>
   24d64:	01002304 	movi	r4,140
   24d68:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24d6c:	1021883a 	mov	r16,r2
   24d70:	103ffa26 	beq	r2,zero,24d5c <__alt_data_end+0xffff3bec>
   24d74:	10000115 	stw	zero,4(r2)
   24d78:	a8800c17 	ldw	r2,48(r21)
   24d7c:	80800015 	stw	r2,0(r16)
   24d80:	ac000c15 	stw	r16,48(r21)
   24d84:	90001b26 	beq	r18,zero,24df4 <__register_exitproc+0xfc>
   24d88:	80802217 	ldw	r2,136(r16)
   24d8c:	1000091e 	bne	r2,zero,24db4 <__register_exitproc+0xbc>
   24d90:	00800034 	movhi	r2,0
   24d94:	10800004 	addi	r2,r2,0
   24d98:	103ff026 	beq	r2,zero,24d5c <__alt_data_end+0xffff3bec>
   24d9c:	01004204 	movi	r4,264
   24da0:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24da4:	103fed26 	beq	r2,zero,24d5c <__alt_data_end+0xffff3bec>
   24da8:	10004015 	stw	zero,256(r2)
   24dac:	10004115 	stw	zero,260(r2)
   24db0:	80802215 	stw	r2,136(r16)
   24db4:	81400117 	ldw	r5,4(r16)
   24db8:	01000044 	movi	r4,1
   24dbc:	2947883a 	add	r3,r5,r5
   24dc0:	18c7883a 	add	r3,r3,r3
   24dc4:	10c7883a 	add	r3,r2,r3
   24dc8:	1d000015 	stw	r20,0(r3)
   24dcc:	214a983a 	sll	r5,r4,r5
   24dd0:	11004017 	ldw	r4,256(r2)
   24dd4:	2148b03a 	or	r4,r4,r5
   24dd8:	11004015 	stw	r4,256(r2)
   24ddc:	1cc02015 	stw	r19,128(r3)
   24de0:	00c00084 	movi	r3,2
   24de4:	90c0031e 	bne	r18,r3,24df4 <__register_exitproc+0xfc>
   24de8:	10c04117 	ldw	r3,260(r2)
   24dec:	194ab03a 	or	r5,r3,r5
   24df0:	11404115 	stw	r5,260(r2)
   24df4:	80800117 	ldw	r2,4(r16)
   24df8:	10c00044 	addi	r3,r2,1
   24dfc:	10800084 	addi	r2,r2,2
   24e00:	1085883a 	add	r2,r2,r2
   24e04:	1085883a 	add	r2,r2,r2
   24e08:	80c00115 	stw	r3,4(r16)
   24e0c:	80a1883a 	add	r16,r16,r2
   24e10:	84400015 	stw	r17,0(r16)
   24e14:	0005883a 	mov	r2,zero
   24e18:	dfc00617 	ldw	ra,24(sp)
   24e1c:	dd400517 	ldw	r21,20(sp)
   24e20:	dd000417 	ldw	r20,16(sp)
   24e24:	dcc00317 	ldw	r19,12(sp)
   24e28:	dc800217 	ldw	r18,8(sp)
   24e2c:	dc400117 	ldw	r17,4(sp)
   24e30:	dc000017 	ldw	r16,0(sp)
   24e34:	dec00704 	addi	sp,sp,28
   24e38:	f800283a 	ret

00024e3c <__call_exitprocs>:
   24e3c:	008000b4 	movhi	r2,2
   24e40:	1095ed04 	addi	r2,r2,22452
   24e44:	10800017 	ldw	r2,0(r2)
   24e48:	defff304 	addi	sp,sp,-52
   24e4c:	ddc00a15 	stw	r23,40(sp)
   24e50:	d8800015 	stw	r2,0(sp)
   24e54:	05c00034 	movhi	r23,0
   24e58:	10800c04 	addi	r2,r2,48
   24e5c:	dc800515 	stw	r18,20(sp)
   24e60:	dfc00c15 	stw	ra,48(sp)
   24e64:	df000b15 	stw	fp,44(sp)
   24e68:	dd800915 	stw	r22,36(sp)
   24e6c:	dd400815 	stw	r21,32(sp)
   24e70:	dd000715 	stw	r20,28(sp)
   24e74:	dcc00615 	stw	r19,24(sp)
   24e78:	dc400415 	stw	r17,16(sp)
   24e7c:	dc000315 	stw	r16,12(sp)
   24e80:	d9000115 	stw	r4,4(sp)
   24e84:	2825883a 	mov	r18,r5
   24e88:	d8800215 	stw	r2,8(sp)
   24e8c:	bdc00004 	addi	r23,r23,0
   24e90:	d8800017 	ldw	r2,0(sp)
   24e94:	dc400217 	ldw	r17,8(sp)
   24e98:	14c00c17 	ldw	r19,48(r2)
   24e9c:	98004226 	beq	r19,zero,24fa8 <__call_exitprocs+0x16c>
   24ea0:	9c000117 	ldw	r16,4(r19)
   24ea4:	00900034 	movhi	r2,16384
   24ea8:	10bfffc4 	addi	r2,r2,-1
   24eac:	9d002217 	ldw	r20,136(r19)
   24eb0:	857fffc4 	addi	r21,r16,-1
   24eb4:	80a1883a 	add	r16,r16,r2
   24eb8:	8421883a 	add	r16,r16,r16
   24ebc:	8421883a 	add	r16,r16,r16
   24ec0:	a42d883a 	add	r22,r20,r16
   24ec4:	84000204 	addi	r16,r16,8
   24ec8:	9c21883a 	add	r16,r19,r16
   24ecc:	a8002616 	blt	r21,zero,24f68 <__call_exitprocs+0x12c>
   24ed0:	90000326 	beq	r18,zero,24ee0 <__call_exitprocs+0xa4>
   24ed4:	a0002026 	beq	r20,zero,24f58 <__call_exitprocs+0x11c>
   24ed8:	b1002017 	ldw	r4,128(r22)
   24edc:	24801e1e 	bne	r4,r18,24f58 <__call_exitprocs+0x11c>
   24ee0:	99000117 	ldw	r4,4(r19)
   24ee4:	82000017 	ldw	r8,0(r16)
   24ee8:	213fffc4 	addi	r4,r4,-1
   24eec:	a900021e 	bne	r21,r4,24ef8 <__call_exitprocs+0xbc>
   24ef0:	9d400115 	stw	r21,4(r19)
   24ef4:	00000106 	br	24efc <__call_exitprocs+0xc0>
   24ef8:	80000015 	stw	zero,0(r16)
   24efc:	40001626 	beq	r8,zero,24f58 <__call_exitprocs+0x11c>
   24f00:	9f000117 	ldw	fp,4(r19)
   24f04:	a0000526 	beq	r20,zero,24f1c <__call_exitprocs+0xe0>
   24f08:	00800044 	movi	r2,1
   24f0c:	1552983a 	sll	r9,r2,r21
   24f10:	a1404017 	ldw	r5,256(r20)
   24f14:	494a703a 	and	r5,r9,r5
   24f18:	2800021e 	bne	r5,zero,24f24 <__call_exitprocs+0xe8>
   24f1c:	403ee83a 	callr	r8
   24f20:	00000906 	br	24f48 <__call_exitprocs+0x10c>
   24f24:	a1004117 	ldw	r4,260(r20)
   24f28:	4908703a 	and	r4,r9,r4
   24f2c:	2000041e 	bne	r4,zero,24f40 <__call_exitprocs+0x104>
   24f30:	d9000117 	ldw	r4,4(sp)
   24f34:	b1400017 	ldw	r5,0(r22)
   24f38:	403ee83a 	callr	r8
   24f3c:	00000206 	br	24f48 <__call_exitprocs+0x10c>
   24f40:	b1000017 	ldw	r4,0(r22)
   24f44:	403ee83a 	callr	r8
   24f48:	99000117 	ldw	r4,4(r19)
   24f4c:	e13fd01e 	bne	fp,r4,24e90 <__alt_data_end+0xffff3d20>
   24f50:	89000017 	ldw	r4,0(r17)
   24f54:	24ffce1e 	bne	r4,r19,24e90 <__alt_data_end+0xffff3d20>
   24f58:	ad7fffc4 	addi	r21,r21,-1
   24f5c:	b5bfff04 	addi	r22,r22,-4
   24f60:	843fff04 	addi	r16,r16,-4
   24f64:	003fd906 	br	24ecc <__alt_data_end+0xffff3d5c>
   24f68:	b8000f26 	beq	r23,zero,24fa8 <__call_exitprocs+0x16c>
   24f6c:	99000117 	ldw	r4,4(r19)
   24f70:	20000a1e 	bne	r4,zero,24f9c <__call_exitprocs+0x160>
   24f74:	99000017 	ldw	r4,0(r19)
   24f78:	20000826 	beq	r4,zero,24f9c <__call_exitprocs+0x160>
   24f7c:	89000015 	stw	r4,0(r17)
   24f80:	a0000226 	beq	r20,zero,24f8c <__call_exitprocs+0x150>
   24f84:	a009883a 	mov	r4,r20
   24f88:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24f8c:	9809883a 	mov	r4,r19
   24f90:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   24f94:	8cc00017 	ldw	r19,0(r17)
   24f98:	003fc006 	br	24e9c <__alt_data_end+0xffff3d2c>
   24f9c:	9823883a 	mov	r17,r19
   24fa0:	9cc00017 	ldw	r19,0(r19)
   24fa4:	003fbd06 	br	24e9c <__alt_data_end+0xffff3d2c>
   24fa8:	dfc00c17 	ldw	ra,48(sp)
   24fac:	df000b17 	ldw	fp,44(sp)
   24fb0:	ddc00a17 	ldw	r23,40(sp)
   24fb4:	dd800917 	ldw	r22,36(sp)
   24fb8:	dd400817 	ldw	r21,32(sp)
   24fbc:	dd000717 	ldw	r20,28(sp)
   24fc0:	dcc00617 	ldw	r19,24(sp)
   24fc4:	dc800517 	ldw	r18,20(sp)
   24fc8:	dc400417 	ldw	r17,16(sp)
   24fcc:	dc000317 	ldw	r16,12(sp)
   24fd0:	dec00d04 	addi	sp,sp,52
   24fd4:	f800283a 	ret

00024fd8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   24fd8:	defffd04 	addi	sp,sp,-12
   24fdc:	df000215 	stw	fp,8(sp)
   24fe0:	df000204 	addi	fp,sp,8
   24fe4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   24fe8:	0001883a 	nop
   24fec:	e0bfff17 	ldw	r2,-4(fp)
   24ff0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   24ff4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   24ff8:	10000226 	beq	r2,zero,25004 <_exit+0x2c>
    ALT_SIM_FAIL();
   24ffc:	002af070 	cmpltui	zero,zero,43969
   25000:	00000106 	br	25008 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   25004:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   25008:	003fff06 	br	25008 <__alt_data_end+0xffff3e98>
